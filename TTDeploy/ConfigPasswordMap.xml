<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="ConfigPasswordTOMap">

	<!-- Use ConfigPasswordTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertConfigPasswordTO" inline-parameters="true">
        INSERT INTO PARAMETERS
        (PASSWORD_NEVER_EXPIRE, PASSWORD_EXPIRY, MIN_LENGTH, MAX_LENGTH, SPECIAL_CHARS, 
        UPPERCASE_CHARS, NUMBER_CHARS, SHOULD_NOT_LASTPWD, CHANGE_PWD_FIRST, USER_CANNOT_CHANGEPWD, 
        USER_ACCT_LOCKED, NO_OF_ATTEMPTS, RETIREMENT_AGE, MINOR_AGE, AUTHORIZE_STATUS, AUTHORIZE_BY, 
        AUTHORIZE_DT, STATUS_BY, STATUS_DT, CASH_AC_HD, IBR_AC_HD, HEAD_OFFICE, DAY_END_TYPE, INTERBRANCHONHOLIDAY,PAN_AMOUNT,NOMINAL_MEM_FEE,ALLOW_AUTH_BY_STAFF,LOGOUT_TIME
        ) VALUES (
        #passwordNeverExpire:VARCHAR#, #passwordExpiry:NUMERIC#, #minLength:NUMERIC#, #maxLength:NUMERIC#, 
        #specialChars:NUMERIC#, #uppercaseChars:NUMERIC#, #numberChars:NUMERIC#, #shouldNotLastpwd:NUMERIC#, 
        #changePwdFirst:VARCHAR#, #userCannotChangepwd:VARCHAR#, #userAcctLocked:VARCHAR#, 
        #noOfAttempts:NUMERIC#, #retirementAge:NUMERIC#, #minorAge:NUMERIC#, #authorizeStatus:VARCHAR#, 
        #authorizeBy:VARCHAR#, #authorizeDt:DATE#, #statusBy:VARCHAR#, #statusDt:DATE#, #cashAcHd:VARCHAR#, 
        #ibrAcHd:VARCHAR#, #cboBranches:VARCHAR#, #dayEndType:VARCHAR#, #interBranchOnHoliday:VARCHAR#,#panAmount:NUMERIC#,#nominalMemFee:NUMERIC#,#allowAuth:VARCHAR#,#logOutTime:NUMERIC#)
    </mapped-statement>

	<!-- Use ConfigPasswordTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateConfigPasswordTO" inline-parameters="true">
        UPDATE PARAMETERS SET 
        PASSWORD_NEVER_EXPIRE = #passwordNeverExpire:VARCHAR#,
        PASSWORD_EXPIRY = #passwordExpiry:NUMERIC#,
        MIN_LENGTH = #minLength:NUMERIC#,
        MAX_LENGTH = #maxLength:NUMERIC#,
        SPECIAL_CHARS = #specialChars:NUMERIC#,
        UPPERCASE_CHARS = #uppercaseChars:NUMERIC#,
        NUMBER_CHARS = #numberChars:NUMERIC#,
        SHOULD_NOT_LASTPWD = #shouldNotLastpwd:NUMERIC#,
        CHANGE_PWD_FIRST = #changePwdFirst:VARCHAR#,
        USER_CANNOT_CHANGEPWD = #userCannotChangepwd:VARCHAR#,
        USER_ACCT_LOCKED = #userAcctLocked:VARCHAR#,
        NO_OF_ATTEMPTS = #noOfAttempts:NUMERIC#,
        RETIREMENT_AGE = #retirementAge:NUMERIC#,
        MINOR_AGE = #minorAge:NUMERIC#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        AUTHORIZE_BY = #authorizeBy:VARCHAR#,
        AUTHORIZE_DT = #authorizeDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        CASH_AC_HD = #cashAcHd:VARCHAR#,
        IBR_AC_HD = #ibrAcHd:VARCHAR#,
        HEAD_OFFICE = #cboBranches:VARCHAR#,
        DAY_END_TYPE = #dayEndType:VARCHAR#,
        PAN_AMOUNT=#panAmount:NUMERIC#,
        INTERBRANCHONHOLIDAY = #interBranchOnHoliday:VARCHAR#,
        NOMINAL_MEM_FEE=#nominalMemFee:NUMERIC#,
        ALLOW_AUTH_BY_STAFF=#allowAuth:VARCHAR#,
        LOGOUT_TIME=#logOutTime:NUMERIC#
    </mapped-statement>	

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to ConfigPasswordTO object (JavaBean) properties -->
    <result-map name="getConfigPasswordTOResult" class="com.see.truetransact.transferobject.sysadmin.config.ConfigPasswordTO">
        <property name="passwordNeverExpire" column="PASSWORD_NEVER_EXPIRE"/>
        <property name="passwordExpiry" column="PASSWORD_EXPIRY"/>
        <property name="minLength" column="MIN_LENGTH"/>
        <property name="maxLength" column="MAX_LENGTH"/>
        <property name="specialChars" column="SPECIAL_CHARS"/>
        <property name="uppercaseChars" column="UPPERCASE_CHARS"/>
        <property name="numberChars" column="NUMBER_CHARS"/>
        <property name="shouldNotLastpwd" column="SHOULD_NOT_LASTPWD"/>
        <property name="changePwdFirst" column="CHANGE_PWD_FIRST"/>
        <property name="userCannotChangepwd" column="USER_CANNOT_CHANGEPWD"/>
        <property name="userAcctLocked" column="USER_ACCT_LOCKED"/>
        <property name="noOfAttempts" column="NO_OF_ATTEMPTS"/>
        <property name="retirementAge" column="RETIREMENT_AGE"/>
        <property name="minorAge" column="MINOR_AGE"/>
        <property name="cashAcHd" column="CASH_AC_HD"/>
        <property name="ibrAcHd" column="IBR_AC_HD"/>
        <property name="cboBranches" column="HEAD_OFFICE"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="dayEndType" column="DAY_END_TYPE"/>
        <property name="interBranchOnHoliday" column="INTERBRANCHONHOLIDAY"/>
        <property name="panAmount" column="PAN_AMOUNT"/>
        <property name="yearEndProcessDt" column="YEAREND_PROCESS_DT"/>
        <property name="nominalMemFee" column="NOMINAL_MEM_FEE"/>
        <property name="allowAuth" column="ALLOW_AUTH_BY_STAFF"/>
        <property name="cashierAuthAllowed" column="CASHIER_AUTH_ALLOWED"/>
        <property name="multiShareAllowed" column="MULTI_SHARE_ALLOWED"/>
        <property name="tokenNoReq" column="TOKEN_NO_REQ"/>
        <property name="serviceTaxReq" column="SERVICE_TAX_REQ"/>
        <property name="gahanPeriod" column="GAHAN_PERIOD"/>
        <property name="seniorCitizenAge" column="SENIOR_CITIZEN_AGE"/>
        <property name="amcFromDt" column="AMC_FROM_DT"/>
        <property name="amcToDt" column="AMC_TO_DT"/>
        <property name="amcAlertTime" column="AMC_ALERT_TIME"/>
        <property name="pendingTxnAllowedDays" column="PENDING_TXN_ALLOWED_DAYS"/>
        <property name="logOutTime" column="LOGOUT_TIME"/>
        <property name="smsAllowed" column="SMS_ALLOWED"/>
    </result-map>
	
    <dynamic-mapped-statement name="getSelectConfigPasswordTO" result-map="getConfigPasswordTOResult" >
        SELECT * FROM PARAMETERS 		 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="WHERE" property="USER_ID">
                    (AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED') OR AUTHORIZE_STATUS IS NULL)
                    AND STATUS_BY != #USER_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent> 
        </dynamic>
    </dynamic-mapped-statement>  
    
     
        <!-- This mapped Statement is used to populate the Account Head Fields in the UI -->   
    <dynamic-mapped-statement name="getSelectActHdId" result-class="java.util.LinkedHashMap">
        SELECT AP.AC_HD_ID,  A.AC_HD_DESC FROM AC_HD_PARAM  AP, AC_HD A WHERE AP.STATUS NOT IN ('DELETED') AND AP.AUTHORIZE_STATUS IN ('AUTHORIZED') AND A.AC_HD_ID = AP.AC_HD_ID
    <dynamic>
                <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="AC_HD_ID">
                    UPPER(AP.AC_HD_ID) LIKE UPPER('%$AC_HD_ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="AC_HD_DESC">
                    UPPER(A.AC_HD_DESC) LIKE UPPER('%$AC_HD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
   </dynamic-mapped-statement>
        
      
        <!-- ======================================Autorization==============================================  -->        
 
    <mapped-statement name="authorizeConfigPasswordData" result-class="java.util.HashMap">
        UPDATE PARAMETERS SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#
    </mapped-statement>
        
        <!--==========================================================================================================-->
    <mapped-statement name="insertSIChargesHeadTO" inline-parameters="true">
        INSERT INTO SI_CHARGES_AC_HD
        (SI_COM_HD, REMIT_CHARGE_HD, ACCEPT_CHARGE_HD, EXEC_CHARGE_HD,FAIL_CHARGE_HD,SERVICE_TAX_HD,SI_FAILURE_ST,NMF_HD
        ) VALUES (
        #siChargesHd:VARCHAR#, #remitChargesHd:VARCHAR#, #acceptChargesHd:VARCHAR#, #execChargesHd:VARCHAR#, #failChargesHd:VARCHAR#, #serviceTaxHd:VARCHAR#, #serviceTax:VARCHAR#,#nmfAcHd:VARCHAR#)
    </mapped-statement>

	<!-- Use SIChargesHeadTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateSIChargesHeadTO" inline-parameters="true">
        UPDATE SI_CHARGES_AC_HD SET 
        SI_COM_HD = #siChargesHd:VARCHAR#,
        REMIT_CHARGE_HD = #remitChargesHd:VARCHAR#,
        ACCEPT_CHARGE_HD = #acceptChargesHd:VARCHAR#,
        EXEC_CHARGE_HD = #execChargesHd:VARCHAR#,
        FAIL_CHARGE_HD = #failChargesHd:VARCHAR#,
        SERVICE_TAX_HD = #serviceTaxHd:VARCHAR#,
        SI_FAILURE_ST = #serviceTax:VARCHAR#,
        NMF_HD = #nmfAcHd:VARCHAR#
    </mapped-statement>	

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to SIChargesHeadTO object (JavaBean) properties -->
    <result-map name="getSIChargesHeadTOResult" class="com.see.truetransact.transferobject.sysadmin.config.SIChargesHeadTO">
        <property name="siChargesHd" column="SI_COM_HD"/>
        <property name="remitChargesHd" column="REMIT_CHARGE_HD"/>
        <property name="acceptChargesHd" column="ACCEPT_CHARGE_HD"/>
        <property name="execChargesHd" column="EXEC_CHARGE_HD"/>
        <property name="failChargesHd" column="FAIL_CHARGE_HD"/>
        <property name="serviceTaxHd" column="SERVICE_TAX_HD"/>
        <property name="serviceTax" column="SI_FAILURE_ST"/>
        <property name="nmfAcHd" column="NMF_HD"/>
    </result-map>
	
    <mapped-statement name="getSelectSIChargesHeadTO" result-map="getSIChargesHeadTOResult" >
        SELECT * FROM SI_CHARGES_AC_HD 		 
    </mapped-statement>   
        
    <mapped-statement name="getServicePeriodTO" result-class="java.util.LinkedHashMap">
        select EFFECTIVE_FROM,EMP_SERVICE_PERIOD FROM emp_service_period  where EFFECTIVE_FROM=(SELECT MAX(EFFECTIVE_FROM) FROM emp_service_period)
    </mapped-statement>
        
    <mapped-statement name="insertServicePeriod" inline-parameters="true">
        INSERT INTO emp_service_period
        (EFFECTIVE_FROM, EMP_SERVICE_PERIOD
        ) VALUES (
        #effectiveFrom:DATE#, #servicePeriod:VARCHAR#)
    </mapped-statement>
        
        
    <mapped-statement name="UpdateServicePeriod" inline-parameters="true">
        UPDATE emp_service_period SET 
        EFFECTIVE_FROM= #effectiveFrom:DATE#,
        EMP_SERVICE_PERIOD = #servicePeriod:VARCHAR#
        where EFFECTIVE_FROM=(select max(EFFECTIVE_FROM) from emp_service_period)
		
    </mapped-statement>	

	<dynamic-mapped-statement name="getSelectCbmsParameterValues" result-class="java.util.LinkedHashMap">
        SELECT CBMS_KEY,CBMS_VALUE FROM CBMS_PARAMETERS
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="" property="CBMS_KEY">
                    WHERE CBMS_KEY = #CBMS_KEY:VARCHAR#
                </isNotNull>
            </isParameterPresent>        
        </dynamic>
    </dynamic-mapped-statement>

</sql-map>