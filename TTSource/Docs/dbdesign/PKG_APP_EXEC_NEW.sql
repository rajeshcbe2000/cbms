CREATE TABLE ACT_INTR_CALC
(
  BRANCH_ID  VARCHAR2(5 BYTE),
  ACT_NUM    VARCHAR2(15 BYTE),
  DT         DATE,
  TDT        DATE,
  AMT        NUMBER(19,2),
  RT         NUMBER(19,2),
  MNTH       INTEGER,
  YR         INTEGER,
  INTRAMT    NUMBER(19,2),
  USER_NAME  VARCHAR2(75 BYTE),
  SAVEDATE   DATE                               DEFAULT sysdate,
  BATCH_ID   VARCHAR2(15 BYTE),
  FR_DT      DATE,
  TO_DT      DATE,
  PROD_ID    VARCHAR2(3 BYTE)
);


CREATE INDEX ACTINTRC001 ON ACT_INTR_CALC(BRANCH_ID, DT, TDT, PROD_ID);


CREATE TABLE ACT_INTR_CALC_ACT
(
  BRANCH_ID  VARCHAR2(5 BYTE),
  ACT_NUM    VARCHAR2(15 BYTE),
  DT         DATE,
  TDT        DATE,
  INTAMT     NUMBER(19,2),
  USER_NAME  VARCHAR2(75 BYTE),
  SAVEDATE   DATE                               DEFAULT sysdate,
  BATCH_ID   VARCHAR2(15 BYTE),
  SINGLTRID  VARCHAR2(15 BYTE),
  TRID       INTEGER,
  POSTED     INTEGER,
  PROD_ID    VARCHAR2(3 BYTE)
);

COMMENT ON COLUMN ACT_INTR_CALC_ACT.POSTED IS '0 CANCELED, NULL PROCESSED, 1 POSTED';



CREATE INDEX ACTINTR001 ON ACT_INTR_CALC_ACT(BRANCH_ID, DT, TDT, PROD_ID);
 


  CREATE INDEX ACTINTR001   ON ACT_INTR_CALC_ACT (BRANCH_ID, DT,TDT,PROD_ID);
  
   CREATE INDEX ACTINTRC001   ON ACT_INTR_CALC  (BRANCH_ID, DT,TDT,PROD_ID);
   
   

CREATE OR REPLACE PACKAGE PKG_APP_EXEC
AS

  ---- SELECT  PKG_APP_EXEC.APP_EXEC_VALIDATE ('1','0001','106','01sep2018','28 feb 2019','admin') FROM DUAL;

  ---- SELECT  PKG_APP_EXEC.APP_EXEC_PROCESS ('1','0001','106','01sep2018','28 feb 2019','admin') FROM DUAL;
  
  --- SELECT  PKG_APP_EXEC.APP_EXEC_POST ('1','0001','106','01sep2018','28 feb 2019','01MAR2019','admin') FROM DUAL;
  
  --- SELECT  PKG_APP_EXEC.OPERATIVE_INT_POST_REVERSE ('0001','110','01APR2018','31MAR2019','31MAR2019','admin') FROM DUAL;
  
 
     FUNCTION  APP_EXEC_VALIDATE(EXCTYPE VARCHAR2,BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2; 
     FUNCTION  APP_EXEC_PROCESS (EXCTYPE VARCHAR2,BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
     FUNCTION  APP_EXEC_POST (EXCTYPE VARCHAR2,BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,CURRDT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
 
 ---OPERATIVE FUNCTIONS
   
     --FUNCTION  ACT_INT_VALIDATE(PRODID VARCHAR2,FRDT DATE) RETURN VARCHAR2;  
     FUNCTION  ACT_INT_VALIDATE(BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2;  
     FUNCTION OPERATIVE_INT_CALC (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
     FUNCTION OPERATIVE_INT_CALC_MONTHLY (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
     FUNCTION OPERATIVE_INT_CALC_DAILY (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ; 
     FUNCTION OPERATIVE_INT_POST (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,CURRDT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
     FUNCTION OPERATIVE_INT_POST_REVERSE (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,CURRDT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
 ---OPERATIVE FUNCTIONS
 
END PKG_APP_EXEC;
/



CREATE OR REPLACE PACKAGE PKG_APP_EXEC
AS

  ---- SELECT  PKG_APP_EXEC.APP_EXEC_VALIDATE ('1','0001','106','01sep2018','28 feb 2019','admin') FROM DUAL;

  ---- SELECT  PKG_APP_EXEC.APP_EXEC_PROCESS ('1','0001','106','01sep2018','28 feb 2019','admin') FROM DUAL;
  
  --- SELECT  PKG_APP_EXEC.APP_EXEC_POST ('1','0001','106','01sep2018','28 feb 2019','01MAR2019','admin') FROM DUAL;
  
  --- SELECT  PKG_APP_EXEC.OPERATIVE_INT_POST_REVERSE ('0001','110','01APR2018','31MAR2019','31MAR2019','admin') FROM DUAL;
  
 
     FUNCTION  APP_EXEC_VALIDATE(EXCTYPE VARCHAR2,BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2; 
     FUNCTION  APP_EXEC_PROCESS (EXCTYPE VARCHAR2,BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
     FUNCTION  APP_EXEC_POST (EXCTYPE VARCHAR2,BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,CURRDT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
 
 ---OPERATIVE FUNCTIONS
   
     --FUNCTION  ACT_INT_VALIDATE(PRODID VARCHAR2,FRDT DATE) RETURN VARCHAR2;  
     FUNCTION  ACT_INT_VALIDATE(BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2;  
     FUNCTION OPERATIVE_INT_CALC (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
     FUNCTION OPERATIVE_INT_CALC_MONTHLY (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
     FUNCTION OPERATIVE_INT_CALC_DAILY (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ; 
     FUNCTION OPERATIVE_INT_POST (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,CURRDT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
     FUNCTION OPERATIVE_INT_POST_REVERSE (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,CURRDT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 ;
 ---OPERATIVE FUNCTIONS
 
END PKG_APP_EXEC;
/



CREATE OR REPLACE PACKAGE BODY PKG_APP_EXEC AS

FUNCTION  APP_EXEC_VALIDATE(EXCTYPE VARCHAR2,BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 IS
  MSG        VARCHAR2(500);
 BEGIN
 
      IF EXCTYPE ='1' THEN
      SELECT  ACT_INT_VALIDATE(BRCODE,PRODID,FRDT,TODT,USRNAM) INTO MSG FROM DUAL;
      END IF;      
      RETURN MSG;     
 END;
 
FUNCTION  APP_EXEC_PROCESS(EXCTYPE VARCHAR2,BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 IS
  MSG        VARCHAR2(250);
 BEGIN
 
      IF EXCTYPE ='1' THEN
        SELECT  OPERATIVE_INT_CALC(BRCODE,PRODID,FRDT,TODT,USRNAM) INTO MSG FROM DUAL;
      END IF;      
      RETURN MSG;     
 END;

FUNCTION  APP_EXEC_POST (EXCTYPE VARCHAR2,BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,CURRDT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 IS
  MSG        VARCHAR2(250);
 BEGIN
 
      IF EXCTYPE ='1' THEN
        SELECT  OPERATIVE_INT_POST (BRCODE,PRODID,FRDT,TODT,CURRDT,USRNAM) INTO MSG FROM DUAL;
      END IF;      
      RETURN MSG;     
 END;



 


---FUNCTION  ACT_INT_VALIDATE(PRODID VARCHAR2,FRDT DATE) RETURN VARCHAR2 IS 

FUNCTION  ACT_INT_VALIDATE(BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 IS 
  --  SELECT PKG_APP_EXEC. ACT_INT_VALIDATE ('0001','106','01APR2018','28feb2019','admin') FROM DUAL;
  MSG        VARCHAR2(500);
  CNT        INT;
  PRNACHD    VARCHAR2(15);
  INTACHD    VARCHAR2(15);
  STARTDY    VARCHAR2(2);
  MININTAMT  VARCHAR2(10); 
  INTID      VARCHAR2(15);  
  VALDATE    INT:=1;
  RT         NUMBER(5,2);
  MINCALAMT  NUMBER(5,2);
  PRODFREQINTPAY INT;
  INFRDT     DATE;
  INTODT     DATE;
  
 BEGIN 
 
    Select  OP.AC_HD_ID,CAST (OI.STARTDAY_PROD_CALC AS VARCHAR2(5)),CAST (OI.MIN_CR_INT_AMT  AS VARCHAR2(10)),OPP.CREDIT_INT,OI.MIN_BAL_FOR_INT_CALC, OI.PRODUCT_FREQ_INT_PAY INTO PRNACHD,STARTDY,MININTAMT,INTACHD,MINCALAMT ,PRODFREQINTPAY  
    FROM  OP_AC_PRODUCT OP  
    JOIN OP_AC_ACHEAD_PARAM OPP ON OPP.PROD_ID=OP.PROD_ID 
    JOIN OP_AC_INTPAY_PARAM OI ON OI.PROD_ID =OP.PROD_ID
    WHERE OP.PROD_ID=PRODID;
    
    select   ROI_GROUP_ID INTO  INTID  from DEPOSIT_ROI_GROUP_PROD WHERE PROD_ID =PRODID ;
       
    SELECT ROI  INTO  RT FROM 
    (select   ROI,RI.ROI_DATE,MAX(RI.ROI_DATE) OVER (ORDER BY RI.ROI_DATE) AS MAXRDT   FROM  DEPOSIT_ROI_GROUP_TYPE_RATE RI WHERE RI.ROI_GROUP_ID =INTID AND RI.ROI_DATE  <= FRDT)
    RTI WHERE RTI.MAXRDT =RTI.ROI_DATE;
     
    IF NVL(RT,0)=0 THEN
      VALDATE :=0;
       MSG :='Please set interest rate for this product Chr(10)';
    else
      MSG := 'Interest Rate ' ||RT ||'  Chr(10) ';    
    END IF;
    
    
 
     
     SELECT FRDT,TODT  INTO  INFRDT ,INTODT  FROM  (
     SELECT   DN.LAST_APPL_DT+1 AS FRDT,ADD_MONTHS(DN.LAST_APPL_DT, CASE WHEN ( CR_INT_APPL_FREQ =30) THEN 1 WHEN ( CR_INT_APPL_FREQ =90) THEN 3 WHEN ( CR_INT_APPL_FREQ =180) THEN 6 WHEN ( CR_INT_APPL_FREQ >360 AND 
     CR_INT_APPL_FREQ <=366) THEN 12 END)  AS  TODT,DN.BRANCH_CODE,DN.PROD_ID,DN.LAST_APPL_DT  FROM 
     ( SELECT    DP.BRANCH_CODE,DP.PROD_ID,LAST_APPL_DT, OI.CR_INT_APPL_FREQ ,MAX(LAST_APPL_DT) OVER (PARTITION BY  DP.BRANCH_CODE,DP.PROD_ID
     ORDER BY  DP.BRANCH_CODE,DP.PROD_ID ) AS MXINTAPP  FROM DEPOSIT_PROVISION DP,OP_AC_INTPAY_PARAM OI 
          WHERE DP.PROD_ID =OI.PROD_ID  AND DP.REMARKS ='APPLICATION')DN   WHERE     DN.LAST_APPL_DT = DN.MXINTAPP )PR          
          WHERE    BRANCH_CODE = BRCODE AND PROD_ID =PRODID  ;
          
     IF  INTODT > TODT THEN
        VALDATE :=0;
         MSG :=MSG||  'Invalid Interest calculation period = '|| TO_CHAR(INFRDT ,'DD/MM/YYYY'  )||' - '||TO_CHAR(INTODT  ,'DD/MM/YYYY'   ) || ' Chr(10) Check CR_INT_APPL_FREQ (OP_AC_INTPAY_PARAM) And Last Record DEPOSIT_PROVISION  Chr(10)';  
     ELSE        
       VALDATE :=1;   
       MSG :=MSG||  'Interest calculation period =' || TO_CHAR(INFRDT ,'DD/MM/YYYY'  )||' - '||TO_CHAR(INTODT  ,'DD/MM/YYYY'   ) || '   Chr(10)';  
     END IF;
    
 
  --  || TO_CHAR(INFRDT ,'DD/MM/YYYY'  )||', '||TO_CHAR(INTODT  ,'DD/MM/YYYY'   ) ||''
    
    
    SELECT COUNT(*) INTO CNT  FROM AC_HD WHERE AC_HD_ID =NVL(PRNACHD,'');
    
    IF  CNT=0   THEN
      VALDATE :=0;       
       MSG :=MSG||  'Please set Valid Princpal A/c head for this product  Chr(10)';  
    END IF; 
    SELECT COUNT(*) INTO CNT  FROM AC_HD WHERE AC_HD_ID =NVL(INTACHD,'');
    
    IF CNT=0 THEN
      VALDATE :=0;
       MSG :=MSG||  'Please set Valid Interest A/c head(CREDIT_INT) for this product in "OP_AC_ACHEAD_PARAM"  Chr(10)';
    END IF;    

  
    IF NVL(STARTDY,0)=0 AND NVL(PRODFREQINTPAY,0) = 30 THEN
      VALDATE :=0;
       MSG :=MSG||  'Please set Start day(STARTDAY_PROD_CALC) for this product in "OP_AC_INTPAY_PARAM"  Chr(10)';
    ELSIF NVL(PRODFREQINTPAY,0) = 30 THEN
       MSG := MSG|| 'Interest Calculation Start Day = '  ||STARTDY ||'  Chr(10) ';         
    END IF;    

   -- IF NVL(MININTAMT,0)=0 THEN       
       MSG :=MSG||  'Minumum int Amt IS  ' ||NVL(MININTAMT,0) ||'  Chr(10)';
    --END IF;        
    
     
       MSG :=MSG||  'Minumum Amt For calculation ' || NVL(MINCALAMT,0) ||'  Chr(10)';
 
    IF NVL(PRODFREQINTPAY,0) not in(1,30) THEN
      VALDATE :=0;
      MSG :=MSG||  'invalid Product int pay Fequency(PRODUCT_FREQ_INT_PAY) for this product in "OP_AC_INTPAY_PARAM"  Chr(10)';
    ELSIF NVL(PRODFREQINTPAY,0) = 1 THEN  
      MSG :=MSG||  'Interest Calculation Method = Daily Interest '  ;
    ELSIF NVL(PRODFREQINTPAY,0) = 30 THEN  
      MSG :=MSG||  'Interest Calculation Method = Monthly Minimum Balance  '  ; 
      
    END IF;
 
      
     
    MSG :=VALDATE ||'-'|| MSG ; 
    
     RETURN MSG;
     
 END;
 
 

 
 FUNCTION OPERATIVE_INT_CALC (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 IS
 MSG  VARCHAR2(250);
 PRODINTPAY INT;
 BEGIN
  
    Select  nvl(OI.PRODUCT_FREQ_INT_PAY,0) INTO    PRODINTPAY    FROM OP_AC_INTPAY_PARAM OI  WHERE OI.PROD_ID=PRODID;
   
      IF PRODINTPAY = 1 THEN
       SELECT    OPERATIVE_INT_CALC_DAILY (BRCODE,PRODID,FRDT,TODT,USRNAM) INTO MSG  FROM DUAL; 
      ELSIF PRODINTPAY = 30 THEN
         SELECT    OPERATIVE_INT_CALC_MONTHLY (BRCODE,PRODID,FRDT,TODT,USRNAM) INTO MSG  FROM DUAL; 
      END IF;
      
     RETURN MSG;
    EXCEPTION 
     WHEN OTHERS THEN
      RETURN 'Process Not Completed' ;
 
 END OPERATIVE_INT_CALC;
 
 FUNCTION OPERATIVE_INT_CALC_DAILY (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 IS
 PRAGMA AUTONOMOUS_TRANSACTION ;
   
 DT VARCHAR2(2);
 INTID VARCHAR2(15);
 ACHD  VARCHAR2(15);
 MINCRINT NUMBER(16,2):=0;
 MINCALCRAMT NUMBER(16,2):=0;
 BEGIN
          DELETE FROM ACT_INTR_CALC WHERE BRANCH_ID=BRCODE AND DT= FRDT AND TDT =TODT AND PROD_ID = PRODID ;
          COMMIT;
          DELETE FROM ACT_INTR_CALC_ACT WHERE BRANCH_ID=BRCODE AND DT= FRDT AND TDT =TODT AND PROD_ID = PRODID;
          COMMIT;
              Select  OP.AC_HD_ID,OI.MIN_CR_INT_AMT,nvl(OI.MIN_BAL_FOR_INT_CALC,0) INTO   ACHD,MINCRINT,MINCALCRAMT    FROM  OP_AC_PRODUCT OP  
    JOIN OP_AC_ACHEAD_PARAM OPP ON OPP.PROD_ID=OP.PROD_ID 
    JOIN OP_AC_INTPAY_PARAM OI ON OI.PROD_ID =OP.PROD_ID
    WHERE OP.PROD_ID=PRODID;
    
        select   ROI_GROUP_ID INTO  INTID  from DEPOSIT_ROI_GROUP_PROD WHERE PROD_ID =PRODID ;
    
  INSERT INTO ACT_INTR_CALC(BRANCH_ID,ACT_NUM,  DT ,  TDT,  AMT,  RT ,MNTH,YR,    INTRAMT,USER_NAME,FR_DT ,TO_DT,PROD_ID ) 
           
     WITH MNTS AS (SELECT  ROI_DATE  AS  MnthStrDt FROM  DEPOSIT_ROI_GROUP_TYPE_RATE DT WHERE DT.ROI_GROUP_ID =INTID AND DT.ROI_DATE  BETWEEN FRDT AND   TODT),   
      MST AS (SELECT ACT_NUM  FROM ACT_MASTER AM WHERE  AM.CREATE_DT < TODT AND   BRANCH_CODE = BRCODE AND  AM.PROD_ID =PRODID
       AND  AM.CLOSED_DT IS NULL AND AM.AUTHORIZATION_STATUS NOT IN('REJECTED')) ,
      TRANS AS(SELECT  ACT_NUM ,  FRDT-1  AS TRANS_DT ,AMT AS CRAMT, 0 DRAMT FROM
         (SELECT ACT_NUM ,DAY_END_DT,MAX(DAY_END_DT) OVER (PARTITION BY ACT_NUM)  AS LSTDAY_DT,AMT   FROM  ACT_DAYEND_BALANCE ADB WHERE 
         ADB.PROD_ID = PRODID AND DAY_END_DT < FRDT  AND  EXISTS(SELECT * FROM   MST WHERE MST.ACT_NUM =ADB.ACT_NUM)
       ) LD WHERE LD.LSTDAY_DT =DAY_END_DT AND LD.ACT_NUM=ACT_NUM      
         UNION ALL  
        SELECT ACT_NUM,CT.TRANS_DT,CASE WHEN TRANS_TYPE='CREDIT' THEN AMOUNT ELSE 0 END AS CRAMT,CASE WHEN TRANS_TYPE='DEBIT' THEN AMOUNT ELSE 0 END AS DRAMT   FROM CASH_TRANS CT   WHERE CT.TRANS_DT BETWEEN FRDT AND TODT AND
        CT.AUTHORIZE_STATUS='AUTHORIZED' AND CT.STATUS='CREATED' AND CT.AC_HD_ID =ACHD  AND CT.PROD_ID =PRODID 
        AND EXISTS(SELECT * FROM MST WHERE MST.ACT_NUM =CT.ACT_NUM)
        UNION ALL
        SELECT  ACT_NUM,TT.TRANS_DT,CASE WHEN TRANS_TYPE='CREDIT' THEN AMOUNT ELSE 0 END AS CRAMT,CASE WHEN TRANS_TYPE='DEBIT' THEN AMOUNT ELSE 0 END AS DRAMT   FROM TRANSFER_TRANS TT  WHERE TT.TRANS_DT BETWEEN FRDT AND TODT AND 
         TT.AUTHORIZE_STATUS='AUTHORIZED' AND TT.STATUS='CREATED' AND TT.AC_HD_ID =ACHD AND TT.PROD_ID =PRODID
         AND EXISTS(SELECT * FROM MST WHERE MST.ACT_NUM =TT.ACT_NUM)
          UNION ALL
         SELECT ACT_NUM ,CAST(MnthStrDt AS DATE) AS TRANS_DT ,0 AS CRAMT,0 AS DRAMT   FROM  MNTS, MST  ),       
    /*  ALLTR AS (SELECT  ACT_NUM ,   TRANS_DT ,CRAMT, DRAMT,SUM(CRAMT-DRAMT) OVER (PARTITION BY ACT_NUM ORDER BY ACT_NUM,TRANS_DT,DRAMT,CRAMT ) AS BAL FROM  TRANS
        ORDER BY ACT_NUM,TRANS_DT,DRAMT,CRAMT ) ,  FOR TRASACTIO WISE MIN BAL */
         ALLTR AS (SELECT  ACT_NUM ,   TRANS_DT,SUM(CRAMT-DRAMT) OVER (PARTITION BY ACT_NUM ORDER BY ACT_NUM,TRANS_DT ) AS BAL FROM  TRANS
          ORDER BY ACT_NUM,TRANS_DT  ),         
      ALLTRN AS (  SELECT ACT_NUM, AL.TRANS_DT,NVL(LEAD(AL.TRANS_DT) OVER (PARTITION BY ACT_NUM ORDER BY ACT_NUM,TRANS_DT ),TODT) AS NXTDT, BAL       FROM ALLTR AL
                   ORDER BY AL.ACT_NUM ,AL.TRANS_DT),  
       CALC AS (SELECT ACT_NUM,TRANS_DT,NXTDT, NXTDT-TRANS_DT AS NOOFDYS ,CASE WHEN BAL >  MINCALCRAMT    THEN BAL ELSE 0 END AS BAL ,       
        (SELECT  ROI FROM  DEPOSIT_ROI_GROUP_TYPE_RATE DT WHERE DT.ROI_GROUP_ID =INTID AND DT.ROI_DATE=(SELECT MAX(DR.ROI_DATE) FROM DEPOSIT_ROI_GROUP_TYPE_RATE DR
        WHERE DR.ROI_GROUP_ID =INTID AND  DR.ROI_DATE <=  AN.TRANS_DT )   ) AS ROI FROM ALLTRN AN  
        )       
       SELECT BRCODE AS BRANCH_ID, ACT_NUM,FRDT,TODT,BAL,ROI,NOOFDYS,0 AS YR , ((BAL*ROI*NOOFDYS)/36500.00)  AS INTRAMT,USRNAM,TRANS_DT,NXTDT,PRODID FROM CALC
        ORDER  BY ACT_NUM ;    
   
        COMMIT;
       
       INSERT INTO ACT_INTR_CALC_ACT (BRANCH_ID,ACT_NUM,DT,TDT,INTAMT,SAVEDATE,TRID,USER_NAME,PROD_ID)
       SELECT  BRANCH_ID,ACT_NUM,DT,TDT,INTAMT,SAVEDATE ,TRID,USRNAM,PRODID FROM
        (SELECT  BRANCH_ID,ACT_NUM,DT,TDT,ROUND(SUM(INTRAMT),0) AS INTAMT,SAVEDATE ,SUM(1) OVER (ORDER BY ACT_NUM) AS TRID,USRNAM  FROM ACT_INTR_CALC
        WHERE BRANCH_ID=BRCODE AND    DT= FRDT AND TDT =TODT AND PROD_ID = PRODID
        GROUP BY BRANCH_ID,ACT_NUM,DT,TDT,SAVEDATE)IT WHERE IT.INTAMT >=MINCRINT ;  
 
     
   COMMIT;    
      RETURN 'Processing successfully completed';
    EXCEPTION 
     WHEN OTHERS THEN
      RETURN 'Process Not Completed' ;      
       
  
 END OPERATIVE_INT_CALC_DAILY; 
 
 
 

FUNCTION OPERATIVE_INT_CALC_MONTHLY (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 IS
 PRAGMA AUTONOMOUS_TRANSACTION ;
 
 --- SELECT  PKG_APP_EXEC.OPERATIVE_INT_CALC ('0001','110','01APR2018','31DEC2018','admin') FROM DUAL;
  
 DT VARCHAR2(2);
 INTID VARCHAR2(15);
 ACHD  VARCHAR2(15);
 MINCRINT NUMBER(16,2):=0;
 MINCALCRAMT NUMBER(16,2):=0;

 BEGIN
          DELETE FROM ACT_INTR_CALC WHERE BRANCH_ID=BRCODE AND    DT= FRDT AND TDT =TODT AND PROD_ID = PRODID ;
          COMMIT;
          DELETE FROM ACT_INTR_CALC_ACT WHERE BRANCH_ID=BRCODE AND    DT= FRDT AND TDT =TODT AND PROD_ID = PRODID;
          COMMIT;
          
          
            Select  OP.AC_HD_ID,STARTDAY_PROD_CALC ,OI.MIN_CR_INT_AMT,nvl(OI.MIN_BAL_FOR_INT_CALC,0) INTO   ACHD,DT,MINCRINT,MINCALCRAMT   FROM  OP_AC_PRODUCT OP  
    JOIN OP_AC_ACHEAD_PARAM OPP ON OPP.PROD_ID=OP.PROD_ID 
    JOIN OP_AC_INTPAY_PARAM OI ON OI.PROD_ID =OP.PROD_ID
    WHERE OP.PROD_ID=PRODID;
   
    select   ROI_GROUP_ID INTO  INTID  from DEPOSIT_ROI_GROUP_PROD WHERE PROD_ID =PRODID ;
 
      INSERT INTO ACT_INTR_CALC(BRANCH_ID,ACT_NUM,  DT ,  TDT,  AMT,  RT ,MNTH,YR,    INTRAMT,USER_NAME,PROD_ID ) 
      WITH MNTS AS ( select TO_DATE((to_char( add_months( FRDT, level-1 ), 'yyyy' )||'-'||to_char( add_months( FRDT, level-1 ), 'MM' )||'-'||Dt),'YYYY-MM-DD')     as MnthStrDt,
          TO_DATE( last_day(add_months( FRDT, level-1 )), 'YYYY-MM-DD' ) as MnthEndDt
           from DUAL            connect by level <=  months_between(TODT ,FRDT) +1), 
      MST AS (SELECT ACT_NUM  FROM ACT_MASTER AM WHERE  AM.CREATE_DT < TODT AND   BRANCH_CODE = BRCODE AND  AM.PROD_ID =PRODID
       AND  AM.CLOSED_DT IS NULL AND AM.AUTHORIZATION_STATUS NOT IN('REJECTED')) ,
      TRANS AS(SELECT  ACT_NUM ,  FRDT   AS TRANS_DT ,AMT AS CRAMT, 0 DRAMT FROM
         (SELECT ACT_NUM ,DAY_END_DT,MAX(DAY_END_DT) OVER (PARTITION BY ACT_NUM)  AS LSTDAY_DT,AMT   FROM  ACT_DAYEND_BALANCE ADB WHERE 
         ADB.PROD_ID = PRODID AND DAY_END_DT < FRDT  AND  EXISTS(SELECT * FROM   MST WHERE MST.ACT_NUM =ADB.ACT_NUM)
       ) LD WHERE LD.LSTDAY_DT =DAY_END_DT AND LD.ACT_NUM=ACT_NUM      
         UNION ALL  
        SELECT ACT_NUM,CT.TRANS_DT,CASE WHEN TRANS_TYPE='CREDIT' THEN AMOUNT ELSE 0 END AS CRAMT,CASE WHEN TRANS_TYPE='DEBIT' THEN AMOUNT ELSE 0 END AS DRAMT   FROM CASH_TRANS CT   WHERE CT.TRANS_DT BETWEEN FRDT AND TODT AND
        CT.AUTHORIZE_STATUS='AUTHORIZED' AND CT.STATUS='CREATED' AND CT.AC_HD_ID =ACHD  AND CT.PROD_ID =PRODID 
        AND EXISTS(SELECT * FROM MST WHERE MST.ACT_NUM =CT.ACT_NUM)
        UNION ALL
        SELECT  ACT_NUM,TT.TRANS_DT,CASE WHEN TRANS_TYPE='CREDIT' THEN AMOUNT ELSE 0 END AS CRAMT,CASE WHEN TRANS_TYPE='DEBIT' THEN AMOUNT ELSE 0 END AS DRAMT   FROM TRANSFER_TRANS TT  WHERE TT.TRANS_DT BETWEEN FRDT AND TODT AND 
         TT.AUTHORIZE_STATUS='AUTHORIZED' AND TT.STATUS='CREATED' AND TT.AC_HD_ID =ACHD AND TT.PROD_ID =PRODID
         AND EXISTS(SELECT * FROM MST WHERE MST.ACT_NUM =TT.ACT_NUM)
          UNION ALL
         SELECT ACT_NUM ,CAST(MnthStrDt AS DATE) AS TRANS_DT ,0 AS CRAMT,0 AS DRAMT   FROM  MNTS, MST  ),       
    /*  ALLTR AS (SELECT  ACT_NUM ,   TRANS_DT ,CRAMT, DRAMT,SUM(CRAMT-DRAMT) OVER (PARTITION BY ACT_NUM ORDER BY ACT_NUM,TRANS_DT,DRAMT,CRAMT ) AS BAL FROM  TRANS
        ORDER BY ACT_NUM,TRANS_DT,DRAMT,CRAMT ) ,  FOR TRASACTIO WISE MIN BAL */
         ALLTR AS (SELECT  ACT_NUM ,   TRANS_DT,SUM(CRAMT-DRAMT) OVER (PARTITION BY ACT_NUM ORDER BY ACT_NUM,TRANS_DT ) AS BAL FROM  TRANS
          ORDER BY ACT_NUM,TRANS_DT  ),         
      ALLTRN AS (  SELECT ACT_NUM, EXTRACT(MONTH FROM AL.TRANS_DT) AS MNTHS,EXTRACT(YEAR FROM AL.TRANS_DT) AS YR ,MIN(BAL) AS MINBAL      FROM ALLTR AL
         WHERE   EXTRACT(DAY FROM AL.TRANS_DT)  >9  
              GROUP BY AL.ACT_NUM ,EXTRACT(MONTH FROM AL.TRANS_DT),EXTRACT(YEAR FROM AL.TRANS_DT)),  
       CALC AS (SELECT ACT_NUM,MNTHS,YR,CASE WHEN MINBAL >  MINCALCRAMT    THEN MINBAL ELSE 0 END AS MINBAL ,       
        (SELECT  ROI FROM  DEPOSIT_ROI_GROUP_TYPE_RATE DT WHERE DT.ROI_GROUP_ID =INTID AND DT.ROI_DATE=(SELECT MAX(DR.ROI_DATE) FROM DEPOSIT_ROI_GROUP_TYPE_RATE DR
        WHERE DR.ROI_GROUP_ID =INTID AND  DR.ROI_DATE <= TO_DATE(AN.YR ||'-'|| AN.MNTHS ||'-'||Dt,'YYYY-MM-DD')   )) AS ROI FROM ALLTRN AN  
        )       
       SELECT BRCODE AS BRANCH_ID, ACT_NUM,FRDT,TODT,MINBAL,ROI,MNTHS,YR , ((MINBAL*ROI)/1200.00)  AS INTRAMT,USRNAM,PRODID FROM CALC
        ORDER  BY ACT_NUM ; 
        
        COMMIT;
       
       INSERT INTO ACT_INTR_CALC_ACT (BRANCH_ID,ACT_NUM,DT,TDT,INTAMT,SAVEDATE,TRID,USER_NAME,PROD_ID)
       SELECT  BRANCH_ID,ACT_NUM,DT,TDT,INTAMT,SAVEDATE ,TRID,USRNAM,PRODID FROM
        (SELECT  BRANCH_ID,ACT_NUM,DT,TDT,ROUND(SUM(INTRAMT),0) AS INTAMT,SAVEDATE ,SUM(1) OVER (ORDER BY ACT_NUM) AS TRID,USRNAM FROM ACT_INTR_CALC
        WHERE BRANCH_ID=BRCODE AND    DT= FRDT AND TDT =TODT AND PROD_ID = PRODID
        GROUP BY BRANCH_ID,ACT_NUM,DT,TDT,SAVEDATE)IT WHERE IT.INTAMT >=MINCRINT ;  
      
     COMMIT;    
     RETURN 'Processing successfully completed';
    EXCEPTION 
     WHEN OTHERS THEN
      RETURN 'Process Not Completed' ;      
   
 END OPERATIVE_INT_CALC_MONTHLY;


FUNCTION OPERATIVE_INT_POST  (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,CURRDT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 IS
 PRAGMA AUTONOMOUS_TRANSACTION ;
   --- SELECT PKG_APP_EXEC.OPERATIVE_INT_POST ('0001','110','01APR2018','31DEC2018','16FEB2019','admin') FROM DUAL;
   
    --- SELECT OPERATIVE_INT_POST ('0001','110','01APR2018','31MAR2019','31MAR2019','admin') FROM DUAL;
    
 
     
     
    DYENDT DATE;  
    CNT  INT:=0;
    DRCNT NUMBER(12):=0;
    CRCNT NUMBER(12):=0;
    F_ACNO VARCHAR2(15);
    PART VARCHAR2(25);
    PGNO NUMBER(4);
    SRLNO NUMBER(5);
    CRACHD VARCHAR2(15);
    DRACHD VARCHAR2(15);    
    TOTAMT NUMBER(16,2):=0;
    BATCHID VARCHAR2(15);
    TRANSID VARCHAR2(15);
    SINGLEID VARCHAR2(15);
    SHIFTS VARCHAR2(25);
 
 BEGIN   
 
  Select  OP.AC_HD_ID, OPP.CREDIT_INT  INTO  CRACHD,DRACHD   FROM  OP_AC_PRODUCT OP  
    JOIN OP_AC_ACHEAD_PARAM OPP ON OPP.PROD_ID=OP.PROD_ID 
    WHERE OP.PROD_ID=PRODID;
 
  SELECT COUNT(*) INTO CNT  FROM ACT_INTR_CALC_ACT WHERE DT =FRDT AND   TDT = TODT   AND BRANCH_ID = BRCODE AND POSTED IS NULL AND PROD_ID = PRODID;
   
    IF CNT =0 THEN 
      RETURN   CNT ;  ---'No Data Found';
    END IF;  
  
   SELECT SUM(INTAMT) INTO TOTAMT  FROM ACT_INTR_CALC_ACT WHERE DT =FRDT AND   TDT = TODT   AND BRANCH_ID = BRCODE AND PROD_ID = PRODID;
  
  
  SELECT CURR_APPL_DT INTO DYENDT FROM DAY_END WHERE BRANCH_CODE=BRCODE; 
  
      IF CURRDT = DYENDT THEN   
      UPDATE ID_GENERATION   SET CURR_VALUE=CURR_VALUE+1   WHERE ID_KEY='TRANSFER.BATCH_ID' AND BRANCH_CODE=BRCODE;
      COMMIT;         
      SELECT  PREFIX||LPAD(CURR_VALUE,(ID_LENGTH-LENGTH(PREFIX)),'0') INTO BATCHID FROM ID_GENERATION  WHERE ID_KEY='TRANSFER.BATCH_ID' AND BRANCH_CODE=BRCODE;
      UPDATE ID_GENERATION  SET CURR_VALUE = CURR_VALUE+1    WHERE ID_KEY='GENERATE_LINK_ID' AND BRANCH_CODE=BRCODE;
      COMMIT;
      SELECT  PREFIX||LPAD(CURR_VALUE,(ID_LENGTH-LENGTH(PREFIX)),'0') INTO SINGLEID FROM ID_GENERATION  WHERE ID_KEY='GENERATE_LINK_ID' AND BRANCH_CODE=BRCODE;
            
      UPDATE ID_GENERATION   SET CURR_VALUE= CURR_VALUE+CNT+1    WHERE ID_KEY='TRANSFER_TRANS_ID' AND BRANCH_CODE=BRCODE;
      COMMIT;   
      SELECT   CURR_VALUE INTO TRANSID FROM ID_GENERATION  WHERE ID_KEY='TRANSFER_TRANS_ID' AND BRANCH_CODE=BRCODE;     
     
    ELSE
         SELECT 'TBT'||SUBSTR(BRCODE,4,1)||LPAD((NVL(max(SUBSTR(BATCH_ID,5,5)),0)+1),5,'0') INTO BATCHID from TRANSFER_TRANS 
        WHERE TRANS_DT =CURRDT AND BRANCH_ID =BRCODE and is_number ( SUBSTR(BATCH_ID,5,5) )=1;
        SELECT 'GI'||SUBSTR(BRCODE,4,1)||LPAD((NVL(max(SUBSTR(SINGLE_TRANS_ID,4,5)),0)+1),6,'0') INTO SINGLEID from TRANSFER_TRANS 
        WHERE TRANS_DT =CURRDT AND BRANCH_ID =BRCODE and is_number (SUBSTR(SINGLE_TRANS_ID,4,5))=1; 
              
       SELECT  SUBSTR(BRCODE,3,2)||LPAD((NVL(max(SUBSTR(TRANS_ID,5,5)),0)+1),5,'0') INTO TRANSID  from TRANSFER_TRANS 
           WHERE TRANS_DT =CURRDT AND BRANCH_ID =BRCODE and is_number (SUBSTR(TRANS_ID,5,5))=1;         
     END IF;  
     
     
    UPDATE ACT_INTR_CALC_ACT  SET   BATCH_ID = BATCHID  WHERE DT =FRDT AND   TDT = TODT  AND BRANCH_ID = BRCODE AND PROD_ID = PRODID;
    COMMIT;
      
    UPDATE ACT_INTR_CALC_ACT  SET SINGLTRID = SINGLEID , BATCH_ID = BATCHID,TRID = TRANSID+TRID WHERE DT =FRDT AND   TDT = TODT  AND BRANCH_ID = BRCODE AND PROD_ID = PRODID; 
    COMMIT;
    
    SELECT CASE WHEN UPPER(SHIFT) IN('NORMAL','',NULL) THEN '' ELSE  SHIFT END INTO SHIFTS  FROM BRANCH_MASTER WHERE BRANCH_CODE =BRCODE;
    
 --> TRANSACTION
         INSERT INTO TRANSFER_TRANS 
        (TRANS_ID,BATCH_ID,AC_HD_ID,ACT_NUM,INP_AMOUNT,INP_CURR,AMOUNT,
        TRANS_DT,TRANS_TYPE,INST_TYPE,INST_DT,INIT_TRANS_ID,INIT_CHANN_TYPE,
        PARTICULARS,STATUS,INSTRUMENT_NO1,PROD_ID,AUTHORIZE_STATUS,AUTHORIZE_BY,
        AUTHORIZE_DT,STATUS_BY,BRANCH_ID,STATUS_DT,PROD_TYPE,LINK_BATCH_ID,
        TRANS_MODE,INITIATED_BRANCH,SHIFT,SINGLE_TRANS_ID,GL_TRANS_ACT_NUM,TRANS_MOD_TYPE,INSTRUMENT_NO2) 
          
       SELECT 'TT'||SUBSTR(I.BRANCH_ID,3,2)||LPAD(TRID+TRANSID,6,'0') AS TRANSID,BATCH_ID,CRACHD AS AC_HD_ID,I.ACT_NUM,I.INTAMT,'INR',I.INTAMT,
        CURRDT,'CREDIT','VOUCHER',CURRDT,'TTSYSTEM','CASHIER',
        'Int. Amt. Adjusted up to '|| CAST(TODT AS VARCHAR2(12)),'CREATED',
        NULL,PRODID,'AUTHORIZED','TTSYSTEM',CURRDT,USRNAM ,
        I.BRANCH_ID,CURRDT,'OA' AS PROD_TYPE,I.ACT_NUM,'TRANSFER',I.BRANCH_ID,
          SHIFTS,  SINGLTRID,I.ACT_NUM,'OA' AS PROD_TYPE,TODT FROM ACT_INTR_CALC_ACT I WHERE DT =FRDT AND   TDT = TODT  AND BRANCH_ID = BRCODE AND PROD_ID = PRODID 
        UNION ALL 
        SELECT 'TT'||SUBSTR(BRCODE,3,2)||LPAD(CNT+TRANSID+1,6,'0') AS TRANSID,BATCHID,DRACHD AS AC_HD_ID,NULL,TOTAMT,'INR',TOTAMT,
        CURRDT,'DEBIT','VOUCHER',CURRDT,'TTSYSTEM','CASHIER',
        'Int. Amt. Adjusted up to '|| CAST(TODT AS VARCHAR2(12)),'CREATED',
        NULL,NULL,'AUTHORIZED','TTSYSTEM',CURRDT,USRNAM,
        BRCODE,CURRDT,'GL' AS PROD_TYPE,BATCHID,'TRANSFER',BRCODE,
          SHIFTS,  SINGLEID,NULL ,'GL' AS PROD_TYPE,TODT FROM DUAL ;
 

 
      -- MASTER UPDATION
   MERGE INTO ACT_MASTER AM USING (
        SELECT  ACT_NUM, INTAMT FROM ACT_INTR_CALC_ACT WHERE  DT =FRDT AND   TDT = TODT AND   BRANCH_ID = BRCODE AND PROD_ID = PRODID ) IT  ON (IT.ACT_NUM =AM.ACT_NUM )
      WHEN MATCHED THEN 
       UPDATE  SET AM.CLEAR_BALANCE =AM.CLEAR_BALANCE + IT.INTAMT,AM.AVAILABLE_BALANCE=AM.AVAILABLE_BALANCE + IT.INTAMT 
       , AM.TOTAL_BALANCE =AM.TOTAL_BALANCE+ IT.INTAMT   ;   

       -- GL UPDATION
 SELECT  COUNT(*)  INTO CRCNT  FROM GL WHERE AC_HD_ID =CRACHD  AND branch_code= BRCODE;
 SELECT  COUNT(*)  INTO DRCNT  FROM GL WHERE AC_HD_ID =DRACHD  AND branch_code= BRCODE;


  IF (CRCNT=0)  THEN
    insert into GL(ac_hd_id,opn_bal,cur_bal,branch_code,last_trans_dt,authorize_status,balance_type) 
      VALUES( CRACHD,0,TOTAMT ,BRCODE,CURRDT,'AUTHORIZED','CREDIT'  );
 ELSE
      UPDATE GL G  SET G.cur_bal= G.CUR_BAL+TOTAMT  WHERE G.AC_HD_ID =CRACHD  AND G.branch_code= BRCODE;
 END IF; 
 
  IF  (DRCNT   =0) THEN
    insert into GL(ac_hd_id,opn_bal,cur_bal,branch_code,last_trans_dt,authorize_status,balance_type) 
      VALUES( DRACHD,0,TOTAMT ,BRCODE,CURRDT,'AUTHORIZED','DEBIT'  );
 ELSE
      UPDATE GL G  SET G.cur_bal= G.CUR_BAL+TOTAMT  WHERE G.AC_HD_ID =DRACHD  AND G.branch_code= BRCODE;
 END IF; 
 

      -- ACT_PARAM_DETAIL UPDATION
      MERGE INTO ACT_PARAM_DETAIL AD USING (
        SELECT  ACT_NUM  FROM ACT_INTR_CALC_ACT WHERE  DT =FRDT AND   TDT = TODT  AND BRANCH_ID = BRCODE) IT  ON (IT.ACT_NUM =AD.ACT_NUM )
      WHEN MATCHED THEN 
       UPDATE  SET AD.LAST_CR_INT_APPLDT =TODT,AD.TEMP_LAST_CR_INT_APPLDT =AD.LAST_CR_INT_APPLDT ;      
    
 
    --  DEPOSIT_PROVISION INSERT OR UPDATION    
    
    SELECT  COUNT(*) INTO CNT FROM DEPOSIT_PROVISION DN WHERE REMARKS ='APPLICATION'  AND PROD_ID =PRODID AND LAST_PROV_DT = TODT;
 
   IF CNT=0 THEN
      INSERT INTO DEPOSIT_PROVISION DP (DP.PROD_TYPE, DP.PROD_ID, DP.LAST_PROV_DT, DP.BRANCH_CODE, DP.STATUS_BY,DP.REMARKS,DP.LAST_APPL_DT)
      VALUES ('OA',PRODID,TODT,BRCODE,NULL,'APPLICATION',TODT); 
   ELSE
     UPDATE  DEPOSIT_PROVISION DP SET DP.LAST_PROV_DT  =TODT ,  DP.LAST_APPL_DT  =TODT WHERE REMARKS ='APPLICATION'  AND PROD_ID =PRODID AND LAST_PROV_DT = TODT;
   END IF;   
 
   
    UPDATE  ACT_INTR_CALC_ACT  SET POSTED =1 WHERE DT =FRDT AND   TDT = TODT AND  BRANCH_ID = BRCODE AND PROD_ID = PRODID;
      

 -- PASSBOOK INSERTION

          INSERT INTO PASS_BOOK 
                (ACT_NUM,SLNO,TRANS_DT,PARTICULARS,DEBIT,CREDIT,BALANCE,INSTRUMENT_NO1,
                TRANS_ID,BATCH_ID,INST_TYPE,INST_DT,STATUS,AUTHORIZE_STATUS,
                AUTHORIZE_DT,PAGENO,CREATED_DT) 

        SELECT ACT_NUM,SLNO,TRANS_DT,PARTICULARS,DEBIT,CREDIT,BALANCE,NULL AS INSTRUMENT_NO1,
               'TT'||SUBSTR(BRCODE,3,2)||LPAD(TRID+TRANSID,6,'0')   TRANS_ID,  BATCHID AS BATCH_ID,NULL AS INST_TYPE,NULL AS INST_DT,'CREATED' AS STATUS,'AUTHORIZED' AS AUTHORIZE_STATUS,
                 CURRDT   AS AUTHORIZE_DT,PAGENO, CURRDT  AS CREATED_DT FROM (   
        SELECT TAG,ACT_NUM,   case when ((SUM(SLNO) OVER ( partition by ACT_NUM  order by  act_num,TAG ))  )>30 then 1 else
           ((SUM(SLNO) OVER ( partition by ACT_NUM  order by  act_num,TAG ))  ) end            AS SLNO
        ,TRANS_DT,
              case when ((SUM(SLNO) OVER ( partition by ACT_NUM  order by  act_num,TAG ))  )>30 then PAGENO+1 else
             ((SUM(PAGENO) OVER ( partition by ACT_NUM  order by  act_num,TAG ))  )   end AS   PAGENO,  
        PARTICULARS,DEBIT,CREDIT,SUM(CREDIT-NVL(DEBIT,0) ) OVER (PARTITION BY ACT_NUM ORDER BY ACT_NUM,TAG) AS BALANCE,TRID   FROM (   
           SELECT 1 AS TAG,ACT_NUM,SLNO,TRANS_DT,PAGENO,PARTICULARS,DEBIT,CREDIT,BALANCE,'' AS TRID  FROM ( 
            SELECT ACT_NUM,TRANS_DT,PAGENO,SLNO,PARTICULARS,0 AS DEBIT,BALANCE AS CREDIT,BALANCE ,MAX(TRANS_DT) OVER (PARTITION BY ACT_NUM ) AS MXTRANSDT,MAX(PAGENO) OVER (PARTITION BY ACT_NUM ) AS MXPAGENO,
             MAX((PAGENO*100) + SLNO) OVER (PARTITION BY ACT_NUM ) AS MXSLNO    
           FROM  pass_book PK WHERE EXISTS(SELECT  *   FROM ACT_INTR_CALC_ACT AC WHERE  AC.DT =FRDT AND    AC.TDT = TODT AND   AC.BRANCH_ID = BRCODE AND  AC.PROD_ID = PRODID AND  AC.ACT_NUM = PK.ACT_NUM )
            AND  AUTHORIZE_STATUS IN('AUTHORIZED')  AND STATUS NOT IN('DELETED') ) PB
           WHERE PB.TRANS_DT= PB.MXTRANSDT AND PB.PAGENO=PB.MXPAGENO AND ((PB.PAGENO*100)+PB.SLNO)= PB.MXSLNO
           UNION ALL
           SELECT 2 AS TAG,ACT_NUM,1 AS SLNO, CURRDT  AS TRANS_DT,0 AS PAGENO,'Int. Amt. Adjusted up to ' || CAST(TODT AS VARCHAR2(12)) AS PARTICULARS,0 DEBIT,INTAMT AS CREDIT,INTAMT AS BALANCE,CAST(TRID AS VARCHAR2(15)) AS TRID  FROM (   
            SELECT  ACT_NUM,  INTAMT,TRID  FROM ACT_INTR_CALC_ACT WHERE  DT =FRDT AND   TDT = TODT AND  BRANCH_ID = BRCODE AND PROD_ID = PRODID) IT ) PK  ORDER BY ACT_NUM,TAG) PBK WHERE TAG =2 
            ORDER BY SLNO;
            
            COMMIT;
            RETURN 'Posting Successfully completed';
      
        EXCEPTION
           WHEN OTHERS 
           THEN
              ROLLBACK;  
               RETURN 'Posting Not completed';     
               
              
 
 END OPERATIVE_INT_POST;

 
  FUNCTION OPERATIVE_INT_POST_REVERSE (BRCODE VARCHAR2,PRODID VARCHAR2,FRDT DATE,TODT DATE,CURRDT DATE,USRNAM VARCHAR2) RETURN VARCHAR2 IS
 PRAGMA AUTONOMOUS_TRANSACTION ;
  --- SELECT PKG_APP_EXEC.OPERATIVE_INT_POST ('0001','110','01APR2018','31DEC2018','16FEB2019','admin') FROM DUAL;
    SINGLEID VARCHAR2(15);
    CRACHD VARCHAR2(15);
    DRACHD VARCHAR2(15); 
    CNT  INT;
   BEGIN
     Select  OP.AC_HD_ID, OPP.CREDIT_INT  INTO  CRACHD,DRACHD   FROM  OP_AC_PRODUCT OP  
      JOIN OP_AC_ACHEAD_PARAM OPP ON OPP.PROD_ID=OP.PROD_ID       WHERE OP.PROD_ID=PRODID;
      
    SELECT COUNT(*) INTO CNT  FROM ACT_INTR_CALC_ACT WHERE DT = FRDT AND   TDT = TODT   AND BRANCH_ID = BRCODE AND POSTED = 0 AND PROD_ID = PRODID;   
    IF CNT >0 THEN 
      RETURN 'No Data Found';
    END IF;
   
       SELECT DISTINCT SINGLTRID INTO  SINGLEID FROM ACT_INTR_CALC_ACT WHERE  DT =FRDT AND   TDT = TODT   AND BRANCH_ID = BRCODE AND PROD_ID = PRODID;
       -- MASTER UPDATION
      MERGE INTO ACT_MASTER AM USING ( 
        SELECT  ACT_NUM, INTAMT FROM ACT_INTR_CALC_ACT WHERE  DT =FRDT AND   TDT = TODT AND   BRANCH_ID = BRCODE AND PROD_ID = PRODID) IT  ON (IT.ACT_NUM =AM.ACT_NUM )
      WHEN MATCHED THEN 
       UPDATE  SET AM.CLEAR_BALANCE =AM.CLEAR_BALANCE - IT.INTAMT,AM.AVAILABLE_BALANCE=AM.AVAILABLE_BALANCE - IT.INTAMT, AM.TOTAL_BALANCE =AM.TOTAL_BALANCE - IT.INTAMT ;
       
       DELETE FROM PASS_BOOK PB WHERE TRANS_DT =CURRDT AND 
       EXISTS(SELECT * FROM ACT_INTR_CALC_ACT AC WHERE  AC.DT =FRDT AND   AC.TDT = TODT   AND AC.BRANCH_ID = BRCODE AND PROD_ID = PRODID
        AND  AC.BATCH_ID= PB.BATCH_ID   AND AC.ACT_NUM = PB.ACT_NUM);  
        
       UPDATE GL G  SET G.cur_bal= G.CUR_BAL-(SELECT SUM(INTAMT) FROM ACT_INTR_CALC_ACT AC WHERE  AC.DT =FRDT AND   AC.TDT = TODT AND   AC.BRANCH_ID = BRCODE AND PROD_ID = PRODID)   WHERE G.AC_HD_ID =CRACHD  AND G.branch_code= BRCODE; 

       UPDATE GL G  SET G.cur_bal= G.CUR_BAL-(SELECT SUM(INTAMT) FROM ACT_INTR_CALC_ACT AC WHERE  AC.DT =FRDT AND   AC.TDT = TODT AND   AC.BRANCH_ID = BRCODE AND PROD_ID = PRODID)   WHERE G.AC_HD_ID =DRACHD  AND G.branch_code= BRCODE;
       
       UPDATE  TRANSFER_TRANS  SET AUTHORIZE_STATUS ='REJECTED' ,STATUS='DELETED'  WHERE TRANS_DT = CURRDT  AND BRANCH_ID = BRCODE AND SINGLE_TRANS_ID =SINGLEID ;
       
       UPDATE  ACT_INTR_CALC_ACT  SET POSTED =0 WHERE DT =FRDT AND   TDT = TODT  AND BRANCH_ID = BRCODE AND PROD_ID = PRODID; 

      MERGE INTO ACT_PARAM_DETAIL AD USING (
        SELECT  ACT_NUM  FROM ACT_INTR_CALC_ACT WHERE  DT =FRDT AND   TDT = TODT  AND BRANCH_ID = BRCODE AND PROD_ID = PRODID) IT  ON (IT.ACT_NUM =AD.ACT_NUM )
      WHEN MATCHED THEN 
       UPDATE  SET AD.LAST_CR_INT_APPLDT =AD.TEMP_LAST_CR_INT_APPLDT  ;  
              
            
     COMMIT;
      RETURN 'Posting Successfully completed';
            
        EXCEPTION
           WHEN OTHERS 
           THEN
              ROLLBACK;  
               RETURN 'Posting Not completed';                       
     END OPERATIVE_INT_POST_REVERSE; 

END PKG_APP_EXEC;
/
