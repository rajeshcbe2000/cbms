package com.see.truetransact.uicomponent;

/*
 * @(#)CDateAndTimePicker.java
 *
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.
 * 
 *
 * This class generates the calendar for the given date.
 *
 * @author      Balachandar@fincuro.com
 * @version     0.0.2
 */

import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Dimension;
import java.awt.Color;
import java.awt.Toolkit;

import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JScrollBar;
import javax.swing.JSeparator;
import javax.swing.JMenuItem;
import javax.swing.ImageIcon;
import javax.swing.WindowConstants;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;

import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.commonutil.LocaleConstants;
import com.see.truetransact.commonutil.DateUtil;

/**
 * This type was generated by a SmartGuide.
 */
public class CDateAndTimePicker extends JPanel {
    private Color holidayColor = new Color (196, 165, 165);//Color.GRAY;
    private Color todayColor = new Color(130, 149,167);//Color.YELLOW;
    private Color selectedColor = new Color(255, 255, 255);//Color.GREEN;
    private Color dayHeading = new Color(215, 227, 238);//Color.GREEN;
    private Color dayHeadingBorder = new Color(117, 123, 129);//Color.GREEN;
    private Color todayBorder = new Color(255, 255, 255);
    private Color selectedBorder = new Color(0, 0, 0);
//    private Color backDatedColor = Color.LIGHT_GRAY;
    private boolean holidaySelectable = true;
//    private boolean backDatedAllowed = false;
    private java.util.List holidayList = null;
    
    //public static java.text.SimpleDateFormat DATE_FORMAT = new java.text.SimpleDateFormat("dd/MM/yyyy");
    
    private String[] dayNames = {"S","M","T","W","T","F","S"};
    
    private int monthDays[] 	= {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    private int leapmonthDays[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    
    private	GregorianCalendar dt = null;
    private	GregorianCalendar Today = new GregorianCalendar();
    
    // Input Text Field
    private JTextField dateField = null;
    private boolean isBranchDate ;
    private JMenuItem selDtBtn = null;
    private HashMap dateUIMap = null;
    private JMenuItem prevSelBtn = null;
    
    public CDateAndTimePicker() {
        super();
        initialize();
    }
    /**
     * CDateAndTimePicker constructor comment.
     * @param title java.lang.String
     */
    public CDateAndTimePicker(String title) {
        super();
    }
    
    /**
     * CDateAndTimePicker constructor comment.
     */
    public CDateAndTimePicker(JTextField dateFld) {
        this(dateFld, true);
    }
    
    /**
     * CDateAndTimePicker constructor comment.
     */
    public CDateAndTimePicker(JTextField dateFld, boolean isBranchDate) {
        this.isBranchDate = isBranchDate;
        //	super(Client.CMain.iconFrame);
        dateField = dateFld;
        String dttxt = dateField.getText().trim();
    
        if (dttxt != null &&
        !dttxt.equals("") &&
        dttxt.length() > 1) {
            try {
                dt = new GregorianCalendar();
                dt.setTime(LocaleConstants.DATE_FORMAT.parse(dttxt));
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            dt = new GregorianCalendar();
            // add for appl date
            if (isBranchDate) {
                dt.setTime(ClientUtil.getCurrentDate());
            } else {
                dt.setTime(new Date());
            }
        }
        
        // add for appl date
        if (isBranchDate) {
            Today.setTime(ClientUtil.getCurrentDate());
        } else {
            Today.setTime(new Date());
        }
        initialize();
    }
    
    /**
     * Description : Generating the Calendar based on the selected month and given Year.
     * Creation date: (1/8/2002 10:51:52 AM)
     */
    public void generateCalendar() {
        int noofdays=0;
        int dayofweek=0;
        
        GregorianCalendar currDt = new GregorianCalendar(Integer.parseInt(getYear().getText()), getMonth().getSelectedIndex(), 1);
        
        getCalendarPane().removeAll();
        
        getCalendarPane().setBorder(new javax.swing.border.TitledBorder(null,
        " Calendar for " + (String) getMonth().getItemAt(getMonth().getSelectedIndex()) +
        ", " + getYear().getText() + " ",
        javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        if (isBranchDate) {
        // Setting Holiday for the selected Month...
            setHolidayList(ClientUtil.getHolidayList(String.valueOf(getMonth().getSelectedIndex()+1), getYear().getText()));
        }
        
        getCalendarPane().add(getJLabel1(), getJLabel1().getName());
        getCalendarPane().add(getJLabel2(), getJLabel2().getName());
        getCalendarPane().add(getJLabel3(), getJLabel3().getName());
        getCalendarPane().add(getJLabel4(), getJLabel4().getName());
        getCalendarPane().add(getJLabel5(), getJLabel5().getName());
        getCalendarPane().add(getJLabel6(), getJLabel6().getName());
        getCalendarPane().add(getJLabel7(), getJLabel7().getName());
        
        if (currDt.isLeapYear(Integer.parseInt(getYear().getText()))) {
            noofdays = leapmonthDays[getMonth().getSelectedIndex()];
        } else {
            noofdays = monthDays[getMonth().getSelectedIndex()];
        }
        
        dayofweek = currDt.get(GregorianCalendar.DAY_OF_WEEK);
        
        for (int i=1; i < dayofweek; i++) {
            getCalendarPane().add(new JLabel(""));
        }
        
        String sk = "";
        for (int k=1; k <= noofdays; k++) {
            sk = String.valueOf(k);
            
            JMenuItem btns = new JMenuItem(sk);
            btns.setMargin(new Insets(0, 0, 0, 0));
            btns.setMinimumSize(new Dimension(30, 30));
            btns.setPreferredSize(new Dimension(30, 30));
            btns.setMaximumSize(new Dimension(30, 30));
            
//            if (!backDatedAllowed) {
//                if (k < Today.get(GregorianCalendar.DATE) && 
//                getMonth().getSelectedIndex() <= Today.get(GregorianCalendar.MONTH)   && 
//                Integer.parseInt(getYear().getText()) <= Today.get(GregorianCalendar.YEAR) ) {
//                    btns.setBackground(backDatedColor);
//                    btns.setEnabled(backDatedAllowed);
//                }
//            }

            // Sundays and Holidays checking 
            if (((dayofweek + k + 5) % 7) == 0 || 
                 (holidayList != null && holidayList.contains(sk))) {
                btns.setBackground(holidayColor);
                btns.setEnabled(holidaySelectable);
            }
            
            if (Today.get(GregorianCalendar.DATE) == k && Today.get(GregorianCalendar.MONTH) == getMonth().getSelectedIndex() && Today.get(GregorianCalendar.YEAR) == Integer.parseInt(getYear().getText())) {
                btns.setBorder(new javax.swing.border.LineBorder(todayBorder));
                btns.setBackground(todayColor);
            }

            if (dateUIMap==null) {
                dateUIMap = new HashMap();
            }
            HashMap tempMap = new HashMap();
            tempMap.put("BACKGROUND", btns.getBackground());
            tempMap.put("BORDER", btns.getBorder());
            dateUIMap.put(btns.getText(), tempMap);
            tempMap = null;
            
//            if (dt != null) {
//                if (dt.get(GregorianCalendar.DATE) == k && dt.get(GregorianCalendar.MONTH) == getMonth().getSelectedIndex() && dt.get(GregorianCalendar.YEAR) == Integer.parseInt(getYear().getText())) {
//                    btns.setBorder(new javax.swing.border.LineBorder(selectedBorder));
//                    btns.setBackground(selectedColor);
//                }
//            }
            
            btns.addActionListener(new ButtonEventHandler());
            getCalendarPane().add(btns);
        }
        
        int balance = 42 - (dayofweek + noofdays);
        
        for (int x=0; x < balance; x++) {
            getCalendarPane().add(new JLabel(""));
        }
        getCalendarPane().revalidate();
        
//        java.awt.Component[] comp = getCalendarPane().getComponents();
//        originalPane = new JPanel();
//        originalPane.setLayout(getCalendarPaneGridLayout());
//        for (int i=0; i<comp.length; i++) {
//            originalPane.add(comp[i]);
//        }

    }
    
    /**
     * Comment
     */
    public void getDate(java.awt.event.ActionEvent actionEvent) {
//        this.dispose();
        selDtBtn = (JMenuItem) actionEvent.getSource();
        if (selDtBtn!=null) {
//            if (prevSelBtn!=null) {
//                System.out.println("@#$ prevSelBtn.getText():"+prevSelBtn.getText());
//            }
            if (prevSelBtn!=null && dateUIMap.containsKey(prevSelBtn.getText())) {
                HashMap mnuItemColorFromMap = (HashMap) dateUIMap.get(prevSelBtn.getText());
                prevSelBtn.setBorder((javax.swing.border.Border)mnuItemColorFromMap.get("BORDER"));
                prevSelBtn.setBackground((Color)mnuItemColorFromMap.get("BACKGROUND"));
//                System.out.println("@#$ prevSelBtn.getBackground():"+prevSelBtn.getBackground());
//                System.out.println("@#$ mnuItemColorFromMap:"+mnuItemColorFromMap);
                mnuItemColorFromMap.clear();
                mnuItemColorFromMap = null;
            }
//            System.out.println("@#$ selDtBtn.getText():"+selDtBtn.getText());
            selDtBtn.setBorder(new javax.swing.border.LineBorder(selectedBorder));
            selDtBtn.setBackground(selectedColor);
            prevSelBtn = selDtBtn;
        }

//        java.awt.Component[] comp = originalPane.getComponents();
//        ivjCalendarPane = new JPanel();
//        ivjCalendarPane.setLayout(getCalendarPaneGridLayout());
//        JMenuItem newBtn = null;
//        for (int i=0; i<comp.length; i++) {
//            ivjCalendarPane.add(comp[i]);
//            if (comp[i] instanceof JMenuItem) {
//                newBtn = (JMenuItem)comp[i];
//                System.out.println("@#$ newBtn.getText():"+newBtn.getText());
//        
//            }
//        }
        
        String strDt = "";
        strDt = (getMonth().getSelectedIndex() + 1) + "/" + actionEvent.getActionCommand() + "/" + getYear().getText();
//        System.out.println("@#$ strDt:"+strDt);        
        try {
            java.text.SimpleDateFormat dateMMDDFormat = new java.text.SimpleDateFormat("MM/dd/yyyy");
            strDt = LocaleConstants.DATE_FORMAT.format(dateMMDDFormat.parse(strDt));
        } catch (Exception e){}
        
        if (dateField != null) {
            dateField.setText(strDt);
            System.out.println("@#$ dateField.getText():"+dateField.getText());
        }
    }
    
    private void setCalendarColor() {
        java.awt.Component[] comp = getCalendarPane().getComponents();
    }
    
    /**
     * Comment
     */
    public void btnNextYear_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
        getYear().setText(String.valueOf(Integer.parseInt(getYear().getText()) - 1));
        generateCalendar();
        return;
    }
    
    /**
     * Comment
     */
    public void btnPrevYear_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
        getYear().setText(String.valueOf(Integer.parseInt(getYear().getText()) + 1));
        generateCalendar();
        return;
    }
    
    /**
     * Return the btnNextYear property value.
     * @return javax.swing.JButton
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JButton getbtnNextYear() {
        if (ivjbtnNextYear == null) {
            try {
                ivjbtnNextYear = new javax.swing.JButton();
                ivjbtnNextYear.setName("btnNextYear");
                ivjbtnNextYear.setOpaque(false);
                ivjbtnNextYear.setText("");
                ivjbtnNextYear.setMaximumSize(new java.awt.Dimension(16, 12));
                ivjbtnNextYear.setBorderPainted(false);
                ivjbtnNextYear.setPreferredSize(new java.awt.Dimension(16, 12));
                ivjbtnNextYear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/uicomponent/images/down.gif")));
                ivjbtnNextYear.setMinimumSize(new java.awt.Dimension(16, 12));
                ivjbtnNextYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            } catch (java.lang.Throwable ivjExc) {
                handleException(ivjExc);
            }
        }
        return ivjbtnNextYear;
    }
    /**
     * Return the btnPrevYear property value.
     * @return javax.swing.JButton
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JButton getbtnPrevYear() {
        if (ivjbtnPrevYear == null) {
            try {
                ivjbtnPrevYear = new javax.swing.JButton();
                ivjbtnPrevYear.setName("btnPrevYear");
                ivjbtnPrevYear.setOpaque(false);
                ivjbtnPrevYear.setText("");
                ivjbtnPrevYear.setMaximumSize(new java.awt.Dimension(16, 11));
                ivjbtnPrevYear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/uicomponent/images/up.gif")));
                ivjbtnPrevYear.setPreferredSize(new java.awt.Dimension(16, 11));
                ivjbtnPrevYear.setBorderPainted(false);
                ivjbtnPrevYear.setMinimumSize(new java.awt.Dimension(16, 11));
                ivjbtnPrevYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            } catch (java.lang.Throwable ivjExc) {
                handleException(ivjExc);
            }
        }
        return ivjbtnPrevYear;
    }
    /**
     * Return the CalendarPane property value.
     * @return javax.swing.JPanel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JPanel getCalendarPane() {
        if (ivjCalendarPane == null) {
            try {
                ivjCalendarPane = new javax.swing.JPanel();
                ivjCalendarPane.setName("CalendarPane");
                ivjCalendarPane.setLayout(getCalendarPaneGridLayout());
                getCalendarPane().add(getJLabel1(), getJLabel1().getName());
                getCalendarPane().add(getJLabel2(), getJLabel2().getName());
                getCalendarPane().add(getJLabel3(), getJLabel3().getName());
                getCalendarPane().add(getJLabel4(), getJLabel4().getName());
                getCalendarPane().add(getJLabel5(), getJLabel5().getName());
                getCalendarPane().add(getJLabel6(), getJLabel6().getName());
                getCalendarPane().add(getJLabel7(), getJLabel7().getName());
            } catch (java.lang.Throwable ivjExc) {
                handleException(ivjExc);
            }
        }
        return ivjCalendarPane;
    }
    /**
     * Return the CalendarPaneGridLayout property value.
     * @return java.awt.GridLayout
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.GridLayout getCalendarPaneGridLayout() {
        java.awt.GridLayout ivjCalendarPaneGridLayout = null;
        try {
            /* Create part */
            ivjCalendarPaneGridLayout = new java.awt.GridLayout(7, 7);
            ivjCalendarPaneGridLayout.setVgap(1);
            ivjCalendarPaneGridLayout.setHgap(1);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        };
        return ivjCalendarPaneGridLayout;
    }
    /**
     * Return the JPanel1 property value.
     * @return javax.swing.JPanel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JPanel getCalParam() {
        if (ivjCalParam == null) {
            try {
                ivjCalParam = new javax.swing.JPanel();
                ivjCalParam.setName("CalParam");
                ivjCalParam.setLayout(new java.awt.GridBagLayout());
                
                java.awt.GridBagConstraints constraintsPrevious = new java.awt.GridBagConstraints();
                constraintsPrevious.gridx = 0; constraintsPrevious.gridy = 1;
                constraintsPrevious.anchor = java.awt.GridBagConstraints.WEST;
                constraintsPrevious.insets = new java.awt.Insets(2, 2, 2, 2);
                getCalParam().add(getPrevious(), constraintsPrevious);
                
                java.awt.GridBagConstraints constraintsMonth = new java.awt.GridBagConstraints();
                constraintsMonth.gridx = 1; constraintsMonth.gridy = 1;
                constraintsMonth.fill = java.awt.GridBagConstraints.HORIZONTAL;
                constraintsMonth.weightx = 1.0;
                constraintsMonth.weighty = 1.0;
                constraintsMonth.insets = new java.awt.Insets(2, 0, 2, 0);
                getCalParam().add(getMonth(), constraintsMonth);
                
                java.awt.GridBagConstraints constraintsYear = new java.awt.GridBagConstraints();
                constraintsYear.gridx = 3; constraintsYear.gridy = 1;
                constraintsYear.fill = java.awt.GridBagConstraints.HORIZONTAL;
                constraintsYear.weightx = 1.0;
                constraintsYear.insets = new java.awt.Insets(2, 2, 2, 0);
                getCalParam().add(getYear(), constraintsYear);
                
                java.awt.GridBagConstraints constraintsNext = new java.awt.GridBagConstraints();
                constraintsNext.gridx = 2; constraintsNext.gridy = 1;
                constraintsNext.insets = new java.awt.Insets(2, 0, 2, 2);
                getCalParam().add(getNext(), constraintsNext);
                
                java.awt.GridBagConstraints constraintsyearincrease = new java.awt.GridBagConstraints();
                constraintsyearincrease.gridx = 8; constraintsyearincrease.gridy = 3;
                constraintsyearincrease.fill = java.awt.GridBagConstraints.VERTICAL;
                constraintsyearincrease.weighty = 1.0;
                constraintsyearincrease.insets = new java.awt.Insets(4, 0, 4, 4);
                getCalParam().add(getyearincrease(), constraintsyearincrease);
                
                java.awt.GridBagConstraints constraintsJPanel1 = new java.awt.GridBagConstraints();
                constraintsJPanel1.gridx = 4; constraintsJPanel1.gridy = 1;
                constraintsJPanel1.fill = java.awt.GridBagConstraints.BOTH;
                constraintsJPanel1.insets = new java.awt.Insets(4, 4, 4, 4);
                getCalParam().add(getJPanel1(), constraintsJPanel1);
                
                getCalParam().setBorder(new javax.swing.border.TitledBorder(null, null,
                javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjCalParam;
    }
    
    /**
     * Return the JButton1 property value.
     * @return javax.swing.JButton
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JButton getJButtonClear() {
        if (ivjJButtonClear == null) {
            try {
                ivjJButtonClear = new javax.swing.JButton();
                ivjJButtonClear.setName("JButtonClear");
                ivjJButtonClear.setToolTipText("Erase");
                ivjJButtonClear.setBorder(new javax.swing.border.CompoundBorder());
                ivjJButtonClear.setText("");
                ivjJButtonClear.setMaximumSize(new java.awt.Dimension(25, 25));
                ivjJButtonClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/uicomponent/images/ww_CANCEL.gif")));
                ivjJButtonClear.setPreferredSize(new java.awt.Dimension(25, 25));
                ivjJButtonClear.setMinimumSize(new java.awt.Dimension(25, 25));
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJButtonClear;
    }
    /**
     * Return the JFrameContentPane property value.
     * @return javax.swing.JPanel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JPanel getJFrameContentPane() {
        if (ivjJFrameContentPane == null) {
            try {
                ivjJFrameContentPane = new javax.swing.JPanel();
                ivjJFrameContentPane.setName("JFrameContentPane");
                ivjJFrameContentPane.setLayout(new java.awt.BorderLayout());
                getJFrameContentPane().add(getStatusBarPane(), "South");
                getJFrameContentPane().add(getCDateAndTimePickerPane(), "Center");
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJFrameContentPane;
    }
    /**
     * Return the JLabel1 property value.
     * @return javax.swing.JLabel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JLabel getJLabel1() {
        if (ivjJLabel1 == null) {
            try {
                ivjJLabel1 = new javax.swing.JLabel();
                ivjJLabel1.setName("JLabel1");
                ivjJLabel1.setBorder(new javax.swing.border.LineBorder(dayHeadingBorder));
                ivjJLabel1.setBackground(dayHeading);
                ivjJLabel1.setOpaque(true);
                ivjJLabel1.setAlignmentY(java.awt.Component.CENTER_ALIGNMENT);
                ivjJLabel1.setText(dayNames[0]);
                ivjJLabel1.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
                ivjJLabel1.setAlignmentX(java.awt.Component.CENTER_ALIGNMENT);
                ivjJLabel1.setFont(new java.awt.Font("Arial", 1, 12));
                ivjJLabel1.setVerticalAlignment(javax.swing.SwingConstants.CENTER);
                ivjJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                
                //                ivjJLabel1.setBackground(Color.cyan);
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJLabel1;
    }
    /**
     * Return the JLabel11 property value.
     * @return javax.swing.JLabel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JLabel getJLabel11() {
        if (ivjJLabel11 == null) {
            try {
                ivjJLabel11 = new javax.swing.JLabel();
                ivjJLabel11.setName("JLabel11");
                ivjJLabel11.setText("Selected");
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJLabel11;
    }
    /**
     * Return the JLabel2 property value.
     * @return javax.swing.JLabel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JLabel getJLabel2() {
        if (ivjJLabel2 == null) {
            try {
                ivjJLabel2 = new javax.swing.JLabel();
                ivjJLabel2.setName("JLabel2");
                ivjJLabel2.setBorder(new javax.swing.border.LineBorder(dayHeadingBorder));
                ivjJLabel2.setBackground(dayHeading);
                ivjJLabel2.setOpaque(true);
                ivjJLabel2.setText(dayNames[1]);
                ivjJLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                ivjJLabel2.setAlignmentX(java.awt.Component.CENTER_ALIGNMENT);
                ivjJLabel2.setFont(new java.awt.Font("Arial", 1, 12));
                ivjJLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                
                //                ivjJLabel2.setBackground(Color.cyan);
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJLabel2;
    }
    /**
     * Return the JLabel3 property value.
     * @return javax.swing.JLabel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JLabel getJLabel3() {
        if (ivjJLabel3 == null) {
            try {
                ivjJLabel3 = new javax.swing.JLabel();
                ivjJLabel3.setName("JLabel3");
                ivjJLabel3.setBorder(new javax.swing.border.LineBorder(dayHeadingBorder));
                ivjJLabel3.setBackground(dayHeading);
                ivjJLabel3.setOpaque(true);
                ivjJLabel3.setText(dayNames[2]);
                ivjJLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                ivjJLabel3.setAlignmentX(java.awt.Component.CENTER_ALIGNMENT);
                ivjJLabel3.setFont(new java.awt.Font("Arial", 1, 12));
                ivjJLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                
                //                ivjJLabel3.setBackground(Color.cyan);
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJLabel3;
    }
    /**
     * Return the JLabel4 property value.
     * @return javax.swing.JLabel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JLabel getJLabel4() {
        if (ivjJLabel4 == null) {
            try {
                ivjJLabel4 = new javax.swing.JLabel();
                ivjJLabel4.setName("JLabel4");
                ivjJLabel4.setBorder(new javax.swing.border.LineBorder(dayHeadingBorder));
                ivjJLabel4.setBackground(dayHeading);
                ivjJLabel4.setOpaque(true);
                ivjJLabel4.setText(dayNames[3]);
                ivjJLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                ivjJLabel4.setAlignmentX(java.awt.Component.CENTER_ALIGNMENT);
                ivjJLabel4.setFont(new java.awt.Font("Arial", 1, 12));
                ivjJLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                
                //                ivjJLabel4.setBackground(Color.cyan);
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJLabel4;
    }
    /**
     * Return the JLabel5 property value.
     * @return javax.swing.JLabel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JLabel getJLabel5() {
        if (ivjJLabel5 == null) {
            try {
                ivjJLabel5 = new javax.swing.JLabel();
                ivjJLabel5.setName("JLabel5");
                ivjJLabel5.setBorder(new javax.swing.border.LineBorder(dayHeadingBorder));
                ivjJLabel5.setBackground(dayHeading);
                ivjJLabel5.setOpaque(true);
                ivjJLabel5.setText(dayNames[4]);
                ivjJLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                ivjJLabel5.setAlignmentX(java.awt.Component.CENTER_ALIGNMENT);
                ivjJLabel5.setFont(new java.awt.Font("Arial", 1, 12));
                ivjJLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                
                //                ivjJLabel5.setBackground(Color.cyan);
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJLabel5;
    }
    /**
     * Return the JLabel6 property value.
     * @return javax.swing.JLabel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JLabel getJLabel6() {
        if (ivjJLabel6 == null) {
            try {
                ivjJLabel6 = new javax.swing.JLabel();
                ivjJLabel6.setName("JLabel6");
                ivjJLabel6.setBorder(new javax.swing.border.LineBorder(dayHeadingBorder));
                ivjJLabel6.setBackground(dayHeading);
                ivjJLabel6.setOpaque(true);
                ivjJLabel6.setText(dayNames[5]);
                ivjJLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                ivjJLabel6.setAlignmentX(java.awt.Component.CENTER_ALIGNMENT);
                ivjJLabel6.setFont(new java.awt.Font("Arial", 1, 12));
                ivjJLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                
                //                ivjJLabel6.setBackground(Color.cyan);
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJLabel6;
    }
    /**
     * Return the JLabel7 property value.
     * @return javax.swing.JLabel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JLabel getJLabel7() {
        if (ivjJLabel7 == null) {
            try {
                ivjJLabel7 = new javax.swing.JLabel();
                ivjJLabel7.setName("JLabel7");
                ivjJLabel7.setBorder(new javax.swing.border.LineBorder(dayHeadingBorder));
                ivjJLabel7.setBackground(dayHeading);
                ivjJLabel7.setOpaque(true);
                ivjJLabel7.setText(dayNames[6]);
                ivjJLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                ivjJLabel7.setAlignmentX(java.awt.Component.CENTER_ALIGNMENT);
                ivjJLabel7.setFont(new java.awt.Font("Arial", 1, 12));
                ivjJLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                
                //                ivjJLabel7.setBackground(Color.cyan);
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJLabel7;
    }
    /**
     * Return the JLabel8 property value.
     * @return javax.swing.JLabel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JLabel getJLabel8() {
        if (ivjJLabel8 == null) {
            try {
                ivjJLabel8 = new javax.swing.JLabel();
                ivjJLabel8.setName("JLabel8");
                ivjJLabel8.setOpaque(true);
                ivjJLabel8.setBorder(new javax.swing.border.LineBorder(selectedBorder));//setBorder(new javax.swing.border.EtchedBorder());
                ivjJLabel8.setText("    ");
                ivjJLabel8.setBackground(selectedColor);
                ivjJLabel8.setForeground(selectedColor);
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJLabel8;
    }
    /**
     * Return the JLabel9 property value.
     * @return javax.swing.JLabel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JLabel getJLabelTodayColor() {
        if (ivjJLabelTodayColor == null) {
            try {
                ivjJLabelTodayColor = new javax.swing.JLabel();
                ivjJLabelTodayColor.setName("JLabelTodayColor");
                ivjJLabelTodayColor.setOpaque(true);
                ivjJLabelTodayColor.setBorder(new javax.swing.border.LineBorder(todayBorder));
                //ivjJLabelTodayColor.setBorder(new javax.swing.border.EtchedBorder());
                ivjJLabelTodayColor.setText("    ");
                ivjJLabelTodayColor.setBackground(todayColor);
                ivjJLabelTodayColor.setForeground(todayColor);
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJLabelTodayColor;
    }
    /**
     * Return the JPanel1 property value.
     * @return javax.swing.JPanel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JPanel getJPanel1() {
        if (ivjJPanel1 == null) {
            try {
                ivjJPanel1 = new javax.swing.JPanel();
                ivjJPanel1.setName("JPanel1");
                ivjJPanel1.setOpaque(false);
                ivjJPanel1.setLayout(new java.awt.GridBagLayout());
                
                java.awt.GridBagConstraints constraintsbtnPrevYear = new java.awt.GridBagConstraints();
                constraintsbtnPrevYear.gridx = 0; constraintsbtnPrevYear.gridy = 0;
                getJPanel1().add(getbtnPrevYear(), constraintsbtnPrevYear);
                
                java.awt.GridBagConstraints constraintsbtnNextYear = new java.awt.GridBagConstraints();
                constraintsbtnNextYear.gridx = 0; constraintsbtnNextYear.gridy = 1;
                getJPanel1().add(getbtnNextYear(), constraintsbtnNextYear);
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJPanel1;
    }
    /**
     * Return the JSeparatorClear property value.
     * @return javax.swing.JSeparator
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JSeparator getJSeparatorClear() {
        if (ivjJSeparatorClear == null) {
            try {
                ivjJSeparatorClear = new javax.swing.JSeparator();
                ivjJSeparatorClear.setName("JSeparatorClear");
                ivjJSeparatorClear.setPreferredSize(new java.awt.Dimension(2, 2));
                ivjJSeparatorClear.setOrientation(javax.swing.SwingConstants.VERTICAL);
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJSeparatorClear;
    }
    /**
     * Return the JSeparatorToday property value.
     * @return javax.swing.JSeparator
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JSeparator getJSeparatorToday() {
        if (ivjJSeparatorToday == null) {
            
            try {
                ivjJSeparatorToday = new javax.swing.JSeparator();
                ivjJSeparatorToday.setName("JSeparatorToday");
                ivjJSeparatorToday.setPreferredSize(new java.awt.Dimension(2, 2));
                ivjJSeparatorToday.setOrientation(javax.swing.SwingConstants.VERTICAL);
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjJSeparatorToday;
    }
    /**
     * Return the JComboBox1 property value.
     * @return javax.swing.JComboBox
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JComboBox getMonth() {
        if (ivjMonth == null) {
            try {
                ivjMonth = new javax.swing.JComboBox();
                ivjMonth.setName("Month");
                ivjMonth.setPreferredSize(new java.awt.Dimension(100, 23));
                
                getMonth().addItem((String)"January");
                getMonth().addItem((String)"February");
                getMonth().addItem((String)"March");
                getMonth().addItem((String)"April");
                getMonth().addItem((String)"May");
                getMonth().addItem((String)"June");
                getMonth().addItem((String)"July");
                getMonth().addItem((String)"August");
                getMonth().addItem((String)"September");
                getMonth().addItem((String)"October");
                getMonth().addItem((String)"November");
                getMonth().addItem((String)"December");
                getMonth().setSelectedIndex(Today.get(GregorianCalendar.MONTH));
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjMonth;
    }
    /**
     * Return the JButton2 property value.
     * @return javax.swing.JButton
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JButton getNext() {
        if (ivjNext == null) {
            try {
                ivjNext = new javax.swing.JButton();
                ivjNext.setName("Next");
                ivjNext.setMnemonic('N');
                ivjNext.setText("");
                ivjNext.setBorderPainted(false);
                ivjNext.setMaximumSize(new java.awt.Dimension(20, 25));
                ivjNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/uicomponent/images/right_arrow.gif")));
                ivjNext.setPreferredSize(new java.awt.Dimension(20, 25));
                ivjNext.setMinimumSize(new java.awt.Dimension(20, 25));
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjNext;
    }
    /**
     * Return the JButton1 property value.
     * @return javax.swing.JButton
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JButton getPrevious() {
        if (ivjPrevious == null) {
            try {
                ivjPrevious = new javax.swing.JButton();
                ivjPrevious.setName("Previous");
                ivjPrevious.setMnemonic('P');
                ivjPrevious.setText("");
                ivjPrevious.setBorderPainted(false);
                ivjPrevious.setMaximumSize(new java.awt.Dimension(20, 25));
                ivjPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/uicomponent/images/left_arrow.gif")));
                ivjPrevious.setPreferredSize(new java.awt.Dimension(20, 25));
                ivjPrevious.setMinimumSize(new java.awt.Dimension(20, 25));
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjPrevious;
    }
    /**
     * Return the StatusBarPane property value.
     * @return javax.swing.JPanel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JPanel getStatusBarPane() {
        if (ivjStatusBarPane == null) {
            try {
                ivjStatusBarPane = new javax.swing.JPanel();
                ivjStatusBarPane.setName("StatusBarPane");
                ivjStatusBarPane.setLayout(new java.awt.GridBagLayout());
                
                java.awt.GridBagConstraints constraintsStatusMsg1 = new java.awt.GridBagConstraints();
                constraintsStatusMsg1.gridx = 1; constraintsStatusMsg1.gridy = 0;
                constraintsStatusMsg1.fill = java.awt.GridBagConstraints.BOTH;
                constraintsStatusMsg1.anchor = java.awt.GridBagConstraints.WEST;
                constraintsStatusMsg1.weightx = 1.0;
                constraintsStatusMsg1.weighty = 1.0;
                getStatusBarPane().add(getStatusMsg1(), constraintsStatusMsg1);
                
                java.awt.GridBagConstraints constraintsJLabel8 = new java.awt.GridBagConstraints();
                constraintsJLabel8.gridx = 3; constraintsJLabel8.gridy = 0;
                constraintsJLabel8.weighty = 1.0;
                getStatusBarPane().add(getJLabel8(), constraintsJLabel8);
                
                java.awt.GridBagConstraints constraintsJLabelTodayColor = new java.awt.GridBagConstraints();
                constraintsJLabelTodayColor.gridx = 0; constraintsJLabelTodayColor.gridy = 0;
                getStatusBarPane().add(getJLabelTodayColor(), constraintsJLabelTodayColor);
                
                java.awt.GridBagConstraints constraintsJLabel11 = new java.awt.GridBagConstraints();
                constraintsJLabel11.gridx = 4; constraintsJLabel11.gridy = 0;
                constraintsJLabel11.insets = new java.awt.Insets(4, 4, 4, 4);
                getStatusBarPane().add(getJLabel11(), constraintsJLabel11);
                
                java.awt.GridBagConstraints constraintsJButtonClear = new java.awt.GridBagConstraints();
                constraintsJButtonClear.gridx = 6; constraintsJButtonClear.gridy = 0;
                getStatusBarPane().add(getJButtonClear(), constraintsJButtonClear);
                
                java.awt.GridBagConstraints constraintsJSeparatorClear = new java.awt.GridBagConstraints();
                constraintsJSeparatorClear.gridx = 5; constraintsJSeparatorClear.gridy = 0;
                constraintsJSeparatorClear.fill = java.awt.GridBagConstraints.VERTICAL;
                constraintsJSeparatorClear.insets = new java.awt.Insets(0, 2, 0, 2);
                getStatusBarPane().add(getJSeparatorClear(), constraintsJSeparatorClear);
                
                java.awt.GridBagConstraints constraintsJSeparatorToday = new java.awt.GridBagConstraints();
                constraintsJSeparatorToday.gridx = 2; constraintsJSeparatorToday.gridy = 0;
                constraintsJSeparatorToday.fill = java.awt.GridBagConstraints.VERTICAL;
                constraintsJSeparatorToday.insets = new java.awt.Insets(0, 2, 0, 2);
                getStatusBarPane().add(getJSeparatorToday(), constraintsJSeparatorToday);
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjStatusBarPane;
    }
    /**
     * Return the StatusMsg1 property value.
     * @return javax.swing.JLabel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JLabel getStatusMsg1() {
        if (ivjStatusMsg1 == null) {
            try {
                ivjStatusMsg1 = new javax.swing.JLabel();
                ivjStatusMsg1.setName("StatusMsg1");
                ivjStatusMsg1.setBorder(new javax.swing.border.CompoundBorder());
                ivjStatusMsg1.setText("Today : " + LocaleConstants.DATE_FORMAT.format(Today.getTime()) + "  ");
            } catch (java.lang.Throwable ivjExc) {
                handleException(ivjExc);
            }
        }
        return ivjStatusMsg1;
    }
    /**
     * Return the CDateAndTimePickerPane property value.
     * @return javax.swing.JPanel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JPanel getCDateAndTimePickerPane() {
        if (ivjCDateAndTimePickerPane == null) {
            try {
                ivjCDateAndTimePickerPane = new javax.swing.JPanel();
                ivjCDateAndTimePickerPane.setName("CDateAndTimePickerPane");
                ivjCDateAndTimePickerPane.setLayout(new java.awt.BorderLayout());
                getCDateAndTimePickerPane().add(getCalParam(), "North");
                getCDateAndTimePickerPane().add(getCalendarPane(), "Center");
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjCDateAndTimePickerPane;
    }
    /**
     * Return the JTextField1 property value.
     * @return javax.swing.JTextField
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JTextField getYear() {
        if (ivjYear == null) {
            try {
                ivjYear = new javax.swing.JTextField();
                ivjYear.setName("Year");
                ivjYear.setPreferredSize(new java.awt.Dimension(35, 23));
                ivjYear.setText("2002");
                
                int yearval = Today.get(GregorianCalendar.YEAR);
                ivjYear.setText(String.valueOf(yearval));
                getyearincrease().setMinimum(yearval - 100);
                getyearincrease().setValue(yearval);
                getyearincrease().setMaximum(yearval + 100);
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjYear;
    }
    /**
     * Return the yearincrease property value.
     * @return javax.swing.JScrollBar
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private javax.swing.JScrollBar getyearincrease() {
        if (ivjyearincrease == null) {
            try {
                ivjyearincrease = new javax.swing.JScrollBar();
                ivjyearincrease.setName("yearincrease");
                ivjyearincrease.setToolTipText("Year +/-");
                ivjyearincrease.setOpaque(true);
                ivjyearincrease.setVisible(false);
                ivjyearincrease.setBlockIncrement(1);
                ivjyearincrease.setValue(2002);
                ivjyearincrease.setPreferredSize(new java.awt.Dimension(17, 20));
                ivjyearincrease.setMaximum(2102);
                ivjyearincrease.setMinimum(1902);
                ivjyearincrease.setVisibleAmount(1);
                ivjyearincrease.setOrientation(javax.swing.JScrollBar.VERTICAL);
                
                
            } catch (java.lang.Throwable ivjExc) {
                
                
                handleException(ivjExc);
            }
        }
        return ivjyearincrease;
    }
    /**
     * Called whenever the part throws an exception.
     * @param exception java.lang.Throwable
     */
    private void handleException(java.lang.Throwable exception) {
        
        /* comment the following lines to print uncaught exceptions to stdout */
        // System.out.println("--------- UNCAUGHT EXCEPTION ---------");
        // exception.printStackTrace(System.out);
    }
    /**
     * Initializes connections
     * @exception java.lang.Exception The exception description.
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void initConnections() throws java.lang.Exception {
        
        
        getPrevious().addActionListener(ivjEventHandler);
        getNext().addActionListener(ivjEventHandler);
        getMonth().addActionListener(ivjEventHandler);
        getYear().addActionListener(ivjEventHandler);
        getyearincrease().addAdjustmentListener(ivjEventHandler);
        getbtnPrevYear().addActionListener(ivjEventHandler);
        getbtnNextYear().addActionListener(ivjEventHandler);
        getJButtonClear().addActionListener(ivjEventHandler);
        getJLabelTodayColor().addMouseListener(ivjEventHandler);
        getStatusMsg1().addMouseListener(ivjEventHandler);
    }
    /**
     * Initialize the class.
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void initialize() {
        try {
            setName("CDateAndTimePicker");
//            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
//            setResizable(false);
            setSize(235, 275);
//            setTitle("Calendar");
            add(getJFrameContentPane());
            initConnections();
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
        
//        setTitle("Calendar");
//        setModal(true);
        getYear().setText(String.valueOf(dt.get(GregorianCalendar.YEAR)));
        getMonth().setSelectedIndex(dt.get(GregorianCalendar.MONTH));
        
        generateCalendar();
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        
        /* Pack frame on the screen */
        //pack();
        
        /* Center frame on the screen */
        Dimension frameSize = getSize();
        if (frameSize.height > screenSize.height)
            frameSize.height = screenSize.height;
        if (frameSize.width > screenSize.width)
            frameSize.width = screenSize.width;
        setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
        setVisible(true);
        
    }
    /**
     * Comment
     */
    public void jButtonClear_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
        dateField.setText("");
//        this.dispose();
        return;
    }
    /**
     * Comment
     */
    public void jLabelTodayColor_MouseClicked(java.awt.event.MouseEvent mouseEvent) {
        return;
    }
    /**
     * Comment
     */
    public void month_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
        generateCalendar();
        return;
    }
    /**
     * Comment
     */
    public void next_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
        if (getMonth().getSelectedIndex() != (getMonth().getItemCount()-1)) {
            getMonth().setSelectedIndex(getMonth().getSelectedIndex() + 1);
        } else {
            getMonth().setSelectedIndex(0);
            getYear().setText(String.valueOf(Integer.parseInt(getYear().getText()) + 1));
        }
        generateCalendar();
        return;
    }
    /**
     * Comment
     */
    public void previous_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
        if (getMonth().getSelectedIndex() != 0) {
            getMonth().setSelectedIndex(getMonth().getSelectedIndex() - 1);
        } else {
            getMonth().setSelectedIndex(getMonth().getItemCount() - 1);
            getYear().setText(String.valueOf(Integer.parseInt(getYear().getText()) - 1));
        }
        generateCalendar();
        return;
    }
    /**
     * Comment
     */
    public void statusMsg1_MouseClicked(java.awt.event.MouseEvent mouseEvent) {
//        this.dispose();
        //String strDt = "";
        //strDt = (Today.get(GregorianCalendar.MONTH) + 1) + "/" + Today.get(GregorianCalendar.DATE) + "/" + Today.get(GregorianCalendar.YEAR);
        if (dateField != null) {
            //dateField.setText(strDt);
            ////////////////////////////
            dateField.setText(LocaleConstants.DATE_FORMAT.format(Today.getTime()));
            ////////////////////////////
        }
        return;
    }
    public void viewStatusBar() {
        /* Hide or show the statusbar */
        getStatusBarPane().setVisible(!(getStatusBarPane().isVisible()));
    }
    /**
     * Comment
     */
    public void year_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
        generateCalendar();
        return;
    }
    /**
     * Comment
     */
    public void yearincrease_AdjustmentValueChanged(java.awt.event.AdjustmentEvent adjustmentEvent) {
        getYear().setText(String.valueOf(adjustmentEvent.getValue()).replace('-', ' '));
        return;
    }
    
    class ButtonEventHandler implements java.awt.event.ActionListener {
        public void actionPerformed(java.awt.event.ActionEvent e) {
            System.out.println("@#$ "+e.getActionCommand());
            getDate(e);
        };
    }
    class IvjEventHandler implements java.awt.event.ActionListener, java.awt.event.AdjustmentListener, java.awt.event.MouseListener {
        public void actionPerformed(java.awt.event.ActionEvent e) {
            if (e.getSource() == CDateAndTimePicker.this.getPrevious())
                connEtoC1(e);
            if (e.getSource() == CDateAndTimePicker.this.getNext())
                connEtoC2(e);
            if (e.getSource() == CDateAndTimePicker.this.getMonth())
                connEtoC3(e);
            if (e.getSource() == CDateAndTimePicker.this.getYear())
                connEtoC4(e);
            if (e.getSource() == CDateAndTimePicker.this.getbtnPrevYear())
                connEtoC6(e);
            if (e.getSource() == CDateAndTimePicker.this.getbtnNextYear())
                connEtoC7(e);
            if (e.getSource() == CDateAndTimePicker.this.getJButtonClear())
                connEtoC8(e);
        };
        public void adjustmentValueChanged(java.awt.event.AdjustmentEvent e) {
            if (e.getSource() == CDateAndTimePicker.this.getyearincrease())
                connEtoC5(e);
        };
        public void mouseClicked(java.awt.event.MouseEvent e) {
            if (e.getSource() == CDateAndTimePicker.this.getJLabelTodayColor())
                connEtoC9(e);
            if (e.getSource() == CDateAndTimePicker.this.getStatusMsg1())
                connEtoC10(e);
        };
        public void mouseEntered(java.awt.event.MouseEvent e) {};
        public void mouseExited(java.awt.event.MouseEvent e) {};
        public void mousePressed(java.awt.event.MouseEvent e) {};
        public void mouseReleased(java.awt.event.MouseEvent e) {};
    };
    
    /**
     * connEtoC1:  (Previous.action.actionPerformed(java.awt.event.ActionEvent) --> CDateAndTimePicker.previous_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
     * @param arg1 java.awt.event.ActionEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void connEtoC1(java.awt.event.ActionEvent arg1) {
        try {
            this.previous_ActionPerformed(arg1);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
    }
    /**
     * connEtoC10:  (StatusMsg1.mouse.mouseClicked(java.awt.event.MouseEvent) --> CDateAndTimePicker.statusMsg1_MouseClicked(Ljava.awt.event.MouseEvent;)V)
     * @param arg1 java.awt.event.MouseEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void connEtoC10(java.awt.event.MouseEvent arg1) {
        try {
            this.statusMsg1_MouseClicked(arg1);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
    }
    /**
     * connEtoC2:  (Next.action.actionPerformed(java.awt.event.ActionEvent) --> CDateAndTimePicker.next_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
     * @param arg1 java.awt.event.ActionEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void connEtoC2(java.awt.event.ActionEvent arg1) {
        try {
            this.next_ActionPerformed(arg1);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
    }
    /**
     * connEtoC3:  (Month.action.actionPerformed(java.awt.event.ActionEvent) --> CDateAndTimePicker.month_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
     * @param arg1 java.awt.event.ActionEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void connEtoC3(java.awt.event.ActionEvent arg1) {
        try {
            this.month_ActionPerformed(arg1);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
    }
    /**
     * connEtoC4:  (Year.action.actionPerformed(java.awt.event.ActionEvent) --> CDateAndTimePicker.year_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
     * @param arg1 java.awt.event.ActionEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void connEtoC4(java.awt.event.ActionEvent arg1) {
        try {
            this.year_ActionPerformed(arg1);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
    }
    /**
     * connEtoC5:  (yearincrease.adjustment.adjustmentValueChanged(java.awt.event.AdjustmentEvent) --> CDateAndTimePicker.yearincrease_AdjustmentValueChanged(Ljava.awt.event.AdjustmentEvent;)V)
     * @param arg1 java.awt.event.AdjustmentEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void connEtoC5(java.awt.event.AdjustmentEvent arg1) {
        try {
            this.yearincrease_AdjustmentValueChanged(arg1);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
    }
    /**
     * connEtoC6:  (btnPrevYear.action.actionPerformed(java.awt.event.ActionEvent) --> CDateAndTimePicker.btnPrevYear_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
     * @param arg1 java.awt.event.ActionEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void connEtoC6(java.awt.event.ActionEvent arg1) {
        try {
            this.btnPrevYear_ActionPerformed(arg1);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
    }
    /**
     * connEtoC7:  (btnNextYear.action.actionPerformed(java.awt.event.ActionEvent) --> CDateAndTimePicker.btnNextYear_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
     * @param arg1 java.awt.event.ActionEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void connEtoC7(java.awt.event.ActionEvent arg1) {
        try {
            this.btnNextYear_ActionPerformed(arg1);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
    }
    /**
     * connEtoC8:  (JButtonClear.action.actionPerformed(java.awt.event.ActionEvent) --> CDateAndTimePicker.jButtonClear_ActionPerformed(Ljava.awt.event.ActionEvent;)V)
     * @param arg1 java.awt.event.ActionEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void connEtoC8(java.awt.event.ActionEvent arg1) {
        try {
            this.jButtonClear_ActionPerformed(arg1);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
    }
    /**
     * connEtoC9:  (JLabelTodayColor.mouse.mouseClicked(java.awt.event.MouseEvent) --> CDateAndTimePicker.statusMsg1_MouseClicked(Ljava.awt.event.MouseEvent;)V)
     * @param arg1 java.awt.event.MouseEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void connEtoC9(java.awt.event.MouseEvent arg1) {
        try {
            this.statusMsg1_MouseClicked(arg1);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
    }
    
    private JPanel ivjJFrameContentPane = null;
    private JPanel ivjStatusBarPane = null;
    private JLabel ivjStatusMsg1 = null;
    private JPanel ivjCDateAndTimePickerPane = null;
    private JPanel ivjCalendarPane = null;
    private GridLayout ivjCalendarPaneGridLayout = null;
    private JComboBox ivjMonth = null;
    private JButton ivjNext = null;
    private JButton ivjPrevious = null;
    private JTextField ivjYear = null;
    private JPanel ivjCalParam = null;
    private JLabel ivjJLabel1 = null;
    private JLabel ivjJLabel2 = null;
    private JLabel ivjJLabel3 = null;
    private JLabel ivjJLabel4 = null;
    private JLabel ivjJLabel5 = null;
    private JLabel ivjJLabel6 = null;
    private JLabel ivjJLabel7 = null;
    IvjEventHandler ivjEventHandler = new IvjEventHandler();
    private JLabel ivjJLabel11 = null;
    private JLabel ivjJLabel8 = null;
    private JScrollBar ivjyearincrease = null;
    private JButton ivjbtnNextYear = null;
    private JButton ivjbtnPrevYear = null;
    private JPanel ivjJPanel1 = null;
    private JButton ivjJButtonClear = null;
    private JSeparator ivjJSeparatorClear = null;
    private JSeparator ivjJSeparatorToday = null;
    private JLabel ivjJLabelTodayColor = null;
    
    public static void main(String st[]) {
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
            JFrame f = new JFrame();
            f.setSize(300,300);
            f.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            JTextField jt = new JTextField();
            f.getContentPane().add(new CDateAndTimePicker(jt, false));
            System.out.println(jt.getText());
//            f.pack();
            f.show();
        } catch (Exception e){}
        
    }
    
    /**
     * Getter for property holidayList.
     * @return Value of property holidayList.
     */
    public java.util.List getHolidayList() {
        return holidayList;
    }
    
    /**
     * Setter for property holidayList.
     * @param holidayList New value of property holidayList.
     */
    public void setHolidayList(java.util.List holidayList) {
        this.holidayList = holidayList;
    }
}
