/* 
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.  
 * 

 * CTextField.java
 *
 * Created on July 18, 2003, 10:25 AM
 */

package com.see.truetransact.uicomponent;

import java.awt.event.KeyEvent;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JLabel;
import com.see.truetransact.uivalidation.UIComponentValidation;
import com.see.truetransact.uivalidation.CurrencyValidation;
import com.see.truetransact.uivalidation.NumericValidation;
import com.see.truetransact.uivalidation.PercentageValidation;
import com.see.truetransact.uivalidation.PincodeValidation_IN;
import com.see.truetransact.uivalidation.DefaultValidation;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.commonutil.LocaleConstants;
import com.see.truetransact.uivalidation.PhoneNoValidation;
import com.see.truetransact.uivalidation.*;

/**
 *
 * @author  karthik, Bala
 */
public class CTextField extends javax.swing.JTextField {
    
    /** Holds value of property validation. */
    private UIComponentValidation uiComponentValidation;
    
    private boolean allowNumber = false;
    private boolean allowAll = false;    
    /** Holds value of property maxLength. */
    private int maxLength;
    
    private String helpMessage;
    private JLabel lblDisplay;
    
//    private String ruleText;        // Rule Text
//    private JButton btnAuthorize;   // Authorize Button
    
    /** Creates new form BeanForm */
    public CTextField() {
        initSettings();
        setFont(new java.awt.Font("MS Sans Serif",java.awt.Font.PLAIN,13));
    }
    
    /* All the initial Settings */
    private void initSettings () {
        initComponents();
        setPreferredSize(new java.awt.Dimension(100, 21));
        uiComponentValidation = new DefaultValidation();
        uiComponentValidation.setComponent(this);
        setDisabledTextColor(new java.awt.Color(51,51,51));
        helpFocus();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

        setInputVerifier(new InputVerifier() {

            boolean verified = false;
            public boolean verify(JComponent input) {
                if (verified) {
                    return false;
                }
                verified = true;
                /*if(uiComponentValidation == null){
                    return true;
                }*/

                if(uiComponentValidation.validate()) {
                    verified = false;
                    return true;
                }
                else {
                    ValidationRB validationRB = new ValidationRB();
                    if( validationRB.getString("display_optionpane").equals("1") ) {
                        String[] options = { CommonConstants.OK};
                        COptionPane.showOptionDialog(null, uiComponentValidation.getErrorMessage(), CommonConstants.WARNINGTITLE,
                            COptionPane.DEFAULT_OPTION, COptionPane.WARNING_MESSAGE,
                            null, options, options[0]);
                    }
                    verified = false;
                    return false;
                }

            }

        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

    }//GEN-END:initComponents

    int length;
    
    /** To validate the KeyEvent
     * @param evt
     */    
    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        // Add your handling code here:
        /*if( uiComponentValidation != null ){
            uiComponentValidation.validateEvent(evt);
        }*/
	length = this.getText().length();
        if( maxLength != 0 && length >= maxLength ){
            if( checkInValidCharacter(evt.getKeyChar())){
                evt.consume();
            }
        } else {
            uiComponentValidation.validateEvent(evt);
        }
        
        if (evt.getKeyChar() == '\n') {
            nextFocus();
        }
    }//GEN-LAST:event_formKeyTyped
    
    private boolean checkInValidCharacter(char keyChar){
        if (!((keyChar == KeyEvent.VK_BACK_SPACE) ||
             (keyChar == KeyEvent.VK_DELETE))) {
            return true;
        }
        return false;
    }
    /** Getter for property validation.
     * @return Value of property validation.
     *
     */
    public UIComponentValidation getValidation() {
        return this.uiComponentValidation;
    }    

    /** Setter for property validation.
     * @param uiComponentValidation
     */
    public void setValidation(UIComponentValidation uiComponentValidation) {
        this.uiComponentValidation = uiComponentValidation;
        this.uiComponentValidation.setComponent(this);
        
        if (this.uiComponentValidation instanceof CurrencyValidation ||
            this.uiComponentValidation instanceof NumericValidation ||
            this.uiComponentValidation instanceof PercentageValidation) {
                this.setHorizontalAlignment(this.RIGHT);
        } else if (this.uiComponentValidation instanceof PincodeValidation_IN) {
            this.setMaxLength(6);
        }
    }
    
    /** Getter for property maxLength.
     * @return Value of property maxLength.
     *
     */
    public int getMaxLength() {
        return this.maxLength;
    }
    
    /** Setter for property maxLength.
     * @param maxLength New value of property maxLength.
     *
     */
    public void setMaxLength(int maxLength) {
        this.maxLength = maxLength;
    }
    
    /** Getter for property text.Overriding JTextField's method
     * @return Value of property text.
     *
     */
    public String getText() {
        if( (this.uiComponentValidation instanceof CurrencyValidation ||
            this.uiComponentValidation instanceof NumericValidation) &&
            super.getText().trim().length() > 0){
            return super.getText().replaceAll(",","").replaceAll(LocaleConstants.CURRENCY,"");
        } else if (this.uiComponentValidation instanceof DefaultValidation) {
            return super.getText();
        }
        return super.getText().trim();
    }
    
    public void setText(String text){
        if( this.uiComponentValidation instanceof CurrencyValidation &&
            text != null && 
            text.trim().length() > 0){
                
            if (!text.equals("0")) {
                text = LocaleConstants.CURRENCY + ((CurrencyValidation) uiComponentValidation).getFormattedText(text);
            }
            super.setText(text);
        } else  {
             super.setText(text);
        }
        
        // It shouldn't be greater than MaxLength
        if (getText().length() > getMaxLength() && getMaxLength() > 0) 
            super.setText("");
        
        // Positioning into starting place.
        try {
            setCaretPosition(0);
        } catch (Exception e) {}
    }
    
    /* Adding focus listener to the textfield */
    private void helpFocus() {
        addFocusListener(new HelpFocusAdapter());
    }
    
    /* Adding Tooltip help for all the input components */
    private class HelpFocusAdapter extends java.awt.event.FocusAdapter {
        public void focusGained(java.awt.event.FocusEvent evt) {
            if (lblDisplay != null) lblDisplay.setText(helpMessage);
        }
        public void focusLost(java.awt.event.FocusEvent evt) {            
            if (lblDisplay != null) lblDisplay.setText("");
            /*if (btnAuthorize != null) {
                if (validateRule()) {
                    btnAuthorize.setEnabled(true);
                } else {
                    btnAuthorize.setEnabled(false);
                }
            }*/
        }
    }

    /* Setter / getter for Help Messages */
    public void setHelpMessage(JLabel lblDisplay, String helpMessage) {
        String strComp = "should not be empty!!!";
        if (helpMessage.indexOf(strComp) > 0) {
            helpMessage = "Enter " + helpMessage.substring(0, helpMessage.indexOf(strComp));
        }
        
        this.helpMessage = helpMessage;
        this.lblDisplay = lblDisplay;
    }
    public String getHelpMessage() {
        return this.helpMessage;
    }
    
    /**
     * Getter for property allowNumber.
     * @return Value of property allowNumber.
     */
    public boolean isAllowNumber() {
        return allowNumber;
    }
    
    /**
     * Setter for property allowNumber.
     * @param allowNumber New value of property allowNumber.
     */
    public void setAllowNumber(boolean allowNumber) {
        this.allowNumber = allowNumber;
    }
    
    /**
     * Getter for property allowAll.
     * @return Value of property allowAll.
     */
    public boolean isAllowAll() {
        return allowAll;
    }
    
    /**
     * Setter for property allowAll.
     * @param allowAll New value of property allowAll.
     */
    public void setAllowAll(boolean allowAll) {
        this.allowAll = allowAll;
    }
    
    public void setEnabled(boolean enable) {
        super.setEnabled(enable);
        super.setEditable(enable);
        if (!enable) {
            setBackground(new java.awt.Color(220,220,220));
        } else
            setBackground((new javax.swing.JTextField()).getBackground());
    }
    
    /* Setter / getter for Authorize Button 
    public void setRule(JButton btnAuthorize, String ruleText) {
        this.btnAuthorize = btnAuthorize;
        this.ruleText = ruleText;
    }
    public String getRule() {
        return this.ruleText;
    }
    
    private boolean validateRule() {
        if (ruleText.equals(getText())) 
            return true;
        else
            return false;
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
