/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.  
 * 
 *
 * AddressPanel.java
 *
 * Created on September 2, 2003, 12:44 PM
 */

package com.see.truetransact.uicomponent;

import com.see.truetransact.clientproxy.ProxyFactory;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.clientutil.ComboBoxModel;
import java.util.ArrayList;
import java.util.HashMap;

/**
 *
 * @author  Pranav
 */
public class CAddressPanel extends com.see.truetransact.uicomponent.CPanel {
    
    /** Creates new form AddressPanel */
    public CAddressPanel() {
        initComponents();
        initComponentsRB();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        lblStreet = new com.see.truetransact.uicomponent.CLabel();
        txtStreet = new com.see.truetransact.uicomponent.CTextField();
        lblCountry = new com.see.truetransact.uicomponent.CLabel();
        cboCountry = new com.see.truetransact.uicomponent.CComboBox();
        lblState = new com.see.truetransact.uicomponent.CLabel();
        cboState = new com.see.truetransact.uicomponent.CComboBox();
        lblCity = new com.see.truetransact.uicomponent.CLabel();
        cboCity = new com.see.truetransact.uicomponent.CComboBox();
        lblPincode = new com.see.truetransact.uicomponent.CLabel();
        txtPincode = new com.see.truetransact.uicomponent.CTextField();
        lblArea = new com.see.truetransact.uicomponent.CLabel();
        txtArea = new com.see.truetransact.uicomponent.CTextField();

        setLayout(new java.awt.GridBagLayout());

        lblStreet.setText("Street");
        lblStreet.setName("lblStreet");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(lblStreet, gridBagConstraints);

        txtStreet.setPreferredSize(new java.awt.Dimension(200, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(txtStreet, gridBagConstraints);

        lblCountry.setText("Country");
        lblCountry.setName("lblCountry");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(lblCountry, gridBagConstraints);

        cboCountry.setEditable(true);
        cboCountry.setPreferredSize(new java.awt.Dimension(100, 21));
        cboCountry.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCountryItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(cboCountry, gridBagConstraints);

        lblState.setText("State");
        lblState.setName("lblState");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(lblState, gridBagConstraints);

        cboState.setEditable(true);
        cboState.setPreferredSize(new java.awt.Dimension(100, 21));
        cboState.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboStateItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(cboState, gridBagConstraints);

        lblCity.setText("City");
        lblCity.setName("lblCity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(lblCity, gridBagConstraints);

        cboCity.setEditable(true);
        cboCity.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(cboCity, gridBagConstraints);

        lblPincode.setText("Pincode");
        lblPincode.setName("lblPincode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(lblPincode, gridBagConstraints);

        txtPincode.setPreferredSize(new java.awt.Dimension(50, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(txtPincode, gridBagConstraints);

        lblArea.setText("Area");
        lblArea.setName("lblArea");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(lblArea, gridBagConstraints);

        txtArea.setPreferredSize(new java.awt.Dimension(200, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(txtArea, gridBagConstraints);

    }//GEN-END:initComponents

    private void cboStateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboStateItemStateChanged
        // Add your handling code here:
        /* Include the code for filling up the country,
         * by default only country will be enabled
         */
        //cboCity.setModel(getComboModel("CUSTOMER.CITY"));
    }//GEN-LAST:event_cboStateItemStateChanged

    private void cboCountryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCountryItemStateChanged
        // Add your handling code here:
        //cboState.setModel(getComboModel("CUSTOMER.STATE"));
    }//GEN-LAST:event_cboCountryItemStateChanged
    
    /** This method is used to take care of the internationalization Issues
     */
    private void initComponentsRB() {

        CAddressPanelRB panelRB = new CAddressPanelRB();
        lblStreet.setText(panelRB.getString("lblStreet"));
        lblArea.setText(panelRB.getString("lblArea"));
        lblCountry.setText(panelRB.getString("lblCountry"));
        lblState.setText(panelRB.getString("lblState"));
        lblCity.setText(panelRB.getString("lblCity"));
        lblPincode.setText(panelRB.getString("lblPincode"));
        
        /* Include the code for filling up the country,
         * by default only country will be enabled
         */
        cboCountry.setModel(getComboModel("CUSTOMER.COUNTRY"));
        
        // Right now we are not checking dependency, will load all the data
        cboState.setModel(getComboModel("CUSTOMER.STATE"));
        cboCity.setModel(getComboModel("CUSTOMER.CITY"));
    }

    private ComboBoxModel getComboModel(String lookupId) {
        
        /* populate the combo boxe, the Lookup bean will be used for that,
         * this will give back two values
         * one value will be used for display on combo box and the other
         * for exact value of that element
         */
        HashMap comboMap = new java.util.HashMap();
        comboMap.put(CommonConstants.JNDI, "LookUpJNDI");
        comboMap.put(CommonConstants.HOME, "common.lookup.LookUpHome");
        comboMap.put(CommonConstants.REMOTE, "common.lookup.LookUp");
        HashMap keyValue = null;
        ArrayList key = null;
        ArrayList value = null;
        try {
            ProxyFactory proxy = ProxyFactory.createProxy();

            // create combo box for instrument type
            keyValue = getDataMap(null, lookupId, comboMap);
            key = (ArrayList)keyValue.get("KEY");
            value = (ArrayList)keyValue.get("VALUE");
            return new ComboBoxModel(key, value);
        } catch (Exception e) {
            System.err.println( "Exception " + e + " caught" );
            e.printStackTrace();
        }
        
        return null;
    }

    private HashMap getDataMap(String mapName, String query, HashMap comboMap) {
        HashMap keyValue = null;
        try {
            ProxyFactory proxy = ProxyFactory.createProxy();
            HashMap h = new HashMap();
            h.put(CommonConstants.MAP_NAME, mapName);
            h.put(CommonConstants.PARAMFORQUERY, query);
            
            keyValue = (HashMap) proxy.executeQuery(h, comboMap);
        } catch (Exception e) {
            System.err.println( "Exception " + e + " caught" );
            e.printStackTrace();
        }
        return keyValue;
    }
    
    public String getStreet() {
        return txtStreet.getText();
    }

    public void setStreet(String street) {
        txtStreet.setText(street);
    }

    public String getArea() {
        return txtArea.getText();
    }

    public void setArea(String area) {
        txtArea.setText(area);
    }

    public String getCountry() {
        return (String)cboCountry.getSelectedItem();
    }

    public void setCountry(String country) {
        /* This means that the country that the user trying to select is
         * already there in the database
         */
        cboCountry.setSelectedItem(country);
    }

    public String getState() {
        return (String)cboState.getSelectedItem();
    }

    public void setState(String state) {
        /* This means that the state that the user trying to select is
         * already there in the database
         */
        cboState.setSelectedItem(state);
    }

    public String getCity() {
        return (String)cboCity.getSelectedItem();
    }

    public void setCity(String city) {
        /* This means that the city that the user trying to select is
         * already there in the database
         */
        cboCity.setSelectedItem(city);
    }

    public String getPincode() {
        return txtPincode.getText();
    }

    public void setPincode(String pincode) {
        txtPincode.setText(pincode);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CComboBox cboCity;
    private com.see.truetransact.uicomponent.CComboBox cboCountry;
    private com.see.truetransact.uicomponent.CComboBox cboState;
    private com.see.truetransact.uicomponent.CLabel lblArea;
    private com.see.truetransact.uicomponent.CLabel lblCity;
    private com.see.truetransact.uicomponent.CLabel lblCountry;
    private com.see.truetransact.uicomponent.CLabel lblPincode;
    private com.see.truetransact.uicomponent.CLabel lblState;
    private com.see.truetransact.uicomponent.CLabel lblStreet;
    private com.see.truetransact.uicomponent.CTextField txtArea;
    private com.see.truetransact.uicomponent.CTextField txtPincode;
    private com.see.truetransact.uicomponent.CTextField txtStreet;
    // End of variables declaration//GEN-END:variables
/*
    public static void main(String[] args) {
        javax.swing.JFrame frame = new javax.swing.JFrame();
        AddressPanel panel = new AddressPanel();
        frame.getContentPane().add(panel);
        panel.setArea("Hardwar");
        panel.setCountry("India");
        frame.show();
    }
 */
}
