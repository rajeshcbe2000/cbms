<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="MDSMemberReceiptEntryMap">

    <!-- Use ExternalWireTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
             
    <dynamic-mapped-statement name ="getSelectMemberList" result-class = "java.util.LinkedHashMap">
        SELECT MA.MEMBER_NO,MA.MEMBER_NAME,GET_CUST_ADDR(MA.CUST_ID) AS ADDRESS,MA.MEMBER_TYPE, MSD.SCHEME_NAME,MA.CHITTAL_NO,MA.SUB_NO,
        MA.DIVISION_NO,MSD.SCHEME_DESC FROM MDS_APPLICATION MA, MDS_MASTER_MAINTENANCE MM, MDS_SCHEME_DETAILS MSD WHERE MA.MEMBER_NO IS NOT NULL 
        AND MA.STATUS!='DELETED' AND MA.AUTHORIZE_STATUS = 'AUTHORIZED' AND 
        MA.COMMENCEMENT_AUTHORIZE_STATUS = 'AUTHORIZED' AND MA.SCHEME_NAME = MSD.SCHEME_NAME 
        AND  MSD.STATUS!='DELETED' AND MSD.STATUS!='CLOSED' AND msd.authorized_status!='REJECTED' 
        AND (SELECT NO_OF_INSTALLMENTS  FROM MDS_SCHEME_DETAILS WHERE SCHEME_NAME =MA.SCHEME_NAME) >
        (SELECT SUM(NO_OF_INST) NO_OF_INST FROM MDS_TRANS_DETAILS WHERE 
        CHITTAL_NO = MA.CHITTAL_NO AND SUB_NO = MA.SUB_NO AND STATUS!='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED')
        AND MA.CHITTAL_NO=MM.CHITTAL_NO AND MA.SUB_NO=MM.SUB_NO AND MA.SCHEME_NAME=MM.SCHEME_NAME AND NVL(MM.LOCK_STATUS,'N')='N'
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "MEMBER_NUMBER">
                    MA.MEMBER_NO = #MEMBER_NUMBER:VARCHAR#
                </isNotNull>
            </isParameterPresent>
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBER_NO">
                    UPPER(MA.MEMBER_NO) LIKE UPPER('%$MEMBER_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBER_NAME">
                    UPPER(MA.MEMBER_NAME) LIKE UPPER('%$MEMBER_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="ADDRESS">
                    UPPER(GET_CUST_ADDR(MA.CUST_ID)) LIKE UPPER('%$ADDRESS$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBER_TYPE">
                    UPPER(MA.MEMBER_TYPE) LIKE UPPER('%$MEMBER_TYPE$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="ADDRESS">
                    UPPER(GET_CUST_ADDR(MA.CUST_ID)) LIKE UPPER('%$ADDRESS$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="SCHEME_NAME">
                    UPPER(MSD.SCHEME_NAME) LIKE UPPER('%$SCHEME_NAME$%')
                </isNotNull>
            </isParameterPresent>
                <isParameterPresent>
                <isNotNull prepend="AND"      property="CHITTAL_NO">
                    UPPER(MA.CHITTAL_NO) LIKE UPPER('%$CHITTAL_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="SUB_NO">
                    UPPER(MA.SUB_NO) LIKE UPPER('%$SUB_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="DIVISION_NO">
                    UPPER(MA.DIVISION_NO) LIKE UPPER('%$DIVISION_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="SCHEME_DESC">
                    UPPER(MSD.SCHEME_DESC) LIKE UPPER('%$SCHEME_DESC$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        GROUP BY MA.MEMBER_NO ,MA.MEMBER_NAME ,MA.MEMBER_TYPE ,MSD.SCHEME_NAME,MA.CHITTAL_NO,MA.SUB_NO,MA.DIVISION_NO,MA.CUST_ID,MSD.SCHEME_DESC
        ORDER BY MA.MEMBER_NAME
    </dynamic-mapped-statement>
             
    <mapped-statement name="getSelectMemberEachList" result-class="java.util.HashMap" >
        SELECT SCHEME_NAME,CHITTAL_NO,DIVISION_NO,INST_AMT,MEMBER_NO,INST_COUNT FROM MDS_APPLICATION WHERE MEMBER_NO = #MEMBER_NO:VARCHAR# AND 
        STATUS!='DELETED' AND AUTHORIZE_STATUS = 'AUTHORIZED' AND COMMENCEMENT_AUTHORIZE_STATUS = 'AUTHORIZED' 
    </mapped-statement>
    
    <mapped-statement name="insertMDSMemberReceiptEntryTO" inline-parameters="true">
        INSERT INTO MDS_MEMBER_RECEIPT_ENTRY
        (MEMBER_RECEIPT_ID, MEMBER_NO, SCHEME_NAME, CHITTAL_NO, PENDING_INST, NO_OF_INST_PAY, INST_AMT, BONUS_AMT, 
        DISCOUNT_AMT, TOTAL_PAYABLE, PENAL_AMT, NOTICE_AMT, ARBITRATION_AMT, NET_AMT, STATUS, STATUS_BY, STATUS_DT ,SUB_NO
        ) VALUES (
        #memberReceiptId:VARCHAR#, #memberNo:VARCHAR#, #schemeName:VARCHAR#, #chittalNo:VARCHAR#, 
        #pendingInst:NUMERIC#, #noOfInstPay:NUMERIC#, #instAmt:NUMERIC#, #bonusAmt:NUMERIC#, #discountAmt:NUMERIC#, 
        #totalPayable:NUMERIC#, #penalAmt:NUMERIC#, #noticeAmt:NUMERIC#, #arbitrationAmt:NUMERIC#, #netAmt:NUMERIC#, 
        #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#, cast(#subNo# as numeric))
    </mapped-statement>
        
    <mapped-statement name="getMemberReceiptAuthorize" result-class="java.util.LinkedHashMap">
        SELECT   member_receipt_id AS receipt_id, member_no,MRE.MEMBER_NAME,c.status
            FROM mds_member_receipt_entry c, mds_receipt_entry mre, all_trans AT
           WHERE MRE.STATUS_DT=AT.trans_dt and
              AT.trans_dt = #TRANS_DT:DATE#
             AND AT.link_batch_id = mre.net_trans_id
             and AT.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR#
             AND c.status != 'DELETED'
             AND c.authorized_status IS NULL
             AND cast(#HIERARCHY_ID# as numeric) &gt;=
                    (SELECT DISTINCT DECODE (NVL (same_hierarchy_allowed, 'N'),
                                             'Y', hierarchy_id,
                                             hierarchy_id + 1
                                            )
                                FROM user_master um, role_master rm
                               WHERE rm.role_id = um.user_role
                                 AND rm.GROUP_ID = um.user_group
                                 AND um.user_id = c.status_by)    
             AND c.status_by != #USER_ID:VARCHAR#
             AND mre.chittal_no = c.chittal_no
        GROUP BY member_receipt_id, member_no,MRE.MEMBER_NAME,c.status
    </mapped-statement>
    <mapped-statement name="getMemberReceiptCashierAuthorize" result-class="java.util.LinkedHashMap">
        SELECT   MEMBER_RECEIPT_ID AS RECEIPT_ID, MEMBER_NO,MRE.MEMBER_NAME,C.STATUS FROM MDS_MEMBER_RECEIPT_ENTRY C,MDS_RECEIPT_ENTRY MRE, ALL_TRANS AT
        WHERE MRE.STATUS_DT=AT.trans_dt and AT.TRANS_DT = #TRANS_DT:DATE# and AT.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND AT.LINK_BATCH_ID = MRE.NET_TRANS_ID AND C.STATUS != 'DELETED' AND C.AUTHORIZED_STATUS IS NULL
        AND cast(#HIERARCHY_ID# as numeric) &gt;=(SELECT DISTINCT DECODE (NVL (SAME_HIERARCHY_ALLOWED, 'N'),'Y', HIERARCHY_ID,HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID = UM.USER_GROUP AND UM.USER_ID = C.STATUS_BY)
        AND CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN 'AUTHORIZED' ELSE AT.PAYMENT_STATUS END IS NOT NULL
        AND C.STATUS_BY != #USER_ID:VARCHAR# AND MRE.CHITTAL_NO=C.CHITTAL_NO GROUP BY MEMBER_RECEIPT_ID, MEMBER_NO,C.STATUS,MRE.MEMBER_NAME
        <!--SELECT MEMBER_RECEIPT_ID as RECEIPT_ID,MEMBER_NO,C.STATUS FROM MDS_MEMBER_RECEIPT_ENTRY C,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT# AND AT.link_batch_id= C.CHITTAL_NO AND c.STATUS !='DELETED' AND c.AUTHORIZED_STATUS IS NULL AND cast(cast(#HIERARCHY_ID# as numeric) as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', 
        HIERARCHY_ID, HIERARCHY_ID + 1)FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND  RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = C.STATUS_BY)
        AND  CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN 'AUTHORIZED' ELSE AT.PAYMENT_STATUS END IS NOT NULL AND C.STATUS_BY!= #USER_ID# GROUP BY MEMBER_RECEIPT_ID,MEMBER_NO,c.STATUS       -->
    </mapped-statement>
    <mapped-statement name="getMemberReceiptDetails" result-class="java.util.LinkedHashMap">
        SELECT MDS_MEMBER_RECEIPT_ENTRY.*,GET_JOINT_CUST(CHITTAL_NO) AS CUST_NAME,
        (select SCHEME_DESC from MDS_SCHEME_DETAILS where scheme_name =MDS_MEMBER_RECEIPT_ENTRY.SCHEME_NAME ) as SCHEME_DESC FROM MDS_MEMBER_RECEIPT_ENTRY WHERE STATUS !='DELETED' 
        AND MEMBER_RECEIPT_ID = #MEMBER_RECEIPT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="authorizeMemberReceiptDetails" result-class="java.util.HashMap">
        UPDATE MDS_MEMBER_RECEIPT_ENTRY SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #AUTHORIZED_BY:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#
        WHERE STATUS != 'DELETED' AND MEMBER_RECEIPT_ID = #MEMBER_RECEIPT_ID:VARCHAR#
    </mapped-statement>
        
   <dynamic-mapped-statement name="getMemberReceiptEnquiry" result-class="java.util.LinkedHashMap">
        SELECT MEMBER_RECEIPT_ID as RECEIPT_ID,MEMBER_NO,STATUS FROM MDS_MEMBER_RECEIPT_ENTRY
        WHERE STATUS!='DELETED' AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS = 'AUTHORIZED')  
          <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="RECEIPT_ID">
                    UPPER(MEMBER_RECEIPT_ID) LIKE UPPER('%$RECEIPT_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBER_NO">
                    UPPER(MEMBER_NO) LIKE UPPER('%$MEMBER_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="STATUS">
                    UPPER(STATUS) LIKE UPPER('%$STATUS$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        GROUP BY MEMBER_RECEIPT_ID,MEMBER_NO,STATUS ORDER BY MEMBER_RECEIPT_ID
    </dynamic-mapped-statement>
        
     <dynamic-mapped-statement name="getMemberReceiptDelete" result-class="java.util.LinkedHashMap">
        SELECT MEMBER_RECEIPT_ID as RECEIPT_ID,MEMBER_NO,STATUS FROM MDS_MEMBER_RECEIPT_ENTRY WHERE STATUS!='DELETED' AND 
        AUTHORIZED_STATUS IS NULL 
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="RECEIPT_ID">
                    UPPER(MEMBER_RECEIPT_ID) LIKE UPPER('%$RECEIPT_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBER_NO">
                    UPPER(MEMBER_NO) LIKE UPPER('%$MEMBER_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="STATUS">
                    UPPER(STATUS) LIKE UPPER('%$STATUS$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        GROUP BY MEMBER_RECEIPT_ID,MEMBER_NO,STATUS ORDER BY MEMBER_RECEIPT_ID
    </dynamic-mapped-statement>
        
    <mapped-statement name="getMemberNameAndType" result-class="java.util.LinkedHashMap">
        SELECT MEMBER_NAME,MEMBER_TYPE FROM MDS_APPLICATION WHERE STATUS!= 'DELETED' AND MEMBER_NO = #MEMBER_NO:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="getMDSMemberReceiptDetails" result-class="java.util.LinkedHashMap">
        SELECT MEMBER_RECEIPT_ID, MRE.SCHEME_NAME, MRE.CHITTAL_NO, MRE.SUB_NO, MRE.NET_TRANS_ID,MRE.INST_AMT,MRE.NO_OF_INST_PAY,
        MRE.BONUS_AMT_PAYABLE,MRE.PENAL_AMT_PAYABLE,MRE.DISCOUNT_AMT,MRE.NET_AMT,MRE.CURR_INST,MRE.PENDING_INST,MRE.BANK_PAY,
        nvl(MRE.NOTICE_AMT,0) as NOTICE_AMT,
       nvl(MRE.ARBITRATION_AMT,0) as ARBITRATION_AMT
        FROM MDS_MEMBER_RECEIPT_ENTRY MMRE, MDS_RECEIPT_ENTRY MRE WHERE 
        MMRE.CHITTAL_NO=MRE.CHITTAL_NO AND MMRE.SUB_NO=MRE.SUB_NO AND PAID_DATE=#PAID_DATE:DATE# AND MMRE.STATUS !='DELETED' AND 
        MMRE.AUTHORIZED_STATUS IS NULL AND MRE.AUTHORIZE_STATUS IS NULL AND MEMBER_RECEIPT_ID = #MEMBER_RECEIPT_ID:VARCHAR# 
    </mapped-statement>
    
    <mapped-statement name="getSingleIdTr" result-class="java.util.HashMap" > 
        select DISTINCT SINGLE_TRANS_ID from TRANSFER_TRANS where BATCH_ID=#BATCH_ID:VARCHAR# and TRANS_DT=#TRANS_DT:DATE# 
    </mapped-statement> 
    
    <mapped-statement name="getSingleIdCash" result-class="java.util.HashMap" > 
        select DISTINCT SINGLE_TRANS_ID from CASH_TRANS where TRANS_ID=#BATCH_ID:VARCHAR# and TRANS_DT=#TRANS_DT:DATE# 
    </mapped-statement>   
    
    <mapped-statement name="getMemberStandingDetails" result-class="java.util.HashMap" > 
        SELECT MA.MEMBER_NO,MA.MEMBER_NAME,MA.DR_ACT_NO,MA.PROD_ID,MA.PROD_TYPE,MA.SCHEME_NAME
        FROM MDS_APPLICATION MA,MDS_SCHEME_DETAILS MSD
        WHERE MSD.SCHEME_NAME = MA.SCHEME_NAME
        AND MA.STANDING_INSTN = 'Y'
        AND MA.MEMBER_NO = #MEMBER_NO:VARCHAR#
        AND MA.STATUS != 'DELETED'
        AND MA.AUTHORIZE_STATUS = 'AUTHORIZED'
   </mapped-statement>  
 
</sql-map>