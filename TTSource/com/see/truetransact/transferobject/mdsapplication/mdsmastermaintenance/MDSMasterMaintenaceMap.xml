<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="MDSMasterMaintenaceMap">

	<!-- Use ExternalWireTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->

             
    <mapped-statement name="insertMDSMasterMaintenanceTO" inline-parameters="true">
        INSERT INTO MDS_MASTER_MAINTENANCE
        (SCHEME_NAME, CHITTAL_NO, DIVISION_NO, CHIT_START_DT, MEMBER_NO, MEMBER_NAME, MEMBER_TYPE, NOMINEE_NAME, PAY_DT, 
        PRIZED_AMOUNT, RESOLUTION_NO, RESOLUTION_DT, BOND_NO, BOND_DT, LAST_INSTALLMENT_NO, LAST_INSTALLMENT_DT, TOTAL_AMOUNT, 
        INSTALLMENT_DUE, INSTAL_OVERDUE_AMT, INSTAL_REMARKS, SALARY_CERFICATE_NO, EMP_NAME, EMP_ADDRESS, CITY, PIN, DESIGNATION, 
        CONTACT_NO, RETIREMENT_DT, EMP_MEMBER_NO, TOTAL_SALARY, NETWORTH, SALARY_REMARKS, SECURITY_TYPE, SECURITY_VALUE, 
        SECURITY_REMARKS, JEWELLARY_DETAILS, GROSS_WEIGHT, NET_WEIGHT, GOLD_VALUE, GOLD_REMARKS, STANDING_INSTN, 
        NOMINEE, STATUS, BRANCH_CODE, STATUS_DT, STATUS_BY ,AUTHORIZED_STATUS ,AUTHORIZED_DT ,AUTHORIZED_BY,SUB_NO,BONDSET,
        APPLICATION_NO,APPLICATION_DATE,SALARY_RECOVERY,DEFAULTER,APPLICATIONSET,ONLY_APPLICATION
        ) VALUES (
        #schemeName#, #chittalNo#, #divisionNo#, #chitStartDt#, #memberNo#, 
        #memberName#, #memberType#, #nomineeName#, #payDt#, #prizedAmount#, 
        #resolutionNo#, #resolutionDt#, #bondNo#, #bondDt#, #lastInstallmentNo#, 
        #lastInstallmentDt#, #totalAmount#, #installmentDue#, #instalOverdueAmt#, 
        #instalRemarks#, #salaryCerficateNo#, #empName#, #empAddress#, #city#, 
        #pin#, #designation#, #contactNo#, #retirementDt:DATE#, #empMemberNo#, 
        #totalSalary#, #networth#, #salaryRemarks#, #securityType#, #securityValue#, 
        #securityRemarks#, #jewellaryDetails#, #grossWeight#, #netWeight#, #goldValue#, 
        #goldRemarks#, #standingIns#, #nominee#, #status#, #branchCode#, #statusDt#, 
        #statusBy# ,#authorizedStatus# ,#authorizedDt#, #authorizedBy#, #subNo#,
        #bondSet#,#applNo#,#applDate#,#salaryRecovery#,#defaulter#,#applicationSet#,
        #onlyApplication#)
    </mapped-statement>
             
             
    <mapped-statement name="getApplno" result-class="java.util.LinkedHashMap">
        select max(APPLICATION_NO) as APPL_NO,max(BOND_NO) as BOND_NO from MDS_MASTER_MAINTENANCE where SCHEME_NAME='jiby' and chittal_no='0001JIBY00001'
    </mapped-statement>

    <mapped-statement name="insertMdsSalSecDetails" inline-parameters="true">
        INSERT INTO MDS_SALARY_SECURITY_DETAILS
        (CHITTAL_NO,SL_NO,SALARY_CERTIFICATE_NO, EMP_NAME, EMP_ADDRESS, CITY, PIN, DESIGNATION, 
        CONTACT_NO, RETIREMENT_DT, EMP_MEMBER_NO, TOTAL_SALARY, NETWORTH,REMARKS,  
        STATUS, BRANCH_CODE, STATUS_DT, STATUS_BY ,AUTHORIZED_STATUS ,AUTHORIZED_DT ,AUTHORIZED_BY,SUB_NO
        ) VALUES (
        #chittalNo#,#slno#,#salaryCerficateNo#, #empName#, #empAddress#, 
        #city#, #pin:NUMERIC#, #designation#, #contactNo:NUMERIC#, #retirementDt#, 
        #empMemberNo#, #totalSalary#, #networth#, #salaryRemarks#, #status#, 
        #branchCode#, #statusDt#, #statusBy# ,#authorizedStatus# ,#authorizedDt#, 
        #authorizedBy#, #subNo#)
    </mapped-statement>

    <mapped-statement name="getMDSSalSecDts" result-class="java.util.LinkedHashMap">
        SELECT CHITTAL_NO,SL_NO,SALARY_CERTIFICATE_NO, EMP_NAME, EMP_ADDRESS, CITY, PIN, DESIGNATION, 
        CONTACT_NO, RETIREMENT_DT, EMP_MEMBER_NO, TOTAL_SALARY, NETWORTH,REMARKS,  
        SUB_NO FROM MDS_SALARY_SECURITY_DETAILS WHERE STATUS!='DELETED' AND CHITTAL_NO = #CHITTAL_NO# 
		AND SUB_NO = #SUB_NO# AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS='AUTHORIZED')
    </mapped-statement>
             
   <dynamic-mapped-statement name="getMDSMasterMaintenanceDelete" result-class="java.util.LinkedHashMap">
        SELECT SCHEME_NAME,CHITTAL_NO,SUB_NO,STATUS FROM MDS_MASTER_MAINTENANCE WHERE STATUS!='DELETED' AND AUTHORIZED_STATUS IS NULL 
        <dynamic>
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="SCHEME_NAME">
                    UPPER(SCHEME_NAME) LIKE UPPER('%$SCHEME_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CHITTAL_NO">
                    UPPER(CHITTAL_NO) LIKE UPPER('%$CHITTAL_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="SUB_NO">
                    UPPER(SUB_NO) LIKE UPPER('%$SUB_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="STATUS">
                    UPPER(STATUS) LIKE UPPER('%$STATUS$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        ORDER BY SCHEME_NAME 
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="getMDSMasterMaintenanceEdit" result-class="java.util.LinkedHashMap">
        SELECT SCHEME_NAME,CHITTAL_NO,SUB_NO,STATUS FROM MDS_MASTER_MAINTENANCE WHERE STATUS!='DELETED' 
         <dynamic>
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="SCHEME_NAME">
                    UPPER(SCHEME_NAME) LIKE UPPER('%$SCHEME_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CHITTAL_NO">
                    UPPER(CHITTAL_NO) LIKE UPPER('%$CHITTAL_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="SUB_NO">
                    UPPER(SUB_NO) LIKE UPPER('%$SUB_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="STATUS">
                    UPPER(STATUS) LIKE UPPER('%$STATUS$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        ORDER BY CHITTAL_NO 
    </dynamic-mapped-statement>

    <mapped-statement name="getApplnNoSet" result-class="java.util.LinkedHashMap">
        select nvl(APPLICATION_NO,'N') as APPLICATION_NO,APPLICATIONSET from MDS_MASTER_MAINTENANCE where CHITTAL_NO=#CHITTAL_NO#
    </mapped-statement>

   <dynamic-mapped-statement name="getMDSMasterMaintenanceView" result-class="java.util.LinkedHashMap">
        SELECT SCHEME_NAME,CHITTAL_NO,SUB_NO,STATUS FROM MDS_MASTER_MAINTENANCE WHERE STATUS!='DELETED' 
         <dynamic>
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="SCHEME_NAME">
                    UPPER(SCHEME_NAME) LIKE UPPER('%$SCHEME_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CHITTAL_NO">
                    UPPER(CHITTAL_NO) LIKE UPPER('%$CHITTAL_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="SUB_NO">
                    UPPER(SUB_NO) LIKE UPPER('%$SUB_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="STATUS">
                    UPPER(STATUS) LIKE UPPER('%$STATUS$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        ORDER BY CHITTAL_NO
    </dynamic-mapped-statement>
        
    <mapped-statement name="getMDSMasterMaintenanceAuthorize" result-class="java.util.LinkedHashMap">
        <!--SELECT SCHEME_NAME,CHITTAL_NO,SUB_NO,STATUS FROM MDS_MASTER_MAINTENANCE WHERE STATUS!='DELETED' AND BRANCH_CODE = #BRANCH_CODE# AND AUTHORIZED_STATUS IS NULL ORDER BY CHITTAL_NO -->
        <!-- Group No added for GDS changes : Kutilanji bank -->
        SELECT   m.scheme_name, m.chittal_no, m.sub_no, m.status
        FROM mds_master_maintenance m,MDS_SCHEME_DETAILS msd 
        WHERE m.status != 'DELETED' AND m.branch_code = #BRANCH_CODE#
        AND M.SCHEME_NAME = MSD.SCHEME_NAME
        AND MSD.GROUP_NO is null
        AND m.authorized_status IS NULL
        ORDER BY chittal_no    
    </mapped-statement>
        
    <mapped-statement name="getSelectMDSMasterMaintenanceTO" result-map="getMDSMasterMaintenanceTOResult" >
        SELECT * FROM MDS_MASTER_MAINTENANCE WHERE STATUS!='DELETED' AND SCHEME_NAME = #SCHEME_NAME# AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO# AND (AUTHORIZED_STATUS!='REJECTED' OR  AUTHORIZED_STATUS is null or AUTHORIZED_STATUS='AUTHORIZED')
    </mapped-statement>
        
    <mapped-statement name="getSelectMDSMemberTypeTO" result-map="getMDSMemberTypeTOResult" >
        SELECT * FROM MDS_MEMBER_TYPE WHERE STATUS!='DELETED' AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO# AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS='AUTHORIZED')
    </mapped-statement>
        
    <mapped-statement name="getSelectMDSDepositTypeTO " result-map="getMDSDepositTypeTOResult" >
        SELECT * FROM MDS_DEPOSIT_TYPE WHERE STATUS!='DELETED' AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO# and (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS='AUTHORIZED')
    </mapped-statement>
        
        
    <mapped-statement name="deleteMdsSalSec" inline-parameters="true">
        delete  from mds_salary_security_details where chittal_no=#chittalNo#
    </mapped-statement>
       
       <!-- <mapped-statement name="updateMDSMasterMaintenanceTO" inline-parameters="true">
         UPDATE MDS_MASTER_MAINTENANCE SET 
		DIVISION_NO = #divisionNo:NUMERIC#,
		CHIT_START_DT = #chitStartDt:DATE#,
                MEMBER_NO = #memberNo#,
		MEMBER_NAME = #memberName#,
		MEMBER_TYPE = #memberType#,
		NOMINEE_NAME = #nomineeName#,
                SALARY_RECOVERY = #salaryRecovery#,
		PAY_DT = #payDt:DATE#,
		PRIZED_AMOUNT = #prizedAmount:NUMERIC#,
		RESOLUTION_NO = #resolutionNo#,
		RESOLUTION_DT = #resolutionDt:DATE#,
		BOND_NO = #bondNo#,
		BOND_DT = #bondDt:DATE#,
		LAST_INSTALLMENT_NO = #lastInstallmentNo#,
		LAST_INSTALLMENT_DT = #lastInstallmentDt:DATE#,
		TOTAL_AMOUNT = #totalAmount:NUMERIC#,
		INSTALLMENT_DUE = #installmentDue:NUMERIC#,
		INSTAL_OVERDUE_AMT = #instalOverdueAmt:NUMERIC#,
		INSTAL_REMARKS = #instalRemarks#,
		SALARY_CERFICATE_NO = #salaryCerficateNo#,
		EMP_NAME = #empName#,
		EMP_ADDRESS = #empAddress#,
		CITY = #city#,
		PIN = #pin:NUMERIC#,
		DESIGNATION = #designation#,
		CONTACT_NO = #contactNo:NUMERIC#,
		RETIREMENT_DT = #retirementDt:DATE#,
		EMP_MEMBER_NO = #empMemberNo#,
		TOTAL_SALARY = #totalSalary:NUMERIC#,
		NETWORTH = #networth#,
		SALARY_REMARKS = #salaryRemarks#,
		SECURITY_TYPE = #securityType#,
		SECURITY_VALUE = #securityValue#,
		SECURITY_REMARKS = #securityRemarks#,
		JEWELLARY_DETAILS = #jewellaryDetails#,
		GROSS_WEIGHT = #grossWeight#,
		NET_WEIGHT = #netWeight#,
		GOLD_VALUE = #goldValue#,
		GOLD_REMARKS = #goldRemarks#,
                STANDING_INSTN = #standingIns#,
                NOMINEE = #nominee#,
		STATUS = #status#,
		BRANCH_CODE = #branchCode#,
		STATUS_DT = #statusDt:DATE#,
		STATUS_BY = #statusBy#,
                AUTHORIZED_STATUS = #authorizedStatus#,
                AUTHORIZED_BY = #authorizedBy#,
                AUTHORIZED_DT = #authorizedDt:DATE#
		WHERE SCHEME_NAME = #schemeName# AND CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo:NUMERIC# AND STATUS != 'DELETED'
        </mapped-statement>-->
        
        
        
        
    <mapped-statement name="updateMDSMasterMaintenanceTO" inline-parameters="true">
        UPDATE MDS_MASTER_MAINTENANCE SET 
        DIVISION_NO = #divisionNo#,
        CHIT_START_DT = #chitStartDt#,
        MEMBER_NO = #memberNo#,
        MEMBER_NAME = #memberName#,
        MEMBER_TYPE = #memberType#,
        NOMINEE_NAME = #nomineeName#,
        SALARY_RECOVERY = #salaryRecovery#,
        PAY_DT = #payDt#,
        PRIZED_AMOUNT = #prizedAmount#,
        RESOLUTION_NO = #resolutionNo#,
        RESOLUTION_DT = #resolutionDt#,
        BOND_NO = #bondNo#,
        BOND_DT = #bondDt#,
        LAST_INSTALLMENT_NO = #lastInstallmentNo#,
        LAST_INSTALLMENT_DT = #lastInstallmentDt#,
        TOTAL_AMOUNT = #totalAmount#,
        INSTALLMENT_DUE = #installmentDue#,
        INSTAL_OVERDUE_AMT = #instalOverdueAmt#,
        INSTAL_REMARKS = #instalRemarks#,
        SECURITY_TYPE = #securityType#,
        SECURITY_VALUE = #securityValue#,
        SECURITY_REMARKS = #securityRemarks#,
        JEWELLARY_DETAILS = #jewellaryDetails#,
        GROSS_WEIGHT = #grossWeight#,
        NET_WEIGHT = #netWeight#,
        GOLD_VALUE = #goldValue#,
        GOLD_REMARKS = #goldRemarks#,
        STANDING_INSTN = #standingIns#,
        NOMINEE = #nominee#,
        STATUS = #status#,
        BRANCH_CODE = #branchCode#,
        STATUS_DT = #statusDt#,
        STATUS_BY = #statusBy#,
        AUTHORIZED_STATUS = #authorizedStatus#,
        AUTHORIZED_BY = #authorizedBy#,
        AUTHORIZED_DT = #authorizedDt#,
        BONDSET =#bondSet#,
        APPLICATION_NO=#applNo#,
        APPLICATION_DATE=#applDate#,
        DEFAULTER=#defaulter#,
        ONLY_APPLICATION=#onlyApplication#,
        APPLICATIONSET=#applicationSet#,
        APPL_SECURITY_REMARKS=#applicationSecurityRemarks#,
        CHIT_CLOSE_DT=#chitCloseDt#
        WHERE SCHEME_NAME = #schemeName# AND CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo# AND STATUS != 'DELETED'
        AND AUTHORIZED_STATUS!='REJECTED'
    </mapped-statement>
        
        
    <mapped-statement name="deleteMDSMasterMaintenanceTO" inline-parameters="true">
        UPDATE MDS_MASTER_MAINTENANCE SET 
        STATUS = #status#,
        STATUS_BY = #statusBy#,
        STATUS_DT = #statusDt#
        WHERE SCHEME_NAME = #schemeName# AND CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo#
    </mapped-statement>
        
        
    <mapped-statement name="getSelTotPldgeAmt" result-class="java.util.HashMap">
        select sum(PLEDGE_AMT) as TOT_PLDGE_AMT from gahan_document_details
        where DOCUMENT_GEN_ID=#DOC_GEN_ID#
    </mapped-statement>
        
    <mapped-statement name="deleteStatusMDSSalSec" inline-parameters="true">
        UPDATE mds_salary_security_details SET 
        STATUS = #status#,
        STATUS_BY = #statusBy#,
        STATUS_DT = #statusDt:DATE#
        WHERE CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo#
    </mapped-statement>

	<mapped-statement name="authorizeMDSMasterMaintenance" result-class="java.util.HashMap">
        UPDATE MDS_MASTER_MAINTENANCE SET 
        AUTHORIZED_STATUS = #STATUS#,
        AUTHORIZED_BY = #AUTHORIZED_BY#,
        AUTHORIZED_DT = #AUTHORIZED_DT#::TIMESTAMP               
        WHERE STATUS != 'DELETED' AND SCHEME_NAME = #SCHEME_NAME# AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = cast(#SUB_NO# as numeric)
        AND (AUTHORIZED_STATUS!='REJECTED' OR  AUTHORIZED_STATUS is null)
    </mapped-statement>

    <mapped-statement name="authorizeMDSSalSec" result-class="java.util.HashMap">
        UPDATE mds_salary_security_details SET 
        AUTHORIZED_STATUS = #STATUS#,
        AUTHORIZED_BY = #AUTHORIZED_BY#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#
        WHERE STATUS != 'DELETED'  AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO#
        AND (AUTHORIZED_STATUS!='REJECTED' OR  AUTHORIZED_STATUS is null)
    </mapped-statement>
        
        
    <mapped-statement name="insertMDSMemberTypeTO" inline-parameters="true">
        INSERT INTO MDS_MEMBER_TYPE
        (CHITTAL_NO, MEMBER_NO, MEMBER_NAME, MEMBER_TYPE, CONTACT_NO, NETWORTH, BRANCH_CODE, STATUS, STATUS_DT, STATUS_BY, SUB_NO, MEMBER_PRIORITY
        ) VALUES (
        #chittalNo#, #memberNo#, #memberName#, #memberType#, #contactNo#, 
        #networth#, #branchCode#, #status#, #statusDt#, #statusBy#, #subNo#, #priority:NUMERIC#)
    </mapped-statement>
        
    <mapped-statement name="updateMDSMemberTypeTO" inline-parameters="true">
        UPDATE MDS_MEMBER_TYPE SET 
        MEMBER_NAME = #memberName#,
        MEMBER_TYPE = #memberType#,
        CONTACT_NO = #contactNo#,
        NETWORTH = #networth#,
        BRANCH_CODE = #branchCode#,
        STATUS = #status#,
        STATUS_DT = #statusDt#,
        STATUS_BY = #statusBy#,
	MEMBER_PRIORITY = #priority:NUMERIC#
        WHERE MEMBER_NO = #memberNo# AND CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo# AND STATUS != 'DELETED'
    </mapped-statement>
        
    <mapped-statement name="deleteMDSMemberTypeTO" inline-parameters="true">
        UPDATE MDS_MEMBER_TYPE SET 
        STATUS = #status#,
        STATUS_BY = #statusBy#,
        STATUS_DT = #statusDt#
        WHERE MEMBER_NO = #memberNo# AND CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo#
    </mapped-statement>
        
    <mapped-statement name="authorizeMDSMemberDetails" result-class="java.util.HashMap">
        UPDATE MDS_MEMBER_TYPE SET  
        AUTHORIZED_STATUS = #STATUS#,
        AUTHORIZED_BY = #AUTHORIZED_BY#,
        AUTHORIZED_DT = #AUTHORIZED_DT#
        WHERE <!--STATUS != 'DELETED' --> STATUS_DT = #STATUS_DT:DATE# 
	AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = cast(#SUB_NO# as numeric)
        AND (AUTHORIZED_STATUS!='REJECTED' OR  AUTHORIZED_STATUS is null)
    </mapped-statement>
        
    <mapped-statement name="deleteMDSMemberTypeDetails" inline-parameters="true">
        UPDATE MDS_MEMBER_TYPE SET 
        STATUS = #status#,
        STATUS_BY = #statusBy#,
        STATUS_DT = #statusDt#
        WHERE CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo#
    </mapped-statement>
        
    <mapped-statement name="insertMDSDepositTypeTO " inline-parameters="true">
        INSERT INTO MDS_DEPOSIT_TYPE
        (CHITTAL_NO, DEPOSIT_NO, PROD_TYPE, PROD_ID, DEPOSIT_DT, AMOUNT, INT_RATE, MATURITY_VALUE, MATURITY_DT, BRANCH_CODE, STATUS, STATUS_DT, STATUS_BY, SUB_NO, SAME_CHITTAL_AS_LIEN
        ) VALUES (
        #chittalNo#, #depositNo#, #prodType#, #prodId#, #depositDt#, #amount#, #intRate#, 
        #maturityValue#, #maturityDt#, #branchCode#, #status#, #statusDt#, #statusBy#, #subNo#,#sameChittal#)
    </mapped-statement>
        
    <mapped-statement name="updateMDSDepositTypeTO" inline-parameters="true">
        UPDATE MDS_DEPOSIT_TYPE SET 
        PROD_TYPE = #prodType#,
        PROD_ID = #prodId#,
        DEPOSIT_DT = #depositDt#,
        AMOUNT = #amount#,
        INT_RATE = #intRate#,
        MATURITY_VALUE = #maturityValue#,
        MATURITY_DT = #maturityDt#,
        BRANCH_CODE = #branchCode#,
        SAME_CHITTAL_AS_LIEN=#sameChittal#,
        STATUS = #status#,
        STATUS_DT = #statusDt#,
        STATUS_BY = #statusBy#,
        AUTHORIZED_STATUS = #authorizedStatus#,
        AUTHORIZED_DT = #authorizedDt#,
        AUTHORIZED_BY = #authorizedBy#
        WHERE DEPOSIT_NO = #depositNo# AND CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo# AND STATUS != 'DELETED'
    </mapped-statement>
        
    <mapped-statement name="deleteMDSDepositTypeTO" inline-parameters="true">
        UPDATE MDS_DEPOSIT_TYPE SET
        STATUS = #STATUS#,
        STATUS_BY = #STATUS_BY#,
        STATUS_DT = #STATUS_DT#
        WHERE DEPOSIT_NO = #DEPOSIT_ACT_NUM# AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUBNO#
    </mapped-statement>
        
    <mapped-statement name="deleteMDSDepositTypeDetails" inline-parameters="true">
        UPDATE MDS_DEPOSIT_TYPE SET
        STATUS = #status#,
        STATUS_BY = #statusBy#,
        STATUS_DT = #statusDt#
        WHERE CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo#
    </mapped-statement>
        
    <mapped-statement name="deleteMDSSocietyTypeDetails" inline-parameters="true">
        UPDATE MDS_SOCIETY_TYPE SET
        STATUS = #status#,
        STATUS_BY = #statusBy#,
        STATUS_DT = #statusDt#
        WHERE CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo#
    </mapped-statement>
        
    <mapped-statement name="authorizeMDSDepositDetails" result-class="java.util.HashMap">
        UPDATE MDS_DEPOSIT_TYPE SET  
        AUTHORIZED_STATUS = #STATUS#,
        AUTHORIZED_BY = #AUTHORIZED_BY#,
        AUTHORIZED_DT = #AUTHORIZED_DT#::TIMESTAMP
        WHERE <!--STATUS != 'DELETED'--> STATUS_DT = #STATUS_DT:DATE# AND  CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = cast(#SUB_NO# as numeric)
        AND (AUTHORIZED_STATUS!='REJECTED' OR  AUTHORIZED_STATUS is null)
    </mapped-statement>

        <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to MDSMasterMaintenanceTO object (JavaBean) properties -->
    <result-map name="getMDSMasterMaintenanceTOResult" class="com.see.truetransact.transferobject.mdsapplication.mdsmastermaintenance.MDSMasterMaintenanceTO">
        <property name="schemeName" column="SCHEME_NAME"/>
        <property name="chittalNo" column="CHITTAL_NO"/>
        <property name="subNo" column="SUB_NO"/>
        <property name="divisionNo" column="DIVISION_NO"/>
        <property name="chitStartDt" column="CHIT_START_DT"/>
        <property name="memberNo" column="MEMBER_NO"/>
        <property name="memberName" column="MEMBER_NAME"/>
        <property name="memberType" column="MEMBER_TYPE"/>
        <property name="nomineeName" column="NOMINEE_NAME"/>
        <property name="salaryRecovery" column="SALARY_RECOVERY"/>
        <property name="lockStatus" column="LOCK_STATUS"/>
        <property name="payDt" column="PAY_DT"/>
        <property name="prizedAmount" column="PRIZED_AMOUNT"/>
        <property name="resolutionNo" column="RESOLUTION_NO"/>
        <property name="resolutionDt" column="RESOLUTION_DT"/>
        <property name="bondNo" column="BOND_NO"/>
        <property name="bondDt" column="BOND_DT"/>
        <property name="lastInstallmentNo" column="LAST_INSTALLMENT_NO"/>
        <property name="lastInstallmentDt" column="LAST_INSTALLMENT_DT"/>
        <property name="totalAmount" column="TOTAL_AMOUNT"/>
        <property name="installmentDue" column="INSTALLMENT_DUE"/>
        <property name="instalOverdueAmt" column="INSTAL_OVERDUE_AMT"/>
        <property name="instalRemarks" column="INSTAL_REMARKS"/>
        <property name="salaryCerficateNo" column="SALARY_CERFICATE_NO"/>
        <property name="empName" column="EMP_NAME"/>
        <property name="empAddress" column="EMP_ADDRESS"/>
        <property name="city" column="CITY"/>
        <property name="pin" column="PIN"/>
        <property name="designation" column="DESIGNATION"/>
        <property name="contactNo" column="CONTACT_NO"/>
        <property name="retirementDt" column="RETIREMENT_DT"/>
        <property name="empMemberNo" column="EMP_MEMBER_NO"/>
        <property name="totalSalary" column="TOTAL_SALARY"/>
        <property name="networth" column="NETWORTH"/>
        <property name="salaryRemarks" column="SALARY_REMARKS"/>
        <property name="securityType" column="SECURITY_TYPE"/>
        <property name="securityValue" column="SECURITY_VALUE"/>
        <property name="securityRemarks" column="SECURITY_REMARKS"/>
        <property name="jewellaryDetails" column="JEWELLARY_DETAILS"/>
        <property name="grossWeight" column="GROSS_WEIGHT"/>
        <property name="netWeight" column="NET_WEIGHT"/>
        <property name="goldValue" column="GOLD_VALUE"/>
        <property name="goldRemarks" column="GOLD_REMARKS"/>
        <property name="standingIns" column="STANDING_INSTN"/>
        <property name="nominee" column="NOMINEE"/>
        <property name="status" column="STATUS"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="applNo" column="APPLICATION_NO"/>
        <property name="applDate" column="APPLICATION_DATE"/>
        <property name="defaulter" column="DEFAULTER"/>
        <property name="applicationSecurityRemarks" column="APPL_SECURITY_REMARKS"/>
        <property name="chitCloseDt" column="CHIT_CLOSE_DT"/>
    </result-map>
        
    <result-map name="getMDSMemberTypeTOResult" class="com.see.truetransact.transferobject.mdsapplication.mdsmastermaintenance.MDSMemberTypeTO">
        <property name="chittalNo" column="CHITTAL_NO"/>
        <property name="subNo" column="SUB_NO"/>
        <property name="memberNo" column="MEMBER_NO"/>
        <property name="memberName" column="MEMBER_NAME"/>
        <property name="memberType" column="MEMBER_TYPE"/>
        <property name="contactNo" column="CONTACT_NO"/>
        <property name="networth" column="NETWORTH"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
    </result-map>
        
    <result-map name="getMDSDepositTypeTOResult" class="com.see.truetransact.transferobject.mdsapplication.mdsmastermaintenance.MDSDepositTypeTO">
        <property name="chittalNo" column="CHITTAL_NO"/>
        <property name="subNo" column="SUB_NO"/>
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="prodType" column="PROD_TYPE"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="depositDt" column="DEPOSIT_DT"/>
        <property name="amount" column="AMOUNT"/>
        <property name="intRate" column="INT_RATE"/>
        <property name="maturityValue" column="MATURITY_VALUE"/>
        <property name="maturityDt" column="MATURITY_DT"/>
        <property name="sameChittal" column="SAME_CHITTAL_AS_LIEN"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
    </result-map>
        
    <dynamic-mapped-statement name="getMDSMemberDetailsMaster" result-class="java.util.LinkedHashMap">
        SELECT CUST.MEMBERSHIP_NO,MA.CHITTAL_NO,CHIT_START_DT,MA.SCHEME_NAME,MA.MEMBER_NAME,MEMBER_TYPE,INST_COUNT,LAST_TRANS_DT,TOTAL_BALANCE,MA.REMARKS,
        STANDING_INSTN,SCHEME_START_DT,SCHEME_END_DT,INSTALLMENT_DAY,NOMINEE,INST_AMT,get_cust_name(CUST.CUST_ID) as "Customer", MD.NO_OF_INSTALLMENTS,PROD_TYPE,MA.PROD_ID,DR_ACT_NO,INSTALLMENT_FREQUENCY
        FROM MDS_SCHEME_DETAILS MD,MDS_APPLICATION MA,CUSTOMER CUST WHERE MA.SCHEME_NAME = MD.SCHEME_NAME             
        AND MA.CUST_ID = CUST.CUST_ID AND MA.STATUS != 'DELETED' AND MA.AUTHORIZE_STATUS = 'AUTHORIZED'
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"    property="DIVISION_NO">
                    MA.DIVISION_NO = #DIVISION_NO#
                </isNotNull>
                <isNotNull prepend="AND"    property="SCHEME_NAME">
                    MA.SCHEME_NAME = #SCHEME_NAME#
                </isNotNull>
                <isNotNull prepend="AND"    property="CHITTAL_NO">
                    MA.CHITTAL_NO = #CHITTAL_NO#
                </isNotNull>
                <isNotNull prepend="AND"    property="SUB_NO">
                    MA.SUB_NO = #SUB_NO#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="getMDSNextInstallmentDt" result-class="java.util.HashMap">
        SELECT INST_NO, INST_DT FROM 
        (SELECT MAX(INSTALLMENT_NO) INST_NO FROM MDS_PRIZED_MONEY_DETAILS WHERE 
        SCHEME_NAME= #SCHEME_NAME# AND DIVISION_NO= #DIVISION_NO#) A, 
        (SELECT MAX(NEXT_INSTALLMENT_DATE) INST_DT FROM MDS_PRIZED_MONEY_DETAILS WHERE 
        SCHEME_NAME= #SCHEME_NAME# AND NEXT_INSTALLMENT_DATE &lt;#CURR_DATE# AND DIVISION_NO=#DIVISION_NO#) B
    </mapped-statement>
        
    <mapped-statement name="getSelectCountSecurityDetails" result-class="java.util.HashMap">
        SELECT SUM(CNT) AS COUNT FROM (
        SELECT COUNT(*) AS CNT FROM MDS_MASTER_MAINTENANCE WHERE (TOTAL_SALARY IS NOT NULL OR 
        SECURITY_TYPE  IS NOT NULL OR GOLD_VALUE IS NOT NULL) AND AUTHORIZED_STATUS = 'AUTHORIZED' AND CHITTAL_NO=#CHITTAL_NO# AND SUB_NO = #SUB_NO#
        UNION ALL
        SELECT COUNT(*) AS CNT FROM MDS_MEMBER_TYPE WHERE AUTHORIZED_STATUS = 'AUTHORIZED' AND CHITTAL_NO=#CHITTAL_NO# AND SUB_NO = #SUB_NO#
        UNION ALL
        SELECT COUNT(*) AS CNT FROM MDS_DEPOSIT_TYPE WHERE AUTHORIZED_STATUS = 'AUTHORIZED' AND CHITTAL_NO=#CHITTAL_NO# AND SUB_NO = #SUB_NO#
        UNION ALL
        SELECT COUNT(*) AS CNT FROM MDS_SECURITY_LAND WHERE AUTHORIZED_STATUS = 'AUTHORIZED' AND CHITTAL_NO=#CHITTAL_NO# AND SUB_NO = #SUB_NO# 
        UNION ALL
        SELECT COUNT(*) AS CNT FROM MDS_SOCIETY_TYPE WHERE AUTHORIZED_STATUS = 'AUTHORIZED' AND CHITTAL_NO=#CHITTAL_NO# AND SUB_NO = #SUB_NO# 
        UNION ALL
        SELECT   COUNT (*) AS cnt FROM MDS_SALARY_SECURITY_DETAILS  WHERE AUTHORIZED_STATUS  = 'AUTHORIZED' AND STATUS !='DELETED'  AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO# ) A
    </mapped-statement>

    <mapped-statement name="getMandatorySecurityData" result-class="java.util.HashMap">
        select scheme_name from MDS_SCHEME_DETAILS msd where scheme_end_dt &lt;( select SYS_DATE() from dual) and  SCHEME_NAME=#SCHEME_NAME#
        and no_of_installments &gt; (select count(*) from mds_money_payment_details mpd 
        where status != 'DELETED' and authorized_status='AUTHORIZED' and scheme_name=msd.scheme_name)
    </mapped-statement>
        
    <mapped-statement name="getSelectBondDetails" result-class="java.util.HashMap">
        SELECT BOND_NO,BOND_DT  FROM MDS_MASTER_MAINTENANCE WHERE STATUS!= 'DELETED' AND AUTHORIZED_STATUS = 'AUTHORIZED' AND CHITTAL_NO=#CHITTAL_NO# AND SUB_NO = #SUB_NO#
    </mapped-statement>
    
    <mapped-statement name="getCollateralSecurtyBalAmt" result-class="java.util.HashMap">
         SELECT SECURITY_AMT_FOR_GAHAN(#DOC_GEN_ID#) AS BALANCE FROM DUAL
    </mapped-statement>
    
    <mapped-statement name="getMDSNextInsDate" result-class="java.util.HashMap">
        SELECT INST_NO, INST_DT FROM (
        SELECT MAX(INSTALLMENT_NO) INST_NO FROM MDS_PRIZED_MONEY_DETAILS WHERE 
        SCHEME_NAME= #SCHEME_NAME# AND DIVISION_NO= #DIVISION_NO#) A, 
        (SELECT MAX(NEXT_INSTALLMENT_DATE) INST_DT FROM MDS_PRIZED_MONEY_DETAILS WHERE 
        SCHEME_NAME= #SCHEME_NAME# AND NEXT_INSTALLMENT_DATE &lt;=#CURR_DATE# AND DIVISION_NO=#DIVISION_NO#) B
    </mapped-statement>
        
    <mapped-statement name="getSelectMDSMasterData" result-class="java.util.HashMap">
        SELECT * FROM MDS_MASTER_MAINTENANCE WHERE STATUS!='DELETED' AND ( AUTHORIZED_STATUS = 'AUTHORIZED' OR AUTHORIZED_STATUS IS NULL)
        AND SCHEME_NAME = #SCHEME_NAME# AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO#
    </mapped-statement>

    <dynamic-mapped-statement name="getMDSCurrentInsDate" result-class="java.util.HashMap">
       SELECT TO_DATE (installment_day
        || '/'
        || TO_CHAR (next_installment_date, 'MM')
        || '/'
        || TO_CHAR (next_installment_date, 'YYYY'),
        'DD-MM-YYYY'
        ) AS INSTALLMENT_DT,
        INSTALLMENT_NO
        FROM mds_prized_money_details m, mds_scheme_details msd
        WHERE m.scheme_name = #SCHEME_NAME#
        <dynamic>
         <isParameterPresent>
                <isNotNull prepend="AND"   property="DIVISION_NO">
                    division_no = cast(#DIVISION_NO# as numeric)
                </isNotNull>
        </isParameterPresent>       
        </dynamic>
        AND m.scheme_name = msd.scheme_name
        AND next_installment_date IN (SELECT MAX(next_installment_date)
        FROM mds_prized_money_details m1 
        WHERE m.scheme_name = m1.scheme_name
        AND addmonths(m1.next_installment_date,m1.next_installment_date, cast(#ADD_MONTHS# as numeric)) &lt;= #CURR_DATE#)
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="getWeeklyMDSCurrentInsDate" result-class="java.util.HashMap">
        SELECT TO_DATE(to_char(GetCurrInstDtW(draw_auction_date,#SCHEME_NAME#),'DD')
        || '/'
        || TO_CHAR (next_installment_date, 'MM')
        || '/'
        || TO_CHAR (next_installment_date, 'YYYY'),
        'DD-MM-YYYY'
        ) AS INSTALLMENT_DT,
        INSTALLMENT_NO
        FROM mds_prized_money_details m, mds_scheme_details msd
        WHERE m.scheme_name = #SCHEME_NAME#
        <dynamic>
         <isParameterPresent>
                <isNotNull prepend="AND"   property="DIVISION_NO">
                    division_no = #DIVISION_NO#
                </isNotNull>
        </isParameterPresent>       
        </dynamic>        
        AND m.scheme_name = msd.scheme_name
        AND next_installment_date IN (
        SELECT MAX (next_installment_date)
        FROM mds_prized_money_details m1
        WHERE m.scheme_name = m1.scheme_name
        AND GetCurrInstDtW(#CURR_DATE#,#SCHEME_NAME#)-8 &lt; #CURR_DATE#)
    </dynamic-mapped-statement>
    
    <mapped-statement name="getTransAllMDSCurrentInsDate" result-class="java.util.HashMap">
        SELECT TO_DATE (   installment_day
        || '/'
        || TO_CHAR (next_installment_date, 'MM')
        || '/'
        || TO_CHAR (next_installment_date, 'YYYY'),
        'DD-MM-YYYY'
        ) AS INSTALLMENT_DT,
        INSTALLMENT_NO
        FROM mds_prized_money_details m, mds_scheme_details msd
        WHERE m.scheme_name = #SCHEME_NAME#
        AND division_no = #DIVISION_NO#
        AND m.scheme_name = msd.scheme_name
        AND next_installment_date IN (
        SELECT MAX (next_installment_date)
        FROM mds_prized_money_details m1
        WHERE m.scheme_name = m1.scheme_name
        AND m1.next_installment_date &lt;=#CURR_DATE#)
    </mapped-statement>
        
    <mapped-statement name="updateMDSApplStandingDetail" result-class="java.util.HashMap">
        UPDATE MDS_APPLICATION SET 
        STANDING_INSTN = #STANDING_INS#,
        PROD_TYPE = #PROD_TYPE#,
        PROD_ID = #PROD_ID#,
        DR_ACT_NO = #DR_ACT_NO# WHERE STATUS != 'DELETED' AND SCHEME_NAME = #SCHEME_NAME# 
        AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO#
    </mapped-statement>
        
    <mapped-statement name="checkDepositNoAlreadyinMaster" result-class="java.util.HashMap">
        SELECT * FROM MDS_DEPOSIT_TYPE WHERE STATUS!='DELETED' AND DEPOSIT_NO=#DEPOSIT_NO# AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS='AUTHORIZED')
    </mapped-statement>
        
    <dynamic-mapped-statement name="getMDSMasterDepositNo" result-class="java.util.LinkedHashMap">
        SELECT DA.DEPOSIT_NO as ACT_NUM, get_cust_name(cu.cust_id) AS CUSTOMER_NAME, 
        CA.STREET AS HOUSE_NAME, DP.BEHAVES_LIKE AS TYPE, DS.DEPOSIT_AMT AS AMOUNT FROM DEPOSIT_ACINFO DA, CUSTOMER CU, CUST_ADDR 
        CA,DEPOSIT_SUB_ACINFO DS, DEPOSITS_PRODUCT DP WHERE DA.CUST_ID = CU.CUST_ID AND CA.CUST_ID = CU.CUST_ID AND CA.ADDR_TYPE= 
        CU.COMM_ADDR_TYPE AND DP.PROD_ID = DA.PROD_ID AND DA.DEPOSIT_STATUS!='CLOSED' AND DA.PROD_ID = #PROD_ID# AND DA.DEPOSIT_NO=DS.DEPOSIT_NO AND (DS.ACCT_STATUS IN ('NEW','PART_FREEZE','OPERATIONAL') or DS.ACCT_STATUS is null) AND DS.STATUS NOT IN ('DELETED') AND DS.AUTHORIZE_STATUS='AUTHORIZED' 
        <!-- AND DA.BRANCH_ID = #SELECTED_BRANCH# -->
        <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ACT_NUM">
                    UPPER(DA.DEPOSIT_NO) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER_NAME">
                    UPPER(get_cust_name(cu.cust_id)) LIKE UPPER('%$CUSTOMER_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="HOUSE_NAME">
                    UPPER(CA.STREET) LIKE UPPER('%$HOUSE_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="TYPE">
                    UPPER(DP.BEHAVES_LIKE) LIKE UPPER('%$TYPE$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="AMOUNT">
                    UPPER(DS.DEPOSIT_AMT) LIKE UPPER('%$AMOUNT$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        ORDER BY DA.DEPOSIT_NO
    </dynamic-mapped-statement>

    <dynamic-mapped-statement name="getMDSMasterMaintenanceDepositNo" result-class="java.util.LinkedHashMap">
        SELECT DA.DEPOSIT_NO as ACT_NUM, get_cust_name(cu.cust_id) AS CUSTOMER_NAME, 
        CA.STREET AS HOUSE_NAME, DP.BEHAVES_LIKE AS TYPE, DS.DEPOSIT_AMT AS AMOUNT FROM DEPOSIT_ACINFO DA, CUSTOMER CU, CUST_ADDR 
        CA,DEPOSIT_SUB_ACINFO DS, DEPOSITS_PRODUCT DP WHERE DA.CUST_ID = CU.CUST_ID AND CA.CUST_ID = CU.CUST_ID AND CA.ADDR_TYPE= 
        CU.COMM_ADDR_TYPE AND DP.PROD_ID = DA.PROD_ID AND DA.DEPOSIT_STATUS!='CLOSED' AND DA.PROD_ID = #PROD_ID# AND DA.DEPOSIT_NO=DS.DEPOSIT_NO AND (DS.ACCT_STATUS IN 
        ('NEW','PART_FREEZE','OPERATIONAL') or DS.ACCT_STATUS is null) AND DS.STATUS NOT IN ('DELETED') AND DS.AUTHORIZE_STATUS='AUTHORIZED' 
       <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ACT_NUM">
                    UPPER(DA.DEPOSIT_NO) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER_NAME">
                    UPPER(get_cust_name(cu.cust_id)) LIKE UPPER('%$CUSTOMER_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="HOUSE_NAME">
                    UPPER(CA.STREET) LIKE UPPER('%$HOUSE_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="TYPE">
                    UPPER(DP.BEHAVES_LIKE) LIKE UPPER('%$TYPE$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="AMOUNT">
                    UPPER(DS.DEPOSIT_AMT) LIKE UPPER('%$AMOUNT$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
       ORDER BY DA.DEPOSIT_NO
    </dynamic-mapped-statement>
    
   <dynamic-mapped-statement name="getMDSMasterDepositNo_Lien" result-class="java.util.LinkedHashMap">
     	SELECT DA.DEPOSIT_NO as ACT_NUM, get_cust_name(cu.cust_id) AS CUSTOMER_NAME, 
        CA.STREET AS HOUSE_NAME, DP.BEHAVES_LIKE AS TYPE, DS.DEPOSIT_AMT AS AMOUNT FROM DEPOSIT_ACINFO DA, CUSTOMER CU, CUST_ADDR 
        CA,DEPOSIT_SUB_ACINFO DS, DEPOSITS_PRODUCT DP WHERE DA.CUST_ID = CU.CUST_ID AND CA.CUST_ID = CU.CUST_ID AND CA.ADDR_TYPE= 
        CU.COMM_ADDR_TYPE AND DP.PROD_ID = DA.PROD_ID AND DA.DEPOSIT_STATUS!='CLOSED' AND DA.PROD_ID = #PROD_ID# AND DA.DEPOSIT_NO=DS.DEPOSIT_NO AND (DS.ACCT_STATUS IN 
        ('NEW','PART_FREEZE','OPERATIONAL') or DS.ACCT_STATUS is null) AND DS.STATUS NOT IN ('DELETED') AND (DS.AUTHORIZE_STATUS='AUTHORIZED' or ds.authorize_status is null) AND 
        DA.BRANCH_ID = #SELECTED_BRANCH# 
             <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ACT_NUM">
                    UPPER(DA.DEPOSIT_NO) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER_NAME">
                    UPPER(get_cust_name(cu.cust_id)) LIKE UPPER('%$CUSTOMER_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="HOUSE_NAME">
                    UPPER(CA.STREET) LIKE UPPER('%$HOUSE_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="TYPE">
                    UPPER(DP.BEHAVES_LIKE) LIKE UPPER('%$TYPE$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="AMOUNT">
                    UPPER(DS.DEPOSIT_AMT) LIKE UPPER('%$AMOUNT$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        ORDER BY DA.DEPOSIT_NO
    </dynamic-mapped-statement>
        
   <dynamic-mapped-statement name="getMDSChittalNo" result-class="java.util.LinkedHashMap">
     	select * from (SELECT MA.CHITTAL_NO ||'_'||MA.SUB_NO AS CHITTAL_NO, MA.MEMBER_NO, MA.MEMBER_NAME, MA.INST_AMT, <!--SUM(MTD.INST_AMT)-->SUM(NO_OF_INST*MTD.INST_AMT) AS PAID_AMOUNT, 
        MA.CHIT_START_DT AS START_DT,MA.CHIT_END_DT AS END_DT FROM MDS_TRANS_DETAILS MTD, MDS_APPLICATION MA WHERE MTD.CHITTAL_NO=MA.CHITTAL_NO 
        AND MTD.SUB_NO=MA.SUB_NO AND MTD.STATUS!='DELETED' AND MTD.AUTHORIZE_STATUS IS NOT NULL AND MTD.AUTHORIZE_STATUS='AUTHORIZED'
        AND MA.SCHEME_NAME=#PROD_ID# <!--AND MA.CHITTAL_NO NOT IN (#CHITTAL_NO#)-->
       
         <dynamic>
             <!--<isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>-->
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CHITTAL_NO">
                    UPPER(MA.CHITTAL_NO ||'_'||MA.SUB_NO) LIKE UPPER('%$CHITTAL_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBER_NO">
                    UPPER(MA.MEMBER_NO) LIKE UPPER('%$MEMBER_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBER_NAME">
                    UPPER(MA.MEMBER_NAME) LIKE UPPER('%$MEMBER_NAME$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="INST_AMT">
                    UPPER(MA.INST_AMT) LIKE UPPER('%$INST_AMT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="START_DT">
                    UPPER(MA.CHIT_START_DT) LIKE UPPER('%$START_DT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="END_DT">
                    UPPER(MA.CHIT_END_DT) LIKE UPPER('%$END_DT$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
             GROUP BY MA.CHITTAL_NO,MA.SUB_NO, MA.INST_AMT, MA.MEMBER_NO, MA.MEMBER_NAME,MA.CHIT_END_DT,MA.CHIT_START_DT)a
             <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                WHERE ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
        </dynamic>
             ORDER BY CHITTAL_NO 
    </dynamic-mapped-statement>

    <dynamic-mapped-statement name="getMDSChittalNoNew" result-class="java.util.LinkedHashMap">
       SELECT   msd.scheme_desc,MA.SCHEME_NAME, ma.chittal_no,SUM (MTD.NET_AMT)-sum(MTD.PENAL_AMT) AS paid_amount,
       round((SUM (MTD.NET_AMT)-sum(MTD.PENAL_AMT)) * i.dep_eligible_loan_amt / 100) AS inst_amt,MA.CHIT_START_DT AS START_DT,MA.CHIT_END_DT AS END_DT,I.DEP_ELIGIBLE_LOAN_AMT
       FROM LOANS_PROD_INTCALC I,mds_application ma JOIN mds_scheme_details msd ON msd.scheme_name = ma.scheme_name
       JOIN mds_trans_details mtd ON mtd.chittal_no = ma.chittal_no JOIN share_acct sa ON sa.share_acct_no = ma.member_no
       JOIN customer c ON c.cust_id = sa.cust_id WHERE mtd.authorize_status = 'AUTHORIZED'
       AND ma.authorize_status = 'AUTHORIZED' AND NOT EXISTS (SELECT * FROM mds_prized_money_details mpd
       WHERE mpd.chittal_no = ma.chit_no) AND c.cust_id = #cust_id# AND MA.SCHEME_NAME=#PROD_ID# AND I.PROD_ID=#PRODUCT_ID#
       <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="scheme_desc">
                    UPPER(msd.scheme_desc) LIKE UPPER('%$scheme_desc$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="SCHEME_NAME">
                    UPPER(MA.SCHEME_NAME) LIKE UPPER('%$SCHEME_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="chittal_no">
                    UPPER(ma.chittal_no) LIKE UPPER('%$chittal_no$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="START_DT">
                    UPPER(MA.CHIT_START_DT) LIKE UPPER('%$START_DT$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="DEP_ELIGIBLE_LOAN_AMT">
                    UPPER(I.DEP_ELIGIBLE_LOAN_AMT) LIKE UPPER('%$DEP_ELIGIBLE_LOAN_AMT$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="END_DT">
                    UPPER(MA.CHIT_END_DT) LIKE UPPER('%$END_DT$%')
                </isNotNull>
            </isParameterPresent>
      </dynamic>
      GROUP BY msd.scheme_desc, ma.chittal_no,MA.SCHEME_NAME,MA.CHIT_START_DT ,MA.CHIT_END_DT,I.DEP_ELIGIBLE_LOAN_AMT
  </dynamic-mapped-statement>
    
    <mapped-statement name="insertMDSSecurityLandTO" inline-parameters="true">
        INSERT INTO MDS_SECURITY_LAND
        (CHITTAL_NO, SUB_NO, MEMBER_NO, MEMBER_NAME, DOCUMENT_NO, DOCUMENT_TYPE, DOCUMENT_DT, REGISTERED_OFFICE, PLEDGE, PLEDGE_DT, PLEDGE_NO, PLEDGE_AMOUNT, VILLAGE, SURVEY_NO, TOTAL_AREA, NATURE, "right", REMARKS, BRANCH_CODE, STATUS, STATUS_DT, STATUS_BY,GAHAN_YESNO,DOCUMENT_GEN_ID
        ) VALUES (
        #chittalNo#, #subNo#, #memberNo#, #memberName#, #documentNo#, #documentType#, #documentDt#, 
        #registeredOffice#, #pledge#, #pledgeDt#, #pledgeNo#, #pledgeAmount#, #village#, #surveyNo#, 
        #totalArea#, #nature#, #right#, #remarks#, #branchCode#, #status#, #statusDt#, 
        #statusBy#,#gahanYesNo#,#docGenId#)
    </mapped-statement>
        
    <mapped-statement name="updateMDSSecurityLandTO1" inline-parameters="true">
        UPDATE MDS_SECURITY_LAND SET 
        GAHAN_YESNO =#gahanYesNo#,
        MEMBER_NAME = #memberName#,
        DOCUMENT_NO = #documentNo#,
        DOCUMENT_TYPE = #documentType#,
        DOCUMENT_DT = #documentDt#,
        REGISTERED_OFFICE = #registeredOffice#,
        PLEDGE = #pledge#,
        PLEDGE_DT = #pledgeDt#,
        PLEDGE_NO = #pledgeNo#,
        PLEDGE_AMOUNT = #pledgeAmount#,
        VILLAGE = #village#,
        SURVEY_NO = #surveyNo#,
        TOTAL_AREA = #totalArea#,
        NATURE = #nature#,
        "right" = #right#,
        REMARKS = #remarks#,
        BRANCH_CODE = #branchCode#,
        STATUS = #status#,
        STATUS_DT = #statusDt#,
        STATUS_BY = #statusBy#,
        DOCUMENT_GEN_ID=#docGenId#
        WHERE MEMBER_NO = #memberNo# AND CHITTAL_NO = #chittalNo# AND SUB_NO=#subNo# AND STATUS != 'DELETED'
        AND SURVEY_NO = #oldSurvyNo#
    </mapped-statement>

    <mapped-statement name="updateMDSSecurityLandTO" inline-parameters="true">
        UPDATE MDS_SECURITY_LAND SET 
        GAHAN_YESNO =#gahanYesNo#,
        MEMBER_NAME = #memberName#,
        DOCUMENT_NO = #documentNo#,
        DOCUMENT_TYPE = #documentType#,
        DOCUMENT_DT = #documentDt#,
        REGISTERED_OFFICE = #registeredOffice#,
        PLEDGE = #pledge#,
        PLEDGE_DT = #pledgeDt#,
        PLEDGE_NO = #pledgeNo#,
        PLEDGE_AMOUNT = #pledgeAmount#,
        VILLAGE = #village#,
        SURVEY_NO = #surveyNo#,
        TOTAL_AREA = #totalArea#,
        NATURE = #nature#,
        "right" = #right#,
        REMARKS = #remarks#,
        BRANCH_CODE = #branchCode#,
        STATUS = #status#,
        STATUS_DT = #statusDt#,
        STATUS_BY = #statusBy#,
        DOCUMENT_GEN_ID=#docGenId#
        WHERE MEMBER_NO = #memberNo# AND CHITTAL_NO = #chittalNo# AND SUB_NO=#subNo# AND STATUS != 'DELETED'
    </mapped-statement>
         
    <mapped-statement name="deleteMDSSecurityLandTO" inline-parameters="true">
        UPDATE MDS_SECURITY_LAND SET 
        STATUS = #status#,
        STATUS_BY = #statusBy#,
        STATUS_DT = #statusDt#
        WHERE MEMBER_NO = #memberNo# AND CHITTAL_NO = #chittalNo# AND SUB_NO=#subNo# AND STATUS != 'DELETED'
    </mapped-statement>

    <mapped-statement name="deleteMDSSecurityLandTO1" inline-parameters="true">
        UPDATE MDS_SECURITY_LAND SET 
        STATUS = #status#,
        STATUS_BY = #statusBy#,
        STATUS_DT = #statusDt#
        WHERE MEMBER_NO = #memberNo# AND CHITTAL_NO = #chittalNo# AND SUB_NO=#subNo# AND STATUS != 'DELETED'
        AND SURVEY_NO = #oldSurvyNo#
    </mapped-statement>
         
    <mapped-statement name="getSelectMDSSecurityLandTO" result-map="getMDSSecurityLandTOResult" >
        SELECT * FROM MDS_SECURITY_LAND WHERE CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO#  AND STATUS != 'DELETED'
    </mapped-statement>
         
    <result-map name="getMDSSecurityLandTOResult" class="com.see.truetransact.transferobject.mdsapplication.mdsmastermaintenance.MDSMasterSecurityLandTO">
        <property name="chittalNo" column="CHITTAL_NO"/>
        <property name="subNo" column="SUB_NO"/>
        <property name="memberNo" column="MEMBER_NO"/>
        <property name="memberName" column="MEMBER_NAME"/>
        <property name="documentNo" column="DOCUMENT_NO"/>
        <property name="documentType" column="DOCUMENT_TYPE"/>
        <property name="documentDt" column="DOCUMENT_DT"/>
        <property name="registeredOffice" column="REGISTERED_OFFICE"/>
        <property name="pledge" column="PLEDGE"/>
        <property name="pledgeDt" column="PLEDGE_DT"/>
        <property name="pledgeNo" column="PLEDGE_NO"/>
        <property name="pledgeAmount" column="PLEDGE_AMOUNT"/>
        <property name="village" column="VILLAGE"/>
        <property name="surveyNo" column="SURVEY_NO"/>
        <property name="totalArea" column="TOTAL_AREA"/>
        <property name="nature" column="NATURE"/>
        <property name="right" column="RIGHT"/>
        <property name="remarks" column="REMARKS"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="gahanYesNo" column="GAHAN_YESNO"/>
        <property name="docGenId" column="DOCUMENT_GEN_ID"/>
    </result-map>
        
    <mapped-statement name="deleteMDSSecurityCollateralDetails" inline-parameters="true">
        UPDATE MDS_SECURITY_LAND SET 
        STATUS = #status#,
        STATUS_BY = #statusBy#,
        STATUS_DT = #statusDt# 
        WHERE CHITTAL_NO = #chittalNo# AND SUB_NO=#subNo# AND STATUS!='DELETED'               
    </mapped-statement>
         
    <mapped-statement name="authorizeMDSCollateralDetails" result-class="java.util.HashMap">
        UPDATE MDS_SECURITY_LAND SET 
        AUTHORIZED_STATUS = #STATUS#,
        AUTHORIZED_BY = #AUTHORIZED_BY#,
        AUTHORIZED_DT = #AUTHORIZED_DT#::TIMESTAMP
        WHERE <!--STATUS != 'DELETED' --> STATUS_DT = #STATUS_DT:DATE# AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO#
        AND (AUTHORIZED_STATUS!='REJECTED' OR  AUTHORIZED_STATUS is null)
    </mapped-statement>
         
    <mapped-statement name="getGahanAvailableSecurityforMDS" result-class="java.util.HashMap">
        SELECT NVL(TOT_SECURITY_VALUE,0) - NVL(PLEDGED_AMOUNT,0) AS AVAILABLE_SECURITY_VALUE FROM
        (SELECT SUM(PLEDGE_AMT) AS TOT_SECURITY_VALUE FROM GAHAN_DOCUMENT_DETAILS WHERE DOCUMENT_GEN_ID=#DOC_GEN_ID#) A,
        (SELECT SUM(PLEDGE_AMOUNT) AS PLEDGED_AMOUNT FROM MDS_SECURITY_LAND WHERE STATUS !='DELETED' AND  DOCUMENT_GEN_ID = #DOC_GEN_ID#) B
    </mapped-statement>
        
        
    <mapped-statement name="getSelGahanForMds1" result-class="java.util.HashMap">
        select sum(PLEDGE_AMOUNT) as GAHAN_SET from MDS_SECURITY_LAND where DOCUMENT_GEN_ID=#DOC_GEN_ID#
    </mapped-statement>

    <mapped-statement name="getGahanAvailableSecurity" result-class="java.util.HashMap">
        SELECT SUM(PLEDGE_AMT) AS TOT_SECURITY_VALUE FROM GAHAN_DOCUMENT_DETAILS WHERE DOCUMENT_GEN_ID=#DOC_GEN_ID#
    </mapped-statement>
        
    <mapped-statement name="insertMDSSocietyTypeTO" inline-parameters="true">
        INSERT INTO MDS_SOCIETY_TYPE 
        (CHITTAL_NO, SUB_NO, OTHER_INSTITUTION,NAME,SECURITY_TYPE,SECURITY_NO,AMOUNT,ISSUE_DT,MATURITY_DT,MATURITY_VAL,REMARKS,STATUS,STATUS_BY,STATUS_DT,BRANCH_CODE
        ) VALUES (
        #chittalNo#, #subNo#, #institution#,#name#,#securityType#,#securityNo#,#amount#,
        #issueDt#,#matDt#, #maturityValue# ,#remarks#, #status#, #statusBy#, (SELECT SYS_DATE() FROM DUAL), #branchCode#)
    </mapped-statement>
        
    <mapped-statement name="updateMDSSocietyTypeTO" inline-parameters="true">
        UPDATE MDS_SOCIETY_TYPE SET 
        OTHER_INSTITUTION = #institution#, 
        NAME = #name#,
        SECURITY_TYPE = #securityType#,
        ISSUE_DT = #issueDt#,
        AMOUNT = #amount#,
        SECURITY_NO=#securityNo#,
        MATURITY_VAL=#maturityValue#,
        MATURITY_DT=#matDt#,
        STATUS = #status#,
        STATUS_BY = #statusBy#,
        REMARKS=#remarks#
        WHERE SECURITY_NO = #securityNo# AND CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo# AND STATUS != 'DELETED'
    </mapped-statement>
        
    <mapped-statement name="deleteMDSSocietyTypeTO" inline-parameters="true">
        UPDATE MDS_SOCIETY_TYPE SET
        STATUS = #status#,
        STATUS_BY = #statusBy#,
        STATUS_DT = #statusDt#
        WHERE SECURITY_NO = #securityNo# AND CHITTAL_NO = #chittalNo# AND SUB_NO = #subNo#
    </mapped-statement>
        
    <mapped-statement name="authorizeMDSSocietyDetails" result-class="java.util.HashMap">
        UPDATE MDS_SOCIETY_TYPE SET  
        AUTHORIZED_STATUS = #STATUS#,
        AUTHORIZED_BY = #AUTHORIZED_BY#,
        AUTHORIZED_DT = #AUTHORIZED_DT#::TIMESTAMP
        WHERE STATUS != 'DELETED' AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO#
        AND (AUTHORIZED_STATUS!='REJECTED' OR  AUTHORIZED_STATUS is null)
    </mapped-statement>
        
    <mapped-statement name="getSelectMDSSocietyTypeTO " result-map="getMDSSocietyTypeTOResult" >
        SELECT * FROM MDS_SOCIETY_TYPE WHERE STATUS!='DELETED' AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO# AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS='AUTHORIZED')
    </mapped-statement>
        
    <result-map name="getMDSSocietyTypeTOResult" class="com.see.truetransact.transferobject.mdsapplication.mdsmastermaintenance.MDSSocietyTypeTO">
        <property name="chittalNo" column="CHITTAL_NO"/>
        <property name="subNo" column="SUB_NO"/>
        <property name="institution" column="OTHER_INSTITUTION"/>
        <property name="name" column="NAME"/> 
        <property name="amount" column="AMOUNT"/> 
        <property name="securityNo" column="SECURITY_NO"/> 
        <property name="securityType" column="SECURITY_TYPE"/> 
        <property name="remarks" column="REMARKS"/> 
        <property name="maturityValue" column="MATURITY_VAL"/> 
        <property name="issueDt" column="ISSUE_DT"/> 
        <property name="matDt" column="MATURITY_DT"/> 
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
    </result-map>
        
    <mapped-statement name="getAvailableBalForDep " result-class="java.util.HashMap">
        SELECT DSA.AVAILABLE_BALANCE,DA.CUST_ID FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA WHERE DA.STATUS!='DELETED' 
        AND DA.DEPOSIT_NO = #DEPOSIT_NO# AND DA.AUTHORIZE_STATUS='AUTHORIZED' AND DA.DEPOSIT_NO=DSA.DEPOSIT_NO
    </mapped-statement>
    
    <mapped-statement name="getAvailableBalForDepEditMode" result-class="java.util.HashMap">
          SELECT DSA.AVAILABLE_BALANCE+DL.LIEN_AMOUNT AS AVAILABLE_BALANCE, DA.CUST_ID
          FROM DEPOSIT_SUB_ACINFO DSA, DEPOSIT_ACINFO DA,DEPOSIT_LIEN DL
          WHERE DL.DEPOSIT_NO = DSA.DEPOSIT_NO
           AND DA.STATUS != 'DELETED'
           AND DA.DEPOSIT_NO = #DEPOSIT_NO#
           AND DA.AUTHORIZE_STATUS = 'AUTHORIZED'
           AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
           AND DL.STATUS = 'CREATED'
           AND DL.AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
        
    <mapped-statement name="getCustIdDeathChecking " result-class="java.util.HashMap">
        SELECT CUST_ID FROM ALL_CUSTOMER WHERE ACT_NUM=#CHITTAL_NO# AND ACCT_STATUS!='CLOSED'
    </mapped-statement>
        
    <mapped-statement name="getLienAmountForChecking" result-class="java.util.HashMap">
        SELECT  LIEN_AMOUNT FROM DEPOSIT_LIEN WHERE STATUS!='DELETED' AND DEPOSIT_NO =#DEPOSIT_NO# AND 
        AUTHORIZE_STATUS='AUTHORIZED' AND LIEN_AC_NO=#CHITTAL_NO# 
    </mapped-statement>
        
    <mapped-statement name="getPrizedAmountDetails " result-class="java.util.HashMap">
        SELECT PRIZED_AMOUNT FROM MDS_PRIZED_MONEY_DETAILS WHERE STATUS!='DELETED' AND AUTHORIZED_STATUS='AUTHORIZED'
        AND CHITTAL_NO = #CHITTAL_NO# 
    </mapped-statement>
        
    <mapped-statement name="getLientAmountForMDS " result-class="java.util.HashMap">
        SELECT LIEN_AMOUNT FROM DEPOSIT_LIEN WHERE STATUS!='DELETED' AND DEPOSIT_NO = #DEPOSIT_NO# AND LIEN_AC_NO=#CHITTAL_NO# AND AUTHORIZE_STATUS IS NULL       
    </mapped-statement>
        
        
    <mapped-statement name="updateLienForMDS" result-class="java.util.HashMap">
        UPDATE DEPOSIT_LIEN SET 		
        AUTHORIZE_STATUS = #STATUS#,
        AUTHORIZE_DT = #AUTHORIZED_DT#,
        AUTHORIZE_BY = #AUTHORIZED_BY#                		
        WHERE DEPOSIT_NO=#DEPOSIT_ACT_NUM# AND LIEN_AC_NO=#CHITTAL_NO#
    </mapped-statement> 
    
    
    <mapped-statement name="deleteLienForMDS" result-class="java.util.HashMap">
        UPDATE DEPOSIT_LIEN SET 		
        STATUS = #STATUS#,
        STATUS_DT = #STATUS_DT#,
        STATUS_BY = #STATUS_BY#                		
        WHERE DEPOSIT_NO=#DEPOSIT_ACT_NUM# AND LIEN_AC_NO=#CHITTAL_NO#
    </mapped-statement>  
       
    <mapped-statement name="getLienDEtailsForDelete" result-class="java.util.HashMap">
        SELECT * FROM DEPOSIT_LIEN          		
        WHERE DEPOSIT_NO=#DEPOSIT_ACT_NUM# AND LIEN_AC_NO=#CHITTAL_NO# AND STATUS!='DELETED' AND STATUS!='UNLIENED'
        and (AUTHORIZE_STATUS IS NULL OR AUTHORIZE_STATUS='AUTHORIZED')
    </mapped-statement>  
       
    <mapped-statement name="getMDSLienDetailsForClosing" result-class="java.util.HashMap">
        SELECT MM.CHITTAL_NO,MD.DEPOSIT_NO as "DEPOSIT_ACT_NUM" FROM MDS_MASTER_MAINTENANCE MM,MDS_DEPOSIT_TYPE MD WHERE MM.SCHEME_NAME=#SCHEME_NAME# AND 
        MM.CHITTAL_NO=MD.CHITTAL_NO AND MD.STATUS!='DELETED' AND MD.AUTHORIZED_STATUS='AUTHORIZED'
        AND MM.STATUS!='CLOSED' AND MM.AUTHORIZED_STATUS='AUTHORIZED'
    </mapped-statement> 
       
    <mapped-statement name = "updateUnlienForMDS" result-class="java.util.HashMap">
        UPDATE DEPOSIT_LIEN SET STATUS = #STATUS#,UNLIEN_DT=#UNLIEN_DT# WHERE DEPOSIT_NO = #DEPOSIT_ACT_NUM#
        AND LIEN_AC_NO = #CHITTAL_NO# AND STATUS != 'DELETED' AND AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
   
    <mapped-statement name = "getBondsetValue" result-class="java.util.HashMap">
        SELECT BONDSET FROM MDS_MASTER_MAINTENANCE
        where SCHEME_NAME=#SCHEME# and CHITTAL_NO=#CHITTAL_NO#       
    </mapped-statement>
         
         
    <mapped-statement name = "getApplicationValue" result-class="java.util.HashMap">
        SELECT APPLICATIONSET FROM MDS_MASTER_MAINTENANCE
        where SCHEME_NAME=#SCHEME# and CHITTAL_NO=#CHITTAL_NO# and 
        (AUTHORIZED_STATUS!='REJECTED' or AUTHORIZED_STATUS is null or AUTHORIZED_STATUS='AUTHORIZED')     
    </mapped-statement>
         
    <mapped-statement name = "getLastBondValue" result-class="java.util.HashMap">
        SELECT LAST_BOND_NO FROM MDS_SCHEME_DETAILS
        where SCHEME_NAME=#SCHEME#    
    </mapped-statement>
         
    <mapped-statement name = "getLastApplicationValue" result-class="java.util.HashMap">
        SELECT LAST_APPLICATION_NO FROM MDS_SCHEME_DETAILS
        where SCHEME_NAME=#SCHEME#    
    </mapped-statement>

    <mapped-statement name="updateSchemeBondNO" result-class="java.util.HashMap">
        UPDATE MDS_SCHEME_DETAILS SET 		
        LAST_BOND_NO = #LASTBONDNO#                    		
        WHERE SCHEME_NAME=#SCHEME# 
    </mapped-statement> 

    <mapped-statement name="updateSchemeApplicationNO" result-class="java.util.HashMap">
        UPDATE MDS_SCHEME_DETAILS SET 		
        LAST_APPLICATION_NO = #LASTAPPLICATIONNO#                    		
        WHERE SCHEME_NAME=#SCHEME# 
    </mapped-statement> 
       
       
    <mapped-statement name="getMdsProdDesc" result-class="java.util.HashMap">
        select PROD_ID, PROD_DESC from mds_product_general_details where prod_id=(select prod_id from mds_scheme_details where scheme_name=#SCHEME_NAME# )
    </mapped-statement> 
             
             
             
    <mapped-statement name="upadetRemitIssueMds" result-class="java.util.HashMap">
        UPDATE REMIT_ISSUE_TRANS SET  
        STATUS='DELETED'
        WHERE BATCH_ID =#APPLICATION_NO#   AND          
        BRANCH_CODE =#BRANCH_CODE# 
    </mapped-statement>    
          
          
    <mapped-statement name=" getApplication_No" result-class="java.util.HashMap">
        select APPLICATION_NO from mds_master_maintenance 
        where chittal_no=#CHITTAL_NO# and sub_no=#SUB_NO#
    </mapped-statement> 

    <mapped-statement name="UpadteAppauthorizeMDSMasterMaintenance" result-class="java.util.HashMap">
        UPDATE MDS_MASTER_MAINTENANCE SET 
        APPLICATIONSET='N',
        BONDSET='N'            
        WHERE STATUS != 'DELETED' AND SCHEME_NAME = #SCHEME_NAME# AND CHITTAL_NO = #CHITTAL_NO# AND SUB_NO = #SUB_NO#
    </mapped-statement>

    <mapped-statement name="getLienLoan" result-class="java.util.HashMap">
       <!-- SELECT * FROM DEPOSIT_LIEN WHERE STATUS!='DELETED' AND DEPOSIT_NO=#DEPOSIT_NO# AND (AUTHORIZE_STATUS IS NULL OR AUTHORIZE_STATUS='AUTHORIZED') -->
       SELECT d.*,m.loan_given
       FROM deposit_lien d,mds_application m
       WHERE d.status != 'DELETED'
       AND d.deposit_no = #DEPOSIT_NO#
       AND (d.authorize_status IS NULL OR d.authorize_status = 'AUTHORIZED')
       AND m.chittal_no || '_1' = d.deposit_no
    </mapped-statement>

    <mapped-statement name="getNoOfLienDeposit" result-class="java.util.HashMap">
        SELECT mdt.chittal_no,DSA.STATUS
        FROM mds_deposit_type mdt JOIN deposit_sub_acinfo dsa
        ON mdt.deposit_no = dsa.deposit_no
        WHERE mdt.deposit_no = #DEPOSIT_NO#
        AND (authorized_status IS NULL OR authorized_status = 'AUTHORIZED')
   	</mapped-statement>

   	<mapped-statement name="UpadteLienForMDSDepositType" result-class="java.util.HashMap">
        UPDATE deposit_sub_acinfo 
        SET status = #LIEN_STATUS#
        WHERE deposit_no = #DEPOSIT_NO# and AUTHORIZE_STATUS = 'AUTHORIZED'
 	</mapped-statement>

 	<mapped-statement name="selectLienAmountInDepositLien" result-class="java.util.HashMap">
        select sum(dl.LIEN_AMOUNT) as lienAmount,dl.DEPOSIT_NO as DEPOSIT_NO from DEPOSIT_LIEN dl 
        where DL.LIEN_AC_NO = #LIEN_ACCT_NO# and dl.AUTHORIZE_STATUS = 'AUTHORIZED' group  by  dl.DEPOSIT_NO
 	</mapped-statement>

 	<mapped-statement name="UpdateLienAmountInDeposit" result-class="java.util.HashMap">
        update deposit_sub_acinfo   SET AVAILABLE_BALANCE = #LIENAMOUNT#
        where DEPOSIT_NO = #DEPOSIT_NO# and AUTHORIZE_STATUS = 'AUTHORIZED'
 	</mapped-statement>

 	<mapped-statement name="UpdateRemarksInDepositLien" result-class="java.util.HashMap">
        update deposit_lien  set REMARKS = #REMARK_STATUS#,STATUS = #STATUS# where deposit_no||'_'||deposit_sub_no =(select deposit_no||'_'||deposit_sub_no from deposit_sub_acinfo where deposit_no=#DEPOSIT_NO# and deposit_sub_no=#SUB_NO#)
        and LIEN_AC_NO = #LIEN_ACCT_NO# and DEPOSIT_SUB_NO = #SUB_NO# AND AUTHORIZE_STATUS = 'AUTHORIZED'
	<!--          update DEPOSIT_LIEN dl set DL.LIEN_AMOUNT = 0 where DL.DEPOSIT_NO = #DEPOSIT_NO#-->
 	</mapped-statement>

 	<mapped-statement name="getClearAvailbalance" result-class="java.util.HashMap">
        select DSA.AVAILABLE_BALANCE,DSA.CLEAR_BALANCE from deposit_sub_acinfo dsa 
        where DSA.DEPOSIT_NO = #DEPOSIT_NO# and   DSA.AUTHORIZE_STATUS = 'AUTHORIZED'
 	</mapped-statement>
        
    <mapped-statement name="getSelectMDSSecurityDetails" result-class="java.util.LinkedHashMap">            
        SELECT MEMBER_NO AS "AC NO",GET_JOINT_CUST(MEMBER_NO) AS MEMBER_NAME, TO_NUMBER (NETWORTH) AS SECURITY_AMOUNT
        FROM MDS_MEMBER_TYPE
        WHERE     STATUS != 'DELETED'
        AND CHITTAL_NO = #CHITTAL_NO#
        AND SUB_NO = #SUB_NO#
        AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS = 'AUTHORIZED')
        UNION ALL
        SELECT DEPOSIT_NO AS "AC NO", GetcustName(DEPOSIT_NO) AS MEMBER_NAME, AMOUNT AS SECURITY_AMOUNT
        FROM MDS_DEPOSIT_TYPE
        WHERE     STATUS != 'DELETED'
        AND CHITTAL_NO = #CHITTAL_NO#
        AND SUB_NO = #SUB_NO#
        AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS = 'AUTHORIZED')
        UNION
        SELECT SECURITY_NO AS "AC NO", (SELECT MEMBER_NAME FROM MDS_APPLICATION WHERE CHITTAL_NO = SECURITY_NO) AS MEMBER_NAME, AMOUNT SECURITY_AMOUNT
        FROM MDS_SOCIETY_TYPE 
        WHERE     STATUS != 'DELETED'
        AND CHITTAL_NO = #CHITTAL_NO#
        AND SUB_NO = #SUB_NO#
        AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS = 'AUTHORIZED')
        UNION
        SELECT ACT_NUM AS "AC NO", GetcustName(ACT_NUM) AS MEMBER_NAME, MISC_CHARGES AS SECURITY_AMOUNT
        FROM TERM_LOAN_CASE_DETAILS
        WHERE ACT_NUM = #CHITTAL_NO# || #SUB_NO#            
     </mapped-statement>
        
    <mapped-statement name="updateChittalCloseDate" result-class="java.util.HashMap">
        update MDS_MASTER_MAINTENANCE set CHIT_CLOSE_DT =#CHIT_CLOSE_DT# where 
        SCHEME_NAME = #SCHEME_NAME# and CHITTAL_NO =#CHITTAL_NO# and SUB_NO = #SUB_NO#
    </mapped-statement>
        
    <mapped-statement name="getMDSNoOfInstpay" result-class="java.util.HashMap">
        SELECT mre.no_of_inst_pay FROM mds_receipt_entry mre WHERE mre.scheme_name = #SCHEME_NAME# AND mre.chittal_no = #CHITTAL_NO#
        AND mre.authorize_status IS NULL AND mre.division_no = #DIV_NO#
   </mapped-statement>
   
    <dynamic-mapped-statement name="getMasterDepositNoForLoanee" result-class="java.util.HashMap" >
       SELECT DA.DEPOSIT_NO as ACT_NUM, get_cust_name(cu.cust_id) AS CUSTOMER_NAME, 
        CA.STREET AS HOUSE_NAME, DP.BEHAVES_LIKE AS TYPE, DS.AVAILABLE_BALANCE AS AMOUNT,CU.MEMBERSHIP_NO AS MEMBERSHIP_NO,round(DS.AVAILABLE_BALANCE* i.dep_eligible_loan_amt/ 100) AS ELIGIBLEAMOUNT FROM LOANS_PROD_INTCALC I,DEPOSIT_ACINFO DA, CUSTOMER CU, CUST_ADDR 
        CA,DEPOSIT_SUB_ACINFO DS, DEPOSITS_PRODUCT DP WHERE DA.CUST_ID = CU.CUST_ID AND CA.CUST_ID = CU.CUST_ID AND CA.ADDR_TYPE= 
        CU.COMM_ADDR_TYPE AND DP.PROD_ID = DA.PROD_ID AND DA.DEPOSIT_STATUS!='CLOSED'
         AND DA.PROD_ID = #PROD_ID# AND DA.DEPOSIT_NO=DS.DEPOSIT_NO AND (DS.ACCT_STATUS IN 
         ('NEW','PART_FREEZE','OPERATIONAL') or DS.ACCT_STATUS is null) AND DS.STATUS NOT IN ('DELETED') AND DS.AUTHORIZE_STATUS='AUTHORIZED'
         AND I.PROD_ID=#PRODUCT_ID# 
          <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="ACT_NUM">
                    UPPER(DA.DEPOSIT_NO) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER_NAME">
                    UPPER(get_cust_name(cu.cust_id)) LIKE UPPER('%$CUSTOMER_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBERSHIP_NO">
                    UPPER(CU.MEMBERSHIP_NO) LIKE UPPER('%$MEMBERSHIP_NO$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
         ORDER BY DA.DEPOSIT_NO
    </dynamic-mapped-statement>
        
    <mapped-statement name="getMDSSchemeInstallMentFreq" result-class="java.util.HashMap">
        SELECT MSD.INSTALLMENT_FREQUENCY FROM MDS_SCHEME_DETAILS MSD WHERE MSD.SCHEME_NAME = #SCHEME_NAME#
    </mapped-statement>        
        
    <mapped-statement name="getMDSNextInstDtForInstNo" result-class="java.util.HashMap">
        select MP.NEXT_INSTALLMENT_DATE from MDS_PRIZED_MONEY_DETAILS mp
        where MP.SCHEME_NAME = #SCHEME_NAME# and MP.INSTALLMENT_NO = cast(#CURRENT_INSALL_NO# as numeric)
    </mapped-statement>        
    
    <mapped-statement name="getAvailableBalForMDSChittal" result-class="java.util.HashMap">      
        SELECT SUM (NO_OF_INST)                NO_INST_PAID,
        SUM (NO_OF_INST * INST_AMT)     AS AVAILABLE_BALANCE,
        SUM (BONUS_AMT)                 AS TOTAL_BONUS_AMT
        FROM MDS_TRANS_DETAILS
        WHERE     CHITTAL_NO || '_1' = #DEPOSIT_NO:VARCHAR#
        AND SUB_NO = #SUB_NO:NUMBER#
        AND STATUS != 'DELETED'
        AND AUTHORIZE_STATUS IS NOT NULL
        AND AUTHORIZE_STATUS = 'AUTHORIZED'         
    </mapped-statement> 
         
    
    
</sql-map>