<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="LodgementBillsTOMap">

<!-- Use LodgementBillsTO object (JavaBean) properties as parameters for insert. 
     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertLodgementBillsTO" inline-parameters="true">
        INSERT INTO BILLS_LODGEMENT
        (PROD_ID, BILL_TYPE, BANK_DETAIL, CUST_ID, BORROWER_NO, INSTRUMENT_DETAILS, P_SBR_OTHER, BILL_AMT, COMMISSION, DISCOUNT, POSTAGE, MARGIN, DD_DRAWEE, DD_NAME, DD_STREET, DD_AREA, DD_CITY, DD_STATE, DD_COUNTRY, DD_PINCODE, FD_DRAWEE, FD_NAME, FD_STREET, FD_AREA, FD_CITY, FD_STATE, FD_COUNTRY, FD_PINCODE, STATUS, LODGEMENT_ID
        ) VALUES (
        #prodId:VARCHAR#, #billType:VARCHAR#, #bankDetail:VARCHAR#, #custId:VARCHAR#, #borrowerNo:VARCHAR#, #instrumentDetails:VARCHAR#, #pSbrOther:VARCHAR#, #billAmt:NUMERIC#, #commission:NUMERIC#, #discount:NUMERIC#, #postage:NUMERIC#, #margin:NUMERIC#, #ddDrawee:VARCHAR#, #ddName:VARCHAR#, #ddStreet:VARCHAR#, #ddArea:VARCHAR#, #ddCity:VARCHAR#, #ddState:VARCHAR#, #ddCountry:VARCHAR#, #ddPincode:VARCHAR#, #fdDrawee:VARCHAR#, #fdName:VARCHAR#, #fdStreet:VARCHAR#, #fdArea:VARCHAR#, #fdCity:VARCHAR#, #fdState:VARCHAR#, #fdCountry:VARCHAR#, #fdPincode:VARCHAR#, #status:VARCHAR#, #lodgementId:VARCHAR#)
    </mapped-statement>
   

<!-- Use LodgementBillsTO object (JavaBean) properties as parameters for update. 
     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateLodgementBillsTO" inline-parameters="true">
        UPDATE BILLS_LODGEMENT SET 
        PROD_ID = #prodId:VARCHAR#,
        BILL_TYPE = #billType:VARCHAR#,
        BANK_DETAIL = #bankDetail:VARCHAR#,
        CUST_ID = #custId:VARCHAR#,
        BORROWER_NO = #borrowerNo:VARCHAR#,
        INSTRUMENT_DETAILS = #instrumentDetails:VARCHAR#,
        P_SBR_OTHER = #pSbrOther:VARCHAR#,
        BILL_AMT = #billAmt:NUMERIC#,
        COMMISSION = #commission:NUMERIC#,
        DISCOUNT = #discount:NUMERIC#,
        POSTAGE = #postage:NUMERIC#,
        MARGIN = #margin:NUMERIC#,
        DD_DRAWEE = #ddDrawee:VARCHAR#,
        DD_NAME = #ddName:VARCHAR#,
        DD_STREET = #ddStreet:VARCHAR#,
        DD_AREA = #ddArea:VARCHAR#,
        DD_CITY = #ddCity:VARCHAR#,
        DD_STATE = #ddState:VARCHAR#,
        DD_COUNTRY = #ddCountry:VARCHAR#,
        DD_PINCODE = #ddPincode:VARCHAR#,
        FD_DRAWEE = #fdDrawee:VARCHAR#,
        FD_NAME = #fdName:VARCHAR#,
        FD_STREET = #fdStreet:VARCHAR#,
        FD_AREA = #fdArea:VARCHAR#,
        FD_CITY = #fdCity:VARCHAR#,
        FD_STATE = #fdState:VARCHAR#,
        FD_COUNTRY = #fdCountry:VARCHAR#,
        FD_PINCODE = #fdPincode:VARCHAR#,
        STATUS = #status:VARCHAR#
<!--    LODGEMENT_ID = #lodgeId:VARCHAR#,  -->
        WHERE LODGEMENT_ID = #lodgementId:VARCHAR#
    </mapped-statement>

<!-- Use LodgementBillsTO object (JavaBean) properties as parameters for delete. 
     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteLodgementBillsTO" inline-parameters="true">
        UPDATE BILLS_LODGEMENT SET 
        STATUS = #status:VARCHAR#
        WHERE LODGEMENT_ID = #lodgementId:VARCHAR#
    </mapped-statement>
    
<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
     be auto-mapped results to LodgementBillsTO object (JavaBean) properties -->
    <result-map name="getLodgementBillsTOResult" class="com.see.truetransact.transferobject.bills.LodgementBillsTO">
        <property name="prodId" column="PROD_ID"/>
        <property name="billType" column="BILL_TYPE"/>
        <property name="bankDetail" column="BANK_DETAIL"/>
        <property name="custId" column="CUST_ID"/>
        <property name="borrowerNo" column="BORROWER_NO"/>
        <property name="instrumentDetails" column="INSTRUMENT_DETAILS"/>
        <property name="pSbrOther" column="P_SBR_OTHER"/>
        <property name="billAmt" column="BILL_AMT"/>
        <property name="commission" column="COMMISSION"/>
        <property name="discount" column="DISCOUNT"/>
        <property name="postage" column="POSTAGE"/>
        <property name="margin" column="MARGIN"/>
        <property name="ddDrawee" column="DD_DRAWEE"/>
        <property name="ddName" column="DD_NAME"/>
        <property name="ddStreet" column="DD_STREET"/>
        <property name="ddArea" column="DD_AREA"/>
        <property name="ddCity" column="DD_CITY"/>
        <property name="ddState" column="DD_STATE"/>
        <property name="ddCountry" column="DD_COUNTRY"/>
        <property name="ddPincode" column="DD_PINCODE"/>
        <property name="fdDrawee" column="FD_DRAWEE"/>
        <property name="fdName" column="FD_NAME"/>
        <property name="fdStreet" column="FD_STREET"/>
        <property name="fdArea" column="FD_AREA"/>
        <property name="fdCity" column="FD_CITY"/>
        <property name="fdState" column="FD_STATE"/>
        <property name="fdCountry" column="FD_COUNTRY"/>
        <property name="fdPincode" column="FD_PINCODE"/>
        <property name="status" column="STATUS"/>
        <property name="lodgementId" column="LODGEMENT_ID"/>
    </result-map>
    
    <mapped-statement name="getSelectLodgementBillsTO" result-map="getLodgementBillsTOResult" >
        SELECT * FROM BILLS_LODGEMENT 
        WHERE LODGEMENT_ID = #value:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name="Bill_Lodgements.ViewAllCustomerID"  result-class="java.util.LinkedHashMap"> 
<!--    SELECT DISTINCT ACT_MASTER.CUST_ID AS "CUSTOMER ID", FNAME AS "FIRST NAME",  LNAME AS "LAST NAME", MNAME AS "MIDDLE NAME"
        FROM CUSTOMER, ACT_MASTER
        WHERE ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID  -->
        SELECT DISTINCT ACT_MASTER.CUST_ID AS "CUSTOMER ID", FNAME AS "FIRST NAME",  LNAME AS "LAST NAME", MNAME AS "MIDDLE NAME"
        FROM CUSTOMER, ACT_MASTER
        WHERE ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID AND CUSTOMER.STATUS NOT IN ('DELETED') AND ACT_MASTER.STATUS NOT IN ('DELETED')  
        <dynamic>
               <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER ID">
                    UPPER(ACT_MASTER.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="FIRST NAME">
                    UPPER(FNAME) LIKE UPPER('%$FIRST NAME$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="LAST NAME">
                    UPPER(LNAME) LIKE UPPER('%$LAST NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="MIDDLE NAME">
                    UPPER(MNAME) LIKE UPPER('%$MIDDLE NAME$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
    
    <mapped-statement name="Bill_Lodgements.getSelectedCustomerID"  result-class="java.util.LinkedHashMap"> 
        SELECT   ACT_NUM AS "ACCOUNT NUMBER", CUST_ID AS "CUSTOMER ID"
        FROM  ACT_MASTER
        WHERE CUST_ID = #CUSTOMER ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="Bill_Lodgements.getCustomerID"  result-class="java.util.LinkedHashMap">
        SELECT DISTINCT ACT_MASTER.CUST_ID AS "CUSTOMER ID", FNAME AS "FIRST NAME",  LNAME AS "LAST NAME", MNAME AS "MIDDLE NAME", ACT_NUM AS "ACCOUNT NUMBER"
        FROM CUSTOMER, ACT_MASTER
        WHERE ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID AND ACT_MASTER.CUST_ID = #CUSTOMER ID:VARCHAR#
    </mapped-statement>
      
    <mapped-statement name="Bill_Lodgements.getSelectedProductID" result-class="java.util.HashMap" >
        SELECT  PROD_ID, GL_AC_HD 
        FROM  BILLS_PRODUCT
        WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name="ViewAllLodgementBillsTO" result-class="java.util.LinkedHashMap" >
        SELECT  ACTUAL.LODGEMENT_ID AS "LODGEMENT ID", ACTUAL.CUST_ID AS "CUSTOMER ID" , get_cust_name(RELATION.cust_id) AS "CUSTOMER NAME"
        FROM BILLS_LODGEMENT ACTUAL, CUSTOMER RELATION
        WHERE ACTUAL.CUST_ID = RELATION.CUST_ID (+) AND ACTUAL.STATUS NOT IN ('DELETED')
        <dynamic>
               <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="LODGEMENT ID">
                    UPPER(ACTUAL.LODGEMENT_ID) LIKE UPPER('%$LODGEMENT ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER ID">
                    UPPER(ACTUAL.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER NAME">
                    UPPER(get_cust_name(RELATION.cust_id)) LIKE UPPER('%$CUSTOMER NAME$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
<!--    SELECT  LODGEMENT_ID AS "LODGEMENT ID", CUST_ID AS "CUSTOMER ID"
        FROM  BILLS_LODGEMENT
        WHERE STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED' -->
    </dynamic-mapped-statement>
    
</sql-map>