<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="AgriAdvanceTransMap">
<!-- Used in LoanTransMap -->    
    <result-map name="getAccProductresultAAD" class="com.see.truetransact.transferobject.common.lookup.LookUpTO">
        <property name="lookUpRefID" column="PROD_ID" />
        <property name="lookUpDesc" column="PROD_DESC" />
    </result-map>                 
    <mapped-statement name="Cash.getAccProductAAD" result-map="getAccProductresultAAD">
        SELECT AGRILOANS_PRODUCT.PROD_ID AS PROD_ID, AGRILOANS_PRODUCT.PROD_DESC AS PROD_DESC 
        FROM AGRILOANS_PRODUCT
        WHERE BEHAVES_LIKE IN ('AOD', 'ACC', 'BILLS')
        AND STATUS !='DELETED'
        AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND ACCT_HEAD IN (select ac_hd_id from ac_hd_param where CR_CASH='Y' OR CR_CASH='Y')
    </mapped-statement>
        
    <result-map name="get-LookUp-resultAAD" class="com.see.truetransact.transferobject.common.lookup.LookUpTO">
        <property name="lookUpRefID" column="LOOKUP_REF_ID" />
        <property name="lookUpDesc" column="LOOKUP_DESC" />
    </result-map>
    <mapped-statement name="getOpAccProductLookUpAAD" result-map="get-LookUp-resultAD">
        SELECT PROD_ID AS LOOKUP_REF_ID,PROD_DESC AS LOOKUP_DESC 
        FROM AGRILOANS_PRODUCT
        WHERE BEHAVES_LIKE IN ('AOD', 'ACC')
        AND STATUS !='DELETED'
        AND AUTHORIZE_STATUS = 'AUTHORIZED'            
        AND ACCT_HEAD IN (select ac_hd_id from ac_hd_param where CR_CLR='Y' OR CR_CLR='y')
    </mapped-statement>
      
        <!--!==================================-->
    <mapped-statement name="getActDataAAD" result-class="java.util.HashMap">
<!--        SELECT MODE_OF_OPERATION AS OPT_MODE_ID, LFD.ACCT_STATUS as STATUS, CATEGORY, CONSTITUTION,LFD.TOTAL_BALANCE,AC.AUTHORIZE_STATUS,LFD.CLEAR_BALANCE,LFD.PROD_ID,
        LSD.FROM_DT as CREATE_DT, LP.BASE_CURRENCY AS "PRODCURRENCY" , LP.BEHAVES_LIKE,
        LFD.REMARKS as REMARKS, LFD.BRANCH_ID AS BRANCH_CODE, AC.AUTHORIZE_DT AS CLOSED_DT,
        LSD.TO_DT AS EXPIRY_DT ,AM.CUST_ID AS CUST_ID
        FROM AGRI_LOANS_BORROWER  AM, AGRI_LOANS_FACILITY_DETAILS LFD,AGRI_ADVANCES_PARAM_DETAILS APD, ACT_CLOSING AC,
        AGRI_LOANS_COMPANY LC, AGRILOANS_PRODUCT LP , 
        AGRI_LOANS_SANCTION_DETAILS LSD
        WHERE LFD.SANCTION_NO = LSD.SANCTION_NO AND
        LFD.SL_NO = LSD.SL_NO AND 
        LFD.BORROW_NO = LSD.BORROW_NO AND 
        AM.BORROW_NO = LFD.BORROW_NO AND
        LC.BORROW_NO(+) = LFD.BORROW_NO AND
        LFD.ACCT_NUM = #ACT_NUM# AND
        APD.ACT_NUM =LFD.ACCT_NUM AND
        AC.ACT_NUM(+)= LFD.ACCT_NUM AND
        LP.PROD_ID = LFD.PROD_ID AND 
        LP.BEHAVES_LIKE IN ('AOD', 'ACC')-->
        SELECT MODE_OF_OPERATION AS OPT_MODE_ID, LFD.ACCT_STATUS as STATUS, CATEGORY, CONSTITUTION,LFD.TOTAL_BALANCE,AC.AUTHORIZE_STATUS,
        LFD.CLEAR_BALANCE,LFD.PROD_ID, LSD.FROM_DT as CREATE_DT, LP.BASE_CURRENCY AS "PRODCURRENCY" , LP.BEHAVES_LIKE,
        LFD.REMARKS as REMARKS, LFD.BRANCH_ID AS BRANCH_CODE, AC.AUTHORIZE_DT AS CLOSED_DT,
        LSD.TO_DT AS EXPIRY_DT ,AM.CUST_ID AS CUST_ID
        FROM AGRI_LOANS_BORROWER  AM, AGRI_LOANS_FACILITY_DETAILS LFD LEFT OUTER JOIN AGRI_LOANS_COMPANY LC ON LC.BORROW_NO = LFD.BORROW_NO
        LEFT OUTER JOIN ACT_CLOSING AC ON AC.ACT_NUM = LFD.ACCT_NUM, AGRI_ADVANCES_PARAM_DETAILS APD, 
        AGRILOANS_PRODUCT LP , 
        AGRI_LOANS_SANCTION_DETAILS LSD
        WHERE LFD.SANCTION_NO = LSD.SANCTION_NO AND
        LFD.SL_NO = LSD.SL_NO AND 
        LFD.BORROW_NO = LSD.BORROW_NO AND 
        AM.BORROW_NO = LFD.BORROW_NO AND
        LFD.ACCT_NUM = #ACT_NUM# AND
        APD.ACT_NUM =LFD.ACCT_NUM AND
        LP.PROD_ID = LFD.PROD_ID AND 
        LP.BEHAVES_LIKE IN ('AOD', 'ACC')
    </mapped-statement>
        
        
    <result-map name="getAccountResultListAAD" class="java.util.LinkedHashMap">
        <property name="AccountNo" column="ACT_NUM"/>
        <property name="CustomerName" column="CUSTOMER_NAME"/>
        <property name="HouseName" column="HOUSE_NAME"/>
        <property name="Category" column="CATEGORY"/>
    </result-map>
    <dynamic-mapped-statement name="Cash.getAccountListAAD" result-map="getAccountResultListAAD" >
        SELECT
        LFD.ACCT_NUM as ACT_NUM, get_cust_name(cu.cust_id) AS CUSTOMER_NAME,
        CA.STREET AS HOUSE_NAME,
        LB.CATEGORY as CATEGORY 
        FROM AGRI_LOANS_BORROWER LB, CUSTOMER CU, CUST_ADDR CA, AGRI_LOANS_FACILITY_DETAILS LFD
        WHERE LB.CUST_ID = CU.CUST_ID AND CA.CUST_ID = CU.CUST_ID AND CA.ADDR_TYPE= CU.COMM_ADDR_TYPE AND 
        LB.BORROW_NO = LFD.BORROW_NO AND 
        LFD.PROD_ID = #PROD_ID# AND
        (LFD.ACCT_STATUS IN ('NEW','TRANSFER_IN', 'DECEASED', 'OPERATIONAL') or LFD.ACCT_STATUS is null) AND 
        LB.STATUS NOT IN ('DELETED') AND 
        LFD.STATUS NOT IN ('DELETED') AND 
        LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED' AND 
            <!--LFD.AUTHORIZE_STATUS_2 = 'AUTHORIZED' AND -->
        LFD.BRANCH_ID = #SELECTED_BRANCH#
        ORDER BY LFD.ACCT_NUM
        <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                    <isNotNull prepend="AND"      property="CustomerName">
                        UPPER(get_cust_name(CU.CUST_ID)) LIKE UPPER('%$CustomerName$%')
                    </isNotNull>
                </isParameterPresent>
              <isParameterPresent>
                    <isNotNull prepend="AND"      property="AccountNo">
                        UPPER(LFD.ACCT_NUM) LIKE UPPER('%$AccountNo$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="HouseName">
                        UPPER(CA.STREET) LIKE UPPER('%$HouseName$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="Category">
                        UPPER(LB.CATEGORY) LIKE UPPER('%$Category$%')
                    </isNotNull>
                </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="ACCOUNTNO">
                    LFD.ACCT_NUM=#ACCOUNTNO#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
                    <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                 <isEqual prepend="" property="FILTERED_LIST" compareValue="FILTERED_LIST_org.postgresql.Driver" >
                    LIMIT 100
                </isEqual>
            </isPropertyAvailable>
        </dynamic>   
    </dynamic-mapped-statement>
        
        
    <mapped-statement name="Inward.getAccountListAAD" result-map="getAccountResultListAAD" >
            
        SELECT
        LFD.ACCT_NUM as ACT_NUM,get_cust_name(cu.cust_id) AS CUSTOMER_NAME,
        LB.CATEGORY as CATEGORY 
        FROM AGRI_LOANS_BORROWER LB, CUSTOMER CU, AGRI_LOANS_FACILITY_DETAILS LFD
        WHERE LB.CUST_ID = CU.CUST_ID AND 
        LB.BORROW_NO = LFD.BORROW_NO AND 
        LFD.PROD_ID =  #PROD_ID# AND
        LB.STATUS NOT IN ('DELETED') AND 
        LFD.STATUS NOT IN ('DELETED') AND 
        LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED' AND 
        LFD.BRANCH_ID = #SELECTED_BRANCH#
        ORDER BY LFD.ACCT_NUM
    </mapped-statement>
        
    <mapped-statement name="getAccountHeadProdAAD" result-class="java.util.HashMap">
<!--        SELECT AC_HD.AC_HD_ID AS AC_HEAD, AC_HD.AC_HD_DESC AS AC_HEAD_DESC FROM AC_HD, OP_AC_PRODUCT WHERE AC_HD.AC_HD_ID = OP_AC_PRODUCT.AC_HD_ID AND OP_AC_PRODUCT.PROD_ID = #PROD_ID# -->
        SELECT AC_HD.AC_HD_ID AS AC_HEAD, AC_HD.AC_HD_DESC AS AC_HEAD_DESC,CR_CASH,DR_CASH, 
        AGRILOANS_PRODUCT.BEHAVES_LIKE,AGRILOANS_PRODUCT.ACCT_HEAD
        FROM AC_HD, AGRILOANS_PRODUCT,AC_HD_PARAM
        WHERE AC_HD.AC_HD_ID = AGRILOANS_PRODUCT.ACCT_HEAD
        AND AC_HD.AC_HD_ID=AC_HD_PARAM.AC_HD_ID     
        AND AGRILOANS_PRODUCT.PROD_ID = #PROD_ID#
        AND AGRILOANS_PRODUCT.BEHAVES_LIKE IN ('AOD', 'ACC')
    </mapped-statement>
        
    <mapped-statement name="getAADBalance" result-class="java.util.HashMap">
        SELECT  
        NVL(LFD.AVAILABLE_BALANCE, 0) as "AVAILABLE_BALANCE", 
        NVL(LFD.CLEAR_BALANCE, 0) as "CLEAR_BALANCE", 
        nvl(LFD.TOTAL_BALANCE,0) as "TOTAL_BALANCE", 
        NVL(LFD.SHADOW_CREDIT, 0) as "SHADOW_CREDIT",
        NVL(LFD.SHADOW_DEBIT, 0) as "SHADOW_DEBIT",
        NVL(LSD.LIMIT, 0) as "LIMIT", 
        NVL((SELECT SUM(CALC_DRAWING_POWER) FROM 
        LOANS_DRAWING_POWER_DETAILS LDPD,
        AGRI_LOANS_FACILITY_DETAILS LFD, AGRILOANS_PRODUCT LP
        WHERE LP.PROD_ID = LFD.PROD_ID AND 
        LFD.ACCT_NUM = LDPD.ACCT_NO
        AND LP.BEHAVES_LIKE IN( 'ACC','AOD') AND LDPD.STATUS != 'DELETED'
        AND LFD.ACCT_NUM = #ACCOUNTNO#), 0) as "DRAWING_POWER", 
        nvl(UNCLEAR_BALANCE,0) as "UNCLEAR_BALANCE" 
        FROM AGRI_LOANS_FACILITY_DETAILS LFD, AGRI_LOANS_SANCTION_DETAILS LSD 
        WHERE ACCT_NUM = #ACCOUNTNO# AND LSD.BORROW_NO = LFD.BORROW_NO AND
        LSD.SANCTION_NO = LFD.SANCTION_NO AND LSD.SL_NO = LFD.SL_NO   
            <!--AND  
            (ACT_STATUS_ID IN ('NEW','PART_FREEZE','OPERATIONAL','CREDIT_FREEZE','DEBIT_FREEZE','TOTAL_FREEZE','COMP_FREEZE'))-->
    </mapped-statement>    
    <mapped-statement name="getBalanceAAD" result-class="java.util.HashMap">
        SELECT  
        nvl(LOAN_BALANCE_PRINCIPAL,0) as "AVAILABLE_BALANCE", 
        NVL(LFD.CLEAR_BALANCE, 0) as "CLEAR_BALANCE", 
        nvl(LFD.TOTAL_BALANCE,0) as "TOTAL_BALANCE", 
        NVL(LFD.SHADOW_CREDIT, 0) as "SHADOW_CREDIT",
        NVL(LFD.SHADOW_DEBIT, 0) as "SHADOW_DEBIT",
        NVL(AVAILABLE_BALANCE,0) AS "AV_BALANCE",
        NVL(LSD.LIMIT, 0) as "LIMIT", 
<!--                NVL((SELECT SUM(CALC_DRAWING_POWER) FROM 
                LOANS_DRAWING_POWER_DETAILS LDPD,
                LOANS_FACILITY_DETAILS LFD, LOANS_PRODUCT LP
                WHERE LP.PROD_ID = LFD.PROD_ID AND 
                LFD.ACCT_NUM = LDPD.ACCT_NO
                AND LP.BEHAVES_LIKE IN( 'CC','OD') AND LDPD.STATUS != 'DELETED'
                AND LFD.ACCT_NUM = #ACT_NUM#), 0) as "DRAWING_POWER", -->
        NVL((SELECT SUM(NVL(CALC_DRAWING_POWER,0)) FROM LOANS_DRAWING_POWER_DETAILS 
        WHERE STATUS != 'DELETED'AND ACCT_NO = #ACT_NUM# AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND AUTHORIZE_DT IN(SELECT MAX(AUTHORIZE_DT) FROM LOANS_DRAWING_POWER_DETAILS WHERE 
        ACCT_NO = #ACT_NUM# AND AUTHORIZE_STATUS = 'AUTHORIZED')),0) AS "DRAWING_POWER",                 
        nvl(UNCLEAR_BALANCE,0) as "UNCLEAR_BALANCE",
        nvl((SELECT SUM(TOD_AMOUNT)  FROM TOD_ALLOWED ,DAY_END
        WHERE ACT_NUM = #ACT_NUM# AND 
        AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND STATUS != 'DELETED' AND CURR_APPL_DT BETWEEN FROM_DT AND TO_DT AND TOD_ALLOWED.BRANCH_CODE=DAY_END.BRANCH_CODE),0) 
        AS "TOD_AMOUNT",
        nvl((SELECT DISTINCT TOD_UTILIZED FROM TOD_ALLOWED ,DAY_END
        WHERE ACT_NUM = #ACT_NUM# AND 
        AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND STATUS != 'DELETED' AND CURR_APPL_DT BETWEEN FROM_DT AND TO_DT AND TOD_ALLOWED.BRANCH_CODE=DAY_END.BRANCH_CODE),0) 
        AS "TOD_UTILIZED",
        LOAN_PAID_INT AS LOAN_PAID_INT
        FROM AGRI_LOANS_FACILITY_DETAILS LFD, AGRI_LOANS_SANCTION_DETAILS LSD 
        WHERE ACCT_NUM = #ACT_NUM# AND LSD.BORROW_NO = LFD.BORROW_NO AND
        LSD.SANCTION_NO = LFD.SANCTION_NO AND LSD.SL_NO = LFD.SL_NO   
            <!--AND  
            (ACT_STATUS_ID IN ('NEW','PART_FREEZE','OPERATIONAL','CREDIT_FREEZE','DEBIT_FREEZE','TOTAL_FREEZE','COMP_FREEZE'))-->
    </mapped-statement>     
        
    <dynamic-mapped-statement name="getdrawingPowerAmtAAD" result-class="java.util.HashMap">           
        SELECT SUM(NVL(CALC_DRAWING_POWER,0)) as "DRAWING_POWER" FROM 
        LOANS_DRAWING_POWER_DETAILS WHERE ACCT_NO = #ACT_NUM# AND 
        STATUS!='DELETED' AND AUTHORIZE_STATUS IS NULL
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "OR" property = "AUTHORIZE_STATUS">
                    AUTHORIZE_STATUS = #AUTHORIZE_STATUS#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>     
        
        
    <dynamic-mapped-statement name="getAccountNumberNameAAD" result-class="java.util.HashMap">
        SELECT get_cust_name(cust.cust_id) AS CUSTOMER_NAME,
        CUST.CUST_ID AS CUST_ID, CUST.CUST_TYPE,MEMBERSHIP_NO FROM CUSTOMER CUST, AGRI_LOANS_BORROWER LB, AGRI_LOANS_FACILITY_DETAILS LFD
        WHERE LB.CUST_ID = CUST.CUST_ID  AND
        LB.BORROW_NO = LFD.BORROW_NO
        <dynamic>
            <isNotPropertyAvailable prepend = "AND" property="CLOSECHECK">
                LFD.ACCT_STATUS != 'CLOSED'
            </isNotPropertyAvailable>
        </dynamic>
        AND 
        LFD.ACCT_NUM = #ACC_NUM:VARCHAR#
    </dynamic-mapped-statement> 
        
    <mapped-statement name="getProdIdForActNoAAD" result-class="java.util.HashMap">
        SELECT PROD_ID FROM AGRI_LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #ACC_NUM# 
            <!--AND BRANCH_ID = #BRANCH_ID#--> <!-- Commented by Rajesh because to allow Interbranch Trans -->
    </mapped-statement>     
        
        
        <!-- ==============================Common Transactions operation on Account===================================================== -->        

    <mapped-statement name="updateShadowDebitAAD" inline-parameters="true">
        UPDATE AGRI_LOANS_FACILITY_DETAILS SET 
        SHADOW_DEBIT = NVL(SHADOW_DEBIT,0) + #AMOUNT#,
        LAST_TRANS_DT = #TODAY_DT#                  
        WHERE ACCT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>

        <!--To Update the Data in Business Rule ...-->
    <mapped-statement name="updateShadowCreditAAD" inline-parameters="true">
        UPDATE AGRI_LOANS_FACILITY_DETAILS SET 
        SHADOW_CREDIT = nvl(SHADOW_CREDIT,0) + #AMOUNT#,
        LAST_TRANS_DT = #TODAY_DT#                
        WHERE ACCT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>

    <mapped-statement name="updateOtherBalancesAAD" inline-parameters="true">
        UPDATE AGRI_LOANS_FACILITY_DETAILS SET 
        CLEAR_BALANCE = NVL (CLEAR_BALANCE, 0) + #AMOUNT# - #UNCLEAR_AMT#, 
        TOTAL_BALANCE = NVL (TOTAL_BALANCE, 0) + #AMOUNT# , 
        UNCLEAR_BALANCE = NVL (UNCLEAR_BALANCE, 0) + #UNCLEAR_AMT#,
        LAST_TRANS_DT = #TODAY_DT# 
        WHERE ACCT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>

    <mapped-statement name="updateAvailBalanceAAD" result-class="java.util.HashMap">
        UPDATE AGRI_LOANS_FACILITY_DETAILS SET
        AVAILABLE_BALANCE = nvl(AVAILABLE_BALANCE,0) + #AMOUNT#,
        UNCLEAR_BALANCE = nvl(UNCLEAR_BALANCE,0) - #UNCLEAR_AMT#,
        CLEAR_BALANCE = nvl(CLEAR_BALANCE,0) + #UNCLEAR_AMT#,
        LAST_TRANS_DT = #TODAY_DT# 
        WHERE ACCT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateExcessAmountAAD" result-class="java.util.HashMap" >        
        UPDATE AGRI_LOANS_FACILITY_DETAILS SET 
        EXCESS_AMT = nvl(EXCESS_AMT, 0) + #AMOUNT#
        WHERE ACCT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updatePaidPrincipalInterestAAD" result-class="java.util.HashMap" >        
        UPDATE AGRI_LOANS_FACILITY_DETAILS SET 
        LOAN_BALANCE_PRINCIPAL = nvl(LOAN_BALANCE_PRINCIPAL, 0) - #PRINCIPAL_AMOUNT#,
        LOAN_PAID_INT = nvl(LOAN_PAID_INT, 0) + #INTEREST_AMOUNT#,
        LOAN_PAID_PENALINT = nvl(LOAN_PAID_PENALINT, 0) + #PENUL_INTEREST_AMOUNT#,
        LAST_REPAY_DT = #LAST_REPAY_DT:TIMESTAMP# 
        WHERE ACCT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
        
        <!-- ============================Transfer Transaction======================================== -->
        
    <mapped-statement name="Transfer.getCreditProductAAD" result-class="java.util.HashMap">
        SELECT PROD_ID as PRODID,PROD_DESC as PRODDESC ,BEHAVES_LIKE
        FROM AGRILOANS_PRODUCT 
        WHERE BEHAVES_LIKE IN ('AOD', 'ACC')
        AND STATUS != 'DELETED'
        AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND ACCT_HEAD in (select ac_hd_id from ac_hd_param where cr_trans='Y' OR cr_trans='y')
    </mapped-statement>
        
    <mapped-statement name="Transfer.getDebitProductAAD" result-class="java.util.HashMap">
        SELECT PROD_ID as PRODID, PROD_DESC as PRODDESC 
        FROM AGRILOANS_PRODUCT 
        WHERE BEHAVES_LIKE IN ('AOD', 'ACC')
        AND STATUS != 'DELETED' 
        AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND ACCT_HEAD in (select ac_hd_id from ac_hd_param where dr_trans='Y' OR dr_trans='y')
    </mapped-statement> 
        
    <result-map name="getTransferAccountResultListAAD" class="java.util.LinkedHashMap">
        <property name="AccountNo" column="ACT_NUM"/>
        <property name="CustomerName" column="CUSTOMER_NAME"/>
        <property name="HouseName" column="HOUSE_NAME"/>
        <property name="CustomerType" column="CUST_TYPE_ID"/>
    </result-map>        
    <dynamic-mapped-statement name="Transfer.getAccountListAAD" result-map="getTransferAccountResultListAAD">
                <!--SELECT CUSTOMER.CUST_ID as "Customer Id", DOB, get_cust_name(CUSTOMER.CUST_ID) "Name", GENDER , CUSTOMERGROUP, STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE from CUSTOMER , CUST_ADDR  WHERE ((CUSTOMER.STATUS = 'MODIFIED') or (CUSTOMER.STATUS = 'UPDATED') or (CUSTOMER.STATUS = 'CREATED')) and (CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID) and (CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE)-->
        SELECT
        LFD.ACCT_NUM AS ACT_NUM,  get_cust_name(cu.cust_id) AS CUSTOMER_NAME,CA.STREET AS HOUSE_NAME,
        LB.CATEGORY AS CUST_TYPE_ID 
        FROM AGRI_LOANS_FACILITY_DETAILS LFD, AGRI_LOANS_BORROWER LB, CUSTOMER CU , CUST_ADDR CA
        WHERE LB.CUST_ID = CU.CUST_ID AND CA.CUST_ID = CU.CUST_ID AND CA.ADDR_TYPE= CU.COMM_ADDR_TYPE AND 
        LB.BORROW_NO = LFD.BORROW_NO AND 
        LFD.PROD_ID = #PROD_ID# AND 
        (LFD.ACCT_STATUS IN ('NEW','TRANSFER_IN', 'DECEASED', 'OPERATIONAL') OR LFD.ACCT_STATUS IS NULL) AND 
        LFD.STATUS NOT IN ('DELETED') AND 
        LFD.AUTHORIZE_STATUS_1='AUTHORIZED'            
        <dynamic>
            <iterate prepend="AND LFD.ACCT_NUM NOT IN" property="ACT NUM" open = "(" close=")" conjunction="," >
                #ACT NUM[]#
            </iterate>
        </dynamic>
        <dynamic> <!-- This dynamic statement given by Rajesh. This statement passes the branchcode if we passed -->
            <isParameterPresent>
                <isNotNull prepend="AND" property="SELECTED_BRANCH"> 
                    LB.BRANCH_CODE = #SELECTED_BRANCH#
                </isNotNull> 
            </isParameterPresent>
        </dynamic>
         <dynamic> <!-- This dynamic statement given by Rajesh. This statement passes the branchcode if we passed -->
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
                <isParameterPresent>
                    <isNotNull prepend="AND" property="SELECTED_BRANCH"> 
                        LB.BRANCH_CODE = #SELECTED_BRANCH#
                    </isNotNull> 
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CustomerName">
                        UPPER(get_cust_name(CU.CUST_ID)) LIKE UPPER('%$CustomerName$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="AccountNo">
                        UPPER(LFD.ACCT_NUM) LIKE UPPER('%$AccountNo$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="HouseName">
                        UPPER(CA.STREET) LIKE UPPER('%$HouseName$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CustomerType">
                        UPPER(LB.CATEGORY) LIKE UPPER('%$CustomerType$%')
                    </isNotNull>
                </isParameterPresent>
            </dynamic>
            <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                 <isEqual prepend="" property="FILTERED_LIST" compareValue="FILTERED_LIST_org.postgresql.Driver" >
                    LIMIT 100
                </isEqual>
            </isPropertyAvailable>
        </dynamic>    
            
    </dynamic-mapped-statement>       
       
        <!-- ============================Outward Clearing======================================== -->
        <!--<result-map name="getAccountHeadID4PISDResultTL" class="java.util.HashMap">
            <property name="accHeadID" column="ACCT_HEAD"/>
            <property name="accHeadDesc" column="AC_HD_DESC"/>
            <property name="baseCurr" column="BASE_CURRENCY"/>
            <property name="currDesc" column="LOOKUP_DESC"/>
        </result-map>        
        <mapped-statement name="getAccountHeadID4PISDTL" result-map="getAccountHeadID4PISDResultTL" >        
                SELECT LOANS_PRODUCT.ACCT_HEAD,AC_HD_DESC,BASE_CURRENCY, LOOKUP_DESC FROM LOANS_PRODUCT,LOOKUP_MASTER,AC_HD 
                WHERE PROD_ID = #value# AND LOOKUP_REF_ID = BASE_CURRENCY AND LOOKUP_ID='FOREX.CURRENCY'
                AND LOANS_PRODUCT.ACCT_HEAD=AC_HD.AC_HD_ID
        </mapped-statement> -->             
        
    <result-map name="getAccountHeadID4PISDResultAAD" class="java.util.HashMap">
        <property name="accHeadID" column="ACCT_HEAD"/>
        <property name="accHeadDesc" column="AC_HD_DESC"/>
    </result-map>        
    <mapped-statement name="getAccountHeadID4PISDAAD" result-map="getAccountHeadID4PISDResultAAD" >        
        SELECT AGRILOANS_PRODUCT.ACCT_HEAD, AC_HD_DESC 
        FROM AGRILOANS_PRODUCT, AC_HD 
        WHERE PROD_ID = #value# 
        AND AGRILOANS_PRODUCT.ACCT_HEAD=AC_HD.AC_HD_ID
        AND AGRILOANS_PRODUCT.BEHAVES_LIKE IN ('AOD', 'ACC')
    </mapped-statement>
        
        <!--result-map name="getAccountDetailsPISDResultTL" class="java.util.HashMap">
            <property name="fName" column="FNAME"/>
            <property name="mName" column="MNAME"/>
            <property name="lName" column="LNAME"/>
            <property name="openingDt" column="CREATE_DT"/>
            <property name="category" column="ACT_CAT_ID"/>
            <property name="optMode" column="OPT_MODE_ID"/>
            <property name="groupCode" column="GROUP_CODE_ID"/>
            <property name="remarks" column="REMARKS"/>
            <property name="CLEAR_BALANCE" column="CLEAR_BALANCE"/>  
            <property name="EFFECTIVE_BALANCE" column="TOTAL_BALANCE"/>   
            <property name="AVAILABLE_BALANCE" column="AVAILABLE_BALANCE"/>   
            <property name="UNCLEAR_BALANCE" column="UNCLEAR_BALANCE"/>
            <property name="SHADOW_DEBIT" column="SHADOW_DEBIT"/>
            <property name="SHADOW_CREDIT" column="SHADOW_CREDIT"/>       
        </result-map-->        
        <!--> This query 'll fetch the details of given account no<-->
        <!--mapped-statement name="getAccountDetailsPISDTL" result-map="getAccountDetailsPISDResultTL" >        
            SELECT FNAME, MNAME, LNAME,LFD.CREATE_DT AS CREATE_DT,
            CATEGORY AS ACT_CAT_ID, OPENING_MODE AS OPT_MODE_ID, CONSTITUTION AS GROUP_CODE_ID,LFD.REMARKS AS REMARKS, 
            CLEAR_BALANCE, AVAILABLE_BALANCE, SHADOW_DEBIT, SHADOW_CREDIT,
            UNCLEAR_BALANCE,TOTAL_BALANCE
            FROM LOANS_FACILITY_DETAILS LFD,CUSTOMER,LOANS_BORROWER LB  
            WHERE 
               (LFD.ACCT_NUM = #value#)
                AND (LB.BORROW_NO = LFD.BORROW_NO AND LB.CUST_ID = CUSTOMER.CUST_ID)
        </mapped-statement-->
        
    <mapped-statement name="getDisbursementDetailsAAD" result-class="java.util.HashMap" >        
        SELECT COUNT(ACT_NUM) NO_DISBURSEMENT FROM AGRI_LOANS_DISBURSEMENT 
        WHERE ACT_NUM = #ACCOUNTNO:VARCHAR# 
        AND STATUS != 'DELETED' 
    </mapped-statement>
        
    <mapped-statement name="getDisbursementDetailsKeyAAD" result-class="java.util.HashMap" >        
        SELECT DECODE(MAX(DISBURSEMENT_ID), NULL, 0, MAX(DISBURSEMENT_ID)) MAX_DISBURSEMENT_ID 
        FROM AGRI_LOANS_DISBURSEMENT 
        WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getTotCalculatedDrawingAmountAAD" result-class="java.util.HashMap" >        
        SELECT SUM(CALC_DRAWING_POWER) LIMIT FROM LOANS_DRAWING_POWER_DETAILS LDPD,
        AGRI_LOANS_FACILITY_DETAILS LFD, AGRILOANS_PRODUCT LP
        WHERE LP.PROD_ID = LFD.PROD_ID AND LFD.ACCT_NUM = LDPD.ACCT_NO
        AND LP.BEHAVES_LIKE = 'ACC' AND LDPD.STATUS != 'DELETED'
        AND LFD.ACCT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="insertLoansDisbursementDetailsAAD" result-class="java.util.HashMap" >        
        INSERT INTO AGRI_LOANS_DISBURSEMENT 
        (ACT_NUM, DISBURSEMENT_ID, DISBURSEMENT_AMT, DISBURSEMENT_DT, STATUS, STATUS_BY, STATUS_DT, TRANS_ID
        ) VALUES (
        #ACCOUNTNO:VARCHAR#, #DISBURSEMENT_ID:VARCHAR#, #DISBURSEMENT_AMT:NUMERIC#, #DISBURSEMENT_DT:TIMESTAMP#, #STATUS:VARCHAR#, #STATUS_BY:VARCHAR#, #STATUS_DT:TIMESTAMP#, #TRANS_ID:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="updateLoansDisbursementDetailsAAD" result-class="java.util.HashMap" >        
        UPDATE AGRI_LOANS_DISBURSEMENT SET 
        DISBURSEMENT_AMT = NVL(DISBURSEMENT_AMT, 0) - #DISBURSEMENT_AMT:NUMERIC#,
        DISBURSEMENT_DT = #DISBURSEMENT_DT:TIMESTAMP#,
        STATUS = #STATUS:VARCHAR#,
                 <!--STATUS_DT = #STATUS_DT:TIMESTAMP#-->
        WHERE TRANS_ID = #TRANS_ID:VARCHAR#
        AND ACT_NUM = #ACCOUNTNO:VARCHAR# AND
        STATUS_DT = #STATUS_DT:TIMESTAMP# AND
        BRANCH_ID = #BRANCH_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteLoansDisbursementDetailsAAD" result-class="java.util.HashMap" >        
        UPDATE AGRI_LOANS_DISBURSEMENT SET 
        STATUS = #STATUS:VARCHAR#,
                <!--STATUS_BY = #STATUS_BY:VARCHAR#,-->
                <!--STATUS_DT = #STATUS_DT:TIMESTAMP#-->
        WHERE TRANS_ID = #TRANS_ID:VARCHAR#
        AND ACT_NUM = #ACCOUNTNO:VARCHAR# AND
        STATUS_DT = #STATUS_DT:TIMESTAMP#
    </mapped-statement>
        
    <mapped-statement name="updateLoanBalancePrincipalDetailsAAD" result-class="java.util.HashMap" >        
        UPDATE AGRI_LOANS_FACILITY_DETAILS SET 
        LOAN_BALANCE_PRINCIPAL = NVL(LOAN_BALANCE_PRINCIPAL, 0) + #AMOUNT#, 
        LAST_REPAY_DT = #LAST_REPAY_DT:TIMESTAMP#
        WHERE ACCT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateLastRepayDateDetailsAAD" result-class="java.util.HashMap" >        
        UPDATE AGRI_LOANS_FACILITY_DETAILS SET 
        LAST_REPAY_DT = #LAST_REPAY_DT:TIMESTAMP# 
        WHERE ACCT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="authorizeLoansDisbursementDetailsAAD" result-class="java.util.HashMap" >        
        UPDATE AGRI_LOANS_DISBURSEMENT SET 
        AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR#,
        AUTHORIZE_BY = #AUTHORIZE_BY:VARCHAR#,
        AUTHORIZE_DT = #TODAY_DT# 
        WHERE TRANS_ID = #TRANS_ID:VARCHAR#
        AND ACT_NUM = #ACCOUNTNO:VARCHAR# AND
        STATUS_DT = #STATUS_DT:TIMESTAMP#
    </mapped-statement>
        
    <mapped-statement name="InterestCalculationAAD" result-class="java.util.HashMap" >        
        SELECT DISTINCT ACT_NUM 
        FROM CASH_TRANS WHERE PROD_TYPE='AAD'  AND 
        AUTHORIZE_DT=#CURR_DATE# AND
        AUTHORIZE_STATUS='AUTHORIZED' AND STATUS!='DELETED' AND BRANCH_ID=#BRANCH_CODE#
        UNION
        SELECT DISTINCT ACT_NUM
        FROM TRANSFER_TRANS  WHERE PROD_TYPE='AAD' AND 
        AUTHORIZE_DT=#CURR_DATE# AND
        AUTHORIZE_STATUS='AUTHORIZED' AND STATUS!='DELETED' AND BRANCH_ID=#BRANCH_CODE#
    </mapped-statement>
         <!-- mapped-statement name="GetLoanTransactions" result-class="java.util.HashMap" >        
            SELECT TRANS_ID,ACT_NUM,AMOUNT,TRANS_DT,PROD_ID,PROD_TYPE
            FROM CASH_TRANS WHERE PROD_TYPE='TL'  AND 
            AUTHORIZE_DT=#CURR_DATE# AND
            AUTHORIZE_STATUS='AUTHORIZED' AND STATUS!='DELETED'AND 
            TRANS_TYPE='CREDIT' AND BRANCH_ID = #BRANCH_CODE#
            UNION
            SELECT TRANS_ID,ACT_NUM,AMOUNT,TRANS_DT,PROD_ID,PROD_TYPE
            FROM TRANSFER_TRANS  WHERE PROD_TYPE='TL' AND 
            AUTHORIZE_DT=#CURR_DATE# AND
            AUTHORIZE_STATUS='AUTHORIZED' AND STATUS!='DELETED'
            AND TRANS_TYPE='CREDIT' AND BRANCH_ID = #BRANCH_CODE#
         </mapped-statement -->
         
    <mapped-statement name="LoneFacilityDetailAAD" result-class="java.util.HashMap" >
        SELECT PROD_ID, CLEAR_BALANCE, LAST_TRANS_DT,LAST_INT_CALC_DT
        FROM AGRI_LOANS_FACILITY_DETAILS WHERE ACCT_NUM=#ACT_NUM#
    </mapped-statement>
        
    <mapped-statement name="AgriLoneFacilityDetailAAD" result-class="java.util.HashMap" >
        SELECT PROD_ID, CLEAR_BALANCE, LAST_TRANS_DT,LAST_INT_CALC_DT
        FROM AGRI_LOANS_FACILITY_DETAILS WHERE ACCT_NUM=#ACT_NUM#
    </mapped-statement>
        
    <mapped-statement name="InsertValueCalculationAAD" result-class="java.util.HashMap" >
        INSERT INTO ADVANCES_DAILY_PRODUCT(PROD_ID,ACT_NUM,PRODUCT_DATE,AMOUNT,PRODUCT
        )VALUES 
        (#PROD_ID:VARCHAR#,#ACT_NUM:VARCHAR#,#PRODUCT_DATE:TIMESTAMP#,#AMOUNT:NUMERIC#,#PRODUCT:NUMERIC#)
    </mapped-statement>
        
        <!-- mapped-statement name="InsertProductMonthEndAD" result-class="java.util.HashMap" >
            INSERT INTO ADVANCES_DAILY_PRODUCT(PROD_ID,ACT_NUM,PRODUCT_DATE,AMOUNT,PRODUCT
            )VALUES 
            (#PROD_ID:VARCHAR#,#ACT_NUM:VARCHAR#,#PRODUCT_DATE:TIMESTAMP#,#AMOUNT:NUMERIC#,#PRODUCT:NUMERIC#)
        </mapped-statement -->
        
        <!-- mapped-statement name="UpdateValueCalculationAD" result-class="java.util.HashMap" >
            UPDATE ADVANCES_DAILY_PRODUCT SET PRODUCT = #PRODUCT:NUMERIC# WHERE 
            PROD_ID=#PROD_ID:VARCHAR# AND ACT_NUM=#ACT_NUM:VARCHAR# AND 
            PRODUCT_DATE=#PRODUCT_DATE:TIMESTAMP# AND AMOUNT=#AMOUNT:NUMERIC#
        </mapped-statement -->
        
        <!--mapped-statement name="UpdateProductCalculationAD" result-class="java.util.HashMap" >
            UPDATE ADVANCES_DAILY_PRODUCT SET PRODUCT = #PRODUCT:NUMERIC# WHERE 
            PROD_ID=#PROD_ID:VARCHAR# AND ACT_NUM=#ACT_NUM:VARCHAR# AND 
            PRODUCT_DATE=#PRODUCT_DATE:TIMESTAMP# AND AMOUNT=#AMOUNT:NUMERIC#
        </mapped-statement -->
        
        <!--mapped-statement name="CalculateProductAD" result-class="java.util.HashMap" >
            SELECT PRODUCT_DATE, NVL(AMOUNT,0) AMOUNT , NVL(PRODUCT,0)PRODUCT FROM ADVANCES_DAILY_PRODUCT WHERE 
            PRODUCT_DATE = (SELECT MAX(PRODUCT_DATE) FROM ADVANCES_DAILY_PRODUCT WHERE PRODUCT_DATE NOT IN
            (#CURR_DATE#) AND ACT_NUM=#ACT_NUM#) AND ACT_NUM=#ACT_NUM#
        </mapped-statement --> 
        
       
       
        <!--mapped-statement name="getAllRecordForIntAD" result-class="java.util.HashMap" >
            SELECT DISTINCT ACT_NUM FROM ADVANCES_DAILY_PRODUCT WHERE PRODUCT_DATE
            BETWEEN #START_DATE# AND #CURR_DATE#
        </mapped-statement> 
       
        <mapped-statement name="GetSumProductAD" result-class="java.util.HashMap" >
            SELECT SUM (NVL(PRODUCT,0)) AS PRODUCT  FROM  ADVANCES_DAILY_PRODUCT WHERE PRODUCT_DATE BETWEEN 
            #START_DATE# AND #CURR_DATE#
            AND ACT_NUM=#ACT_NUM# GROUP BY PROD_ID
        </mapped-statement> 
        
        <mapped-statement name="getAdvancesInterestOD" result-class="java.util.HashMap" >
            SELECT * FROM LOANS_PROD_INTCALC    WHERE PROD_ID = #ADVANCES#
        </mapped-statement>
        
        
        
       
        
        <mapped-statement name="checkWeeklyOffOD" result-class="java.util.HashMap" > 
            SELECT * FROM WEEKLY_OFF WHERE BRANCH_ID = #BRANCH_CODE# AND WEEKLY_OFF='Y' AND
            STATUS !='DELETED' AND (TO_CHAR(#NEXT_DATE#, 'D') = WEEKLY_OFF1 OR
            TO_CHAR(#NEXT_DATE#, 'D') = WEEKLY_OFF2)
        </mapped-statement>
        
        <mapped-statement name="getAllReordsforThisMonth" result-class="java.util.HashMap" >
            SELECT PRODUCT_DATE,AMOUNT,ACT_NUM FROM ADVANCES_DAILY_PRODUCT WHERE 
            PRODUCT_DATE IN(SELECT MAX(PRODUCT_DATE) FROM ADVANCES_DAILY_PRODUCT WHERE
            PRODUCT_DATE  BETWEEN  #START_DATE# AND #CURR_DATE#
            GROUP BY ACT_NUM)
        </mapped-statement>
        
        <mapped-statement name="insertMonthInterestOD"  result-class="java.util.HashMap" > 
            INSERT INTO ADV_MONTH_INTEREST (ACT_NUM,PROD_ID,FROM_DATE,TO_DATE,INTEREST)VALUES
            (#ACT_NUM:VARCHAR#,#PROD_ID:VARCHAR#,#FROM_DATE:TIMESTAMP#,#TO_DATE:TIMESTAMP#,
            #INTEREST:NUMERIC#)
        </mapped-statement>
        -->
        <!--mapped-statement name="getLastInstallmentPaid"  result-class="java.util.HashMap" > 
            SELECT INSTALLMENT_SLNO, PAID_DATE, INSTALLMENT_DT, NVL(TOTAL_AMOUNT,0) AS TOTAL_AMOUNT ,NVL(BAL_PRINCIPAL_AMT,0) AS BAL_PRINCIPAL_AMT,
            NVL(BAL_INT_AMT,0) AS BAL_INT_AMT ,PAID_PRINCIPAL_AMT AS PRINCIPAL_AMOUNT,PAID_INT_AMT AS INTEREST_AMOUNT
            FROM LOANS_INSTALLMENT WHERE 
            ACCT_NUM=#ACT_NUM# AND PAID_DATE IN(
            SELECT MAX(PAID_DATE) FROM LOANS_INSTALLMENT)
        </mapped-statement -->
        
        
        
    <mapped-statement name="updatePaidInstallmentATL"  result-class="java.util.HashMap" > 
        UPDATE AGRI_LOANS_INSTALLMENT SET INSTALLMENT_SLNO=#INSTALLMENT_SLNO#, 
        PAID_DATE = #PAID_DATE#, TOTAL_AMOUNT = #TOTAL_AMOUNT#,TRANS_ID=#TRANS_ID#,
        INSTALLMENT_PAID = #INSTALLMENT_PAID#
        WHERE ACCT_NUM=#ACCT_NUM# AND INSTALLMENT_SLNO = #INSTALLMENT_SLNO# 
    </mapped-statement>
        
    <mapped-statement name="getSelectAgriTermLoanList" result-class="java.util.LinkedHashMap" >
        SELECT  get_cust_name(cust.cust_id) AS "CUSTOMER NAME",
        LFD.ACCT_NUM AS "ACCOUNT NUMBER"  FROM AGRI_LOANS_FACILITY_DETAILS LFD, AGRI_LOANS_BORROWER LB,
        CUSTOMER CUST 
        WHERE LB.CUST_ID=CUST.CUST_ID AND  LB.BORROW_NO=LFD.BORROW_NO
        AND
        LFD.AUTHORIZE_STATUS_1='AUTHORIZED'
        AND CUST.STATUS!='DELETED' 
        AND LFD.PROD_ID=#PRODID# 
        AND LFD.BRANCH_ID = #BRANCH_CODE# AND
        LAST_TRANS_DT IS NOT NULL AND ACCT_STATUS !='CLOSED' AND
        (LFD.STATUS!='DELETED' or LFD.STATUS = null)
    </mapped-statement>
        
    <mapped-statement name="getSumProductAOD" result-class="java.util.HashMap" >
        SELECT SUM(NVL( PRODUCT,0))AS PRODUCT FROM ADVANCES_DAILY_PRODUCT
        WHERE (PRODUCT_DATE BETWEEN #LAST_INTCALC_DTDEBIT# AND 
        #CURR_DATE# AND ACT_NUM=#ACT_NUM#)
    </mapped-statement>
        
    <dynamic-mapped-statement name="getPaidPrincipleAAD" result-class="java.util.HashMap" >
        select sum(NVL(PRINCIPLE,0)) AS PRINCIPLE, sum(NVL(INTEREST,0)) AS INTEREST, sum(NVL(PENAL,0)) AS PENAL from AGRI_ADV_TRANS_DETAILS where ACT_NUM=#ACT_NUM# and (TRN_CODE='C*' OR TRN_CODE='OLG')
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="FROM_DT">
                    TRANS_DT BETWEEN #FROM_DT# AND #TO_DATE#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
         
    <mapped-statement name="updateAgriLoanActClosingDetail"     result-class="java.util.HashMap">
        UPDATE AGRI_LOANS_FACILITY_DETAILS SET STATUS_DT=#actStatusDt:TIMESTAMP#,STATUS_BY=#closedBy:VARCHAR#,ACCT_STATUS=#actStatusId:VARCHAR#,ACCT_CLOSE_DT=SYS_DATE()
        WHERE ACCT_NUM= #actNum:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getAgriLoanAccountClosingHeads"     result-class="java.util.HashMap">
        SELECT LPA.AC_DEBIT_INT,LPA.PENAL_INT,LPI.AS_CUSTOMER_COMES,LPA.PROD_ID, LP.ACCT_HEAD,LPA.AC_CLOSING_CHRG AS ACCLOSE_CHRG ,MISC_SERV_CHRG AS MISSER_CHRG,LPA.INT_PAYABLE_ACHD FROM AGRILOANS_PROD_ACHD LPA,
        AGRILOANS_PRODUCT LP,AGRI_LOANS_PROD_INTREC LPI WHERE 
        LPA.PROD_ID = LP.PROD_ID AND LPI.PROD_ID=LP.PROD_ID AND LPA.PROD_ID = (SELECT LFA.PROD_ID FROM AGRI_LOANS_FACILITY_DETAILS LFA WHERE ACCT_NUM = #value#)
    </mapped-statement>
        
    <mapped-statement name="getAgriLoanAccountHeads"     result-class="java.util.HashMap">
        SELECT LPA.AC_DEBIT_INT,LPA.PENAL_INT,LPI.AS_CUSTOMER_COMES,LPA.PROD_ID, LP.ACCT_HEAD,LPA.AC_CLOSING_CHRG AS ACCLOSE_CHRG ,MISC_SERV_CHRG AS MISSER_CHRG,LPA.INT_PAYABLE_ACHD FROM AGRILOANS_PROD_ACHD LPA,
        AGRILOANS_PRODUCT LP,AGRI_LOANS_PROD_INTREC LPI WHERE 
        LPA.PROD_ID = LP.PROD_ID AND LPI.PROD_ID=LP.PROD_ID AND LPA.PROD_ID = #PRODUCT_ID#
    </mapped-statement>
        
    <dynamic-mapped-statement name="getSelectAgriLoanAccountCloseAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT ACT_CLOSING.ACT_NUM AS ACCOUNTNO,  
        CUSTOMER.CUST_ID, CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) CUSTOMER_NAME, 
        CREATE_DT, ACT_CLOSING.STATUS AS CLOSE_STATUS FROM ACT_CLOSING, AGRI_LOANS_FACILITY_DETAILS, CUSTOMER ,AGRI_LOANS_BORROWER
        WHERE CUSTOMER.CUST_ID  =AGRI_LOANS_BORROWER.CUST_ID  AND AGRI_LOANS_BORROWER.BORROW_NO=AGRI_LOANS_FACILITY_DETAILS .BORROW_NO AND AGRI_LOANS_FACILITY_DETAILS.ACCT_NUM = ACT_CLOSING.ACT_NUM 
        AND AGRI_LOANS_FACILITY_DETAILS.BRANCH_ID = #BRANCH_CODE# AND ACT_CLOSING.STATUS_BY != #USER_ID#     
        AND  cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)    
        FROM USER_MASTER UM, ROLE_MASTER RM    WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_CLOSING.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_CLOSING.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_CLOSING.AUTHORIZE_STATUS IS NULL OR 
                ACT_CLOSING.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                AND (ACT_CLOSING.STATUS IS NULL OR ACT_CLOSING.STATUS!='DELETED') 
            </isNotEqual>
        </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="insertAuthorizeAgriAdvTransDetails"  inline-parameters="true" > 
        INSERT INTO AGRIADV_TRANS_DETAILS (BRANCH_ID,TRANS_DT,ACT_NUM,TRANS_TYPE,TRN_CODE,PARTICULARS,INTEREST
        ,IBAL ,PRINCIPLE,PBAL,PENAL,PIBAL,TRANS_ID,AUTHORIZE_BY ,EXPENSE,EBAL,AUTHORIZE_DT,AUTHORIZE_STATUS,TRANS_SLNO,NPA_INTEREST,NPA_INT_BAL,
        NPA_PENAL,NPA_PENAL_BAL,EXCESS_AMT,POSTAGE_CHARGE,POSTAGE_CHARGE_BAL,ARBITARY_CHARGE,ARBITARY_CHARGE_BAL,LEGAL_CHARGE,LEGAL_CHARGE_BAL,
        INSURANCE_CHARGE,INSURANCE_CHARGE_BAL,EXE_DEGREE,EXE_DEGREE_BAL,MISC_CHARGES,MISC_CHARGES_BAL) VALUES
        (#BRANCH_CODE:VARCHAR#,#TODAY_DT:TIMESTAMP#,#ACCOUNTNO:VARCHAR#,
        #TRANSTYPE:VARCHAR#,#TRN_CODE:VARCHAR#,#PARTICULARS:VARCHAR#,#INTEREST:NUMERIC#,#IBAL:NUMERIC#,
        #PRINCIPAL:NUMERIC#,#PBAL:NUMERIC#,#PENAL:VARCHAR#,#PIBAL:VARCHAR#,#TRANS_ID:VARCHAR#,#AUTHORIZE_BY:VARCHAR#,#EXPENSE:NUMERIC#,
        #EBAL:NUMERIC#,(SELECT SYS_DATE() FROM DUAL),#AUTHORIZE_STATUS:VARCHAR#,#TRANS_SLNO:NUMERIC#,#NPA_INTEREST:NUMERIC#,#NPA_INT_BAL:NUMERIC#,
        #NPA_PENAL:NUMERIC#,#NPA_PENAL_BAL:NUMERIC#,#EXCESS_AMT:NUMERIC#,#POSTAGE_CHARGE:NUMERIC#,#POSTAGE_CHARGE_BAL:NUMERIC#,
        #ARBITARY_CHARGE:NUMRIC#,#ARBITARY_CHARGE_BAL:NUMERIC#,
        #LEGAL_CHARGE:NUMERIC#,#LEGAL_CHARGE_BAL:NUMERIC#,#INSURANCE_CHARGE:NUMERIC#,#INSURANCE_CHARGE_BAL:NUMERIC#,#EXE_DEGREE:NUMERIC#,
        #EXE_DEGREE_BAL:NUMERIC#,#MISC_CHARGES:NUMERIC#,#MISC_CHARGES_BAL:NUMERIC#)
    </mapped-statement>
    <mapped-statement name="updateAgriAdvTransDetails"  result-class="java.util.HashMap" > 
        UPDATE  AGRIADV_TRANS_DETAILS SET AUTHORIZE_STATUS=#AUTHORIZE_STATUS:VARCHAR#,AUTHORIZE_DT=#TODAY_DT:TIMESTAMP#,
        AUTHORIZE_BY=#AUTHORIZE_BY:VARCHAR#
        WHERE TRANS_ID=#TRANS_ID#
    </mapped-statement>
        

</sql-map>