<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="InvestmentsMasterTOMap">

	<!-- Use ShareProductLoanTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertInvestmentMasterTO" inline-parameters="true">
        INSERT INTO  INVESTMENT_MASTER
        (INVESTMENT_TYPE,INVESTMENT_PROD_ID,INVESTMENT_NAME, INVESTMENT_ISSUE_DT,INVESTMENT_PERIOD_YY,INVESTMENT_PERIOD_MM,INVESTMENT_PERIOD_DD,
        INVESTMENT_MATURITY_DT,INVESTMENT_FACE_VALUE,INVESTMENT_INTPAY_FREQ,INVESTMENT_COUPON_RATE,INVESTMENT_SLR ,INVESTMENT_CALL_OPTION,INVESTMENT_PUT_OPTION ,
        INVESTMENT_SETUP_OPTION,STATUS ,STATUS_BY,STATUS_DT,AUTHORIZE_STATUS, AUTHORIZE_BY, AUTHORIZE_DT,CLASSIFICATION,INITIATED_DATE  ,
        INVESTMENT_MATURITY_AMOUNT,INVESTMENT_SETUP_OPTION_NOYEAR,INVESTMENT_PUT_OPTION_NOYEARS,INVESTMENT_CALL_OPTION_NOYEARS
        ,INVESTMENT_INSTITUTION_CODE,INSTITUTION_BRANCHCODE ,SECURITY_TYPE,SECURITY_TYPE_CODE,REMARKS ,OTHER_NAME)
        VALUES(#cboInvestmentBehaves:VARCHAR#,#investmentID:VARCHAR#,#investmentName:VARCHAR#,#issueDt:DATE#,#years:NUMERIC#,#months:NUMERIC#,
        #days:NUMERIC#,#maturityDate:DATE#,#faceValue:NUMERIC#,#cboIntPayFreq:NUMERIC#,#couponRate:NUMERIC#,#sLR:VARCHAR#, #callOption:VARCHAR#,
        #putOption:VARCHAR#,#setUpOption:VARCHAR#,#status:VARCHAR#,#statusBy:VARCHAR#,#statusDt:DATE#,#authorizeStatus:VARCHAR#, #authorizeBy:VARCHAR#, 
        #authorizeDt:DATE#,#classification:VARCHAR#,#initiatedDate:DATE#,#maturityAmount:NUMERIC#,#setUpOptionNoofYears:NUMERIC#,#putOptionNoofYears:NUMERIC#,
        #callOptionNoofYears:NUMERIC# ,#txtBankCode:VARCHAR#,#txtBranchCode:VARCHAR#   ,#rdoSecurityType:VARCHAR# ,#cboSecurityTypeCode:VARCHAR# ,
        #txtRemarks:VARCHAR#,#txtOtherName:VARCHAR#
        )
    </mapped-statement>

	<!-- Use ShareProductLoanTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateInvestmentMasterTO" inline-parameters="true">
        UPDATE  INVESTMENT_MASTER SET
        INVESTMENT_TYPE=#cboInvestmentBehaves:VARCHAR#,
        INVESTMENT_PROD_ID =#investmentID:VARCHAR#,
        INVESTMENT_NAME = #investmentName:VARCHAR#,
        INVESTMENT_ISSUE_DT =#issueDt:DATE#,
        INVESTMENT_PERIOD_YY =#years:NUMERIC#,
        INVESTMENT_PERIOD_MM =#months:NUMERIC#,
        INVESTMENT_PERIOD_DD =#days:NUMERIC#,
        INVESTMENT_MATURITY_DT =#maturityDate:DATE#,
        INVESTMENT_FACE_VALUE =#faceValue:NUMERIC#,
        INVESTMENT_INTPAY_FREQ =#cboIntPayFreq:NUMERIC#,
        INVESTMENT_COUPON_RATE=#couponRate:NUMERIC#,
        INVESTMENT_SLR =#sLR:VARCHAR#, 
        INVESTMENT_CALL_OPTION =#callOption:VARCHAR#,
        INVESTMENT_PUT_OPTION =#putOption:VARCHAR#,
        INVESTMENT_SETUP_OPTION =#setUpOption:VARCHAR#,
        LAST_INT_COLLECTED_DATE=#lastIntPaidDate:DATE#,
        AVILABLE_NO_OF_UNITS=#availableNoOfUnits:NUMERIC#,
        TOTAL_PREMIUM_PAID=#totalPremiumPaid:NUMERIC#,
        TOTAL_PREMIUM_COLLECTED=#totalPremiumCollected:NUMERIC#,
        TOTAL_INTEREST_COLLECTED=#totalInterestCollected:NUMERIC#,
        TOTAL_INTEREST_PAID=#totalInterestPaid:NUMERIC#,
        STATUS =#status:VARCHAR#,
        STATUS_BY =#statusBy:VARCHAR#,
        STATUS_DT =#statusDt:DATE#,
        AUTHORIZE_STATUS =#authorizeStatus:VARCHAR#, 
        AUTHORIZE_BY =#authorizeBy:VARCHAR#, 
        AUTHORIZE_DT =#authorizeDt:DATE#,
        CLASSIFICATION=#classification:VARCHAR#,
        INITIATED_DATE=#initiatedDate:DATE#,
        INVESTMENT_OUTSTANDING_AMOUNT=#outstandingAmount:NUMERIC#,
        INVESTMENT_MATURITY_AMOUNT=#maturityAmount:NUMERIC#,
        INVESTMENT_SETUP_OPTION_NOYEAR=#setUpOptionNoofYears:NUMERIC#,
        INVESTMENT_CALL_OPTION_NOYEARS=#callOptionNoofYears:NUMERIC#,
        INVESTMENT_INSTITUTION_CODE=#txtBankCode:VARCHAR#,
        INSTITUTION_BRANCHCODE=#txtBranchCode:VARCHAR#,
        SECURITY_TYPE=#rdoSecurityType:VARCHAR# ,
        SECURITY_TYPE_CODE=#cboSecurityTypeCode:VARCHAR# ,
        OTHER_NAME=#txtOtherName:VARCHAR#,
        REMARKS=#txtRemarks:VARCHAR#,
        INVESTMENT_PUT_OPTION_NOYEARS=#putOptionNoofYears:NUMERIC#
                    
        WHERE  INVESTMENT_NAME = #investmentName:VARCHAR# AND status!='DELETED' AND (AUTHORIZE_STATUS!='REJECTED' OR AUTHORIZE_STATUS is null)
                   
                    
    </mapped-statement>
     	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to ShareProductLoanTO object (JavaBean) properties -->
    <result-map name="getInvestmentMasterTOResult" class="com.see.truetransact.transferobject.investments.InvestmentsMasterTO">
        <property name="cboInvestmentBehaves" column="INVESTMENT_TYPE"/>
        <property name="investmentID" column="INVESTMENT_PROD_ID"/>
        <property name="investmentName" column="INVESTMENT_NAME"/>
        <property name="issueDt" column="INVESTMENT_ISSUE_DT"/>
        <property name="years" column="INVESTMENT_PERIOD_YY"/>
        <property name="months" column="INVESTMENT_PERIOD_MM"/>
        <property name="days" column="INVESTMENT_PERIOD_DD"/>
        <property name="maturityDate" column="INVESTMENT_MATURITY_DT"/>
        <property name="faceValue" column="INVESTMENT_FACE_VALUE"/>
        <property name="cboIntPayFreq" column="INVESTMENT_INTPAY_FREQ"/>
        <property name="couponRate" column="INVESTMENT_COUPON_RATE"/>
        <property name="sLR" column="INVESTMENT_SLR"/>  
        <property name="callOption" column="INVESTMENT_CALL_OPTION"/>  
        <property name="putOption" column="INVESTMENT_PUT_OPTION"/>  
        <property name="setUpOption" column="INVESTMENT_SETUP_OPTION"/>   
        <property name="lastIntPaidDate" column="LAST_INT_COLLECTED_DATE"/>  
        <property name="availableNoOfUnits" column="AVILABLE_NO_OF_UNITS"/>  
        <property name="totalPremiumPaid" column="TOTAL_PREMIUM_PAID"/>  
        <property name="totalPremiumCollected" column="TOTAL_PREMIUM_COLLECTED"/>  
        <property name="totalInterestCollected" column="TOTAL_INTEREST_COLLECTED"/>  
        <property name="totalInterestPaid" column="TOTAL_INTEREST_PAID"/>                               
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="classification" column="CLASSIFICATION"/>
        <property name="initiatedDate" column="INITIATED_DATE"/>
        <property name="outstandingAmount" column="INVESTMENT_OUTSTANDING_AMOUNT"/>
        <property name="maturityAmount" column="INVESTMENT_MATURITY_AMOUNT"/>
        <property name="setUpOptionNoofYears" column="INVESTMENT_SETUP_OPTION_NOYEAR"/>
        <property name="callOptionNoofYears" column="INVESTMENT_CALL_OPTION_NOYEARS"/>
        <property name="putOptionNoofYears" column="INVESTMENT_PUT_OPTION_NOYEARS"/>
        <property name="txtBranchCode" column="INSTITUTION_BRANCHCODE"/>
        <property name="txtBankCode" column="INVESTMENT_INSTITUTION_CODE"/>
        <property name="rdoSecurityType" column="SECURITY_TYPE"/>
        <property name="cboSecurityTypeCode" column="SECURITY_TYPE_CODE"/>
        <property name="txtRemarks" column="REMARKS"/>
        <property name="txtOtherName" column="OTHER_NAME"/>
        <property name="preCloserRate" column="PRECLOSER_RATE"/>
        <property name="closerType" column="CLOSER_TYPE"/>
        <property name="amortizationAmt" column="AMORTIZATION_AMOUNT"/>
        <property name="closerDate" column="INVESTMENT_CLOSER_DATE"/>    
        <property name="investmentStatus" column="INVESTMENT_STATUS"/>          
                
    </result-map>
    <mapped-statement name="deleteInvestmentMasterTO" inline-parameters="true">
        UPDATE INVESTMENT_MASTER SET 
        STATUS = #status:VARCHAR#, 
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE INVESTMENT_NAME = #investmentName:VARCHAR#  AND STATUS NOT IN ('DELETED')
    </mapped-statement>
    <dynamic-mapped-statement name="getInvestmentMasterAuthorizeList" result-class="java.util.LinkedHashMap">
        SELECT INVESTMENT_TYPE ,INVESTMENT_PROD_ID, INVESTMENT_NAME,STATUS_BY FROM INVESTMENT_MASTER SCD
        WHERE  (STATUS != 'DELETED' OR STATUS IS NULL)
        AND STATUS_BY != #USER_ID:VARCHAR# 
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = SCD.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AUTHORIZE_STATUS IS NULL OR 
                AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        ORDER BY INVESTMENT_PROD_ID
    </dynamic-mapped-statement>
    <mapped-statement name="authorizeInvestmentMaster" result-class="java.util.HashMap">
        UPDATE INVESTMENT_MASTER  SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE INVESTMENT_NAME = #INVESTMENT_NAME:VARCHAR#   AND (STATUS != 'DELETED' OR (STATUS IN('CREATED', 'MODIFIED')))
    </mapped-statement>
        <!--<mapped-statement name="getSelectInvestmentMaster" result-class="java.util.LinkedHashMap" >
		      
                SELECT  INVESTMENT_TYPE,INVESTMENT_PROD_ID,INVESTMENT_NAME,STATUS from INVESTMENT_MASTER
		WHERE  STATUS NOT IN ('DELETED')  AND (AUTHORIZE_STATUS!='REJECTED' OR AUTHORIZE_STATUS IS  NULL)
	</mapped-statement>-->
        
    <mapped-statement name="getSelectInvestmentMasterTO" result-map="getInvestmentMasterTOResult" >
        SELECT * FROM INVESTMENT_MASTER
        WHERE  INVESTMENT_NAME=#value:VARCHAR#
    </mapped-statement>       
                 
    <dynamic-mapped-statement name="getSelectInvestmentMaster" result-class="java.util.LinkedHashMap" >
        SELECT  INVESTMENT_TYPE,INVESTMENT_PROD_ID,INVESTMENT_NAME,STATUS,INVESTMENT_STATUS from INVESTMENT_MASTER
        WHERE  STATUS NOT IN ('DELETED')  
             
        <dynamic>    
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "INVESTMENT_TYPE" >
                    INVESTMENT_TYPE = #INVESTMENT_TYPE:VARCHAR#
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
            
        <dynamic>    
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "INVESTMENT_STATUS" >
                    (INVESTMENT_STATUS!='CLOSED' OR  INVESTMENT_STATUS IS NULL)  
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        <dynamic>    
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "INVESTMENT_PROD_ID" >
                    INVESTMENT_PROD_ID=#INVESTMENT_PROD_ID:VARCHAR#
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        <dynamic>    
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "AUTHORIZE_STATUS" >
                    (AUTHORIZED_STATUS!='REJECTED' OR AUTHORIZED_STATUS IS NOT NULL)
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        <dynamic>    
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "TRANSACTIONMADE" >
                    NVL(INVESTMENT_OUTSTANDING_AMOUNT,0) &gt; 0
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
	
        <dynamic>    
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "NONTRANSACTIONMADE" >
                    NVL(INVESTMENT_OUTSTANDING_AMOUNT,0) = 0
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        <dynamic>    
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "CLASSIFICATION" >
                    CLASSIFICATION = 'HFM' AND 
                    INVESTMENT_NAME NOT IN
                    (SELECT INVESTMENT_NAME from AMORTIZATION_DETAILS ,PARAMETERS  where   
                    UPTO_DATE= ADD_MONTHS(LAST_FINANCIAL_YEAR_END,12))  
                    AND NVL(TOTAL_PREMIUM_PAID,0)-NVL(TOTAL_PREMIUM_COLLECTED,0) >0                          
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
        
        
    <mapped-statement name="insertInvestmentsOperativeTO" inline-parameters="true">
        INSERT INTO INVESTMENT_OPERATIVE
        (INVESTMENT_ID, INVESTMENT_TYPE, INVESTMENT_PROD_ID, INVESTMENT_PROD_DESC, AGENCY_NAME, INVESTMENT_REF_NO, 
        INVESTMENT_ISSUE_DT, OPERATOR_DETAILS, CHECK_ALLOWED, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (
        #investmentId:VARCHAR#, #investmentType:VARCHAR#, #investmentProdId:VARCHAR#, #investmentProdDesc:VARCHAR#, 
        #agencyName:VARCHAR#, #investmentRefNo:VARCHAR#, #investmentIssueDt:DATE#, #operatorDetails:VARCHAR#, #checkAllowed:VARCHAR#, 
        #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#)
    </mapped-statement>
        
    <mapped-statement name="insertInvestmentsMasterTO" inline-parameters="true">
        INSERT INTO INVESTMENT_MASTER
        (INVESTMENT_ID, INVESTMENT_TYPE, INVESTMENT_PROD_ID, INVESTMENT_PROD_DESC, INVESTMENT_REF_NO, 
        INVESTMENT_ISSUE_DT, STATUS, STATUS_BY, STATUS_DT,ACCT_STATUS,BRANCH_CODE
        ) VALUES (
        #investmentId:VARCHAR#, #investmentType:VARCHAR#, #investmentProdId:VARCHAR#, #investmentProdDesc:VARCHAR#, 
        #investmentRefNo:VARCHAR#, #investmentIssueDt:DATE#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#,'NEW',#txtBranchCode:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="insertInvestmentsDepositTO" inline-parameters="true">
        INSERT INTO INVESTMENT_DEPOSIT
        (INVESTMENT_ID, INVESTMENT_TYPE, INVESTMENT_PROD_ID, INVESTMENT_PROD_DESC, AGENCY_NAME, INVESTMENT_REF_NO, 
        INVESTMENT_ISSUE_DT, INVESTMENT_EFFECTIVE_DT, PRINCIPAL_AMOUNT, INVESTMENT_PERIOD_YY, INVESTMENT_PERIOD_MM, 
        INVESTMENT_PERIOD_DD, RATE_OF_INTEREST, MATURITY_DT, MATURITY_AMOUNT, INTPAY_FREQ, INTEREST_RECEIVABLE, INTEREST_RECEIVED, 
        INT_REC_TILL_DT, STATUS, STATUS_BY, STATUS_DT,INT_WITH_PRINCIPAL,RENEWAL,PERIODIC_INTEREST,ACCT_STATUS,RENEWAL_DT
        ) VALUES (
        #investmentId:VARCHAR#, #investmentType:VARCHAR#, #investmentProdId:VARCHAR#, #investmentProdDesc:VARCHAR#, 
        #agencyName:VARCHAR#, #investmentRefNo:VARCHAR#, #investmentIssueDt:DATE#, #investmentEffectiveDt:DATE#, 
        #principalAmount:NUMERIC#, #investmentPeriodYy:NUMERIC#, #investmentPeriodMm:NUMERIC#, #investmentPeriodDd:NUMERIC#, 
        #rateOfInterest:NUMERIC#, #maturityDt:DATE#, #maturityAmount:NUMERIC#, #intpayFreq:NUMERIC#, #interestReceivable:NUMERIC#, 
        #interestReceived:NUMERIC#, #intRecTillDt:DATE#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#, #withPrincipal:VARCHAR#,
        #renewal:VARCHAR#, #periodicIntrest:NUMERIC#,'NEW',#renewalDt:DATE#)               
    </mapped-statement>
        
    <mapped-statement name="insertInvestmentsRenewalDepositTO" inline-parameters="true">
        INSERT INTO INVESTMENT_DEPOSIT_RENEWAL
        (INVESTMENT_ID, INVESTMENT_TYPE, INVESTMENT_PROD_ID, INVESTMENT_PROD_DESC, AGENCY_NAME, INVESTMENT_REF_NO, 
        INVESTMENT_ISSUE_DT, INVESTMENT_EFFECTIVE_DT, PRINCIPAL_AMOUNT, INVESTMENT_PERIOD_YY, INVESTMENT_PERIOD_MM, 
        INVESTMENT_PERIOD_DD, RATE_OF_INTEREST, MATURITY_DT, MATURITY_AMOUNT, INTPAY_FREQ, INTEREST_RECEIVABLE, INTEREST_RECEIVED, 
        INT_REC_TILL_DT, STATUS, STATUS_BY, STATUS_DT,INT_WITH_PRINCIPAL,PERIODIC_INTEREST,RENEWAL_DT
        ) VALUES (
        #investmentId:VARCHAR#, #investmentType:VARCHAR#, #investmentProdId:VARCHAR#, #investmentProdDesc:VARCHAR#, 
        #agencyName:VARCHAR#, #investmentRefNo:VARCHAR#, #investmentIssueDt:DATE#, #investmentEffectiveDt:DATE#, 
        #principalAmount:NUMERIC#, #investmentPeriodYy:NUMERIC#, #investmentPeriodMm:NUMERIC#, #investmentPeriodDd:NUMERIC#, 
        #rateOfInterest:NUMERIC#, #maturityDt:DATE#, #maturityAmount:NUMERIC#, #intpayFreq:NUMERIC#, #interestReceivable:NUMERIC#, 
        #interestReceived:NUMERIC#, #intRecTillDt:DATE#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#, #withPrincipal:VARCHAR#, #periodicIntrest:NUMERIC#,
        #renewalDt:DATE#)
    </mapped-statement>
        
    <mapped-statement name="insertInvestmentsShareTO" inline-parameters="true">
        INSERT INTO INVESTMENT_SHARE
        (INVESTMENT_ID, INVESTMENT_TYPE, INVESTMENT_PROD_ID, INVESTMENT_PROD_DESC, AGENCY_NAME, SHARE_TYPE, MEMBER_NO, 
        INVESTMENT_ISSUE_DT, NO_OF_SHARES, SHARE_VALUE,  FACE_VALUE, FEES_PAID, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (
        #investmentId:VARCHAR#, #investmentType:VARCHAR#, #investmentProdId:VARCHAR#, #investmentProdDesc:VARCHAR#, 
        #agencyName:VARCHAR#, #shareType:VARCHAR#, #investmentRefNo:VARCHAR#, #investmentIssueDt:DATE#, #noOfShares:NUMERIC#, #shareValue:NUMERIC#, 
        #faceValue:NUMERIC#, #feesPaid:NUMERIC#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#)
    </mapped-statement>
        
    <mapped-statement name="insertInvestmentsRFTO" inline-parameters="true">
        INSERT INTO INVESTMENT_RESERVE_FUND
        (INVESTMENT_ID, INVESTMENT_TYPE, INVESTMENT_PROD_ID, INVESTMENT_PROD_DESC, AGENCY_NAME, INVESTMENT_REF_NO, 
        INVESTMENT_ISSUE_DT, AMOUNT, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (
        #investmentId:VARCHAR#, #investmentType:VARCHAR#, #investmentProdId:VARCHAR#, #investmentProdDesc:VARCHAR#, 
        #agencyName:VARCHAR#, #investmentRefNo:VARCHAR#, #investmentIssueDt:DATE#, #amount:NUMERIC#, #status:VARCHAR#, 
        #statusBy:VARCHAR#, #statusDt:DATE#)
    </mapped-statement>
        
    <mapped-statement name="getSelectInvestmentEditDeleteDetails" result-class="java.util.LinkedHashMap">
         <!--SELECT INVESTMENT_ID,INVESTMENT_PROD_ID AS PROD_ID,INVESTMENT_TYPE,INVESTMENT_ISSUE_DT AS ISSUE_DT,AUTHORIZED_STATUS FROM INVESTMENT_MASTER
                WHERE STATUS!='DELETED' AND AUTHORIZED_STATUS IS NULL ORDER BY INVESTMENT_ID -->
        SELECT INVESTMENT_ID,INVESTMENT_REF_NO,INVESTMENT_PROD_ID AS PROD_ID,INVESTMENT_TYPE,INVESTMENT_ISSUE_DT AS ISSUE_DT,
        AUTHORIZED_STATUS FROM INVESTMENT_MASTER WHERE STATUS!='DELETED' AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS='AUTHORIZED') 
        AND NVL(AVAILABLE_BALANCE,0)&lt;1 ORDER BY INVESTMENT_ID
    </mapped-statement>
        
    <mapped-statement name="getSelectInvestmentAuthDetails" result-class="java.util.LinkedHashMap">
        SELECT CASE
        WHEN ATR.TRANS_MODE = 'TRANSFER'
        THEN ATR.BATCH_ID
        ELSE ATR.TRANS_ID
        END AS TRANS_ID,ATR.trans_dt,INVESTMENT_ID, INVESTMENT_REF_NO,
        INVESTMENT_PROD_ID AS PROD_ID, INVESTMENT_TYPE,
        INVESTMENT_ISSUE_DT AS ISSUE_DT, SINGLE_TRANS_ID,
        CASE
        WHEN IM.INVESTMENT_ISSUE_DT = ATR.TRANS_DT
        THEN 'NEW'
        ELSE 'RENEWAL'
        END AS INVESTMENT_MODE
        FROM INVESTMENT_MASTER IM JOIN ALL_TRANS ATR
        ON (    ATR.LINK_BATCH_ID = IM.INVESTMENT_ID
        AND (ATR.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# OR  ATR.INITIATED_BRANCH = #BRANCH_ID:VARCHAR#)
        )
        WHERE ATR.STATUS != 'DELETED'
        AND ATR.AUTHORIZE_STATUS IS NULL
        AND (   IM.STATUS != 'DELETED' AND IM.AUTHORIZED_STATUS IS NULL
        OR IM.AUTHORIZED_DT IS NOT NULL
        )
        AND ATR.TRANS_DT = #TRANS_DT:DATE#
        AND ATR.TRANS_TYPE = 'DEBIT'
        AND cast(#HIERARCHY_ID# as numeric) &gt;=
        (SELECT DISTINCT DECODE (NVL (SAME_HIERARCHY_ALLOWED, 'N'),
        'Y', HIERARCHY_ID,
        HIERARCHY_ID + 1
        )
        FROM USER_MASTER UM, ROLE_MASTER RM
        WHERE RM.ROLE_ID = UM.USER_ROLE
        AND RM.GROUP_ID = UM.USER_GROUP
        AND UM.USER_ID = IM.STATUS_BY)
        AND ATR.STATUS_BY !=  #USER_ID:VARCHAR#  
        union
        SELECT CASE
        WHEN ATR.TRANS_MODE = 'TRANSFER'
        THEN ATR.BATCH_ID
        ELSE ATR.TRANS_ID
        END AS TRANS_ID,ATR.trans_dt,INVESTMENT_ID, INVESTMENT_REF_NO,
        INVESTMENT_PROD_ID AS PROD_ID, INVESTMENT_TYPE,
        INVESTMENT_ISSUE_DT AS ISSUE_DT ,SINGLE_TRANS_ID,
        CASE
        WHEN IM.INVESTMENT_ISSUE_DT = ATR.TRANS_DT
        THEN 'NEW'
        ELSE 'RENEWAL'
        END AS INVESTMENT_MODE
        FROM INVESTMENT_MASTER IM JOIN ALL_TRANS ATR
        ON (    ATR.LINK_BATCH_ID = IM.INVESTMENT_ID
        AND (ATR.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# OR  ATR.INITIATED_BRANCH = #BRANCH_ID:VARCHAR#)
        )
        WHERE ATR.STATUS != 'DELETED'
        AND ATR.AUTHORIZE_STATUS IS NULL
        AND (   IM.STATUS != 'DELETED' AND IM.AUTHORIZED_STATUS IS NULL
        OR IM.AUTHORIZED_DT IS NOT NULL
        )
        AND ATR.TRANS_TYPE = 'DEBIT'
        AND cast(#HIERARCHY_ID# as numeric) &gt;=
        (SELECT DISTINCT DECODE (NVL (SAME_HIERARCHY_ALLOWED, 'N'),
        'Y', HIERARCHY_ID,
        HIERARCHY_ID + 1
        )
        FROM USER_MASTER UM, ROLE_MASTER RM
        WHERE RM.ROLE_ID = UM.USER_ROLE
        AND RM.GROUP_ID = UM.USER_GROUP
        AND UM.USER_ID = IM.STATUS_BY)
        AND ATR.STATUS_BY !=  #USER_ID:VARCHAR#  
        AND ATR.SCREEN_NAME ='INV_BACK_DATED_TRANSACTION'
        UNION
        SELECT NULL AS TRANS_ID,
        NULL AS trans_dt,
        INVESTMENT_ID,
        INVESTMENT_REF_NO,
        INVESTMENT_PROD_ID AS PROD_ID,
        INVESTMENT_TYPE,
        INVESTMENT_ISSUE_DT AS ISSUE_DT,null as SINGLE_TRANS_ID ,
        'NEW' AS INVESTMENT_MODE
        FROM INVESTMENT_MASTER IM
        WHERE    
        NOT EXISTS
 (SELECT  I.INVESTMENT_ID FROM INVESTMENT_TRANS_DETAILS I WHERE I.AUTHORIZE_STATUS IS NULL AND I.INVESTMENT_ID=IM.INVESTMENT_ID)
     AND   (   IM.STATUS != 'DELETED' AND IM.AUTHORIZED_STATUS IS NULL)
        AND cast(#HIERARCHY_ID# as numeric) &gt;=
        (SELECT DISTINCT
        DECODE (NVL (SAME_HIERARCHY_ALLOWED, 'N'),
        'Y', HIERARCHY_ID,
        HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM
        WHERE     RM.ROLE_ID = UM.USER_ROLE
        AND RM.GROUP_ID = UM.USER_GROUP
        AND UM.USER_ID = IM.STATUS_BY)
        AND IM.STATUS_BY != #USER_ID:VARCHAR#  
        AND IM.BRANCH_CODE=#BRANCH_CODE:VARCHAR#
        UNION
        SELECT NULL AS TRANS_ID,
       NULL AS trans_dt,
       im.INVESTMENT_ID,
       im.INVESTMENT_REF_NO,
       im.INVESTMENT_PROD_ID AS PROD_ID,
       im.INVESTMENT_TYPE,
       im.INVESTMENT_ISSUE_DT AS ISSUE_DT,
       NULL AS SINGLE_TRANS_ID,
       'RENEWAL' AS INVESTMENT_MODE
       FROM INVESTMENT_MASTER IM, INVESTMENT_CONF_DETAILS ic
       WHERE EXISTS
                  (SELECT I.INVESTMENT_ID
                     FROM INVESTMENT_TRANS_DETAILS I
                    WHERE     I.AUTHORIZE_STATUS IS NULL
                          AND I.INVESTMENT_ID = IM.INVESTMENT_ID
                          AND I.BATCH_ID IS NULL
                          AND I.TRAN_CODE = 'Deposit')
       AND (IM.STATUS != 'DELETED' AND IM.AUTHORIZED_STATUS IS NULL)
       and IC.INVESTMENT_PROD_ID = IM.INVESTMENT_PROD_ID
       AND IC.RENEW_WITHOUT_TRANSACTION = 'Y'
       AND  cast(#HIERARCHY_ID# as numeric) &gt;=
              (SELECT DISTINCT
                      DECODE (NVL (SAME_HIERARCHY_ALLOWED, 'N'),
                              'Y', HIERARCHY_ID,
                              HIERARCHY_ID + 1)
                 FROM USER_MASTER UM, ROLE_MASTER RM
                WHERE     RM.ROLE_ID = UM.USER_ROLE
                      AND RM.GROUP_ID = UM.USER_GROUP
                      AND UM.USER_ID = IM.STATUS_BY)
       AND IM.STATUS_BY != #USER_ID:VARCHAR# 
        order by  trans_id asc
    </mapped-statement>
        
    <mapped-statement name="getSelectInvestmentCashierAuthDetails" result-class="java.util.LinkedHashMap">
            SELECT CASE WHEN AT.trans_mode = 'TRANSFER' THEN AT.BATCH_ID  ELSE AT.TRANS_ID    END AS TRANS_ID,
            im.investment_id, im.investment_ref_no,  im.investment_prod_id AS prod_id, im.investment_type,
            im.investment_issue_dt AS issue_dt, CASE WHEN im.investment_issue_dt = AT.trans_dt  THEN 'NEW'
            ELSE 'RENEWAL'  END AS investment_mode ,AT.trans_dt,AT.AMOUNT   FROM investment_master im, all_trans AT
            WHERE AT.link_batch_id = im.investment_id            AND AT.trans_dt = #TRANS_DT:DATE#
            AND (at.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# OR  at.INITIATED_BRANCH = #BRANCH_ID:VARCHAR# )     AND CASE
            WHEN AT.trans_mode = 'TRANSFER'             THEN 'AUTHORIZED'
            ELSE AT.payment_status            END IS NOT NULL
            AND (   (im.status != 'DELETED' AND im.authorized_status IS NULL)
            OR (    im.status = 'DELETED'
            AND im.authorized_status IS NULL
            AND im.authorized_dt IS NOT NULL           )            )
            AND cast(#HIERARCHY_ID# as numeric) &gt;=            (SELECT DISTINCT DECODE (NVL (same_hierarchy_allowed, 'N'),
                                   'Y', hierarchy_id,
                                   hierarchy_id + 1
                                  )
                      FROM user_master um, role_master rm
                     WHERE rm.role_id = um.user_role
                       AND rm.GROUP_ID = um.user_group
                       AND um.user_id = im.status_by)
            AND im.status_by != #USER_ID:VARCHAR#     
            AND AT.AUTHORIZE_STATUS IS NULL
            UNION
            SELECT CASE          WHEN AT.trans_mode = 'TRANSFER'             THEN AT.BATCH_ID          ELSE AT.TRANS_ID
            END AS TRANS_ID,im.investment_id, im.investment_ref_no,        im.investment_prod_id AS prod_id, im.investment_type,
        im.investment_issue_dt AS issue_dt,        CASE          WHEN im.investment_issue_dt = AT.trans_dt             THEN 'NEW'
          ELSE 'RENEWAL'       END AS investment_mode  ,AT.trans_dt,AT.AMOUNT      FROM investment_master im, all_trans AT    WHERE AT.link_batch_id = im.investment_id
        AND AT.trans_dt = #TRANS_DT:DATE#    AND AT.trans_type = 'DEBIT'    AND (at.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# OR  at.INITIATED_BRANCH = #BRANCH_ID:VARCHAR# )
        AND CASE          WHEN AT.trans_mode = 'TRANSFER'
             THEN NULL          ELSE AT.payment_status       END IS NULL    AND (   (im.status != 'DELETED' AND im.authorized_status IS NULL)
            OR (    im.status = 'DELETED'            AND im.authorized_status IS NULL
            AND im.authorized_dt IS NOT NULL           ))    AND 
            cast(#HIERARCHY_ID# as numeric) &gt;=          (SELECT DISTINCT DECODE (NVL (same_hierarchy_allowed, 'N'),   'Y', hierarchy_id,
                                   hierarchy_id + 1                                  )
                      FROM user_master um, role_master rm                     WHERE rm.role_id = um.user_role
                       AND rm.GROUP_ID = um.user_group   AND um.user_id = im.status_by)  AND im.status_by != #USER_ID:VARCHAR#  
                       AND AT.AUTHORIZE_STATUS IS NULL
                       UNION
            SELECT CASE          WHEN AT.trans_mode = 'TRANSFER'             THEN AT.BATCH_ID          ELSE AT.TRANS_ID
            END AS TRANS_ID,im.investment_id, im.investment_ref_no,        im.investment_prod_id AS prod_id, im.investment_type,
        im.investment_issue_dt AS issue_dt,        CASE          WHEN im.investment_issue_dt = AT.trans_dt             THEN 'NEW'
          ELSE 'RENEWAL'       END AS investment_mode  ,AT.trans_dt,AT.AMOUNT      FROM investment_master im, all_trans AT    WHERE AT.link_batch_id = im.investment_id
         AND AT.trans_type = 'DEBIT'    AND (at.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# OR  at.INITIATED_BRANCH = #BRANCH_ID:VARCHAR# )
        AND CASE          WHEN AT.trans_mode = 'TRANSFER'
             THEN NULL          ELSE AT.payment_status       END IS NULL    AND (   (im.status != 'DELETED' AND im.authorized_status IS NULL)
            OR (    im.status = 'DELETED'            AND im.authorized_status IS NULL
            AND im.authorized_dt IS NOT NULL           ))    AND 
            cast(#HIERARCHY_ID# as numeric) &gt;=          (SELECT DISTINCT DECODE (NVL (same_hierarchy_allowed, 'N'),   'Y', hierarchy_id,
                                   hierarchy_id + 1                                  )
                      FROM user_master um, role_master rm                     WHERE rm.role_id = um.user_role
                       AND rm.GROUP_ID = um.user_group   AND um.user_id = im.status_by)  AND im.status_by != #USER_ID:VARCHAR#  
                       AND AT.AUTHORIZE_STATUS IS NULL AND AT.SCREEN_NAME ='INV_BACK_DATED_TRANSACTION'
                        order by  trans_id asc
    </mapped-statement>
        
    <mapped-statement name="getSelectInvestmentEnqueryDetails" result-class="java.util.LinkedHashMap">
        SELECT   im.investment_id, imd.investment_ref_no, im.investment_prod_id AS prod_id,
        im.investment_type, im.investment_issue_dt AS issue_dt,IMD.MATURITY_DT, im.authorized_status
        FROM investment_master im 
        left join investment_deposit imd
        on IM.INVESTMENT_ID=IMD.INVESTMENT_ID  
        WHERE im.status != 'DELETED'
        AND im.authorized_status IS NOT NULL and im.authorized_status != 'REJECTED' 
        AND im.acct_status != 'CLOSED'
        OR im.acct_status IS NULL
        ORDER BY im.investment_id
    </mapped-statement>
        
    <dynamic-mapped-statement name="getClosedInvDepositDetails" result-class="java.util.LinkedHashMap">
        SELECT DISTINCT * FROM(
        (SELECT INVESTMENT_ID,INVESTMENT_REF_NO,INVESTMENT_PROD_ID AS PROD_ID,INVESTMENT_TYPE,INVESTMENT_ISSUE_DT AS ISSUE_DT,ACCT_STATUS
        FROM INVESTMENT_MASTER WHERE STATUS!='DELETED' AND AUTHORIZED_STATUS ='AUTHORIZED' AND ACCT_STATUS='CLOSED')
        UNION ALL
        (SELECT INVESTMENT_ID,INVESTMENT_REF_NO,INVESTMENT_PROD_ID AS PROD_ID,INVESTMENT_TYPE,INVESTMENT_ISSUE_DT AS ISSUE_DT,STATUS
        FROM INVESTMENT_DEPOSIT_RENEWAL WHERE STATUS ='CLOSED' AND AUTHORIZED_STATUS ='AUTHORIZED' )) 
          <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="INVESTMENT_ID">
                    UPPER(INVESTMENT_ID) LIKE UPPER('%$INVESTMENT_ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(INVESTMENT_PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="INVESTMENT_TYPE">
                    UPPER(INVESTMENT_TYPE) LIKE UPPER('%$INVESTMENT_TYPE$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="INVESTMENT_REF_NO">
                    UPPER(INVESTMENT_REF_NO) LIKE UPPER('%$INVESTMENT_REF_NO$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
            ORDER BY INVESTMENT_ID
   </dynamic-mapped-statement>
        
        <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to InvestmentsOperativeTO object (JavaBean) properties -->
    <result-map name="getInvestmentsOperativeTOResult" class="com.see.truetransact.transferobject.investments.InvestmentsOperativeTO">
        <property name="investmentId" column="INVESTMENT_ID"/>
        <property name="investmentType" column="INVESTMENT_TYPE"/>
        <property name="investmentProdId" column="INVESTMENT_PROD_ID"/>
        <property name="investmentProdDesc" column="INVESTMENT_PROD_DESC"/>
        <property name="agencyName" column="AGENCY_NAME"/>
        <property name="investmentRefNo" column="INVESTMENT_REF_NO"/>
        <property name="investmentIssueDt" column="INVESTMENT_ISSUE_DT"/>
        <property name="operatorDetails" column="OPERATOR_DETAILS"/>
        <property name="checkAllowed" column="CHECK_ALLOWED"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
    </result-map>
        
    <mapped-statement name="getSelectInvestmentsOperativeTO" result-map="getInvestmentsOperativeTOResult" >
        SELECT * FROM INVESTMENT_OPERATIVE WHERE INVESTMENT_ID=#INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <result-map name="getInvestmentsDepositTOResult" class="com.see.truetransact.transferobject.investments.InvestmentsDepositTO">
        <property name="investmentId" column="INVESTMENT_ID"/>
        <property name="investmentType" column="INVESTMENT_TYPE"/>
        <property name="investmentProdId" column="INVESTMENT_PROD_ID"/>
        <property name="investmentProdDesc" column="INVESTMENT_PROD_DESC"/>
        <property name="agencyName" column="AGENCY_NAME"/>
        <property name="investmentRefNo" column="INVESTMENT_REF_NO"/>
        <property name="investmentIssueDt" column="INVESTMENT_ISSUE_DT"/>
        <property name="investmentEffectiveDt" column="INVESTMENT_EFFECTIVE_DT"/>
        <property name="principalAmount" column="PRINCIPAL_AMOUNT"/>
        <property name="investmentPeriodYy" column="INVESTMENT_PERIOD_YY"/>
        <property name="investmentPeriodMm" column="INVESTMENT_PERIOD_MM"/>
        <property name="investmentPeriodDd" column="INVESTMENT_PERIOD_DD"/>
        <property name="rateOfInterest" column="RATE_OF_INTEREST"/>
        <property name="maturityDt" column="MATURITY_DT"/>
        <property name="maturityAmount" column="MATURITY_AMOUNT"/>
        <property name="intpayFreq" column="INTPAY_FREQ"/>
        <property name="withPrincipal" column="INT_WITH_PRINCIPAL"/>
        <property name="renewal" column="RENEWAL"/>
        <property name="withInterest" column="WITH_INTEREST"/>
        <property name="interestReceivable" column="INTEREST_RECEIVABLE"/>
        <property name="interestReceived" column="INTEREST_RECEIVED"/>
        <property name="periodicIntrest" column="PERIODIC_INTEREST"/>
        <property name="intRecTillDt" column="INT_REC_TILL_DT"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="renewalSameNo" column="RENEWAL_SAME_NO"/>
        <property name="renewalNewNo" column="RENEWAL_NEW_NO"/>
        <property name="renewalDiffProdNo" column="RENEWAL_DIFF_PROD_ID"/>
        <property name="renewalWithInterest" column="RENEWAL_WITH_INTEREST"/>
        <property name="renewalWithOutInterest" column="RENEWAL_WITHOUT_INTEREST"/>
        <property name="renewalPartialInterest" column="RENEWAL_PARTIAL_INTEREST"/>
        <property name="renewalPartialAmt" column="PARTIAL_INT_AMOUNT"/>
        <property name="renewalDt" column="RENEWAL_DT"/>
    </result-map>
        
    <mapped-statement name="getSelectInvestmentsDepositTO" result-map="getInvestmentsDepositTOResult" >
        SELECT * FROM INVESTMENT_DEPOSIT WHERE INVESTMENT_ID=#INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getSelectClosedInvestmentsDepositTO" result-map="getInvestmentsDepositTOResult" >
        SELECT * FROM INVESTMENT_DEPOSIT WHERE INVESTMENT_ID=#INVESTMENT_ID:VARCHAR# AND STATUS!='DELETED' AND AUTHORIZED_STATUS ='AUTHORIZED' AND ACCT_STATUS='CLOSED'
    </mapped-statement>
        
    <mapped-statement name="getSelectClosedRenewalInvestmentsTO" result-map="getRenewalInvestmentsDepositTOResult" >
        SELECT * FROM INVESTMENT_DEPOSIT_RENEWAL WHERE INVESTMENT_ID=#INVESTMENT_ID:VARCHAR# AND STATUS='CLOSED' AND AUTHORIZED_STATUS ='AUTHORIZED'
    </mapped-statement>
        
    <mapped-statement name="getSelectRenewalInvestmentsDepositTO" result-map="getRenewalInvestmentsDepositTOResult" >
        SELECT * FROM INVESTMENT_DEPOSIT_RENEWAL WHERE INVESTMENT_ID=#INVESTMENT_ID:VARCHAR# AND <!--(STATUS!='CLOSED' OR STATUS IS NULL)-->
        ((STATUS!='CLOSED' OR STATUS IS NULL) AND (AUTHORIZED_STATUS != 'REJECTED' OR AUTHORIZED_STATUS IS NULL))
    </mapped-statement>
        
    <result-map name="getRenewalInvestmentsDepositTOResult" class="com.see.truetransact.transferobject.investments.InvestmentsDepositTO">
        <property name="investmentId" column="INVESTMENT_ID"/>
        <property name="investmentType" column="INVESTMENT_TYPE"/>
        <property name="investmentProdId" column="INVESTMENT_PROD_ID"/>
        <property name="investmentProdDesc" column="INVESTMENT_PROD_DESC"/>
        <property name="agencyName" column="AGENCY_NAME"/>
        <property name="investmentRefNo" column="INVESTMENT_REF_NO"/>
        <property name="investmentIssueDt" column="INVESTMENT_ISSUE_DT"/>
        <property name="investmentEffectiveDt" column="INVESTMENT_EFFECTIVE_DT"/>
        <property name="principalAmount" column="PRINCIPAL_AMOUNT"/>
        <property name="investmentPeriodYy" column="INVESTMENT_PERIOD_YY"/>
        <property name="investmentPeriodMm" column="INVESTMENT_PERIOD_MM"/>
        <property name="investmentPeriodDd" column="INVESTMENT_PERIOD_DD"/>
        <property name="rateOfInterest" column="RATE_OF_INTEREST"/>
        <property name="maturityDt" column="MATURITY_DT"/>
        <property name="maturityAmount" column="MATURITY_AMOUNT"/>
        <property name="intpayFreq" column="INTPAY_FREQ"/>
        <property name="withPrincipal" column="INT_WITH_PRINCIPAL"/>
        <property name="interestReceivable" column="INTEREST_RECEIVABLE"/>
        <property name="periodicIntrest" column="PERIODIC_INTEREST"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="renewalDt" column="RENEWAL_DT"/>
    </result-map>
        
    <result-map name="getInvestmentsShareTOResult" class="com.see.truetransact.transferobject.investments.InvestmentsShareTO">
        <property name="investmentId" column="INVESTMENT_ID"/>
        <property name="investmentType" column="INVESTMENT_TYPE"/>
        <property name="investmentProdId" column="INVESTMENT_PROD_ID"/>
        <property name="investmentProdDesc" column="INVESTMENT_PROD_DESC"/>
        <property name="agencyName" column="AGENCY_NAME"/>
        <property name="shareType" column="SHARE_TYPE"/>
        <property name="investmentRefNo" column="MEMBER_NO"/>
        <property name="investmentIssueDt" column="INVESTMENT_ISSUE_DT"/>
        <property name="noOfShares" column="NO_OF_SHARES"/>
        <property name="shareValue" column="SHARE_VALUE"/>
        <property name="faceValue" column="FACE_VALUE"/>
        <property name="feesPaid" column="FEES_PAID"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
    </result-map>
        
    <mapped-statement name="getSelectInvestmentsShareTO" result-map="getInvestmentsShareTOResult" >
        SELECT * FROM INVESTMENT_SHARE WHERE INVESTMENT_ID=#INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <result-map name="getInvestmentsRFTOResult" class="com.see.truetransact.transferobject.investments.InvestmentsRFTO">
        <property name="investmentId" column="INVESTMENT_ID"/>
        <property name="investmentType" column="INVESTMENT_TYPE"/>
        <property name="investmentProdId" column="INVESTMENT_PROD_ID"/>
        <property name="investmentProdDesc" column="INVESTMENT_PROD_DESC"/>
        <property name="agencyName" column="AGENCY_NAME"/>
        <property name="investmentRefNo" column="INVESTMENT_REF_NO"/>
        <property name="investmentIssueDt" column="INVESTMENT_ISSUE_DT"/>
        <property name="amount" column="AMOUNT"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
    </result-map>
        
    <mapped-statement name="getSelectInvestmentsRFTO" result-map="getInvestmentsRFTOResult" >
        SELECT * FROM INVESTMENT_RESERVE_FUND WHERE INVESTMENT_ID=#INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="authorizeInvestMasterDetails" result-class="java.util.HashMap">
        UPDATE INVESTMENT_MASTER SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #AUTHORIZED_BY:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#
        WHERE ((STATUS!='DELETED' AND AUTHORIZED_STATUS IS NULL)
        OR (STATUS='DELETED' AND AUTHORIZED_STATUS IS NULL AND AUTHORIZED_DT IS NOT NULL)) AND INVESTMENT_ID = #INVESTMENT_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="authorizeTimeMasterDetails" result-class="java.util.HashMap">
        UPDATE INVESTMENT_MASTER SET 
        ACCT_STATUS='CLOSED',CLOSE_DT=#cur_dt:DATE#
        WHERE ((STATUS!='DELETED' AND AUTHORIZED_STATUS IS NULL)
        OR (STATUS='DELETED' AND AUTHORIZED_STATUS IS NULL AND AUTHORIZED_DT IS NOT NULL)) AND INVESTMENT_ID = #INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="authorizeInvestmentOperative" result-class="java.util.HashMap">
        UPDATE INVESTMENT_OPERATIVE SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #AUTHORIZED_BY:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#
        WHERE STATUS != 'DELETED' AND AUTHORIZED_STATUS IS NULL AND INVESTMENT_ID = #INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="authorizeInvestmentDeposit" result-class="java.util.HashMap">
        UPDATE INVESTMENT_DEPOSIT SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #AUTHORIZED_BY:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#,
        RENEWAL ='N'
        WHERE STATUS != 'DELETED' AND AUTHORIZED_STATUS IS NULL AND INVESTMENT_ID = #INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="authorizeInvestmentRenewalDeposit" result-class="java.util.HashMap">
        UPDATE INVESTMENT_DEPOSIT_RENEWAL SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #AUTHORIZED_BY:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#
        WHERE STATUS != 'DELETED' AND AUTHORIZED_STATUS IS NULL AND INVESTMENT_ID = #INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="authorizeInvestmentShare" result-class="java.util.HashMap">
        UPDATE INVESTMENT_SHARE SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #AUTHORIZED_BY:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#
        WHERE STATUS != 'DELETED' AND AUTHORIZED_STATUS IS NULL AND INVESTMENT_ID = #INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="authorizeInvestmentRD" result-class="java.util.HashMap">
        UPDATE INVESTMENT_RESERVE_FUND SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #AUTHORIZED_BY:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#
        WHERE STATUS != 'DELETED' AND AUTHORIZED_STATUS IS NULL AND INVESTMENT_ID = #INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateInvestmentsOperativeTO" inline-parameters="true">
        UPDATE INVESTMENT_OPERATIVE SET 
        AGENCY_NAME = #agencyName:VARCHAR#,
        INVESTMENT_REF_NO = #investmentRefNo:VARCHAR#,
        INVESTMENT_ISSUE_DT = #investmentIssueDt:DATE#,
        OPERATOR_DETAILS = #operatorDetails:VARCHAR#,
        CHECK_ALLOWED = #checkAllowed:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE STATUS !='DELETED' AND INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateInvestmentsDepositTO" inline-parameters="true">
        UPDATE INVESTMENT_DEPOSIT SET 
        AGENCY_NAME = #agencyName:VARCHAR#,
        INVESTMENT_REF_NO = #investmentRefNo:VARCHAR#,
        INVESTMENT_ISSUE_DT = #investmentIssueDt:DATE#,
        INVESTMENT_EFFECTIVE_DT = #investmentEffectiveDt:DATE#,
        PRINCIPAL_AMOUNT = #principalAmount:NUMERIC#,
        INVESTMENT_PERIOD_YY = #investmentPeriodYy:NUMERIC#,
        INVESTMENT_PERIOD_MM = #investmentPeriodMm:NUMERIC#,
        INVESTMENT_PERIOD_DD = #investmentPeriodDd:NUMERIC#,
        RATE_OF_INTEREST = #rateOfInterest:NUMERIC#,
        MATURITY_DT = #maturityDt:DATE#,
        MATURITY_AMOUNT = #maturityAmount:NUMERIC#,
        INTPAY_FREQ = #intpayFreq:NUMERIC#,
        INT_WITH_PRINCIPAL = #withPrincipal:NUMERIC#,
        RENEWAL = #renewal:NUMERIC#,
        INTEREST_RECEIVABLE = #interestReceivable:NUMERIC#,
        INTEREST_RECEIVED = #interestReceived:NUMERIC#,
        PERIODIC_INTEREST = #periodicIntrest:NUMERIC#,
        INT_REC_TILL_DT = #intRecTillDt:DATE#,
        RENEWAL_SAME_NO = #renewalSameNo:VARCHAR#,
        RENEWAL_NEW_NO = #renewalNewNo:VARCHAR#,
        RENEWAL_DIFF_PROD_ID = #renewalDiffProdNo:VARCHAR#,
        RENEWAL_WITH_INTEREST = #renewalWithInterest:VARCHAR#,
        RENEWAL_WITHOUT_INTEREST = #renewalWithOutInterest:VARCHAR#,
        RENEWAL_PARTIAL_INTEREST = #renewalPartialInterest:VARCHAR#,
        PARTIAL_INT_AMOUNT = #renewalPartialAmt:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        AUTHORIZED_STATUS = #authorizedStatus:VARCHAR#,
        AUTHORIZED_BY = #authorizedBy:VARCHAR#,
        AUTHORIZED_DT = #authorizedDt:DATE#,
        RENEWAL_DT = #renewalDt:DATE#
        WHERE STATUS !='DELETED' AND INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateInvestmentsMasterStatus" inline-parameters="true">
        UPDATE INVESTMENT_MASTER SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        AUTHORIZED_STATUS = #authorizedStatus:VARCHAR#,
        AUTHORIZED_BY = #authorizedBy:VARCHAR#,
        AUTHORIZED_DT = #authorizedDt:DATE#
        WHERE STATUS !='DELETED' AND INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateInvestmentsShareTO" inline-parameters="true">
        UPDATE INVESTMENT_SHARE SET 
        SHARE_TYPE = #shareType:VARCHAR#,
        MEMBER_NO = #investmentRefNo:VARCHAR#,
        INVESTMENT_ISSUE_DT = #investmentIssueDt:DATE#,
        NO_OF_SHARES = #noOfShares:NUMERIC#,
        SHARE_VALUE = #shareValue:NUMERIC#,
        FACE_VALUE = #faceValue:NUMERIC#,
        FEES_PAID = #feesPaid:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE STATUS !='DELETED' AND INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateInvestmentsRFTO" inline-parameters="true">
        UPDATE INVESTMENT_RESERVE_FUND SET 
        AGENCY_NAME = #agencyName:VARCHAR#,
        INVESTMENT_REF_NO = #investmentRefNo:VARCHAR#,
        INVESTMENT_ISSUE_DT = #investmentIssueDt:DATE#,
        AMOUNT = #amount:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE STATUS !='DELETED' AND INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteInvestmentsOperativeTO" inline-parameters="true">
        UPDATE INVESTMENT_OPERATIVE SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:DATE#
        WHERE INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteInvestmentsDepositTO" inline-parameters="true">
        UPDATE INVESTMENT_DEPOSIT SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:DATE#
        WHERE INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteInvestmentsShareTO" inline-parameters="true">
        UPDATE INVESTMENT_SHARE SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:DATE#
        WHERE INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteInvestmentsRFTO" inline-parameters="true">
        UPDATE INVESTMENT_RESERVE_FUND SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:DATE#
        WHERE INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteInvestmentSMasterTO" inline-parameters="true">
        UPDATE INVESTMENT_MASTER SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:DATE#,
        AUTHORIZED_STATUS = #authorizedStatus:VARCHAR#
        WHERE INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <dynamic-mapped-statement name="getInvestTransDepAccNos" result-class="java.util.LinkedHashMap">
        SELECT IDP.INVESTMENT_ID,IDP.INVESTMENT_REF_NO AS INVES_REF_NO,IDP.INVESTMENT_ISSUE_DT AS ISSUE_DT,MATURITY_DT,PRINCIPAL_AMOUNT AS AMOUNT FROM 
        INVESTMENT_MASTER IM,INVESTMENT_DEPOSIT IDP WHERE IM.STATUS!='DELETED' AND IM.AUTHORIZED_STATUS='AUTHORIZED' AND IM.AVAILABLE_BALANCE>0 AND
        (IM.ACCT_STATUS!='CLOSED' OR IM.ACCT_STATUS IS NULL) AND IM.INVESTMENT_ID=IDP.INVESTMENT_ID AND IDP.INVESTMENT_PROD_ID=#PROD_ID:VARCHAR# 
        <dynamic>    
            <isParameterPresent>
                <isNotNull prepend= "AND" property = "CLOSURE" >
                    IDP.INVESTMENT_ID NOT IN(SELECT INVESTMENT_ID FROM INVESTMENT_TRANS_DETAILS 
                    WHERE TRAN_CODE='Closure' AND AUTHORIZE_STATUS is null)
                </isNotNull>
            </isParameterPresent>
        </dynamic>
                
        ORDER BY IDP.INVESTMENT_ID
    </dynamic-mapped-statement>
        
    <mapped-statement name="getInvestRenewalDepAccNos" result-class="java.util.LinkedHashMap">
        SELECT IDR.INVESTMENT_ID,IDR.INVESTMENT_REF_NO AS INVES_REF_NO,IDR.INVESTMENT_ISSUE_DT AS ISSUE_DT,PRINCIPAL_AMOUNT AS AMOUNT FROM 
        INVESTMENT_MASTER IM,INVESTMENT_DEPOSIT_RENEWAL IDR WHERE IDR.STATUS!='DELETED' AND IDR.STATUS!='CLOSED' AND IM.AUTHORIZED_STATUS='AUTHORIZED' AND 
        IM.INVESTMENT_ID=IDR.INVESTMENT_ID AND IDR.INVESTMENT_PROD_ID=#PROD_ID:VARCHAR# 
                
        ORDER BY IDR.INVESTMENT_ID
    </mapped-statement>
        
    <mapped-statement name="getInvestTransOperativeAccNos" result-class="java.util.LinkedHashMap">
        SELECT OP.INVESTMENT_ID,OP.INVESTMENT_REF_NO AS INVES_REF_NO,OP.INVESTMENT_ISSUE_DT AS ISSUE_DT FROM 
        INVESTMENT_MASTER IM,INVESTMENT_OPERATIVE OP WHERE IM.STATUS!='DELETED' AND IM.AUTHORIZED_STATUS='AUTHORIZED' 
        AND IM.INVESTMENT_ID=OP.INVESTMENT_ID AND (IM.ACCT_STATUS !='CLOSED' OR IM.ACCT_STATUS IS NULL)
        AND OP.INVESTMENT_PROD_ID=#PROD_ID:VARCHAR# ORDER BY OP.INVESTMENT_ID
    </mapped-statement>
        
    <mapped-statement name="getInvestTransReserveFundAccNos" result-class="java.util.LinkedHashMap">
        SELECT IRF.INVESTMENT_ID,IRF.INVESTMENT_REF_NO AS INVES_REF_NO,AMOUNT,IRF.INVESTMENT_ISSUE_DT AS ISSUE_DT FROM 
        INVESTMENT_MASTER IM,INVESTMENT_RESERVE_FUND IRF WHERE IM.STATUS!='DELETED' AND IM.AUTHORIZED_STATUS='AUTHORIZED' 
        AND IM.INVESTMENT_ID=IRF.INVESTMENT_ID AND (IM.ACCT_STATUS !='CLOSED' OR IM.ACCT_STATUS IS NULL)
        AND IRF.INVESTMENT_PROD_ID=#PROD_ID:VARCHAR# ORDER BY IRF.INVESTMENT_ID
    </mapped-statement>
        
    <mapped-statement name="getInvestTransShareAccNos" result-class="java.util.LinkedHashMap">
        SELECT INS.INVESTMENT_ID,INS.MEMBER_NO AS INVES_REF_NO,SHARE_VALUE AS AMOUNT,INS.INVESTMENT_ISSUE_DT AS ISSUE_DT FROM 
        INVESTMENT_MASTER IM,INVESTMENT_SHARE INS WHERE IM.STATUS!='DELETED' AND IM.AUTHORIZED_STATUS='AUTHORIZED' 
        AND IM.INVESTMENT_ID=INS.INVESTMENT_ID AND (IM.ACCT_STATUS !='CLOSED' OR IM.ACCT_STATUS IS NULL)
        AND INS.INVESTMENT_PROD_ID=#PROD_ID:VARCHAR# ORDER BY INS.INVESTMENT_ID 
    </mapped-statement>
        
    <dynamic-mapped-statement name="getInvestTransOtherBankOpperativeAccNos" result-class="java.util.LinkedHashMap">
        SELECT IOP.INVESTMENT_ID,IOP.INVESTMENT_PROD_DESC AS PROD_DESC,IOP.INVESTMENT_REF_NO AS INVES_REF_NO,IOP.INVESTMENT_ISSUE_DT AS ISSUE_DT FROM 
        INVESTMENT_MASTER IM,INVESTMENT_OPERATIVE IOP WHERE IM.STATUS!='DELETED' AND 
        IM.AUTHORIZED_STATUS='AUTHORIZED' AND IM.INVESTMENT_ID=IOP.INVESTMENT_ID 
        AND IOP.INVESTMENT_PROD_ID=#PROD_ID:VARCHAR# 
        <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="INVESTMENT_ID">
                    UPPER(IOP.INVESTMENT_ID) LIKE UPPER('%$INVESTMENT_ID$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(IOP.INVESTMENT_PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="INVES_REF_NO">
                    UPPER(IOP.INVESTMENT_REF_NO) LIKE UPPER('%$INVES_REF_NO$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="ISSUE_DT">
                    UPPER(IOP.INVESTMENT_ISSUE_DT) LIKE UPPER('%$ISSUE_DT$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
            ORDER BY IOP.INVESTMENT_ID
    </dynamic-mapped-statement>
        
    <mapped-statement name="insertInvestmentsChequeTO" inline-parameters="true">
        INSERT INTO INVESTMENT_CHEQUE_MASTER
        (INVESTMENT_ID, SL_NO, ISSUE_DT, FROM_NO, TO_NO, NO_OF_CHEQUES, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (
        #investmentId:VARCHAR#, #slNo:VARCHAR#, #issueDt:DATE#, #fromNo:VARCHAR#, #toNo:VARCHAR#, #noOfCheques:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#)
    </mapped-statement>
        
    <mapped-statement name="insertInvestmentsChequeDetails" inline-parameters="true">
        INSERT INTO INVESTMENT_CHEQUE_DETAILS
        (INVESTMENT_ID, SL_NO, CHEQUE_NO, CHECK_STATUS
        ) VALUES (
        #investmentId:VARCHAR#, #slNo:VARCHAR#, #fromNo:VARCHAR#, #status:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="updateInvestmentsChequeTO" inline-parameters="true">
        UPDATE INVESTMENT_CHEQUE_MASTER SET 
        ISSUE_DT = #issueDt:DATE#,
        FROM_NO = #fromNo:VARCHAR#,
        TO_NO = #toNo:VARCHAR#,
        NO_OF_CHEQUES = #noOfCheques:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE INVESTMENT_ID = #investmentId:VARCHAR# AND SL_NO = #slNo:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteOldInvestmentsDetails" inline-parameters="true">
        DELETE INVESTMENT_CHEQUE_DETAILS WHERE INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <result-map name="getInvestmentsChequeTOResult" class="com.see.truetransact.transferobject.investments.InvestmentsChequeTO">
        <property name="investmentId" column="INVESTMENT_ID"/>
        <property name="slNo" column="SL_NO"/>
        <property name="issueDt" column="ISSUE_DT"/>
        <property name="fromNo" column="FROM_NO"/>
        <property name="toNo" column="TO_NO"/>
        <property name="noOfCheques" column="NO_OF_CHEQUES"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
    </result-map>
         
    <mapped-statement name="getSelectInvestmentsChequeTO" result-map="getInvestmentsChequeTOResult" >
        SELECT * FROM INVESTMENT_CHEQUE_MASTER WHERE STATUS!='DELETED' AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS !='REJECTED') 
        AND INVESTMENT_ID=#INVESTMENT_ID:VARCHAR# ORDER BY SL_NO
    </mapped-statement>
         
    <mapped-statement name="deleteChequeMasterStatus" inline-parameters="true">
        UPDATE INVESTMENT_CHEQUE_MASTER SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:DATE#
        WHERE INVESTMENT_ID = #investmentId:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="authorizeChequeBookDetails" result-class="java.util.HashMap">
        UPDATE INVESTMENT_CHEQUE_MASTER SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #AUTHORIZED_BY:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#
        WHERE STATUS != 'DELETED' AND AUTHORIZED_STATUS IS NULL AND INVESTMENT_ID = #INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="rejectOldInvestmentsDetails" inline-parameters="true">
        DELETE INVESTMENT_CHEQUE_DETAILS WHERE INVESTMENT_ID = #INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteCheckMasterTO" inline-parameters="true">                
        UPDATE INVESTMENT_CHEQUE_MASTER SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:DATE#
        WHERE INVESTMENT_ID = #investmentId:VARCHAR# AND SL_NO = #slNo:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="getInvestmentIssuedChequeDetails" result-class="java.util.LinkedHashMap">
        SELECT CHEQUE_NO,CHECK_STATUS FROM INVESTMENT_CHEQUE_DETAILS WHERE INVESTMENT_ID=#INVESTMENT_ID:VARCHAR# AND SL_NO=#SL_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteInvestmentDepositDetail" result-class="java.util.LinkedHashMap">
        DELETE FROM INVESTMENT_DEPOSIT WHERE INVESTMENT_ID=#INVESTMENT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteInvestmentRenewalDepositDetail" result-class="java.util.LinkedHashMap">
        <!-- DELETE INVESTMENT_DEPOSIT_RENEWAL WHERE INVESTMENT_ID=#INVESTMENT_ID:VARCHAR# -->
        DELETE FROM INVESTMENT_DEPOSIT_RENEWAL idr WHERE idr.INVESTMENT_ID=#INVESTMENT_ID:VARCHAR#
        AND IDR.STATUS_DT = (SELECT DE.CURR_APPL_DT FROM DAY_END DE WHERE DE.BRANCH_CODE = #BRANCH_CODE:VARCHAR#) 
        AND IDR.AUTHORIZED_STATUS IS NULL
    </mapped-statement>
        
    <mapped-statement name="getDataForInvestmentTransRenewalTime" result-class="java.util.LinkedHashMap">
        SELECT * FROM INVESTMENT_TRANS_DETAILS  WHERE  INVESTMENT_ID=#INVESTMENT_ID:VARCHAR# AND  STATUS NOT IN ('DELETED')  AND AUTHORIZE_STATUS IS  NULL
        AND INITIATED_BRANCH = #INITIATED_BRANCH:VARCHAR# AND TRANS_DT = #TRANS_DT:DATE#
    </mapped-statement>
   <mapped-statement name="getDuplicateRefNo" result-class="java.util.LinkedHashMap">      
        SELECT COUNT(IM.INVESTMENT_ID) AS COUNT FROM INVESTMENT_MASTER IM WHERE IM.STATUS !='DELETED' 
        AND (IM.AUTHORIZED_STATUS !='REJECTED' OR IM.AUTHORIZED_STATUS IS NULL)
        AND IM.INVESTMENT_REF_NO=#REF_NO:VARCHAR#      
    </mapped-statement>
    <mapped-statement name="getTDSInvestmentRenewal" result-class="java.util.LinkedHashMap">
        SELECT T.TDS_AMOUNT FROM INVESTMENT_TRANS_DETAILS T  WHERE T.INVESTMENT_ID=#INVEST_ID:VARCHAR# AND T.BATCH_ID=#BATCH_ID:VARCHAR# 
        AND T.TRAN_CODE='Interest' AND T.STATUS!='DELETED' AND T.AUTHORIZE_STATUS IS NULL  AND T.INITIATED_BRANCH=#INITIATED_BRANCH:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getInvestmentRenewalWithoutTransaction" result-class="java.util.LinkedHashMap">   
     select icd.RENEW_WITHOUT_TRANSACTION from INVESTMENT_CONF_DETAILS icd where ICD.INVESTMENT_PROD_ID = #PROD_ID:VARCHAR#
     </mapped-statement>
     
</sql-map>