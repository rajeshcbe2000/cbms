<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="IndendClosingTOMap">

    <!-- Use CustIDChangeTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
   
    <mapped-statement name="insertIndendClosingDetails" result-class="java.util.HashMap">
        <!--        INSERT INTO INDEND_CLOSE_STOCK
        (DEP_CLOSE_ID, DEPID, CLOSING_DT, CLOSING_AMT, CLOS_PERC_LESS_AMT, BRANCH_CODE, STOCK_TYPE, CLOSE_STOCK_TYPE, STATUS_BY, STATUS
        ) VALUES (
        #DEP_CLOSE_ID:VARCHAR#, #DEPID:VARCHAR#, #CLOSE_DATE#, #CLOSING_AMT:NUMBER#,  #CLOS_PERC_LESS_AMT:NUMBER#, 
        #BRANCH_CODE:VARCHAR#, #STOCK_TYPE:VARCHAR#, #CLOSE_STOCK_TYPE:VARCHAR#, #USER_ID:VARCHAR#, #STATUS:VARCHAR#)-->
        
        INSERT INTO INDEND_CLOSE_STOCK (DEPID, CLOSING_DT, CLOSING_AMT, CLOS_PERC_LESS_AMT, BRANCH_CODE, STOCK_TYPE, CLOSE_STOCK_TYPE, STATUS_BY, STATUS)
        VALUES (#DEPID:VARCHAR#, #CLOSE_DATE#, #CLOSING_AMT:NUMBER#,  #CLOS_PERC_LESS_AMT:NUMBER#, 
        #BRANCH_CODE:VARCHAR#, #STOCK_TYPE:VARCHAR#, 'TEMPARORY', #USER_ID:VARCHAR#, #STATUS:VARCHAR#)
        ON CONFLICT (DEPID, BRANCH_CODE, CLOSING_DT, STOCK_TYPE)
        DO UPDATE SET
        CLOSING_AMT = EXCLUDED.CLOSING_AMT,
        CLOS_PERC_LESS_AMT = EXCLUDED.CLOS_PERC_LESS_AMT,
        STATUS = 'MODIFIED',
        STATUS_DT = current_timestamp; 
        
       <!-- MERGE INTO INDEND_CLOSE_STOCK A USING (SELECT * FROM DEPO_MASTER B WHERE B.DEPID = #DEPID# AND ROWNUM = 1) H ON (
        A.DEPID = #DEPID# AND A.BRANCH_CODE=#BRANCH_CODE# AND A.CLOSING_DT=#CLOSE_DATE# AND A.STOCK_TYPE=#STOCK_TYPE#
        ) WHEN MATCHED THEN
        UPDATE SET A.CLOSING_AMT=#CLOSING_AMT#, A.CLOS_PERC_LESS_AMT=#CLOS_PERC_LESS_AMT#, 
        A.STATUS='MODIFIED', STATUS_DT=(SELECT SYS_DATE() FROM DUAL)
        WHEN NOT MATCHED THEN
        INSERT (DEPID, CLOSING_DT, CLOSING_AMT, CLOS_PERC_LESS_AMT, BRANCH_CODE, STOCK_TYPE, CLOSE_STOCK_TYPE, STATUS_BY, STATUS)
        VALUES (#DEPID:VARCHAR#, #CLOSE_DATE#, #CLOSING_AMT:NUMBER#,  #CLOS_PERC_LESS_AMT:NUMBER#, 
        #BRANCH_CODE:VARCHAR#, #STOCK_TYPE:VARCHAR#, 'TEMPARORY', #USER_ID:VARCHAR#, #STATUS:VARCHAR#)-->
     </mapped-statement>
    
    <mapped-statement name="getSelectIndendCloseDepoID" result-class="java.util.LinkedHashMap">
        SELECT DEPID, DEPO_NAME FROM DEPO_MASTER WHERE STATUS NOT IN ('DELETED','CLOSED') AND 
        AUTHORIZE_STATUS='AUTHORIZED' AND DEPID NOT IN(SELECT DEPID FROM INDEND_CLOSE_STOCK WHERE STATUS!='DELETED') ORDER BY 1
    </mapped-statement>
    
    <mapped-statement name="getSelectIndendCloseEdit" result-class="java.util.LinkedHashMap">
        SELECT DEP_CLOSE_ID, DEPID, CLOSING_AMT FROM INDEND_CLOSE_STOCK WHERE STATUS!='DELETED' AND BRANCH_CODE=#BRANCH_CODE# ORDER BY 1
    </mapped-statement>
    
    <result-map name="getSelectIndendCloseTOResult" class="com.see.truetransact.transferobject.indend.closing.IndendClosingTO">
        <property name="depoCloseID" column="DEP_CLOSE_ID"/>
        <property name="depoID" column="DEPID"/>
        <property name="closingDt" column="CLOSING_DT"/>
        <property name="closingAmount" column="CLOSING_AMT"/>
        <property name="closingPerLessAmt" column="CLOS_PERC_LESS_AMT"/>
        <property name="stockType" column="STOCK_TYPE"/>
        <property name="closingStockType" column="CLOSE_STOCK_TYPE"/>
    </result-map>
    
    <mapped-statement name="getSelectIndendCloseTO" result-map="getSelectIndendCloseTOResult" >
        SELECT * FROM INDEND_CLOSE_STOCK WHERE STATUS!='DELETED' AND BRANCH_CODE=#BRANCH_CODE#
        AND DEP_CLOSE_ID=#DEP_CLOSE_ID# AND DEPID=#DEPID# ORDER BY 1
    </mapped-statement>
    
    <mapped-statement name="getIndendClosingDetails" result-class="java.util.LinkedHashMap">
        SELECT  BRANCH_CODE,DEPID,DEPO_NAME,CLOSING_AMT,  (CASE WHEN NVL(CLOS_PERC_LESS_AMT,0)>0 THEN CLOS_PERC_LESS_AMT ELSE 
        NVL(ROUND((CLOSING_AMT*100)/(100+PROFIT_PERCENTAGE ),2),0)
        END) AS CLOS_PERC_LESS_AMT, PROFIT_PERCENTAGE,CLOSE_STOCK_TYPE FROM(
        SELECT  M.BRANCH_CODE,M.DEPID,M.DEPO_NAME, (CASE WHEN NVL(C.CLOSING_AMT,0)>0 THEN C.CLOSING_AMT ELSE 
        NVL(CALC_INDEND_CLOSING_AMT(M.DEPID,#CLOSE_DT#, M.BRANCH_CODE, #STOCK_TYPE#),0)
        END) AS CLOSING_AMT,C.CLOS_PERC_LESS_AMT,PROFIT_PERCENTAGE,CLOSE_STOCK_TYPE FROM 
        (SELECT BM.BRANCH_CODE,DM.DEPID,DEPO_NAME,NVL(PROFIT_PERCENTAGE,0) PROFIT_PERCENTAGE FROM BRANCH_MASTER BM,DEPO_MASTER DM WHERE DM.STATUS!='DELETED' AND DM.AUTHORIZE_STATUS='AUTHORIZED') M 
        LEFT JOIN (SELECT DEPID,CLOSING_DT,CLOSING_AMT,CLOS_PERC_LESS_AMT,BRANCH_CODE,STOCK_TYPE,CLOSE_STOCK_TYPE
        FROM INDEND_CLOSE_STOCK CS WHERE CS.CLOSING_DT=#CLOSE_DT# AND STOCK_TYPE =#STOCK_TYPE#) C ON C.DEPID =M.DEPID AND C.BRANCH_CODE =M.BRANCH_CODE)a
        ORDER BY DEPID, BRANCH_CODE
    </mapped-statement>
    
    <mapped-statement name="getIndendDamageDetails" result-class="java.util.LinkedHashMap">
        SELECT  M.BRANCH_CODE,M.DEPID,M.DEPO_NAME, C.CLOSING_AMT AS CLOSING_AMT,C.CLOS_PERC_LESS_AMT,PROFIT_PERCENTAGE,CLOSE_STOCK_TYPE FROM 
        (SELECT BM.BRANCH_CODE,DM.DEPID,DEPO_NAME,PROFIT_PERCENTAGE FROM BRANCH_MASTER BM,DEPO_MASTER DM WHERE DM.STATUS!='DELETED' AND DM.AUTHORIZE_STATUS='AUTHORIZED') M 
        LEFT JOIN (SELECT DEPID,CLOSING_DT,CLOSING_AMT,CLOS_PERC_LESS_AMT,BRANCH_CODE,STOCK_TYPE,CLOSE_STOCK_TYPE
        FROM INDEND_CLOSE_STOCK CS WHERE CS.CLOSING_DT=#CLOSE_DT# AND STOCK_TYPE =#STOCK_TYPE#) C ON C.DEPID =M.DEPID AND C.BRANCH_CODE =M.BRANCH_CODE
        ORDER BY DEPID, BRANCH_CODE
    </mapped-statement>
    
    <mapped-statement name="getReserveDepreciationHeadDetails" result-class="java.util.LinkedHashMap">
        SELECT C.BRANCH_CODE, B.AC_HD_ID, B.AC_HD_DESC FROM MJR_AC_HD A, AC_HD B, BRANCH_MASTER C WHERE A.STATUS!='DELETED' 
        AND A.AUTHORIZE_STATUS='AUTHORIZED' AND SUB_ACCOUNT_TYPE IN('RESERVE','DEPRECIATION')
        AND B.STATUS!='DELETED' AND B.AUTHORIZE_STATUS='AUTHORIZED' AND A.MJR_AC_HD_ID=B.MJR_AC_HD_ID 
        AND (C.BRANCH_CODE || B.AC_HD_ID) NOT IN(SELECT BRANCH_CODE || AC_HD_ID FROM RESERVE_DEPRECIATION WHERE FIN_DT=#CLOSE_DT# AND NVL(AMOUNT,0)&gt;0 )
        ORDER BY C.BRANCH_CODE, B.AC_HD_ID
    </mapped-statement>
    
    <mapped-statement name="getReserveHeadDetails" result-class="java.util.LinkedHashMap">
        SELECT C.BRANCH_CODE, B.AC_HD_ID, B.AC_HD_DESC, RESERVE_PREV_CLOSING_AMT(AC_HD_ID,#CLOSE_DT#,BRANCH_CODE) AS PREV_CLOSING_AMT FROM MJR_AC_HD A, AC_HD B, BRANCH_MASTER C WHERE A.STATUS!='DELETED' 
        AND A.AUTHORIZE_STATUS='AUTHORIZED' AND SUB_ACCOUNT_TYPE IN('RESERVE','DEPRECIATION')
        AND B.STATUS!='DELETED' AND B.AUTHORIZE_STATUS='AUTHORIZED' AND A.MJR_AC_HD_ID=B.MJR_AC_HD_ID 
        AND (C.BRANCH_CODE || B.AC_HD_ID) NOT IN(SELECT BRANCH_CODE || AC_HD_ID FROM RESERVE_DEPRECIATION WHERE FIN_DT=#CLOSE_DT# AND NVL(AMOUNT,0)>0 )
        ORDER BY C.BRANCH_CODE, B.AC_HD_ID
    </mapped-statement>
    
    <mapped-statement name="insertReserveDepDetails" result-class="java.util.HashMap">
        INSERT INTO RESERVE_DEPRECIATION
        (RD_ID, AC_HD_ID, AC_HD_DESC, BRANCH_CODE, FIN_DT, AMOUNT, RES_OR_DEPR) VALUES         
        (#RD_ID:VARCHAR#, #AC_HD_ID:VARCHAR#, #AC_HD_DESC:VARCHAR#, #BRANCH_CODE:VARCHAR#, 
        #CLOSE_DATE#, #AMOUNT:NUMBER#, #CLOSE_TYPE:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name="getReserveDepAccountHead" result-class="java.util.HashMap">
        SELECT * FROM RESERVE_DEPRECIATION_ACHD WHERE AC_HD_ID=#AC_HD_ID#
    </mapped-statement>
    
    <mapped-statement name="getReserveLastYearCloseAmount" result-class="java.util.HashMap">
        SELECT * FROM RESERVE_DEPRECIATION WHERE AC_HD_ID=#AC_HD_ID# AND BRANCH_CODE=#BRANCH_CODE# AND FIN_DT=#CLOSE_DT#
    </mapped-statement>

        
</sql-map>