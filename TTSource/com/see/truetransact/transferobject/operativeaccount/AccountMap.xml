<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="AccountMap">

    <!-- Use AccountTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    
    <mapped-statement name="getAccountClosingCharge" result-class="java.lang.String">
        SELECT ACCT_CLOSING_CHG FROM OP_AC_CHARGES_PARAM WHERE PROD_ID = #PRODUCT_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getAgentID" result-class="java.util.HashMap">
       SELECT DISTINCT FNAME,AGENT_ID FROM AGENT_MASTER AM, CUSTOMER C
       WHERE AM.AGENT_ID=C.CUST_ID 
    </mapped-statement>
    
    <mapped-statement name="insertAccountTO" inline-parameters="true">
        INSERT INTO ACT_MASTER
        (ACT_NUM, PROD_ID, CUST_ID, BRANCH_CODE, CREATE_DT, ACT_STATUS_ID, ACT_CAT_ID, OPT_MODE_ID, TOD_LIMIT, GROUP_CODE_ID, 
        SETTMT_MODE_ID, PREV_ACT_NUM, CLEAR_BALANCE, UNCLEAR_BALANCE, FLOAT_BALANCE, EFFECTIVE_BALANCE, AVAILABLE_BALANCE, CREATED_BY, 
        AUTHORIZED_BY, AUTHORIZATION_STATUS, CLOSED_BY, CLOSED_DT, BASE_CURR, LAST_TRANS_DT, SHADOW_CREDIT, SHADOW_DEBIT, AUTHORIZED_DT, 
        ACT_STATUS_DT, STATUS, STATUS_BY, STATUS_DT, LIEN_AMT, FREEZE_AMT, TOTAL_BALANCE, COMM_ADDR_TYPE, PRODUCT_AMT, CATEGORY_ID, 
        FLEXI_DEPOSIT_AMT, ACCT_NAME, REMARKS, INITIATED_BRANCH, OPENING_AMOUNT,AGENT_ID,INTRODUCER,CARD_ACCT_NUM,LINKING_ACT_NUM,ATM_LIMIT_AMT,IS_PRIMARY_ACT,MOBILE_NO
        ) VALUES (
        #actNum:VARCHAR#, #prodId:VARCHAR#, #custId:VARCHAR#, #branchCode:VARCHAR#, #createDt:TIMESTAMP#, #actStatusId:VARCHAR#, #actCatId:VARCHAR#, 
        #optModeId:VARCHAR#, #todLimit:NUMERIC#, #groupCodeId:VARCHAR#, #settmtModeId:VARCHAR#, #prevActNum:VARCHAR#, #clearBalance:NUMERIC#, 
        #unclearBalance:NUMERIC#, #floatBalance:NUMERIC#, #effectiveBalance:NUMERIC#, #availableBalance:NUMERIC#, #createdBy:VARCHAR#, 
        #authorizedBy:VARCHAR#, #authorizationStatus:VARCHAR#, #closedBy:VARCHAR#, #closedDt:DATE#, #baseCurr:VARCHAR#, #lastTransDt:DATE#, 
        #shadowCredit:NUMERIC#, #shadowDebit:NUMERIC#, #authorizedDt:DATE#, #actStatusDt:DATE#, #status:VARCHAR#, #statusBy:VARCHAR#, 
        #statusDt:TIMESTAMP#, #lienAmt:NUMERIC#, #freezeAmt:NUMERIC#, #totalBalance:NUMERIC#, #commAddrType:VARCHAR#, #productAmt:NUMERIC#, 
        #categoryId:VARCHAR#, #flexiDepositAmt:NUMERIC#, #acctName:VARCHAR#, #remarks:VARCHAR#, #initiatedBranch:VARCHAR#, #openingAmount#,#agentId:VARCHAR#,
        #introducer:VARCHAR#,#cardActNo:VARCHAR#,#linkingActNum:VARCHAR#,#atmCardLimitAmt:NUMERIC#,#primaryAccount:VARCHAR#,#upiMobileNo:VARCHAR#)
    </mapped-statement>   
        <!-- Use AccountTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateAccountTO" inline-parameters="true">
        UPDATE ACT_MASTER SET 
<!--        PROD_ID = #prodId:VARCHAR#,-->
        CUST_ID = #custId:VARCHAR#,
        ACT_STATUS_ID = #actStatusId:VARCHAR#,
        ACT_CAT_ID = #actCatId:VARCHAR#,
        OPT_MODE_ID = #optModeId:VARCHAR#,
        TOD_LIMIT = #todLimit:NUMERIC#,
        GROUP_CODE_ID = #groupCodeId:VARCHAR#,
        SETTMT_MODE_ID = #settmtModeId:VARCHAR#,
        PREV_ACT_NUM = #prevActNum:VARCHAR#,
        AUTHORIZATION_STATUS = #authorizationStatus:VARCHAR#,
        BASE_CURR = #baseCurr:VARCHAR#,
            <!--LAST_TRANS_DT = #lastTransDt:DATE#,-->
            <!--SHADOW_CREDIT = #shadowCredit:NUMERIC#,
            SHADOW_DEBIT = #shadowDebit:NUMERIC#,-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        COMM_ADDR_TYPE = #commAddrType:VARCHAR#,
<!--        PRODUCT_AMT = #productAmt:NUMERIC#,-->
        CATEGORY_ID = #categoryId:VARCHAR#,
        ACCT_NAME = #acctName:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
<!--        INITIATED_BRANCH = #initiatedBranch:VARCHAR#,-->
        CLOSED_DT = #closedDt:DATE#,
        AGENT_ID=#agentId:VARCHAR#,
        INTRODUCER=#introducer:VARCHAR#,
        CARD_ACCT_NUM = #cardActNo:VARCHAR#,
        LINKING_ACT_NUM = #linkingActNum:VARCHAR#,
        ATM_LIMIT_AMT = #atmCardLimitAmt:NUMERIC#,
        IS_PRIMARY_ACT = #primaryAccount:VARCHAR#,
        MOBILE_NO = #upiMobileNo:VARCHAR#,
        INITIATED_BRANCH = #initiatedBranch:VARCHAR#
        WHERE ACT_NUM = #actNum:VARCHAR#
    </mapped-statement>
    <mapped-statement name="updateAccountTOMaterializedView" inline-parameters="true">
        UPDATE ACT_MASTER SET 
        PROD_ID = #prodId:VARCHAR#,
        CUST_ID = #custId:VARCHAR#,
        ACT_STATUS_ID = #actStatusId:VARCHAR#,
        ACT_CAT_ID = #actCatId:VARCHAR#,
        OPT_MODE_ID = #optModeId:VARCHAR#,
        TOD_LIMIT = #todLimit:NUMERIC#,
        GROUP_CODE_ID = #groupCodeId:VARCHAR#,
        SETTMT_MODE_ID = #settmtModeId:VARCHAR#,
        PREV_ACT_NUM = #prevActNum:VARCHAR#,
        AUTHORIZATION_STATUS = #authorizationStatus:VARCHAR#,
        BASE_CURR = #baseCurr:VARCHAR#,
            <!--LAST_TRANS_DT = #lastTransDt:DATE#,-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        COMM_ADDR_TYPE = #commAddrType:VARCHAR#,
        CATEGORY_ID = #categoryId:VARCHAR#,
        ACCT_NAME = #acctName:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        INITIATED_BRANCH = #initiatedBranch:VARCHAR#,
        CLOSED_DT = #closedDt:DATE#
        WHERE ACT_NUM = #actNum:VARCHAR#
    </mapped-statement>
        
             <!--   <mapped-statement name="getLoanProductsSearch" result-class="java.util.LinkedHashMap" >
            select distinct  LOANS_PRODUCT.PROD_ID as KEY,LOANS_PRODUCT.PROD_DESC as VALUE from 
LOANS_PRODUCT,SHARE_DIVIDEND_CALC_DETAILS
where LOANS_PRODUCT.AUTHORIZE_STATUS='AUTHORIZED' 
             and STATUS != 'DELETED' and
SHARE_DIVIDEND_CALC_DETAILS.MEMBER_NO=#MEM_NO# 
	</mapped-statement>-->
        
    <mapped-statement name="getLoanProductsSearch" result-class="java.util.LinkedHashMap" >
        select distinct F.PROD_ID as KEY,P.PROD_DESC as VALUE,S.MEMBERSHIP_NO
        from LOANS_FACILITY_DETAILS f
        join LOANS_BORROWER b on F.BORROW_NO = B.BORROW_NO
        join customer s on S.CUST_ID=B.CUST_ID AND F.CLEAR_BALANCE!=0
        join loans_product p on P.PROD_ID=F.PROD_ID
        where S.MEMBERSHIP_NO=#MEMBERNO:VARCHAR# 
    </mapped-statement>
       
    <!-- Use AccountTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteAccountTO" inline-parameters="true">
        UPDATE ACT_MASTER SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE ACT_NUM = #actNum:VARCHAR#
    </mapped-statement>

   <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to AccountTO object (JavaBean) properties -->
    <result-map name="getAccountTOResult" class="com.see.truetransact.transferobject.operativeaccount.AccountTO">
        <property name="actNum" column="ACT_NUM"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="custId" column="CUST_ID"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="createDt" column="CREATE_DT"/>
        <property name="actStatusId" column="ACT_STATUS_ID"/>
        <property name="actCatId" column="ACT_CAT_ID"/>
        <property name="optModeId" column="OPT_MODE_ID"/>
        <property name="todLimit" column="TOD_LIMIT"/>
        <property name="groupCodeId" column="GROUP_CODE_ID"/>
        <property name="settmtModeId" column="SETTMT_MODE_ID"/>
        <property name="prevActNum" column="PREV_ACT_NUM"/>
        <property name="clearBalance" column="CLEAR_BALANCE"/>
        <property name="unclearBalance" column="UNCLEAR_BALANCE"/>
        <property name="floatBalance" column="FLOAT_BALANCE"/>
        <property name="effectiveBalance" column="EFFECTIVE_BALANCE"/>
        <property name="availableBalance" column="AVAILABLE_BALANCE"/>
        <property name="createdBy" column="CREATED_BY"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="authorizationStatus" column="AUTHORIZATION_STATUS"/>
        <property name="closedBy" column="CLOSED_BY"/>
        <property name="closedDt" column="CLOSED_DT"/>
        <property name="baseCurr" column="BASE_CURR"/>
        <property name="lastTransDt" column="LAST_TRANS_DT"/>
        <property name="shadowCredit" column="SHADOW_CREDIT"/>
        <property name="shadowDebit" column="SHADOW_DEBIT"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="actStatusDt" column="ACT_STATUS_DT"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="lienAmt" column="LIEN_AMT"/>
        <property name="freezeAmt" column="FREEZE_AMT"/>
        <property name="totalBalance" column="TOTAL_BALANCE"/>
        <property name="commAddrType" column="COMM_ADDR_TYPE"/>
        <property name="productAmt" column="PRODUCT_AMT"/>
        <property name="categoryId" column="CATEGORY_ID"/>
        <property name="flexiDepositAmt" column="FLEXI_DEPOSIT_AMT"/>
        <property name="acctName" column="ACCT_NAME"/>
        <property name="remarks" column="REMARKS"/>
        <property name="cardActNo" column="CARD_ACCT_NUM"/>
        <property name="openingAmount" column="OPENING_AMOUNT"/>
        <property name="initiatedBranch" column="INITIATED_BRANCH"/>
        <property name="agentId" column="AGENT_ID"/>
        <property name="introducer" column ="INTRODUCER"/>
        <property name="linkingActNum" column ="LINKING_ACT_NUM"/>
        <property name="atmCardLimitAmt" column ="ATM_LIMIT_AMT"/>
        <property name="primaryAccount" column ="IS_PRIMARY_ACT"/>
        <property name="upiMobileNo" column ="MOBILE_NO"/>
    </result-map>
    <mapped-statement name="getSelectAccountTO" result-map="getAccountTOResult" >
        SELECT * FROM ACT_MASTER 
        WHERE ACT_NUM = #value:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getSelectAccountTOForTempView" result-map="getAccountTOResult" >
        SELECT * FROM ACT_MASTER_TMP 
        WHERE ACT_NUM = #value:VARCHAR#
    </mapped-statement>
        
<!--================================================================-->    
        <!--==ACT_PARAM_DETAIL==-->
        
    <!-- Use AccountParamTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertAccountParamTO" inline-parameters="true">
        INSERT INTO ACT_PARAM_DETAIL
        (ACT_NUM, INT_CR_BAL, INT_DR_BAL, CHK_BOOK, NRO_STATUS, MOBILE_BANKING, ATM_CARD, ATM_CARD_NO, ATM_CARD_EXPRDT, CR_CARD, CR_CARD_NO, CR_CARD_EXPRDT, DR_CARD, DR_CARD_NO, DR_CARD_EXPRDT, ABB, ABB_CHRG, NPA, NPA_DT, STOP_PAY_CHRG, FLEXI, MIN_BAL1_FLEXI, MIN_BAL2_FLEXI, ACT_OPEN_CHRG, CHK_RETURN, INOP_CHRG, STAT_CHRG, NONMAIN_CHRG, LAST_DR_INT_APPLDT, CUSTGRP_LIMIT_VALIDATION, MIN_ACT_BAL, CHK_BOOK_CHRG, REQ_FLEXI_PD, MISC_SERV_CHRG, FOLIO_CHRG, ACT_CLOSING_CHRG, STAT_FREQ, EXCESS_WITHD_CHRG, LAST_CR_INT_APPLDT, ATM_CARD_VALIDFROM, CR_CARD_VALIDFROM, DR_CARD_VALIDFROM, STATUS, STATUS_BY, STATUS_DT, HIDE_BALANCE, SHOW_BALANCE_TO, PASS_BOOK,TEMP_LAST_CR_INT_APPLDT
        ) VALUES (
        #actNum:VARCHAR#, #intCrBal:VARCHAR#, #intDrBal:VARCHAR#, #chkBook:VARCHAR#, #nroStatus:VARCHAR#, #mobileBanking:VARCHAR#, #atmCard:VARCHAR#, #atmCardNo:VARCHAR#, #atmCardExprdt:DATE#, #crCard:VARCHAR#, #crCardNo:VARCHAR#, #crCardExprdt:DATE#, #drCard:VARCHAR#, #drCardNo:VARCHAR#, #drCardExprdt:DATE#, #abb:VARCHAR#, #abbChrg:NUMERIC#, #npa:VARCHAR#, #npaDt:DATE#, #stopPayChrg:VARCHAR#, #flexi:VARCHAR#, #minBal1Flexi:NUMERIC#, #minBal2Flexi:NUMERIC#, #actOpenChrg:NUMERIC#, #chkReturn:VARCHAR#, #inopChrg:VARCHAR#, #statChrg:VARCHAR#, #nonmainChrg:VARCHAR#, #lastDrIntAppldt:DATE#, #custgrpLimitValidation:VARCHAR#, #minActBal:NUMERIC#, #chkBookChrg:NUMERIC#, #reqFlexiPd:NUMERIC#, #miscServChrg:NUMERIC#, #folioChrg:NUMERIC#, #actClosingChrg:NUMERIC#, #statFreq:NUMERIC#, #excessWithdChrg:NUMERIC#, #lastCrIntAppldt:DATE#, #atmCardValidfrom:DATE#, #crCardValidfrom:DATE#, #drCardValidfrom:DATE#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #hideBalance:VARCHAR#, #showBalanceTo:VARCHAR#, #passBook:VARCHAR#,#lastDrIntAppldt:DATE#)
    </mapped-statement>

    <!-- Use AccountParamTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateAccountParamTO" inline-parameters="true">
        UPDATE ACT_PARAM_DETAIL SET 
<!--	ACT_NUM = #actNum:VARCHAR#,-->
<!--	INT_CR_BAL = #intCrBal:VARCHAR#,
        INT_DR_BAL = #intDrBal:VARCHAR#,-->
        CHK_BOOK = #chkBook:VARCHAR#,
        NRO_STATUS = #nroStatus:VARCHAR#,
        MOBILE_BANKING = #mobileBanking:VARCHAR#,
        ATM_CARD = #atmCard:VARCHAR#,
        ATM_CARD_NO = #atmCardNo:VARCHAR#,
        ATM_CARD_EXPRDT = #atmCardExprdt:DATE#,
        CR_CARD = #crCard:VARCHAR#,
        CR_CARD_NO = #crCardNo:VARCHAR#,
        CR_CARD_EXPRDT = #crCardExprdt:DATE#,
        DR_CARD = #drCard:VARCHAR#,
        DR_CARD_NO = #drCardNo:VARCHAR#,
        DR_CARD_EXPRDT = #drCardExprdt:DATE#,
        ABB = #abb:VARCHAR#,
        ABB_CHRG = #abbChrg:NUMERIC#,
        NPA = #npa:VARCHAR#,
        NPA_DT = #npaDt:DATE#,
        STOP_PAY_CHRG = #stopPayChrg:VARCHAR#,
        FLEXI = #flexi:VARCHAR#,
        MIN_BAL1_FLEXI = #minBal1Flexi:NUMERIC#,
        MIN_BAL2_FLEXI = #minBal2Flexi:NUMERIC#,
        ACT_OPEN_CHRG = #actOpenChrg:NUMERIC#,
        CHK_RETURN = #chkReturn:VARCHAR#,
        INOP_CHRG = #inopChrg:VARCHAR#,
        STAT_CHRG = #statChrg:VARCHAR#,
        NONMAIN_CHRG = #nonmainChrg:VARCHAR#,
<!--    LAST_DR_INT_APPLDT = #lastDrIntAppldt:DATE#,
        LAST_CR_INT_APPLDT = #lastCrIntAppldt:DATE#, -->
        CUSTGRP_LIMIT_VALIDATION = #custgrpLimitValidation:VARCHAR#,
        MIN_ACT_BAL = #minActBal:NUMERIC#,
        CHK_BOOK_CHRG = #chkBookChrg:NUMERIC#,
        REQ_FLEXI_PD = #reqFlexiPd:NUMERIC#,
        MISC_SERV_CHRG = #miscServChrg:NUMERIC#,
        FOLIO_CHRG = #folioChrg:NUMERIC#,
        ACT_CLOSING_CHRG = #actClosingChrg:NUMERIC#,
        STAT_FREQ = #statFreq:NUMERIC#,
        EXCESS_WITHD_CHRG = #excessWithdChrg:NUMERIC#,        
        ATM_CARD_VALIDFROM = #atmCardValidfrom:DATE#,
        CR_CARD_VALIDFROM = #crCardValidfrom:DATE#,
        DR_CARD_VALIDFROM = #drCardValidfrom:DATE#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        HIDE_BALANCE = #hideBalance:VARCHAR#,
        SHOW_BALANCE_TO = #showBalanceTo:VARCHAR#,
        PASS_BOOK = #passBook:VARCHAR#
        WHERE ACT_NUM = #actNum:VARCHAR#
    </mapped-statement>

    <!-- Use AccountParamTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteAccountParamTO" inline-parameters="true">
        DELETE FROM ACT_PARAM_DETAIL 
        WHERE ACT_NUM = #value:VARCHAR#
    </mapped-statement>

    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to AccountParamTO object (JavaBean) properties -->
    <result-map name="getAccountParamTOResult" class="com.see.truetransact.transferobject.operativeaccount.AccountParamTO">
        <property name="actNum" column="ACT_NUM"/>
        <property name="intCrBal" column="INT_CR_BAL"/>
        <property name="intDrBal" column="INT_DR_BAL"/>
        <property name="chkBook" column="CHK_BOOK"/>
        <property name="nroStatus" column="NRO_STATUS"/>
        <property name="mobileBanking" column="MOBILE_BANKING"/>
        <property name="atmCard" column="ATM_CARD"/>
        <property name="atmCardNo" column="ATM_CARD_NO"/>
        <property name="atmCardExprdt" column="ATM_CARD_EXPRDT"/>
        <property name="crCard" column="CR_CARD"/>
        <property name="crCardNo" column="CR_CARD_NO"/>
        <property name="crCardExprdt" column="CR_CARD_EXPRDT"/>
        <property name="drCard" column="DR_CARD"/>
        <property name="drCardNo" column="DR_CARD_NO"/>
        <property name="drCardExprdt" column="DR_CARD_EXPRDT"/>
        <property name="abb" column="ABB"/>
        <property name="abbChrg" column="ABB_CHRG"/>
        <property name="npa" column="NPA"/>
        <property name="npaDt" column="NPA_DT"/>
        <property name="stopPayChrg" column="STOP_PAY_CHRG"/>
        <property name="flexi" column="FLEXI"/>
        <property name="minBal1Flexi" column="MIN_BAL1_FLEXI"/>
        <property name="minBal2Flexi" column="MIN_BAL2_FLEXI"/>
        <property name="actOpenChrg" column="ACT_OPEN_CHRG"/>
        <property name="chkReturn" column="CHK_RETURN"/>
        <property name="inopChrg" column="INOP_CHRG"/>
        <property name="statChrg" column="STAT_CHRG"/>
        <property name="passBook" column="PASS_BOOK"/>
        <property name="nonmainChrg" column="NONMAIN_CHRG"/>
        <property name="lastDrIntAppldt" column="LAST_DR_INT_APPLDT"/>
        <property name="custgrpLimitValidation" column="CUSTGRP_LIMIT_VALIDATION"/>
        <property name="minActBal" column="MIN_ACT_BAL"/>
        <property name="chkBookChrg" column="CHK_BOOK_CHRG"/>
        <property name="reqFlexiPd" column="REQ_FLEXI_PD"/>
        <property name="miscServChrg" column="MISC_SERV_CHRG"/>
        <property name="folioChrg" column="FOLIO_CHRG"/>
        <property name="actClosingChrg" column="ACT_CLOSING_CHRG"/>
        <property name="statFreq" column="STAT_FREQ"/>
        <property name="excessWithdChrg" column="EXCESS_WITHD_CHRG"/>
        <property name="lastCrIntAppldt" column="LAST_CR_INT_APPLDT"/>
        <property name="atmCardValidfrom" column="ATM_CARD_VALIDFROM"/>
        <property name="crCardValidfrom" column="CR_CARD_VALIDFROM"/>
        <property name="drCardValidfrom" column="DR_CARD_VALIDFROM"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="hideBalance" column="HIDE_BALANCE"/>
        <property name="showBalanceTo" column="SHOW_BALANCE_TO"/>
    </result-map>
    <mapped-statement name="getSelectAccountParamTO" result-map="getAccountParamTOResult" >
        SELECT * FROM ACT_PARAM_DETAIL 
        WHERE ACT_NUM = #value:VARCHAR#
    </mapped-statement>
    
    
    <!-- Use AccountNomineeTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertNomineeTOOA" inline-parameters="true">
        INSERT INTO ACT_NOMINEE_DETAIL
        (ACT_NUM, NOMINEE_ID, NOMINEE_NAME, RELATIONSHIP, STREET, AREA, CITY, STATE, PIN_CODE, AREA_CODE, PH_NO, SHARE_PER, NOMINEE_STATUS, NOMINEE_DOB, GUARDIAN_NAME, G_STREET, G_AREA, G_CITY, G_STATE, G_PIN_CODE, G_AREA_CODE, G_PH_NO, G_RELATIONSHIP, COUNTRY_CODE, G_COUNTRY_CODE, STATUS, STATUS_BY, STATUS_DT, CUST_ID
        ) VALUES (
        #actNum:VARCHAR#, #nomineeId:VARCHAR#, #nomineeName:VARCHAR#, #relationship:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, #city:VARCHAR#, #state:VARCHAR#, #pinCode:VARCHAR#, #areaCode:VARCHAR#, #phNo:VARCHAR#, #sharePer:NUMERIC#, #nomineeStatus:VARCHAR#, #nomineeDob:DATE#, #guardianName:VARCHAR#, #gStreet:VARCHAR#, #gArea:VARCHAR#, #gCity:VARCHAR#, #gState:VARCHAR#, #gPinCode:VARCHAR#, #gAreaCode:VARCHAR#, #gPhNo:VARCHAR#, #gRelationship:VARCHAR#, #countryCode:VARCHAR#, #gCountryCode:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #custId:VARCHAR#)
    </mapped-statement>

    <!-- Use AccountNomineeTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateNomineeTOOA" inline-parameters="true">
        UPDATE ACT_NOMINEE_DETAIL SET 
<!--	ACT_NUM = #actNum:VARCHAR#,
	NOMINEE_ID = #nomineeId:VARCHAR#,-->
        NOMINEE_NAME = #nomineeName:VARCHAR#,
        RELATIONSHIP = #relationship:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        PIN_CODE = #pinCode:VARCHAR#,
        AREA_CODE = #areaCode:VARCHAR#,
        PH_NO = #phNo:VARCHAR#,
        SHARE_PER = #sharePer:NUMERIC#,
        NOMINEE_STATUS = #nomineeStatus:VARCHAR#,
        NOMINEE_DOB = #nomineeDob:DATE#,
        GUARDIAN_NAME = #guardianName:VARCHAR#,
        G_STREET = #gStreet:VARCHAR#,
        G_AREA = #gArea:VARCHAR#,
        G_CITY = #gCity:VARCHAR#,
        G_STATE = #gState:VARCHAR#,
        G_PIN_CODE = #gPinCode:VARCHAR#,
        G_AREA_CODE = #gAreaCode:VARCHAR#,
        G_PH_NO = #gPhNo:VARCHAR#,
        G_RELATIONSHIP = #gRelationship:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        G_COUNTRY_CODE = #gCountryCode:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#, 
        CUST_ID = #custId:VARCHAR#        
        WHERE ACT_NUM = #actNum:VARCHAR# and NOMINEE_ID = #nomineeId:VARCHAR#
    </mapped-statement>

    <!-- Use AccountNomineeTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteNomineeTOOA" inline-parameters="true">
        DELETE FROM ACT_NOMINEE_DETAIL 
        WHERE ACT_NUM = #value:VARCHAR# 
        and (STATUS ='MODIFIED' OR STATUS = 'CREATED')
    </mapped-statement>

    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to AccountNomineeTO object (JavaBean) properties -->
    <result-map name="getNomineeTOResultOA" class="com.see.truetransact.transferobject.common.nominee.NomineeTO">
        <property name="actNum" column="ACT_NUM"/>

        <property name="nomineeId" column="NOMINEE_ID"/>
        <property name="nomineeName" column="NOMINEE_NAME"/>
        <property name="relationship" column="RELATIONSHIP"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="pinCode" column="PIN_CODE"/>
        <property name="areaCode" column="AREA_CODE"/>
        <property name="phNo" column="PH_NO"/>
        <property name="sharePer" column="SHARE_PER"/>
        <property name="nomineeStatus" column="NOMINEE_STATUS"/>
        <property name="nomineeDob" column="NOMINEE_DOB"/>
        <property name="guardianName" column="GUARDIAN_NAME"/>
        <property name="gStreet" column="G_STREET"/>
        <property name="gArea" column="G_AREA"/>
        <property name="gCity" column="G_CITY"/>
        <property name="gState" column="G_STATE"/>
        <property name="gPinCode" column="G_PIN_CODE"/>
        <property name="gAreaCode" column="G_AREA_CODE"/>
        <property name="gPhNo" column="G_PH_NO"/>
        <property name="gRelationship" column="G_RELATIONSHIP"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="gCountryCode" column="G_COUNTRY_CODE"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="custId" column="CUST_ID"/>        
    </result-map>
    <mapped-statement name="getSelectNomineeTOOA" result-map="getNomineeTOResultOA" >
        SELECT * FROM ACT_NOMINEE_DETAIL 
        WHERE ACT_NUM = #value:VARCHAR# AND(STATUS!='DELETED' OR STATUS IS NULL)
    </mapped-statement>
<!--================================================================================-->
    <!--==ACT_POA==-->

    <!-- Use AccountPoATO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertPowerAttorneyTOOA" inline-parameters="true">
        INSERT INTO ACT_POA
        (ACT_NUM, POA_NO, POA_HOLDER_NAME, STREET, AREA, CITY, STATE, COUNTRY_CODE, PINCODE, PHONE, PERIOD_FROM, PERIOD_TO, REMARKS, AUTHORIZE_REMARKS, AUTHORIZE_STATUS, STATUS, TO_WHOM, ADDR_TYPE, STATUS_BY, STATUS_DT, CUST_ID
        ) VALUES (
        #borrowNo:VARCHAR#, #poaNo:VARCHAR#, #poaHolderName:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, #city:VARCHAR#, #state:VARCHAR#, #countryCode:VARCHAR#, #pincode:VARCHAR#, #phone:VARCHAR#, #periodFrom:VARCHAR#, #periodTo:VARCHAR#, #remarks:VARCHAR#, #authorizeRemarks:VARCHAR#, #authorizeStatus:VARCHAR#, #status:VARCHAR#, #toWhom:VARCHAR#, #addrType:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #custId:VARCHAR#)
    </mapped-statement>

    <!-- Use AccountPoATO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updatePowerAttorneyTOOA" inline-parameters="true">
        UPDATE ACT_POA SET 
<!--		ACT_NUM = #actNum:VARCHAR#,
		POA_NO = #poaNo:VARCHAR#,-->
        POA_HOLDER_NAME = #poaHolderName:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        PINCODE = #pincode:VARCHAR#,
        PHONE = #phone:VARCHAR#,
        PERIOD_FROM = #periodFrom:VARCHAR#,
        PERIOD_TO = #periodTo:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
<!--		AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,-->
        STATUS = #status:VARCHAR#,
        TO_WHOM = #toWhom:VARCHAR#,
        ADDR_TYPE = #addrType:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        CUST_ID = #custId:VARCHAR# 
        WHERE ACT_NUM = #borrowNo:VARCHAR# AND POA_NO = #poaNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

    <!-- Use AccountPoATO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deletePowerAttorneyTOOA" inline-parameters="true">
        UPDATE ACT_POA SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACT_NUM = #borrowNo:VARCHAR# AND POA_NO = #poaNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to AccountPoATO object (JavaBean) properties -->
    <result-map name="getPowerAttorneyTOResultOA" class="com.see.truetransact.transferobject.common.powerofattorney.PowerAttorneyTO">
        <property name="borrowNo" column="ACT_NUM"/>
        <property name="poaNo" column="POA_NO"/>
        <property name="poaHolderName" column="POA_HOLDER_NAME"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="pincode" column="PINCODE"/>
        <property name="phone" column="PHONE"/>
        <property name="periodFrom" column="PERIOD_FROM"/>
        <property name="periodTo" column="PERIOD_TO"/>
        <property name="remarks" column="REMARKS"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="status" column="STATUS"/>
        <property name="toWhom" column="TO_WHOM"/>
        <property name="addrType" column="ADDR_TYPE"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="custId" column="CUST_ID"/>
    </result-map>
    <mapped-statement name="getSelectPowerAttorneyTOOA" result-map="getPowerAttorneyTOResultOA" >
        SELECT * FROM ACT_POA 
        WHERE ACT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(POA_NO)
    </mapped-statement>
    
    <mapped-statement name="getSelectPowerAttorneyMaxSLNOOA" result-class="java.util.HashMap" >
        SELECT MAX(POA_NO) AS MAX_POA_NO FROM ACT_POA WHERE ACT_NUM = #borrowNo:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
    
    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to AccountPoATO object (JavaBean) properties -->
    <!--result-map name="getClosingAccountDetailsMap" class="java.util.HashMap">
	<property name="poaId" column="POA_ID"/>
	<property name="periodFrom" column="PERIOD_FROM"/>
	<property name="periodTo" column="PERIOD_TO"/>
    </result-map-->
    <dynamic-mapped-statement name="getClosingAccountDetails" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT ACTMAST.PROD_ID, ACPROD.AC_HD_ID, ACHD.AC_HD_DESC, 
        get_cust_name(cust.cust_id) AS "CUSTOMER NAME", 
        CA.STREET AS HOUSE_NAME,
        ACTCLOS.ACT_NUM, ACTMAST.AVAILABLE_BALANCE, ACTCLOS.UNUSED_CHK, ACTCLOS.ACT_CLOSING_CHRG, ACTCLOS.INT_PAYABLE, ACTCLOS.CHRG_DETAILS, ACTCLOS.PAYABLE_BAL, ACTCLOS.STATUS_BY, ACTCLOS.AUTHORIZE_STATUS 
        FROM ACT_MASTER ACTMAST, OP_AC_PRODUCT ACPROD, AC_HD ACHD, CUSTOMER CUST, ACT_CLOSING ACTCLOS ,CUST_ADDR CA
        WHERE ACTCLOS.ACT_NUM=ACTMAST.ACT_NUM AND 
        ACTMAST.PROD_ID=ACPROD.PROD_ID AND 
        ACPROD.AC_HD_ID=ACHD.AC_HD_ID AND 
        ACTMAST.CUST_ID=CUST.CUST_ID AND 
        CA.CUST_ID= CUST.CUST_ID AND
        ACTCLOS.ACT_NUM=#ACT_NUM:VARCHAR# AND ACTCLOS.AUTHORIZE_STATUS IS NULL AND
        ACTCLOS.STATUS_DT IN (SELECT MAX(STATUS_DT) FROM ACT_CLOSING WHERE ACT_NUM = #ACT_NUM#)
        <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "DELETED" >
                    ACTCLOS.STATUS = 'DELETED'
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>    
    </dynamic-mapped-statement>
    
    <!-- 
        where act.cust_id=cust.cust_id and act.ACT_STATUS_ID='OPERATIONAL' 
        and cust.status!='DELETED' and act.prod_id=#PRODID#
    -->
    <dynamic-mapped-statement name="getSelectAccountList" result-class="java.util.LinkedHashMap" >
        SELECT decode(CUST.cust_type,'INDIVIDUAL',CONCAT(CONCAT(CONCAT(CONCAT(CUST.FNAME, ' '), CUST.MNAME), ' '), CUST.LNAME),CUST.comp_name ) AS "CUSTOMER NAME",
        ACT.ACT_NUM AS "ACCOUNT NUMBER",CA.STREET AS HOUSE_NAME,ACT.AVAILABLE_BALANCE as AVAILABLE_BALANCE
        FROM ACT_MASTER ACT, CUST_ADDR CA,
        CUSTOMER CUST 
        WHERE ACT.CUST_ID=CUST.CUST_ID 
        AND ACT.ACT_STATUS_ID IN('OPERATIONAL','NEW', 'PART_FREEZE','CREDIT_FREEZE','DEBIT_FREEZE','TOTAL_FREEZE','COMP_FREEZE') AND
        ACT.AUTHORIZATION_STATUS='AUTHORIZED'
        AND CUST.STATUS!='DELETED' 
        AND ACT.PROD_ID= #PRODID:VARCHAR# 
        AND CA.CUST_ID = CUST.CUST_ID
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="ACT_NUM">
                    ACT.ACT_NUM=#ACT_NUM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND ACT.BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND
            <!--LAST_TRANS_DT IS NOT NULL wrongly they opened they want to close   AND -->
        (ACT.STATUS!='DELETED' OR ACT.STATUS = NULL)
    </dynamic-mapped-statement>
    
    <!--mapped-statement name="getSelectAccountListForLien" result-class="java.util.LinkedHashMap" >
		select cust.fname || ' ' || cust.mname || ' ' || cust.lname as 
                    "Customer Name",act.act_num as "Account Number" 
                    from act_master act, customer cust 
                    where act.cust_id=cust.cust_id and 
                    (act.ACT_STATUS_ID='OPERATIONAL' 
                     OR act.ACT_STATUS_ID = 'NEW'
                    or act.ACT_STATUS_ID='PART_FREEZE')
                    and cust.status!='DELETED' and act.prod_id=#PRODID# and
                     (act.status!='DELETED' or act.status = null)
    </mapped-statement -->
    
    <mapped-statement name="getLienAccountHead" result-class="java.util.LinkedHashMap" >
        SELECT LIEN_AC_HD, PROD_ID, LIEN_ACT_NUM, LIEN_AMT FROM ACT_LIEN WHERE ACT_NUM = #value:VARCHAR#
        AND AUTHORIZE_STATUS = 'AUTHORIZED' AND STATUS != 'DELETED' AND LIEN_STATUS = 'LIENED'
    </mapped-statement>
    
    <mapped-statement name="getLienAccounts" result-class="java.util.LinkedHashMap" >
        SELECT ACCT_HEAD FROM LOANS_PRODUCT LP, LOANS_FACILITY_DETAILS LFD WHERE 
        LP.PROD_ID = LFD.PROD_ID AND LFD.ACCT_NUM = #value:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getSelectAccountListForLien" result-class="java.util.LinkedHashMap" >
       <!-- SELECT FNAME || ' ' || MNAME || ' ' || LNAME AS "Customer Name", A.ACT_NUM AS "Account Number" 
        FROM  CUSTOMER C,  ACT_MASTER A
        WHERE A.CUST_ID = C.CUST_ID
        AND A.PROD_ID = #PRODID:VARCHAR#
        AND A.BRANCH_CODE = #BRANCH_CODE:VARCHAR#
        AND A.AUTHORIZATION_STATUS = 'AUTHORIZED'
        AND A.ACT_STATUS_ID IN ('OPERATIONAL', 'NEW', 'PART_FREEZE','CREDIT','DEBIT','BOTH','COMP_FREEZE')
       AND A.ACT_NUM NOT IN (SELECT ACT_NUM FROM ACT_LIEN WHERE STATUS != 'DELETED' AND LIEN_STATUS != 'UNLIENED') -->
        SELECT get_cust_name(C.CUST_ID)
        AS "CUSTOMER NAME", A.ACT_NUM AS "ACCOUNT NUMBER" 
        FROM  CUSTOMER C,  ACT_MASTER A
        WHERE A.CUST_ID = C.CUST_ID
        AND A.PROD_ID = #PRODID:VARCHAR#
        AND A.BRANCH_CODE = #BRANCH_CODE:VARCHAR#
        AND A.AUTHORIZATION_STATUS = 'AUTHORIZED'
        AND A.ACT_STATUS_ID IN ('OPERATIONAL', 'NEW', 'PART_FREEZE','CREDIT','DEBIT','BOTH','COMP_FREEZE')
        AND A.CLEAR_BALANCE > 0
        AND  NOT EXISTS(SELECT ACT_NUM FROM ACT_LIEN WHERE STATUS != 'DELETED' AND LIEN_STATUS != 'UNLIENED' AND ACT_LIEN.ACT_NUM=A.ACT_NUM) 
    </mapped-statement >
    
    <mapped-statement name="getSelectAccountListForLienNumberName" result-class="java.util.LinkedHashMap" >
        SELECT get_cust_name(C.CUST_ID) 
        AS "CUSTOMER NAME", A.ACT_NUM AS "ACCOUNT NUMBER" 
        FROM  CUSTOMER C,  ACT_MASTER A
        WHERE A.CUST_ID = C.CUST_ID
        AND A.PROD_ID = #PRODID:VARCHAR#
        AND A.act_num=#acct_num:VARCHAR#
        AND A.AUTHORIZATION_STATUS = 'AUTHORIZED'
        AND A.ACT_STATUS_ID IN ('OPERATIONAL', 'NEW', 'PART_FREEZE','CREDIT','DEBIT','BOTH','COMP_FREEZE')
        AND A.CLEAR_BALANCE > 0
        AND  NOT EXISTS(SELECT ACT_NUM FROM ACT_LIEN WHERE STATUS != 'DELETED' AND LIEN_STATUS != 'UNLIENED' AND ACT_LIEN.ACT_NUM=A.ACT_NUM) 
    </mapped-statement >
    
    
    <mapped-statement name="getSelectClosingAccountList" result-class="java.util.LinkedHashMap" >
		<!--select cust.fname || ' ' || cust.mname || ' ' || cust.lname as "Customer Name",act.act_num as "Account Number",
                act.PROD_ID as "Product ID"  
                from act_master act, customer cust 
                where act.cust_id=cust.cust_id and act.ACT_STATUS_ID='CLOSED' and 
                cust.status!='DELETED' and  (act.status!='DELETED' or act.status = null)
                <and act.act_num NOT in (SELECT ACT_NUM FROM ACT_CLOSING WHERE STATUS !='DELETED'
                AND AUTHORIZE_STATUS != 'AUTHORIZED')>
                and  NOT EXISTS (SELECT ACT_NUM FROM ACT_CLOSING WHERE STATUS !='DELETED'
                AND AUTHORIZE_STATUS != 'AUTHORIZED' AND act.act_num=ACT_NUM)-->
        select get_cust_name(CUST.CUST_ID) 
        AS "Customer Name", act.act_num as "Account Number", act.PROD_ID as "Product ID"  
        from act_master act, customer cust ,act_closing ac  where act.cust_id=cust.cust_id and
        act.ACT_STATUS_ID='CLOSED'  and ( ac.AUTHORIZE_STATUS NOT IN ('AUTHORIZED','REJECTED') OR 
        ac.AUTHORIZE_STATUS IS NULL) AND AC.ACT_NUM=act.act_num  AND cust.status!='DELETED' and 
        (act.status!='DELETED' or act.status = null) and ac.status!='DELETED' and NOT EXISTS 
        (SELECT ACT_NUM FROM ACT_CLOSING WHERE STATUS !='DELETED' AND AUTHORIZE_STATUS != 'AUTHORIZED' 
        AND act.act_num=ACT_CLOSING.ACT_NUM AND AUTHORIZE_STATUS IS NULL)
    </mapped-statement>
    
    <mapped-statement name="getSelectClosingAccountListTL" result-class="java.util.LinkedHashMap" >
                <!--SELECT get_cust_name(CUST.CUST_ID) 
                AS "Customer Name",
                ACT.ACCT_NUM AS "Account Number",
                ACT.PROD_ID AS "Product ID"  FROM LOANS_FACILITY_DETAILS ACT, CUSTOMER CUST,ACT_CLOSING AC ,LOANS_BORROWER LB WHERE LB.CUST_ID=CUST.CUST_ID 
                AND LB.BORROW_NO=ACT.BORROW_NO 
                AND ACCT_STATUS='CLOSED'  AND ( AC.AUTHORIZE_STATUS !='AUTHORIZED'  OR AC.AUTHORIZE_STATUS IS NULL) AND AC.ACT_NUM=ACT.ACCT_NUM  AND CUST.STATUS!='DELETED' AND  (ACT.STATUS!='DELETED' OR ACT.STATUS = null) 
                and 
                NOT EXISTS (SELECT ACT_NUM FROM ACT_CLOSING WHERE STATUS !='DELETED' AND AUTHORIZE_STATUS != 'AUTHORIZED' 
                AND ACT.ACCT_NUM=ACT_CLOSING.ACT_NUM AND AUTHORIZE_STATUS IS NULL)-->
        SELECT get_cust_name(CUST.CUST_ID) AS "Customer 
        Name", ACT.ACCT_NUM AS "Account Number", ACT.PROD_ID AS "Product ID" FROM LOANS_FACILITY_DETAILS ACT, CUSTOMER 
        CUST,ACT_CLOSING AC ,LOANS_BORROWER LB WHERE LB.CUST_ID=CUST.CUST_ID AND LB.BORROW_NO=ACT.BORROW_NO AND 
        ACCT_STATUS='CLOSED' AND AC.AUTHORIZE_STATUS IS NULL AND  AC.ACT_NUM=ACT.ACCT_NUM AND AC.STATUS!='DELETED' 
        AND (AC.REMARKS IS NULL OR AC.REMARKS!='DEPOSIT_TRANSACTION')
        AND BRANCH_ID= #BRANCH_CODE:VARCHAR#
    </mapped-statement>
    
    <!-- Use AccountClosingTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertAccountClosingTO" inline-parameters="true">
        INSERT INTO ACT_CLOSING
        (ACT_NUM, UNUSED_CHK, ACT_CLOSING_CHRG, INT_PAYABLE, CHRG_DETAILS, PAYABLE_BAL, STATUS, STATUS_BY,REMARKS, STATUS_DT,AD_CREDIT_INT_AMT,SUBSIDY_AMT,REBATE_AMT,INSURANCE_CHARGE,PRINCIPAL_WAIVE_AMT
        ) VALUES (
        #actNum:VARCHAR#, #unusedChk:NUMERIC#, #actClosingChrg:NUMERIC#, #intPayable:NUMERIC#, #chrgDetails:NUMERIC#, #payableBal:NUMERIC#, #status:VARCHAR#, #statusBy:VARCHAR#,#remarks:VARCHAR#, (SELECT SYS_DATE() FROM DUAL),#creditIntAD:NUMERIC#,#susbsidyAmt:NUMERIC#,#rebateInterest:NUMERIC#,#insuranceCharges:NUMERIC#,#principalWaiveAmt:NUMERIC#<!--#statusDt:DATE#-->)
    </mapped-statement>

	<!-- Use AccountClosingTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateAccountClosingTO" inline-parameters="true">
        UPDATE ACT_CLOSING SET 
<!--		ACT_NUM = #actNum:VARCHAR#,-->
        UNUSED_CHK = #unusedChk:NUMERIC#,
        ACT_CLOSING_CHRG = #actClosingChrg:NUMERIC#,
        INT_PAYABLE = #intPayable:NUMERIC#,
        CHRG_DETAILS = #chrgDetails:NUMERIC#,
        PAYABLE_BAL = #payableBal:NUMERIC#,
        STATUS = #status:VARCHAR#, 
        STATUS_BY = #statusBy:VARCHAR#, 
        SUBSIDY_AMT=#susbsidyAmt:NUMERIC#,
        STATUS_DT = (SELECT SYS_DATE() FROM DUAL),
        INSURANCE_CHARGE =#insuranceCharges:NUMERIC# <!--#statusDt:DATE#-->
        WHERE ACT_NUM = #actNum:VARCHAR# AND
        STATUS_DT IN (SELECT MAX(STATUS_DT) FROM ACT_CLOSING WHERE ACT_NUM = #actNum:VARCHAR#)
    </mapped-statement>

    <mapped-statement name="updateAccountClosingTOForDep" inline-parameters="true">
        UPDATE ACT_CLOSING SET 
        UNUSED_CHK = #unusedChk:NUMERIC#,
        ACT_CLOSING_CHRG = #actClosingChrg:NUMERIC#,
        INT_PAYABLE = #intPayable:NUMERIC#,
        CHRG_DETAILS = #chrgDetails:NUMERIC#,
        PAYABLE_BAL = #payableBal:NUMERIC#,
        STATUS = #status:VARCHAR#, 
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = (SELECT SYS_DATE() FROM DUAL),
        INSURANCE_CHARGE=#insuranceCharges:NUMERIC# <!--#statusDt:DATE#-->
        WHERE ACT_NUM = #actNum:VARCHAR# AND
        STATUS_DT IN (SELECT MAX(STATUS_DT) FROM ACT_CLOSING WHERE ACT_NUM = #actNum:VARCHAR#)
        AND STATUS !='DELETED'
    </mapped-statement>
        
        
	<!-- Use AccountClosingTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteAccountClosingTO" inline-parameters="true">
        UPDATE ACT_CLOSING SET STATUS = #status:VARCHAR#, 
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = (SELECT SYS_DATE() FROM DUAL) <!--#statusDt:DATE#-->
        WHERE ACT_NUM = #actNum:VARCHAR# AND
        STATUS_DT IN (SELECT MAX(STATUS_DT) FROM ACT_CLOSING WHERE ACT_NUM = #actNum:VARCHAR#)
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to AccountClosingTO object (JavaBean) properties -->
    <result-map name="getAccountClosingTOResult" class="com.see.truetransact.transferobject.operativeaccount.AccountClosingTO">
        <property name="actNum" column="ACT_NUM"/>
        <property name="unusedChk" column="UNUSED_CHK"/>
        <property name="actClosingChrg" column="ACT_CLOSING_CHRG"/>
        <property name="intPayable" column="INT_PAYABLE"/>
        <property name="chrgDetails" column="CHRG_DETAILS"/>
        <property name="payableBal" column="PAYABLE_BAL"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="susbsidyAmt" column="SUBSIDY_AMT"/>
        <property name="insuranceCharges" column="INSURANCE_CHARGE"/>
    </result-map>

    <mapped-statement name="updateAccountMasterStatusId" inline-parameters="true">
        UPDATE ACT_MASTER SET 
        ACT_STATUS_ID = #actStatusId:VARCHAR#,
        ACT_STATUS_DT = #actStatusDt:TIMESTAMP#,
        CLOSED_DT = (SELECT SYS_DATE() FROM DUAL)
        WHERE ACT_NUM = #actNum:VARCHAR#
    </mapped-statement>	
   
    <dynamic-mapped-statement name="getStatusForAccount" result-class="java.util.HashMap" >
        SELECT ACT_NUM, ACT_STATUS_ID, CLOSED_BY, CLOSED_DT FROM ACT_MASTER
        <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "" property = "CLOSED_DT" >
                    AS OF TIMESTAMP #CLOSED_DT:DATE#
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        WHERE ACT_NUM=#ACT_NUM:VARCHAR#
    </dynamic-mapped-statement>
        
    <mapped-statement name="updateStatusForAccount" inline-parameters="true">
        UPDATE ACT_MASTER SET 
        ACT_STATUS_ID = #ACT_STATUS_ID:VARCHAR#,
        ACT_STATUS_DT = NULL,
        CLOSED_DT = NULL
        WHERE ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>	
   
        
    <!--================================================================================-->
    <!--Miscellaneous queries-->
    <!-- For generating the customer list -->
    <result-map name="getCustomerResultList" class="java.util.LinkedHashMap">
        <property name="customerId" column="CUSTOMER_ID"/>
        <property name="customerName" column="CUSTOMER_NAME"/>
    </result-map>
    <dynamic-mapped-statement name="getCustomerList" result-map="getCustomerResultList" >
        SELECT CUST_ID CUSTOMER_ID, CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) CUSTOMER_NAME 
        FROM CUSTOMER 
        where (status!='DELETED' or status is null) and AUTHORIZE_STATUS='AUTHORIZED'
         <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
               <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "CUSTOMER_ID" >
                    UPPER(CUST_ID) LIKE UPPER('%$CUSTOMER_ID$%')
                </isNotEmpty>
            </isParameterPresent>
              <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "CUSTOMER_NAME" >
                    UPPER(CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME)) LIKE UPPER('%$CUSTOMER_NAME$%')
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
    
    <!-- For generating the branch details -->
    <result-map name="getBranchDetailsResult" class="java.util.LinkedHashMap">
        <property name="branchName" column="BRANCH_NAME"/>
    </result-map>
    <mapped-statement name="getBranchDetails" result-map="getBranchDetailsResult" >
        SELECT BRANCH_NAME
        FROM BRANCH_MASTER
        WHERE BRANCH_CODE = #value:VARCHAR#
    </mapped-statement>
    
    <!-- For generating the transfering account details -->
    <result-map name="getTransActDetailsResult" class="java.util.LinkedHashMap">
        <property name="actNum" column="ACT_NUM"/>
        <property name="createDate" column="CREATE_DT"/>
        <property name="clearBalance" column="CLEAR_BALANCE"/>
        <property name="remarks" column="ACT_STATUS_ID"/>
    </result-map>
    <mapped-statement name="getTransActDetails" result-map="getTransActDetailsResult" >
        SELECT ACT_NUM, CREATE_DT, CLEAR_BALANCE, ACT_STATUS_ID
        FROM ACT_MASTER
        WHERE ACT_NUM = #value:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getTransActDetailsSA" result-map="getTransActDetailsResult" >
        SELECT SUSPENSE_ACCT_NUM AS ACT_NUM, SUSPENSE_OPEN__DATE AS CREATE_DT, CLEAR_BALANCE, STATUS AS ACT_STATUS_ID
        FROM SUSPENSE_ACCOUNT_MASTER
        WHERE SUSPENSE_ACCT_NUM = #value:VARCHAR#
    </mapped-statement>
    
    <!-- For generating the customer details -->
    <result-map name="getCustomerDetailsResult" class="java.util.HashMap">
        <property name="customerName" column="CUSTOMER_NAME"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="pinCode" column="PIN_CODE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
    </result-map>
    <mapped-statement name="getCustomerDetails" result-map="getCustomerDetailsResult" >
        SELECT DECODE (CUST_TYPE, 'CORPORATE', COMP_NAME, CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME)) CUSTOMER_NAME, 
        STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE
        FROM CUSTOMER, CUST_ADDR
        WHERE CUSTOMER.CUST_ID = #value:VARCHAR# and CUSTOMER.CUST_ID = CUST_ADDR.CUST_ID
    </mapped-statement>
    
    <!-- For generating the accounts list -->
    <result-map name="getAccountResultList" class="java.util.LinkedHashMap">
        <property name="accountNo" column="ACT_NUM"/>
        <property name="customerName" column="CUSTOMER_NAME"/>
        <property name="customerType ID" column="CUST_TYPE_ID"/>
        <property name="customerType" column="CUST_TYPE"/>
        <property name="Name" column="ACCT_NAME"/>
        <property name="authorizationStatus" column="AUTHORIZATION_STATUS"/>
    </result-map>
    <dynamic-mapped-statement name="getAccountList" result-map="getAccountResultList" >
        <!--SELECT ACT_NUM, get_cust_name(C.CUST_ID) CUSTOMER_NAME,            
        CUST_TYPE_ID AS CUST_TYPE_ID, (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS CUST_TYPE, ACCT_NAME AS ACCT_NAME, AUTHORIZATION_STATUS,OLD_ACT_NUM       
        FROM ACT_MASTER, CUSTOMER,OLD_AC_NOS OAN         
        WHERE ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID and 
        OAN.NEW_ACT_NUM(+)= ACT_MASTER.ACT_NUM AND     
        ACT_MASTER.BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND         
        (CUSTOMER.status!='DELETED' or CUSTOMER.status is null) and       
        (ACT_MASTER.STATUS!='DELETED' or ACT_MASTER.STATUS is null)
        and (ACT_MASTER.ACT_STATUS_ID!='CLOSED')-->
        SELECT ACT_NUM,
        get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,CUST_TYPE_ID AS CUST_TYPE_ID,
        (SELECT LOOKUP_DESC
        FROM LOOKUP_MASTER
        WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE'
        OR LOOKUP_ID = 'CUSTOMER.TYPE')
        AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS CUST_TYPE,
        ACCT_NAME AS ACCT_NAME,
        AUTHORIZATION_STATUS,
        OLD_ACT_NUM
        FROM ACT_MASTER left outer join OLD_AC_NOS OAN on  OAN.NEW_ACT_NUM = ACT_MASTER.ACT_NUM join
        CUSTOMER on ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID
        WHERE 
        ACT_MASTER.BRANCH_CODE = #BRANCH_CODE:VARCHAR#
        AND (CUSTOMER.STATUS != 'DELETED'
        OR CUSTOMER.STATUS IS NULL)
        AND (ACT_MASTER.STATUS != 'DELETED'
        OR ACT_MASTER.STATUS IS NULL)
        AND (ACT_MASTER.ACT_STATUS_ID != 'CLOSED')
        <dynamic>
               <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="ACT_NUM">
                    UPPER(ACT_MASTER.ACT_NUM) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUSTOMER_NAME">
                        UPPER(get_cust_name(CUSTOMER.CUST_ID)) LIKE UPPER('%$CUSTOMER_NAME$%')
                    </isNotNull>
                </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_TYPE_ID">
                    UPPER(CUST_TYPE_ID) LIKE UPPER('%$CUST_TYPE_ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "ACT_NUM" >
                    (ACT_MASTER.ACT_NUM=#ACT_NUM:VARCHAR#  OR OAN.OLD_ACT_NUM=#ACT_NUM:VARCHAR#)
                </isNotEmpty>
            </isParameterPresent>
            
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "DELETED" >
                    (ACT_MASTER.AUTHORIZATION_STATUS NOT IN ('AUTHORIZED', 'REJECTED') OR ACT_MASTER.AUTHORIZATION_STATUS IS NULL)
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        ORDER BY ACT_NUM
    </dynamic-mapped-statement>
    
    <!-- For generating the account details -->
    <result-map name="getAccountDetailsResult" class="java.util.LinkedHashMap">
        <property name="customerId" column="CUSTOMER_ID"/>
        <property name="customerName" column="CUSTOMER_NAME"/>
        <property name="acHead" column="AC_HEAD"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="branchName" column="BRANCH_NAME"/>
    </result-map>
    <mapped-statement name="getAccountDetails" result-map="getAccountDetailsResult" >
        SELECT
        ACT_MASTER.CUST_ID CUSTOMER_ID,
        CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) CUSTOMER_NAME,
        CONCAT(CONCAT(CONCAT(AC_HD.AC_HD_ID, ' ['), AC_HD.AC_HD_DESC), ']') AS AC_HEAD,
        ACT_MASTER.BRANCH_CODE BRANCH_CODE,
        BRANCH_MASTER.BRANCH_NAME BRANCH_NAME
        FROM
        ACT_MASTER, CUSTOMER, AC_HD, OP_AC_PRODUCT, BRANCH_MASTER
        WHERE
        ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID and
        AC_HD.AC_HD_ID = OP_AC_PRODUCT.AC_HD_ID and
        ACT_MASTER.PROD_ID = OP_AC_PRODUCT.PROD_ID and
        ACT_MASTER.BRANCH_CODE = BRANCH_MASTER.BRANCH_CODE and
        ACT_MASTER.ACT_NUM = #value:VARCHAR#
    </mapped-statement>
    
    <!-- For generating the product interest details -->
    <result-map name="getProductInterestsResult" class="java.util.LinkedHashMap">
        <property name="crInterestRate" column="APPL_CR_INT_RATE"/>
        <property name="drInterestRate" column="APPL_DEBIT_INT_RATE"/>
        <property name="penalInterestRate" column="PENAL_INT_DEBIT_BALACCT"/>
        <property name="agClearing" column="AG_CLEARING"/>
    </result-map>
    <mapped-statement name="getProductInterests" result-map="getProductInterestsResult" >
        SELECT
        APPL_CR_INT_RATE,
        APPL_DEBIT_INT_RATE,
        PENAL_INT_DEBIT_BALACCT,
        (APPL_DEBIT_INT_RATE + PENAL_INT_DEBIT_BALACCT) - APPL_CR_INT_RATE AG_CLEARING
        FROM OP_AC_INTPAY_PARAM, OP_AC_INTRECV_PARAM
        WHERE OP_AC_INTPAY_PARAM.PROD_ID = OP_AC_INTRECV_PARAM.PROD_ID AND
        OP_AC_INTPAY_PARAM.PROD_ID = #value:VARCHAR#
    </mapped-statement>
    
    <!--mapped-statement name="lienApplicationRule" result-class="java.util.HashMap" >
        SELECT ACT_STATUS_ID from act_master where act_num=#ACCOUNTNO# 
    </mapped-statement-->
    <mapped-statement name="lienApplicationRule" result-class="java.util.HashMap" >
        SELECT ACT_STATUS_ID from act_master where act_num=#actNum:VARCHAR# 
    </mapped-statement>
    <mapped-statement name="lienApplicationRuleAD" result-class="java.util.HashMap" >
        SELECT Acct_status as ACT_STATUS_ID from loans_facility_details where acct_num=#ACCT_NUM:VARCHAR# 
        and branch_id=#BRANCH_CODE#
    </mapped-statement>
    
<!--Queries for the Validation with Product-->
    <mapped-statement name="getAccountParamData" result-class="java.util.HashMap" >
        SELECT CHK_ALLOWED,INT_REQ,NOMINEE_REQ,TAX_INT_APPLICABLE, NVL(NO_OF_NOMINEE,0) AS NO_OF_NOMINEE, INT_REQ, NVL(STAT_FREQUENCY,0) AS STAT_FREQUENCY,
        LMT_DEFINITION_ALLOWED AS LMT,TEMP_OD_ALLOWED as TOD,STAFF_ACCT_OPENED
        FROM OP_AC_ACCOUNT_PARAM WHERE PROD_ID = #PRODID:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getAccountCardsData" result-class="java.util.HashMap" >
        SELECT ATM_CARD_ISSUED, CR_CARD_ISSUED, DR_CARD_ISSUED, MOBILE_BANKING, ANY_BRANCH_BANKING, NVL(MIN_BAL_ABB,0) AS MIN_BAL_ABB,
        LINKED_FLEXI_ACCT, MIN_BAL1_FLEXIDEPOSIT, MIN_BAL2_FLEXIDEPOSIT FROM  OP_AC_SPCLITEM_PARAM WHERE PROD_ID = #PRODID:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getAccountChargesData" result-class="java.util.HashMap" >
        SELECT * FROM OP_AC_CHARGES_PARAM WHERE PROD_ID = #PRODID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getAccountCreditData" result-class="java.util.HashMap" >
        SELECT CREDIT_INT_GIVEN FROM OP_AC_INTPAY_PARAM WHERE PROD_ID = #PRODID:VARCHAR#
    </mapped-statement>
    
    
    <dynamic-mapped-statement name="getSelectAccountMasterAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT distinct CASE
            WHEN AT.trans_mode = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END as trans_id,ACT_MASTER.ACT_NUM AS ACCOUNTNO, ACT_MASTER.PROD_ID, ACT_MASTER.CUST_ID,get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        AT.AMOUNT,(SELECT LOOKUP_DESC FROM LOOKUP_MASTER 
        WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) 
        AS "Customer Type"
        FROM ACT_MASTER,CUSTOMER ,ALL_TRANS AT 
        WHERE ACT_MASTER.CUST_ID=CUSTOMER.CUST_ID AND AT.TRANS_DT=#TRANS_DT:DATE# 
        and AT.link_batch_id= ACT_MASTER.ACT_NUM 
        AND ACT_MASTER.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND ACT_MASTER.STATUS_BY != #USER_ID:VARCHAR#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_MASTER.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_MASTER.AUTHORIZATION_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_MASTER.AUTHORIZATION_STATUS IS NULL OR 
                ACT_MASTER.AUTHORIZATION_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        UNION
        SELECT NULL AS TRANS_ID,ACT_NUM AS ACCOUNTNO, PROD_ID, ACT_MASTER.CUST_ID,get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        null as amount,(SELECT LOOKUP_DESC FROM LOOKUP_MASTER 
        WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) 
        AS "Customer Type"
        FROM ACT_MASTER,CUSTOMER 
        WHERE ACT_MASTER.CUST_ID=CUSTOMER.CUST_ID 
        AND ACT_MASTER.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND ACT_MASTER.STATUS_BY != #USER_ID:VARCHAR#
        AND ACT_MASTER.STATUS = 'MODIFIED'
        AND ACT_MASTER.CREATE_DT != #TRANS_DT:DATE#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_MASTER.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_MASTER.AUTHORIZATION_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_MASTER.AUTHORIZATION_STATUS IS NULL OR 
                ACT_MASTER.AUTHORIZATION_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        union
        SELECT NULL AS TRANS_ID,ACT_NUM AS ACCOUNTNO, PROD_ID, ACT_MASTER.CUST_ID,get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        ACT_MASTER.OPENING_AMOUNT as amount ,(SELECT LOOKUP_DESC FROM LOOKUP_MASTER 
        WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) 
        AS "Customer Type"
        FROM ACT_MASTER,CUSTOMER 
        WHERE ACT_MASTER.CUST_ID=CUSTOMER.CUST_ID 
        AND ACT_MASTER.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND ACT_MASTER.STATUS_BY != #USER_ID:VARCHAR#
        <!--AND ACT_MASTER.STATUS = 'CREATED'-->
        AND ACT_MASTER.STATUS != 'DELETED'
        AND ACT_MASTER.CREATE_DT = #TRANS_DT:DATE#
        AND ACT_MASTER.OPENING_AMOUNT = 0
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_MASTER.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_MASTER.AUTHORIZATION_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_MASTER.AUTHORIZATION_STATUS IS NULL OR 
                ACT_MASTER.AUTHORIZATION_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        ORDER BY ACCOUNTNO
       </dynamic-mapped-statement> 
       
        <dynamic-mapped-statement name="getSelectAccountMasterAuthorizeTOListWithTransaction" result-class="java.util.LinkedHashMap" >
        SELECT distinct CASE
            WHEN AT.trans_mode = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END as trans_id,ACT_MASTER.ACT_NUM AS ACCOUNTNO, ACT_MASTER.PROD_ID, ACT_MASTER.CUST_ID,get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        AT.AMOUNT,(SELECT LOOKUP_DESC FROM LOOKUP_MASTER 
        WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) 
        AS "Customer Type"
        FROM ACT_MASTER,CUSTOMER ,ALL_TRANS AT 
        WHERE ACT_MASTER.CUST_ID=CUSTOMER.CUST_ID AND AT.TRANS_DT=#TRANS_DT:DATE# 
        and AT.link_batch_id= ACT_MASTER.ACT_NUM 
        AND ACT_MASTER.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND ACT_MASTER.STATUS_BY != #USER_ID:VARCHAR#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_MASTER.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_MASTER.AUTHORIZATION_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_MASTER.AUTHORIZATION_STATUS IS NULL OR 
                ACT_MASTER.AUTHORIZATION_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        ORDER BY ACCOUNTNO
       </dynamic-mapped-statement> 
       
        <dynamic-mapped-statement name="getSelectAccountMasterAuthorizeTOListWithoutTransaction" result-class="java.util.LinkedHashMap" >
        SELECT NULL AS TRANS_ID,ACT_NUM AS ACCOUNTNO, PROD_ID, ACT_MASTER.CUST_ID,get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        null as amount,(SELECT LOOKUP_DESC FROM LOOKUP_MASTER 
        WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) 
        AS "Customer Type"
        FROM ACT_MASTER,CUSTOMER 
        WHERE ACT_MASTER.CUST_ID=CUSTOMER.CUST_ID 
        AND ACT_MASTER.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND ACT_MASTER.STATUS_BY != #USER_ID:VARCHAR#
        AND ACT_MASTER.STATUS = 'MODIFIED'
        AND ACT_MASTER.CREATE_DT != #TRANS_DT:DATE#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_MASTER.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_MASTER.AUTHORIZATION_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_MASTER.AUTHORIZATION_STATUS IS NULL OR 
                ACT_MASTER.AUTHORIZATION_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        union
        SELECT NULL AS TRANS_ID,ACT_NUM AS ACCOUNTNO, PROD_ID, ACT_MASTER.CUST_ID,get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        ACT_MASTER.OPENING_AMOUNT as amount ,(SELECT LOOKUP_DESC FROM LOOKUP_MASTER 
        WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) 
        AS "Customer Type"
        FROM ACT_MASTER,CUSTOMER 
        WHERE ACT_MASTER.CUST_ID=CUSTOMER.CUST_ID 
        AND ACT_MASTER.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND ACT_MASTER.STATUS_BY != #USER_ID:VARCHAR#
        AND ACT_MASTER.STATUS = 'CREATED'
        AND ACT_MASTER.CREATE_DT = #TRANS_DT:DATE#
        AND ACT_MASTER.OPENING_AMOUNT = 0
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_MASTER.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_MASTER.AUTHORIZATION_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_MASTER.AUTHORIZATION_STATUS IS NULL OR 
                ACT_MASTER.AUTHORIZATION_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        ORDER BY ACCOUNTNO
       </dynamic-mapped-statement>  
       
    <dynamic-mapped-statement name="getSelectAccountMasterCashierAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT distinct CASE
            WHEN AT.trans_mode = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END as trans_id,ACT_MASTER.ACT_NUM AS ACCOUNTNO, ACT_MASTER.PROD_ID, ACT_MASTER.CUST_ID,get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        AT.AMOUNT,(SELECT LOOKUP_DESC FROM LOOKUP_MASTER 
        WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) 
        AS "Customer Type"
        FROM ACT_MASTER,CUSTOMER ,ALL_TRANS AT 
        WHERE ACT_MASTER.CUST_ID=CUSTOMER.CUST_ID AND AT.TRANS_DT=#TRANS_DT:DATE# 
        and AT.link_batch_id= ACT_MASTER.ACT_NUM AND
        CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN 'AUTHORIZED' ELSE AT.PAYMENT_STATUS END IS NOT NULL 
        AND ACT_MASTER.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND ACT_MASTER.STATUS_BY != #USER_ID:VARCHAR#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_MASTER.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_MASTER.AUTHORIZATION_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_MASTER.AUTHORIZATION_STATUS IS NULL OR 
                ACT_MASTER.AUTHORIZATION_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        UNION
        SELECT NULL AS TRANS_ID,ACT_NUM AS ACCOUNTNO, PROD_ID, ACT_MASTER.CUST_ID,get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        null as amount ,(SELECT LOOKUP_DESC FROM LOOKUP_MASTER 
        WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) 
        AS "Customer Type"
        FROM ACT_MASTER,CUSTOMER 
        WHERE ACT_MASTER.CUST_ID=CUSTOMER.CUST_ID 
        AND ACT_MASTER.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND ACT_MASTER.STATUS_BY != #USER_ID:VARCHAR#
        AND ACT_MASTER.STATUS = 'MODIFIED'
        AND ACT_MASTER.CREATE_DT != #TRANS_DT:DATE#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_MASTER.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_MASTER.AUTHORIZATION_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_MASTER.AUTHORIZATION_STATUS IS NULL OR 
                ACT_MASTER.AUTHORIZATION_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        union
        SELECT NULL AS TRANS_ID,ACT_NUM AS ACCOUNTNO, PROD_ID, ACT_MASTER.CUST_ID,get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        ACT_MASTER.OPENING_AMOUNT as amount ,(SELECT LOOKUP_DESC FROM LOOKUP_MASTER 
        WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) 
        AS "Customer Type"
        FROM ACT_MASTER,CUSTOMER 
        WHERE ACT_MASTER.CUST_ID=CUSTOMER.CUST_ID 
        AND ACT_MASTER.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND ACT_MASTER.STATUS_BY != #USER_ID:VARCHAR#
        AND ACT_MASTER.STATUS = 'CREATED'
        AND ACT_MASTER.CREATE_DT = #TRANS_DT:DATE#
        AND ACT_MASTER.OPENING_AMOUNT = 0 
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_MASTER.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_MASTER.AUTHORIZATION_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_MASTER.AUTHORIZATION_STATUS IS NULL OR 
                ACT_MASTER.AUTHORIZATION_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        ORDER BY ACCOUNTNO
    </dynamic-mapped-statement>   
    
    <dynamic-mapped-statement name="getSelectAccountMasterCashierAuthorizeTOListWithTransaction" result-class="java.util.LinkedHashMap" >
        SELECT distinct CASE
            WHEN AT.trans_mode = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END as trans_id,ACT_MASTER.ACT_NUM AS ACCOUNTNO, ACT_MASTER.PROD_ID, ACT_MASTER.CUST_ID,get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        AT.AMOUNT,(SELECT LOOKUP_DESC FROM LOOKUP_MASTER 
        WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) 
        AS "Customer Type"
        FROM ACT_MASTER,CUSTOMER ,ALL_TRANS AT 
        WHERE ACT_MASTER.CUST_ID=CUSTOMER.CUST_ID AND AT.TRANS_DT=#TRANS_DT:DATE# 
        and AT.link_batch_id= ACT_MASTER.ACT_NUM AND
        CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN 'AUTHORIZED' ELSE AT.PAYMENT_STATUS END IS NOT NULL 
        AND ACT_MASTER.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND ACT_MASTER.STATUS_BY != #USER_ID:VARCHAR#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_MASTER.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_MASTER.AUTHORIZATION_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_MASTER.AUTHORIZATION_STATUS IS NULL OR 
                ACT_MASTER.AUTHORIZATION_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            </dynamic>
        ORDER BY ACCOUNTNO
    </dynamic-mapped-statement>   
   
   <mapped-statement name="authorizeAccountMaster" inline-parameters="true">
        UPDATE ACT_MASTER SET 
        AUTHORIZATION_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#, 
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="removeJointActDetails" result-class="java.util.HashMap">
        DELETE  FROM ACT_JOINT WHERE ACT_NUM =#ACCOUNTNO:VARCHAR#   
    </mapped-statement>
    
    <mapped-statement name="deleteJointActDetails" result-class="java.util.HashMap">
        DELETE  FROM ACT_JOINT WHERE ACT_NUM =#ACCOUNTNO:VARCHAR#  AND CUST_ID=#CUST_ID:VARCHAR# 
    </mapped-statement>
    
    <mapped-statement name="getAccountClosingStatus" inline-parameters="true">
        SELECT STATUS FROM ACT_CLOSING WHERE ACT_NUM = #ACCOUNTNO:VARCHAR# AND
        STATUS_DT IN (SELECT MAX(STATUS_DT) FROM ACT_CLOSING WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#)
    </mapped-statement>
    
    <dynamic-mapped-statement name="getSelectAccountCloseAuthorizeTOList" result-class="java.util.LinkedHashMap" >
         SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,ACT_MASTER.ACT_NUM AS ACCOUNTNO, ACT_MASTER.PROD_ID, CUSTOMER.CUST_ID,
        get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        CREATE_DT, ACT_CLOSING.STATUS AS CLOSE_STATUS FROM ACT_CLOSING, ACT_MASTER, CUSTOMER,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE#   AND AT.link_batch_id= ACT_MASTER.ACT_NUM 
        AND AT.TRANS_DT=#TRANS_DT:DATE# AND ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID 
        AND ACT_CLOSING.ACT_NUM = ACT_MASTER.ACT_NUM AND ACT_MASTER.BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND ACT_CLOSING.STATUS_BY != #USER_ID:VARCHAR#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_CLOSING.STATUS_BY)
        AND ACT_CLOSING.STATUS!='DELETED' 
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_CLOSING.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_CLOSING.AUTHORIZE_STATUS IS NULL OR 
                ACT_CLOSING.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
    </dynamic-mapped-statement>
    <dynamic-mapped-statement name="getSelectAccountCloseCashierAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,ACT_MASTER.ACT_NUM AS ACCOUNTNO, ACT_MASTER.PROD_ID, CUSTOMER.CUST_ID,
        get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        CREATE_DT, ACT_CLOSING.STATUS AS CLOSE_STATUS FROM ACT_CLOSING, ACT_MASTER, CUSTOMER,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN 'AUTHORIZED' ELSE AT.PAYMENT_STATUS END IS NOT NULL  AND AT.link_batch_id= ACT_MASTER.ACT_NUM 
        AND AT.TRANS_DT=#TRANS_DT:DATE# AND ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID 
        AND ACT_CLOSING.ACT_NUM = ACT_MASTER.ACT_NUM AND ACT_MASTER.BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND ACT_CLOSING.STATUS_BY != #USER_ID:VARCHAR#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_CLOSING.STATUS_BY)
        AND ACT_CLOSING.STATUS!='DELETED' 
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_CLOSING.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_CLOSING.AUTHORIZE_STATUS IS NULL OR 
                ACT_CLOSING.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        UNION 
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,ACT_MASTER.ACT_NUM AS ACCOUNTNO, ACT_MASTER.PROD_ID, CUSTOMER.CUST_ID,
        get_cust_name(CUSTOMER.CUST_ID) CUSTOMER_NAME,
        CREATE_DT, ACT_CLOSING.STATUS AS CLOSE_STATUS FROM ACT_CLOSING, ACT_MASTER, CUSTOMER,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN NULL ELSE AT.PAYMENT_STATUS END IS  NULL AND AT.TRANS_TYPE='DEBIT' AND AT.link_batch_id= ACT_MASTER.ACT_NUM AND ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID 
        AND ACT_CLOSING.ACT_NUM = ACT_MASTER.ACT_NUM AND ACT_MASTER.BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND ACT_CLOSING.STATUS_BY != #USER_ID:VARCHAR#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ACT_CLOSING.STATUS_BY)
        AND ACT_CLOSING.STATUS!='DELETED' 
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ACT_CLOSING.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (ACT_CLOSING.AUTHORIZE_STATUS IS NULL OR 
                ACT_CLOSING.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
    </dynamic-mapped-statement>
    <mapped-statement name="authorizeUpdateAccountCloseTO" inline-parameters="true">
        UPDATE ACT_CLOSING SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_USER = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE ACT_NUM = #ACCOUNTNO:VARCHAR# AND
        STATUS_DT IN (SELECT MAX(STATUS_DT) FROM ACT_CLOSING WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#)
    </mapped-statement>    
    
    <mapped-statement name="authorizeUpdateAccountCloseTOForDep" inline-parameters="true">
        UPDATE ACT_CLOSING SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_USER = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#,
        STATUS = #DELETE:VARCHAR#
        WHERE ACT_NUM = #ACCOUNTNO:VARCHAR# AND
        STATUS_DT IN (SELECT MAX(STATUS_DT) FROM ACT_CLOSING WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#)
    </mapped-statement>    

    <mapped-statement name="authorizeAcctStatus"  inline-parameters="true">
        UPDATE ACT_MASTER SET 
        ACT_STATUS_ID = #ACCOUNT_STATUS:VARCHAR#,
        CLOSED_BY = #USER_ID:VARCHAR#, 
        CLOSED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#	
    </mapped-statement>
    
    <dynamic-mapped-statement name="getBranchList" result-class="java.util.LinkedHashMap" >
        SELECT BRANCH_CODE AS BRANCHCODE,BRANCH_NAME as BRANCHNAME FROM BRANCH_MASTER
        WHERE (STATUS!='DELETED'OR STATUS IS NULL) and BRANCH_CODE != #BRANCH_CODE:VARCHAR#
        <dynamic>
         <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="BRANCHCODE">
                    UPPER(BRANCH_CODE) LIKE UPPER('%$BRANCHCODE$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="BRANCHNAME">
                    UPPER(BRANCH_NAME) LIKE UPPER('%$BRANCHNAME$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>     
    <mapped-statement name="getPrevoisAccountDetails" result-class="java.util.HashMap" >
        SELECT AVAILABLE_BALANCE as AVLB,CREATE_DT as OPENINGDATE FROM ACT_MASTER
        WHERE ACT_NUM=#value:VARCHAR#
    </mapped-statement>
          
    <mapped-statement name="getPreviousAccountBranch" result-class="java.util.HashMap">
        SELECT BRANCH_CODE as BRANCHCODE FROM ACT_MASTER
        WHERE ACT_NUM=#ACCOUNTNO:VARCHAR#     
    </mapped-statement>         
    
    <result-map name="getTransferAccountResultList" class="java.util.LinkedHashMap">
        <property name="accountNo" column="ACT_NUM"/>
        <property name="customerName" column="CUSTOMER_NAME"/>
        <property name="customerType" column="CUST_TYPE_ID"/>
    </result-map>
    
    <dynamic-mapped-statement name="getTransferAccountList" result-map="getTransferAccountResultList" >
        SELECT
        ACT_NUM, CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) CUSTOMER_NAME,
        CUST_TYPE_ID 
        FROM ACT_MASTER, CUSTOMER
        WHERE ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID and 
        (CUSTOMER.status!='DELETED' or CUSTOMER.status is null) and
        ACT_STATUS_ID='TRANSFER_IN' and 
        (ACT_MASTER.STATUS!='DELETED' or ACT_MASTER.STATUS is null)
         <dynamic>
                <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="ACT_NUM">
                    UPPER(ACT_NUM) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER_NAME">
                    UPPER(CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME)) LIKE UPPER('%$CUSTOMER_NAME$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_TYPE_ID">
                    UPPER(CUST_TYPE_ID) LIKE UPPER('%$CUST_TYPE_ID$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
   </dynamic-mapped-statement>

    	<!-- Use AccountJointTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertAccountJointTO" inline-parameters="true">
        INSERT INTO ACT_JOINT
        (ACT_NUM, CUST_ID, STATUS
        ) VALUES (
        #actNum:VARCHAR#, #custId:VARCHAR#, #status:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="getCountAccntJointHolders" result-class="java.util.HashMap" >
        SELECT  COUNT(*) COUNT FROM ACT_JOINT WHERE ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
        
	<!-- Use AccountJointTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateAccountJointTO" inline-parameters="true">
        UPDATE ACT_JOINT SET 
        ACT_NUM = #actNum:VARCHAR#,
        CUST_ID = #custId:VARCHAR#,
        STATUS = #status:VARCHAR#
        WHERE ACT_NUM = #actNum:VARCHAR#
        AND CUST_ID = #custId:VARCHAR#
    </mapped-statement>

	<!-- Use AccountJointTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteAccountJointTO" inline-parameters="true">
        DELETE FROM ACT_JOINT 
        WHERE 
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to AccountJointTO object (JavaBean) properties -->
    <result-map name="getAccountJointTOResult" class="com.see.truetransact.transferobject.operativeaccount.AccountJointTO">
        <property name="actNum" column="ACT_NUM"/>
        <property name="custId" column="CUST_ID"/>
        <property name="status" column="STATUS"/>
    </result-map>
       
        
    <dynamic-mapped-statement name="getSelectAccountJointTO" result-class="java.util.LinkedHashMap" >
        SELECT * FROM ACT_JOINT 
        WHERE ACT_NUM = #value:VARCHAR#
        <dynamic>          
        <isPropertyAvailable prepend = "AND" property="CHEQUE_ENQUIRY">
                STATUS != 'DELETED'
        </isPropertyAvailable>        
        </dynamic>
        <!--AND STATUS != 'DELETED'-->
    </dynamic-mapped-statement>
        
<!-- =====================================================================================-->

    <mapped-statement name="getMaxNomineeID" result-class="java.util.LinkedHashMap" >
        SELECT MAX(NOMINEE_ID) AS MAXID FROM  ACT_NOMINEE_DETAIL
        WHERE ACT_NUM = #ACTNUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getAccountDetailsData" result-class="java.util.LinkedHashMap">
        SELECT
        ACT_MASTER.CUST_ID AS CUSTOMER_ID,
        CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) AS CUSTOMER_NAME,
        CONCAT(CONCAT(CONCAT(AC_HD.AC_HD_ID, ' ['), AC_HD.AC_HD_DESC), ']') AS AC_HEAD,
        ACT_MASTER.BRANCH_CODE AS BRANCH_CODE,
        BRANCH_MASTER.BRANCH_NAME AS BRANCH_NAME
        FROM
        ACT_MASTER, CUSTOMER, AC_HD, OP_AC_PRODUCT, BRANCH_MASTER
        WHERE
        ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID and
        AC_HD.AC_HD_ID = OP_AC_PRODUCT.AC_HD_ID and
        ACT_MASTER.PROD_ID = OP_AC_PRODUCT.PROD_ID and
        ACT_MASTER.BRANCH_CODE = BRANCH_MASTER.BRANCH_CODE and
        ACT_MASTER.ACT_NUM = #ACTNUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getAllBranches" result-class="java.util.LinkedHashMap"> 
        SELECT BRANCH_CODE as BRANCH_ID FROM   BRANCH_MASTER     WHERE AUTHORIZE_STATUS_1='AUTHORIZED' AND STATUS !='DELETED' 
    </mapped-statement>
    
    <mapped-statement name="getNoChequesIssued" result-class="java.util.HashMap">
        SELECT (NO_LEAVES * NO_CHQ_BOOKS) AS "ISSUED_LEAVES"
        FROM CHEQUE_ISSUE
        WHERE ACCT_NO = #ACCTNO:VARCHAR#
        AND STATUS != 'DELETED'
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
    <mapped-statement name="getChequeIssueDetails" result-class="java.util.HashMap">
        SELECT CI.START_CHQ_NO1,CI.START_CHQ_NO2,CI.END_CHQ_NO2
        FROM cheque_issue ci
        WHERE acct_no =#ACCTNO:VARCHAR# AND status != 'DELETED' AND authorize_status = 'AUTHORIZED'
    </mapped-statement>    
    <mapped-statement name="getUsedChequeDetails" result-class="java.util.HashMap">
        SELECT  NVL(IC.INSTRUMENT_NO2,0) AS chqnum
        FROM inward_clearing ic,cheque_issue ci
        WHERE IC.acct_no =#ACCTNO:VARCHAR# AND instrument_type = 'CHEQUE' AND IC.status != 'DELETED' 
        and CI.ACCT_NO = IC.ACCT_NO AND NVL(IC.INSTRUMENT_NO2,0) &gt;= CI.START_CHQ_NO2
        AND NVL(IC.INSTRUMENT_NO2,0) &lt;= CI.END_CHQ_NO2
        UNION
        SELECT t.INSTRUMENT_NO2 AS chqnum
        FROM transfer_trans t,cheque_issue ci
        WHERE T.act_num = #ACCTNO:VARCHAR# AND inst_type = 'CHEQUE' AND T.status != 'DELETED'
        and CI.ACCT_NO = T.act_num AND NVL(T.INSTRUMENT_NO2,0) &gt;= CI.START_CHQ_NO2
        AND NVL(T.INSTRUMENT_NO2,0) &lt;= CI.END_CHQ_NO2
        UNION
        SELECT c.INSTRUMENT_NO2 AS chqnum
        FROM cash_trans c ,cheque_issue ci
        WHERE C.act_num = #ACCTNO:VARCHAR# AND inst_type = 'CHEQUE' AND C.status != 'DELETED'
        and CI.ACCT_NO = C.act_num AND NVL(C.INSTRUMENT_NO2,0) &gt;= CI.START_CHQ_NO2
        AND NVL(C.INSTRUMENT_NO2,0) &lt;= CI.END_CHQ_NO2
    </mapped-statement>   
    <mapped-statement name="getNoChequesUsed" result-class="java.util.HashMap">
        SELECT COUNT(*) AS COUNT FROM INWARD_CLEARING WHERE ACCT_NO = #ACCTNO:VARCHAR# AND INSTRUMENT_TYPE = 'CHEQUE' AND STATUS != 'DELETED'
        UNION
        SELECT COUNT(*) AS COUNT FROM TRANSFER_TRANS  WHERE ACT_NUM = #ACCTNO:VARCHAR# AND INST_TYPE = 'CHEQUE' AND STATUS != 'DELETED'
        UNION
        SELECT COUNT(*) AS COUNT FROM CASH_TRANS WHERE ACT_NUM = #ACCTNO:VARCHAR# AND  INST_TYPE = 'CHEQUE' AND STATUS != 'DELETED'
    </mapped-statement>
    <mapped-statement name="getUsedChequeNumbers" result-class="java.util.HashMap">
        SELECT NVL(I.INSTRUMENT_NO2,0) AS CHEQUE_NO FROM INWARD_CLEARING I WHERE ACCT_NO = #ACT_NUM:VARCHAR# AND INSTRUMENT_TYPE = 'CHEQUE' AND STATUS != 'DELETED'
        UNION
        SELECT NVL(T.INSTRUMENT_NO2,0) AS CHEQUE_NO FROM TRANSFER_TRANS T WHERE ACT_NUM = #ACT_NUM:VARCHAR# AND INST_TYPE = 'CHEQUE' AND STATUS != 'DELETED'
        UNION
        SELECT NVL(C.INSTRUMENT_NO2,0) AS CHEQUE_NO FROM CASH_TRANS  C WHERE ACT_NUM = #ACT_NUM:VARCHAR# AND  INST_TYPE = 'CHEQUE' AND STATUS != 'DELETED'
    </mapped-statement>        
    <mapped-statement name="Account.getCustName" result-class="java.util.HashMap">
        SELECT get_cust_name(CUSTOMER.CUST_ID) AS "NAME" 
        FROM CUSTOMER WHERE CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
                
    <mapped-statement name="Account.getCustAddressData" result-class="java.util.HashMap">
        SELECT CUSTOMER.CUST_ID, CUSTOMER.CUST_TYPE_ID, CUSTOMER.DESIGNATION, DECODE (CUSTOMER.CUST_TYPE, 'INDIVIDUAL', CUSTOMER.FNAME
        ||' '||NVL(CUSTOMER.MNAME,'')||' '||NVL(CUSTOMER.LNAME,''), CUSTOMER.COMP_NAME) as "Name", DOB, STREET, AREA, CITY,
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE LOOKUP_REF_ID= CITY AND LOOKUP_ID = 'CUSTOMER.CITY')CITY1, STATE,
        (SELECT lookup_desc FROM lookup_master WHERE LOOKUP_REF_ID= STATE AND LOOKUP_ID = 'CUSTOMER.STATE')STATE1, PIN_CODE, COUNTRY_CODE, 
        (SELECT lookup_desc FROM lookup_master WHERE LOOKUP_REF_ID= COUNTRY_CODE AND LOOKUP_ID = 'CUSTOMER.COUNTRY') COUNTRY1,
        MEMBERSHIP_CLASS,MINOR
        FROM CUSTOMER LEFT JOIN CUST_ADDR ON CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID
        WHERE (CUSTOMER.CUST_ID = #CUST_ID:VARCHAR#) AND (CUSTOMER.STATUS IN ('MODIFIED', 'UPDATE', 'CREATED')) AND (CUST_ADDR.ADDR_TYPE = #ADDR_TYPE:VARCHAR#)
    </mapped-statement>
                
    <mapped-statement name="getAccountClosingHeads" result-class="java.util.HashMap">
        SELECT CREDIT_INT, DEBIT_INT, ACCLOSE_CHRG, MISSER_CHRG, OP.PROD_ID, OP.AC_HD_ID,ATM_GL FROM  <!-- MISSER_CHRG added to do the transaction for Miscellaneous charges while doing A/c Closure -->
        OP_AC_ACHEAD_PARAM OAP, OP_AC_PRODUCT OP
        WHERE OP.PROD_ID = OAP.PROD_ID AND 
        OP.PROD_ID = (SELECT PROD_ID FROM ACT_MASTER WHERE ACT_NUM = #value:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="getAccountClosingChargeInfo" result-class="java.util.HashMap">
        SELECT DECODE(AM.ACT_STATUS_ID, 'NEW', OACP.CHG_PREMATURE_CLOSURE, 
        APD.ACT_CLOSING_CHRG) AS "ACT_CLOSING_CHRG",
        get_cust_name(cust.cust_id) as "CUSTOMER NAME",
        AM.AVAILABLE_BALANCE,AM.CLEAR_BALANCE,AM.PROD_ID, AM.ACT_NUM,CA.STREET AS HOUSE_NAME , apd.MISC_SERV_CHRG as MISC_SERV_CHRG
        FROM ACT_PARAM_DETAIL APD, ACT_MASTER AM, 
        OP_AC_CHARGES_PARAM OACP, CUSTOMER CUST ,CUST_ADDR CA
        WHERE 
        CUST.CUST_ID = AM.CUST_ID AND 
        OACP.PROD_ID = AM.PROD_ID AND AM.ACT_NUM = APD.ACT_NUM
        AND CA.CUST_ID = CUST.CUST_ID
        AND AM.ACT_NUM=#ACT_NUM:VARCHAR#
    </mapped-statement>
        
<!--  ==================================================================================================  -->        
        <!--                            CHARGES                                                     -->
<!--  ==================================================================================================  -->
    <dynamic-mapped-statement name="OACharges.getAcctList" result-class="java.util.LinkedHashMap" >
        SELECT ACT_NUM AS "Account Number", get_cust_name(CUSTOMER.CUST_ID)  AS "Customer Name"<!--,
        CUST_TYPE_ID AS "Customr Type"-->
        FROM ACT_MASTER, CUSTOMER
        WHERE ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID  
        AND PROD_ID = #PROD_ID:VARCHAR# 
        AND (ACT_STATUS_ID NOT IN ('CLOSED', 'DORMANT'))
        AND AUTHORIZATION_STATUS = 'AUTHORIZED'
        AND ACT_MASTER.BRANCH_CODE = #BRANCH_CODE:VARCHAR#
        
        <dynamic>
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="ACCT_NO">
                    ACT_NUM &gt; #ACCT_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="Account Number">
                    UPPER(ACT_NUM) LIKE UPPER('%$Account Number$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="Customer Name">
                    UPPER(get_cust_name(CUSTOMER.CUST_ID)) LIKE UPPER('%$Customer Name$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>             

     
     <!-- ===========================================================================  -->
     <!--                               Authorize Signatory                            -->
     <!-- ===========================================================================  -->
     
    <mapped-statement name="insertAuthorizedSignatoryTOOA" inline-parameters="true">
        INSERT INTO ACT_AUTHORIZE
        (ACT_NUM, AUTHRIZE_NO, CUST_ID, CUST_NAME, COMM_ADDR, STREET, AREA, CITY, STATE, COUNTRY_CODE, PINCODE, LIMITS, DESIGNATION, HOME_PHONE, HOME_FAX, PAGER, EMAIL_ID, BUSINESS_PHONE, BUSINESS_FAX, MOBILE, AUTHORIZE_REMARKS, AUTHORIZE_STATUS, STATUS, SLNO, STATUS_BY, STATUS_DT
        ) VALUES (
        #borrowNo:VARCHAR#, #authrizeNo:VARCHAR#, #custId:VARCHAR#, #custName:VARCHAR#, #commAddr:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, #city:VARCHAR#, #state:VARCHAR#, #countryCode:VARCHAR#, #pincode:VARCHAR#, #limits:NUMERIC#, #designation:VARCHAR#, #homePhone:VARCHAR#, #homeFax:VARCHAR#, #pager:VARCHAR#, #emailId:VARCHAR#, #businessPhone:VARCHAR#, #businessFax:VARCHAR#, #mobile:VARCHAR#, #authorizeRemarks:VARCHAR#, #authorizeStatus:VARCHAR#, #status:VARCHAR#, #slNo:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#)
    </mapped-statement>  
    
    <mapped-statement name="updateAuthorizedSignatoryTOOA" inline-parameters="true">
        UPDATE ACT_AUTHORIZE SET 
<!--		ACT_NUM = #actNum:VARCHAR#,
		SLNO = #slNo:VARCHAR#, -->
        AUTHRIZE_NO = #authrizeNo:VARCHAR#,
        CUST_ID = #custId:VARCHAR#,
        CUST_NAME = #custName:VARCHAR#,
        COMM_ADDR = #commAddr:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        PINCODE = #pincode:VARCHAR#,
        LIMITS = #limits:NUMERIC#,
        DESIGNATION = #designation:VARCHAR#,
        HOME_PHONE = #homePhone:VARCHAR#,
        HOME_FAX = #homeFax:VARCHAR#,
        PAGER = #pager:VARCHAR#,
        EMAIL_ID = #emailId:VARCHAR#,
        BUSINESS_PHONE = #businessPhone:VARCHAR#,
        BUSINESS_FAX = #businessFax:VARCHAR#,
        MOBILE = #mobile:VARCHAR#,
<!--		AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#, -->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACT_NUM = #borrowNo:VARCHAR# AND SLNO = #slNo:NUMERIC# AND
        (STATUS = 'CREATED' OR STATUS = 'MODIFIED')                
    </mapped-statement>
        
    <mapped-statement name="deleteAuthorizedSignatoryTOOA" inline-parameters="true">
        UPDATE ACT_AUTHORIZE SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACT_NUM = #borrowNo:VARCHAR# AND SLNO = #slNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
        <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to AuthorizedSignatoryTOOA object (JavaBean) properties -->
    <result-map name="getAuthorizedSignatoryTOOAResult" class="com.see.truetransact.transferobject.common.authorizedsignatory.AuthorizedSignatoryTO">
        <property name="borrowNo" column="ACT_NUM"/>
        <property name="authrizeNo" column="AUTHRIZE_NO"/>
        <property name="custId" column="CUST_ID"/>
        <property name="custName" column="CUST_NAME"/>
        <property name="commAddr" column="COMM_ADDR"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="pincode" column="PINCODE"/>
        <property name="limits" column="LIMITS"/>
        <property name="designation" column="DESIGNATION"/>
        <property name="homePhone" column="HOME_PHONE"/>
        <property name="homeFax" column="HOME_FAX"/>
        <property name="pager" column="PAGER"/>
        <property name="emailId" column="EMAIL_ID"/>
        <property name="businessPhone" column="BUSINESS_PHONE"/>
        <property name="businessFax" column="BUSINESS_FAX"/>
        <property name="mobile" column="MOBILE"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="status" column="STATUS"/>
        <property name="slNo" column="SLNO"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
    </result-map>
    <mapped-statement name="getSelectAuthorizedSignatoryTOOA" result-map="getAuthorizedSignatoryTOOAResult" >
        SELECT * FROM ACT_AUTHORIZE 
        WHERE ACT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(SLNO)
    </mapped-statement>
        
    <mapped-statement name="getSelectAuthorizedSignatoryMaxSLNOOA" result-class="java.util.HashMap" >
        SELECT MAX(SLNO) AS MAX_AUTHORIZE_NO 
        FROM ACT_AUTHORIZE 
        WHERE ACT_NUM = #borrowNo:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
        
        <!-- Use sdsd object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertAuthorizedSignatoryInstructionTOOA" inline-parameters="true">
        INSERT INTO ACT_AUTHORIZE_INSTRUCTION
        (ACT_NUM, SL_NO, FROM_AMT, TO_AMT, INSTRUCTION, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (
        #borrowNo:VARCHAR#, #slNo:NUMERIC#, #fromAmt:NUMERIC#, #toAmt:NUMERIC#, #instruction:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#)
    </mapped-statement>
        
        <!-- Use sdsd object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateAuthorizedSignatoryInstructionTOOA" inline-parameters="true">
        UPDATE ACT_AUTHORIZE_INSTRUCTION SET 
<!--		ACT_NUM = #actNum:VARCHAR#,
		SL_NO = #slNo:NUMERIC#,-->
        FROM_AMT = #fromAmt:NUMERIC#,
        TO_AMT = #toAmt:NUMERIC#,
        INSTRUCTION = #instruction:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE ACT_NUM = #borrowNo:VARCHAR# 
        AND SL_NO = #slNo:NUMERIC# 
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
        <!-- Use wew object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteAuthorizedSignatoryInstructionTOOA" inline-parameters="true">
        UPDATE ACT_AUTHORIZE_INSTRUCTION SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SL_NO = #slNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
        <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to cxc object (JavaBean) properties -->
    <result-map name="getAuthorizedSignatoryInstructionTOResultOA" class="com.see.truetransact.transferobject.common.authorizedsignatory.AuthorizedSignatoryInstructionTO">
        <property name="borrowNo" column="ACT_NUM"/>
        <property name="slNo" column="SL_NO"/>
        <property name="fromAmt" column="FROM_AMT"/>
        <property name="toAmt" column="TO_AMT"/>
        <property name="instruction" column="INSTRUCTION"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
    </result-map>
    <mapped-statement name="getSelectAuthorizedSignatoryInstructionTOOA" result-map="getAuthorizedSignatoryInstructionTOResultOA" >
        SELECT * FROM ACT_AUTHORIZE_INSTRUCTION 
        WHERE ACT_NUM = #value:VARCHAR# 
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY SL_NO
    </mapped-statement>
        
    <mapped-statement name="getSelectAuthorizedSignatoryInstructionMaxSLNOOA" result-class="java.util.HashMap" >
        SELECT MAX(SL_NO) AS MAX_AUTHORIZE_INSTRUCTION_NO 
        FROM ACT_AUTHORIZE_INSTRUCTION 
        WHERE ACT_NUM = #borrowNo:VARCHAR# 
        AND STATUS = 'DELETED'
    </mapped-statement>
        
<!-- ================================ Flexi Task ================================= -->        
        
    <dynamic-mapped-statement name="Flexi.getAccountData" result-class="java.util.HashMap">
        SELECT AM.ACT_NUM, AM.CUST_ID, AM.PROD_ID, AM.CLEAR_BALANCE,NVL(FLEXI_DEPOSIT_AMT,0) AS "FLEXI_DEPOSIT_AMT", 
        NVL(MIN_BAL1_FLEXI, 0) AS "MIN_BAL1", NVL(MIN_BAL2_FLEXI, 0) AS "MIN_BAL2", 
        NVL(REQ_FLEXI_PD, 0) AS "FLEXI_PD", FLEXI_PROD_ID AS "FLEXI_PROD", AM.BRANCH_CODE
        FROM ACT_PARAM_DETAIL APD, ACT_MASTER AM, OP_AC_SPCLITEM_PARAM OAPARAM
        WHERE (APD.FLEXI IN ('Y', 'y'))AND OAPARAM.LINKED_FLEXI_ACCT = 'Y'
        AND APD.ACT_NUM = AM.ACT_NUM AND AM.PROD_ID = OAPARAM.PROD_ID
        AND (AM.ACT_STATUS_ID  NOT IN ('CLOSED', 'DECEASED', 'DORMANT'))
        AND AM.STATUS != 'DELETED' AND AM.AUTHORIZATION_STATUS = 'AUTHORIZED'
        AND AM.CLEAR_BALANCE &gt; MIN_BAL1_FLEXI 
<!--            AND (AM.AVAILABLE_BALANCE - NVL(FLEXI_DEPOSIT_AMT,0)) &gt; MIN_BAL1_FLEXI -->
        <dynamic>            
            <isParameterPresent>
                <isNotNull prepend="AND" property="BRANCH_CODE">
                    BRANCH_CODE = #BRANCH_CODE:VARCHAR# 
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="NEXT_DATE">
                    AM.BRANCH_CODE NOT IN 
                    (SELECT BRANCH_ID FROM HOLIDAY_MASTER
                    WHERE STATUS!='DELETED' AND AUTHORIZED_STATUS IS NOT NULL AND AUTHORIZED_STATUS='AUTHORIZED'
                    AND HOLIDAY_DT=TO_DATE(#NEXT_DATE#)
                    UNION
                    SELECT BRANCH_ID FROM WEEKLY_OFF
                    WHERE STATUS!='DELETED' AND WEEKLY_OFF='Y' 
                    AND (TO_CHAR(#NEXT_DATE#, 'D') = WEEKLY_OFF1 OR
                    TO_CHAR(#NEXT_DATE#, 'D') = WEEKLY_OFF2))
                </isNotNull>
            </isParameterPresent>
        </dynamic>            
    </dynamic-mapped-statement>
       
    <mapped-statement name="Flexi.updateFlexiBalance"  inline-parameters="true">
        UPDATE ACT_MASTER SET
        FLEXI_DEPOSIT_AMT = NVL(FLEXI_DEPOSIT_AMT,0) + #DEOSIT_AMT:NUMBER#,
        AVAILABLE_BALANCE = NVL(AVAILABLE_BALANCE,0) + #FLEXI_DEOSIT_AMT:NUMBER#
        WHERE ACT_NUM = #ACT_NUM:VARCHAR#
        AND STATUS != 'DELETED'
        AND AUTHORIZATION_STATUS = 'AUTHORIZED'
        AND ACT_STATUS_ID  NOT IN ('CLOSED', 'DECEASED', 'DORMANT')
    </mapped-statement>
       
    <mapped-statement name="getProductFlext.Account" result-class="java.util.HashMap">
        SELECT NVL(MIN_BAL1_FLEXIDEPOSIT ,0) AS "MIN_BAL1",NVL(MIN_BAL2_FLEXIDEPOSIT,0) AS "MIN_BAL2",
        FLEXI_PROD_ID FROM OP_AC_SPCLITEM_PARAM OAPARAM WHERE 
        OAPARAM.LINKED_FLEXI_ACCT = 'Y' AND PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>

    <mapped-statement name="ReverseFlexi.getDepositData" result-class="java.util.HashMap">
        SELECT FLEXI_ACT_NUM, AM.CUST_ID,DEPOSIT_AMT, AM.PROD_ID, AM.AVAILABLE_BALANCE,AM.FLEXI_DEPOSIT_AMT,
        NVL(MIN_BAL2_FLEXI, 0) AS "MIN_BAL", DA.PROD_ID AS "FLEXI_PROD", DSA.DEPOSIT_DT,
        DA.DEPOSIT_NO AS "DEPOSITNO",   DSA.DEPOSIT_SUB_NO AS "DEPOSITSUBNO",DA.CATEGORY,
        MATURITY_DT,DSA.TOT_INT_AMT,TOTAL_INT_CREDIT,TOTAL_INT_DRAWN,DSA.RATE_OF_INT,DSA.TOTAL_BALANCE
        FROM ACT_PARAM_DETAIL APD, ACT_MASTER AM, OP_AC_SPCLITEM_PARAM OAPARAM, DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA
        WHERE APD.FLEXI IN ('Y', 'y') AND APD.ACT_NUM = AM.ACT_NUM
        AND AM.PROD_ID = OAPARAM.PROD_ID AND (AM.ACT_STATUS_ID  NOT IN ('CLOSED', 'DECEASED', 'DORMANT'))
        AND AM.STATUS != 'DELETED' AND AM.AUTHORIZATION_STATUS = 'AUTHORIZED'
        AND DSA.DEPOSIT_NO = DA.DEPOSIT_NO AND FLEXI_ACT_NUM IS NOT NULL
        AND DSA.TOTAL_BALANCE > 0 AND DA.FLEXI_ACT_NUM = AM.ACT_NUM
        AND DA.STATUS != 'DELETED' AND DA.AUTHORIZE_STATUS = 'AUTHORIZED'
        AND DSA.STATUS != 'DELETED' AND DSA.AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND (DSA.ACCT_STATUS != 'CLOSED' OR DSA.ACCT_STATUS IS NULL)
        AND DSA.MATURITY_DT BETWEEN  #HOLIDAY_MATURITY_DT:DATE# AND #MATURITY_DT:DATE#
        AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR#
    </mapped-statement>
        
    <dynamic-mapped-statement name="ReverseFlexiPremature.getDepositData" result-class="java.util.HashMap">
        SELECT AM.ACT_NUM AS "FLEXI_ACT_NUM",OAPARAM.FLEXI_PROD_ID AS "FLEXI_PROD",AM.CUST_ID,
        NVL(MIN_BAL2_FLEXI, 0) AS "MIN_BAL",AM.PROD_ID,AM.BRANCH_CODE
<!--            SUM(DL.LIEN_AMOUNT) AS "LIEN_AMOUNT",FLEXI_ACT_NUM, AM.CUST_ID,DSA.TOTAL_BALANCE, AM.PROD_ID, AM.AVAILABLE_BALANCE,
            NVL(MIN_BAL2_FLEXI, 0) AS "MIN_BAL", DA.PROD_ID AS "FLEXI_PROD", DSA.DEPOSIT_DT,DA.CATEGORY,
            DA.DEPOSIT_NO AS "DEPOSITNO",   DSA.DEPOSIT_SUB_NO AS "DEPOSITSUBNO",DSA.DEPOSIT_AMT,
            MATURITY_DT,DSA.TOT_INT_AMT,TOTAL_INT_CREDIT,TOTAL_INT_DRAWN,DSA.RATE_OF_INT,AM.BRANCH_CODE -->
        FROM ACT_PARAM_DETAIL APD, ACT_MASTER AM, OP_AC_SPCLITEM_PARAM OAPARAM
<!--            , DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA,DEPOSIT_LIEN DL -->
        WHERE APD.FLEXI IN ('Y', 'y')
        AND APD.ACT_NUM = AM.ACT_NUM AND AM.PROD_ID = OAPARAM.PROD_ID
        AND (AM.ACT_STATUS_ID  NOT IN ('CLOSED', 'DECEASED', 'DORMANT'))
        AND AM.STATUS != 'DELETED' AND AM.AUTHORIZATION_STATUS = 'AUTHORIZED'
<!--            AND FLEXI_ACT_NUM IS NOT NULL AND DSA.TOTAL_BALANCE > 0
            AND DA.STATUS != 'DELETED' AND DL.STATUS !='UNLIENED'
            AND DL.AUTHORIZE_STATUS = 'AUTHORIZED' AND DA.AUTHORIZE_STATUS = 'AUTHORIZED'
            AND DSA.STATUS != 'DELETED' AND DSA.AUTHORIZE_STATUS = 'AUTHORIZED' 
            AND (DSA.ACCT_STATUS != 'CLOSED' OR DSA.ACCT_STATUS IS NULL)
            AND DSA.DEPOSIT_NO = DA.DEPOSIT_NO AND DL.DEPOSIT_NO = DA.DEPOSIT_NO
            AND DL.UNLIEN_REMARKS IS NOT NULL AND DL.UNLIEN_REMARKS = 'FLEXI_DEPOSITS'
            AND AM.ACT_NUM = DL.LIEN_AC_NO -->
        <dynamic>            
            <isParameterPresent>
                <isNotNull prepend="AND" property="BRANCH_CODE">
                    AM.BRANCH_CODE = #BRANCH_CODE:VARCHAR# 
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="NEXT_DATE">
                    AM.BRANCH_CODE NOT IN 
                    (SELECT BRANCH_ID FROM HOLIDAY_MASTER
                    WHERE STATUS!='DELETED' AND AUTHORIZED_STATUS IS NOT NULL AND AUTHORIZED_STATUS='AUTHORIZED'
                    AND HOLIDAY_DT=TO_DATE(#NEXT_DATE#)
                    UNION
                    SELECT BRANCH_ID FROM WEEKLY_OFF
                    WHERE STATUS!='DELETED' AND WEEKLY_OFF='Y' 
                    AND (TO_CHAR(#NEXT_DATE#, 'D') = WEEKLY_OFF1 OR
                    TO_CHAR(#NEXT_DATE#, 'D') = WEEKLY_OFF2))
                </isNotNull>
            </isParameterPresent>
        </dynamic>            
<!--            GROUP BY FLEXI_ACT_NUM, AM.CUST_ID,DEPOSIT_AMT, 
            AM.PROD_ID, AM.AVAILABLE_BALANCE, MIN_BAL2_FLEXI, DA.PROD_ID, DSA.DEPOSIT_DT,
            DA.DEPOSIT_NO, DSA.DEPOSIT_SUB_NO, MATURITY_DT, DSA.TOT_INT_AMT, TOTAL_INT_CREDIT,
            TOTAL_INT_DRAWN, DSA.RATE_OF_INT, DA.CATEGORY, DSA.TOTAL_BALANCE, AM.BRANCH_CODE,DL.DEPOSIT_NO
            ORDER BY DL.DEPOSIT_NO DESC -->
    </dynamic-mapped-statement>
                  
    <mapped-statement name="ReverseFlexiLienAccounts.getDepositData" result-class="java.util.HashMap">
        SELECT SUM(LIEN_AMOUNT),LIEN_AC_NO FROM DEPOSIT_LIEN DL WHERE AUTHORIZE_STATUS = 'AUTHORIZED'
        AND STATUS!='UNLIENED' AND UNLIEN_REMARKS = 'FLEXI_DEPOSITS' GROUP BY LIEN_AC_NO
    </mapped-statement>
             
    <mapped-statement name="Nominee.getCustAddr" result-class="java.util.HashMap">
        SELECT STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE, 
        AREA_CODE, PHONE_NUMBER FROM CUST_ADDR CA join CUSTOMER C on 
        C.CUST_ID = CA.CUST_ID and CA.ADDR_TYPE = C.COMM_ADDR_TYPE left join
        CUST_PHONE CP on C.CUST_ID = CP.CUST_ID and 
	C.COMM_ADDR_TYPE = CP.ADDR_TYPE
        WHERE  CA.CUST_ID = #CUSTOMER ID:VARCHAR# AND CA.BRANCH_CODE = #BRANCH CODE:VARCHAR#  
        AND CA.STATUS != 'DELETED'
    </mapped-statement>
        
        
        <!--dynamic-mapped-statement name="Nominee.getCustData" result-class="java.util.LinkedHashMap">
            SELECT CUSTOMER.CUST_ID AS "Customer ID", get_cust_name(CUSTOMER.CUST_ID) AS "Name", DECODE(UPPER(CUSTOMER.MINOR),'Y', 'Minor', 'Major') AS "Status",
            CUSTOMER.CUST_TYPE_ID  AS "Customer Type ID ", CUSTOMER.CUST_TYPE AS "Customer Type", CUSTOMER.BRANCH_CODE AS "Branch Code"
            FROM CUSTOMER , CUST_ADDR
            WHERE CUSTOMER.CUST_TYPE !=  'CORPORATE'
            AND CUSTOMER.STATUS != 'DELETED'
            AND CUSTOMER.AUTHORIZE_STATUS = 'AUTHORIZED'
            AND CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID
            AND CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE
            <dynamic>
                <isParameterPresent>
                    <isNotNull prepend="AND" property="CUST_ID">
                        CUSTOMER.CUST_ID &lt;&gt; #CUST_ID#
                    </isNotNull>
                </isParameterPresent>
            </dynamic>
        </dynamic-mapped-statement-->
        
    <dynamic-mapped-statement name="Nominee.getCustData" result-class="java.util.LinkedHashMap">
        SELECT DISTINCT CUSTOMER.CUST_ID AS "CUSTOMER ID", get_cust_name(CUSTOMER.CUST_ID) AS "Name",CUST_ADDR.STREET AS "House Name", DECODE(UPPER(CUSTOMER.MINOR),'Y', 'Minor', 'Major') AS "Status",
            <!--CUSTOMER.CUST_TYPE_ID  AS "Customer Type ID ", -->(SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS "Customer Type", CUSTOMER.BRANCH_CODE AS "Branch Code"
        FROM CUSTOMER,CUST_ADDR
        WHERE CUSTOMER.CUST_TYPE =  'INDIVIDUAL'
        AND CUSTOMER.STATUS != 'DELETED' AND  CUSTOMER.CUSTOMER_STATUS!='DECEASED'
        AND CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED' AND CUSTOMER.CUST_ID=CUST_ADDR.CUST_ID AND
        CUSTOMER.COMM_ADDR_TYPE=CUST_ADDR.ADDR_TYPE                          
            <!--AND CUSTOMER.CUST_ID NOT IN (SELECT CUST_ID FROM DEATH_MARKING 
                                         WHERE STATUS != 'DELETED'
                                         AND AUTHORIZE_STATUS='AUTHORIZED')-->
        AND  NOT EXISTS (SELECT CUST_ID FROM DEATH_MARKING 
        WHERE STATUS != 'DELETED'
        AND AUTHORIZE_STATUS='AUTHORIZED' AND CUSTOMER.CUST_ID=CUST_ID)
        AND  NOT EXISTS (SELECT CUST_ID FROM CUSTOMER_SUSPENDED  WHERE   STATUS='SUSPENDED'
        AND CUSTOMER.CUST_ID=CUST_ID)                            
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUST_ID">
                    CUSTOMER.CUST_ID &lt;&gt; #CUST_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isNotEmpty prepend=" AND CUSTOMER.CUST_ID NOT IN ( " property="CUSTOMER_ID">
                $CUSTOMER_ID$ )
            </isNotEmpty>
        </dynamic>
    </dynamic-mapped-statement>
        
        
    <dynamic-mapped-statement name="OperativeAcct.getCustData" result-class="java.util.LinkedHashMap">
        SELECT DISTINCT CUSTOMER.CUST_ID AS "CUSTOMER ID",
        get_cust_name(CUSTOMER.CUST_ID) AS "Name",
            <!--CUSTOMER.CUST_TYPE_ID AS "Customer Type ID",-->(SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS "Customer Type",   CUSTOMER.BRANCH_CODE AS "Branch ID"
        FROM CUSTOMER
        WHERE CUSTOMER.STATUS != 'DELETED'
        AND CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED'
            <!--AND CUSTOMER.BRANCH_CODE = #BRANCH_ID#-->
            <!--AND CUSTOMER.CUST_ID NOT IN (SELECT CUST_ID FROM DEATH_MARKING 
            WHERE STATUS != 'DELETED'
            AND AUTHORIZE_STATUS='AUTHORIZED')-->
        AND  NOT EXISTS (SELECT CUST_ID FROM DEATH_MARKING 
        WHERE STATUS != 'DELETED'
        AND AUTHORIZE_STATUS='AUTHORIZED' AND CUSTOMER.CUST_ID=CUST_ID)
        AND  NOT EXISTS (SELECT CUST_ID FROM CUSTOMER_SUSPENDED  WHERE   STATUS='SUSPENDED'
        AND CUSTOMER.CUST_ID=CUST_ID)
        <dynamic>
                    <!--isNotNull prepend="AND" property="CUST_TYPE">
                        CUSTOMER.CUST_TYPE != #CUST_TYPE#
                    </isNotNull-->
                   <!--<isEqual property="CUST_TYPE" compareValue="SB" >-->
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER ID">
                    UPPER(CUSTOMER.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="Name">
            UPPER(get_cust_name(CUSTOMER.CUST_ID)) LIKE UPPER('%$Name$%')
                </isNotNull>
            </isParameterPresent>
                 <isParameterPresent>
                <isNotNull prepend="AND"      property="Branch ID">
                    UPPER(CUSTOMER.BRANCH_CODE) LIKE UPPER('%$Branch ID$%')
                </isNotNull>
            </isParameterPresent>
            <isEqual prepend="AND" property="CONSTITUTION" compareValue="INDIVIDUAL" >
                CUSTOMER.CUST_TYPE = 'INDIVIDUAL'
            </isEqual>
            <isEqual property="CUST_TYPE" compareValue="SB" >
                <isEqual prepend="AND" property="CONSTITUTION" compareValue="CORPORATE" >
                    CUSTOMER.CUST_TYPE IN ('CLUB','06','07','0903')
                </isEqual>
            </isEqual>
            <isNotEqual property="CUST_TYPE" compareValue="SB" >
                <isEqual prepend="AND" property="CONSTITUTION" compareValue="CORPORATE" >
                    CUSTOMER.CUST_TYPE != 'INDIVIDUAL'
                </isEqual>
            </isNotEqual>
            <isEqual prepend="AND" property="CONSTITUTION" compareValue="JOINT" >
                           <!-- (CUSTOMER.MINOR = 'N' OR CUSTOMER.MINOR IS NULL) AND--> CUSTOMER.CUST_TYPE = 'INDIVIDUAL'
            </isEqual>
                   <!-- </isEqual>-->
            <isNotEqual prepend="AND" property="CUST_TYPE" compareValue="SB" >
                (CUSTOMER.MINOR = 'N' OR CUSTOMER.MINOR IS NULL)
            </isNotEqual>
                    <!-- Non Duplication of the Customer in case of Joint account...-->
            <isEqual prepend="AND" property="RESIDENTIAL_STATUS" compareValue="NONRESIDENT" >
                CUSTOMER.RESIDENTIALSTATUS = 'NONRESIDENT'
            </isEqual>
            <isEqual prepend="AND" property="RESIDENTIAL_STATUS" compareValue="" >
                CUSTOMER.RESIDENTIALSTATUS != 'NONRESIDENT'
            </isEqual>
            <isParameterPresent>
                <isNotEmpty prepend=" AND CUSTOMER.CUST_ID NOT IN ( " property="CUSTOMER_ID">
                    $CUSTOMER_ID$ )
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        <dynamic> 
            <isParameterPresent>
                <isNotNull prepend="AND" property="BRANCH_ID">
                    CUSTOMER.BRANCH_CODE = #BRANCH_ID:VARCHAR#
                </isNotNull> 
            </isParameterPresent>      
        </dynamic>
        <dynamic> 
            <isParameterPresent>
                <isNotNull prepend="AND" property="STAFF_ID">
                    LENGTH(CUSTOMER.STAFF_ID) &gt; 0
                </isNotNull> 
            </isParameterPresent>      
        </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="getIntroDetails" result-class="java.util.LinkedHashMap">
        SELECT  CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) AS CUSTOMER_NAME,
        CUSTOMER.BRANCH_CODE AS BRANCH_CODE,  BRANCH_MASTER.BRANCH_NAME AS BRANCH_NAME
        FROM CUSTOMER,  BRANCH_MASTER
        WHERE CUSTOMER.CUST_ID= #CUST_ID:VARCHAR# AND
        CUSTOMER.BRANCH_CODE=BRANCH_MASTER.BRANCH_CODE
    </mapped-statement>

    <dynamic-mapped-statement name="TDCharges.getAcctList" result-class="java.util.LinkedHashMap" >
        SELECT DA.DEPOSIT_NO AS "Deposit Number", get_cust_name(C.CUST_ID)  AS "Customer Name",
        DA.CATEGORY AS "Category",DSA.INTPAY_FREQ,to_char(DSA.LAST_INT_APPL_DT,'DD-MM-YYYY')  "Last Provision Date",
        to_char(DSA.NEXT_INT_APPL_DT,'DD-MM-YYYY')  "Next Provision Date"
        FROM DEPOSIT_SUB_ACINFO DSA, DEPOSIT_ACINFO DA, CUSTOMER C, DEPOSITS_PROD_INTPAY DPI
        WHERE DA.PROD_ID = #PROD_ID:VARCHAR#
        AND C.CUST_ID = DA.CUST_ID 
        AND BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        AND (DA.DEPOSIT_STATUS NOT IN ('CLOSED')) 
        AND (DSA.ACCT_STATUS NOT IN ('CLOSED'))
        AND DSA.AUTHORIZE_STATUS = 'AUTHORIZED'
<!--        AND DSA.DEPOSIT_DT BETWEEN DPI.LAST_INT_PROVDT
        AND DPI.NEXT_INT_PROVDT-->
        AND DA.PROD_ID = DPI.PROD_ID
        <dynamic>
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="DEPOSIT_NO">
                    DA.DEPOSIT_NO &gt; #DEPOSIT_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="MATURITY">
                    DSA.MATURITY_DT  &gt;= #CURR_DATE:DATE#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CASH">
                    INTPAY_MODE = 'CASH'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
            <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="TRANSFER">
                    INTPAY_MODE = 'TRANSFER'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="Deposit Number">
                    UPPER(DA.DEPOSIT_NO) LIKE UPPER('%$Deposit Number$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="Customer Name">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$Customer Name$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="Category">
                    UPPER(DA.CATEGORY) LIKE UPPER('%$Category$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="INTPAY_FREQ">
                    UPPER(DSA.INTPAY_FREQ) LIKE UPPER('%$INTPAY_FREQ$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="Last Provision Date">
                    UPPER(to_char(DSA.LAST_INT_APPL_DT,'DD-MM-YYYY')) LIKE UPPER('%$Last Provision Date$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="Next Provision Date">
                    UPPER(to_char(DSA.NEXT_INT_APPL_DT,'DD-MM-YYYY')) LIKE UPPER('%$Next Provision Date$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        ORDER BY DA.DEPOSIT_NO
    </dynamic-mapped-statement>       
     
       <dynamic-mapped-statement name="TDCharges.getAcctInterestList" result-class="java.util.LinkedHashMap" >
        SELECT DA.DEPOSIT_NO AS "Deposit Number", get_cust_name(C.CUST_ID)  AS "Customer Name",
        DA.CATEGORY AS "Category",DSA.INTPAY_FREQ,to_char(DSA.LAST_INT_APPL_DT,'DD-MM-YYYY')  "Last Provision Date",
        to_char(DSA.NEXT_INT_APPL_DT,'DD-MM-YYYY')  "Next Provision Date",BRANCH_ID
        FROM DEPOSIT_SUB_ACINFO DSA, DEPOSIT_ACINFO DA, CUSTOMER C, DEPOSITS_PROD_INTPAY DPI
        WHERE DA.PROD_ID = #PROD_ID:VARCHAR#
        AND C.CUST_ID = DA.CUST_ID 
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        AND (DA.DEPOSIT_STATUS NOT IN ('CLOSED', 'DORMANT')) 
        AND DSA.AUTHORIZE_STATUS = 'AUTHORIZED'
<!--        AND DSA.DEPOSIT_DT BETWEEN DPI.LAST_INT_PROVDT
        AND DPI.NEXT_INT_PROVDT-->
        AND DA.PROD_ID = DPI.PROD_ID
        <dynamic>
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="DEPOSIT_NO">
                    DA.DEPOSIT_NO &gt; #DEPOSIT_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="MATURITY">
                    DSA.MATURITY_DT  &gt;= #CURR_DATE:DATE#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CASH">
                    INTPAY_MODE = 'CASH'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
            <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="TRANSFER">
                    INTPAY_MODE = 'TRANSFER'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="Deposit Number">
                    UPPER(DA.DEPOSIT_NO) LIKE UPPER('%$Deposit Number$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="Customer Name">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$Customer Name$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="Category">
                    UPPER(DA.CATEGORY) LIKE UPPER('%$Category$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="INTPAY_FREQ">
                    UPPER(DSA.INTPAY_FREQ) LIKE UPPER('%$INTPAY_FREQ$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="Last Provision Date">
                    UPPER(to_char(DSA.LAST_INT_APPL_DT,'DD-MM-YYYY')) LIKE UPPER('%$Last Provision Date$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="Next Provision Date">
                    UPPER(to_char(DSA.NEXT_INT_APPL_DT,'DD-MM-YYYY')) LIKE UPPER('%$Next Provision Date$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        ORDER BY DA.DEPOSIT_NO
    </dynamic-mapped-statement>   
     
    <mapped-statement name="checkForSIDebit" result-class="java.lang.Integer">
        <!--SELECT COUNT(*)  FROM STANDING_INSTRUCTION_DEBIT WHERE ACCT_NO =#ACT_NUM# AND STATUS != 'DELETED' -->
        SELECT COUNT(*)  FROM STANDING_INSTRUCTION_DEBIT WHERE ACCT_NO =#ACT_NUM:VARCHAR# AND STATUS NOT IN( 'DELETED','CLOSED')
    </mapped-statement> 

    <mapped-statement name="checkForSICredit" result-class="java.lang.Integer">
        <!--SELECT COUNT(*)  FROM STANDING_INSTRUCTION_CREDIT WHERE ACCT_NO =#ACT_NUM# AND STATUS != 'DELETED' -->
        SELECT COUNT(*)  FROM STANDING_INSTRUCTION_CREDIT WHERE ACCT_NO =#ACT_NUM:VARCHAR# AND STATUS NOT IN( 'DELETED','CLOSED')
        
    </mapped-statement> 
    
   <dynamic-mapped-statement name="DeletedAccountDetails" result-class="java.util.HashMap" >
        SELECT AM.CUST_ID AS "cust_id",AM.ACCT_NAME AS "act_name", AM.ACT_NUM AS "accountNo", AM.PROD_ID AS "prod_id", AM.CLOSED_DT AS "closed_dt", AM.ACT_CAT_ID AS "act_cat_id",
        AM.ACT_STATUS_ID AS "status_id" , (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS "customerType"
        FROM ACT_MASTER AM, CUSTOMER WHERE AM.ACT_STATUS_ID ='CLOSED' AND AM.AUTHORIZATION_STATUS = 'AUTHORIZED' AND AM.BRANCH_CODE= #BRANCH_ID:VARCHAR#
        AND CUSTOMER.CUST_ID=AM.CUST_ID
        <dynamic>
                <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="cust_id">
                    UPPER(AM.CUST_ID) LIKE UPPER('%$cust_id$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="act_name">
                    UPPER(AM.ACCT_NAME) LIKE UPPER('%$act_name$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="accountNo">
                    UPPER(AM.ACT_NUM) LIKE UPPER('%$accountNo$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="prod_id">
                    UPPER(AM.PROD_ID) LIKE UPPER('%$prod_id$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="closed_dt">
                    UPPER(AM.CLOSED_DT) LIKE UPPER('%$closed_dt$%')
                </isNotNull>
            </isParameterPresent>
           <isParameterPresent>
                <isNotNull prepend="AND"      property="act_cat_id">
                    UPPER(AM.CLOSED_DT) LIKE UPPER('%$act_cat_id$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="status_id">
                    UPPER(AM.ACT_STATUS_ID) LIKE UPPER('%$status_id$%')
                </isNotNull>
            </isParameterPresent>
           </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="getAuthorizedCustDetails" result-class="java.util.HashMap" >
        SELECT AUTHORIZE_CUST_ID AS ACD FROM  CORP_AUTHORIZE_JOINT WHERE CUST_ID =#CUST_ID:VARCHAR# AND STATUS!='DELETED'
        UNION 
        SELECT AUTHORIZE_CUST_ID AS ACD FROM CUSTOMER WHERE CUST_ID =#CUST_ID:VARCHAR# AND STATUS!='DELETED'
    </mapped-statement>
         
    <mapped-statement name="getAuthorizedCustDetailsForNew" result-class="java.util.HashMap" >
        SELECT CUSTOMER.CUST_ID, get_cust_name(CUSTOMER.CUST_ID)  as "Name",
        STREET, AREA,EMAIL_ID,CUST_ADDR.ADDR_TYPE, CUST_ADDR.CITY AS CITY, CUST_ADDR.STATE  AS STATE, PIN_CODE, DESIGNATION,
        CUST_ADDR.COUNTRY_CODE AS COUNTRY, PHONE_TYPE_ID, PHONE_NUMBER, AREA_CODE
        FROM CUSTOMER JOIN CUST_ADDR ON CUST_ADDR.CUST_ID  = CUSTOMER.CUST_ID 
        LEFT JOIN CUST_PHONE ON CUSTOMER.CUST_ID = CUST_PHONE.CUST_ID 
        WHERE (CUSTOMER.CUST_ID = #C_ID:VARCHAR#)  AND (CUSTOMER.STATUS IN ('MODIFIED', 'UPDATE', 'CREATED'))  
    </mapped-statement>

    <dynamic-mapped-statement name="Enquiry.getAccountList" result-class="java.util.LinkedHashMap">
        <dynamic>
            <isEqual property="PRODUCT_TYPE" compareValue="OA" >
                SELECT ACT_NUM, PROD_ID, AM.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM ACT_MASTER AM, CUSTOMER C,CUST_ADDR CA WHERE AM.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND 
                AM.CUST_ID = C.CUST_ID AND AM.STATUS!='DELETED' AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                   <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                        ROWNUM &lt;= 100
                   </isEqual>
                </isPropertyAvailable>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ACT_NUM">
                        UPPER(ACT_NUM) LIKE UPPER('%$ACT_NUM$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="PROD_ID">
                        UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_ID">
                        UPPER(AM.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="STATUS">
                        UPPER(ACT_STATUS_ID) LIKE UPPER('%$STATUS$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_NAME">
                        UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ADDRESS">
                        UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                    </isNotNull>
                </isParameterPresent>
            </isEqual>
            <isEqual property="PRODUCT_TYPE" compareValue="TD" >
                SELECT DEPOSIT_NO AS ACT_NUM, PROD_ID, DA.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM DEPOSIT_ACINFO DA, CUSTOMER C,CUST_ADDR CA WHERE DA.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND 
                DA.CUST_ID = C.CUST_ID AND DA.STATUS!='DELETED' AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
              </isPropertyAvailable>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ACT_NUM">
                        UPPER(DEPOSIT_NO) LIKE UPPER('%$ACT_NUM$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="PROD_ID">
                        UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_ID">
                        UPPER(DA.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="STATUS">
                        UPPER(DA.DEPOSIT_STATUS) LIKE UPPER('%$STATUS$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_NAME">
                        UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ADDRESS">
                        UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                    </isNotNull>
                </isParameterPresent>
            </isEqual>
            <isEqual property="PRODUCT_TYPE" compareValue="TL" >
                SELECT ACCT_NUM AS ACT_NUM, PROD_ID, LB.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS LF, CUSTOMER C,CUST_ADDR CA WHERE 
                LB.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND LB.BORROW_NO = LF.BORROW_NO AND
                LB.CUST_ID = C.CUST_ID AND LB.STATUS!='DELETED' AND LF.STATUS!='DELETED'
                AND PROD_ID NOT IN (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE ='OD' )
                AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
           <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>    
            <isParameterPresent>
                    <isNotNull prepend="AND"      property="ACT_NUM">
                        UPPER(ACCT_NUM) LIKE UPPER('%$ACT_NUM$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="PROD_ID">
                        UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_ID">
                        UPPER(LB.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="STATUS">
                        UPPER(ACCT_STATUS) LIKE UPPER('%$STATUS$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_NAME">
                        UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ADDRESS">
                        UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                    </isNotNull>
                </isParameterPresent>
            </isEqual>
            
            
            <isEqual property="PRODUCT_TYPE" compareValue="ATL" >
                SELECT ACCT_NUM AS ACT_NUM, PROD_ID, LB.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM AGRI_LOANS_BORROWER LB, AGRI_LOANS_FACILITY_DETAILS LF, CUSTOMER C,CUST_ADDR CA WHERE 
                LB.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND LB.BORROW_NO = LF.BORROW_NO AND
                LB.CUST_ID = C.CUST_ID AND LB.STATUS!='DELETED' AND LF.STATUS!='DELETED'
                AND PROD_ID NOT IN (SELECT PROD_ID FROM AGRILOANS_PRODUCT WHERE BEHAVES_LIKE  IN('AOD','ACC') )
                AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>    
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ACT_NUM">
                        UPPER(ACCT_NUM) LIKE UPPER('%$ACT_NUM$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="PROD_ID">
                        UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_ID">
                        UPPER(LB.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="STATUS">
                        UPPER(ACCT_STATUS) LIKE UPPER('%$STATUS$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_NAME">
                        UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ADDRESS">
                        UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                    </isNotNull>
                </isParameterPresent>
            </isEqual>
            
            <isEqual property="PRODUCT_TYPE" compareValue="AD" >
                SELECT ACCT_NUM AS ACT_NUM, PROD_ID, LB.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS LF, CUSTOMER C,CUST_ADDR CA WHERE 
                LB.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND LB.BORROW_NO = LF.BORROW_NO AND
                LB.CUST_ID = C.CUST_ID AND LB.STATUS!='DELETED' AND LF.STATUS!='DELETED'
                AND PROD_ID IN (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE ='OD' )
                AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>    
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ACT_NUM">
                        UPPER(ACCT_NUM) LIKE UPPER('%$ACT_NUM$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="PROD_ID">
                        UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_ID">
                        UPPER(LB.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="STATUS">
                        UPPER(ACCT_STATUS) LIKE UPPER('%$STATUS$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_NAME">
                        UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ADDRESS">
                        UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                    </isNotNull>
                </isParameterPresent>
            </isEqual>
            <isEqual property="PRODUCT_TYPE" compareValue="AAD" >
                SELECT ACCT_NUM AS ACT_NUM, PROD_ID, LB.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM AGRI_LOANS_BORROWER LB, AGRI_LOANS_FACILITY_DETAILS LF, CUSTOMER C,CUST_ADDR CA WHERE 
                LB.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND LB.BORROW_NO = LF.BORROW_NO AND
                LB.CUST_ID = C.CUST_ID AND LB.STATUS!='DELETED' AND LF.STATUS!='DELETED'
                AND PROD_ID IN (SELECT PROD_ID FROM AGRILOANS_PRODUCT WHERE BEHAVES_LIKE  IN ('AOD','ACC'))
                AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>    
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ACT_NUM">
                        UPPER(ACCT_NUM) LIKE UPPER('%$ACT_NUM$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="PROD_ID">
                        UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_ID">
                        UPPER(LB.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="STATUS">
                        UPPER(ACCT_STATUS) LIKE UPPER('%$STATUS$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_NAME">
                        UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ADDRESS">
                        UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                    </isNotNull>
                </isParameterPresent>
            </isEqual>
            
            <isEqual property="PRODUCT_TYPE" compareValue="GL" >
                SELECT AH.AC_HD_ID AS ACT_NUM, AC_HD_CODE, AC_HD_DESC
                FROM AC_HD AH, GL WHERE GL.BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND 
                AH.AC_HD_ID = GL.AC_HD_ID AND AH.STATUS!='DELETED'
           <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>    
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ACT_NUM">
                        UPPER(AH.AC_HD_ID) LIKE UPPER('%$ACT_NUM$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="AC_HD_CODE">
                        UPPER(AC_HD_CODE) LIKE UPPER('%$AC_HD_CODE$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="AC_HD_DESC">
                        UPPER(AC_HD_DESC) LIKE UPPER('%$AC_HD_DESC$%')
                    </isNotNull>
                </isParameterPresent>
            </isEqual>
            <isEqual property="PRODUCT_TYPE" compareValue="BILLS" >
                SELECT ACCT_NUM AS ACT_NUM, PROD_ID, LB.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM BILLS_BORROWER LB, BILLS_FACILITY_DETAILS LF, CUSTOMER C,CUST_ADDR CA WHERE 
                LB.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND LB.BORROW_NO = LF.BORROW_NO AND
                LB.CUST_ID = C.CUST_ID AND LB.STATUS!='DELETED' AND LF.STATUS!='DELETED'
                AND PROD_ID IN (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE ='BILLS' )
                AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>    
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ACT_NUM">
                        UPPER(ACCT_NUM) LIKE UPPER('%$ACT_NUM$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="PROD_ID">
                        UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_ID">
                        UPPER(LB.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="STATUS">
                        UPPER(LB.STATUS) LIKE UPPER('%$STATUS$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_NAME">
                        UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ADDRESS">
                        UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                    </isNotNull>
                </isParameterPresent>
            </isEqual>
            <isEqual property="PRODUCT_TYPE" compareValue="SH" >
                SELECT SHARE_ACCT_NO as ACT_NUM, SHARE_TYPE as PROD_ID, AM.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM share_acct AM, CUSTOMER C,CUST_ADDR CA WHERE AM.BRANCH_CODE =  #BRANCH_CODE:VARCHAR# AND 
                AM.CUST_ID = C.CUST_ID AND AM.STATUS!='DELETED' AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>    
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ACT_NUM">
                        UPPER(SHARE_ACCT_NO) LIKE UPPER('%$ACT_NUM$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="PROD_ID">
                        UPPER(SHARE_TYPE) LIKE UPPER('%$PROD_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_ID">
                        UPPER(AM.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="STATUS">
                        UPPER(AM.ACCT_STATUS) LIKE UPPER('%$STATUS$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_NAME">
                        UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ADDRESS">
                        UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                    </isNotNull>
                </isParameterPresent>
            </isEqual>
            <!-- ADDED FOR SUSPENSE ACCOUNT PRODUCT TYPE -->
            <isEqual property="PRODUCT_TYPE" compareValue="SA" >
                SELECT SUSPENSE_ACCT_NUM AS ACT_NUM,SUSPENSE_PROD_ID AS  PROD_ID,SUSPENSE_CUSTOMER_ID AS CUST_ID,SUSPENSE_NAME AS CUST_NAME,
                SUSPENSE_ADDRESS AS ADDRESS FROM SUSPENSE_ACCOUNT_MASTER AM 
                WHERE AM.STATUS!='DELETED'
          <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>    
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ACT_NUM">
                        UPPER(SUSPENSE_ACCT_NUM) LIKE UPPER('%$ACT_NUM$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="PROD_ID">
                        UPPER(SUSPENSE_PROD_ID) LIKE UPPER('%$PROD_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_ID">
                        UPPER(SUSPENSE_CUSTOMER_ID) LIKE UPPER('%$CUST_ID$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="CUST_NAME">
                        UPPER(SUSPENSE_NAME) LIKE UPPER('%$CUST_NAME$%')
                    </isNotNull>
                </isParameterPresent>
                <isParameterPresent>
                    <isNotNull prepend="AND"      property="ADDRESS">
                        UPPER(SUSPENSE_ADDRESS) LIKE UPPER('%$ADDRESS$%')
                    </isNotNull>
                </isParameterPresent>
            </isEqual>
        </dynamic>
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="" property="FILTERED_LIST" compareValue="FILTERED_LIST_org.postgresql.Driver" >
                    LIMIT 100
                </isEqual>
            </isPropertyAvailable>
        </dynamic>    
    </dynamic-mapped-statement> 
             
    <mapped-statement name="getDepositClosingAccounts" result-class="java.util.HashMap">
        SELECT UNUSED_CHK,ACT_CLOSING_CHRG,INT_PAYABLE,CHRG_DETAILS,PAYABLE_BAL FROM ACT_CLOSING 
        WHERE ACT_NUM = #ACT_NUM:VARCHAR# AND
        STATUS_DT IN (SELECT MAX(STATUS_DT) FROM ACT_CLOSING WHERE ACT_NUM = #ACT_NUM:VARCHAR#)
        AND STATUS != 'DELETED' AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>
    
    <mapped-statement name="getNextActNum" result-class="java.util.HashMap">  
        SELECT OPAC.PROD_NO_PREFIX AS PREFIX,NVL(OPAC.PROD_NO_SUFFIX,0) AS SUFFIX,  decode(OPAC.LAST_ACT_NO,null,OPAC.PROD_NO_SUFFIX,OPAC.LAST_ACT_NO) AS LAST_VALUE
        FROM OP_AC_ACCOUNT_PARAM OPAC, OP_AC_PRODUCT OP WHERE OPAC.PROD_ID = #PROD_ID:VARCHAR# AND OPAC.PROD_ID=OP.PROD_ID
        AND OPAC.LAST_ACT_NO IS NULL AND OP.STATUS != 'DELETED' AND OP.AUTHORIZED_STATUS = 'AUTHORIZED'
        UNION
        SELECT OPAC.PROD_NO_PREFIX AS PREFIX,NVL(OPAC.PROD_NO_SUFFIX,0) AS SUFFIX, decode(OPAC.LAST_ACT_NO,null,OPAC.PROD_NO_SUFFIX,OPAC.LAST_ACT_NO) AS LAST_VALUE
        FROM OP_AC_ACCOUNT_PARAM OPAC, OP_AC_PRODUCT OP WHERE OPAC.PROD_ID = #PROD_ID:VARCHAR# AND OPAC.PROD_ID=OP.PROD_ID
        AND OPAC.LAST_ACT_NO IS NOT NULL AND OP.STATUS != 'DELETED' AND OP.AUTHORIZED_STATUS = 'AUTHORIZED'
    </mapped-statement>
      
    <mapped-statement name="updateNextId" result-class="java.util.HashMap" >
        UPDATE OP_AC_ACCOUNT_PARAM SET LAST_ACT_NO = #VALUE:VARCHAR# WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getlastacno" result-class="java.util.HashMap" >
        SELECT LAST_ACT_NO FROM OP_AC_ACCOUNT_PARAM, OP_AC_PRODUCT WHERE  OP_AC_ACCOUNT_PARAM.PROD_ID =#PROD_ID:VARCHAR#
        AND OP_AC_ACCOUNT_PARAM.PROD_ID = OP_AC_PRODUCT.PROD_ID AND STATUS!='DELETED'
    </mapped-statement>
    
    <mapped-statement name="updateSIinRecurringCredit" result-class="java.util.HashMap">
        UPDATE STANDING_INSTRUCTION_CREDIT SET STATUS = #STATUS:VARCHAR# 
        WHERE SI_ID = #SI_ID:VARCHAR# AND STATUS NOT IN ('DELETED')
    </mapped-statement>
   
    <mapped-statement name= "updateSIinRecurringDebit" result-class="java.util.HashMap">
        UPDATE STANDING_INSTRUCTION_DEBIT SET STATUS = #STATUS:VARCHAR# 
        WHERE SI_ID = #SI_ID:VARCHAR# AND STATUS NOT IN ('DELETED')
    </mapped-statement>
    
    <mapped-statement name= "updateSIinRecurring" result-class="java.util.HashMap">
        UPDATE STANDING_INSTRUCTION SET STATUS = #STATUS:VARCHAR# 
        WHERE SI_ID = #SI_ID:VARCHAR# AND STATUS NOT IN ('DELETED')
    </mapped-statement>
    
    <mapped-statement name="getselectForRecurring" result-class="java.util.HashMap">
        SELECT SI_ID  FROM STANDING_INSTRUCTION_CREDIT WHERE ACCT_NO =#ACT_NUM:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement> 
    
    <mapped-statement name ="updateFlexiClosedDetails" result-class = "java.util.HashMap">
        UPDATE DEPOSIT_ACINFO SET DEPOSIT_STATUS = #DEPOSIT_STATUS:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>

    <mapped-statement name ="updateFlexiClosedSubDetails" result-class = "java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET TOTAL_INT_CREDIT = #TOTAL_INT_CREDIT:NUMBER#,TOTAL_INT_DRAWN = #TOTAL_INT_DRAWN:NUMBER#,
        CURR_RATE_OF_INT = #CURR_RATE_OF_INT:NUMBER#, INTEREST_AMT = #INTEREST_AMT:NUMBER#, ACCT_STATUS = #ACCT_STATUS:VARCHAR#, 
        CLOSE_BY = 'TTSYSTEM',CLOSE_DT = #CLOSE_DT:DATE# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>    
    
    <mapped-statement name ="insertFlexiTable" result-class = "java.util.HashMap">
        INSERT INTO FLEXI_DEPOSIT_DETAILS(FLEXI_ACT_NUM,DEPOSIT_NO,FLEXI_DEPOSIT_AMT,FLEXI_DATE,FLEXI_BALANCE,CREATED_BY,BRANCH_CODE,FLEXI_FLAG)
        VALUES
        (#FLEXI_ACT_NUM#,#DEPOSIT_NO#,#FLEXI_DEPOSIT_AMT#,#FLEXI_DATE:DATE#,#FLEXI_BALANCE:NUMBER#,#CREATED_BY#,#BRANCH_CODE#,#FLEXI_FLAG#)
    </mapped-statement>    
    
    <mapped-statement name = "getSelectflexiTableDetails" result-class = "java.util.HashMap">
        SELECT * FROM FLEXI_DEPOSIT_DETAILS WHERE FLEXI_ACT_NUM = #FLEXI_ACT_NUM:VARCHAR#
        AND FLEXI_DATE = #FLEXI_DATE:DATE#
    </mapped-statement>
    
    <mapped-statement name = "getSelectEachLienDetails" result-class = "java.util.HashMap">
        SELECT DSA.TOTAL_BALANCE, DA.PROD_ID, AVAILABLE_BALANCE,DSA.DEPOSIT_DT,DA.CATEGORY,DA.DEPOSIT_NO AS "DEPOSITNO",   
        DSA.DEPOSIT_SUB_NO AS "DEPOSITSUBNO",DSA.DEPOSIT_AMT,MATURITY_DT,DSA.TOT_INT_AMT,TOTAL_INT_CREDIT,
        TOTAL_INT_DRAWN,DSA.RATE_OF_INT FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA WHERE DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        AND DSA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DSA.ACCT_STATUS!='CLOSED' AND DSA.STATUS!='DELETED' AND DSA.AUTHORIZE_STATUS='AUTHORIZED'
    </mapped-statement>
    
    <mapped-statement name = "getSelectFlexiAmtDetails" result-class = "java.util.HashMap">
        SELECT ACT_NUM,FLEXI_DEPOSIT_AMT FROM ACT_MASTER WHERE ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name ="updateFlexiAmtDetails" result-class = "java.util.HashMap">
        UPDATE ACT_MASTER SET AVAILABLE_BALANCE = CLEAR_BALANCE WHERE ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name ="insertError_showing" result-class = "java.util.HashMap">    
        INSERT INTO ERROR_SHOWING (ERROR_DATE,TASK_NAME,ACT_NUM,ERROR_MSG,BRANCH_ID,ERROR_CLASS) VALUES
        (#ERROR_DATE:DATE#,#TASK_NAME:VARCHAR#,#ACT_NUM:VARCHAR#,#ERROR_MSG:VARCHAR#,#BRANCH_ID:VARCHAR#,#ERROR_CLASS:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name ="deleteError_showing" result-class = "java.util.HashMap">    
        DELETE FROM ERROR_SHOWING WHERE ERROR_DATE = #ERROR_DATE:DATE# AND TASK_NAME = #TASK_NAME:VARCHAR#
        AND BRANCH_ID = #BRANCH_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getSelectError_showing" result-class = "java.util.HashMap">
        SELECT ACT_NUM,TASK_NAME,ERROR_MSG,BRANCH_ID,ERROR_CLASS FROM ERROR_SHOWING WHERE ERROR_DATE = #ERROR_DATE:DATE#
        AND TASK_NAME = #TASK_NAME:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name="TDRecalcuationInterestList" result-class="java.util.LinkedHashMap" >
        SELECT DA.DEPOSIT_NO AS "Deposit Number", get_cust_name(C.CUST_ID)  AS "Customer Name",
        DA.CATEGORY AS "Category",DSA.DEPOSIT_DT AS "Deposit Date",DSA.RATE_OF_INT AS "Roi",DA.PROD_ID AS prodId,
        DSA.TOT_INT_AMT AS "IntAmt",DSA.DEPOSIT_AMT AS "DepositAmt",DSA.MATURITY_AMT AS "maturityAmt"
        FROM DEPOSIT_SUB_ACINFO DSA, DEPOSIT_ACINFO DA, CUSTOMER C, DEPOSITS_PROD_INTPAY DPI
        WHERE BRANCH_ID = #BRANCH_CODE:VARCHAR# AND C.CUST_ID = DA.CUST_ID 
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND (DA.DEPOSIT_STATUS NOT IN ('CLOSED', 'DORMANT')) 
        AND DSA.AUTHORIZE_STATUS = 'AUTHORIZED' AND DA.PROD_ID = DPI.PROD_ID AND 
        DA.DEPOSIT_NO NOT IN(SELECT DEPOSIT_NO FROM RECALCULATION_OF_INTEREST WHERE DEPOSIT_DT = DSA.DEPOSIT_DT)
        <dynamic>
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="PROD_ID">
                    DA.PROD_ID = #PROD_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="DEPOSIT_DT">
                    DEPOSIT_DT &gt;= #DEPOSIT_DT:DATE#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="DEPOSIT_NO">
                    DEPOSIT_NO &gt; #DEPOSIT_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull property = "FROM_NO">
                    <isNotNull prepend = "AND" property = "TO_NO">
                        DA.DEPOSIT_NO BETWEEN #FROM_NO:VARCHAR# AND #TO_NO:VARCHAR#
                    </isNotNull>
                </isNotNull>
            </isParameterPresent>  
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="Deposit Number">
                    UPPER(DA.DEPOSIT_NO) LIKE UPPER('%$Deposit Number$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="Customer Name">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$Customer Name$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="Category">
                    UPPER(DA.CATEGORY) LIKE UPPER('%$Category$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="Roi">
                    UPPER(DSA.RATE_OF_INT) LIKE UPPER('%$Roi$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="Deposit Date">
                    UPPER(DSA.DEPOSIT_DT) LIKE UPPER('%$Deposit Date$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="prodId">
                    UPPER(DA.PROD_ID) LIKE UPPER('%$prodId$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="IntAmt">
                    UPPER(DSA.TOT_INT_AMT) LIKE UPPER('%$IntAmt$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="maturityAmt">
                    UPPER(DSA.MATURITY_AMT) LIKE UPPER('%$maturityAmt$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>        
        ORDER BY DA.DEPOSIT_NO
    </dynamic-mapped-statement>
     
    <mapped-statement name ="getSelectROIDate" result-class = "java.util.HashMap">
        SELECT DISTINCT ROI_DATE FROM DEPOSIT_ROI_GROUP_TYPE_RATE WHERE ROI_DATE &gt;= #FROM_DT:DATE# AND STATUS!='DELETED'
    </mapped-statement>
     
    <mapped-statement name ="getSelectCategoryROIDate" result-class = "java.util.HashMap">
        SELECT ROI AS NEW_ROI FROM DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR,DEPOSIT_ROI_GROUP_PROD DRGP,DEPOSIT_ROI_GROUP_CAT DRGC
        WHERE ROI_DATE &gt;= #DEPOSIT_DT:DATE# AND DRGTR.ROI_GROUP_ID = DRGP.ROI_GROUP_ID AND DRGP.ROI_GROUP_ID = DRGC.ROI_GROUP_ID 
        AND DRGC.CATEGORY_ID = #CATEGORY_ID:VARCHAR# AND DRGTR.STATUS!='DELETED' AND DRGP.PROD_ID = #PROD_ID:VARCHAR# AND
        #PERIOD# BETWEEN FROM_PERIOD AND TO_PERIOD
    </mapped-statement>
     
    <mapped-statement name ="getSelectEachDepositPeriod" result-class = "java.util.HashMap">
        SELECT DEPOSIT_NO,RATE_OF_INT,DEPOSIT_PERIOD_DD,DEPOSIT_PERIOD_MM,DEPOSIT_PERIOD_YY FROM DEPOSIT_SUB_ACINFO WHERE 
        DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND ACCT_STATUS!='CLOSED' AND STATUS!='DELETED' AND AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
     
    <mapped-statement name = "updateRecalcuatedrate" result-class = "java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET RATE_OF_INT = #RATE_OF_INT:NUMBER#,TOT_INT_AMT = #TOT_INT_AMT:NUMBER#,
        MATURITY_AMT = #MATURITY_AMT:NUMBER# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
     
    <mapped-statement name = "selectalreadyExistingNominee" result-class = "java.util.HashMap">
        SELECT DEPOSIT_NO FROM DEPOSIT_NOMINEE_DETAIL WHERE DEPOSIT_NO = #value:VARCHAR# AND STATUS!='DELETED'
    </mapped-statement>
     
    <mapped-statement name = "selectalreadyExistingPOA" result-class = "java.util.HashMap">
        SELECT DEPOSIT_NO FROM DEPOSIT_POA WHERE DEPOSIT_NO = #value:VARCHAR# AND STATUS!='DELETED'
    </mapped-statement>
     
    <mapped-statement name = "selectalreadyExistingSignatory" result-class = "java.util.HashMap">
        SELECT DEPOSIT_NO FROM DEPOSIT_AUTHORIZE WHERE DEPOSIT_NO = #value:VARCHAR# AND STATUS!='DELETED'
    </mapped-statement>
     
    <dynamic-mapped-statement name="PassBook.getAccountList" result-class="java.util.LinkedHashMap">
        <dynamic>
            <isEqual property="PRODUCT_TYPE" compareValue="OA" >
                SELECT am.ACT_NUM, PROD_ID, AM.CUST_ID, get_cust_name(C.CUST_ID) 
                AS CUST_NAME, STREET||', '|| AREA||', '||CITY AS ADDRESS FROM ACT_MASTER AM, CUSTOMER C,CUST_ADDR CA,ACT_PARAM_DETAIL APD  
                WHERE 
                <!--AM.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND -->
                AM.CUST_ID = C.CUST_ID AND AM.STATUS!='DELETED' AND CA.CUST_ID=C.CUST_ID AND
                CA.ADDR_TYPE=C.COMM_ADDR_TYPE  AND APD.ACT_NUM=AM.ACT_NUM  AND APD.PASS_BOOK=UPPER('Y')
                AND AM.PROD_ID = #PRODUCT_ID:VARCHAR#
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ACT_NUM">
                    UPPER(am.ACT_NUM) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_ID">
                    UPPER(AM.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_NAME">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ADDRESS">
                    UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                </isNotNull>
            </isParameterPresent>
            </isEqual>
            <isEqual property="PRODUCT_TYPE" compareValue="AD" >
                SELECT ACCT_NUM AS ACT_NUM, PROD_ID, LB.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS LF, CUSTOMER C,CUST_ADDR CA WHERE 
                <!--LB.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND-->
                LB.BORROW_NO = LF.BORROW_NO AND
                LB.CUST_ID = C.CUST_ID AND LB.STATUS!='DELETED' AND LF.STATUS!='DELETED'
                AND PROD_ID IN (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE ='OD' )
                AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ACT_NUM">
                    UPPER(ACCT_NUM) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_ID">
                    UPPER(LB.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_NAME">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ADDRESS">
                    UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                </isNotNull>
            </isParameterPresent>
            </isEqual>
            <isEqual property="PRODUCT_TYPE" compareValue="AAD" >
                SELECT ACCT_NUM AS ACT_NUM, PROD_ID, LB.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM AGRI_LOANS_BORROWER LB, AGRI_LOANS_FACILITY_DETAILS LF, CUSTOMER C,CUST_ADDR CA WHERE 
                LB.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND LB.BORROW_NO = LF.BORROW_NO AND
                LB.CUST_ID = C.CUST_ID AND LB.STATUS!='DELETED' AND LF.STATUS!='DELETED'
                AND PROD_ID IN (SELECT PROD_ID FROM AGRILOANS_PRODUCT WHERE BEHAVES_LIKE  IN ('AOD','ACC'))
                AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ACT_NUM">
                    UPPER(ACCT_NUM) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_ID">
                    UPPER(LB.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_NAME">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ADDRESS">
                    UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                </isNotNull>
            </isParameterPresent>
            </isEqual>
            <isEqual property="PRODUCT_TYPE" compareValue="TD" >
               SELECT DSA.DEPOSIT_NO ||'_'||DSA.DEPOSIT_SUB_NO AS ACT_NUM,DA.PROD_ID,GET_JOINT_CUST(DSA.DEPOSIT_NO) AS CUST_NAME,
                STREET || ', ' || AREA || ', ' || CITY AS ADDRESS FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA,CUST_ADDR CA
               WHERE DA.DEPOSIT_NO = DSA.DEPOSIT_NO               
               AND CA.CUST_ID = DA.CUST_ID
               AND CA.ADDR_TYPE = DA.ADDR_TYPE
               AND DSA.STATUS != 'DELETED'
               AND DSA.AUTHORIZE_STATUS = 'AUTHORIZED'
               AND DA.BRANCH_ID  = #BRANCH_CODE:VARCHAR#
               AND DA.PROD_ID = #PRODUCT_ID:VARCHAR#
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ACT_NUM">
                    UPPER(DSA.DEPOSIT_NO ||'_'||DSA.DEPOSIT_SUB_NO) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_ID">
                    UPPER(AM.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_NAME">
                    UPPER(GET_JOINT_CUST(DSA.DEPOSIT_NO)) LIKE UPPER('%$CUST_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ADDRESS">
                    UPPER(STREET || ', ' || AREA || ', ' || CITY) LIKE UPPER('%$ADDRESS$%')
                </isNotNull>
            </isParameterPresent>
            </isEqual>
            <isEqual property="PRODUCT_TYPE" compareValue="TL" >
               SELECT LF.ACCT_NUM AS ACT_NUM,LF.PROD_ID,GET_JOINT_CUST(LF.ACCT_NUM) AS CUST_NAME, 
               STREET || ', ' || AREA || ', ' || CITY AS ADDRESS FROM LOANS_FACILITY_DETAILS LF,LOANS_BORROWER LB,CUST_ADDR CA
               WHERE LB.BORROW_NO = LF.BORROW_NO
               AND CA.CUST_ID = LB.CUST_ID
               AND LF.STATUS != 'DELETED'
               AND LF.ACCT_STATUS != 'CLOSED'
               AND LF.AUTHORIZE_STATUS_1 = 'AUTHORIZED'   
               AND LF.BRANCH_ID  = #BRANCH_CODE:VARCHAR#
               AND LF.PROD_ID = #PRODUCT_ID:VARCHAR#
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ACT_NUM">
                    UPPER(LF.ACCT_NUM) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_ID">
                    UPPER(AM.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_NAME">
                    UPPER(GET_JOINT_CUST(LF.ACCT_NUM)) LIKE UPPER('%$CUST_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ADDRESS">
                    UPPER(STREET || ', ' || AREA || ', ' || CITY) LIKE UPPER('%$ADDRESS$%')
                </isNotNull>
            </isParameterPresent>
            </isEqual>
        </dynamic>
    </dynamic-mapped-statement> 
    
    <dynamic-mapped-statement name="getAccountNumberNamePassBookOA" result-class="java.util.HashMap">
        SELECT get_cust_name(C.CUST_ID)  CUSTOMER_NAME, MINOR, ACT_STATUS_ID, STREET || ', ' || AREA || ', ' || CITY AS ADDRESS
        FROM ACT_MASTER AM, CUSTOMER C,ACT_PARAM_DETAIL APD,CUST_ADDR CA
        WHERE CA.CUST_ID = C.CUST_ID AND APD.ACT_NUM = AM.ACT_NUM
        AND CA.ADDR_TYPE = C.COMM_ADDR_TYPE AND   AM.CUST_ID = C.CUST_ID
        AND APD.PASS_BOOK=UPPER('Y') AND AM.ACT_NUM = #ACC_NUM:VARCHAR#
        <dynamic>
            <isNotPropertyAvailable prepend = "AND" property="CLOSECHECK">
                AM.ACT_STATUS_ID != 'CLOSED'
            </isNotPropertyAvailable>
        </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="getNextLineNoForPassBookOA" result-class="java.util.HashMap">
        SELECT ACT_NUM, NVL(PRODUCT_AMT,1) AS LINE_NO
        FROM ACT_MASTER WHERE ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getNextLineNoForPassBookAD" result-class="java.util.HashMap">
        SELECT ACCT_NUM as ACT_NUM, NVL(PASSBOOK_LINENO,1) AS LINE_NO
        FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
     <mapped-statement name="getNextLineNoForPassBookMDS" result-class="java.util.HashMap">
        SELECT CHITTAL_NO as ACT_NUM, NVL(PASSBOOK_LINENO,1) AS LINE_NO
        FROM MDS_MASTER_MAINTENANCE WHERE CHITTAL_NO = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getNextLineNoForPassBookTL" result-class="java.util.HashMap">
        SELECT ACCT_NUM as ACT_NUM, NVL(PASSBOOK_LINENO,1) AS LINE_NO
        FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getNextLineNoForPassBookTD" result-class="java.util.HashMap">
        SELECT DEPOSIT_NO as ACT_NUM, NVL(PASSBOOK_LINENO+1,1) AS LINE_NO
        FROM DEPOSIT_ACINFO WHERE DEPOSIT_NO = substr(#ACT_NUM:VARCHAR#,0,13)
    </mapped-statement>
        
    <mapped-statement name="getCustomerAddressDetails" result-map="getCustomerDetailsResult" >
        SELECT DECODE (CUST_TYPE, 'CORPORATE', COMP_NAME, CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME)) CUSTOMER_NAME, 
        STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE
        FROM CUSTOMER, CUST_ADDR
        WHERE CUSTOMER.CUST_ID = #CUST_ID:VARCHAR# and CUSTOMER.CUST_ID = CUST_ADDR.CUST_ID
        AND CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE
    </mapped-statement>
    
    <mapped-statement name="getVerifiedActNumber" result-class="java.util.HashMap">
        SELECT * FROM ACT_MASTER AC,OP_AC_PRODUCT OAP WHERE  (ACT_NUM IN  ($ACT_NUM$) or  ACT_NUM IN  ($ACT_NUM1$))
        AND OAP.PROD_ID=AC.PROD_ID 
        AND AC.AUTHORIZATION_STATUS = 'AUTHORIZED'
        AND AC.STATUS !='DELETED'
        AND AC.ACT_STATUS_ID !='CLOSED'
    </mapped-statement>

    <mapped-statement name="getLoanCloseDate" result-class="java.util.HashMap">
        SELECT LSD.TO_DT AS TO_DT FROM  LOANS_FACILITY_DETAILS   LFD,LOANS_SANCTION_DETAILS LSD 
        WHERE LSD.BORROW_NO=LFD.BORROW_NO AND LFD.ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getVerifiedActNumberAD" result-class="java.util.HashMap">
        SELECT * FROM LOANS_FACILITY_DETAILS AC,LOANS_PRODUCT OAP WHERE  ACCT_NUM IN  ($value$)
        AND OAP.PROD_ID=AC.PROD_ID 
    </mapped-statement>
    
    <mapped-statement name="insertCardDetailsTO" inline-parameters="true">
        INSERT INTO CARD_ACCT_STATUS
        (CARD_ACCT_NUM, SL_NO, ACTION, ACTION_DT, REMARKS, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (#cardActNum:VARCHAR#, #slNo:VARCHAR#, #action:VARCHAR#, #actionDt:DATE#, 
        #remarks:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#,  (SELECT SYS_DATE() FROM DUAL))
    </mapped-statement>
    
    <mapped-statement name="deleteCardAccountData" result-class="java.util.HashMap">
        DELETE CARD_ACCT_STATUS WHERE STATUS!='DELETED' AND AUTHORIZED_STATUS IS NULL
        AND CARD_ACCT_NUM=(SELECT CARD_ACCT_NUM FROM ACT_MASTER WHERE ACT_NUM=#ACT_NUM#)
    </mapped-statement>
    
    <mapped-statement name="authorizeCardAccountData" result-class="java.util.HashMap">
        UPDATE CARD_ACCT_STATUS SET
        AUTHORIZED_STATUS=#STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#,
        AUTHORIZED_DT = (SELECT SYS_DATE() FROM DUAL)
        WHERE STATUS != 'DELETED'AND AUTHORIZED_STATUS IS NULL AND 
        CARD_ACCT_NUM=(SELECT CARD_ACCT_NUM FROM ACT_MASTER WHERE ACT_NUM=#ACCOUNTNO:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name="getSelectCardActTO" result-map="getCardTOResult" >
        SELECT * FROM CARD_ACCT_STATUS WHERE STATUS!='DELETED' AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS='AUTHORIZED')
        AND CARD_ACCT_NUM=(SELECT CARD_ACCT_NUM FROM ACT_MASTER WHERE ACT_NUM=#ACT_NUM#) ORDER BY SL_NO
    </mapped-statement>
        
    <result-map name="getCardTOResult" class="com.see.truetransact.transferobject.operativeaccount.CardAccountTO">
        <property name="cardActNum" column="CARD_ACCT_NUM"/>
        <property name="slNo" column="SL_NO"/>
        <property name="action" column="ACTION"/>
        <property name="actionDt" column="ACTION_DT"/>
        <property name="remarks" column="REMARKS"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
    </result-map>
      <mapped-statement name="getAClassShareTypeForSA" result-class="java.util.HashMap">
       SELECT SA.SHARE_TYPE AS SHARE_TYPE FROM SHARE_ACCT SA,ACT_MASTER AM,LOOKUP_MASTER LM 
       WHERE AM.CUST_ID=#CUST_ID:VARCHAR# AND AM.CUST_ID=SA.CUST_ID AND LM.LOOKUP_ID='SHARE_TYPE' AND LM.LOOKUP_DESC ='A Class' 
       AND LM.LOOKUP_REF_ID=SA.SHARE_TYPE AND SA.OUTSTANDING_AMOUNT > 0 AND AM.AUTHORIZATION_STATUS = 'AUTHORIZED' AND AM.STATUS !='DELETED'
    </mapped-statement>

    <dynamic-mapped-statement name="getSBAccoutDebitBalanceForTOD" result-class="java.util.HashMap">
       SELECT ac.available_balance  as AVAILABLE_BALANCE FROM act_master ac, OP_AC_ACCOUNT_PARAM op
       WHERE ac.PROD_ID=OP.PROD_ID
       <dynamic>
       <isParameterPresent>
                    <isNotNull prepend = "AND" property = "CUST_ID">
                        cust_id = #CUST_ID:VARCHAR# 
                    </isNotNull>
        </isParameterPresent>   
           <isParameterPresent>
                    <isNotNull prepend = "AND" property = "ACCT_NUM">
                        ac.ACT_NUM = #ACCT_NUM:VARCHAR# 
                    </isNotNull>
            </isParameterPresent>    
            and OP.TEMP_OD_ALLOWED = 'Y' and ac.available_balance &lt; 0
       AND ac.status != 'DELETED' AND ac.authorization_status = 'AUTHORIZED'
       </dynamic>
    </dynamic-mapped-statement>

    <!--  Added by nithya -->
    <mapped-statement name="getSBODBorrowerEligAmt" result-class="java.util.HashMap">
       SELECT * FROM LOAD_LOAN_ELG_BORROWER(#MEMBER_NO:VARCHAR#,#PROD_ID:VARCHAR#,cast(#SALARY# as numeric),#APPLY_TYPE:VARCHAR#,cast(#APPLIED_AMT# as numeric),cast(#COSTOFVEHICLE# as numeric))
    </mapped-statement>
    
    <!-- Added by nithya -->
    <mapped-statement name="insertSuretyDetailsForSBOD" inline-parameters="true">
       INSERT INTO OP_AC_SECURITY_MEMBER
        (ACCT_NUM, MEMBER_NO, MEMBER_NAME, MEMBER_TYPE, CONTACT_NO, MEMBER_SALARY, MEMBER_NETWORTH, BORROWER_SALARY,
		 BORROWER_NETWORTH,BRANCH_CODE,STATUS,STATUS_DT,STATUS_BY,AUTHORIZED_STATUS,AUTHORIZED_DT,AUTHORIZED_BY,FROM_DT,TO_DT,ACT_STATUS,BORROWER_MEMBER_NO,TOD_SANCTIONED,SURETY_ELIG_AMT
        ) VALUES (#acctNum:VARCHAR#, #memberNo:VARCHAR#, #memberName:VARCHAR#, #memberType:VARCHAR#,#contactNo:NUMERIC#,#memberSalary:NUMBER#,#memberNetworth:VARCHAR#,#borrowerSalary:NUMBER#,
		#borrowerNetworth:VARCHAR#,#branchCode:VARCHAR#,#status:VARCHAR#,
		#statusDt:DATE#,#statusBy:VARCHAR#,#authorizedStatus:VARCHAR#,#authorizedDt:DATE#,#authorizedBy:VARCHAR#,#fromDt:DATE#,#toDt:DATE#,#acctstatus:VARCHAR#,#borrowerMemberNo:VARCHAR#,#todSanctioned:NUMBER#,#suretyEligAmt:NUMBER#		
        ) 
    </mapped-statement>
    
    <mapped-statement name="getSBODDueDt" result-class="java.util.HashMap">
      Select Get_OD_ExpDate(#MEMBER_NO:VARCHAR#,#FRM_DT:DATE#) as "DUE_DT" from dual
       <!-- Select Get_OD_ExpDate(#MEMBER_NO:VARCHAR#,TO_CHAR(#FRM_DT:DATE#,'YYYY-MM-DD')) from dual;   -->         
    </mapped-statement>
    
     <mapped-statement name="getPassBookProcess" result-class="java.util.HashMap">
      Select PKG_GN_PBK.GN_PASSBK_PROCESS (#MODULE_TYPE:VARCHAR#,#ACCT_NUM:VARCHAR#, #INITDT:DATE#,  cast(#INITSLNO# as integer) , cast(#INIT_TAG# as integer)) as "PASS" from dual
    </mapped-statement>
    
    <mapped-statement name="updateGnPassbook" inline-parameters="true">
		UPDATE GN_PASSBOOK SET POST_TAG=1 WHERE ACT_NUM =#ACT_NUM:NUMBER#
    </mapped-statement>
    
    <mapped-statement name="getReportName" result-class="java.util.HashMap">
	select RPTNAME||'F' as firstpage,RPTNAME as printtrans from GN_PASS_BK_AC WHERE PROD_DESC  =#PROD_DESC:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getSuretyEligibilityForSBOD" result-class="java.util.HashMap">
       SELECT * FROM LOAD_LOAN_ELG_SURETY(#SURETY_MEMBERNO:VARCHAR#,#BORROW_MEMNO:VARCHAR#,#PROD_ID:VARCHAR#,cast(#SALARY# as numeric),#APPLY_TYPE:VARCHAR#,cast(#APPLIED_AMT# as numeric))
    </mapped-statement>
    
    
     <mapped-statement name="getSelectSBODSecurityTO" result-map="getSBODSecurityTOResult" >
        SELECT * FROM OP_AC_SECURITY_MEMBER WHERE STATUS!='DELETED' AND ACT_STATUS !='CLOSED' AND ACCT_NUM = #value:VARCHAR#  
    </mapped-statement>
    
    
    <result-map name="getSBODSecurityTOResult" class="com.see.truetransact.transferobject.operativeaccount.SbODSecurityTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="memberNo" column="MEMBER_NO"/>
        <property name="memberName" column="MEMBER_NAME"/>
        <property name="memberType" column="MEMBER_TYPE"/>
        <property name="contactNo" column="CONTACT_NO"/>
        <property name="memberNetworth" column="MEMBER_NETWORTH"/>
        <property name="memberSalary" column="MEMBER_SALARY"/>
        <property name="borrowerNetworth" column="BORROWER_NETWORTH"/>
        <property name="borrowerSalary" column="BORROWER_SALARY"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
	<property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="acctstatus" column="ACT_STATUS"/>
        <property name="fromDt" column="FROM_DT"/>
        <property name="toDt" column="TO_DT"/>
        <property name="borrowerMemberNo" column="BORROWER_MEMBER_NO"/>
        <property name="todSanctioned" column="TOD_SANCTIONED"/>   
        <property name="suretyEligAmt" column="SURETY_ELIG_AMT"/>   
    </result-map>
    
    <mapped-statement name="updateSuretyDetailsForSBOD" inline-parameters="true">
        UPDATE OP_AC_SECURITY_MEMBER SET 
        MEMBER_NAME = #memberName:VARCHAR#,
        MEMBER_TYPE = #memberType:VARCHAR#,
        CONTACT_NO = #contactNo:NUMERIC#, 
        MEMBER_NETWORTH = #memberNetworth:VARCHAR#,
        MEMBER_SALARY = #memberSalary:NUMERIC#,
        BORROWER_NETWORTH = #borrowerNetworth:VARCHAR#,
        BORROWER_SALARY = #borrowerSalary:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#,      
        TOD_SANCTIONED = #todSanctioned:NUMERIC#,
        SURETY_ELIG_AMT = #suretyEligAmt:NUMERIC#,
        AUTHORIZED_STATUS = #authorizedStatus:VARCHAR#,
        AUTHORIZED_DT = #authorizedDt:DATE#,
        AUTHORIZED_BY = #authorizedBy:VARCHAR#,
        FROM_DT = #fromDt:DATE#,
        TO_DT = #toDt:DATE#
        WHERE MEMBER_NO = #memberNo:VARCHAR# AND ACCT_NUM = #acctNum:VARCHAR# AND STATUS != 'DELETED' AND ACT_STATUS !='CLOSED' AND STATUS in ('CREATED','MODIFIED')
    </mapped-statement>
   
    <mapped-statement name="deleteSuretyDetailsForSBOD" inline-parameters="true">
        UPDATE OP_AC_SECURITY_MEMBER SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE MEMBER_NO = #memberNo:VARCHAR# AND ACCT_NUM = #acctNum:VARCHAR# 
        AND STATUS != 'DELETED' AND ACT_STATUS !='CLOSED'
        AND FROM_DT = #fromDt:DATE#
        AND TO_DT = #toDt:DATE#        
    </mapped-statement>
    
    <mapped-statement name="authorizeSuretyDetailsForSBOD" result-class="java.util.HashMap">
        UPDATE OP_AC_SECURITY_MEMBER SET
        AUTHORIZED_STATUS=#STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#,
        AUTHORIZED_DT = (SELECT SYS_DATE() FROM DUAL)
        WHERE STATUS != 'DELETED'AND AUTHORIZED_STATUS IS NULL AND 
       <!-- modified by rishad 17/07/2017 condition not working properly-->       
        ACCT_NUM =#ACCOUNTNO:VARCHAR#
        <!--ACCT_NUM=(SELECT ACT_NUM FROM ACT_MASTER WHERE ACT_NUM=#ACCOUNTNO:VARCHAR#)-->
    </mapped-statement>    
     
    
    <mapped-statement name="updateSuretyDetailsForSBODRenewal" inline-parameters="true">
        UPDATE OP_AC_SECURITY_MEMBER SET 
        MEMBER_NAME = #memberName:VARCHAR#,
        MEMBER_TYPE = #memberType:VARCHAR#,
        CONTACT_NO = #contactNo:NUMERIC#, 
        MEMBER_NETWORTH = #memberNetworth:VARCHAR#,
        MEMBER_SALARY = #memberSalary:NUMERIC#,
        BORROWER_NETWORTH = #borrowerNetworth:VARCHAR#,
        BORROWER_SALARY = #borrowerSalary:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#,
        ACT_STATUS = #acctstatus:VARCHAR#,
        FROM_DT = #fromDt:DATE#,
        TO_DT = #toDt:DATE#,
        TOD_SANCTIONED = #todSanctioned:NUMERIC#,
        SURETY_ELIG_AMT = #suretyEligAmt:NUMERIC#,
        AUTHORIZED_STATUS = #authorizedStatus:VARCHAR#,
        AUTHORIZED_DT = #authorizedDt:DATE#,
        AUTHORIZED_BY = #authorizedBy:VARCHAR#
        WHERE MEMBER_NO = #memberNo:VARCHAR# AND ACCT_NUM = #acctNum:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
    
    
    <!-- newly added -->
    <mapped-statement name="updateOldSureryRecords" inline-parameters="true">
        UPDATE OP_AC_SECURITY_MEMBER SET 
        ACT_STATUS = #acctstatus:VARCHAR#
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND STATUS != 'DELETED' AND STATUS IN ('CREATED','MODIFIED')
    </mapped-statement>
    <!-- End -->
    
    
    <mapped-statement name="checkODForRenewal" result-class="java.util.HashMap" >        
         select * from OP_AC_SECURITY_MEMBER OP where OP.ACCT_NUM = #ACT_NUM:VARCHAR# and OP.STATUS IN('CREATED','MODIFIED') AND (SELECT DE.CURR_APPL_DT FROM DAY_END DE) >= OP.TO_DT and ACT_STATUS != 'CLOSED'
    </mapped-statement> 
    
    <mapped-statement name="getBorrowerShareDetails" result-class="java.util.HashMap" >        
        <!-- select c.membership_no,c.dob,c.retirement_dt from customer c where c.membership_no = 
         (select c.membership_no  from customer c where c.cust_id = #CUST_ID:VARCHAR#) -->         
         select c.membership_no,c.dob,c.retirement_dt from customer c where c.cust_id = #CUST_ID:VARCHAR#
    </mapped-statement> 
    
    <!-- End -->
     <mapped-statement name="getSelectCardActStatus" result-class="java.util.HashMap">
        SELECT * FROM CARD_ACCT_STATUS WHERE STATUS!='DELETED' AND (AUTHORIZED_STATUS IS NULL) 
        AND CARD_ACCT_NUM=(SELECT CARD_ACCT_NUM FROM ACT_MASTER WHERE ACT_NUM=#ACCT_NUM#) ORDER BY SL_NO
    </mapped-statement>
    
    <dynamic-mapped-statement name="updateAvailableBalanceForSBODProduct"  inline-parameters="true">
        <!-- UPDATE ACT_MASTER SET        
        AVAILABLE_BALANCE = NVL(CLEAR_BALANCE,0) + NVL(TOD_LIMIT,0)
        WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#
        AND STATUS != 'DELETED'        
        AND ACT_STATUS_ID  NOT IN ('CLOSED', 'DECEASED', 'DORMANT')-->
        UPDATE ACT_MASTER SET          
        <dynamic> 
            <isPropertyAvailable prepend = "" property="NORMAL">
               AVAILABLE_BALANCE = NVL(CLEAR_BALANCE,0) + NVL(TOD_LIMIT,0)
            </isPropertyAvailable>        
            <isPropertyAvailable prepend = "" property="OD_ENHANCE">
               AVAILABLE_BALANCE = NVL(TOD_LIMIT,0) + NVL(CLEAR_BALANCE,0)
            </isPropertyAvailable>
        </dynamic>
        WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#
        AND STATUS != 'DELETED'        
        AND ACT_STATUS_ID  NOT IN ('CLOSED', 'DECEASED', 'DORMANT')  
    </dynamic-mapped-statement> 
    
     <mapped-statement name="checkIfTodAdded"  result-class="java.util.HashMap">        
       <!-- select * from OP_AC_SECURITY_MEMBER op where 
       OP.ACCT_NUM = #ACT_NUM:VARCHAR# and OP.AUTHORIZED_STATUS in ('AUTHORIZED') -->       
       select * from OP_AC_SECURITY_MEMBER op where         
       OP.ACCT_NUM = #ACT_NUM:VARCHAR# and OP.AUTHORIZED_STATUS IS NULL
       AND OP.ACT_STATUS IN ('NEW','RENEW') AND OP.STATUS IN ('CREATED','MODIFIED')
     </mapped-statement> 
     
     <mapped-statement name="getLatestSBODLimitForAccNum"  result-class="java.util.HashMap">  
       select A.AVAILABLE_BALANCE,A.CLEAR_BALANCE,A.TOD_LIMIT from ACT_MASTER A where A.ACT_NUM = #ACT_NUM:VARCHAR#
     </mapped-statement>      
   
     <mapped-statement name="getSBODSecurityCount"  result-class="java.util.HashMap">  
       select count(*) as SURETY_COUNT from OP_AC_SECURITY_MEMBER op 
       where OP.ACCT_NUM=#ACT_NUM:VARCHAR# and  op.status IN ('CREATED', 'MODIFIED')  
       and op.act_status IN ('NEW', 'RENEW') <!--AND OP.AUTHORIZED_STATUS in ('AUTHORIZED')-->
     </mapped-statement> 
     
     <mapped-statement name="getRoudOffParameterForSBOD"  result-class="java.util.HashMap">  
         select LA.ROUNDOFF from LOAN_APPLICATION_PARAM_ECS la where LA.PROD_ID = #PROD_ID:VARCHAR#
     </mapped-statement> 
     
     <mapped-statement name="getSBODExpiryDateForAcct"  result-class="java.util.HashMap">  
         select max(OP.TO_DT) as TO_DT from OP_AC_SECURITY_MEMBER op where OP.ACCT_NUM = #ACT_NUM:VARCHAR#
         AND OP.ACT_STATUS IN ('NEW','RENEW') AND OP.STATUS IN ('CREATED','MODIFIED')
     </mapped-statement> 
     
     <mapped-statement name="insertSBODAcctStatus" inline-parameters="true">
       INSERT INTO SB_OD_ACCT_STATUS
       (ACCT_NUM,ACT_STATUS)VALUES(#acctNum:VARCHAR#,#acctstatus:VARCHAR#) 
     </mapped-statement>
     
     <mapped-statement name="getSBODStatusForAcct"  result-class="java.util.HashMap">  
         select S.ACT_STATUS from SB_OD_ACCT_STATUS s where S.ACCT_NUM = #value:VARCHAR#
     </mapped-statement> 
     
     <mapped-statement name="updateBalancesWhileSBODClosing"  inline-parameters="true">
        UPDATE ACT_MASTER SET        
        AVAILABLE_BALANCE = NVL(CLEAR_BALANCE,0),
        TOD_LIMIT = 0
        WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#
        AND STATUS != 'DELETED'        
        AND ACT_STATUS_ID  NOT IN ('CLOSED', 'DECEASED', 'DORMANT')
    </mapped-statement> 
    
    <mapped-statement name="getSBODlastIntCalcDt"  result-class="java.util.HashMap">  
         SELECT ACT.LAST_CR_INT_APPLDT,AC.CREATE_DT FROM ACT_PARAM_DETAIL ACT,ACT_MASTER ac WHERE 
         AC.ACT_NUM = ACT.ACT_NUM and ACT.ACT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement> 
    
     <mapped-statement name="getIsDepositInterestTransferToAct" result-class="java.util.HashMap">
        SELECT INT_PAY_ACC_NO, DEPOSIT_NO from DEPOSIT_SUB_ACINFO where INT_PAY_ACC_NO = #ACCT_NUM:VARCHAR# 
        AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND ACCT_STATUS IN ('NEW')
    </mapped-statement>
    
    <mapped-statement name="getIsAccountLinkedwitATM" result-class="java.util.HashMap">
        SELECT * FROM ACT_MASTER AM, OP_AC_SPCLITEM_PARAM OPSP WHERE AM.PROD_ID = OPSP.PROD_ID AND AM.ACT_NUM = #ACCT_NUM:VARCHAR# 
        AND NVL(OPSP.ATM_CARD_ISSUED,'N') = 'Y' AND ACT_STATUS_ID NOT IN ('CLOSED')
    </mapped-statement>
    
    <mapped-statement name="getAccountLinktoNormalAct" result-class="java.util.HashMap">
        SELECT DISTINCT
            ACT_NUM,
            get_cust_name(cu.cust_id) AS CUSTOMER_NAME
        FROM ACT_MASTER AM,OP_AC_SPCLITEM_PARAM OASP,CUSTOMER CU
       WHERE     AM.PROD_ID = #PROD_ID:VARCHAR#
             AND OASP.PROD_ID = AM.PROD_ID
             AND AM.CUST_ID = CU.CUST_ID
             AND NVL(OASP.ATM_CARD_ISSUED,'N') = 'N'
             AND (AM.ACT_STATUS_ID IN
                     ('NEW',
                      'PART_FREEZE',
                      'OPERATIONAL',
                      'CREDIT_FREEZE',
                      'DEBIT_FREEZE',
                      'TOTAL_FREEZE',
                      'COMP_FREEZE'))
             AND AM.STATUS NOT IN ('DELETED')
             AND AM.AUTHORIZATION_STATUS = 'AUTHORIZED'         
    ORDER BY ACT_NUM        
    </mapped-statement>
    
    <mapped-statement name="getAccountATMMinBalanceList" result-class="java.util.HashMap">
        <!--SELECT * FROM ACT_MASTER AM,OP_AC_SPCLITEM_PARAM OASP
        WHERE AM.PROD_ID = OASP.PROD_ID AND NVL(OASP.ATM_CARD_ISSUED,'N') = 'Y' AND 
        AM.ATM_LIMIT_AMT &gt; NVL(am.AVAILABLE_BALANCE,0) AND AM.LINKING_ACT_NUM IS NOT NULL
        AND (AM.ACT_STATUS_ID IN ('NEW','PART_FREEZE', 'OPERATIONAL', 'CREDIT_FREEZE', 'DEBIT_FREEZE', 'TOTAL_FREEZE', 'COMP_FREEZE'))
        AND AM.STATUS NOT IN ('DELETED') AND AM.AUTHORIZATION_STATUS = 'AUTHORIZED' ORDER BY ACT_NUM     -->

		SELECT * FROM ACT_MASTER AM,OP_AC_SPCLITEM_PARAM OASP WHERE AM.PROD_ID = OASP.PROD_ID AND NVL(OASP.ATM_CARD_ISSUED,'N') = 'Y' AND 
		AM.ATM_LIMIT_AMT &gt; NVL(AM.AVAILABLE_BALANCE,0) AND AM.LINKING_ACT_NUM IS NOT NULL
		AND (AM.ACT_STATUS_ID IN ('NEW','PART_FREEZE', 'OPERATIONAL', 'CREDIT_FREEZE', 'DEBIT_FREEZE', 'TOTAL_FREEZE', 'COMP_FREEZE'))
		AND AM.STATUS NOT IN ('DELETED') AND AM.AUTHORIZATION_STATUS = 'AUTHORIZED' 
		AND AM.LINKING_ACT_NUM = (SELECT OAP.ACT_NUM FROM ACT_MASTER ACT, OP_ACT_MIN_BAL OAP WHERE ACT.PROD_ID = OAP.PROD_ID AND 
		AM.LINKING_ACT_NUM = ACT.ACT_NUM AND ACT.ACT_NUM = OAP.ACT_NUM AND ACT.AVAILABLE_BALANCE &gt;= OAP.MIN_BAL +(AM.ATM_LIMIT_AMT-AM.AVAILABLE_BALANCE)) ORDER BY ACT_NUM
    </mapped-statement>

    <mapped-statement name="updateOldSureryRecordsForClosedOD" inline-parameters="true">
        UPDATE OP_AC_SECURITY_MEMBER SET 
        ACT_STATUS = #acctstatus:VARCHAR#
        WHERE ACCT_NUM = #acctNum:VARCHAR# 
    </mapped-statement>    
    
    <mapped-statement name="getAllProductsForSBInterestApplication" result-class="java.util.HashMap">
        SELECT PROD_ID as "KEY",PROD_DESC AS "VALUE" FROM APP_EXEC_PRODUCTS WHERE EXCTYPE = #EXCTYPE:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getExecutionParametersForInterestApplication" result-class="java.util.HashMap">
        SELECT FRDT,TODT FROM APP_EXEC_PARAM WHERE EXCTYPE=#EXCTYPE:VARCHAR# AND BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getvalidateParametersForInterestApplication" result-class="java.util.HashMap">
        SELECT  PKG_APP_EXEC.APP_EXEC_VALIDATE (#EXCTYPE:VARCHAR#,#BRANCH_CODE:VARCHAR#,#PROD_ID:VARCHAR#,#FROM_DT:DATE#,#TO_DT:DATE#,#USER:VARCHAR#) as MESSAGE FROM DUAL
    </mapped-statement>
    
    <mapped-statement name="processSBInterestApplication" result-class="java.util.HashMap">
        SELECT  PKG_APP_EXEC.APP_EXEC_PROCESS (#EXCTYPE:VARCHAR#,#BRANCH_CODE:VARCHAR#,#PROD_ID:VARCHAR#,#FROM_DT:DATE#,#TO_DT:DATE#,#USER:VARCHAR#) AS PROCESS_STATUS FROM DUAL
    </mapped-statement>
    
    <mapped-statement name="postSBInterestApplication" result-class="java.util.HashMap">
        SELECT  PKG_APP_EXEC.APP_EXEC_POST (#EXCTYPE:VARCHAR#,#BRANCH_CODE:VARCHAR#,#PROD_ID:VARCHAR#,#FROM_DT:DATE#,#TO_DT:DATE#,#CURR_DT:DATE#,#USER:VARCHAR#) AS POST_STATUS FROM DUAL
    </mapped-statement>

    <mapped-statement name="getSBInterestApplicationReportName" result-class="java.util.HashMap">
        select * from APP_EXEC_PRODUCTS where EXCTYPE = #EXCTYPE:VARCHAR# and prod_id = #PROD_ID:VARCHAR#
    </mapped-statement>
    
     <dynamic-mapped-statement name="gNPassBookNameAddress" result-class="java.util.HashMap">
         <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    SELECT * FROM TABLE (PKG_GN_PBK.GN_PB_NAM_ADD(#ACC_NUM:VARCHAR#))
                </isEqual>
                <isEqual prepend="" property="FILTERED_LIST" compareValue="FILTERED_LIST_org.postgresql.Driver" >
                    SELECT * FROM  PKG_GN_PBK.GN_PB_NAM_ADD(#ACC_NUM:VARCHAR#)
                </isEqual>
            </isPropertyAvailable>
         </dynamic>
         
<!--        SELECT ACT_NUM, NVL(PRODUCT_AMT,1) AS LINE_NO
        FROM ACT_MASTER WHERE ACT_NUM = #ACT_NUM:VARCHAR#-->
    </dynamic-mapped-statement>
    
    <mapped-statement name="getInitialiseFromDate" result-class="java.util.HashMap">
        SELECT    PKG_GN_PBK.GN_PB_PRN_INTDT( #MODULE_TYPE:VARCHAR#,  #ACT_NUM:VARCHAR#) INITIALIZE_DATE FROM DUAL
    </mapped-statement>
    
    <mapped-statement name="getSBODRenewalDate" result-class="java.util.HashMap" >        
        SELECT *
        FROM OP_AC_SECURITY_MEMBER OP
        WHERE     OP.ACCT_NUM = #ACT_NUM:VARCHAR#
        AND OP.STATUS IN ('CREATED', 'MODIFIED')
        AND (SELECT DE.CURR_APPL_DT
        FROM DAY_END DE) >= last_day(add_months(OP.TO_DT,-1)) + 1
        AND ACT_STATUS != 'CLOSED'
    </mapped-statement> 
    
     <mapped-statement name ="insertLoanODRenewalDetails" result-class = "java.util.HashMap">    
       INSERT INTO LOAN_OD_RENEWAL_DETAILS (CLOSING_LOAN_NO, DEBIT_ACT_NUM, DEBIT_PROD_TYPE, CLOSE_DT,CLOSING_AMOUNT, STATUS) VALUES
       (#CLOSING_LOAN_NO:VARCHAR#, #DEBIT_ACCT_NUM:VARCHAR#, #DEBIT_PROD_TYPE:VARCHAR#, #CLOSE_DT:DATE#, #CLOSING_AMOUNT:NUMERIC# ,#STATUS:VARCHAR#)
    </mapped-statement>
    
    
    <mapped-statement name="getAccountRetirementDate" result-class="java.util.HashMap" >  
        select c.retirement_dt from customer c where c.cust_id = (
        select am.cust_id from ALL_CUSTOMER_ACCTS am where act_num = #ACT_NUM:VARCHAR#)
    </mapped-statement> 
    
    <mapped-statement name="getAccountMaintenanceCount" result-class="java.util.HashMap" >  
        select COUNT(*) AS CNT from BRANCH_ACNO_MAINTENANCE bm where bm.prod_id = #PROD_ID:VARCHAR# 
        and bm.branch_id = #BRANCH_ID:VARCHAR#
        and bm.AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND bm.STATUS != 'DELETED'
    </mapped-statement>     
    
    <mapped-statement name="getUPIMobileNoExists" result-class="java.util.HashMap" >  
      select act_num from act_master where mobile_no = #MOBILE_NO:VARCHAR#
    </mapped-statement> 
    
     <mapped-statement name="updateFreezeAccountStatus" inline-parameters="true">
        UPDATE ACT_MASTER SET 
        ACT_STATUS_ID = #actStatusId:VARCHAR#,
        ACT_STATUS_DT = #actStatusDt:TIMESTAMP#
        WHERE ACT_NUM = #actNum:VARCHAR#
    </mapped-statement> 
    
</sql-map>
