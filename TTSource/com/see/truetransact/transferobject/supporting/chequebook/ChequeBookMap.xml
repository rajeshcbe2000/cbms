<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="ChequeBookTOMap">

	<!-- Use ChequeBookTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertChequeBookTO" inline-parameters="true">
        INSERT INTO CHEQUE_ISSUE
        (CHQ_ISSUE_ID, CHQ_ISSUE_DT, PROD_ID, ACCT_NO, UNPAID_CHQ, CHQ_RETURNED, CHQ_ISSUE, CHQ_DELIVERY, NO_LEAVES, NO_CHQ_BOOKS, START_CHQ_NO1, START_CHQ_NO2, END_CHQ_NO1, END_CHQ_NO2, CHQ_BK_SERIES_FROM, CHQ_BK_SERIES_TO, CHARGES_COLLECTED, REMARKS, STATUS, ACCT_NAMES, AUTHORIZE_STATUS, AUTHORIZE_DT, AUTHORIZE_BY, AUTHORIZE_REMARKS, CHEQUE_SUB_TYPE, PROD_TYPE, STATUS_BY, STATUS_DT, BRANCH_ID, CREATED_BY, CREATED_DT, TRANS_OUT_ID, INITIATED_BRANCH
        ) VALUES (
        #chqIssueId:VARCHAR#, #chqIssueDt:TIMESTAMP#, #prodId:VARCHAR#, #acctNo:VARCHAR#, #unpaidChq:NUMERIC#, #chqReturned:NUMERIC#, #chqIssue:NUMERIC#, #chqDelivery:VARCHAR#, #noLeaves:NUMERIC#, #noChqBooks:NUMERIC#, #startChqNo1:VARCHAR#, #startChqNo2:VARCHAR#, #endChqNo1:VARCHAR#, #endChqNo2:VARCHAR#, #chqBkSeriesFrom:NUMERIC#, #chqBkSeriesTo:NUMERIC#, #chargesCollected:NUMERIC#, #remarks:VARCHAR#, #status:VARCHAR#, #acctNames:VARCHAR#, #authorizeStatus:VARCHAR#, #authorizeDt:DATE#, #authorizeBy:VARCHAR#, #authorizeRemarks:VARCHAR#, #chequeSubType:VARCHAR#, #prodType:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #branchId:VARCHAR#, #createdBy:VARCHAR#, #createdDt:TIMESTAMP#, #transOutId:VARCHAR#, #initiatedBranch:VARCHAR#)
    </mapped-statement>

	<!-- Use ChequeBookTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateChequeBookTO" inline-parameters="true">
        UPDATE CHEQUE_ISSUE SET 
<!--		CHQ_ISSUE_ID = #chqIssueId:VARCHAR#,
		CHQ_ISSUE_DT = #chqIssueDt:DATE#,
                PROD_TYPE = #prodType:VARCHAR#,
		PROD_ID = #prodId:VARCHAR#,
		ACCT_NO = #acctNo:VARCHAR#,
		UNPAID_CHQ = #unpaidChq:NUMERIC#,
		CHQ_RETURNED = #chqReturned:NUMERIC#,
		CHQ_ISSUE = #chqIssue:NUMERIC#,-->
        CHQ_DELIVERY = #chqDelivery:VARCHAR#,
        NO_LEAVES = #noLeaves:NUMERIC#,
        NO_CHQ_BOOKS = #noChqBooks:NUMERIC#,
        START_CHQ_NO1 = #startChqNo1:VARCHAR#,
        START_CHQ_NO2 = #startChqNo2:VARCHAR#,
        END_CHQ_NO1 = #endChqNo1:VARCHAR#,
        END_CHQ_NO2 = #endChqNo2:VARCHAR#,
        CHQ_BK_SERIES_FROM = #chqBkSeriesFrom:NUMERIC#,
        CHQ_BK_SERIES_TO = #chqBkSeriesTo:NUMERIC#,
        CHARGES_COLLECTED = #chargesCollected:NUMERIC#,
        REMARKS = #remarks:VARCHAR#,
        STATUS = #status:VARCHAR#,
        ACCT_NAMES = #acctNames:VARCHAR#,
<!--		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
		AUTHORIZE_DT = #authorizeDt:DATE#,
		AUTHORIZE_BY = #authorizeBy:VARCHAR#,
		AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,-->
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
<!--		BRANCH_ID = #branchId:VARCHAR#,
		CREATED_BY = #createdBy:VARCHAR#,
		CREATED_DT = #createdDt:DATE# 
                TRANS_OUT_ID = #transOutId:VARCHAR# -->
        CHEQUE_SUB_TYPE = #chequeSubType:VARCHAR#,
        INITIATED_BRANCH = #initiatedBranch:VARCHAR#
        WHERE CHQ_ISSUE_ID = #chqIssueId:VARCHAR#
    </mapped-statement>

	<!-- Use ChequeBookTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteChequeBookTO" inline-parameters="true">
<!--    	DELETE FROM CHEQUE_ISSUE -->
        UPDATE CHEQUE_ISSUE SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE CHQ_ISSUE_ID = #chqIssueId:VARCHAR#
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to ChequeBookTO object (JavaBean) properties -->
    <result-map name="getChequeBookTOResult" class="com.see.truetransact.transferobject.supporting.chequebook.ChequeBookTO">
        <property name="chqIssueId" column="CHQ_ISSUE_ID"/>
        <property name="chqIssueDt" column="CHQ_ISSUE_DT"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="acctNo" column="ACCT_NO"/>
        <property name="unpaidChq" column="UNPAID_CHQ"/>
        <property name="chqReturned" column="CHQ_RETURNED"/>
        <property name="chqIssue" column="CHQ_ISSUE"/>
        <property name="chqDelivery" column="CHQ_DELIVERY"/>
        <property name="noLeaves" column="NO_LEAVES"/>
        <property name="noChqBooks" column="NO_CHQ_BOOKS"/>
        <property name="startChqNo1" column="START_CHQ_NO1"/>
        <property name="startChqNo2" column="START_CHQ_NO2"/>
        <property name="endChqNo1" column="END_CHQ_NO1"/>
        <property name="endChqNo2" column="END_CHQ_NO2"/>
        <property name="chqBkSeriesFrom" column="CHQ_BK_SERIES_FROM"/>
        <property name="chqBkSeriesTo" column="CHQ_BK_SERIES_TO"/>
        <property name="chargesCollected" column="CHARGES_COLLECTED"/>
        <property name="remarks" column="REMARKS"/>
        <property name="status" column="STATUS"/>
        <property name="acctNames" column="ACCT_NAMES"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="chequeSubType" column="CHEQUE_SUB_TYPE"/>
        <property name="prodType" column="PROD_TYPE"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="branchId" column="BRANCH_ID"/>
        <property name="createdBy" column="CREATED_BY"/>
        <property name="createdDt" column="CREATED_DT"/>
        <property name="transOutId" column="TRANS_OUT_ID"/>
        <property name="initiatedBranch" column="INITIATED_BRANCH"/>
    </result-map>
    <mapped-statement name="getSelectChequeBookTO" result-map="getChequeBookTOResult" >
        SELECT * FROM CHEQUE_ISSUE 
        WHERE CHQ_ISSUE_ID = #value:VARCHAR#
    </mapped-statement>
        
<!--=================================================================================================-->        


<!-- Use ChequeBookStopPaymentTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertChequeBookStopPaymentTO" inline-parameters="true">
        INSERT INTO CHEQUE_STOP_PAYMENT
        (CHQ_STOP_ID, CHQ_STOP_DT, PROD_ID, ACCT_NO, START_CHQ_NO1, START_CHQ_NO2, END_CHQ_NO1, END_CHQ_NO2, CHQ_DT, LEAF, PAYEE_NAME, CHQ_AMT, STOP_PAY_CHRG, STOP_PAY_REASON, STOP_STATUS, STATUS, AUTHORIZE_STATUS, AUTHORIZE_DT, AUTHORIZE_BY, AUTHORIZE_REMARKS, STATUS_BY, STATUS_DT, CREATED_BY, CREATED_DT, PROD_TYPE, BRANCH_ID, INITIATED_BRANCH, CHQ_REVOKE_DT
        ) VALUES (
        #chqStopId:VARCHAR#, #chqStopDt:TIMESTAMP#, #prodId:VARCHAR#, #acctNo:VARCHAR#, #startChqNo1:VARCHAR#, #startChqNo2:VARCHAR#, #endChqNo1:VARCHAR#, #endChqNo2:VARCHAR#, #chqDt:DATE#, #leaf:VARCHAR#, #payeeName:VARCHAR#, #chqAmt:NUMERIC#, #stopPayChrg:NUMERIC#, #stopPayReason:VARCHAR#, #stopStatus:VARCHAR#, #status:VARCHAR#, #authorizeStatus:VARCHAR#, #authorizeDt:DATE#, #authorizeBy:VARCHAR#, #authorizeRemarks:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #createdBy:VARCHAR#, #createdDt:TIMESTAMP#, #prodType:VARCHAR#, #branchId:VARCHAR#, #initiatedBranch:VARCHAR#, #chqRevokeDt:DATE#)
    </mapped-statement>

	<!-- Use ChequeBookStopPaymentTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateChequeBookStopPaymentTO" inline-parameters="true">
        UPDATE CHEQUE_STOP_PAYMENT SET 
<!--		CHQ_STOP_ID = #chqStopId:VARCHAR#,
		CHQ_STOP_DT = #chqStopDt:DATE#, 
                PROD_TYPE = #prodType:VARCHAR# 
		PROD_ID = #prodId:VARCHAR#,
		ACCT_NO = #acctNo:VARCHAR#,-->
        START_CHQ_NO1 = #startChqNo1:VARCHAR#,
        START_CHQ_NO2 = #startChqNo2:VARCHAR#,
        END_CHQ_NO1 = #endChqNo1:VARCHAR#,
        END_CHQ_NO2 = #endChqNo2:VARCHAR#,
        CHQ_DT = #chqDt:DATE#,
        LEAF = #leaf:VARCHAR#,
        PAYEE_NAME = #payeeName:VARCHAR#,
        CHQ_AMT = #chqAmt:NUMERIC#,
        STOP_PAY_CHRG = #stopPayChrg:NUMERIC#,
        STOP_PAY_REASON = #stopPayReason:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STOP_STATUS = #stopStatus:VARCHAR#,
<!--		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
		AUTHORIZE_DT = #authorizeDt:DATE#,
		AUTHORIZE_BY = #authorizeBy:VARCHAR#,
		AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,-->
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        INITIATED_BRANCH = #initiatedBranch:VARCHAR#,
        CHQ_REVOKE_DT = #chqRevokeDt:DATE#
<!--		CREATED_BY = #createdBy:VARCHAR#,
		CREATED_DT = #createdDt:DATE#,
                BRANCH_ID = #branchId:VARCHAR# -->
        WHERE CHQ_STOP_ID = #chqStopId:VARCHAR#
    </mapped-statement>

	<!-- Use ChequeBookStopPaymentTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteChequeBookStopPaymentTO" inline-parameters="true">
<!--		DELETE FROM CHEQUE_STOP_PAYMENT -->
        UPDATE CHEQUE_STOP_PAYMENT SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE CHQ_STOP_ID = #chqStopId:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getMinimumBalance" result-class="java.util.LinkedHashMap">
        SELECT NVL(OAAP.MIN_BAL_WT_CHK,0) as MIN_BAL_WT_CHK FROM OP_AC_ACCOUNT_PARAM OAAP WHERE OAAP.PROD_ID = #prodID:VARCHAR#  
    </mapped-statement>
    <mapped-statement name="getClearBalanceForCheque" result-class="java.util.LinkedHashMap">
        SELECT NVL(AM.CLEAR_BALANCE,0) as CLEAR_BAL_FOR_CK FROM ACT_MASTER AM WHERE AM.ACT_NUM = #actNo:VARCHAR#  
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to ChequeBookStopPaymentTO object (JavaBean) properties -->
    <result-map name="getChequeBookStopPaymentTOResult" class="com.see.truetransact.transferobject.supporting.chequebook.ChequeBookStopPaymentTO">
        <property name="chqStopId" column="CHQ_STOP_ID"/>
        <property name="chqStopDt" column="CHQ_STOP_DT"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="acctNo" column="ACCT_NO"/>
        <property name="startChqNo1" column="START_CHQ_NO1"/>
        <property name="startChqNo2" column="START_CHQ_NO2"/>
        <property name="endChqNo1" column="END_CHQ_NO1"/>
        <property name="endChqNo2" column="END_CHQ_NO2"/>
        <property name="chqDt" column="CHQ_DT"/>
        <property name="leaf" column="LEAF"/>
        <property name="payeeName" column="PAYEE_NAME"/>
        <property name="chqAmt" column="CHQ_AMT"/>
        <property name="stopPayChrg" column="STOP_PAY_CHRG"/>
        <property name="stopPayReason" column="STOP_PAY_REASON"/>
        <property name="stopStatus" column="STOP_STATUS"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="createdBy" column="CREATED_BY"/>
        <property name="createdDt" column="CREATED_DT"/>
        <property name="prodType" column="PROD_TYPE"/>
        <property name="branchId" column="BRANCH_ID"/>
        <property name="initiatedBranch" column="INITIATED_BRANCH"/>
        <property name="chqRevokeDt" column="CHQ_REVOKE_DT"/>
    </result-map>
    <mapped-statement name="getSelectChequeBookStopPaymentTO" result-map="getChequeBookStopPaymentTOResult" >
        SELECT * FROM CHEQUE_STOP_PAYMENT 
        WHERE CHQ_STOP_ID = #value:VARCHAR#
    </mapped-statement>        
        
<!--=================================================================================================-->

<!-- Use ChequeBookLooseLeafTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertChequeBookLooseLeafTO" inline-parameters="true">
        INSERT INTO CHEQUE_LOOSE_LEAF
        (CHQ_LEAF_ID, PROD_ID, ACCT_NO, REMARKS, STATUS, LEAF_NO1, LEAF_NO2, AUTHORIZE_STATUS, AUTHORIZE_DT, AUTHORIZE_BY, AUTHORIZE_REMARKS, CREATED_BY, CREATED_DT, STATUS_BY, STATUS_DT, BRANCH_ID, PROD_TYPE, INITIATED_BRANCH
        ) VALUES (
        #chqLeafId:VARCHAR#, #prodId:VARCHAR#, #acctNo:VARCHAR#, #remarks:VARCHAR#, #status:VARCHAR#, #leafNo1:VARCHAR#, #leafNo2:VARCHAR#, #authorizeStatus:VARCHAR#, #authorizeDt:DATE#, #authorizeBy:VARCHAR#, #authorizeRemarks:VARCHAR#, #createdBy:VARCHAR#, #createdDt:TIMESTAMP#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #branchId:VARCHAR#, #prodType:VARCHAR#, #initiatedBranch:VARCHAR#)
    </mapped-statement>

	<!-- Use ChequeBookLooseLeafTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateChequeBookLooseLeafTO" inline-parameters="true">
        UPDATE CHEQUE_LOOSE_LEAF SET 
<!--		CHQ_LEAF_ID = #chqLeafId:VARCHAR#,
		PROD_ID = #prodId:VARCHAR#,
                PROD_TYPE = #prodType:VARCHAR#
		ACCT_NO = #acctNo:VARCHAR#,-->
        REMARKS = #remarks:VARCHAR#,
        LEAF_NO1 = #leafNo1:VARCHAR#,
        LEAF_NO2 = #leafNo2:VARCHAR#,
<!--		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
		AUTHORIZE_DT = #authorizeDt:DATE#,
		AUTHORIZE_BY = #authorizeBy:VARCHAR#,
		AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
		CREATED_BY = #createdBy:VARCHAR#,
		CREATED_DT = #createdDt:DATE#,
                BRANCH_ID = #branchId:VARCHAR# -->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        INITIATED_BRANCH = #initiatedBranch:VARCHAR#
        WHERE CHQ_LEAF_ID = #chqLeafId:VARCHAR#
    </mapped-statement>

	<!-- Use ChequeBookLooseLeafTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteChequeBookLooseLeafTO" inline-parameters="true">
<!--		DELETE FROM CHEQUE_LOOSE_LEAF -->
        UPDATE CHEQUE_LOOSE_LEAF SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE CHQ_LEAF_ID = #chqLeafId:VARCHAR#
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to ChequeBookLooseLeafTO object (JavaBean) properties -->
    <result-map name="getChequeBookLooseLeafTOResult" class="com.see.truetransact.transferobject.supporting.chequebook.ChequeBookLooseLeafTO">
        <property name="chqLeafId" column="CHQ_LEAF_ID"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="acctNo" column="ACCT_NO"/>
        <property name="remarks" column="REMARKS"/>
        <property name="status" column="STATUS"/>
        <property name="leafNo1" column="LEAF_NO1"/>
        <property name="leafNo2" column="LEAF_NO2"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="createdBy" column="CREATED_BY"/>
        <property name="createdDt" column="CREATED_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="branchId" column="BRANCH_ID"/>
        <property name="prodType" column="PROD_TYPE"/>
        <property name="initiatedBranch" column="INITIATED_BRANCH"/>
    </result-map>
    <mapped-statement name="getSelectChequeBookLooseLeafTO" result-map="getChequeBookLooseLeafTOResult" >
        SELECT * FROM CHEQUE_LOOSE_LEAF 
        WHERE CHQ_LEAF_ID = #value:VARCHAR#
    </mapped-statement>

<!--=================================================================================================-->
    <mapped-statement name="viewChequeBook" result-class="java.util.LinkedHashMap">
        SELECT CHQ_ISSUE_ID as "CHQ_ISSUE_ID", concat(start_chq_no1,start_chq_no2) as "Cheque No From",
        concat(END_CHQ_NO1,END_CHQ_NO2) AS "Cheque No To", PROD_TYPE AS "Product Type", PROD_ID AS "Product ID",ACCT_NO as "Account Number", 
        ACCT_NAMES as "Names of Account" 
        FROM CHEQUE_ISSUE 
        WHERE STATUS != 'DELETED'
        AND BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND (AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED') OR AUTHORIZE_STATUS IS NULL)
    </mapped-statement>
        
    <mapped-statement name="viewStopPayment" result-class="java.util.LinkedHashMap">
        SELECT CHQ_STOP_ID as "CHQ_STOP_ID",CHQ_STOP_DT,leaf as "Leaf", concat(start_chq_no1,start_chq_no2) as "Cheque No From",
        concat(END_CHQ_NO1,END_CHQ_NO2) AS "Cheque No To", ACCT_NO as "Account Number", PAYEE_NAME as "Payee Names",
        PROD_TYPE AS "Product Type", PROD_ID AS "Product ID", AUTHORIZE_STATUS, STOP_STATUS
        FROM CHEQUE_STOP_PAYMENT 
        WHERE STATUS != 'DELETED'
        AND BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND ((STOP_STATUS != 'REVOKED') OR (STOP_STATUS = 'REVOKED' AND AUTHORIZE_STATUS = 'REJECTED'))  
        AND ((STOP_STATUS = 'STOPPED' AND (AUTHORIZE_STATUS != 'REJECTED' OR AUTHORIZE_STATUS IS NULL))
        OR (STOP_STATUS = 'REVOKED' AND AUTHORIZE_STATUS = 'REJECTED'))
    </mapped-statement>
        
    <mapped-statement name="viewLooseLeaf" result-class="java.util.HashMap">
        SELECT CHQ_LEAF_ID as "CHQ_LEAF_ID", ACCT_NO as "Account Number", LEAF_NO1 as "Leaf No1", 
        LEAF_NO2 as "Leaf N02" , PROD_TYPE AS "Product Type", PROD_ID AS "Product ID"
        FROM CHEQUE_LOOSE_LEAF 
        WHERE STATUS != 'DELETED'
        AND BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND (AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED') OR AUTHORIZE_STATUS IS NULL)
    </mapped-statement>
        
    <mapped-statement name="setPaymentRevoke" result-class="java.util.HashMap">
        UPDATE CHEQUE_STOP_PAYMENT SET
        STOP_STATUS = 'REVOKED' ,
        AUTHORIZE_STATUS = '',
        AUTHORIZE_REMARKS = #CHQ_STOP_REM:VARCHAR#,
        CHQ_REVOKE_DT = #CHQ_REVOKE_DT:DATE#
        WHERE CHQ_STOP_ID = #CHQ_STOP_ID:VARCHAR#
    </mapped-statement>
        
        <!-- To get the CustomerId, Clear Balance, Total Balance of the Account Holder-->        
    <mapped-statement name="getCustomer" result-class="java.util.HashMap">
        SELECT CUST_ID, NVL(AVAILABLE_BALANCE,0) as "AVAILABLE_BALANCE", NVL(CLEAR_BALANCE,0) as "CLEAR_BALANCE",
        NVL(SHADOW_CREDIT,0) as "SHADOW_CREDIT", NVL(SHADOW_DEBIT,0) as "SHADOW_DEBIT", NVL(TOTAL_BALANCE, 0) AS "TOTAL_BALANCE"
        FROM ACT_MASTER
        WHERE ACT_NUM = #ACT_NUM:VARCHAR# AND  (ACT_STATUS_ID IN ('NEW','PART_FREEZE','OPERATIONAL','CREDIT_FREEZE','DEBIT_FREEZE','TOTAL_FREEZE','COMP_FREEZE'))
    </mapped-statement>
        
         <!-- To fill the Table depending on the value of Account Number-->       
    <mapped-statement name="getTableValues" result-class="java.util.HashMap">
        SELECT   chq_issue_dt,chq_bk_series_from, chq_bk_series_to, start_chq_no1,
        start_chq_no2, end_chq_no1, end_chq_no2,
        NVL (charges_collected, 0) AS "CHARGES_COLLECTED"
        FROM cheque_issue
        WHERE acct_no =#ACCT_NO:VARCHAR#  AND status != 'DELETED'
        AND authorize_status = 'AUTHORIZED'
        UNION ALL
        SELECT STATUS_DT AS chq_issue_dt,0 AS chq_bk_series_from,0 AS chq_bk_series_to,LEAF_NO1 AS start_chq_no1,LEAF_NO2 AS start_chq_no2,LEAF_NO1 AS start_chq_no2,LEAF_NO2 AS end_chq_no2,
         0 AS "CHARGES_COLLECTED"
        FROM CHEQUE_LOOSE_LEAF
        WHERE acct_no = #ACCT_NO:VARCHAR#  AND status != 'DELETED'
        AND authorize_status = 'AUTHORIZED' 
    </mapped-statement>
        
    <mapped-statement name="getIssuedChequeDetails" result-class="java.util.LinkedHashMap">
        SELECT INSTRUMENT_NO1 || ' ' || INSTRUMENT_NO2 AS "Cheque No.", 'USED' AS "Status",CT.TRANS_DT FROM
        CASH_TRANS CT WHERE EXISTS 
        (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACT_NUM) 
        AND ACT_NUM = #ACCT_NO:VARCHAR# AND INSTRUMENT_NO1 BETWEEN #FROM_CHQ_NO1:VARCHAR# AND #TO_CHQ_NO1:VARCHAR#
        AND INSTRUMENT_NO2 BETWEEN #FROM_CHQ_NO2:VARCHAR# AND #TO_CHQ_NO2:VARCHAR#
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND STATUS!='DELETED'
        UNION ALL
        SELECT INSTRUMENT_NO1 || ' ' || INSTRUMENT_NO2 AS "Cheque No.", 'USED' AS "Status",TT.TRANS_DT FROM
        TRANSFER_TRANS TT WHERE EXISTS 
        (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = TT.ACT_NUM) 
        AND ACT_NUM = #ACCT_NO:VARCHAR# AND INSTRUMENT_NO1 BETWEEN #FROM_CHQ_NO1:VARCHAR# AND #TO_CHQ_NO1:VARCHAR#
        AND INSTRUMENT_NO2 BETWEEN #FROM_CHQ_NO2:VARCHAR# AND #TO_CHQ_NO2:VARCHAR#
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND STATUS!='DELETED'
        UNION ALL
        SELECT INSTRUMENT_NO1 || ' ' || INSTRUMENT_NO2 AS "Cheque No.", 'USED' AS "Status",IC.CLEARING_DT FROM
        INWARD_CLEARING IC WHERE EXISTS 
        (SELECT ACCT_NO FROM CHEQUE_ISSUE WHERE ACCT_NO = IC.ACCT_NO) 
        AND ACCT_NO = #ACCT_NO:VARCHAR# AND INSTRUMENT_NO1 BETWEEN #FROM_CHQ_NO1:VARCHAR# AND #TO_CHQ_NO1:VARCHAR#
        AND INSTRUMENT_NO2 BETWEEN #FROM_CHQ_NO2:VARCHAR# AND #TO_CHQ_NO2:VARCHAR#
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND STATUS!='DELETED'
        UNION ALL
        SELECT INSTRUMENT_NO1 || ' ' || INSTRUMENT_NO2 AS "Cheque No.", 'USED' AS "Status",CU.TRANS_DT FROM
        CHQ_USED_LEGACY_DAT2 CU WHERE EXISTS 
        (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CU.ACT_NUM) 
        AND ACT_NUM = #ACCT_NO:VARCHAR# AND INSTRUMENT_NO1 BETWEEN #FROM_CHQ_NO1:VARCHAR# AND #TO_CHQ_NO1:VARCHAR#
        AND INSTRUMENT_NO2 BETWEEN #FROM_CHQ_NO2:VARCHAR# AND #TO_CHQ_NO2:VARCHAR#
        ORDER BY 1
    </mapped-statement>
    <dynamic-mapped-statement name="getUsedAndStoppedChequeDetails" result-class="java.util.LinkedHashMap">
        SELECT INSTRUMENT_NO1 || ' ' || INSTRUMENT_NO2 AS "Cheque No.", 'USED' AS "Status" FROM
        CASH_TRANS CT WHERE EXISTS (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACT_NUM) 
        AND ACT_NUM = #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' AND STATUS!='DELETED'
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "BULK">
                    INSTRUMENT_NO1 BETWEEN #FROM_CHQ_NO1:VARCHAR# AND #TO_CHQ_NO1:VARCHAR# AND
                    INSTRUMENT_NO2 BETWEEN TO_NUMBER(#FROM_CHQ_NO2:VARCHAR#) AND TO_NUMBER(#TO_CHQ_NO2:VARCHAR#)
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "SINGLE">
                    INSTRUMENT_NO1 = #FROM_CHQ_NO1:VARCHAR# AND INSTRUMENT_NO2 =#FROM_CHQ_NO2:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        UNION ALL
        SELECT INSTRUMENT_NO1 || ' ' || INSTRUMENT_NO2 AS "Cheque No.", 'USED' AS "Status" FROM
        TRANSFER_TRANS TT WHERE EXISTS (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = TT.ACT_NUM) 
        AND ACT_NUM = #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' AND STATUS!='DELETED'
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "BULK">
                    INSTRUMENT_NO1 BETWEEN #FROM_CHQ_NO1:VARCHAR# AND #TO_CHQ_NO1:VARCHAR# AND
                    INSTRUMENT_NO2 BETWEEN TO_NUMBER(#FROM_CHQ_NO2:VARCHAR#) AND TO_NUMBER(#TO_CHQ_NO2:VARCHAR#)
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "SINGLE">
                    INSTRUMENT_NO1 = #FROM_CHQ_NO1:VARCHAR# AND INSTRUMENT_NO2 =#FROM_CHQ_NO2:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        UNION ALL
        SELECT INSTRUMENT_NO1 || ' ' || INSTRUMENT_NO2 AS "Cheque No.", 'USED' AS "Status" FROM
        INWARD_CLEARING IC WHERE EXISTS (SELECT ACCT_NO FROM CHEQUE_ISSUE WHERE ACCT_NO = IC.ACCT_NO) 
        AND ACCT_NO = #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' AND STATUS!='DELETED'
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "BULK">
                    INSTRUMENT_NO1 BETWEEN #FROM_CHQ_NO1:VARCHAR# AND #TO_CHQ_NO1:VARCHAR# AND
                    INSTRUMENT_NO2 BETWEEN TO_NUMBER(#FROM_CHQ_NO2:VARCHAR#) AND TO_NUMBER(#TO_CHQ_NO2:VARCHAR#)
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "SINGLE">
                    INSTRUMENT_NO1 = #FROM_CHQ_NO1:VARCHAR# AND INSTRUMENT_NO2 =#FROM_CHQ_NO2:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        UNION ALL
        SELECT INSTRUMENT_NO1 || ' ' || INSTRUMENT_NO2 AS "Cheque No.", 'USED' AS "Status" FROM
        CHQ_USED_LEGACY_DAT2 CU WHERE EXISTS (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CU.ACT_NUM) 
        AND ACT_NUM = #ACCT_NO:VARCHAR# 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "BULK">
                    INSTRUMENT_NO1 BETWEEN #FROM_CHQ_NO1:VARCHAR# AND #TO_CHQ_NO1:VARCHAR# AND
                    INSTRUMENT_NO2 BETWEEN TO_NUMBER(#FROM_CHQ_NO2:VARCHAR#) AND TO_NUMBER(#TO_CHQ_NO2:VARCHAR#)
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "SINGLE">
                    INSTRUMENT_NO1 = #FROM_CHQ_NO1:VARCHAR# AND INSTRUMENT_NO2 =#FROM_CHQ_NO2:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        UNION ALL
        SELECT START_CHQ_NO1 || ' ' || START_CHQ_NO2 AS "Cheque No.", 'STOPPED' AS "Status" FROM
        CHEQUE_STOP_PAYMENT TT WHERE ACCT_NO = #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' AND STATUS!='DELETED'
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "BULK">
                    START_CHQ_NO1 BETWEEN #FROM_CHQ_NO1:VARCHAR# AND #TO_CHQ_NO1:VARCHAR# AND
                    START_CHQ_NO2 BETWEEN TO_NUMBER(#FROM_CHQ_NO2:VARCHAR#) AND TO_NUMBER(#TO_CHQ_NO2:VARCHAR#)
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "SINGLE">
                    START_CHQ_NO1 = #FROM_CHQ_NO1:VARCHAR# AND START_CHQ_NO2 =#FROM_CHQ_NO2:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY 1
    </dynamic-mapped-statement>  

    <mapped-statement name="getStopPaymentList" result-class="java.util.HashMap">
        SELECT START_CHQ_NO2, END_CHQ_NO2, STOP_STATUS FROM 
        CHEQUE_STOP_PAYMENT WHERE ACCT_NO = #ACCT_NO:VARCHAR# AND 
        (START_CHQ_NO1=#FROM_CHQ_NO1:VARCHAR# OR END_CHQ_NO1=#TO_CHQ_NO1:VARCHAR#) AND 
        (START_CHQ_NO2&gt;=#FROM_CHQ_NO2:VARCHAR# OR END_CHQ_NO2&lt;=#TO_CHQ_NO2:VARCHAR#) 
        AND AUTHORIZE_STATUS = 'AUTHORIZED' AND STATUS!='DELETED'
        AND STOP_STATUS='STOPPED'
    </mapped-statement>
                
        <!-- To get the Cheque issue Charges depending on the Basis of ProdID.-->       
    <mapped-statement name="getChequeIssueChargesOA" result-class="java.util.HashMap">
<!--            SELECT CHK_ISSUE_CHGPERLEAF  FROM OP_AC_CHARGES_PARAM 
            WHERE PROD_ID = #PRODID# AND UPPER(CHK_ISSUE_CHG) = 'Y'-->
            
        SELECT NVL(CHK_BOOK_CHRG, 0) AS "CHGPERLEAF" FROM ACT_PARAM_DETAIL 
        WHERE ACT_NUM = #ACCOUNTNO:VARCHAR# 
        AND UPPER(CHK_BOOK) = 'Y' 
    </mapped-statement>   
        
        <!-- To get the Cheque issue Charges depending on the Basis of ProdID.-->       
    <mapped-statement name="getChequeIssueChargesAD" result-class="java.util.HashMap">
<!--            SELECT CHQBK_ISSUED_CHRG_PER  FROM ADVANCES_PROD_CHARGES 
            WHERE PROD_ID = #PRODID# 
            AND UPPER(CHQBK_ISSUED_CHRG) = 'Y' -->
            
        SELECT NVL(CHK_BOOK_CHRG, 0) AS "CHGPERLEAF" FROM ADVANCES_PARAM_DETAILS 
        WHERE ACT_NUM = #ACCOUNTNO:VARCHAR# 
        AND UPPER(CHK_BOOK) = 'Y' 
    </mapped-statement>
        
        <!-- To get the Cheque issue Charges depending on the Basis of ProdID.-->       
    <mapped-statement name="getTotalChequeIssue" result-class="java.util.HashMap">
        SELECT NVL(SUM(NO_LEAVES), 0) AS "TOTALLEAVES", NVL(SUM(CHARGES_COLLECTED), 0) AS "CHARGES" 
        FROM CHEQUE_ISSUE, ACT_MASTER, OP_AC_ACCOUNT_PARAM   WHERE CHEQUE_ISSUE.ACCT_NO = #ACCOUNTNO:VARCHAR#
        AND ((#CURRENT_DT:DATE#  - ACT_MASTER.CREATE_DT ) &lt; OP_AC_ACCOUNT_PARAM.FREE_CHK_LEAVES_PD)
        AND ACT_MASTER.ACT_NUM = #ACCOUNTNO:VARCHAR# 
        AND ACT_MASTER.PROD_ID = #PRODID:VARCHAR#
        AND OP_AC_ACCOUNT_PARAM.PROD_ID = #PRODID:VARCHAR# 
        AND UPPER(OP_AC_ACCOUNT_PARAM.CHK_ALLOWED) = 'Y'
        AND CHEQUE_ISSUE.AUTHORIZE_STATUS = 'AUTHORIZED'      
    </mapped-statement>        
             
   
       <!-- To get the Free Cheque Leaves for Particular Account No. Falling Under
        particular ProdID.-->   
    <mapped-statement name="getFreeChequeValidityOA" result-class="java.util.HashMap">
        SELECT nvl(OP_AC_ACCOUNT_PARAM.NO_FREE_CHK_LEAVES, 0)  AS "LEAVES" 
        FROM ACT_MASTER, OP_AC_ACCOUNT_PARAM
        WHERE ((TO_DATE(TO_CHAR(#CURRENT_DT:DATE#,'DD-MON-YYYY'))  - ACT_MASTER.CREATE_DT ) &lt; OP_AC_ACCOUNT_PARAM.FREE_CHK_LEAVES_PD)
        AND ACT_MASTER.ACT_NUM = #ACCOUNTNO:VARCHAR# 
        AND ACT_MASTER.PROD_ID = #PRODID:VARCHAR#
        AND OP_AC_ACCOUNT_PARAM.PROD_ID = #PRODID:VARCHAR# 
        AND UPPER(OP_AC_ACCOUNT_PARAM.CHK_ALLOWED) = 'Y'
    </mapped-statement> 
      
    <mapped-statement name="getFreeChequeValidityAD" result-class="java.util.HashMap">
        SELECT nvl(AP.NO_FREE_CHQ_LEAVES, 0)  AS "LEAVES" 
        FROM   LOANS_FACILITY_DETAILS LF, ADVANCES_PROD_ACPARAM AP
        WHERE ((#CURRENT_DT:DATE#  - LF.CREATE_DT) &lt; AP.FREE_CHQ_PERIOD)
        AND LF.ACCT_NUM = #ACCOUNTNO:VARCHAR# 
        AND LF.PROD_ID = AP.PROD_ID
        AND AP.PROD_ID = #PRODID:VARCHAR# 
        AND UPPER(AP.CHK_ALLOWED) = 'Y'
    </mapped-statement>        
  
                     
         <!-- To Know if Cheque Book is allowed for the Particular Account No.-->       
    <mapped-statement name="getChequeBookRuleOA" result-class="java.util.HashMap">
        SELECT CHK_BOOK  FROM ACT_PARAM_DETAIL WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getChequeBookRuleAD" result-class="java.util.HashMap">
        SELECT CHK_BOOK  FROM ADVANCES_PARAM_DETAILS WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
        
         <!-- To Know the Stop Cheque Charges for the Particular ProductID-->       
    <mapped-statement name="getChequeStopChargesOA" result-class="java.util.HashMap">
        SELECT NVL(STOP_PAYMENT_AMTCHG, 0) AS STOP_CHRG 
        FROM OP_AC_CHARGES_PARAM, ACT_PARAM_DETAIL AD
        WHERE AD.ACT_NUM = #ACCOUNTNO:VARCHAR#
        AND AD.STOP_PAY_CHRG IN ('Y','y')
        AND PROD_ID = #PRODID:VARCHAR# 
        AND UPPER(STOP_PAYMENT_CHG) = 'Y'
    </mapped-statement>
        
    <mapped-statement name="getChequeStopChargesAD" result-class="java.util.HashMap">
        SELECT NVL(STOP_PAY_CHRG_RATE, 0) AS STOP_CHRG
        FROM ADVANCES_PROD_CHARGES, ADVANCES_PARAM_DETAILS APD
        AND APD.ACT_NUM = #ACCOUNTNO:VARCHAR# 
        AND APD.STOP_PAY_CHRG IN ('Y', 'y')
        WHERE PROD_ID = #PRODID:VARCHAR# 
        AND UPPER(STOP_PAY_CHRG) = 'Y'
    </mapped-statement>
        

         <!-- To Know the No of Cheques Issued in the Given Financial Year... -->       
    <mapped-statement name="getNoOfChequeIssued" result-class="java.util.HashMap">
        SELECT COUNT(*) AS "COUNT" from INWARD_CLEARING WHERE ACCT_NO = #ACCTNO:VARCHAR#
        AND CLEARING_DT BETWEEN #STARTDATE:DATE# AND #ENDDATE:DATE#
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
    </mapped-statement>
        
    <!--result-map name="getChequeAccountResultList" class="java.util.LinkedHashMap">
	<property name="AccountNo" column="ACT_NUM"/>
	<property name="CustomerName" column="CUSTOMER_NAME"/>
        <property name="CustomerID" column="CUST_ID"/>
    </result-map  -->
    
    
    <dynamic-mapped-statement name="getChequeAccountListOA" result-class="java.util.HashMap" >
        SELECT ACT_MASTER.ACT_NUM AS "AccountNo", get_cust_name(CUSTOMER.CUST_ID)  AS "CustomerName",
        ACT_MASTER.CUST_ID AS "CustomerID", ACT_MASTER.ACCT_NAME AS "Name"
        FROM ACT_MASTER, CUSTOMER, OP_AC_ACCOUNT_PARAM, ACT_PARAM_DETAIL
        WHERE ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID 
        AND NOT EXISTS (SELECT CUST_ID FROM DEATH_MARKING 
        WHERE STATUS != 'DELETED'
        AND AUTHORIZE_STATUS='AUTHORIZED' 
        AND CUSTOMER.CUST_ID = CUST_ID)
        AND ACT_MASTER.PROD_ID = OP_AC_ACCOUNT_PARAM.PROD_ID
        AND ACT_MASTER.BRANCH_CODE = #BRANCH_CODE:VARCHAR#
        AND ACT_PARAM_DETAIL.ACT_NUM = ACT_MASTER.ACT_NUM
        AND UPPER(ACT_PARAM_DETAIL.CHK_BOOK) IN ('Y', 'y')
        AND OP_AC_ACCOUNT_PARAM.PROD_ID = #PROD_ID:VARCHAR#
        AND UPPER(OP_AC_ACCOUNT_PARAM.CHK_ALLOWED) = 'Y'
        AND ACT_MASTER.ACT_STATUS_ID IN ('OPERATIONAL', 'NEW', 'PART_FREEZE','CREDIT_FREEZE','DEBIT_FREEZE','TOTAL_FREEZE','COMP_FREEZE')
        AND ACT_MASTER.AUTHORIZATION_STATUS = 'AUTHORIZED'
        AND (CUSTOMER.MINOR!='Y' OR  CUSTOMER.CUST_TYPE != 'INDIVIDUAL')      
        <dynamic>
            <isNotNull prepend="AND" property="ACT_NUM">
                ACT_MASTER.ACT_NUM=#ACT_NUM:VARCHAR#
            </isNotNull>
        </dynamic>
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="getChequeAccountListAD" result-class="java.util.HashMap" >
        <!--SELECT LFD.ACCT_NUM as "AccountNo", FNAME || ' ' || MNAME || ' ' || LNAME AS "CustomerName",
        LB.CUST_ID as "CustomerID", LFD.ACCT_NAME AS "Name"
        FROM LOANS_BORROWER LB, CUSTOMER CU, LOANS_FACILITY_DETAILS LFD,
        ADVANCES_PROD_ACPARAM AP, ADVANCES_PARAM_DETAILS APD
        WHERE LB.CUST_ID = CU.CUST_ID 
        AND CU.CUST_ID NOT IN 
        (SELECT CUST_ID FROM DEATH_MARKING 
             WHERE STATUS != 'DELETED'
             AND AUTHORIZE_STATUS='AUTHORIZED')
        AND LB.BORROW_NO = LFD.BORROW_NO 
        AND CU.MINOR !='Y'
        AND AP.PROD_ID = LFD.PROD_ID
        AND LFD.PROD_ID = #PROD_ID# 
        AND LFD.BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND UPPER(AP.CHK_ALLOWED) = 'Y'
        AND APD.ACT_NUM = LFD.ACCT_NUM
        AND UPPER(APD.CHK_BOOK) IN ('Y', 'y')
        AND (LFD.ACCT_STATUS IN ('NEW','TRANSFER_IN', 'OPERATIONAL') or LFD.ACCT_STATUS is null)
        AND LB.STATUS NOT IN ('DELETED') 
        AND LFD.STATUS NOT IN ('DELETED') 
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        AND LFD.AUTHORIZE_STATUS_2 = 'AUTHORIZED'
        ORDER BY LFD.ACCT_NUM   -->
        SELECT LFD.ACCT_NUM as "AccountNo",get_cust_name(cu.cust_id) AS "CustomerName", 
        CU.CUST_ID as "CustomerID", LFD.ACCT_NAME AS "Name"  FROM LOANS_BORROWER LB, CUSTOMER CU,
        LOANS_FACILITY_DETAILS LFD,  ADVANCES_PROD_ACPARAM AP, ADVANCES_PARAM_DETAILS APD  ,LOANS_SANCTION_DETAILS LSD
        WHERE LB.CUST_ID = CU.CUST_ID   AND  LB.BORROW_NO=LFD.BORROW_NO AND 
        LFD.SANCTION_NO=LSD.SANCTION_NO AND LFD.SL_NO=LSD.SL_NO AND LSD.BORROW_NO=LB.BORROW_NO AND NOT EXISTS  (SELECT CUST_ID FROM DEATH_MARKING  
        WHERE STATUS != 'DELETED'  AND AUTHORIZE_STATUS='AUTHORIZED' AND CU.CUST_ID=CUST_ID)  AND
        (CU.MINOR !='Y' OR CU.MINOR IS NULL)   AND AP.PROD_ID = LFD.PROD_ID  AND LFD.PROD_ID = #PROD_ID:VARCHAR# 
        AND LFD.BRANCH_ID = #BRANCH_CODE:VARCHAR#  AND UPPER(AP.CHK_ALLOWED) = 'Y'  AND APD.ACT_NUM = LFD.ACCT_NUM 
        AND UPPER(APD.CHK_BOOK) IN ('Y', 'y')  AND (LFD.ACCT_STATUS IN ('NEW','TRANSFER_IN', 'OPERATIONAL') or 
        LFD.ACCT_STATUS is null)  AND LB.STATUS NOT IN ('DELETED')  AND LFD.STATUS NOT IN ('DELETED') 
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED' 
        <dynamic>
            <isNotNull prepend="AND" property="ACT_NUM">
                AND ACT_MASTER.ACT_NUM=#ACT_NUM:VARCHAR#
            </isNotNull>
        </dynamic>
        ORDER BY LFD.ACCT_NUM
       
        <!--END-->
      <!--  SELECT LFD.ACCT_NUM as "AccountNo", FNAME || ' ' || MNAME || ' ' || LNAME AS "CustomerName",
        LB.CUST_ID as "CustomerID", LFD.ACCT_NAME AS "Name"
        FROM LOANS_BORROWER LB, CUSTOMER CU, LOANS_FACILITY_DETAILS LFD,
        ADVANCES_PROD_ACPARAM AP, ADVANCES_PARAM_DETAILS APD
        WHERE LB.CUST_ID = CU.CUST_ID 
        AND  NOT EXISTS 
        (SELECT CUST_ID FROM DEATH_MARKING 
             WHERE STATUS != 'DELETED'
             AND AUTHORIZE_STATUS='AUTHORIZED' AND CU.CUST_ID=CUST_ID)
       AND LB.BORROW_NO = LFD.BORROW_NO 
        AND CU.MINOR !='Y'
        AND AP.PROD_ID = LFD.PROD_ID
        AND LFD.PROD_ID = #PROD_ID# 
        AND LFD.BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND UPPER(AP.CHK_ALLOWED) = 'Y'
        AND APD.ACT_NUM = LFD.ACCT_NUM
        AND UPPER(APD.CHK_BOOK) IN ('Y', 'y')
        AND (LFD.ACCT_STATUS IN ('NEW','TRANSFER_IN', 'OPERATIONAL') or LFD.ACCT_STATUS is null)
        AND LB.STATUS NOT IN ('DELETED') 
        AND LFD.STATUS NOT IN ('DELETED') 
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        AND LFD.AUTHORIZE_STATUS_2 = 'AUTHORIZED'
        ORDER BY LFD.ACCT_NUM-->
    </dynamic-mapped-statement>             

    <dynamic-mapped-statement name="getChequeAccountListAAD" result-class="java.util.HashMap" >
        SELECT LFD.ACCT_NUM as "AccountNo",get_cust_name(cu.cust_id) AS "CustomerName", 
        CU.CUST_ID as "CustomerID", LFD.ACCT_NAME AS "Name"  FROM AGRI_LOANS_BORROWER LB, CUSTOMER CU,
        AGRI_LOANS_FACILITY_DETAILS LFD,  ADVANCES_PROD_ACPARAM AP, AGRI_ADVANCES_PARAM_DETAILS APD  ,AGRI_LOANS_SANCTION_DETAILS LSD
        WHERE LB.CUST_ID = CU.CUST_ID   AND  LB.BORROW_NO=LFD.BORROW_NO AND 
        LFD.SANCTION_NO=LSD.SANCTION_NO AND LFD.SL_NO=LSD.SL_NO AND NOT EXISTS  (SELECT CUST_ID FROM DEATH_MARKING  
        WHERE STATUS != 'DELETED'  AND AUTHORIZE_STATUS='AUTHORIZED' AND CU.CUST_ID=CUST_ID)  AND
        (CU.MINOR !='Y' OR CU.MINOR IS NULL)   AND AP.PROD_ID = LFD.PROD_ID  AND LFD.PROD_ID = #PROD_ID:VARCHAR# 
        AND LFD.BRANCH_ID = #BRANCH_CODE:VARCHAR#  AND UPPER(AP.CHK_ALLOWED) = 'Y'  AND APD.ACT_NUM = LFD.ACCT_NUM 
        AND UPPER(APD.CHK_BOOK) IN ('Y', 'y')  AND (LFD.ACCT_STATUS IN ('NEW','TRANSFER_IN', 'OPERATIONAL') or 
        LFD.ACCT_STATUS is null)  AND LB.STATUS NOT IN ('DELETED')  AND LFD.STATUS NOT IN ('DELETED') 
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED' 
        <dynamic>
            <isNotNull prepend="AND" property="ACT_NUM">
                AND ACT_MASTER.ACT_NUM=#ACT_NUM:VARCHAR#
            </isNotNull>
        </dynamic>
        ORDER BY LFD.ACCT_NUM
       
    </dynamic-mapped-statement>             
    
    <mapped-statement name="getChequeLooseLeafRule" result-class="java.util.HashMap">
        SELECT CHQ_LEAF_ID FROM CHEQUE_LOOSE_LEAF WHERE LEAF_NO1 = #INSTRUMENT1:VARCHAR# AND LEAF_NO2 = #INSTRUMENT2:VARCHAR# 
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
    </mapped-statement>
        
    <mapped-statement name="getChequeIssuedEarlierRule" result-class="java.util.HashMap">
      <!--  SELECT CHQ_ISSUE_ID FROM CHEQUE_ISSUE WHERE START_CHQ_NO1 = END_CHQ_NO1 AND START_CHQ_NO1 = #INSTRUMENT1:VARCHAR# 
        AND #INSTRUMENT2:VARCHAR# BETWEEN TO_NUMBER(START_CHQ_NO2) AND TO_NUMBER(END_CHQ_NO2) 
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')-->
        SELECT C.chq_issue_id,AM.ACT_NUM,AM.ACT_STATUS_ID
        FROM cheque_issue C,ACT_MASTER AM
        WHERE start_chq_no1 = end_chq_no1
        AND start_chq_no1 = #INSTRUMENT1:VARCHAR# 
        and length(#INSTRUMENT2:VARCHAR#)=length(start_chq_no2) 
	and length(#INSTRUMENT2:VARCHAR#)=length(end_chq_no2) 
        AND #INSTRUMENT2:VARCHAR# BETWEEN start_chq_no2 AND end_chq_no2
        AND (C.status = 'CREATED' OR C.status = 'MODIFIED' OR C.status = 'UPDATED')
        AND AM.ACT_NUM = C.ACCT_NO
    </mapped-statement>

    <mapped-statement name="getBooksDangerLevelRule" result-class="java.util.HashMap">
        SELECT ITEM_ID FROM INVENTORY_MASTER
        WHERE ITEM_TYPE = 'CHEQUES'
        AND ITEM_SUB_TYPE = #ITEM_SUB_TYPE:VARCHAR#
        AND LEAVES_PER_BOOK = cast(#LEAVES_PER_BOOK# as numeric)
        AND BRANCH_ID = #BRANCH_ID:VARCHAR#
        AND AVAILABLE_BOOKS &lt;= BOOKS_DANGER_LEVEL
        AND (STATUS NOT IN ('DELETED')OR STATUS IS NULL)
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
        
    <mapped-statement name="getChequeBookAvailablelRule" result-class="java.util.HashMap">
        SELECT ITEM_ID 
        FROM INVENTORY_MASTER
        WHERE ITEM_TYPE = 'CHEQUES'
        AND ITEM_SUB_TYPE = #ITEM_SUB_TYPE:VARCHAR#
        AND LEAVES_PER_BOOK = cast(#LEAVES_PER_BOOK# as numeric)
        AND BRANCH_ID = #BRANCH_ID:VARCHAR#
        AND AVAILABLE_BOOKS &lt;  cast(#CHEQUE_BOOKS# as numeric)
        AND STATUS != 'DELETED'
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
        
<!--	<mapped-statement name="ChequeIssue.getSerialNoTransOut" result-class="java.util.LinkedHashMap" >-->
<!--            SELECT MAX(ID.BOOK_SLNO_FROM) AS "BOOK_SLNO_FROM", MAX(ID.BOOK_SLNO_TO) AS "BOOK_SLNO_TO", IM.INSTRUMENT_PREFIX, 
            MAX(ID.LEAVES_SLNO_TO) AS "LEAVES_SLNO_FROM"
            FROM INVENTORY_MASTER IM, INVENTORY_DETAILS ID
            WHERE IM.ITEM_TYPE= 'CHEQUES'
            AND IM.ITEM_SUB_TYPE = #ITEM_SUB_TYPE#
            AND IM.LEAVES_PER_BOOK = #LEAVES#
            AND IM.ITEM_ID = ID.ITEM_ID
            AND ID.TRANS_TYPE = 'TRANS_OUT'
            AND (ID.STATUS NOT IN ('DELETED')) -->
<!--            AND ID.AUTHORIZE_STATUS = 'AUTHORIZED'-->
<!--            AND (IM.STATUS NOT IN ('DELETED'))
            AND IM.AUTHORIZE_STATUS = 'AUTHORIZED'
            GROUP BY IM.INSTRUMENT_PREFIX -->
<!--            SELECT ID.BOOK_SLNO_FROM AS "BOOK_SLNO_FROM", ID.BOOK_SLNO_TO AS "BOOK_SLNO_TO", IM.INSTRUMENT_PREFIX, 
            ID.LEAVES_SLNO_TO AS "LEAVES_SLNO_FROM"
            FROM INVENTORY_MASTER IM, INVENTORY_DETAILS ID
            WHERE IM.ITEM_TYPE= 'CHEQUES'
            AND IM.ITEM_SUB_TYPE = #ITEM_SUB_TYPE:VARCHAR#
            AND IM.LEAVES_PER_BOOK = #LEAVES#
            AND IM.ITEM_ID = ID.ITEM_ID
            AND ID.TRANS_TYPE = 'TRANS_OUT'
            AND (ID.STATUS NOT IN ('DELETED'))
            AND (IM.STATUS NOT IN ('DELETED'))
            AND IM.AUTHORIZE_STATUS = 'AUTHORIZED'
            AND IM.BRANCH_ID = #BRANCH_CODE:VARCHAR#
            ORDER BY ID.TRANS_ID DESC
        </mapped-statement -->
        
        <!--mapped-statement name="ChequeIssue.getSerialNoTransIn" result-class="java.util.LinkedHashMap" >
            SELECT IM.ITEM_ID, ID.BOOK_SLNO_FROM, ID.BOOK_SLNO_TO, IM.INSTRUMENT_PREFIX, 
            ID.LEAVES_SLNO_FROM, ID.LEAVES_SLNO_TO, ID.TRANS_ID
            FROM INVENTORY_MASTER IM, INVENTORY_DETAILS ID
            WHERE IM.ITEM_TYPE= 'CHEQUES'
            AND IM.ITEM_SUB_TYPE = #ITEM_SUB_TYPE#
            AND IM.LEAVES_PER_BOOK = #LEAVES#
            AND ID.ITEM_ID = IM.ITEM_ID
            AND ID.TRANS_TYPE = 'TRANS_IN'
            AND (UPPER(ID.BOOK_SERIES_OVER) = 'N' OR ID.BOOK_SERIES_OVER IS NULL)
            AND (ID.STATUS NOT IN ('DELETED'))
            AND ID.AUTHORIZE_STATUS = 'AUTHORIZED'
            AND (IM.STATUS NOT IN ('DELETED'))
            AND IM.AUTHORIZE_STATUS = 'AUTHORIZED'
            AND IM.BRANCH_ID = #BRANCH_CODE:VARCHAR#
            ORDER BY ID.TRANS_DT
        </mapped-statement --> 
        
	<!--mapped-statement name="ChequeIssue.getSerialNo" result-class="java.util.LinkedHashMap" >
            SELECT DISTINCT ID1.TRANS_DT, IM.ITEM_ID, ID1.TRANS_TYPE, ID1.BOOK_SLNO_FROM, ID1.BOOK_SLNO_TO,
            IM.INSTRUMENT_PREFIX, ID1.LEAVES_SLNO_FROM, ID1.LEAVES_SLNO_TO, ID1.TRANS_ID
            FROM INVENTORY_MASTER IM, INVENTORY_DETAILS ID1, INVENTORY_DETAILS ID2
            WHERE IM.ITEM_TYPE= 'CHEQUES'
            AND IM.ITEM_SUB_TYPE = #ITEM_SUB_TYPE#
            AND IM.LEAVES_PER_BOOK = #LEAVES#
            AND IM.ITEM_ID = ID1.ITEM_ID
            AND IM.ITEM_ID = ID2.ITEM_ID
            AND ID1.TRANS_TYPE = 'TRANS_IN'
            AND ID2.TRANS_TYPE = 'TRANS_OUT'
            AND NOT (ID1.TRANS_IN_ID IS NOT NULL  AND ID1.BOOK_SLNO_FROM = (SELECT MIN (BOOK_SLNO_FROM) FROM INVENTORY_DETAILS
            WHERE TRANS_IN_ID=ID1.TRANS_ID)

            AND ID1.TRANS_IN_ID IS NOT NULL AND ID1.BOOK_SLNO_TO = (SELECT MAX (BOOK_SLNO_TO) FROM INVENTORY_DETAILS
            WHERE TRANS_IN_ID=ID1.TRANS_ID))
            AND ID1.ITEM_ID = ID2.ITEM_ID
            AND (UPPER(ID1.BOOK_SERIES_OVER) = 'N' OR ID1.BOOK_SERIES_OVER IS NULL)
            AND (ID1.STATUS NOT IN ('DELETED'))
            AND ID1.AUTHORIZE_STATUS = 'AUTHORIZED'
            AND (ID2.STATUS NOT IN ('DELETED'))
            AND (IM.STATUS NOT IN ('DELETED'))
            AND IM.AUTHORIZE_STATUS = 'AUTHORIZED'
            AND IM.BRANCH_ID = #BRANCH_CODE:VARCHAR#
            ORDER BY ID1.TRANS_ID
        </mapped-statement-->
               

    <mapped-statement name="getInventoryMasterItemID" result-class="java.util.LinkedHashMap" >
        SELECT ITEM_ID 
        FROM INVENTORY_MASTER
        WHERE ITEM_TYPE = 'CHEQUES'
        AND ITEM_SUB_TYPE = #ITEM_SUB_TYPE:VARCHAR#
        AND LEAVES_PER_BOOK = #LEAVES:VARCHAR#
        AND BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND STATUS != 'DELETED' 
        AND AUTHORIZE_STATUS ='AUTHORIZED'
    </mapped-statement>
        
	<!--mapped-statement name="ChequeIssue.getInventoryDetailsData" result-class="java.util.LinkedHashMap" >
           SELECT IM.ITEM_ID, ID.TRANS_ID, ID.STATUS
            FROM INVENTORY_DETAILS ID, INVENTORY_MASTER IM
            WHERE IM.ITEM_TYPE = 'CHEQUES'
            AND IM.ITEM_SUB_TYPE = #ITEM_SUB_TYPE#
            AND IM.LEAVES_PER_BOOK = #LEAVES#
            AND IM.ITEM_ID = ID.ITEM_ID
            AND ID.TRANS_TYPE = #TRANS_TYPE#
            AND ID.BOOK_SLNO_FROM = #BOOK_SLNO_FROM#
            AND ID.BOOK_SLNO_TO = #BOOK_SLNO_TO#
        </mapped-statement-->
                    
                
<!-- ==============================AUTHORIZATION===================================================== -->
<!-- 	<dynamic-mapped-statement name="getSelectChequeBookIssueTOList" result-class="java.util.LinkedHashMap" >
            SELECT CHQ_ISSUE_ID as "CHQ_ISSUE_ID", PROD_ID AS "Product ID", PROD_TYPE AS "Product Type",
            ACCT_NO as "Account Number", ACCT_NAMES as "Names of Account", NO_LEAVES AS "No Of Leaves", 
            NO_CHQ_BOOKS AS "No Of Books", CHEQUE_SUB_TYPE AS "Usage", TRANS_OUT_ID AS "Transaction ID", 
            CHARGES_COLLECTED AS "Charges", STATUS AS "Status", START_CHQ_NO1 AS "Instrument_Prefix",
            START_CHQ_NO2 AS "Start_leaf_No2", END_CHQ_NO2 AS "End_leaf_No2", CHQ_BK_SERIES_FROM AS "BK_SERIES_FROM",
            CHQ_BK_SERIES_TO AS "BK_SERIES_TO"
            FROM CHEQUE_ISSUE 
            WHERE STATUS != 'DELETED'

            AND STATUS_BY != #USER_ID:VARCHAR# 
            AND INITIATED_BRANCH = #BRANCH_CODE:VARCHAR#
            AND #HIERARCHY_ID#::numeric &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
                                    FROM USER_MASTER UM, ROLE_MASTER RM 
                                    WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = CHEQUE_ISSUE.STATUS_BY)   
                                    
            <dynamic>
                <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                    AUTHORIZE_STATUS = 'EXCEPTION'
                </isEqual>
                <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                    (AUTHORIZE_STATUS IS NULL OR 
                     AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                </isNotEqual>
            </dynamic>
            
            ORDER BY CHQ_ISSUE_ID
        </dynamic-mapped-statement>-->
        
    <dynamic-mapped-statement name="getSelectChequeBookIssueTOList" result-class="java.util.LinkedHashMap" >
        SELECT CHEQUE_ISSUE.CHQ_ISSUE_ID as "CHQ_ISSUE_ID", CHEQUE_ISSUE.PROD_ID AS "Product ID",
        CHEQUE_ISSUE.PROD_TYPE AS "Product Type",
        CHEQUE_ISSUE.ACCT_NO as "Account Number", CHEQUE_ISSUE.ACCT_NAMES as "Names of Account",CHEQUE_ISSUE.NO_LEAVES AS "No Of Leaves"
        , INVENTORY_DETAILS.trans_id as "Transaction ID" ,       
        CHEQUE_ISSUE.NO_CHQ_BOOKS AS "No Of Books", CHEQUE_ISSUE.CHEQUE_SUB_TYPE AS "Usage",
            
        CHEQUE_ISSUE.CHARGES_COLLECTED AS "Charges", CHEQUE_ISSUE.STATUS AS "Status", CHEQUE_ISSUE.START_CHQ_NO1 AS "Instrument_Prefix",          
        CHEQUE_ISSUE.START_CHQ_NO2 AS "Start_leaf_No2", CHEQUE_ISSUE.END_CHQ_NO2 AS "End_leaf_No2", 
        CHEQUE_ISSUE.CHQ_BK_SERIES_FROM AS "BK_SERIES_FROM",   
        CHEQUE_ISSUE.CHQ_BK_SERIES_TO AS "BK_SERIES_TO"        
        FROM CHEQUE_ISSUE join INVENTORY_DETAILS   
        on CHEQUE_ISSUE.ACCT_NO=INVENTORY_DETAILS.ACT_NUM
        WHERE CHEQUE_ISSUE.STATUS != 'DELETED'       
        AND CHEQUE_ISSUE.STATUS_BY !=#USER_ID:VARCHAR#               AND CHEQUE_ISSUE.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR#           
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = CHEQUE_ISSUE.STATUS_BY)   
                                    
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                CHEQUE_ISSUE.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (CHEQUE_ISSUE.AUTHORIZE_STATUS IS NULL OR 
                CHEQUE_ISSUE.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                INVENTORY_DETAILS.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (INVENTORY_DETAILS.AUTHORIZE_STATUS IS NULL OR 
                INVENTORY_DETAILS.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
            
        ORDER BY CHQ_ISSUE_ID
    </dynamic-mapped-statement>
        
    <mapped-statement name="authChequeBookIssue" result-class="java.util.HashMap">
<!--            UPDATE CHEQUE_ISSUE SET 
            AUTHORIZE_STATUS = #AUTHORIZESTATUS:VARCHAR#,
            AUTHORIZE_BY = #USER_ID:VARCHAR#, 
            AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#,
            AUTHORIZE_REMARKS = #REMARKS:VARCHAR#,
            START_CHQ_NO1 = #START_CHQ_NO1:VARCHAR#,
            START_CHQ_NO2 = #START_CHQ_NO2:VARCHAR#,
            END_CHQ_NO1 = #END_CHQ_NO1:VARCHAR#,
            END_CHQ_NO2 = #END_CHQ_NO2:VARCHAR#,
            CHQ_BK_SERIES_FROM = #CHQ_BK_SERIES_FROM:NUMERIC#,
            CHQ_BK_SERIES_TO = #CHQ_BK_SERIES_TO:NUMERIC#,
            TRANS_OUT_ID = #TRANS_OUT_ID:VARCHAR#
            WHERE CHQ_ISSUE_ID = #CHQ_ISSUE_ID:VARCHAR# -->
        UPDATE CHEQUE_ISSUE SET 
        AUTHORIZE_STATUS = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#,
        AUTHORIZE_REMARKS = #REMARKS:VARCHAR#,
            <!--START_CHQ_NO1 = #START_LEAF_NO1:VARCHAR#,
            START_CHQ_NO2 = #START_LEAF_NO2:VARCHAR#,
            END_CHQ_NO1 = #END_LEAF_NO1:VARCHAR#,
            END_CHQ_NO2 = #END_LEAF_NO2:VARCHAR#,
            CHQ_BK_SERIES_FROM = #BK_SERIES_FROM:NUMERIC#,
            CHQ_BK_SERIES_TO = #BK_SERIES_TO:NUMERIC#,-->
        TRANS_OUT_ID = #TRANS_OUT_ID:VARCHAR#
        WHERE CHQ_ISSUE_ID = #CHQ_ISSUE_ID:VARCHAR# 
    </mapped-statement>   
        
    <mapped-statement name="rejectChequeBookIssue" result-class="java.util.HashMap">
        UPDATE CHEQUE_ISSUE SET
        STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_STATUS = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE CHQ_ISSUE_ID = #CHQ_ISSUE_ID:VARCHAR# 
    </mapped-statement>       
    <mapped-statement name="rejectInventoryDet" result-class="java.util.HashMap">
        UPDATE INVENTORY_DETAILS SET
        AUTHORIZE_STATUS = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE TRANS_ID = #TRANSACTION ID:VARCHAR# 
    </mapped-statement>     
        
    <mapped-statement name="InventoryDetail.seriesOver" result-class="java.util.HashMap">
        UPDATE INVENTORY_DETAILS SET
        BOOK_SERIES_OVER = 'Y'
        WHERE TRANS_ID = #TRANS_ID:VARCHAR# 
    </mapped-statement>       
        
        
    <dynamic-mapped-statement name="getSelectStopPaymentIssueTOList" result-class="java.util.LinkedHashMap" >
        SELECT CHQ_STOP_ID as "CHQ_STOP_ID",leaf as "Leaf", concat(start_chq_no1,start_chq_no2) as "Cheque No From",
        concat(END_CHQ_NO1,END_CHQ_NO2) AS "Cheque No To", PROD_ID AS "Product ID", PROD_TYPE AS "Product Type",
        ACCT_NO as "Account Number", PAYEE_NAME as "Payee Names" , STOP_PAY_CHRG AS "Charges", STOP_STATUS AS "STOP_STATUS"
        FROM CHEQUE_STOP_PAYMENT
        WHERE STATUS != 'DELETED'
<!--            AND (AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED') OR AUTHORIZE_STATUS IS NULL)-->
        AND STATUS_BY != #USER_ID:VARCHAR# 
        AND INITIATED_BRANCH = #BRANCH_CODE:VARCHAR#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = CHEQUE_STOP_PAYMENT.STATUS_BY) 
                                    
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AUTHORIZE_STATUS IS NULL OR 
                AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>   
            
        ORDER BY CHQ_STOP_ID                                 
    </dynamic-mapped-statement>
        
    <mapped-statement name="authStopPaymentIssue" result-class="java.util.HashMap">
        UPDATE CHEQUE_STOP_PAYMENT SET 
        AUTHORIZE_STATUS = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#,
        AUTHORIZE_REMARKS = #REMARKS:VARCHAR#
        WHERE CHQ_STOP_ID = #CHQ_STOP_ID:VARCHAR# 
    </mapped-statement>
        

        
    <dynamic-mapped-statement name="getSelectLooseLeafIssueTOList" result-class="java.util.LinkedHashMap" >
        SELECT PROD_TYPE AS "Product Type", PROD_ID AS "Product ID", CHQ_LEAF_ID as "CHQ_LEAF_ID", ACCT_NO as "Account Number", 
        LEAF_NO1 as "Leaf No1", LEAF_NO2 as "Leaf N02" 
        FROM CHEQUE_LOOSE_LEAF 
        WHERE <!--STATUS != 'DELETED' 
            AND (AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED') OR AUTHORIZE_STATUS IS NULL)
            AND -->STATUS_BY != #USER_ID:VARCHAR# 
        AND INITIATED_BRANCH = #BRANCH_CODE:VARCHAR#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = CHEQUE_LOOSE_LEAF.STATUS_BY) 
                                    
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AUTHORIZE_STATUS IS NULL OR 
                AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>   
            
        ORDER BY CHQ_LEAF_ID                                 
    </dynamic-mapped-statement>
        
        
	<!-- Use authorizeOperativeAcctProduct object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="authLooseLeafIssue" result-class="java.util.HashMap">
        UPDATE CHEQUE_LOOSE_LEAF SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#,
        AUTHORIZE_REMARKS = #REMARKS:VARCHAR#
        WHERE CHQ_LEAF_ID = #CHQ_LEAF_ID:VARCHAR# 
    </mapped-statement>
        
        
    <mapped-statement name="ChequeIssue.getAcctHeadParamOA" result-class="java.util.HashMap">
        SELECT AC_HD_ID AS "AC_HD", CHQ_ISSUE_CHRG AS "CHQ_ISSUE", 
        STOP_PMT_CHRG AS "CHQ_STOP"
        FROM OP_AC_ACHEAD_PARAM OAA, OP_AC_PRODUCT OAP
        WHERE OAA.PROD_ID = OAP.PROD_ID
        AND OAP.PROD_ID = #value:VARCHAR#
        AND AUTHORIZED_STATUS = 'AUTHORIZED'
    </mapped-statement>
       
        
        
         
    <mapped-statement name="ChequeIssue.getAcctHeadParamAD" result-class="java.util.HashMap">
        SELECT ACCT_HEAD AS "AC_HD", CHQBK_ISSUE_CHRG AS "CHQ_ISSUE", 
        STOP_PAY_CHRG AS "CHQ_STOP"
        FROM LOANS_PRODUCT LP, ADVANCES_PROD_ACHD APA
        WHERE APA.PROD_ID = LP.PROD_ID
        AND APA.PROD_ID = #value:VARCHAR#
        AND LP.AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
        
    <mapped-statement name="findInvenData" result-class="java.util.HashMap">
        SELECT * FROM INVENTORY_DETAILS WHERE INSTRUMENT_PREFIX = #INSTRUMENT_PREFIX:VARCHAR#
        AND ITEM_ID = #ITEM_ID:VARCHAR# AND STATUS != 'DELETED' AND INITIATED_BRANCH = #BRANCH_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getFirstBookSeries" result-class="java.util.HashMap">
        SELECT MIN(BOOK_SLNO_FROM) AS BOOK_SLNO FROM INVENTORY_DETAILS WHERE ITEM_ID = #ITEM_ID:VARCHAR# AND
        TRANS_TYPE = #TRANS_TYPE:VARCHAR# AND INSTRUMENT_PREFIX = #INSTRUMENT_PREFIX:VARCHAR#
        AND STATUS != 'DELETED' AND INITIATED_BRANCH = #BRANCH_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getOtherBookSeries" result-class="java.util.HashMap">
        SELECT MAX(BOOK_SLNO_TO)+1 AS BOOK_SLNO FROM INVENTORY_DETAILS WHERE ITEM_ID = #ITEM_ID:VARCHAR# AND
        TRANS_TYPE = #TRANS_TYPE:VARCHAR# AND INSTRUMENT_PREFIX = #INSTRUMENT_PREFIX:VARCHAR#
        AND STATUS != 'DELETED' AND INITIATED_BRANCH = #BRANCH_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="chkMinBal" result-class="java.util.HashMap">
        SELECT MIN_BAL_W_CHK,AVAILABLE_BALANCE FROM OP_AC_ACCOUNT_PARAM OP,
        ACT_MASTER AM WHERE OP.PROD_ID = #PROD_ID:VARCHAR# AND OP.PROD_ID = AM.PROD_ID
        AND (AM.AVAILABLE_BALANCE >= OP.MIN_BAL_W_CHK) AND AM.ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="rejectChqStopPayment" result-class="java.util.HashMap">
        UPDATE cheque_stop_payment SET 
        STOP_STATUS = #STOP_STATUS:VARCHAR#,
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_REMARKS = '',
        CHQ_REVOKE_DT = ''
        WHERE CHQ_STOP_ID = #CHQ_STOP_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="insertChqDestroDetails" result-class="java.util.HashMap">
        INSERT INTO CHEQUE_DESTROYED_DETAILS(ACT_NUM,STATUS,START_CHQ_NO_1,START_CHQ_NO_2,END_CHQ_NO_1,
        END_CHQ_NO_2,CHEQUE_NO) 
        VALUES (#ACCT_NO:VARCHAR#,#STATUS:VARCHAR#,#FROM_CHQ_NO1:VARCHAR#,#FROM_CHQ_NO2:VARCHAR#,#TO_CHQ_NO1:VARCHAR#,#TO_CHQ_NO2:VARCHAR#,#CHQ_NO:VARCHAR#)
    </mapped-statement>
        
    <dynamic-mapped-statement name="getActDetailsForChqNo" result-class="java.util.HashMap" >
        SELECT ACCT_NO,ACCT_NAMES,           
        START_CHQ_NO1||''|| START_CHQ_NO2||'-'|| END_CHQ_NO1||''||END_CHQ_NO2  AS SERIES ,
        DECODE(PROD_TYPE,'OA',(SELECT AVAILABLE_BALANCE FROM ACT_MASTER AM WHERE AM.ACT_NUM=ACCT_NO)
        ,'AD',(SELECT AVAILABLE_BALANCE FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM=ACCT_NO )) AS AV_BAL , 
        DECODE(PROD_TYPE,'OA',(SELECT CUST_ID FROM ACT_MASTER AM WHERE AM.ACT_NUM=ACCT_NO)
        ,'AD',(SELECT CUST_ID  FROM LOANS_BORROWER LB,LOANS_FACILITY_DETAILS LFD WHERE LB.BORROW_NO= LFD.BORROW_NO
        AND LFD.ACCT_NUM=ACCT_NO )) AS CUST_ID,
        DECODE(PROD_TYPE,'OA',(SELECT PROD_DESC FROM OP_AC_PRODUCT OPP WHERE OPP.PROD_ID=CI.PROD_ID)
        ,'AD',(SELECT PROD_DESC FROM LOANS_PRODUCT LP WHERE LP.PROD_ID=CI.PROD_ID )) AS PROD_DESC 
        FROM CHEQUE_ISSUE CI  WHERE #CHQ_NO2:VARCHAR# BETWEEN TO_NUMBER(START_CHQ_NO2) 
        AND TO_NUMBER(END_CHQ_NO2) AND CI.STATUS!='DELETED'
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "CHQ_NO1">
                    START_CHQ_NO1= END_CHQ_NO1 AND START_CHQ_NO1=#CHQ_NO1:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>  
        
    <mapped-statement name="insertEcsStopPaymentTO" inline-parameters="true">
        INSERT INTO ECS_STOP_PAYMENT
        (ECS_STOP_ID, ECS_STOP_DT, PROD_ID, ACCT_NO,  END_ECS_NO1, END_ECS_NO2, ECS_DT,PAYEE_NAME, ECS_AMT, STOP_PAY_CHRG, STOP_PAY_REASON, STOP_STATUS, STATUS, AUTHORIZE_STATUS, AUTHORIZE_DT, AUTHORIZE_BY, AUTHORIZE_REMARKS, STATUS_BY, STATUS_DT, CREATED_BY, CREATED_DT, PROD_TYPE, BRANCH_ID
        ) VALUES (
        #ecsStopId:VARCHAR#, #ecsStopDt:TIMESTAMP#, #ecsProdId:VARCHAR#, #ecsAcctNo:VARCHAR#, #ecsEndChqNo1:VARCHAR#, #ecsEndChqNo2:VARCHAR#, #ecsDt:DATE#,#ecsPayeeName:VARCHAR#, #ecsAmt:NUMERIC#, #ecsStopPayChrg:NUMERIC#, #ecsStopPayReason:VARCHAR#, #ecsStopStatus:VARCHAR#, #ecsStatus:VARCHAR#, #ecsAuthorizeStatus:VARCHAR#, #ecsAuthorizeDt:DATE#, #ecsAuthorizeBy:VARCHAR#, #ecsAuthorizeRemarks:VARCHAR#, #ecsStatusBy:VARCHAR#, #ecsStatusDt:TIMESTAMP#, #ecsCreatedBy:VARCHAR#, #ecsCreatedDt:TIMESTAMP#, #ecsProdType:VARCHAR#, #ecsBranchId:VARCHAR#)
    </mapped-statement>
    <mapped-statement name="updateEcsStopPaymentTO" inline-parameters="true">
        UPDATE ECS_STOP_PAYMENT SET 
        END_ECS_NO1 = #ecsEndChqNo1:VARCHAR#,
        END_ECS_NO2 = #ecsEndChqNo2:VARCHAR#,
        ECS_DT = #ecsDt:DATE#,
        PAYEE_NAME = #ecsPayeeName:VARCHAR#,
        ECS_AMT = #ecsAmt:NUMERIC#,
        STOP_PAY_CHRG = #ecsStopPayChrg:NUMERIC#,
        STOP_PAY_REASON = #ecsStopPayReason:VARCHAR#,
        STATUS = #ecsStatus:VARCHAR#,
        STOP_STATUS = #ecsStopStatus:VARCHAR#,
        STATUS_BY = #ecsStatusBy:VARCHAR#,
        STATUS_DT = #ecsStatusDt:TIMESTAMP#
        WHERE ECS_STOP_ID = #ecsStopId:VARCHAR#
    </mapped-statement>
    <result-map name="getEcsStopPaymentTOResult" class="com.see.truetransact.transferobject.supporting.chequebook.ECSStopPaymentTO">
        <property name="ecsStopId" column="ECS_STOP_ID"/>
        <property name="ecsStopDt" column="ECS_STOP_DT"/>
        <property name="ecsProdId" column="PROD_ID"/>
        <property name="ecsAcctNo" column="ACCT_NO"/>
        <property name="ecsEndChqNo1" column="END_ECS_NO1"/>
        <property name="ecsEndChqNo2" column="END_ECS_NO2"/>
        <property name="ecsDt" column="ECS_DT"/>
        <property name="ecsPayeeName" column="PAYEE_NAME"/>
        <property name="ecsAmt" column="ECS_AMT"/>
        <property name="ecsStopPayChrg" column="STOP_PAY_CHRG"/>
        <property name="ecsStopPayReason" column="STOP_PAY_REASON"/>
        <property name="ecsStopStatus" column="STOP_STATUS"/>
        <property name="ecsStatus" column="STATUS"/>
        <property name="ecsAuthorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="ecsAuthorizeDt" column="AUTHORIZE_DT"/>
        <property name="ecsAuthorizeBy" column="AUTHORIZE_BY"/>
        <property name="ecsAuthorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="ecsStatusBy" column="STATUS_BY"/>
        <property name="ecsStatusDt" column="STATUS_DT"/>
        <property name="ecsCreatedBy" column="CREATED_BY"/>
        <property name="ecsCreatedDt" column="CREATED_DT"/>
        <property name="ecsProdType" column="PROD_TYPE"/>
        <property name="ecsBranchId" column="BRANCH_ID"/>
        <property name="ecsRevokeDt" column="ECS_REVOKE_DT"/>
    </result-map>
    <mapped-statement name="getSelectEcsStopPaymentTO" result-map="getEcsStopPaymentTOResult" >
        SELECT * FROM ECS_STOP_PAYMENT 
        WHERE ECS_STOP_ID = #value:VARCHAR#
    </mapped-statement>   
    <mapped-statement name="viewEcsPayment" result-class="java.util.LinkedHashMap">
        SELECT ECS_STOP_ID as "ECS_STOP_ID",ECS_STOP_DT,
        END_ECS_NO1,END_ECS_NO2, ACCT_NO as "Account Number", PAYEE_NAME as "Payee Names",
        PROD_TYPE AS "Product Type", PROD_ID AS "Product ID", AUTHORIZE_STATUS, STOP_STATUS
        FROM ECS_STOP_PAYMENT 
        WHERE STATUS != 'DELETED'
        AND BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND ((STOP_STATUS != 'REVOKED') OR (STOP_STATUS = 'REVOKED' AND AUTHORIZE_STATUS = 'REJECTED'))  
        AND ((STOP_STATUS = 'STOPPED' AND (AUTHORIZE_STATUS != 'REJECTED' OR AUTHORIZE_STATUS IS NULL))
        OR (STOP_STATUS = 'REVOKED' AND AUTHORIZE_STATUS = 'REJECTED'))
    </mapped-statement>     
    <dynamic-mapped-statement name="getSelectEcsStopPaymentIssueTOList" result-class="java.util.LinkedHashMap" >
        SELECT ECS_STOP_ID as "ECS_STOP_ID", END_ECS_NO1,END_ECS_NO2, PROD_ID AS "Product ID", PROD_TYPE AS "Product Type",
        ACCT_NO as "Account Number", PAYEE_NAME as "Payee Names" , STOP_PAY_CHRG AS "Charges", STOP_STATUS AS "STOP_STATUS"
        FROM ECS_STOP_PAYMENT
        WHERE STATUS != 'DELETED'
        AND STATUS_BY != #USER_ID:VARCHAR# 
        AND BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = ECS_STOP_PAYMENT.STATUS_BY) 
                                    
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AUTHORIZE_STATUS IS NULL OR 
                AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>   
            
        ORDER BY ECS_STOP_ID                                 
    </dynamic-mapped-statement>
    <mapped-statement name="authEcsStopPaymentIssue" result-class="java.util.HashMap">
        UPDATE ECS_STOP_PAYMENT SET 
        AUTHORIZE_STATUS = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#,
        AUTHORIZE_REMARKS = #REMARKS:VARCHAR#
        WHERE ECS_STOP_ID = #ECS_STOP_ID:VARCHAR# 
    </mapped-statement>
    <mapped-statement name="rejectEcsStopPayment" result-class="java.util.HashMap">
        UPDATE ecs_stop_payment SET 
        STOP_STATUS = #STOP_STATUS:VARCHAR#,
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_REMARKS = '',
        WHERE ECS_STOP_ID = #ECS_STOP_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="setEcsPaymentRevoke" result-class="java.util.HashMap">
        UPDATE ECS_STOP_PAYMENT SET
        STOP_STATUS = 'REVOKED' ,
        AUTHORIZE_STATUS = '',
        AUTHORIZE_REMARKS = #ECS_STOP_REM:VARCHAR#,
        ECS_REVOKE_DT=#ECS_REVOKE_DT:DATE#
        WHERE ECS_STOP_ID = #ECS_STOP_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="deleteEcsStopPaymentTO" inline-parameters="true">
        UPDATE ECS_STOP_PAYMENT SET 
        STATUS = #ecsStatus:VARCHAR#,
        STATUS_BY = #ecsStatusBy:VARCHAR#,
        STATUS_DT = #ecsStatusBy:TIMESTAMP#
        WHERE ECS_STOP_ID = #ecsStopId:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getStopPaymentChrgs" result-class="java.util.HashMap">
        SELECT NVL((STOP_PAYMENT_AMTCHG),0) AS CHARGE FROM   OP_AC_CHARGES_PARAM
        WHERE PROD_ID=#PROD_ID:VARCHAR#
        UNION
        SELECT NVL((STOP_PAY_CHRG_RATE),0) AS CHARGE FROM   ADVANCES_PROD_CHARGES
        WHERE PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getUnusedCheckCounts" result-class="java.util.LinkedHashMap">
        SELECT A.COUNT-B.COUNT AS CHEQUE_COUNT FROM 
        (SELECT SUM(TO_NUMBER(END_CHQ_NO2)-TO_NUMBER(START_CHQ_NO2)+1) AS COUNT FROM CHEQUE_ISSUE WHERE 
        STATUS!='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED' AND ACCT_NO=#ACCT_NO:VARCHAR#) A,
        (SELECT SUM(NVL(COUNT,0)) AS COUNT FROM(
        SELECT COUNT(*) AS COUNT  FROM 
        CASH_TRANS CT WHERE EXISTS (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACT_NUM AND 
        INSTRUMENT_NO2 BETWEEN START_CHQ_NO2 AND END_CHQ_NO2 AND INSTRUMENT_NO1 BETWEEN START_CHQ_NO1 AND END_CHQ_NO1) 
        AND ACT_NUM =  #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND STATUS!='DELETED'
        UNION ALL
        SELECT COUNT(*) AS COUNT  FROM 
        TRANSFER_TRANS CT WHERE EXISTS (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACT_NUM AND 
        INSTRUMENT_NO2 BETWEEN START_CHQ_NO2 AND END_CHQ_NO2 AND INSTRUMENT_NO1 BETWEEN START_CHQ_NO1 AND END_CHQ_NO1) 
        AND ACT_NUM =  #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND STATUS!='DELETED'
        UNION ALL
        SELECT COUNT(*) AS COUNT  FROM 
        INWARD_CLEARING CT WHERE EXISTS (SELECT ACCT_NO FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACCT_NO AND 
        INSTRUMENT_NO2 BETWEEN START_CHQ_NO2 AND END_CHQ_NO2 AND INSTRUMENT_NO1 BETWEEN START_CHQ_NO1 AND END_CHQ_NO1) 
        AND ACCT_NO =  #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND STATUS!='DELETED'
        UNION ALL
        SELECT COUNT(*) AS COUNT  FROM 
        CHQ_USED_LEGACY_DAT2 CT WHERE EXISTS (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACT_NUM AND 
        INSTRUMENT_NO2 BETWEEN START_CHQ_NO2 AND END_CHQ_NO2 AND INSTRUMENT_NO1 BETWEEN START_CHQ_NO1 AND END_CHQ_NO1) 
        AND ACT_NUM =  #ACCT_NO:VARCHAR#) C) B  
    </mapped-statement>
    <mapped-statement name="getUnusedCheckCountsEachSeries" result-class="java.util.LinkedHashMap">
        SELECT A.COUNT-B.COUNT AS CHEQUE_COUNT FROM 
        (SELECT cast(SUM(TO_NUMBER(#TO_CHEQUE_NO#)-TO_NUMBER(#FROM_CHEQUE_NO#)+1) as BIGINT) AS COUNT FROM CHEQUE_ISSUE WHERE 
        STATUS!='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED' AND ACCT_NO=#ACCT_NO:VARCHAR# AND 
        START_CHQ_NO1 BETWEEN #NO_1:VARCHAR# AND #NO_2:VARCHAR# AND START_CHQ_NO2 &gt;= #FROM_CHEQUE_NO:VARCHAR# AND END_CHQ_NO2 &lt;= #TO_CHEQUE_NO:VARCHAR#) A,
        (SELECT SUM(NVL(COUNT,0)) AS COUNT FROM(
        SELECT CAST(COUNT(*) AS BIGINT) AS COUNT  FROM 
        CASH_TRANS CT WHERE EXISTS (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACT_NUM AND 
        INSTRUMENT_NO1 BETWEEN #NO_1:VARCHAR# AND #NO_2:VARCHAR# AND INSTRUMENT_NO2 BETWEEN #FROM_CHEQUE_NO# AND #TO_CHEQUE_NO#) 
        AND ACT_NUM =  #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND STATUS!='DELETED'
        union all
        SELECT CAST(COUNT(*) AS BIGINT) AS COUNT  FROM 
        TRANSFER_TRANS CT WHERE EXISTS (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACT_NUM AND 
        INSTRUMENT_NO1 BETWEEN #NO_1:VARCHAR# AND #NO_2:VARCHAR# AND INSTRUMENT_NO2 BETWEEN #FROM_CHEQUE_NO# AND #TO_CHEQUE_NO#) 
        AND ACT_NUM =  #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND STATUS!='DELETED'
        union all
        SELECT CAST(COUNT(*) AS BIGINT) AS COUNT FROM 
        INWARD_CLEARING CT WHERE EXISTS (SELECT ACCT_NO FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACCT_NO AND 
        INSTRUMENT_NO1 BETWEEN #NO_1:VARCHAR# AND #NO_2:VARCHAR# AND INSTRUMENT_NO2 BETWEEN #FROM_CHEQUE_NO# AND #TO_CHEQUE_NO#) 
        AND ACCT_NO =  #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND STATUS!='DELETED'
        union all
        SELECT CAST(COUNT(*) AS BIGINT) AS COUNT  FROM 
        CHQ_USED_LEGACY_DAT2 CT WHERE EXISTS (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACT_NUM AND 
        INSTRUMENT_NO1 BETWEEN #NO_1:VARCHAR# AND #NO_2:VARCHAR# AND INSTRUMENT_NO2 BETWEEN #FROM_CHEQUE_NO# AND #TO_CHEQUE_NO#) 
        AND ACT_NUM =  #ACCT_NO:VARCHAR#
        <!--UNION ALL
        SELECT CAST(COUNT(*) AS BIGINT) AS COUNT  FROM 
        TRANSFER_TRANS CT WHERE EXISTS (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACT_NUM AND 
        INSTRUMENT_NO1 BETWEEN #NO_1:VARCHAR# AND #NO_2:VARCHAR# AND INSTRUMENT_NO2 BETWEEN #FROM_CHEQUE_NO# AND #TO_CHEQUE_NO# 
        AND ACT_NUM =  #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND STATUS!='DELETED'
        UNION ALL
        SELECT CAST(COUNT(*) AS BIGINT) AS COUNT FROM 
        INWARD_CLEARING CT WHERE EXISTS (SELECT ACCT_NO FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACCT_NO AND 
        INSTRUMENT_NO1 BETWEEN #NO_1:VARCHAR# AND #NO_2:VARCHAR# AND INSTRUMENT_NO2 BETWEEN #FROM_CHEQUE_NO# AND #TO_CHEQUE_NO#) 
        AND ACCT_NO =  #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND STATUS!='DELETED'
        UNION ALL
        SELECT CAST(COUNT(*) AS BIGINT) AS COUNT  FROM 
        CHQ_USED_LEGACY_DAT2 CT WHERE EXISTS (SELECT ACT_NUM FROM CHEQUE_ISSUE WHERE ACCT_NO = CT.ACT_NUM AND 
        INSTRUMENT_NO1 BETWEEN #NO_1:VARCHAR# AND #NO_2:VARCHAR# AND INSTRUMENT_NO2 BETWEEN #FROM_CHEQUE_NO# AND #TO_CHEQUE_NO#) 
        AND ACT_NUM =  #ACCT_NO:VARCHAR#)-->
       ) AS C )AS B
    </mapped-statement>

</sql-map>    
 

        
                

