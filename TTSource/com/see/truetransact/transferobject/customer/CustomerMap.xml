<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="CustomerMap">

    <!-- Use CustomerTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertCustomerTO" inline-parameters="true">
        INSERT INTO CUSTOMER
        (CUST_ID, BRANCH_CODE, LNAME, FNAME, MNAME, DOB, NETWORTH, CREATEDDT, DELETEDDT, GENDER, PROFESSION, MINOR, ANNINCOME, EDUCATION, VEHICLE, REMARKS, 
        COMP_NAME, COMM_ADDR_TYPE, EMAIL_ID, TITLE, RESIDENTIALSTATUS, NATIONALITY, LANGUAGE, CUSTOMERGROUP, RELATIONMANAGER, PRIMARY_OCCUPATION, PREFERRED_COMM,
        STATUS, MARITALSTATUS, CUST_TYPE_ID, SSN, CUST_USERID, CUST_PWD, <!-- PHOTO_FILE, SIGNATURE_FILE, --> CUST_TYPE, 
        WEBSITE, AUTHORIZE_CUST_ID, AUTHORIZED_BY, AUTHORIZED_DT, AUTHORIZE_STATUS, TRANS_PWD, MEMBERSHIP_CLASS, CARE_OF, CARE_OF_NAME,
        CUSTOMER_STATUS, CR_AVAILED_SINCE, RISK_RATING, INTRO_TYPE,OBTAIN_FINSTAT, ADDR_VERIFIED, PHONE_VERIFIED, CREATED_BY, STAFF_ID, 
        SEND_THANKS_LETTER, CONFIRM_THANKS, DESIGNATION, STATUS_BY, STATUS_DT, NETWORTH_AS_ON, INITIATED_BRANCH, CASTE, PAN_NUMBER,ADDR_PROOF,
        IDENTITY_PROOF,KARTHA_NAME,FARMER_CLASSIFICATION,AGE,BANKRUPTCY_DETAILS,MEMBERSHIP_NO,IT_DECL_TYPE,RELIGION, WARD_NO,JOINING_DATE,AMSAM,
        DESAM,SUB_CASTE,MINORITY, DIVISION, RETIREMENT_DT, RETIREMENT_AGE, AGENT_CUST_ID 
        ) VALUES (
        #custId:VARCHAR#, #branchCode:VARCHAR#, #lname:VARCHAR#, #fname:VARCHAR#, #mname:VARCHAR#, #dob:DATE#, #networth:NUMERIC#, #createddt:DATE#, 
        #deleteddt:DATE#, #gender:VARCHAR#, #profession:VARCHAR#, #minor:VARCHAR#, #annincome:VARCHAR#, #education:VARCHAR#, #vehicle:VARCHAR#, #remarks:VARCHAR#, 
        #compName:VARCHAR#, #commAddrType:VARCHAR#, #emailId:VARCHAR#, #title:VARCHAR#, #residentialstatus:VARCHAR#, #nationality:VARCHAR#, #language:VARCHAR#, 
        #customergroup:VARCHAR#, #relationmanager:VARCHAR#, #primaryOccupation:VARCHAR#, #preferredComm:VARCHAR#, #status:VARCHAR#, #maritalstatus:VARCHAR#,
        #custTypeId:VARCHAR#, #ssn:VARCHAR#, #custUserid:VARCHAR#, #custPwd:VARCHAR#, <!-- empty_blob(), empty_blob(),--> #custType:VARCHAR#, #website:VARCHAR#,
        #authorizeCustId:VARCHAR#, #authorizedBy:VARCHAR#, #authorizedDt:DATE#, #authorizeStatus:VARCHAR#, #transPwd:VARCHAR#, #membershipClass:VARCHAR#, 
        #careOf:VARCHAR#, #careOfName:VARCHAR#, #customerStatus:VARCHAR#, #crAvailedSince:DATE#, #riskRating:VARCHAR#, #introType:VARCHAR#, 
        #obtainFinstat:VARCHAR#, #addrVerified:VARCHAR#, #phoneVerified:VARCHAR#, #createdBy:VARCHAR#, #staffId:VARCHAR#, #sendThanksLetter:VARCHAR#,
        #confirmThanks:VARCHAR#, #designation:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #networthAsOn:DATE#, #initiatedBranch:VARCHAR#,#caste:VARCHAR#,
        #panNumber:VARCHAR#,#addrProof:VARCHAR#,#idenProof:VARCHAR#,#kartha:VARCHAR#,#farClass:VARCHAR#,CASE #age# WHEN 0 THEN 0 ELSE #age# END,#bankruptcy:VARCHAR#,#membershipNum:VARCHAR#,#itDec:VARCHAR#,
        #cboReligion:VARCHAR#,#wardNo:VARCHAR#,#joiningDate:DATE#,#amsam:VARCHAR#,#desam:VARCHAR#,#subCaste:VARCHAR#,#minority:varchar#, #division:VARCHAR#,#retDt:DATE#,#retAge:NUMERIC#,#agentCustId:VARCHAR#)
    </mapped-statement>
        
    <!-- Use CustomerTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateCustomerTO" inline-parameters="true">
        UPDATE CUSTOMER SET 
        CUST_ID = #custId:VARCHAR#,
        INTRO_TYPE = #introType:VARCHAR#,
        BRANCH_CODE = #branchCode:VARCHAR#,
        LNAME = #lname:VARCHAR#,
        FNAME = #fname:VARCHAR#,
        MNAME = #mname:VARCHAR#,
        DOB = #dob:DATE#,
        NETWORTH = #networth:NUMERIC#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        DELETEDDT = #deleteddt:DATE#,
        GENDER = #gender:VARCHAR#,
        PROFESSION = #profession:VARCHAR#,
        MINOR = #minor:VARCHAR#,
        JOINING_DATE=#joiningDate:DATE#,
        ANNINCOME = #annincome:VARCHAR#,
        EDUCATION = #education:VARCHAR#,
        VEHICLE = #vehicle:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        COMP_NAME = #compName:VARCHAR#,
        COMM_ADDR_TYPE = #commAddrType:VARCHAR#,
        EMAIL_ID = #emailId:VARCHAR#,
        TITLE = #title:VARCHAR#,
        RESIDENTIALSTATUS = #residentialstatus:VARCHAR#,
        NATIONALITY = #nationality:VARCHAR#,
        LANGUAGE = #language:VARCHAR#,
        CUSTOMERGROUP = #customergroup:VARCHAR#,
        RELATIONMANAGER = #relationmanager:VARCHAR#,
        PRIMARY_OCCUPATION = #primaryOccupation:VARCHAR#,
        PREFERRED_COMM = #preferredComm:VARCHAR#,
        STATUS = #status:VARCHAR#,
        MARITALSTATUS = #maritalstatus:VARCHAR#,
        CUST_TYPE_ID = #custTypeId:VARCHAR#,
        SSN = #ssn:VARCHAR#,
        CUST_USERID = #custUserid:VARCHAR#,
        CUST_PWD = #custPwd:VARCHAR#,
        <!--		PHOTO_FILE = #photoFile:BLOB#,
        SIGNATURE_FILE = #signatureFile:BLOB#, -->
        CUST_TYPE = #custType:VARCHAR#,
        WEBSITE = #website:VARCHAR#,
        AUTHORIZE_CUST_ID = #authorizeCustId:VARCHAR#,
        AUTHORIZED_BY = #authorizedBy:VARCHAR#,
        <!--AUTHORIZED_DT = #authorizedDt:DATE#,-->
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        TRANS_PWD = #transPwd:VARCHAR#,
        MEMBERSHIP_CLASS = #membershipClass:VARCHAR#,
        CARE_OF = #careOf:VARCHAR#,
        CARE_OF_NAME = #careOfName:VARCHAR#,
        CUSTOMER_STATUS = #customerStatus:VARCHAR#,
        CR_AVAILED_SINCE = #crAvailedSince:DATE#,
        RISK_RATING = #riskRating:VARCHAR#,
        ADDR_VERIFIED = #addrVerified:VARCHAR#,
        PHONE_VERIFIED = #phoneVerified:VARCHAR#,
        OBTAIN_FINSTAT = #obtainFinstat:VARCHAR#,
        STAFF_ID = #staffId:VARCHAR#,
        SEND_THANKS_LETTER = #sendThanksLetter:VARCHAR#,
        CONFIRM_THANKS = #confirmThanks:VARCHAR#,
        DESIGNATION = #designation:VARCHAR#,
        NETWORTH_AS_ON = #networthAsOn:DATE#,
        INITIATED_BRANCH = #initiatedBranch:VARCHAR#,
        CASTE = #caste:VARCHAR#,
        SUB_CASTE=#subCaste:VARCHAR#,
        MINORITY=#minority:VARCHAR#,
        RELIGION = #cboReligion:VARCHAR#,
        PAN_NUMBER = #panNumber:VARCHAR#,
        ADDR_PROOF=#addrProof:VARCHAR#,
        IDENTITY_PROOF = #idenProof:VARCHAR#,
        KARTHA_NAME=#kartha:VARCHAR#,
        FARMER_CLASSIFICATION=#farClass:VARCHAR#,
        AGE=#age:VARCHAR#,
        BANKRUPTCY_DETAILS=#bankruptcy:VARCHAR#,
        MEMBERSHIP_NO=#membershipNum:VARCHAR#,
        IT_DECL_TYPE=#itDec:VARCHAR#,
        WARD_NO=#wardNo:VARCHAR#,
        AMSAM=#amsam:VARCHAR#,
        DESAM=#desam:VARCHAR#,
        DIVISION = #division:VARCHAR#,
        RETIREMENT_DT = #retDt:DATE#,
        RETIREMENT_AGE = #retAge:VARCHAR#,
        AGENT_CUST_ID = #agentCustId:VARCHAR#  
        WHERE CUST_ID = #custId:VARCHAR# AND STATUS NOT IN ('DELETED')
    </mapped-statement>

    <!-- Use CustomerTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteCustomerTO" inline-parameters="true">
        UPDATE CUSTOMER SET 
        STATUS = #status:VARCHAR#, 
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:TIMESTAMP#,
        AUTHORIZE_STATUS = NULL,
        DELETE_REMARKS =#deleteRemarks:VARCHAR#
        WHERE CUST_ID=#custId:VARCHAR# AND STATUS NOT IN ('DELETED')
    </mapped-statement>

    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to CustomerTO object (JavaBean) properties -->
    <result-map name="getCustomerTOResult" class="com.see.truetransact.transferobject.customer.CustomerTO">
        <property name="custId" column="CUST_ID"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="lname" column="LNAME"/>
        <property name="fname" column="FNAME"/>
        <property name="mname" column="MNAME"/>
        <property name="mobileAppLoginStatus" column="MOBILE_APP_LOGIN_STATUS"/>
        <property name="amsam" column="AMSAM"/>
        <property name="desam" column="DESAM"/>
        <property name="dob" column="DOB"/>
        <property name="networth" column="NETWORTH"/>
        <property name="createddt" column="CREATEDDT"/>
        <property name="deleteddt" column="DELETEDDT"/>
        <property name="gender" column="GENDER"/>
        <property name="profession" column="PROFESSION"/>
        <property name="minor" column="MINOR"/>
        <property name="joiningDate" column="JOINING_DATE"/>
        <property name="annincome" column="ANNINCOME"/>
        <property name="education" column="EDUCATION"/>
        <property name="vehicle" column="VEHICLE"/>
        <property name="remarks" column="REMARKS"/>
        <property name="compName" column="COMP_NAME"/>
        <property name="commAddrType" column="COMM_ADDR_TYPE"/>
        <property name="emailId" column="EMAIL_ID"/>
        <property name="title" column="TITLE"/>
        <property name="residentialstatus" column="RESIDENTIALSTATUS"/>
        <property name="nationality" column="NATIONALITY"/>
        <property name="language" column="LANGUAGE"/>
        <property name="customergroup" column="CUSTOMERGROUP"/>
        <property name="relationmanager" column="RELATIONMANAGER"/>
        <property name="primaryOccupation" column="PRIMARY_OCCUPATION"/>
        <property name="preferredComm" column="PREFERRED_COMM"/>
        <property name="status" column="STATUS"/>
        <property name="maritalstatus" column="MARITALSTATUS"/>
        <property name="custTypeId" column="CUST_TYPE_ID"/>
        <property name="ssn" column="SSN"/>
        <property name="custUserid" column="CUST_USERID"/>
        <property name="custPwd" column="CUST_PWD"/>
        <!--		<property name="photoFile" column="PHOTO_FILE"/>
        <property name="signatureFile" column="SIGNATURE_FILE"/>  -->
        <property name="custType" column="CUST_TYPE"/>
        <property name="website" column="WEBSITE"/>
        <property name="authorizeCustId" column="AUTHORIZE_CUST_ID"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="transPwd" column="TRANS_PWD"/>
        <property name="membershipClass" column="MEMBERSHIP_CLASS"/>
        <property name="careOf" column="CARE_OF"/>
        <property name="careOfName" column="CARE_OF_NAME"/>
        <property name="customerStatus" column="CUSTOMER_STATUS"/>
        <property name="crAvailedSince" column="CR_AVAILED_SINCE"/>
        <property name="riskRating" column="RISK_RATING"/>
        <property name="introType" column="INTRO_TYPE"/>
        <property name="obtainFinstat" column="OBTAIN_FINSTAT"/>
        <property name="phoneVerified" column="PHONE_VERIFIED"/>
        <property name="addrVerified" column="ADDR_VERIFIED"/>
        <property name="staffId" column="STAFF_ID"/>
        <property name="sendThanksLetter" column="SEND_THANKS_LETTER"/>
        <property name="confirmThanks" column="CONFIRM_THANKS"/>
        <property name="designation" column="DESIGNATION"/>
        <property name="networthAsOn" column="NETWORTH_AS_ON"/>
        <property name="initiatedBranch" column="INITIATED_BRANCH"/>
        <property name="caste" column="CASTE"/>
        <property name="cboReligion" column="RELIGION"/>
        <property name="panNumber" column="PAN_NUMBER"/>
        <property name="deleteRemarks" column="DELETE_REMARKS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="addrProof" column="ADDR_PROOF"/>
        <property name="idenProof" column="IDENTITY_PROOF"/>
        <property name="kartha" column="KARTHA_NAME"/>
        <property name="farClass" column="FARMER_CLASSIFICATION"/>
        <property name="age" column="AGE"/>
        <property name="bankruptcy" column="BANKRUPTCY_DETAILS"/>
        <property name="membershipNum" column="MEMBERSHIP_NO"/>
        <property name="itDec" column="IT_DECL_TYPE"/>
        <property name="itDec" column="IT_DECL_TYPE"/>
        <property name="wardNo" column="WARD_NO"/>
        <property name="subCaste" column="SUB_CASTE"/>
        <property name="minority" column="MINORITY"/>
        <property name="division" column="DIVISION"/>
        <property name="retDt" column="RETIREMENT_DT"/>
        <property name="retAge" column="RETIREMENT_AGE"/>
        <property name="agentCustId" column="AGENT_CUST_ID"/>
    </result-map>
        
    <mapped-statement name="getSelectCustomerTO" result-map="getCustomerTOResult" >
        SELECT * FROM CUSTOMER 
        WHERE CUST_ID = #CUST_ID:VARCHAR# ORDER BY CUST_ID
    </mapped-statement>
        
    <result-map name="custDetails" class="com.see.truetransact.transferobject.common.customer.CustDetailsTO">
        <property name="custId" column="CUST_ID"/>
        <!--<property name="custLName" column="LNAME"/>-->
        <property name="custFName" column="FNAME"/>
        <!--property name="custMName" column="MNAME"/>-->
        <property name="custDob" column="DOB"/>
        <property name="custStreet" column="STREET"/>
        <property name="custArea" column="AREA"/>
        <property name="custCity" column="CITY"/>
        <property name="custState" column="STATE"/>
        <property name="custPinCode" column="PIN_CODE"/>
        <property name="custCountry" column="COUNTRY_CODE"/>
    </result-map>
        
    <mapped-statement name="getCustDetails" result-map="custDetails" >
        <!--   SELECT C.CUST_ID, FNAME, MNAME, LNAME, DOB, STREET, AREA, CITY, STATE, 
        PIN_CODE, COUNTRY_CODE FROM CUSTOMER C, CUST_ADDR CA WHERE 
        CA.CUST_ID = C.CUST_ID AND C.COMM_ADDR_TYPE = CA.ADDR_TYPE AND C.CUST_ID = #CUST_ID# -->
        <!--            SELECT C.CUST_ID, DECODE(C.CUST_TYPE,'INDIVIDUAL',C.FNAME, C.MNAME, C.LNAME,C.COMP_NAME)AS FNAME, 
        DOB, STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE FROM CUSTOMER C, CUST_ADDR CA 
        WHERE CA.CUST_ID = C.CUST_ID AND C.COMM_ADDR_TYPE = CA.ADDR_TYPE AND C.CUST_ID = #CUST_ID# -->
        SELECT C.CUST_ID, get_cust_name(C.CUST_ID) AS FNAME, 
        DOB, STREET, AREA,(SELECT LOOKUP_MASTER.LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        LOOKUP_MASTER.LOOKUP_ID = 'CUSTOMER.CITY' AND LOOKUP_MASTER.LOOKUP_REF_ID = CA.CITY) AS CITY, 
        (SELECT LOOKUP_MASTER.LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        LOOKUP_MASTER.LOOKUP_ID = 'CUSTOMER.STATE' AND LOOKUP_MASTER.LOOKUP_REF_ID = CA.STATE) AS STATE, PIN_CODE, 
        (SELECT LOOKUP_MASTER.LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        LOOKUP_MASTER.LOOKUP_ID = 'CUSTOMER.COUNTRY' AND LOOKUP_MASTER.LOOKUP_REF_ID = CA.COUNTRY_CODE) AS COUNTRY_CODE FROM CUSTOMER C, CUST_ADDR CA 
        WHERE CA.CUST_ID = C.CUST_ID AND C.COMM_ADDR_TYPE = CA.ADDR_TYPE AND C.CUST_ID = #CUST_ID:VARCHAR#              
    </mapped-statement>
        
    <dynamic-mapped-statement name="getSelectCustomerTOList" result-class="java.util.LinkedHashMap" >
        SELECT CUST_ID AS "Customer ID", get_cust_name(CUSTOMER.CUST_ID) AS "Name", 
        CUSTOMERGROUP AS CUST_GROUP, 
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE LOOKUP_ID = 'CUSTOMER.PROFESSION'  
        AND LOOKUP_REF_ID = PROFESSION) AS "Profession" <!--,
                CUST_TYPE_ID AS "Cust Type" --> FROM CUSTOMER 
        WHERE CUST_TYPE = 'INDIVIDUAL' 
        AND ((STATUS NOT IN ('DELETED'))) <!--AND (AUTHORIZE_STATUS in('AUTHORIZED') or AUTHORIZE_STATUS is null)) OR (STATUS  IN 'DELETED' AND AUTHORIZE_STATUS in('REJECTED')))-->
        AND BRANCH_CODE = #BRANCH_CODE:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "CUSTOMER ID">
                    CUST_ID = #CUSTOMER ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>        

    <mapped-statement name="getSelectCustomerTOListDelete" result-class="java.util.LinkedHashMap" >
        SELECT CUST_ID AS "Customer ID", get_cust_name(C.CUST_ID) AS "Name",  
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE LOOKUP_ID = 'CUSTOMER.PROFESSION'  
        AND LOOKUP_REF_ID = C.PROFESSION) AS "Profession" 
        FROM CUSTOMER C
        WHERE CUST_TYPE = 'INDIVIDUAL' AND (STATUS NOT IN ('DELETED')) 
        AND  NOT EXISTS (SELECT DISTINCT CUST_ID FROM CUST_HISTORY 
        WHERE (STATUS != 'DELETED' OR STATUS IS NULL) AND RELATIONSHIP!='INTRODUCER' AND CUST_ID=C.CUST_ID) AND CUST_ID NOT IN (SELECT DISTINCT AUTHORIZE_CUST_ID FROM CORP_AUTHORIZE_JOINT 
        )AND BRANCH_CODE = #BRANCH_CODE:VARCHAR# 
    </mapped-statement>         
        
    <dynamic-mapped-statement name="getSearchCustomerValues" result-class="java.util.LinkedHashMap" > <!--result-map="getCustomerTOResult" -->
        SELECT CUST_ID AS "Customer ID", get_cust_name(CUSTOMER.CUST_ID) AS "Name",  (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE LOOKUP_ID = 'CUSTOMER.PROFESSION'  AND LOOKUP_REF_ID = PROFESSION) AS "Profession" ,NATIONALITY AS "Nationality"  FROM CUSTOMER WHERE CUST_TYPE = 'INDIVIDUAL' AND (STATUS NOT IN ('DELETED')) 
        <dynamic>
            <isNotEmpty prepend=" AND SOUNDEX(FNAME) " property="FNAME">
                = SOUNDEX(#FNAME#)
            </isNotEmpty>
            <isNotEmpty prepend=" AND SOUNDEX(MNAME) " property="MNAME">
                = SOUNDEX(#MNAME#)
            </isNotEmpty>
            <isNotEmpty prepend=" AND SOUNDEX(LNAME)" property="LNAME">
                = SOUNDEX(#LNAME#)
            </isNotEmpty>
            <isNotEmpty prepend=" AND DOB" property="DOB">
                = TO_DATE(#DOB#,'DD/MM/YYYY')
            </isNotEmpty>
            <isNotEmpty prepend=" AND EMAIL_ID" property="EMAIL_ID">
                = #EMAIL_ID:VARCHAR#
            </isNotEmpty>
        </dynamic>
    </dynamic-mapped-statement>
     
    <dynamic-mapped-statement name="getSearchCorpCustomerValues" result-class="java.util.LinkedHashMap" > 
        SELECT CUST_ID AS "Customer ID", COMP_NAME AS "Company Name",  (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' AND LOOKUP_REF_ID = CUST_TYPE_ID ) AS "Customer Type" FROM CUSTOMER WHERE CUST_TYPE != 'INDIVIDUAL' AND (STATUS NOT IN ('DELETED')) 
        <dynamic>
            <isNotEmpty prepend=" AND SOUNDEX(COMP_NAME) " property="COMP_NAME">
                = SOUNDEX(#COMP_NAME#)
            </isNotEmpty>
            <isNotEmpty prepend=" AND SOUNDEX(CUST_TYPE_ID) " property="CUST_TYPE_ID">
                = SOUNDEX(#CUST_TYPE_ID#)
            </isNotEmpty>
            <isNotEmpty prepend=" AND EMAIL_ID" property="EMAIL_ID">
                = #EMAIL_ID:VARCHAR#
            </isNotEmpty>
        </dynamic>
    </dynamic-mapped-statement>
     
    <mapped-statement name="getSelectCustomerHistory" result-class="java.util.LinkedHashMap" >
        SELECT  CH.CUST_ID as CUST_ID, CH.RELATIONSHIP as RELATIONSHIP, CH.PROD_ID as PROD_ID , 
        CH.PRODUCT_TYPE as PRODUCT_TYPE, CH.ACCT_NO as ACCT_NO, FROM_DT, TO_DT,
        TOTAL_BALANCE as BALANCE,ACT_STATUS_ID AS STATUS FROM CUST_HISTORY CH,ACT_MASTER WHERE CH.CUST_ID=ACT_MASTER.CUST_ID
        AND ACT_MASTER.ACT_STATUS_ID!='CLOSED' AND (CH.STATUS NOT IN ('DELETED') OR CH.STATUS IS NULL)
        AND ACT_MASTER.ACT_NUM=CH.ACCT_NO AND CH.PROD_ID=ACT_MASTER.PROD_ID AND CH.CUST_ID=#CUST_ID:VARCHAR#             
        UNION
        SELECT  CH.CUST_ID as CUST_ID, CH.RELATIONSHIP as RELATIONSHIP, CH.PROD_ID as PROD_ID , 
        CH.PRODUCT_TYPE as PRODUCT_TYPE, CH.ACCT_NO as ACCT_NO, FROM_DT, TO_DT,
        TOTAL_BALANCE as BALANCE ,LFD.ACCT_STATUS AS STATUS FROM CUST_HISTORY CH,LOANS_FACILITY_DETAILS LFD, 
        LOANS_BORROWER LB WHERE LFD.BORROW_NO = LB.BORROW_NO 
        AND LB.CUST_ID =CH.CUST_ID AND LFD.ACCT_STATUS!='CLOSED'  AND (CH.STATUS NOT IN ('DELETED') OR CH.STATUS IS NULL)
        AND LFD.ACCT_NUM=CH.ACCT_NO AND CH.PROD_ID=LFD.PROD_ID AND CH.CUST_ID=#CUST_ID:VARCHAR#             
        UNION
        SELECT  CH.CUST_ID as CUST_ID, CH.RELATIONSHIP as RELATIONSHIP, CH.PROD_ID as PROD_ID , 
        CH.PRODUCT_TYPE as PRODUCT_TYPE, CH.ACCT_NO as ACCT_NO, FROM_DT, TO_DT,
        TOTAL_BALANCE as BALANCE,DA.DEPOSIT_STATUS AS STATUS FROM CUST_HISTORY CH,DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO  DSA WHERE
        DA.CUST_ID=CH.CUST_ID AND  DA.DEPOSIT_STATUS!='CLOSED' AND DSA.DEPOSIT_NO=DA.DEPOSIT_NO AND
        (CH.STATUS NOT IN ('DELETED') OR CH.STATUS IS NULL) 
        AND DSA.DEPOSIT_NO=CH.ACCT_NO AND CH.PROD_ID=DA.PROD_ID AND CH.CUST_ID=#CUST_ID:VARCHAR#           
    </mapped-statement>    
        
    <mapped-statement name="getSelectCustomerBranchTO" result-class="java.util.LinkedHashMap" >
        SELECT * FROM CUSTOMER WHERE BRANCH_CODE=#BRANCH_CODE:VARCHAR#
    </mapped-statement>        

    <dynamic-mapped-statement name="getSelectIndividualCustInfo" result-class="java.util.LinkedHashMap" >
        <!--SELECT CUST_ID, FNAME, PROFESSION, NATIONALITY FROM CUSTOMER WHERE (STATUS NOT IN ('DELETED')) AND CUST_TYPE = 'INDIVIDUAL' ORDER BY CUST_ID-->
        SELECT CUST_ID "Customer Id", FNAME "Name", PROFESSION "Profession", 
        NATIONALITY "Nationality" FROM CUSTOMER 
        WHERE 
        CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED' AND 
        STATUS NOT IN ('DELETED') AND
        CUST_TYPE = 'INDIVIDUAL' 
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="Customer Id">
                    UPPER(CUST_ID) LIKE UPPER('%$Customer Id$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="Name">
                    UPPER(FNAME) LIKE UPPER('%$Name$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="Profession">
                    UPPER(PROFESSION) LIKE UPPER('%$Profession$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="Nationality">
                    UPPER(NATIONALITY) LIKE UPPER('%$Nationality$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY CUST_ID
    </dynamic-mapped-statement>
        	
    <mapped-statement name="getSingleIndividualCustInfo" result-class="java.util.LinkedHashMap" >
        SELECT CUST_ID,TITLE, FNAME,MNAME,LNAME,GENDER	FROM CUSTOMER WHERE CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
        	
    <dynamic-mapped-statement name="getCorporateCustomerList" result-class="java.util.LinkedHashMap" >
        SELECT CUST_ID AS "Customer ID",COMP_NAME AS "Company",<!--CUST_TYPE_ID AS "Customer Type", -->
        WEBSITE, EMAIL_ID, CUSTOMERGROUP AS CUST_GROUP FROM CUSTOMER WHERE (STATUS NOT IN ('DELETED')) AND 
        CUST_TYPE != 'INDIVIDUAL' AND BRANCH_CODE = #BRANCH_CODE:VARCHAR# 
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="Customer ID">
                    UPPER(CUST_ID) LIKE UPPER('%$Customer ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="Company">
                    UPPER(COMP_NAME) LIKE UPPER('%$Company$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_GROUP">
                    UPPER( CUSTOMERGROUP) LIKE UPPER('%$CUST_GROUP$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "CUSTOMER ID">
                    CUST_ID = #CUSTOMER ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY CUST_ID
    </dynamic-mapped-statement>

    <mapped-statement name="getCustomerCustType" result-class="java.util.LinkedHashMap" >
        SELECT CUST_TYPE FROM CUSTOMER C WHERE EXISTS (SELECT CUST_ID FROM ACT_MASTER 
        WHERE ACT_NUM = #ACT_NUM:VARCHAR# AND CUST_ID = C.CUST_ID)
    </mapped-statement>
                
    <!-- ==============================AUTHORIZATION-INDIVIDUAL===================================================== -->
    <dynamic-mapped-statement name="getSelectIndiCustAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT  CUST_ID AS "Customer ID", get_cust_name(C.CUST_ID) AS "Name", 
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE LOOKUP_ID = 'CUSTOMER.PROFESSION'  
        AND LOOKUP_REF_ID = PROFESSION) AS "Profession" , 
        NATIONALITY AS "Nationality", <!--CUST_TYPE_ID AS "Cust Type",-->
        AUTHORIZE_STATUS,AUTHORIZED_BY,STATUS,STATUS_BY, DELETE_REMARKS  
        FROM CUSTOMER C
        WHERE CUST_TYPE = 'INDIVIDUAL' 
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = C.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                C.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (C.AUTHORIZE_STATUS IS NULL OR 
                C.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        AND C.STATUS_BY != #USER_ID:VARCHAR# AND C.BRANCH_CODE = #BRANCH_CODE:VARCHAR#
        ORDER BY CUST_ID
    </dynamic-mapped-statement>

    <!-- Use authorizeOperativeAcctProduct object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <dynamic-mapped-statement name="authorizeIndiCust" result-class="java.util.HashMap">
        UPDATE CUSTOMER SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#, 
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        <dynamic>
            <isPropertyAvailable prepend = "," property="STATUSCHECK">
                STATUS = #DELETESTATUS:VARCHAR#,
                DELETE_REMARKS = #DELETEREMARKS:VARCHAR#
            </isPropertyAvailable>
        </dynamic>
        WHERE CUST_ID = #CUSTOMER ID:VARCHAR# 
    </dynamic-mapped-statement>
    <!-- =================================================================================== -->   
        
        
    <!-- ==============================AUTHORIZATION-CORPORATE===================================================== -->
    <dynamic-mapped-statement name="getSelectCorpCustAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT CUST_ID AS "Customer Id",COMP_NAME AS "Company",(SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' AND 
        LOOKUP_REF_ID = C.CUST_TYPE) AS "Customer Type" , AUTHORIZE_STATUS, AUTHORIZED_BY, STATUS, STATUS_BY, DELETE_REMARKS
        FROM CUSTOMER C
        WHERE 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = C.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                C.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (C.AUTHORIZE_STATUS IS NULL OR 
                C.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        AND CUST_TYPE != 'INDIVIDUAL'
        AND STATUS_BY != #USER_ID:VARCHAR# AND BRANCH_CODE = #BRANCH_CODE:VARCHAR#
        ORDER BY CUST_ID
    </dynamic-mapped-statement>

    <!-- Use authorizeOperativeAcctProduct oOperativeAcct.getCustDatabject (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <dynamic-mapped-statement name="authorizeCorpCust" result-class="java.util.HashMap">
        UPDATE CUSTOMER SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#, 
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        <dynamic>
            <isPropertyAvailable prepend = "," property="STATUSCHECK">
                STATUS = #DELETESTATUS:VARCHAR#,
                DELETE_REMARKS = #DELETEREMARKS:VARCHAR#
            </isPropertyAvailable>
        </dynamic>
        WHERE CUST_ID = #CUSTOMER ID:VARCHAR# 
    </dynamic-mapped-statement>
	
        
    <result-map name="get-Manager-result" class="com.see.truetransact.transferobject.common.lookup.LookUpTO">
        <property name="lookUpRefID" column="EMPLOYEE_CODE" />
        <property name="lookUpDesc" column="NAME" />
    </result-map>  
    <result-map name="get-State-result" class="com.see.truetransact.transferobject.common.lookup.LookUpTO">
        <property name="lookUpRefID" column="STATE_CODE" />
        <property name="lookUpDesc" column="NAME" />
    </result-map>      

    <mapped-statement name="getRelationshipManager" result-map="get-Manager-result">
        SELECT EMPLOYEE_CODE, CONCAT(CONCAT(FNAME, ' '), LNAME) AS NAME 
        FROM BANK_EMPLOYEE WHERE STATUS != 'DELETED' AND BRANCH_CODE = #BRANCH_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getState" result-map="get-State-result">
        SELECT STATE_CODE, STATE_NAME AS NAME 
        FROM CUSTOMER_STATE 
    </mapped-statement>
        
    <mapped-statement name="getStaffId" result-class="java.util.LinkedHashMap">
        SELECT EMPLOYEE_CODE, CONCAT(CONCAT(FNAME, ' '), LNAME) AS NAME, DESIG_ID AS DESIGNATION 
        FROM BANK_EMPLOYEE WHERE STATUS != 'DELETED' AND BRANCH_CODE = #BRANCH_ID:VARCHAR#
    </mapped-statement>
        
        
    <mapped-statement name="DeletedCustomerDetails" result-class="java.util.LinkedHashMap">
        SELECT CUST_ID AS "Customer ID", get_cust_name(CUSTOMER.CUST_ID) AS "Name", STATUS as "status", STATUS_DT AS "status_dt" FROM CUSTOMER WHERE 
        STATUS = 'DELETED' AND CUST_TYPE = 'INDIVIDUAL' AND AUTHORIZE_STATUS ='AUTHORIZED' AND BRANCH_CODE = #BRANCH_ID:VARCHAR#
    </mapped-statement>
        
    <dynamic-mapped-statement name="DeletedCustomerDetailsCorporate" result-class="java.util.LinkedHashMap">
        SELECT CUST_ID AS "Customer ID", COMP_NAME AS "Name", STATUS as "status", STATUS_DT AS "status_dt" FROM CUSTOMER WHERE 
        STATUS = 'DELETED' AND CUST_TYPE != 'INDIVIDUAL' AND AUTHORIZE_STATUS ='AUTHORIZED' AND BRANCH_CODE = #BRANCH_CODE:VARCHAR#
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="Customer ID">
                    UPPER(CUST_ID) LIKE UPPER('%$Customer ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="Name">
                    UPPER(COMP_NAME) LIKE UPPER('%$Name$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="status">
                    UPPER(STATUS) LIKE UPPER('%$status$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="status_dt">
                    UPPER(STATUS_DT) LIKE UPPER('%$status_dt$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
    <!-- =================================================================================== -->   
        
    <!--==============================FINANCIAL DETAILS==============================-->
    <!-- Use CustFinanceDetailsTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertCustFinanceDetailsTO" inline-parameters="true">
        INSERT INTO CORP_CUST_FINANCE
        (CUST_ID, AUTHORIZE_CAPITAL, ISSUED_CAPITAL, SUBSCRIBED_CAPITAL, TOTAL_RESOURCE, LAST_YEAR_PL, DIVIDEND_PERCENT,NATURE_OF_BUSINESS,COMP_REG_NO,ESTABLISH_DT,CEO_NAME,FINANCIAL_YR_END,TOTAL_INCOME,NON_TAX_EXPENDITURE,PROFIT_BEFORE_TAX,TAX_LIABILITY
        ) VALUES (
        #custId:VARCHAR#, #authorizeCapital:NUMERIC#, #issuedCapital:NUMERIC#, #subscribedCapital:NUMERIC#, #totalResource:NUMERIC#, #lastYearPl:NUMERIC#, #dividendPercent:NUMERIC#, #natureOfBusiness:VARCHAR#, #compRegNo:VARCHAR#, #establishDt:DATE#, #ceoName:VARCHAR#,#financialYrEnd:DATE#,#totalIncome:NUMERIC#,#totalNonTaxExp:NUMERIC#,#profitBeforeTax:NUMERIC#,#liablityTax:NUMERIC#)
    </mapped-statement>

    <!-- Use CustFinanceDetailsTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateCustFinanceDetailsTO" inline-parameters="true">
        UPDATE CORP_CUST_FINANCE SET 
        CUST_ID = #custId:VARCHAR#,
        AUTHORIZE_CAPITAL = #authorizeCapital:NUMERIC#,
        ISSUED_CAPITAL = #issuedCapital:NUMERIC#,
        SUBSCRIBED_CAPITAL = #subscribedCapital:NUMERIC#,
        TOTAL_RESOURCE = #totalResource:NUMERIC#,
        LAST_YEAR_PL = #lastYearPl:NUMERIC#,
        DIVIDEND_PERCENT = #dividendPercent:NUMERIC#,
        NATURE_OF_BUSINESS = #natureOfBusiness:VARCHAR#,
        COMP_REG_NO = #compRegNo:VARCHAR#,
        ESTABLISH_DT = #establishDt:DATE#,
        CEO_NAME = #ceoName:VARCHAR#,
        FINANCIAL_YR_END=#financialYrEnd:DATE#,
        TOTAL_INCOME=#totalIncome:NUMERIC#,
        NON_TAX_EXPENDITURE=#totalNonTaxExp:NUMERIC#,
        PROFIT_BEFORE_TAX=#profitBeforeTax:NUMERIC#,
        TAX_LIABILITY=#liablityTax:NUMERIC#
        WHERE CUST_ID = #custId:VARCHAR#
    </mapped-statement>

    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to CustFinanceDetailsTO object (JavaBean) properties -->
    <result-map name="getCustFinanceDetailsTOResult" class="com.see.truetransact.transferobject.customer.CustFinanceDetailsTO">
        <property name="custId" column="CUST_ID"/>
        <property name="authorizeCapital" column="AUTHORIZE_CAPITAL"/>
        <property name="issuedCapital" column="ISSUED_CAPITAL"/>
        <property name="subscribedCapital" column="SUBSCRIBED_CAPITAL"/>
        <property name="totalResource" column="TOTAL_RESOURCE"/>
        <property name="lastYearPl" column="LAST_YEAR_PL"/>
        <property name="dividendPercent" column="DIVIDEND_PERCENT"/>
        <property name="natureOfBusiness" column="NATURE_OF_BUSINESS"/>
        <property name="compRegNo" column="COMP_REG_NO"/>
        <property name="establishDt" column="ESTABLISH_DT"/>
        <property name="ceoName" column="CEO_NAME"/>
        <property name="financialYrEnd" column="FINANCIAL_YR_END"/>
        <property name="totalIncome" column="TOTAL_INCOME"/>
        <property name="totalNonTaxExp" column="NON_TAX_EXPENDITURE"/>
        <property name="profitBeforeTax" column="PROFIT_BEFORE_TAX"/>
        <property name="liablityTax" column="TAX_LIABILITY"/>
    </result-map>
    <mapped-statement name="getSelectCustFinanceDetailsTO" result-map="getCustFinanceDetailsTOResult" >
        SELECT CUST_ID ,AUTHORIZE_CAPITAL ,ISSUED_CAPITAL,SUBSCRIBED_CAPITAL,TOTAL_RESOURCE,LAST_YEAR_PL,   
        DIVIDEND_PERCENT ,NATURE_OF_BUSINESS,COMP_REG_NO,ESTABLISH_DT ,CEO_NAME,FINANCIAL_YR_END,    
        TOTAL_INCOME,NON_TAX_EXPENDITURE ,PROFIT_BEFORE_TAX,TAX_LIABILITY  FROM CORP_CUST_FINANCE 
        WHERE CUST_ID = #value:VARCHAR#
    </mapped-statement>
        
    <dynamic-mapped-statement name="getBlockedCustomerDetails" result-class="java.util.LinkedHashMap" > <!--result-map="getCustomerTOResult" -->
        SELECT BLOCKED_NAME, FRAUD_STATUS, FRAUD_CLASSIFICATION  FROM BLOCK_LIST  WHERE  CUSTOMER_TYPE ='INDIVIDUAL' AND (STATUS NOT IN ('DELETED')) AND (AUTHORIZE_STATUS IN ('AUTHORIZED'))
        <dynamic>
            <isNotEmpty prepend=" AND BLOCKED_NAME " property="FNAME">
                = #FNAME:VARCHAR#
            </isNotEmpty>
            <isNotEmpty prepend=" OR BLOCKED_NAME " property="MNAME">
                = #MNAME:VARCHAR#
            </isNotEmpty>
            <isNotEmpty prepend=" OR BLOCKED_NAME" property="LNAME">
                = #LNAME:VARCHAR#
            </isNotEmpty>
            <isNotEmpty prepend="AND BUSINESS_ADDR" property="BUSINESS_ADDR">
                LIKE '%$BUSINESS_ADDR$%'
            </isNotEmpty>
        </dynamic>
    </dynamic-mapped-statement>
     
    <dynamic-mapped-statement name="getBlockedCorporateDetails" result-class="java.util.LinkedHashMap" > <!--result-map="getCustomerTOResult" -->
        SELECT BLOCKED_NAME, FRAUD_STATUS, FRAUD_CLASSIFICATION  FROM BLOCK_LIST  WHERE  CUSTOMER_TYPE != 'INDIVIDUAL' AND (STATUS NOT IN ('DELETED')) AND (AUTHORIZE_STATUS IN ('AUTHORIZED'))
        <dynamic>
            <isNotEmpty prepend="  AND BLOCKED_NAME " property="COMPANY">
                =  #COMPANY:VARCHAR#
            </isNotEmpty>
            <isNotEmpty prepend="AND BUSINESS_ADDR" property="BUSINESS_ADDR">
                LIKE '%$BUSINESS_ADDR$%'
            </isNotEmpty>
        </dynamic>
    </dynamic-mapped-statement>
       
    <!-- =================================================================================== -->   
        
    <!-- =================================================================================== -->
    <!-- CUSTOMER JOINTACT (Begin) --> 
    
    <!-- Use JointAccntTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertCustJointAccntTO" inline-parameters="true">
        INSERT INTO CORP_AUTHORIZE_JOINT
        (CUST_ID, AUTHORIZE_CUST_ID,  STATUS
        ) VALUES (#depositNo:VARCHAR#, #custId:VARCHAR#, #status:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="getCustCountJointAccntHolders" result-class="java.util.HashMap" >
        SELECT  COUNT(*) COUNT FROM CORP_AUTHORIZE_JOINT WHERE CUST_ID = #CUST_ID:VARCHAR# AND status != 'DELETED'
    </mapped-statement>
        
    <!-- Use JointAccntTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateCustJointAccntTO" inline-parameters="true">
        UPDATE CORP_AUTHORIZE_JOINT SET 
        CUST_ID = #depositNo:VARCHAR#,
        AUTHORIZE_CUST_ID = #custId:VARCHAR#,
        STATUS = #status:VARCHAR#
        WHERE CUST_ID = #depositNo:VARCHAR#
        AND AUTHORIZE_CUST_ID = #custId:VARCHAR# 
    </mapped-statement>
    
    <!-- Get Selected Customer Joint account info Queries -->          
    <mapped-statement name="getCustSelectAccInfoTblDisplay" result-class="java.util.LinkedHashMap" >
        SELECT CUSTOMER.CUST_ID, 
        get_cust_name(CUSTOMER.CUST_ID) as "Name",
        CUST_TYPE, MINOR
        FROM CUSTOMER 
        WHERE (CUSTOMER.CUST_ID = #AUTHORIZE_CUST_ID:VARCHAR#)
        AND (CUSTOMER.STATUS NOT IN ('DELETED'))
    </mapped-statement>

    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to JointAccntTO object (JavaBean) properties -->
    <result-map name="getCustJointAccntTOResult" class="com.see.truetransact.transferobject.deposit.JointAccntTO">
        <property name="depositNo" column="CUST_ID"/>
        <property name="custId" column="AUTHORIZE_CUST_ID"/>
        <property name="status" column="STATUS"/>
    </result-map>
    
    <dynamic-mapped-statement name="getCorpCustSelectJointAcctInfo" result-class="java.util.LinkedHashMap" >
        <!--SELECT * FROM CORP_AUTHORIZE_JOINT 
        WHERE CUST_ID = #value# ORDER BY (CUST_ID)-->
        SELECT * FROM CORP_AUTHORIZE_JOINT 
        WHERE CUST_ID = #CUST_ID:VARCHAR# 
        <dynamic>
            <isNotPropertyAvailable prepend = "AND" property="DELETECHECK">
                ( STATUS NOT IN ('DELETED')
            </isNotPropertyAvailable>
            <isPropertyAvailable prepend = "AND" property="DELETECHECK">
                ( STATUS IN ('DELETED')
            </isPropertyAvailable>
            <isPropertyAvailable prepend = "OR" property="AUTHORIZECHECK">
                STATUS IN ('DELETED' )
            </isPropertyAvailable>
            )
        </dynamic>
        ORDER BY (CUST_ID)
    </dynamic-mapped-statement>

    <dynamic-mapped-statement name="getSelectCustInfoList" result-class="java.util.LinkedHashMap" >
        SELECT CUSTOMER.CUST_ID AS "CUSTOMER ID",
        get_cust_name(CUSTOMER.CUST_ID) AS "Name",
        <!--CUSTOMER.CUST_TYPE_ID, -->CUSTOMER.CUST_TYPE, CUSTOMER.BRANCH_CODE FROM CUSTOMER ,
        CUST_ADDR
        WHERE ((CUSTOMER.STATUS != 'DELETED'))
        AND CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED'
        AND (CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID) 
        AND CUSTOMER.CUST_TYPE = 'INDIVIDUAL' 
        AND (CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE)
        AND (CUSTOMER.MINOR = 'N' OR CUSTOMER.MINOR IS NULL)   <!-- Newly added this line -->
        <dynamic>
            <isNotEmpty prepend=" AND CUSTOMER.CUST_ID NOT IN ( " property="CUSTOMER_ID">
                <!--iterate  property="CUSTOMER ID" open = "(" close=")" conjunction="," >
                    #CUSTOMER ID[]#
                </iterate-->
                $CUSTOMER_ID$ )
            </isNotEmpty>
        </dynamic>
        AND CUSTOMER.BRANCH_CODE = #BRANCH_CODE:VARCHAR#
        ORDER BY CUSTOMER.CUST_ID
    </dynamic-mapped-statement>
    
    <!-- CUSTOMER  JOINTACT Queries Queries (End) -->    
    <!-- =================================================================================== -->  
    <!-- CORPORATE CUSTOMER'S AUTHORIZED PERSONS BEGIN (Created by Rajesh) --> 

    <!-- Use JointAccntTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertCorpCustAuthTO" inline-parameters="true">
        INSERT INTO CORP_AUTH_CUST
        (CUST_ID, DATE_CREATED, <!--PHOTO_FILE, SIGNATURE_FILE,--> AUTHORIZE_CUST_ID
        ) VALUES (#CUST_ID:VARCHAR#, (SELECT SYS_DATE() FROM DUAL), <!--empty_blob(),
        empty_blob(),--> #AUTH_CUST_ID:VARCHAR#)
    </mapped-statement>

    <mapped-statement name="updateCorpCustAuth" result-class="java.util.HashMap">
        UPDATE CORP_AUTH_CUST SET
        PHOTO_FILE = #PHOTOFILE#, 
        SIGNATURE_FILE = #SIGNATUREFILE#
        WHERE CUST_ID = #CUST_ID:VARCHAR# AND 
        AUTHORIZE_CUST_ID = #AUTHORIZE_CUST_ID:VARCHAR# AND
        PHOTO_FILE = #OLDPHOTOFILE# AND
        SIGNATURE_FILE = #OLDSIGNATUREFILE#
    </mapped-statement>
            
    <mapped-statement name="getCountCorpCustAuth" result-class="java.util.HashMap" >
        SELECT  COUNT(*) COUNT FROM CORP_AUTH_CUST WHERE 
        AUTHORIZE_CUST_ID = #AUTH_CUST_ID:VARCHAR# AND
        CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="updatecust" result-class="java.util.HashMap" >
        UPDATE CUSTOMER SET MEMBERSHIP_NO = #SHARE ACCOUNT NO:VARCHAR# ,MEMBERSHIP_CLASS = #MEMBERSHIP_CLASS:VARCHAR# WHERE CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteCorpCustAuthTO" inline-parameters="true">
        DELETE FROM CORP_AUTH_CUST WHERE CUST_ID = #value:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getSelectCorpAuthCustInfo" result-class="java.util.LinkedHashMap" >
        SELECT * FROM CORP_AUTH_CUST
        WHERE (CUST_ID = #CUST_ID:VARCHAR#) <!--AND 
        DATE_CREATED BETWEEN (SELECT MAX(DATE_CREATED)-.00100 FROM CORP_AUTH_CUST)  --><!-- This conditions to find the latest user photo details, it ignores 10/20 seconds difference -->
        <!--AND (SELECT MAX(DATE_CREATED) FROM CORP_AUTH_CUST) -->
    </mapped-statement>
    <!-- CORPORATE CUSTOMER'S AUTHORIZED PERSONS END (Created by Rajesh) --> 

    <mapped-statement name="updateMembershipShareCust" result-class="java.util.HashMap">
        UPDATE CUSTOMER SET                  
        MEMBERSHIP_NO = #SHARE ACCOUNT NO:VARCHAR#   WHERE 
        MEMBERSHIP_NO = #SHARE APPLICATION NO:VARCHAR#      
    </mapped-statement>
    <mapped-statement name="updateNomineeShareAccNo" result-class="java.util.HashMap">
        update SHARE_NOMINEE_DETAIL set SHARE_NO=#SHARE ACCOUNT NO:VARCHAR# where SHARE_NO=#SHARE APPLICATION NO:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="updateMembershipShareApplCust" result-class="java.util.HashMap">
        UPDATE CUSTOMER SET 
        MEMBERSHIP_CLASS = #SHARE TYPE:VARCHAR#,
        MEMBERSHIP_NO = #SHARE APPLICATION NO:VARCHAR#
        WHERE CUST_ID = (SELECT CUST_ID FROM SHARE_ACCT WHERE 
        SHARE_APPL_NO = (SELECT SHARE_APPL_NO FROM SHARE_ACCT_DETAILS WHERE 
        SHARE_APPL_NO = #SHARE APPLICATION NO:VARCHAR# AND SHARE_ACCT_DET_NO = #SHARE ACCOUNT DETAIL NO:VARCHAR#
        AND  AUTHORIZE!='REJECTED' AND STATUS NOT IN ('DELETED')        
        ))
    </mapped-statement>
        
    <mapped-statement name="getSelectDepositCustDet"  result-class="java.util.LinkedHashMap">
        SELECT CH.CUST_ID, PRODUCT_TYPE,RELATIONSHIP, DA.PROD_ID, ACCT_NO, DSA.DEPOSIT_DT,
        DSA.MATURITY_DT,DSA.MATURITY_AMT,DSA.DEPOSIT_AMT,DSA.TOTAL_BALANCE,DA.DEPOSIT_STATUS AS STATUS FROM 
        CUST_HISTORY CH,DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA WHERE 
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.CUST_ID = CH.CUST_ID AND 
        DA.CUST_ID=#CUST_ID:VARCHAR# AND DA.PROD_ID = CH.PROD_ID AND CH.ACCT_NO=DA.DEPOSIT_NO AND
        (DA.STATUS NOT IN ('DELETED') OR DA.STATUS IS NULL)ORDER BY RELATIONSHIP
    </mapped-statement>
    
    <dynamic-mapped-statement name="OperativeAcct.getCustDataForCustomer" result-class="java.util.LinkedHashMap">
        SELECT DISTINCT CUSTOMER.CUST_ID AS "CUSTOMER ID",AM.ACT_NUM AS "ACT NUM",
        get_cust_name(CUSTOMER.CUST_ID) AS "Name",
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS "Customer Type",   CUSTOMER.BRANCH_CODE AS "Branch ID"
        FROM CUSTOMER,ACT_MASTER AM
        WHERE CUSTOMER.STATUS != 'DELETED'
        AND CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED' AND CUSTOMER.CUST_ID = AM.CUST_ID
        AND  NOT EXISTS (SELECT CUST_ID FROM DEATH_MARKING 
        WHERE STATUS != 'DELETED'
        AND AUTHORIZE_STATUS='AUTHORIZED' AND CUSTOMER.CUST_ID=CUST_ID)
        <dynamic>
            <!--  <isPropertyAvailable prepend = "AND" property="IND">
              CUSTOMER.CUST_TYPE = 'INDIVIDUAL' 
            </isPropertyAvailable>
            <isPropertyAvailable prepend = "AND" property="COR">
               CUSTOMER.CUST_TYPE != 'INDIVIDUAL'    
            </isPropertyAvailable> Commented for Mahila Co-op bank-->
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isPropertyAvailable prepend = "AND" property="CUSTOMER ID">
                CUSTOMER.CUST_ID ='$CUSTOMER ID$'
            </isPropertyAvailable>                        
            <isParameterPresent>
                <isNotNull prepend = "AND" property="ACT NUM">
                    ACT_NUM = '$ACT NUM$'
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend = "AND" property="Branch ID">
                    CUSTOMER.BRANCH_CODE = '$Branch ID$'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        
    </dynamic-mapped-statement>         

  
    <dynamic-mapped-statement name="OperativeAcct.getCustDataForCustomerIntro" result-class="java.util.LinkedHashMap">
        SELECT  CUSTOMER.CUST_ID AS "CUSTOMER ID"
        FROM CUSTOMER,ACT_MASTER AM
        WHERE CUSTOMER.STATUS != 'DELETED'
        AND CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED' AND CUSTOMER.CUST_ID = AM.CUST_ID
        AND  NOT EXISTS (SELECT CUST_ID FROM DEATH_MARKING 
        WHERE STATUS != 'DELETED'
        AND AUTHORIZE_STATUS='AUTHORIZED' AND CUSTOMER.CUST_ID=CUST_ID ) and ACT_NUM = #ACT_NUM:VARCHAR#
        <dynamic>
            <isPropertyAvailable prepend = "AND" property="IND">
                CUSTOMER.CUST_TYPE = 'INDIVIDUAL' 
            </isPropertyAvailable>
            <isPropertyAvailable prepend = "AND" property="COR">
                CUSTOMER.CUST_TYPE != 'INDIVIDUAL' 
            </isPropertyAvailable>
        </dynamic>
    </dynamic-mapped-statement> 
  
    <mapped-statement name="getCustTypeID"  result-class="java.lang.String">
        SELECT CUST_TYPE_ID FROM CUSTOMER WHERE CUST_ID=#CUST_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getMinorRetireAge"  result-class="java.util.HashMap">
        SELECT MINOR_AGE,RETIREMENT_AGE FROM PARAMETERS
    </mapped-statement>
    <mapped-statement name="getFinanceDetailsCnt"  result-class="java.util.HashMap">
        SELECT COUNT(*) AS CNT FROM CORP_CUST_FINANCE
        WHERE CUST_ID=#CUST_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="authStatus"  result-class="java.util.HashMap">
        SELECT AUTHORIZED_DT FROM CUSTOMER WHERE CUST_ID=#CUSTOMER ID:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name="getSelectCustDetails" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT (sa.share_acct_no) AS member_no,c.cust_id,
        get_cust_name(C.CUST_ID) AS NAME,
        street || ' ' || area || ' ' || city AS "ADDRESS",
        pan_number AS pan_no, care_of_name, care_of,
        TO_CHAR (dob, 'DD/MM/YYYY') AS dob,C.UNIQUE_ID as "AADHAR NO",CPR.UNIQUE_ID,
        passport_number AS passport_no, phone_number AS phone_no,
        c.cust_type, sa.status, c.branch_code,
        c.comm_addr_type AS "COMMUNICATION ADDRESS",c.RETIREMENT_DT As "RETIREMENT_DT"
        FROM customer c left join   share_acct sa   on C.CUST_ID=SA.CUST_ID AND sa.status != 'DELETED' AND sa.acct_status != 'CLOSED' AND sa.AUTHORIZE = 'AUTHORIZED'
        left join cust_phone cph on C.CUST_ID=CPH.CUST_ID and cph.STATUS != 'DELETED'
        left join customer_passport cp on c.cust_id = cp.cust_id
        LEFT JOIN CUSTOMER_PROOF CPR ON C.CUST_ID = CPR.CUST_ID ,
        cust_addr ca   
        WHERE c.cust_id = ca.cust_id
        AND c.comm_addr_type = ca.addr_type
        AND c.status != 'DELETED'
        AND NVL (c.authorize_status, 'AUTHORIZED') = 'AUTHORIZED'
        <dynamic>  
        
            <isParameterPresent>
                <isNotNull prepend="AND" property="MEMBER_NO">
                    SA.SHARE_ACCT_NO LIKE UPPER ('%$MEMBER_NO$%')
                </isNotNull>
            </isParameterPresent>
            
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="FNAME">
                    get_cust_name(C.CUST_ID) 
                    <isNotNull prepend="" property="STARTSWITH">
                        LIKE UPPER('$FNAME$%')
                    </isNotNull>
                    <isNotNull prepend="" property="ENDSWITH">
                        LIKE UPPER('%$FNAME$')
                    </isNotNull>
                    <isNotNull prepend="" property="EXACTMATCH">
                        LIKE UPPER('$FNAME$')
                    </isNotNull>
                    <isNotNull prepend="" property="ALL">
                        LIKE UPPER('%$FNAME$%')
                    </isNotNull>
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="FNAME">
                    get_cust_name(C.CUST_ID) LIKE UPPER('%$FNAME$%')
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="CARE_0F_NAME">
                    DECODE(C.CUST_TYPE,'INDIVIDUAL',UPPER(CARE_OF_NAME||'')) LIKE UPPER('%$CARE_0F_NAME$%')
                </isNotNull>
            </isParameterPresent>

            <isParameterPresent>
                <isNotNull prepend="AND" property="ADDRESS">
                    UPPER(STREET||''||concat(AREA,NULL,'',AREA,'')) LIKE UPPER('%$ADDRESS$%')
                </isNotNull>
            </isParameterPresent>

            <isParameterPresent>
                <isNotNull prepend="AND" property="UNIQUE_ID">
                    C.UNIQUE_ID= #UNIQUE_ID#
                </isNotNull>
            </isParameterPresent>
            
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUST_UNIQ_PROFF">
                    CPR.UNIQUE_ID= #CUST_UNIQ_PROFF#
                </isNotNull>
            </isParameterPresent>

            <isParameterPresent>
                <isNotNull prepend="AND" property="PAN_NUMBER">
                    PAN_NUMBER= #PAN_NUMBER# 
                </isNotNull>
            </isParameterPresent>

            <isParameterPresent>
                <isNotNull prepend="AND" property="PASSPORT_NUMBER">
                    PASSPORT_NUMBER=#PASSPORT_NUMBER#
                </isNotNull>
            </isParameterPresent>

            <isParameterPresent>
                <isNotNull prepend="AND" property="PHONE_NUMBER">
                    PHONE_NUMBER=#PHONE_NUMBER#
                </isNotNull>
            </isParameterPresent>

            <isParameterPresent>
                <isNotNull prepend="AND" property="DOB">
                    DOB=#DOB:DATE#
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUST_TYPE">
                    CUST_TYPE = 'INDIVIDUAL'
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUST_TYPE_NOT_INDIVIDUAL">
                    CUST_TYPE != 'INDIVIDUAL'
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="DEATH_MARKING">
                    C.CUST_ID NOT IN (SELECT CUST_ID FROM DEATH_MARKING WHERE STATUS != 'DELETED' AND 
                    (AUTHORIZE_STATUS = 'AUTHORIZED' OR AUTHORIZE_STATUS IS NULL)) AND NOT EXISTS 
                    (SELECT CUST_ID FROM CUSTOMER_SUSPENDED WHERE STATUS='SUSPENDED' AND C.CUST_ID=CUST_ID)
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="SECURITY">
                    (NOT EXISTS (SELECT CUST_ID FROM CUST_SECURITY_DETAILS WHERE (STATUS = 'CREATED'
                    OR STATUS = 'MODIFIED') AND CUST_ID = C.CUST_ID)) AND AUTHORIZE_STATUS = 'AUTHORIZED' AND NOT EXISTS 
                    (SELECT CUST_ID FROM CUSTOMER_SUSPENDED WHERE STATUS='SUSPENDED' AND C.CUST_ID=CUST_ID)
                </isNotNull>
            </isParameterPresent>
                
            <!--<isParameterPresent> commented by Revathi.L reff by Srinath sir 27/06/2017
                <isNotNull prepend="AND" property="AGENT">
                    NOT EXISTS (SELECT AGENT_ID FROM AGENT_MASTER WHERE STATUS !='DELETED' AND (AUTHORIZED_STATUS != 'REJECTED' 
                    OR AUTHORIZED_STATUS IS NULL)AND C.CUST_ID=AGENT_ID) AND NOT EXISTS (SELECT CUST_ID FROM CUSTOMER_SUSPENDED 
                    WHERE STATUS='SUSPENDED' AND C.CUST_ID=CUST_ID)
                </isNotNull>
            </isParameterPresent>-->
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="EMP_NO">
                    C.CUST_ID IN (SELECT CUST_ID FROM SHARE_ACCT WHERE STATUS!='DELETED' AND AUTHORIZE='AUTHORIZED' AND 
                    (EMP_REFNO_NEW IS NOT NULL AND EMP_REFNO_NEW=#EMP_NO:VARCHAR#))
                </isNotNull>
            </isParameterPresent>
                
            <!--<isParameterPresent> commented by Revathi.L reff by Srinath sir 27/06/2017
                <isNotNull prepend="AND" property="AGENT_ID">
                    C.CUST_ID IN(SELECT CUST_ID FROM ACT_MASTER WHERE ACT_STATUS_ID !='CLOSED')
                </isNotNull>
            </isParameterPresent>-->
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="SHARE_ACCT">
                    MEMBERSHIP_NO IS NOT NULL
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="SHARE_ACCT_NEW">
                    MEMBERSHIP_NO IS  NULL
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="SHARE_TYPE">
                    nvl(MEMBERSHIP_CLASS,'K')!=#SHARE_TYPE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUSTOMER_ID">
                    C.CUST_ID=#CUSTOMER_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUST_ID">
                    C.CUST_ID LIKE UPPER ('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="BRANCH_ID">
                    C.BRANCH_CODE=#BRANCH_CODE#
                </isNotNull>
            </isParameterPresent> 
        </dynamic>
        AND C.STATUS!='DELETED' AND NVL(C.AUTHORIZE_STATUS,'AUTHORIZED')='AUTHORIZED'  <!--AND C.BRANCH_CODE=#BRANCH_CODE# -->
        ORDER BY C.CUST_ID
    </dynamic-mapped-statement>    
    
       
            
     
    <mapped-statement name="authorizeHistoryMaster" result-class="java.util.HashMap">
        UPDATE HISTORY_MASTER SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#, 
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE SUBSTR(PRIMARY_ID,1, INSTR(PRIMARY_ID, '+')-1)=#CUSTOMER ID:VARCHAR# AND STATUS!='DELETED'
    </mapped-statement>
    
    <dynamic-mapped-statement name="getHistoryViewerDetails" result-class="java.util.HashMap">
        SELECT SUBSTR(HMD.PRIMARY_ID,1, INSTR(HMD.PRIMARY_ID, '+')-1) AS CUST_ID,HM.STATUS_DT AS MODIFY_DT, 
        HM.STATUS_BY AS MODIFIED_BY,HM.AUTHORIZED_BY, FNAME AS CUSTOMER_NAME,HMD.* FROM HISTORY_MASTER HM, 
        HISTORY_MASTER_DETAILS HMD, CUSTOMER C WHERE HM.HISTORY_ID =HMD.HISTORY_ID AND 
        C.CUST_ID=SUBSTR(HMD.PRIMARY_ID,1, INSTR(HMD.PRIMARY_ID, '+')-1) AND HM.STATUS!='DELETED' 
        AND HM.AUTHORIZED_STATUS='AUTHORIZED' AND SUBSTR(HMD.PRIMARY_ID,1, INSTR(HMD.PRIMARY_ID, '+')-1) 
        = (SELECT DISTINCT CUST_ID FROM CUSTOMER WHERE CUST_ID=#CUST_ID:VARCHAR# OR MEMBERSHIP_NO=#CUST_ID:VARCHAR#) AND HM.PRIMARY_ID=HMD.PRIMARY_ID
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="FROM_DT">
                    HM.STATUS_DT &gt;=#FROM_DT:DATE#
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="TO_DT">
                    HM.STATUS_DT &lt;=#TO_DT:DATE#
                </isNotNull>
            </isParameterPresent>

        </dynamic> 
        ORDER BY HMD.HISTORY_ID
    </dynamic-mapped-statement>
    
    <mapped-statement name="getCorporateCustDetails" result-class="java.util.LinkedHashMap">
        SELECT CUSTOMER.CUST_ID,get_cust_name(CUSTOMER.CUST_ID) AS "Name", DOB, STREET, AREA, (SELECT LOOKUP_DESC FROM 
        LOOKUP_MASTER WHERE LOOKUP_REF_ID= CITY AND LOOKUP_ID = 'CUSTOMER.CITY')CITY,(SELECT LOOKUP_DESC FROM LOOKUP_MASTER 
        WHERE LOOKUP_REF_ID= STATE AND LOOKUP_ID = 'CUSTOMER.STATE')STATE, PIN_CODE FROM CUSTOMER , CUST_ADDR , CUST_PHONE WHERE 
        (CUSTOMER.CUST_ID IN (SELECT DISTINCT AUTHORIZE_CUST_ID FROM CORP_AUTHORIZE_JOINT WHERE CUST_ID=#CUST_ID:VARCHAR#)) AND 
        (CUSTOMER.STATUS IN ('MODIFIED', 'UPDATE', 'CREATED')) AND (CUST_ADDR.CUST_ID (+) = CUSTOMER.CUST_ID) AND (CUST_PHONE.CUST_ID 
        (+) = CUSTOMER.CUST_ID) AND (CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE) ORDER BY CUST_ID
    </mapped-statement>
              
    
    <dynamic-mapped-statement name = "getMemeberShipDetailsFromGahan" result-class = "java.util.LinkedHashMap">
        SELECT MEMBERSHIP_NO, get_cust_name(CUST.CUST_ID) as 
        "CUSTOMER", GDD.PLEDGE_NO, GCD.DOCUMENT_NO, MEMBERSHIP_CLASS,CUST.CUST_ID,GCD.DOCUMENT_GEN_ID FROM CUSTOMER CUST,GAHAN_CUSTOMER_DETAILS GCD, GAHAN_DOCUMENT_DETAILS GDD
        WHERE CUST.STATUS!= 'DELETED' AND CUST.AUTHORIZE_STATUS = 'AUTHORIZED' AND MEMBERSHIP_NO IS NOT NULL AND CUST.CUST_ID=GCD.CUST_ID AND GCD.STATUS!='DELETED' 
        AND GCD.AUTHORIZE_STATUS='AUTHORIZED' AND GDD.DOCUMENT_GEN_ID=GCD.DOCUMENT_GEN_ID AND GDD.STATUS!='DELETED' AND GDD.AUTHORIZE_STATUS='AUTHORIZED'
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBERSHIP_NO">
                    UPPER(MEMBERSHIP_NO) LIKE UPPER('%$MEMBERSHIP_NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER">
                    UPPER(get_cust_name(CUST.CUST_ID)) LIKE UPPER('%$CUSTOMER$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="PLEDGE_NO">
                    UPPER(GDD.PLEDGE_NO) LIKE UPPER('%$PLEDGE_NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="DOCUMENT_NO">
                    UPPER(GCD.DOCUMENT_NO) LIKE UPPER('%$DOCUMENT_NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBERSHIP_CLASS">
                    UPPER(MEMBERSHIP_CLASS) LIKE UPPER('%$MEMBERSHIP_CLASS$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(CUST.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="DOCUMENT_GEN_ID">
                    UPPER(GCD.DOCUMENT_GEN_ID) LIKE UPPER('%$DOCUMENT_GEN_ID$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
              
              
    <mapped-statement name = "getSelectAllCustomerHistory" result-class = "java.util.LinkedHashMap">
        SELECT  CH.CUST_ID as CUST_ID, CH.RELATIONSHIP as RELATIONSHIP, CH.PROD_ID as PROD_ID , 
        CH.PRODUCT_TYPE as PRODUCT_TYPE, CH.ACCT_NO as ACCT_NO, FROM_DT, TO_DT,
        TOTAL_BALANCE as BALANCE ,ACT_STATUS_ID AS STATUS  FROM CUST_HISTORY CH,ACT_MASTER WHERE CH.CUST_ID=ACT_MASTER.CUST_ID
        AND (CH.STATUS NOT IN ('DELETED') OR CH.STATUS IS NULL)
        AND ACT_MASTER.ACT_NUM=CH.ACCT_NO AND CH.PROD_ID=ACT_MASTER.PROD_ID AND CH.CUST_ID=#CUST_ID:VARCHAR#             
        UNION
        SELECT  CH.CUST_ID as CUST_ID, CH.RELATIONSHIP as RELATIONSHIP, CH.PROD_ID as PROD_ID , 
        CH.PRODUCT_TYPE as PRODUCT_TYPE, CH.ACCT_NO as ACCT_NO, FROM_DT, TO_DT,
        TOTAL_BALANCE as BALANCE,LFD.ACCT_STATUS AS STATUS FROM CUST_HISTORY CH,LOANS_FACILITY_DETAILS LFD, 
        LOANS_BORROWER LB WHERE LFD.BORROW_NO = LB.BORROW_NO 
        AND LB.CUST_ID =CH.CUST_ID  AND (CH.STATUS NOT IN ('DELETED') OR CH.STATUS IS NULL)
        AND LFD.ACCT_NUM=CH.ACCT_NO AND CH.PROD_ID=LFD.PROD_ID AND CH.CUST_ID=#CUST_ID:VARCHAR#             
        UNION
        SELECT  CH.CUST_ID as CUST_ID, CH.RELATIONSHIP as RELATIONSHIP, CH.PROD_ID as PROD_ID , 
        CH.PRODUCT_TYPE as PRODUCT_TYPE, CH.ACCT_NO as ACCT_NO, FROM_DT, TO_DT,
        TOTAL_BALANCE as BALANCE,DA.DEPOSIT_STATUS AS STATUS FROM CUST_HISTORY CH,DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO  DSA WHERE
        DA.CUST_ID=CH.CUST_ID  AND DSA.DEPOSIT_NO=DA.DEPOSIT_NO AND
        (CH.STATUS NOT IN ('DELETED') OR CH.STATUS IS NULL) 
        AND DSA.DEPOSIT_NO=CH.ACCT_NO AND CH.PROD_ID=DA.PROD_ID AND CH.CUST_ID=#CUST_ID:VARCHAR#              
    </mapped-statement>    
    <dynamic-mapped-statement name="getSelectAssetDetails" result-class="java.util.LinkedHashMap" >
        SELECT CH.ACCT_NO AS ACT_NUM, CH.PRODUCT_TYPE AS PROD_TYPE,
        AP.PROD_DESC AS PROD_ID, TOTAL_BALANCE AS BALANCE
        FROM ACT_MASTER
        LEFT JOIN CUST_HISTORY CH  ON (<!--(CH.CUST_ID = ACT_MASTER.CUST_ID) AND --> (CH.PROD_ID = ACT_MASTER.PROD_ID) AND (ACT_MASTER.ACT_NUM = CH.ACCT_NO))
        LEFT JOIN ALL_PRODUCTS AP ON AP.PROD_ID = CH.PROD_ID
        LEFT JOIN ACT_JOINT AJ ON CH.CUST_ID = AJ.CUST_ID
        WHERE (CH.STATUS NOT IN ('DELETED') OR CH.STATUS IS NULL)
        and ACT_MASTER.act_status_id  not in ('CLOSED')
        AND CH.CUST_ID =#CUST_ID:VARCHAR#                 
        UNION      
        SELECT  CH.ACCT_NO AS ACT_NUM,CH.PRODUCT_TYPE as PROD_TYPE,AP.PROD_DESC as PROD_ID, 
        TOTAL_BALANCE as BALANCE FROM CUST_HISTORY CH,DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO  DSA,ALL_PRODUCTS AP WHERE
        DA.CUST_ID=CH.CUST_ID  AND DSA.DEPOSIT_NO=DA.DEPOSIT_NO AND
        (CH.STATUS NOT IN ('DELETED') OR CH.STATUS IS NULL) 
        AND DSA.DEPOSIT_NO=CH.ACCT_NO AND CH.PROD_ID=DA.PROD_ID AND CH.CUST_ID=#CUST_ID:VARCHAR# AND AP.PROD_ID = CH.PROD_ID
        AND (DSA.ACCT_STATUS IS  NULL OR DSA.ACCT_STATUS NOT IN ('CLOSED'))  AND   (DA.DEPOSIT_STATUS IS NULL OR DA.DEPOSIT_STATUS NOT IN ('CLOSED'))
        AND DSA.AUTHORIZE_STATUS='AUTHORIZED' AND DA.AUTHORIZE_STATUS='AUTHORIZED'                                                                                                          
        <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend="UNION" property="CHECK_CUSTID_SCREEN">
                    SELECT S.SHARE_ACCT_NO AS ACT_NUM,
                    'SH' AS PROD_TYPE,
                    S.SHARE_TYPE AS PROD_ID, 
                    S.OUTSTANDING_AMOUNT AS BALANCE
                    FROM  SHARE_ACCT S WHERE S.CUST_ID = #CUST_ID:VARCHAR#
                    AND S.STATUS != 'DELETED'
                    AND S.AUTHORIZE = 'AUTHORIZED'
                    AND S.ACCT_STATUS != 'CLOSED'
                </isNotEmpty>
            </isParameterPresent> 
        </dynamic>
        
    </dynamic-mapped-statement>
    <mapped-statement name="getSelectLiabilityDetails" result-class="java.util.LinkedHashMap" >         
        SELECT CH.ACCT_NO AS ACT_NUM,
        CH.PRODUCT_TYPE AS PROD_TYPE,
        AP.PROD_DESC,
        (-1 * CLEAR_BALANCE) AS BALANCE,
        CASE
        WHEN (SELECT CURR_APPL_DT FROM DAY_END WHERE BRANCH_CODE = LFD.BRANCH_ID)>LSD.TO_DT THEN 'DUE'
        ELSE 'NEW'
        END AS STATUS  
        FROM CUST_HISTORY CH,
        LOANS_FACILITY_DETAILS LFD,
        LOANS_BORROWER LB,LOANS_SANCTION_DETAILS lsd,
        ALL_PRODUCTS AP
        WHERE     LFD.BORROW_NO = LB.BORROW_NO
        AND LB.CUST_ID = CH.CUST_ID
        AND (CH.STATUS NOT IN ('DELETED') OR CH.STATUS IS NULL)
        AND LFD.ACCT_NUM = CH.ACCT_NO
        AND CH.PROD_ID = LFD.PROD_ID
        AND LSD.BORROW_NO = LFD.BORROW_NO  
        AND CH.CUST_ID = #CUST_ID:VARCHAR#
        AND AP.PROD_ID = CH.PROD_ID
        AND LFD.ACCT_STATUS NOT IN ('CLOSED')
        AND LFD.STATUS NOT IN ('CLOSED') 
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED'                                                                       
    </mapped-statement>
    
    <mapped-statement name="getSelectOtherAccountDetails" result-class="java.util.LinkedHashMap" > 
        SELECT MP.CHITTAL_NO AS act_num,MP.SUB_NO,'MDS' AS prod_type,MS.SCHEME_DESC AS prod_desc, (SELECT SUM(MT.NET_AMT)
        FROM MDS_TRANS_DETAILS MT WHERE MT.CHITTAL_NO = MP.CHITTAL_NO AND MT.SCHEME_NAME = MP.SCHEME_NAME ) AS BALANCE,MP.BRANCH_CODE,MP.GROUP_NO
        FROM MDS_APPLICATION MP,MDS_SCHEME_DETAILS MS,CUSTOMER C,MDS_MASTER_MAINTENANCE mm
        WHERE C.CUST_ID = MP.CUST_ID
        AND C.MEMBERSHIP_NO = MP.MEMBER_NO
        AND MS.SCHEME_NAME = MP.SCHEME_NAME
        AND MM.CHITTAL_NO = MP.CHITTAL_NO
        AND MM.SCHEME_NAME = MP.SCHEME_NAME
        AND MP.AUTHORIZE_STATUS = 'AUTHORIZED'
        and MM.CHIT_CLOSE_DT IS NULL
        AND MP.STATUS !='DELETED'
        AND C.CUST_ID = #CUST_ID:VARCHAR#
        UNION ALL
        <!--select LM.ACT_NUM AS act_num,-->
        select LM.LOCKER_NUM AS act_num,
        null as SUB_NO,
        'LOCKER' AS PROD_TYPE,
        LM.PROD_ID AS PRO_DESC,
        NULL AS BALANCE,
        LM.BRANCH_CODE,
        NULL AS GROUP_NO 
        from locker_master lm
        where LM.STATUS != 'DELETED'
        AND LM.AUTHORIZATION_STATUS = 'AUTHORIZED'
        AND LM.LOCKER_STATUS_ID != 'CLOSED'
        AND LM.LOCKER_STATUS_ID != 'DEFAULTER'
        and LM.CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getMalayalamWord" result-class="java.util.LinkedHashMap" >         
        SELECT M FROM CUST_REG_DICT WHERE UPPER(E) = #ENG_WORD:VARCHAR#                              
    </mapped-statement>
    <mapped-statement name="getMalayalamFromWord" result-class="java.util.LinkedHashMap" >         
        SELECT M FROM MAL_CHAR WHERE M LIKE '%$ENG_WORD$%'                              
    </mapped-statement>
    <mapped-statement name="insertIntoDict" result-class="java.util.HashMap">
        INSERT INTO CUST_REG_DICT (E,  M ) VALUES (#ENG_WORD:VARCHAR#, #MA_WORD:VARCHAR#)
    </mapped-statement> 
    
    <!-- Added by nithya -->
    <mapped-statement name="updateIntoDict" result-class="java.util.HashMap">
        UPDATE CUST_REG_DICT SET M = #MA_WORD:VARCHAR#
        WHERE E = #ENG_WORD:VARCHAR# 
    </mapped-statement> 
    <!-- End -->

    <mapped-statement name="insertCustRegionalTO" inline-parameters="true">
        INSERT INTO CUST_REGIONAL
        (CUST_ID,FNAME,HOUSE,GUARDIAN,PLACE,VILLAGE,TALUK,CITY,STATE,AMSAM,DESAM,COUNTRY,BRANCH_CODE,STATUS,STATUS_BY,STATUS_DT,SHARE_ACCT_NO) VALUES (
        #custId:VARCHAR#, #fname:Varchar#, #houseName:VARCHAR#,#careOfName:VARCHAR#, #place:VARCHAR#, 
        #village:VARCHAR#, #taluk:VARCHAR#, #city:VARCHAR#,#state:VARCHAR#, #amsam:VARCHAR#,#desam:VARCHAR#,#country:VARCHAR#,#branch_code:VARCHAR#,
        #status:VARCHAR#,#statusBy:VARCHAR#,#statusDt:Date#,#memNo:VARCHAR#)
    </mapped-statement>

    <mapped-statement name="updateCustRegionalTO" inline-parameters="true">
        UPDATE CUST_REGIONAL SET 
        FNAME = #fname:Varchar#,
        HOUSE = #houseName:VARCHAR#, 
        GUARDIAN =#careOfName:VARCHAR#,
        PLACE =  #place:VARCHAR#,
        VILLAGE =  #village:VARCHAR#,
        TALUK =  #taluk:VARCHAR#, 
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        AMSAM = #amsam:VARCHAR#,
        DESAM =#desam:VARCHAR#,
        COUNTRY =#country:VARCHAR#,
        BRANCH_CODE=#branch_code:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY =#statusBy:VARCHAR#,
        STATUS_DT = #statusDt:Date#,
        CUST_ID = #custId:VARCHAR#,
        SHARE_ACCT_NO = #memNo:VARCHAR#
        WHERE CUST_ID=#custId:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getDataFromCustRegional" result-class="java.util.LinkedHashMap" >         
        SELECT CUST_ID,FNAME FROM CUST_REGIONAL WHERE CUST_ID = #CUST_ID:VARCHAR#                              
    </mapped-statement>

    <result-map name="getCustRegionalDetailsTOResult" class="com.see.truetransact.transferobject.customer.CustRegionalTo">
        <property name="custId" column="CUST_ID"/>
        <property name="fname" column="FNAME"/>
        <property name="houseName" column="HOUSE"/>
        <property name="careOfName" column="GUARDIAN"/>
        <property name="place" column="PLACE"/>
        <property name="village" column="VILLAGE"/>
        <property name="taluk" column="TALUK"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="amsam" column="AMSAM"/>
        <property name="desam" column="DESAM"/>
        <property name="country" column="COUNTRY"/>
        <property name="branch_code" column="BRANCH_CODE"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="memNo" column="SHARE_ACCT_NO"/>
    </result-map>

    <mapped-statement name="getSelectCustRegionalDetailsTO" result-map="getCustRegionalDetailsTOResult" >
        SELECT * FROM CUST_REGIONAL WHERE CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getCustRegionalDetailsForView" result-map="getCustRegionalDetailsTOResult" >         
        SELECT * FROM  CUST_REGIONAL WHERE SHARE_ACCT_NO = #MEM_NUM:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getFirstMemNoForRegional" result-class="java.util.LinkedHashMap" >         
        SELECT SUBSTR(SA.SHARE_ACCT_NO,0,LENGTH(SA.SHARE_TYPE)) AS SHARE_TYPE,MIN(TO_NUMBER(SUBSTR(SA.SHARE_ACCT_NO,LENGTH(SA.SHARE_TYPE)+1,LENGTH(SA.SHARE_ACCT_NO)-1))) AS SHARE_NO FROM SHARE_ACCT SA,
        ACT_MASTER AM,LOOKUP_MASTER LM WHERE  AM.CUST_ID=SA.CUST_ID AND LM.LOOKUP_ID='SHARE_TYPE' AND LM.LOOKUP_DESC ='A Class' 
        AND LM.LOOKUP_REF_ID=SA.SHARE_TYPE  AND AM.AUTHORIZATION_STATUS = 'AUTHORIZED' AND AM.STATUS !='DELETED' GROUP BY SUBSTR(SA.SHARE_ACCT_NO,0,LENGTH(SA.SHARE_TYPE))              
    </mapped-statement>
    <mapped-statement name="getLastMemNoFromCustRegional" result-class="java.util.LinkedHashMap" >         
        SELECT   SUBSTR (sa.share_acct_no, 0, LENGTH (sa.share_type)) AS share_type,
        MAX (TO_NUMBER (SUBSTR (cr.share_acct_no,
        LENGTH (sa.share_type) + 1,
        LENGTH (cr.share_acct_no) - 1
        )
        )
        ) AS share_no
        FROM share_acct sa,  lookup_master lm, cust_regional cr
        WHERE cr.share_acct_no = sa.share_acct_no
        AND lm.lookup_id = 'SHARE_TYPE'
        AND lm.lookup_desc = 'A Class'
        AND lm.lookup_ref_id = sa.share_type
        GROUP BY SUBSTR (sa.share_acct_no, 0, LENGTH (sa.share_type))
    </mapped-statement>
    <mapped-statement name="getCustomerDetailsForView" result-class="java.util.LinkedHashMap" >         
        SELECT C.CUST_ID, get_cust_name(C.CUST_ID) AS FNAME, 
        STREET, AREA,C.AMSAM,C.DESAM,C.CARE_OF_NAME,CA.VILLAGE  FROM CUSTOMER C, CUST_ADDR CA ,SHARE_ACCT SA 
        WHERE CA.CUST_ID = C.CUST_ID AND C.COMM_ADDR_TYPE = CA.ADDR_TYPE AND C.CUST_ID =  SA.CUST_ID AND SA.SHARE_ACCT_NO =#MEM_NUM:VARCHAR#  
    </mapped-statement>

    <mapped-statement name="getSelectFromMalChar" result-class="java.util.LinkedHashMap" >
        select MAL as M_WORD from MAL_CHAR_OLD where ENGLISH = #ENG_WORD:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateCustomerAge" result-class="java.util.HashMap">
        <!--UPDATE CUSTOMER  SET AGE = TRUNC(((cast(#PROCESS_DT# as DATE)) - DOB)/365)
        WHERE DOB IS NOT NULL AND DOB &lt;= #PROCESS_DT:DATE#  AND  AUTHORIZE_STATUS ='AUTHORIZED' AND STATUS != 'DELETED' 
        AND CUST_ID NOT IN (SELECT CUST_ID FROM DEATH_MARKING) AND BRANCH_CODE =#BRANCH_CODE:VARCHAR#  -->
        UPDATE CUSTOMER
        SET AGE = FLOOR(DATE_PART('day', (cast(#PROCESS_DT# as DATE) - DOB) / 365.25))
        WHERE DOB IS NOT NULL
        AND DOB &lt;= #PROCESS_DT:DATE# 
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND STATUS != 'DELETED'
        AND CUST_ID NOT IN (SELECT CUST_ID FROM DEATH_MARKING)
        AND BRANCH_CODE = #BRANCH_CODE:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getAuthorizationNotAllowedAcList" result-class="java.util.HashMap" >
        SELECT C.STAFF_ID FROM CUSTOMER C,ALL_CUSTOMER AC WHERE AC.CUST_ID=C.CUST_ID AND C.STATUS!='DELETED' AND C.STAFF_ID IS NOT NULL     
        AND C.AUTHORIZE_STATUS='AUTHORIZED' AND ACCT_STATUS!='CLOSED'  AND C.BRANCH_CODE=#BRANCH_CODE#
        AND AC.ACT_NUM IN (SELECT ACT_NUM FROM TRANSFER_TRANS WHERE BATCH_ID=#BATCH_ID# AND ACT_NUM IS NOT NULL
        AND TRANS_DT=#TRANS_DT# AND BRANCH_ID=#BRANCH_CODE#)  AND CUST_USERID =#USER_ID#
    </mapped-statement>
    
    <mapped-statement name="getCustomerPhForWelcome" result-class="java.util.LinkedHashMap" >
        SELECT C.CUST_ID, CP.PHONE_NUMBER,GET_CUST_NAME(C.CUST_ID) AS CUST_NAME, C.BRANCH_CODE BRANCH_ID
        FROM CUST_PHONE CP,CUSTOMER C
        WHERE C.CUST_ID = CP.CUST_ID
        AND C.CUST_ID = #CUSTOMER ID:VARCHAR#  AND PHONE_TYPE_ID = 'MOBILE' AND CP.STATUS != 'DELETED' AND CP.STATUS in ('CREATED','MODIFIED')
    </mapped-statement>
    
    <mapped-statement name="mobileAppLoginStatus" result-class="java.util.HashMap">
       SELECT MOBILE_APP_LOGIN_STATUS FROM CUSTOMER WHERE CUST_ID=#CUSTOMER ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getCustomerForCardPrinting" result-class="java.util.LinkedHashMap" >
        SELECT GET_CUST_NAME(C.CUST_ID) AS NAME,GET_CUST_ADDR(C.CUST_ID) AS ADDRESS,C.MEMBERSHIP_NO,C.CUST_ID
        FROM CUSTOMER C,CUST_ADDR CA
        WHERE CA.CUST_ID = C.CUST_ID
        AND CA.ADDR_TYPE = C.COMM_ADDR_TYPE
        AND CA.STATUS != 'DELETED'
        AND C.AUTHORIZE_STATUS  = 'AUTHORIZED'
        AND C.CUST_ID = #CUSTOMER ID:VARCHAR# 
    </mapped-statement>
        
        
    <mapped-statement name="updateMembershipNoInCustRegion" result-class="java.util.HashMap" >
        UPDATE CUST_REGIONAL SET SHARE_ACCT_NO = #SHARE ACCOUNT NO:VARCHAR#
        WHERE CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
  
    <mapped-statement name="customer.getCustRegionalCount" result-class="java.util.HashMap" >        
        SELECT COUNT(*) AS REG_COUNT FROM CUST_REGIONAL WHERE CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getSelectMobileNoforOTP" inline-parameters="true" result-class="java.util.HashMap">  
        SELECT * FROM ALL_CUSTOMER_ACCOUNTS ACA,CUST_PHONE CP WHERE ACA.CUST_ID = CP.CUST_ID AND PHONE_TYPE_ID = 'MOBILE' AND 
        ACT_NUM = #QR_ACT_NUM:VARCHAR# AND cp.status not in ('DELETED')
    </mapped-statement>  
    
    <!-- Added by nithya for avoiding sending SMS for each customer edit operation -->
    
    <mapped-statement name="customer.getCustomerStatusForSMS" result-class="java.util.HashMap" >        
        SELECT C.CUST_ID, C.STATUS, CP.PHONE_NUMBER,BRANCH_CODE FROM CUSTOMER C,CUST_PHONE CP WHERE C.CUST_ID = CP.CUST_ID AND 
        PHONE_TYPE_ID = 'MOBILE' AND C.CUST_ID = #CUSTOMER ID:VARCHAR# AND cp.status not in ('DELETED')
    </mapped-statement>
    
    <!-- End -->
    
    <!--  Added by nithya on 31-01-2017 for 5700 -->
    <mapped-statement name="customer.getCustomerPANNumber" result-class="java.util.HashMap" >        
        SELECT C.PAN_NUMBER AS "PAN_NUMBER" FROM CUSTOMER C 
        WHERE C.CUST_ID = #CUST_ID:VARCHAR# AND c.pan_number IS NOT NULL
        UNION ALL
        SELECT CP.UNIQUE_ID AS "PAN_NUMBER" FROM CUSTOMER_PROOF CP
        WHERE CP.CUST_ID =#CUST_ID:VARCHAR#  AND CP.PROOF_TYPE LIKE '%PAN%' AND CP.UNIQUE_ID IS NOT NULL
    </mapped-statement>     
    <mapped-statement name="customer.getCustomerAadharCardNumber" result-class="java.util.HashMap" >       
        SELECT CP.UNIQUE_ID AS "AADHAR_CARD" FROM CUSTOMER_PROOF CP
        WHERE CP.CUST_ID =#CUST_ID:VARCHAR#  AND CP.PROOF_TYPE LIKE '%ADHAR%' AND CP.UNIQUE_ID IS NOT NULL
    </mapped-statement>      
    <!-- End -->
    
    <mapped-statement name="customer.getCustomerPhoneNumberList" result-class="java.util.HashMap" >     
            
        SELECT DISTINCT phone_no
        FROM (SELECT TO_CHAR (s.mobile_no) AS phone_no
        FROM sms_subscription s
        WHERE s.act_num = #ACT_NUM:VARCHAR#
        AND s.status NOT IN ('DELETED')
        AND s.authorize_status NOT IN ('REJECTED')
        UNION ALL
        SELECT DECODE (cp.phone_type_id,
        'LAND LINE', cp.area_code || cp.phone_number,
        cp.phone_number
        ) AS phone_no
        FROM cust_phone cp
        WHERE cp.cust_id = #CUST_ID:VARCHAR#
        AND cp.status NOT IN ('DELETED')) A
      
    </mapped-statement>   
    
    <mapped-statement name="getAllAcctsBasedCustID" result-class="java.util.LinkedHashMap" >
        SELECT PROD_TYPE,PROD_ID,ACT_NUM,ACCT_STATUS<!--,BALANCE--> FROM ALL_CUSTOMER_ACCTS  WHERE  CUST_ID = #CUST_ID#
        <!--AND ACCT_STATUS!='CLOSED'--> AND PROD_TYPE IN('OA','TD','SA','TL','AD')         
        UNION 
        SELECT 'SH' AS PROD_TYPE,SHARE_TYPE AS PROD_ID,SHARE_ACCT_NO AS ACT_NUM,ACCT_STATUS<!--,OUTSTANDING_AMOUNT AS BALANCE--> FROM SHARE_ACCT 
        WHERE CUST_ID=#CUST_ID# AND STATUS!='DELETED' AND AUTHORIZE='AUTHORIZED'
        <!--AND ACCT_STATUS!='CLOSED'--> ORDER BY ACT_NUM
        <!--UNION        
        SELECT LP.PROD_DESC PROD_TYPE, LM.PROD_ID AS PROD_ID,LM.LOCKER_NUM AS ACT_NUM
        FROM LOCKER_MASTER LM, LOCKER_CONFIG_DETAILS LCD,LOCKER_PRODUCT LP
        WHERE LM.CUST_ID=#CUST_ID# AND LCD.FROM_LOC_NO=LM.LOCKER_NUM AND LOCKER_STATUS_ID='NEW' AND 
        (AUTHORIZATION_STATUS IS NULL OR AUTHORIZATION_STATUS='AUTHORIZED')
        AND LM.STATUS!='DELETED' AND LOCKER_STATUS_ID!='CLOSED'  AND LM.BRANCH_CODE=LCD.BRANCH_ID AND
        LP.PROD_ID=LM.PROD_ID-->                                                                                           
    </mapped-statement>
    
    <mapped-statement name="getCustomerCustTypeForLocker" result-class="java.util.LinkedHashMap" >
        SELECT cust_type
        FROM customer c
        where C.CUST_ID = #WHERE:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getCustUserId" result-class="java.util.HashMap">
        SELECT CUST_USERID FROM CUSTOMER WHERE upper(CUST_USERID) = upper(#CUST_USERID:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name="updateAppResetPasswordCust" inline-parameters="true" result-class="java.util.HashMap">
        UPDATE CUSTOMER SET CUST_PWD = #APP_PASSWORD:VARCHAR#,MOBILE_APP_LOGIN_STATUS = 'Y' WHERE CUST_ID = #CUSTOMER ID:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name = "getCustomerGoldSecurityStock" result-class = "java.util.LinkedHashMap">
        SELECT CSD.GOLD_SECURITY_ID,
       CSD.CUST_ID,
       get_cust_name(cust.cust_id)
          AS "CUSTOMER",
       CUST.MEMBERSHIP_NO,
       CSD.PARTICULARS,
       CSD.GROSS_WEIGHT,
       CSD.NET_WEIGHT,
       CSD.PLEDGE_AMT
       FROM CUST_GOLD_SECURITY_DETAILS csd, CUSTOMER CUST
       WHERE CSD.IS_RELEASE IS NULL
       AND CSD.STATUS != 'DELETED'
       AND CSD.AUTHORIZE_STATUS = 'AUTHORIZED'
       AND CSD.CUST_ID = CUST.CUST_ID
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBERSHIP_NO">
                    UPPER(MEMBERSHIP_NO) LIKE UPPER('%$MEMBERSHIP_NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER">
                    UPPER(get_cust_name(CUST.CUST_ID)) LIKE UPPER('%$CUSTOMER$%')
                </isNotNull>
            </isParameterPresent>            
            <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(CUST.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="GOLD_SECURITY_ID">
                    UPPER(GCD.GOLD_SECURITY_ID) LIKE UPPER('%$GOLD_SECURITY_ID$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
    
    <mapped-statement name="getSelectMDSSuspenseAccountDetails" result-class="java.util.LinkedHashMap" > 
        SELECT MP.CHITTAL_NO AS act_num,
        'MDS' AS prod_type,
        MP.SCHEME_NAME AS prod_ID,
        GET_MDS_PAIDINST(MP.CHITTAL_NO,#CURR_DT:DATE#) AS BALANCE       
        FROM MDS_APPLICATION MP,CUSTOMER C,MDS_MASTER_MAINTENANCE MM
        WHERE C.CUST_ID = MP.CUST_ID
        AND C.MEMBERSHIP_NO = MP.MEMBER_NO
        AND MP.CHITTAL_NO = MM.CHITTAL_NO
        AND MP.SCHEME_NAME = MM.SCHEME_NAME
        AND MM.CHIT_CLOSE_DT IS NULL
        AND MP.AUTHORIZE_STATUS = 'AUTHORIZED'
        AND MP.STATUS != 'DELETED'
        AND C.CUST_ID = #CUST_ID:VARCHAR#
        UNION ALL
        SELECT SA.SUSPENSE_ACCT_NUM AS ACT_NUM,
        'SA' AS PROD_TYPE,
        SA.SUSPENSE_PROD_ID AS PROD_ID,
        SA.CLEAR_BALANCE AS BALANCE
        FROM SUSPENSE_ACCOUNT_MASTER sa
        WHERE SA.SUSPENSE_CUSTOMER_ID = #CUST_ID:VARCHAR# AND SA.CLOSED_DT IS NULL
    </mapped-statement>    
    

</sql-map>
