<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="RemittanceProductMap">

	<!-- Use RemittanceProductTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertRemittanceProductTO" inline-parameters="true">
        INSERT INTO REMITTANCE_PRODUCT
	(PROD_ID, PROD_DESC, ISSUE_HD, EXCHANGE_HD, TELEGRAM_CHRG_HD, REVAL_CHRG_HD, OTHER_CHRG_HD, LAPSED_HD, EFT_PRODUCT, CASH_LIMIT, MAX_AMOUNT, MIN_AMOUNT, PRINT_SERVICES, PAY_HD, POSTAGE_HD,
        DUPL_CHRG_HD, CANCELL_CHRG_HD, LAPSE_APPL, LAPSE_PERIOD, PAY_ISSUE_BRANCH, NUMBER_PATTERN, SERIES_MAINTAINED, REMARKS, STATUS, AUTHORIZE_STATUS, AUTHORIZE_USER, AUTHORIZE_DT, 
        BASE_CURRENCY, CREATED_BY, CREATED_DT, STATUS_BY, STATUS_DT, AUTHORIZE_REMARK, NUMBER_PATTERN_SUFFIX, BEHAVES_LIKE, NEW_PROCEDURE, NEW_PROC_START_DT, NEW_PROC_ISSUE_HD,NEFT_RTGS_SUSPENCE_HD,
        RTGS_NEFT_GL_TYPE, RTGS_NEFT_PROD_TYPE, RTGS_NEFT_PROD_ID, RTGS_NEFT_ACT_NUM 
        ) VALUES (
	#prodId:VARCHAR#, #prodDesc:VARCHAR#, #issueHd:VARCHAR#, #exchangeHd:VARCHAR#, #telegramChrgHd:VARCHAR#, #revalChrgHd:VARCHAR#, #otherChrgHd:VARCHAR#, #lapsedHd:VARCHAR#, 
        #eftProduct:VARCHAR#, #cashLimit:NUMERIC#, #maximumAmount:NUMERIC#, #minimumAmount:NUMERIC#, #printServices:VARCHAR#, #payHd:VARCHAR#, #postageHd:VARCHAR#, #duplChrgHd:VARCHAR#, #cancellChrgHd:VARCHAR#, #lapseAppl:VARCHAR#, #lapsePeriod:NUMERIC#,
        #payIssueBranch:VARCHAR#, #numberPattern:VARCHAR#, #seriesMaintained:VARCHAR#, #remarks:VARCHAR#, #status:VARCHAR#, #authorizeStatus:VARCHAR#, #authorizeUser:VARCHAR#, #authorizeDt:DATE#, #baseCurrency:VARCHAR#, 
        #createdBy:VARCHAR#, #createdDt:TIMESTAMP#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #authorizeRemark:VARCHAR#, #numberPatternSuffix:VARCHAR#, #behavesLike:VARCHAR#, #newProcedure:VARCHAR#, #newProcStartDt:VARCHAR#, #newProcIssueAcHd:VARCHAR#,#rtgsSuspenseAchd:VARCHAR#,
        #rtgsNeftGLType:VARCHAR#, #rtgsNeftProductType:VARCHAR#, #rtgsNeftProdId:VARCHAR#, #rtgsNeftActNum:VARCHAR# )
    </mapped-statement>

<!-- Use RemittanceProductTO object (JavaBean) properties as parameters for update. 
     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateRemittanceProductTO" inline-parameters="true">
        UPDATE REMITTANCE_PRODUCT SET 
        PROD_DESC = #prodDesc:VARCHAR#,
        ISSUE_HD = #issueHd:VARCHAR#,
        EXCHANGE_HD = #exchangeHd:VARCHAR#,
        TELEGRAM_CHRG_HD = #telegramChrgHd:VARCHAR#,
        REVAL_CHRG_HD = #revalChrgHd:VARCHAR#,
        OTHER_CHRG_HD = #otherChrgHd:VARCHAR#,
        LAPSED_HD = #lapsedHd:VARCHAR#,
        EFT_PRODUCT = #eftProduct:VARCHAR#,
        CASH_LIMIT = #cashLimit:NUMERIC#,
        MAX_AMOUNT = #maximumAmount:NUMERIC#,
        MIN_AMOUNT = #minimumAmount:NUMERIC#,
        PRINT_SERVICES = #printServices:VARCHAR#,
        PAY_HD = #payHd:VARCHAR#,
        POSTAGE_HD = #postageHd:VARCHAR#,
        DUPL_CHRG_HD = #duplChrgHd:VARCHAR#,
        CANCELL_CHRG_HD = #cancellChrgHd:VARCHAR#,
        LAPSE_APPL = #lapseAppl:VARCHAR#,
        LAPSE_PERIOD = #lapsePeriod:NUMERIC#,
        PAY_ISSUE_BRANCH = #payIssueBranch:VARCHAR#,
        NUMBER_PATTERN = #numberPattern:VARCHAR#,
        SERIES_MAINTAINED = #seriesMaintained:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        NUMBER_PATTERN_SUFFIX = #numberPatternSuffix:VARCHAR#,
        BEHAVES_LIKE = #behavesLike:VARCHAR#,
        BASE_CURRENCY = #baseCurrency:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        STATUS = #status:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        AUTHORIZE_USER = #authorizeUser:VARCHAR#, 
        AUTHORIZE_DT = #authorizeDt:TIMESTAMP#,
        NEW_PROCEDURE = #newProcedure:VARCHAR#,
        NEW_PROC_START_DT = #newProcStartDt:VARCHAR#,
        NEW_PROC_ISSUE_HD = #newProcIssueAcHd:VARCHAR#,
        NEFT_RTGS_SUSPENCE_HD = #rtgsSuspenseAchd:VARCHAR#,
        RTGS_NEFT_GL_TYPE = #rtgsNeftGLType:VARCHAR#,
        RTGS_NEFT_PROD_TYPE = #rtgsNeftProductType:VARCHAR#,
        RTGS_NEFT_PROD_ID = #rtgsNeftProdId:VARCHAR#,
        RTGS_NEFT_ACT_NUM = #rtgsNeftActNum:VARCHAR#
        WHERE PROD_ID = #prodId#
    </mapped-statement>

<!-- Use RemittanceProductTO object (JavaBean) properties as parameters for delete. 
     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteRemittanceProductTO" inline-parameters="true">
        UPDATE REMITTANCE_PRODUCT SET 
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        STATUS = #status:VARCHAR#
        WHERE  PROD_ID = #prodId:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
    </mapped-statement>

<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
     be auto-mapped results to RemittanceProductTO object (JavaBean) properties -->
    <result-map name="getRemittanceProductTOResult" class="com.see.truetransact.transferobject.product.remittance.RemittanceProductTO">
        <property name="prodId" column="PROD_ID"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="prodDesc" column="PROD_DESC"/>
        <property name="issueHd" column="ISSUE_HD"/>
        <property name="exchangeHd" column="EXCHANGE_HD"/>
        <property name="telegramChrgHd" column="TELEGRAM_CHRG_HD"/>
        <property name="revalChrgHd" column="REVAL_CHRG_HD"/>
        <property name="otherChrgHd" column="OTHER_CHRG_HD"/>
        <property name="lapsedHd" column="LAPSED_HD"/>
        <property name="eftProduct" column="EFT_PRODUCT"/>
        <property name="cashLimit" column="CASH_LIMIT"/>
        <property name="maximumAmount" column="MAX_AMOUNT"/>
        <property name="minimumAmount" column="MIN_AMOUNT"/>
        <property name="printServices" column="PRINT_SERVICES"/>
        <property name="payHd" column="PAY_HD"/>
        <property name="postageHd" column="POSTAGE_HD"/>
        <property name="duplChrgHd" column="DUPL_CHRG_HD"/>
        <property name="cancellChrgHd" column="CANCELL_CHRG_HD"/>
        <property name="lapseAppl" column="LAPSE_APPL"/>
        <property name="lapsePeriod" column="LAPSE_PERIOD"/>
        <property name="payIssueBranch" column="PAY_ISSUE_BRANCH"/>
        <property name="numberPattern" column="NUMBER_PATTERN"/>
        <property name="seriesMaintained" column="SERIES_MAINTAINED"/>
        <property name="remarks" column="REMARKS"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeUser" column="AUTHORIZE_USER"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="baseCurrency" column="BASE_CURRENCY"/>
        <property name="createdBy" column="CREATED_BY"/>
        <property name="createdDt" column="CREATED_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizeRemark" column="AUTHORIZE_REMARK"/>
        <property name="numberPatternSuffix" column="NUMBER_PATTERN_SUFFIX"/>
        <property name="behavesLike" column="BEHAVES_LIKE"/>
        <property name="newProcedure" column="NEW_PROCEDURE"/>
        <property name="newProcStartDt" column="NEW_PROC_START_DT"/>
        <property name="newProcIssueAcHd" column="NEW_PROC_ISSUE_HD"/>
        <property name="rtgsSuspenseAchd" column="NEFT_RTGS_SUSPENCE_HD"/>
        <property name="rtgsNeftGLType" column="RTGS_NEFT_GL_TYPE"/>
        <property name="rtgsNeftProductType" column="RTGS_NEFT_PROD_TYPE"/>
        <property name="rtgsNeftProdId" column="RTGS_NEFT_PROD_ID"/>
        <property name="rtgsNeftActNum" column="RTGS_NEFT_ACT_NUM"/>
    </result-map>

    <mapped-statement name="getSelectRemittanceProductTO" result-map="getRemittanceProductTOResult" >
        SELECT * FROM REMITTANCE_PRODUCT 
        WHERE PROD_ID = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
    </mapped-statement>
        
    <dynamic-mapped-statement name="getSelectRemittanceProductTOList" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID AS "Product ID", PROD_DESC AS "Product Description"
        FROM REMITTANCE_PRODUCT
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
         <dynamic>
         <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="Product ID">
                    UPPER(PROD_ID) LIKE UPPER('%$Product ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="Product Description">
                    UPPER(PROD_DESC) LIKE UPPER('%$Product Description$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="getProductUnique" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT
        (SELECT COUNT(PROD_ID) FROM REMITTANCE_PRODUCT  WHERE UPPER(PROD_ID) = UPPER(#PROD_ID:VARCHAR#) AND STATUS NOT IN ('DELETED') ) AS "PROD_ID",
        (SELECT COUNT(PROD_DESC) FROM  REMITTANCE_PRODUCT WHERE UPPER(PROD_DESC) = UPPER(#PROD_DESC:VARCHAR#) AND STATUS NOT IN ('DELETED') )AS "PROD_DESC"
        FROM  REMITTANCE_PRODUCT 
       
<!--    SELECT COUNT(PROD_ID)AS "PROD_ID"
        FROM REMITTANCE_PRODUCT
        WHERE UPPER(PROD_ID) = UPPER(#PROD_ID#) AND STATUS NOT IN ('DELETED') -->
    </mapped-statement>
        
<!-- =================================================================================== -->        
<!--     Authorization Queries -->
    <dynamic-mapped-statement name="getRemittanceProductAuthorizeList" result-class="java.util.LinkedHashMap">
        SELECT PROD_ID as "Product ID", PROD_DESC as "Product Description", ISSUE_HD as "Issue Head" 
        FROM REMITTANCE_PRODUCT RP
        WHERE STATUS != 'DELETED'
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = RP.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                RP.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (RP.AUTHORIZE_STATUS IS NULL OR 
                RP.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
    </dynamic-mapped-statement>

    <mapped-statement name="authorizeRemittanceProduct" result-class="java.util.HashMap">
        UPDATE REMITTANCE_PRODUCT SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_USER = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE PROD_ID = #PRODUCT ID:VARCHAR# 
                <!--AND STATUS_BY != #USER_ID:VARCHAR#-->
    </mapped-statement>
<!-- =================================================================================== -->   

</sql-map>