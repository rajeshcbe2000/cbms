<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="RemittanceProductBranchMap">

    <!-- Use RemittanceProductBranchTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertRemittanceProductBranchTO" inline-parameters="true">
        INSERT INTO REMITTANCE_PROD_BRANCH
        (PROD_ID, BRANCH_CODE, BRANCH_NAME, REMITTANCE_TYPE, REMITTANCE_LIMIT, INWARD_VARIABLE_NO, OUTWARD_VARIABLE_NO, MIN_AMT, MAX_AMT, STATUS, BANK_CODE
        ) VALUES (
        #prodId:VARCHAR#, #branchCode:VARCHAR#, #branchName:VARCHAR#, #remittanceType:VARCHAR#, #remittanceLimit:NUMERIC#, #inwardVariableNo:VARCHAR#, #outwardVariableNo:VARCHAR#, #minAmt:NUMERIC#, #maxAmt:NUMERIC#, #status:VARCHAR#, #bankCode:VARCHAR#)
    </mapped-statement>

    <!-- Use RemittanceProductBranchTO object (JavaBean) properties as parameters for update. 
         Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateRemittanceProductBranchTO" inline-parameters="true">
        UPDATE REMITTANCE_PROD_BRANCH SET 
<!--	PROD_ID = #prodId:VARCHAR#, -->
        BRANCH_CODE = #branchCode:VARCHAR#,
        BRANCH_NAME = #branchName:VARCHAR#,  
        INWARD_VARIABLE_NO = #inwardVariableNo:VARCHAR#,
        OUTWARD_VARIABLE_NO = #outwardVariableNo:VARCHAR#,
        REMITTANCE_TYPE = #remittanceType:VARCHAR#,
        REMITTANCE_LIMIT = #remittanceLimit:NUMERIC#,
        MIN_AMT = #minAmt:NUMERIC#,
        MAX_AMT = #maxAmt:NUMERIC#,
        BANK_CODE = #bankCode:VARCHAR#,
        STATUS = #status:VARCHAR#
        WHERE PROD_ID = #prodId#  AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED') AND ( BRANCH_CODE = #branchCode# OR BRANCH_CODE IS NULL )
    </mapped-statement>

    <!-- Use RemittanceProductBranchTO object (JavaBean) properties as parameters for delete. 
         Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteRemittanceProductBranchTO" inline-parameters="true">
        UPDATE REMITTANCE_PROD_BRANCH SET 
        STATUS = #status:VARCHAR#
        WHERE PROD_ID = #prodId:VARCHAR#  AND ( BRANCH_CODE = #branchCode# OR BRANCH_CODE IS NULL )
    </mapped-statement>

    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
         be auto-mapped results to RemittanceProductBranchTO object (JavaBean) properties -->
    <result-map name="getRemittanceProductBranchTOResult" class="com.see.truetransact.transferobject.product.remittance.RemittanceProductBranchTO">
        <property name="prodId" column="PROD_ID"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="branchName" column="BRANCH_NAME"/>
        <property name="remittanceType" column="REMITTANCE_TYPE"/>
        <property name="remittanceLimit" column="REMITTANCE_LIMIT"/>
        <property name="inwardVariableNo" column="INWARD_VARIABLE_NO"/>
        <property name="outwardVariableNo" column="OUTWARD_VARIABLE_NO"/>
        <property name="minAmt" column="MIN_AMT"/>
        <property name="maxAmt" column="MAX_AMT"/>
        <property name="status" column="STATUS"/>
        <property name="bankCode" column="BANK_CODE"/>
    </result-map>
    <mapped-statement name="getSelectRemittanceProductBranchTO" result-map="getRemittanceProductBranchTOResult" >
        select * from REMITTANCE_PROD_BRANCH
    </mapped-statement>
        
    <mapped-statement name="ViewRemittance_Product_Branch" result-class="java.util.LinkedHashMap" >
       <!-- SELECT BANK_CODE, BRANCH_CODE, BRANCH_NAME, REMITTANCE_TYPE, REMITTANCE_LIMIT, INWARD_VARIABLE_NO, OUTWARD_VARIABLE_NO, MIN_AMT, MAX_AMT,(
        SELECT BANK_CODE||' ( '||BANK_NAME||' ) ' AS "BANK_NAME" FROM BANK WHERE  BANK_CODE = RM.BANK_CODE UNION
        SELECT BANK_CODE||' ( '||BANK_NAME||' ) ' AS "BANK_NAME" FROM OTHER_BANK WHERE  BANK_CODE = RM.BANK_CODE
        ) BANK_NAME
        FROM REMITTANCE_PROD_BRANCH RM 
        WHERE PROD_ID = #value# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')-->
        SELECT BANK_CODE, BRANCH_CODE, BRANCH_NAME, REMITTANCE_TYPE, REMITTANCE_LIMIT, INWARD_VARIABLE_NO, OUTWARD_VARIABLE_NO, MIN_AMT, MAX_AMT
        FROM REMITTANCE_PROD_BRANCH RM WHERE PROD_ID = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
    </mapped-statement> 
    
    <mapped-statement name="Remittance_Product_Branch.getBankCode" result-class="java.util.LinkedHashMap" >
        (SELECT BANK_CODE AS "Bank Code",BANK_CODE||' ( '||BANK_NAME||' ) ' AS "Bank Name"
        FROM BANK)
        UNION
        (SELECT BANK_CODE AS "BANK_CODE",BANK_CODE||' ( '||BANK_NAME||' ) ' AS "BANK_CODE_WITH_NAME"
        FROM OTHER_BANK 
        WHERE OTHER_BANK.STATUS !='DELETED' OR OTHER_BANK.STATUS IS NULL)
    </mapped-statement> 
    
    <mapped-statement name="Remittance_Product_Branch.getBranch" result-class="java.util.LinkedHashMap" >
        SELECT 'Our Bank' AS "Bank Code", BRANCH_NAME AS "Branch Name", 
        BRANCH_CODE  AS "Branch Code" FROM BRANCH_MASTER
        WHERE STATUS NOT IN ('DELETED') AND AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        AND AUTHORIZE_STATUS_2 = 'AUTHORIZED'
        UNION 
        SELECT OB.BANK_CODE AS "Bank Code", OBB.BRANCH_NAME AS "Branch Name", 
        OBB.BRANCH_CODE  AS "Branch Code"
        FROM OTHER_BANK_BRANCH OBB, OTHER_BANK OB
        WHERE OBB.BANK_CODE = OB.BANK_CODE AND 
        OB.AUTHORIZE_STATUS = 'AUTHORIZED' AND 
        OB.STATUS NOT IN ('DELETED') AND 
        OBB.STATUS NOT IN ('DELETED') AND OBB.BANK_CODE = #BANK_CODE:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name="deleteremittissue" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, DRAWEE_BRANCH_CODE 
        FROM REMIT_ISSUE
        WHERE  (STATUS = 'MODIFIED' OR STATUS = 'UPDATE' OR STATUS = 'CREATED') AND  PROD_ID = #PROD_ID:VARCHAR# AND (DRAWEE_BRANCH_CODE IS NULL
        <dynamic prepend = "OR DRAWEE_BRANCH_CODE IN" >
            <iterate property="DRAWEE_BRANCH_CODE" open = "(" close=")" conjunction="," >
                #DRAWEE_BRANCH_CODE[]#
            </iterate>
        </dynamic>
        )
    </dynamic-mapped-statement>
    
    
    <mapped-statement name="RemittanceProd.getCurrentBankBranch" result-class="java.util.LinkedHashMap" >
        SELECT BRANCH_CODE AS "Branch Code", BRANCH_NAME AS "Branch Name", CITY 
        FROM BRANCH_MASTER
        WHERE STATUS != 'DELETED'
        AND AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        <!--AND AUTHORIZE_STATUS_2 = 'AUTHORIZED'-->
    </mapped-statement>
    
    <mapped-statement name="RemittanceProd.getOtherBankData" result-class="java.util.LinkedHashMap" >
        SELECT BANK_CODE AS "Bank Code", BANK_CODE||' ( '||BANK_NAME||' ) ' AS "BANK_CODE_WITH_NAME",
        BANK_SHORT_NAME AS "BANK SHORT NAME" FROM OTHER_BANK 
        WHERE STATUS !='DELETED'
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
         
    </mapped-statement>
    
    <mapped-statement name="RemittanceProd.getOtherBankBranch" result-class="java.util.LinkedHashMap" >
        SELECT BRANCH_NAME AS "Branch Name", BRANCH_CODE  AS "Branch Code", BRANCH_SHORT_NAME AS "BRANCH_SHORT_NAME"
        FROM OTHER_BANK_BRANCH
        WHERE BANK_CODE = #BANK_CODE:VARCHAR#
        AND STATUS != 'DELETED' 
    </mapped-statement>
    
    <mapped-statement name="RemittanceProd.getDesgOtherBankBranch" result-class="java.util.LinkedHashMap" >
        SELECT BRANCH_NAME AS "Branch Name", BRANCH_CODE  AS "Branch Code", BRANCH_SHORT_NAME AS "BRANCH_SHORT_NAME"
        FROM OTHER_BANK_BRANCH
        WHERE BANK_CODE = #BANK_CODE:VARCHAR#
        AND STATUS != 'DELETED' AND BANK_TYPE = 'Y'
    </mapped-statement>
    
    <mapped-statement name="insertRTGSBankBranchDetailsTo" inline-parameters="true">
        INSERT INTO IFSC_BANK_BRANCH
        (BANK_CODE, IFSC_CODE, MICR_CODE, BRANCH_NAME, ADDRESS, CONTACT, CITY, DISTRICT, STATE, STATUS, STATUS_DT, 
        STATUS_BY
        ) VALUES (
        #txtBankCode:VARCHAR#, #txtIFSCCode:VARCHAR#, #txtMICRCode:VARCHAR#, #txtBranchName:VARCHAR#, #txtAreaAddress:VARCHAR#, 
        #txtContactNo:VARCHAR#, #txtCity:VARCHAR#, #txtDistrict:VARCHAR#, #txtState:VARCHAR#, #status:VARCHAR#, 
        (SELECT SYS_DATE() FROM DUAL), #statusBy:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name="getRTGSBankBranchEdit" result-class="java.util.LinkedHashMap">
        SELECT LOOKUP_REF_ID AS BANK_CODE,LOOKUP_DESC AS BANK_NAME,STATUS FROM LOOKUP_MASTER WHERE LOOKUP_ID='RTGS.IFSC_BANK_NAME' AND STATUS!='DELETED' 
        AND LOOKUP_REF_ID IN(SELECT DISTINCT TO_CHAR(BANK_CODE) FROM IFSC_BANK_BRANCH) ORDER BY LOOKUP_REF_ID
    </mapped-statement>
    
    <mapped-statement name="getLookUpOtherBankName" result-class="java.util.LinkedHashMap">
        SELECT LOOKUP_REF_ID AS BANK_CODE,LOOKUP_DESC AS BANK_NAME,STATUS FROM LOOKUP_MASTER WHERE LOOKUP_ID='RTGS.IFSC_BANK_NAME' AND STATUS!='DELETED' 
        AND LOOKUP_REF_ID NOT IN(SELECT DISTINCT TO_CHAR(BANK_CODE) FROM 
        IFSC_BANK_BRANCH WHERE STATUS!='DELETED' AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS='AUTHORIZED'))ORDER BY LOOKUP_REF_ID
    </mapped-statement>
    
    <mapped-statement name="getRTGSBankBranchDelete" result-class="java.util.LinkedHashMap">
        SELECT LOOKUP_REF_ID AS BANK_CODE,LOOKUP_DESC AS BANK_NAME,STATUS FROM LOOKUP_MASTER WHERE LOOKUP_ID='RTGS.IFSC_BANK_NAME' AND STATUS!='DELETED' 
        AND LOOKUP_REF_ID NOT IN(SELECT DISTINCT TO_CHAR(BANK_CODE) FROM IFSC_BANK_BRANCH WHERE STATUS!='DELETED' AND AUTHORIZED_STATUS='AUTHORIZED') ORDER BY LOOKUP_REF_ID
    </mapped-statement>
    
    <mapped-statement name="getSelectRTGSBankBranchTO" result-map="getRTGSBankBranchTOResult" >
        SELECT * FROM IFSC_BANK_BRANCH WHERE BANK_CODE=CAST(#OTHER_BANK_CODE# AS NUMERIC) AND STATUS!='DELETED' AND 
        (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS='AUTHORIZED') ORDER BY BRANCH_NAME
    </mapped-statement>
    
    <mapped-statement name="getSelectRTGSBankBranchAuthTO" result-map="getRTGSBankBranchTOResult" >
        SELECT * FROM IFSC_BANK_BRANCH WHERE BANK_CODE=cast(#OTHER_BANK_CODE# as numeric) AND STATUS!='DELETED' AND 
        (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS='AUTHORIZED') ORDER BY AUTHORIZED_STATUS, BRANCH_NAME
    </mapped-statement>
    
    <result-map name="getRTGSBankBranchTOResult" class="com.see.truetransact.transferobject.product.remittance.RTGSOtherBankBranchTo">
        <property name="txtBankCode" column="BANK_CODE"/>
        <property name="txtIFSCCode" column="IFSC_CODE"/>
        <property name="txtMICRCode" column="MICR_CODE"/>
        <property name="txtBranchName" column="BRANCH_NAME"/>
        <property name="txtAreaAddress" column="ADDRESS"/>
        <property name="txtContactNo" column="CONTACT"/>
        <property name="txtCity" column="CITY"/>
        <property name="txtDistrict" column="DISTRICT"/>
        <property name="txtState" column="STATE"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
    </result-map>
    
    <mapped-statement name="updateRTGSBankBranchDetailsTo" inline-parameters="true">
        UPDATE IFSC_BANK_BRANCH SET 
        MICR_CODE = #txtMICRCode:VARCHAR#,
        BRANCH_NAME = #txtBranchName:VARCHAR#,
        ADDRESS = #txtAreaAddress:VARCHAR#,
        CONTACT = #txtContactNo:VARCHAR#,
        CITY = #txtCity:VARCHAR#,
        DISTRICT = #txtDistrict:VARCHAR#,
        STATE = #txtState:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_DT = (SELECT SYS_DATE() FROM DUAL),
        STATUS_BY = #statusBy:VARCHAR#
        WHERE BANK_CODE = #txtBankCode:VARCHAR# AND IFSC_CODE = #txtIFSCCode:VARCHAR# AND STATUS != 'DELETED' AND AUTHORIZED_STATUS IS NULL
    </mapped-statement>
    
    <mapped-statement name="deleteRTGSBankBranchDetailsTo" inline-parameters="true">
        UPDATE IFSC_BANK_BRANCH SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = (SELECT SYS_DATE() FROM DUAL)
        WHERE BANK_CODE = #txtBankCode:VARCHAR# AND IFSC_CODE = #txtIFSCCode:VARCHAR# AND STATUS != 'DELETED' AND AUTHORIZED_STATUS IS NULL
    </mapped-statement>
    
    <mapped-statement name="deleteRTGSOtherBankBranchTo" result-class="java.util.HashMap">
        UPDATE IFSC_BANK_BRANCH SET 
        STATUS = #STATUS:VARCHAR#, 
        STATUS_BY = #USER_ID:VARCHAR#, 
        STATUS_DT = (SELECT SYS_DATE() FROM DUAL)
        WHERE STATUS != 'DELETED' AND BANK_CODE = #OTHER_BANK_CODE#
    </mapped-statement>
        
    <mapped-statement name="deleteLookUpMasterOtherBankBranch" result-class="java.util.HashMap">
        UPDATE LOOKUP_MASTER SET 
        STATUS = #STATUS:VARCHAR#
        WHERE STATUS != 'DELETED' AND LOOKUP_REF_ID = #OTHER_BANK_CODE# AND LOOKUP_ID='RTGS.IFSC_BANK_NAME'
    </mapped-statement>
    
    <mapped-statement name="getRTGSOtherBankBranchAuthorize" result-class="java.util.LinkedHashMap">
        SELECT LOOKUP_REF_ID AS BANK_CODE,LOOKUP_DESC AS BANK_NAME,STATUS FROM LOOKUP_MASTER WHERE LOOKUP_ID='RTGS.IFSC_BANK_NAME' 
        AND STATUS!='DELETED' AND LOOKUP_REF_ID IN(SELECT DISTINCT TO_CHAR(BANK_CODE) FROM IFSC_BANK_BRANCH 
        WHERE STATUS!='DELETED' AND STATUS_BY!=#USER_ID# AND AUTHORIZED_STATUS IS NULL) ORDER BY LOOKUP_REF_ID
    </mapped-statement>
    
    <mapped-statement name="authorizeRTGSBankBranchDetails" result-class="java.util.HashMap">
        UPDATE IFSC_BANK_BRANCH SET 
        AUTHORIZED_STATUS = #STATUS#,
        AUTHORIZED_BY = #AUTHORIZED_BY#,
        AUTHORIZED_DT = (SELECT SYS_DATE() FROM DUAL)
        WHERE STATUS != 'DELETED' AND BANK_CODE = cast(#OTHER_BANK_CODE# as numeric) AND AUTHORIZED_STATUS IS NULL
    </mapped-statement>
    
    <mapped-statement name="getRTGSOtherBankName" result-class="java.util.LinkedHashMap">
        SELECT LOOKUP_REF_ID AS BANK_CODE,LOOKUP_DESC AS BANK_NAME,STATUS FROM LOOKUP_MASTER WHERE LOOKUP_ID='RTGS.IFSC_BANK_NAME' 
        AND STATUS!='DELETED' AND LOOKUP_REF_ID =#OTHER_BANK_CODE#
    </mapped-statement>
    
</sql-map>