<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="AccountswithOtherBankProductMap">
    <mapped-statement name="OtherBankAccountsProductTO" inline-parameters="true">
        INSERT INTO  OTHER_BANK_ACCOUNT_PRODUCTS
        (ACCOUNT_TYPE,PROD_ID,PROD_DESC,PRINCIPAL_AC_HD,INTEREST_RECEIVED_AC_HD,INTEREST_PAID_AC_HD,
        INTEREST_RECEIVABLE_AC_HD,CHARGE_PAID_AC_HD,PENAL_AC_HD,
        STATUS ,STATUS_BY,STATUS_DT,AUTHORIZE_STATUS,AUTHORIZE_BY, AUTHORIZE_DT)
        VALUES(#cboOtherbankacntsBehaves:VARCHAR#,#txtProductID:VARCHAR#,#txtDesc:VARCHAR#,#txtInvestmentAcHead:VARCHAR#,#txtIntReceivedAcHead:VARCHAR#, 
        #txtIntPaidAcHead:VARCHAR#,#txtInterestReceivableAcHead:VARCHAR#,#txtChargeAcHead:VARCHAR#,#txtPenalAcHead:VARCHAR#,
        #status:VARCHAR#,#statusBy:VARCHAR#,
        #statusDt:DATE#,#authorizeStatus:VARCHAR#, #authorizeBy:VARCHAR#, #authorizeDt:DATE#)
    </mapped-statement>
    <mapped-statement name="updateOtherBankAccountsProductTO" inline-parameters="true">
        UPDATE OTHER_BANK_ACCOUNT_PRODUCTS SET
        ACCOUNT_TYPE=#cboOtherbankacntsBehaves:VARCHAR#,
        PROD_ID=#txtProductID:VARCHAR#,
        PROD_DESC=#txtDesc:VARCHAR#,
        PRINCIPAL_AC_HD=#txtInvestmentAcHead:VARCHAR#,
        INTEREST_RECEIVED_AC_HD=#txtIntReceivedAcHead:VARCHAR#,
        INTEREST_PAID_AC_HD=#txtIntPaidAcHead:VARCHAR#,
        INTEREST_RECEIVABLE_AC_HD = #txtInterestReceivableAcHead:VARCHAR#,
        CHARGE_PAID_AC_HD = #txtChargeAcHead:VARCHAR#,
        PENAL_AC_HD=#txtPenalAcHead:VARCHAR#,
        STATUS=#status:VARCHAR#,
        STATUS_BY=#statusBy:VARCHAR#,
        STATUS_DT=#statusDt:DATE#,
        AUTHORIZE_STATUS=#authorizeStatus:VARCHAR#,
        AUTHORIZE_BY=#authorizeBy:VARCHAR#,
        AUTHORIZE_DT=#authorizeDt:DATE#
        WHERE  PROD_ID=#txtProductID:VARCHAR# AND status!='DELETED'
        AND (AUTHORIZE_STATUS!='REJECTED'  OR AUTHORIZE_STATUS IS NULL)
    </mapped-statement>
        
    <result-map name="getOtherBankAccountsProductTOResult" class="com.see.truetransact.transferobject.product.accountswithotherbank.AccountswithOtherBankProductTO">
        <property name="cboOtherbankacntsBehaves" column="ACCOUNT_TYPE"/>
        <property name="txtProductID" column="PROD_ID"/>
        <property name="txtDesc" column="PROD_DESC"/>
        <property name="txtInvestmentAcHead" column="PRINCIPAL_AC_HD"/>
        <property name="txtIntReceivedAcHead" column="INTEREST_RECEIVED_AC_HD"/>
        <property name="txtInterestReceivableAcHead" column="INTEREST_RECEIVABLE_AC_HD"/>
        <property name="txtIntPaidAcHead" column="INTEREST_PAID_AC_HD"/>
        <property name="txtChargeAcHead" column="CHARGE_PAID_AC_HD"/>
        <property name="txtPenalAcHead" column="PENAL_AC_HD"/>           
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
                
                
    </result-map>
	
    <dynamic-mapped-statement name="getSelectOtherBankAccountsProduct" result-class="java.util.LinkedHashMap" >
        SELECT  ACCOUNT_TYPE,PROD_ID,PROD_DESC,STATUS from OTHER_BANK_ACCOUNT_PRODUCTS
        WHERE  STATUS NOT IN ('DELETED')  AND (AUTHORIZE_STATUS!='REJECTED' OR AUTHORIZE_STATUS IS  NULL)
        <dynamic>  
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="ACCOUNT_TYPE">
                    UPPER(ACCOUNT_TYPE) LIKE UPPER('%$ACCOUNT_TYPE$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "ACCOUNT_TYPE" >
                    ACCOUNT_TYPE=#ACCOUNT_TYPE:VARCHAR#
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
    <dynamic-mapped-statement name="getSelectOtherBankAccountHead" result-class="java.util.LinkedHashMap" >
        select * from OTHER_BANK_ACCOUNT_PRODUCTS WHERE AUTHORIZE_STATUS='AUTHORIZED' AND STATUS!='DELETED'
        <dynamic>    
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "PROD_ID" >
                    PROD_ID=#PROD_ID:VARCHAR#
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
        
        
    <mapped-statement name="getSelectOtherBankAccountsProductTO" result-map="getOtherBankAccountsProductTOResult" >
        SELECT * FROM OTHER_BANK_ACCOUNT_PRODUCTS
        WHERE  PROD_ID=#value:VARCHAR#
    </mapped-statement>
    <mapped-statement name="deleteOtherBankAccountsProductTO" inline-parameters="true">
        UPDATE OTHER_BANK_ACCOUNT_PRODUCTS SET 
        STATUS = #status:VARCHAR#, 
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE PROD_ID = #txtProductID:VARCHAR#  AND STATUS NOT IN ('DELETED')
    </mapped-statement>
    <dynamic-mapped-statement name="getOtherBankAccountsProductAuthorizeList" result-class="java.util.LinkedHashMap">
        SELECT ACCOUNT_TYPE ,PROD_ID, PROD_DESC,STATUS_BY FROM OTHER_BANK_ACCOUNT_PRODUCTS SCD
        WHERE  (STATUS != 'DELETED' OR STATUS IS NULL)
        AND STATUS_BY != #USER_ID:VARCHAR# 
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = SCD.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AUTHORIZE_STATUS IS NULL OR 
                AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        ORDER BY PROD_ID
    </dynamic-mapped-statement>
    <mapped-statement name="authorizeOtherBankAccountsProduct" result-class="java.util.HashMap">
        UPDATE OTHER_BANK_ACCOUNT_PRODUCTS  SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE PROD_ID = #PROD_ID:VARCHAR#  AND (STATUS != 'DELETED' OR (STATUS IN('CREATED', 'MODIFIED')))
    </mapped-statement>



</sql-map>