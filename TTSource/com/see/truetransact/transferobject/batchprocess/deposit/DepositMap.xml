<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="Deposit">
    <mapped-statement name="getRenewableDeposits" result-map="AccInfoTOMap.getAccInfoTOResult">
        SELECT DA.* FROM DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA  WHERE 
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND TO_DATE(DSA.MATURITY_DT)  
        BETWEEN TO_DATE(#TODAY_DT:DATE#) AND TO_DATE(#HOLIDAY_MATURITY_DT:DATE#)
        AND PROD_ID IN (SELECT PROD_ID FROM DEPOSITS_PROD_RENEWAL WHERE
        AUTO_RENEWAL_ALLOWED = 'Y' AND MAX_NO_AUTO_RENEWAL &gt; NVL (DA.RENEWAL_COUNT,0))  
        AND DA.AUTO_RENEWAL = 'Y' AND DA.STATUS NOT IN ('DELETED') 
        AND DSA.STATUS NOT IN ('DELETED')AND DSA.AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND DA.AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND (DA.DEPOSIT_STATUS != 'CLOSED' OR DA.DEPOSIT_STATUS IS NULL) 
        AND (DSA.ACCT_STATUS != 'CLOSED' OR DSA.ACCT_STATUS IS NULL) 
        AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getAutoRenewableDeposits" result-class="java.util.HashMap">
        SELECT DA.*,DSA.* FROM DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA  WHERE 
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND TO_DATE(DSA.MATURITY_DT) + nvl(get_depositRenewal_graceperiod(da.prod_id),0) &lt;= #TODAY_DT:TIMESTAMP#
        <!--BETWEEN TO_DATE(#HOLIDAY_MATURITY_DT:DATE#) AND TO_DATE(#TODAY_DT:DATE#)-->
        AND PROD_ID IN (SELECT PROD_ID FROM DEPOSITS_PROD_RENEWAL WHERE
        AUTO_RENEWAL_ALLOWED = 'Y' AND MAX_NO_AUTO_RENEWAL &gt;= NVL (DA.RENEWAL_COUNT,0))  
        AND DA.AUTO_RENEWAL = 'Y' AND DA.STATUS NOT IN ('DELETED') 
        AND DSA.STATUS NOT IN ('DELETED','LIEN')AND DSA.AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND DA.AUTHORIZE_STATUS = 'AUTHORIZED'
        AND (DA.DEPOSIT_STATUS != 'CLOSED' OR DA.DEPOSIT_STATUS IS NULL) 
        AND (DSA.ACCT_STATUS != 'CLOSED' OR DSA.ACCT_STATUS IS NULL) 
        AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND DSA.TOT_INT_AMT >= nvl(DSA.TOTAL_INT_DRAWN,0)
        AND nvl(DSA.CLEAR_BALANCE,0) > 0
        ORDER BY DA.DEPOSIT_NO
    </mapped-statement>
    
    <mapped-statement name="getMaturedDepositProducts" result-class="java.util.LinkedHashMap">
        SELECT DP.PROD_ID, DP.ACCT_HEAD, DPA.MATURITY_DEPOSIT, DP.BEHAVES_LIKE
        FROM DEPOSITS_PRODUCT DP, DEPOSITS_PROD_ACHD DPA
        WHERE DP.PROD_ID = DPA.PROD_ID AND MATURITY_DEPOSIT IS NOT NULL
        ORDER BY PROD_ID
    </mapped-statement>
    
    <dynamic-mapped-statement name="getMaturedDepositAccounts" result-class="java.util.LinkedHashMap">
        SELECT SUM(DSA.DEPOSIT_AMT) AS DEPOSIT_AMT, SUM(DSA.MATURITY_AMT) AS MATURITY_AMT, 
        DA.BRANCH_ID FROM DEPOSIT_ACINFO DA , 
        DEPOSIT_SUB_ACINFO DSA WHERE PROD_ID = #PROD_ID:VARCHAR# AND
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND
        TO_DATE(MATURITY_DT) = TO_DATE(#TODAY_DT:DATE#)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="BRANCH_CODE">
                    AC.BRANCH_CODE = #BRANCH_CODE:VARCHAR# 
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <!--GROUP BY DA.BRANCH_ID-->
    </dynamic-mapped-statement>
    <!--    
    <mapped-statement name="updateMaturedDepositAccounts" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET ACCT_STATUS = 'MATURED',
        SUBSTATUS_BY = #USER_ID#, SUBSTATUS_DT = #TODAY_DT# 
        WHERE PROD_ID = #PROD_ID# AND
        TO_DATE(MATURITY_DT) = TO_DATE(#TODAY_DT#) AND
        DEPOSIT_NO IN (SELECT DEPOSIT_NO FROM DEPOSIT_ACINFO WHERE
        BRANCH_ID = #BRANCH_ID#)
    </mapped-statement>   -->  

    <mapped-statement name="updateMaturedDepositAccounts" inline-parameters="true">
        <!--        UPDATE DEPOSIT_ACINFO SET DEPOSIT_STATUS = 'MATURED'
        WHERE PROD_ID = #PROD_ID# AND
        DEPOSIT_NO IN (SELECT DEPOSIT_NO FROM DEPOSIT_SUB_ACINFO WHERE
        BRANCH_ID = #BRANCH_ID# AND 
        TO_DATE(MATURITY_DT) = TO_DATE(#TODAY_DT#)) -->

        UPDATE DEPOSIT_ACINFO DA SET DEPOSIT_STATUS = 'MATURED'
        WHERE PROD_ID = #PROD_ID:VARCHAR# AND BRANCH_ID = #BRANCH_ID:VARCHAR# AND
        EXISTS (SELECT DEPOSIT_NO FROM DEPOSIT_SUB_ACINFO DSA WHERE
        TO_DATE(MATURITY_DT) = TO_DATE(#TODAY_DT:DATE#) AND 
        DSA.DEPOSIT_NO = DA.DEPOSIT_NO)
    </mapped-statement>     
        
    <mapped-statement name="updateMaturedDepositSubAccounts" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET ACCT_STATUS = 'MATURED',
        SUBSTATUS_BY = #USER_ID:VARCHAR#, SUBSTATUS_DT = #TODAY_DT:DATE# 
        WHERE TO_DATE(MATURITY_DT) = TO_DATE(#TODAY_DT:DATE#) AND
        DEPOSIT_NO IN (SELECT DEPOSIT_NO FROM DEPOSIT_ACINFO WHERE
        BRANCH_ID = #BRANCH_ID:VARCHAR# AND
        PROD_ID = #PROD_ID:VARCHAR# )
    </mapped-statement>     
    
    <mapped-statement name="updateDepositSubAccounts" result-class="java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET STATUS ='CREATED',AVAILABLE_BALANCE=TOTAL_BALANCE WHERE  DEPOSIT_NO=#DEPOSIT_ACT_NUM:VARCHAR#
    </mapped-statement> 
    
    <dynamic-mapped-statement name="getLTDMaturedDepositAccounts" result-class="java.util.LinkedHashMap">
        SELECT DSA.DEPOSIT_NO, ACCT_NUM AS LOAN_NO, get_cust_name(C.CUST_ID) AS "CUSTOMER NAME"
        FROM LOANS_FACILITY_DETAILS LFD, LOANS_BORROWER LB, CUSTOMER C, DEPOSIT_LIEN DL, DEPOSIT_SUB_ACINFO DSA WHERE 
        LFD.BORROW_NO=LB.BORROW_NO AND
        LB.CUST_ID=C.CUST_ID AND
        LFD.ACCT_NUM=DL.LIEN_AC_NO AND
        LFD.ACCT_STATUS!='CLOSED' AND
        LFD.AUTHORIZE_STATUS_1 IS NOT NULL AND 
        LFD.AUTHORIZE_STATUS_1='AUTHORIZED' AND
        LFD.STATUS!='DELETED' AND
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="" property="BRANCH_CODE">
                    LFD.BRANCH_ID = #BRANCH_CODE:VARCHAR# AND
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        DSA.DEPOSIT_NO=DL.DEPOSIT_NO AND
        DSA.MATURITY_DT=#TODAY_DT:DATE#
    </dynamic-mapped-statement>
    
    <!-- Added by nithya on 25.02.2016 for 3695 -->
    <dynamic-mapped-statement name="getSelectCustDepositDetails" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT cust.cust_id AS "Customer ID",sa.share_acct_no AS "Member No", 
        DECODE (cust.cust_type,
        'INDIVIDUAL', get_cust_name(cust.cust_id)) AS "Customer",
        street AS "House Name",
        dsa.deposit_no AS "Deposit No",
        dsa.deposit_dt AS "Deposit Dt",
        dsa.deposit_amt AS "Deposit Amt",
        dsa.maturity_dt AS "Maturity Dt",
        dsa.close_dt AS "Closed Dt",
        dsa.interest_amt AS "Interest Amount",
        dsa.last_int_appl_dt AS "Last Int Calc Dt",
        dsa.total_int_drawn AS "Tot Int Drawn",
        DSA.RATE_OF_INT as "Rate Of Int", GET_DEP_NOMINEE(dsa.deposit_no) AS "Nominee",
        GET_DEPOSIT_JOINT_CUST_NAMES(DEPO.DEPOSIT_NO) AS "Joined Customer"
        FROM customer cust LEFT JOIN share_acct sa
        ON cust.cust_id = sa.cust_id
        , deposit_acinfo depo LEFT JOIN DEPOSIT_JOINTACT DJ ON DEPO.DEPOSIT_NO = DJ.DEPOSIT_NO, 
        cust_addr ca, deposit_sub_acinfo dsa
        WHERE depo.cust_id = cust.cust_id
        AND ca.cust_id = cust.cust_id
        AND ca.addr_type = cust.comm_addr_type
        AND (   depo.authorize_status IS NULL
        OR depo.authorize_status NOT IN ('REJECTED')
        )
        AND (   dsa.acct_status IN ('CLOSED', 'NEW')
        OR depo.deposit_status IS NULL AND dsa.close_dt IS NULL
        )
        AND depo.status NOT IN ('DELETED', 'REJECTED')
        AND dsa.deposit_no = depo.deposit_no
        AND NVL (cust.authorize_status, 'AUTHORIZED') = 'AUTHORIZED'
        AND NVL (depo.authorize_status, 'AUTHORIZED') = 'AUTHORIZED'
        
        <dynamic>         
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="FNAME">
                    get_cust_name(CUST.CUST_ID) 
                    <isNotNull prepend="" property="STARTSWITH">
                        LIKE UPPER('$FNAME$%')
                    </isNotNull>
                    <isNotNull prepend="" property="ENDSWITH">
                        LIKE UPPER('%$FNAME$')
                    </isNotNull>
                    <isNotNull prepend="" property="EXACTMATCH">
                        LIKE UPPER('$FNAME$')
                    </isNotNull>
                    <isNotNull prepend="" property="ALL">
                        LIKE UPPER('%$FNAME$%')
                    </isNotNull>
                </isNotNull>
            </isParameterPresent>
		 
            <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="FNAME">
                    UPPER(get_cust_name(CUST.CUST_ID)) LIKE UPPER('%$FNAME$%')
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="ADDRESS">
                    UPPER(STREET||''||DECODE(AREA,NULL,'',AREA||'')) LIKE UPPER('%$ADDRESS$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUST_ID">
                    CUST.CUST_ID = #CUST_ID#
                </isNotNull>
            </isParameterPresent>  	  
            <isParameterPresent>
                <isNotNull prepend="AND" property="MEMBER_NO">
                    UPPER(SA.SHARE_ACCT_NO) LIKE UPPER ('%$MEMBER_NO$%')
                </isNotNull>
            </isParameterPresent>
           
            <isParameterPresent>
                <isNotNull prepend="AND" property="BRANCH_ID">
                    CUST.BRANCH_CODE=#BRANCH_CODE#
                </isNotNull>
            </isParameterPresent> 		   

            <isParameterPresent>      
                <isNotNull property = "FROM_DATE">
                    <isNotNull prepend = "AND" property = "TO_DATE">
                        <!-- DSA.DEPOSIT_DT BETWEEN #FROM_DATE:DATE# AND #TO_DATE:DATE# -->
                        DEPO.CREATED_DT &lt;= #TO_DATE:DATE# AND
                        (DSA.CLOSE_DT IS NULL OR 
                        (CASE WHEN DSA.TOTAL_BALANCE > 0 THEN ADD_MONTHS(#FROM_DATE:DATE#,1) 
                        ELSE TO_DATE(TO_CHAR(DSA.CLOSE_DT,'dd/MM/yyyy'),'dd/MM/yyyy') 
                        END >= #FROM_DATE:DATE#))                   
                    </isNotNull>
                </isNotNull>
            </isParameterPresent> 
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="STATUS">
                    UPPER(DSA.ACCT_STATUS) = UPPER(#STATUS#)
                </isNotNull>
            </isParameterPresent>             
           
            <isParameterPresent>      
                <isNotNull property = "FROM_AMOUNT">
                    <isNotNull prepend = "AND" property = "TO_AMOUNT">
                        DSA.DEPOSIT_AMT BETWEEN #FROM_AMOUNT:NUMBER# AND #TO_AMOUNT:NUMBER#
                    </isNotNull>
                </isNotNull>
            </isParameterPresent> 
                   
             <isParameterPresent>
                <!-- The test Parameter(s) should not be null... -->
                <isNotNull prepend="AND" property="JOINT_CUST_NAME">
                   GET_CUST_NAME(DJ.CUST_ID)
                    <isNotNull prepend="" property="JOINT_CUST_STARTSWITH">
                        LIKE UPPER('$JOINT_CUST_NAME$%')
                    </isNotNull>
                    <isNotNull prepend="" property="JOINT_CUST_ENDSWITH">
                        LIKE UPPER('%$JOINT_CUST_NAME$')
                    </isNotNull>
                    <isNotNull prepend="" property="JOINT_CUST_EXACTMATCH">
                        LIKE UPPER('$JOINT_CUST_NAME$')
                    </isNotNull>
                    <isNotNull prepend="" property="JOINT_CUST_ALL">
                        LIKE UPPER('%$JOINT_CUST_NAME$%')
                    </isNotNull>
                </isNotNull>
            </isParameterPresent>  
              
        </dynamic>
        ORDER BY dsa.deposit_no   
</dynamic-mapped-statement>
    
    <!-- End -->
    
    
    <mapped-statement name="getDepositsMaturedCustomers" result-class="java.util.LinkedHashMap">
        SELECT DISTINCT cust.cust_id AS "Customer ID",sa.share_acct_no AS "Member No", 
        get_cust_name(cust.cust_id) AS "Customer",
        street AS "House Name",
        DP.PROD_DESC as "Deposit Type",
        dsa.deposit_no AS "Deposit No",
        dsa.deposit_dt AS "Deposit Dt",
        dsa.deposit_amt AS "Deposit Amt",                
        dsa.close_dt AS "Closed Dt",
        dsa.interest_amt AS "Interest Amount",
        dsa.last_int_appl_dt AS "Last Int Calc Dt",
        dsa.total_int_drawn AS "Tot Int Drawn",S.MOBILE_NO as "CONTACT_NO"            
        FROM customer cust LEFT JOIN share_acct sa
        ON cust.cust_id = sa.cust_id,
        deposit_acinfo     depo LEFT JOIN SMS_SUBSCRIPTION s ON (depo.DEPOSIT_NO = s.ACT_NUM AND s.AUTHORIZE_STATUS='AUTHORIZED'),cust_addr ca, deposit_sub_acinfo dsa,
        DEPOSITS_PRODUCT dp
        WHERE depo.cust_id = cust.cust_id
        AND ca.cust_id = cust.cust_id                 
        AND ca.addr_type = cust.comm_addr_type
        AND (   depo.authorize_status IS NULL
        OR depo.authorize_status NOT IN ('REJECTED')
        )
        <!--AND (   dsa.acct_status IN ('CLOSED', 'NEW')-->
        AND (dsa.acct_status IN ('NEW')
        OR depo.deposit_status IS NULL AND dsa.close_dt IS NULL
        )
        AND depo.status NOT IN ('DELETED', 'REJECTED')
        AND dsa.deposit_no = depo.deposit_no
        AND NVL (cust.authorize_status, 'AUTHORIZED') = 'AUTHORIZED'
        AND NVL (depo.authorize_status, 'AUTHORIZED') = 'AUTHORIZED'
        AND DEPO.PROD_ID = DP.PROD_ID
        AND DSA.MATURITY_DT = #DUE_DT#
        AND cust.branch_code  = #BRANCH_ID#
    </mapped-statement>     
 
    <mapped-statement name="getSMSContactForDepositMaturedCustomer" result-class="java.util.LinkedHashMap">
        SELECT c.cust_id,
        cp.phone_number as "CONTACT_NO" 
        from customer c,cust_phone cp WHERE
        cp.cust_id = c.cust_id
        AND CP.PHONE_TYPE_ID = 'MOBILE'
        AND C.AUTHORIZE_STATUS = 'AUTHORIZED'
        AND CP.STATUS in ('CREATED','MODIFIED')
        AND cp.cust_id = #CUST_ID#
        AND C.BRANCH_CODE = #BRANCH_CODE#     
    </mapped-statement>
 
    <mapped-statement name="getMaturedInvestmentDepositDetails" result-class="java.util.LinkedHashMap">
        select id.investment_id as "Investment Id",
        id.investment_prod_desc as "Product",
        id.investment_issue_dt as "Issue dt",
        id.investment_ref_no as "Ref No",
        id.agency_name as "Agency Name",
        id.principal_amount as "Principal Amt",
        id.interest_receivable as "Interest Receivable",
        id.interest_received as "Interest Received",
        id.maturity_amount as "Maturity Amount"
        from INVESTMENT_DEPOSIT id 
        where id.maturity_dt = #DUE_DT#
        and id.authorized_status = 'AUTHORIZED'
        and id.acct_status != 'CLOSED'
        and id.status in ('CREATED','MODIFIED')
    </mapped-statement>
 
    <mapped-statement name="getAllProductIds" result-class="java.util.LinkedHashMap"> 
        SELECT distinct PROD_ID,PROD_DESC AS "PRODUCT" 
        from MDS_PRODUCT_GENERAL_DETAILS 
        WHERE UPPER(PROD_ID) = UPPER(#PROD_ID:VARCHAR#)
        union all 
        SELECT distinct PROD_ID,PROD_DESC AS "PRODUCT" 
        from LOANS_PRODUCT 
        WHERE UPPER(PROD_ID) = UPPER(#PROD_ID:VARCHAR#)
        union all
        SELECT distinct PROD_ID,PROD_DESC AS "PRODUCT" 
        from DEPOSITS_PRODUCT 
        WHERE UPPER(PROD_ID) = UPPER(#PROD_ID:VARCHAR#)
        union all
        SELECT distinct PROD_ID,PROD_DESC AS "PRODUCT" 
        from OTHER_BANK_ACCOUNT_PRODUCTS 
        WHERE UPPER(PROD_ID) = UPPER(#PROD_ID:VARCHAR#)
        union all
        SELECT distinct PROD_ID,PROD_DESC AS "PRODUCT" 
        from ADVANCES_PRODUCT 
        WHERE UPPER(PROD_ID) = UPPER(#PROD_ID:VARCHAR#)
        union all
        SELECT distinct PROD_ID,PROD_DESC AS "PRODUCT" 
        from BILLS_PRODUCT 
        WHERE UPPER(PROD_ID) = UPPER(#PROD_ID:VARCHAR#)
        union all
        SELECT distinct PROD_ID,PROD_DESC AS "PRODUCT" 
        from OP_AC_PRODUCT 
        WHERE UPPER(PROD_ID) = UPPER(#PROD_ID:VARCHAR#)
        union all
        SELECT distinct PROD_ID,PROD_DESC AS "PRODUCT" 
        from REMITTANCE_PRODUCT 
        WHERE UPPER(PROD_ID) = UPPER(#PROD_ID:VARCHAR#)
        union all
        SELECT distinct PROD_ID,PROD_NAME AS "PRODUCT" 
        from DRF_PRODUCT 
        WHERE UPPER(PROD_ID) = UPPER(#PROD_ID:VARCHAR#)
        union all
        SELECT distinct PROD_ID,PROD_DESC AS "PRODUCT" 
        from LOCKER_PRODUCT 
        WHERE UPPER(PROD_ID) = UPPER(#PROD_ID:VARCHAR#)
        union all
        SELECT distinct INVESTMENT_PROD_ID,IINVESTMENT_PROD_DESC AS "PRODUCT" 
        from INVESTMENT_CONF_DETAILS 
        WHERE UPPER(investment_prod_id) = UPPER(#PROD_ID:VARCHAR#) 
        UNION ALL
        SELECT DISTINCT PROD_ID, PROD_DESC AS "PRODUCT"
        FROM SUSPENSE_PRODUCT
        WHERE UPPER(prod_id) = UPPER(#PROD_ID:VARCHAR#)   
        UNION ALL
        SELECT DISTINCT SCHEME_NAME,SCHEME_DESC AS "PRODUCT"
        FROM MDS_SCHEME_DETAILS
        WHERE UPPER(SCHEME_NAME) = UPPER(#PROD_ID:VARCHAR#)
        UNION ALL
        SELECT DISTINCT PRODUCT_ID, PRODUCT_DES AS "PRODUCT"
        FROM TRADING_PRODUCT
        WHERE UPPER(PRODUCT_ID) = UPPER(#PROD_ID:VARCHAR#) 
    </mapped-statement>
    
    <mapped-statement name="updateDepositShadowCreditDebit" result-class="java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET SHADOW_CREDIT=0, SHADOW_DEBIT=0 WHERE STATUS!='DELETED' 
        AND ACCT_STATUS!='CLOSED' AND (NVL(SHADOW_CREDIT,0)!=0 OR NVL(SHADOW_DEBIT,0)!=0)
    </mapped-statement> 
    
</sql-map>