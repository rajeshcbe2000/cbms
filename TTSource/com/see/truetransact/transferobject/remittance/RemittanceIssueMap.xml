<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="RemittanceIssueTOMap">

	<!-- Use RemittanceIssueTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertRemittanceIssueTO" inline-parameters="true">
        INSERT INTO REMIT_ISSUE
        (BATCH_ID, BATCH_DT, ISSUE_ID, PROD_ID, CITY, DRAWEE_BANK, DRAWEE_BRANCH_CODE, 
        FAVOURING, REMIT_TYPE, AMOUNT, PAN_GIR_NO, CATEGORY, EXCHANGE, POSTAGE, 
        OTHER_CHARGES, TOTAL_AMT, REMARKS, PAYEE_ACCT_HEAD, CROSSING, PAYEE_ACCT_NO, 
        STATUS, INSTRUMENT_NO1, INSTRUMENT_NO2, VARIABLE_NO, AUTHORIZE_STATUS, 
        AUTHORIZE_USER, AUTHORIZE_DT, AUTHORIZE_REMARK, REVALIDATE_DT, 
        REVALIDATE_CHARGE, REVALIDATE_EXPIRY_DT, REVALIDATE_REMARKS, DUPLICATE_DT, 
        DUPLICATE_CHARGE, DUPLICATE_REMARKS, CANCEL_DT, CANCEL_CHARGE, CANCEL_REMARKS, 
        PAID_STATUS, BRANCH_ID, STATUS_BY, STATUS_DT, REVALIDATE_TRANS, DUPLICATE_TRANS,
        PAYEE_PROD_TYPE, PAYEE_PROD_ID, DUP_SERV_TAX, REV_SERV_TAX,
        REMITED_FOR_FLAG,EXG_CALCULATED
        ) VALUES (
        #batchId:VARCHAR#, #batchDt:DATE#, #issueId:VARCHAR#, #prodId:VARCHAR#, 
        #city:VARCHAR#, #draweeBank:VARCHAR#, #draweeBranchCode:VARCHAR#, 
        #favouring:VARCHAR#, #remitType:VARCHAR#, #amount:NUMERIC#, #panGirNo:VARCHAR#, 
        #category:VARCHAR#, #exchange:NUMERIC#, #postage:NUMERIC#, #otherCharges:NUMERIC#, 
        #totalAmt:NUMERIC#, #remarks:VARCHAR#, #payeeAcctHead:VARCHAR#, #crossing:VARCHAR#, 
        #payeeAcctNo:VARCHAR#, #status:VARCHAR#, #instrumentNo1:VARCHAR#, #instrumentNo2:VARCHAR#, 
        #variableNo:VARCHAR#, #authorizeStatus:VARCHAR#, #authorizeUser:VARCHAR#, #authorizeDt:DATE#, 
        #authorizeRemark:VARCHAR#, #revalidateDt:DATE#, #revalidateCharge:NUMERIC#, 
        #revalidateExpiryDt:DATE#, #revalidateRemarks:VARCHAR#, #duplicateDt:DATE#, 
        #duplicateCharge:NUMERIC#, #duplicateRemarks:VARCHAR#, #cancelDt:DATE#, 
        #cancelCharge:NUMERIC#, #cancelRemarks:VARCHAR#, #paidStatus:VARCHAR#, 
        #branchId:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#, #revalidateTrans:VARCHAR#, 
        #duplicateTrans:VARCHAR#, #payeeProdType:VARCHAR#, #payeeProdId:VARCHAR#, #dupServTax:NUMERIC#, #revServTax:NUMERIC#, #remitForFlag:VARCHAR#, #exgCal:NUMERIC#)
    </mapped-statement>

	<!-- Use RemittanceIssueTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateRemittanceIssueTO" inline-parameters="true">
        UPDATE REMIT_ISSUE SET 
		<!--BATCH_ID = #batchId:VARCHAR#,
		BATCH_DT = #batchDt:DATE#,
		ISSUE_ID = #issueId:VARCHAR#,-->
        PROD_ID = #prodId:VARCHAR#,
        CITY = #city:VARCHAR#,
        DRAWEE_BANK = #draweeBank:VARCHAR#,
        DRAWEE_BRANCH_CODE = #draweeBranchCode:VARCHAR#,
        FAVOURING = #favouring:VARCHAR#,
        REMIT_TYPE = #remitType:VARCHAR#,
        AMOUNT = #amount:NUMERIC#,
        PAN_GIR_NO = #panGirNo:VARCHAR#,
        CATEGORY = #category:VARCHAR#,
        EXCHANGE = #exchange:NUMERIC#,
        POSTAGE = #postage:NUMERIC#,
        OTHER_CHARGES = #otherCharges:NUMERIC#,
        TOTAL_AMT = #totalAmt:NUMERIC#,
        REMARKS = #remarks:VARCHAR#,
        PAYEE_ACCT_HEAD = #payeeAcctHead:VARCHAR#,
        CROSSING = #crossing:VARCHAR#,
        PAYEE_ACCT_NO = #payeeAcctNo:VARCHAR#,
        STATUS = #status:VARCHAR#,
        INSTRUMENT_NO1 = #instrumentNo1:VARCHAR#,
        INSTRUMENT_NO2 = #instrumentNo2:VARCHAR#,
        VARIABLE_NO = #variableNo:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        AUTHORIZE_USER = #authorizeUser:VARCHAR#,
        AUTHORIZE_DT = #authorizeDt:DATE#,
        AUTHORIZE_REMARK = #authorizeRemark:VARCHAR#,
        REVALIDATE_DT = #revalidateDt:DATE#,
        REVALIDATE_CHARGE = #revalidateCharge:NUMERIC#,
        REVALIDATE_EXPIRY_DT = #revalidateExpiryDt:DATE#,
        REVALIDATE_REMARKS = #revalidateRemarks:VARCHAR#,
        DUPLICATE_DT = #duplicateDt:DATE#,
        DUPLICATE_CHARGE = #duplicateCharge:NUMERIC#,
        DUPLICATE_REMARKS = #duplicateRemarks:VARCHAR#,
        CANCEL_DT = #cancelDt:DATE#,
        CANCEL_CHARGE = #cancelCharge:NUMERIC#,
        CANCEL_REMARKS = #cancelRemarks:VARCHAR#,
        PAID_STATUS = #paidStatus:VARCHAR#,
        BRANCH_ID = #branchId:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        REVALIDATE_TRANS = #revalidateTrans:VARCHAR#,
        DUPLICATE_TRANS = #duplicateTrans:VARCHAR#,
        PAYEE_PROD_TYPE = #payeeProdType:VARCHAR#,  
        PAYEE_PROD_ID = #payeeProdId:VARCHAR#,
        DUP_SERV_TAX = #dupServTax:NUMERIC#,
        REV_SERV_TAX = #revServTax:NUMERIC#,
        REMITED_FOR_FLAG=#remitForFlag:VARCHAR#,
        EXG_CALCULATED = #exgCal:NUMERIC#
        WHERE BATCH_ID = #batchId:VARCHAR# AND ISSUE_ID = #issueId:VARCHAR#
    </mapped-statement>

	<!-- Use RemittanceIssueTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteRemittanceIssueTO" inline-parameters="true">
		<!--DELETE FROM REMIT_ISSUE 
		WHERE -->
        UPDATE REMIT_ISSUE SET STATUS ='DELETED'
        WHERE BATCH_ID = #batchId:VARCHAR# AND ISSUE_ID =#issueId:VARCHAR#
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to RemittanceIssueTO object (JavaBean) properties -->
    <result-map name="getRemittanceIssueTOResult" class="com.see.truetransact.transferobject.remittance.RemittanceIssueTO">
        <property name="batchId" column="BATCH_ID"/>
        <property name="batchDt" column="BATCH_DT"/>
        <property name="issueId" column="ISSUE_ID"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="city" column="CITY"/>
        <property name="draweeBank" column="DRAWEE_BANK"/>
        <property name="draweeBranchCode" column="DRAWEE_BRANCH_CODE"/>
        <property name="favouring" column="FAVOURING"/>
        <property name="remitType" column="REMIT_TYPE"/>
        <property name="amount" column="AMOUNT"/>
        <property name="panGirNo" column="PAN_GIR_NO"/>
        <property name="category" column="CATEGORY"/>
        <property name="exchange" column="EXCHANGE"/>
        <property name="postage" column="POSTAGE"/>
        <property name="otherCharges" column="OTHER_CHARGES"/>
        <property name="totalAmt" column="TOTAL_AMT"/>
        <property name="remarks" column="REMARKS"/>
        <property name="payeeAcctHead" column="PAYEE_ACCT_HEAD"/>
        <property name="crossing" column="CROSSING"/>
        <property name="payeeAcctNo" column="PAYEE_ACCT_NO"/>
        <property name="payeeProdType" column="PAYEE_PROD_TYPE"/>
        <property name="payeeProdId" column="PAYEE_PROD_ID"/>
        <property name="status" column="STATUS"/>
        <property name="instrumentNo1" column="INSTRUMENT_NO1"/>
        <property name="instrumentNo2" column="INSTRUMENT_NO2"/>
        <property name="variableNo" column="VARIABLE_NO"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeUser" column="AUTHORIZE_USER"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeRemark" column="AUTHORIZE_REMARK"/>
        <property name="revalidateDt" column="REVALIDATE_DT"/>
        <property name="revalidateCharge" column="REVALIDATE_CHARGE"/>
        <property name="revalidateExpiryDt" column="REVALIDATE_EXPIRY_DT"/>
        <property name="revalidateRemarks" column="REVALIDATE_REMARKS"/>
        <property name="duplicateDt" column="DUPLICATE_DT"/>
        <property name="duplicateCharge" column="DUPLICATE_CHARGE"/>
        <property name="duplicateRemarks" column="DUPLICATE_REMARKS"/>
        <property name="cancelDt" column="CANCEL_DT"/>
        <property name="cancelCharge" column="CANCEL_CHARGE"/>
        <property name="cancelRemarks" column="CANCEL_REMARKS"/>
        <property name="paidStatus" column="PAID_STATUS"/>
        <property name="branchId" column="BRANCH_ID"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="revalidateTrans" column="REVALIDATE_TRANS"/>
        <property name="duplicateTrans" column="DUPLICATE_TRANS"/>
        <property name="dupServTax" column="DUP_SERV_TAX"/>
        <property name="revServTax" column="REV_SERV_TAX"/>
        <property name="exgCal" column="EXG_CALCULATED"/>
        <property name="remitForFlag" column="REMITED_FOR_FLAG"/>
    </result-map>
    <mapped-statement name="getSelectRemittanceIssueTO" result-map="getRemittanceIssueTOResult" >
        SELECT * FROM REMIT_ISSUE WHERE BATCH_ID = #value:VARCHAR# AND  ( AUTHORIZE_STATUS != 'REJECTED' OR AUTHORIZE_STATUS IS NULL ) AND ( PAID_STATUS != 'PAID' OR PAID_STATUS IS NULL  ) 
        AND ( STATUS != 'DELETED' OR STATUS IS NULL ) ORDER BY ISSUE_ID
    </mapped-statement>
        
    <mapped-statement name="getSelectRemittanceIssueTOtoDepintPay" result-map="getRemittanceIssueTOResult" >
        select * from remit_issue where VARIABLE_NO=#VARIABLE_NO:VARCHAR#
    </mapped-statement>
        <!-- the following mapped-statement commented and edited by Rajesh -->
        <!--mapped-statement name="viewRemitIssue" result-class = "java.util.LinkedHashMap" >
                SELECT  BATCH_ID,MIN(BATCH_DT),VARIABLE_NO, COUNT(ISSUE_ID) AS "COUNT" FROM REMIT_ISSUE WHERE ( STATUS != 'DELETED' OR STATUS IS NULL ) AND  ( AUTHORIZE_STATUS != 'REJECTED'
                OR AUTHORIZE_STATUS IS NULL ) AND ( PAID_STATUS != 'PAID' OR PAID_STATUS IS NULL ) GROUP BY BATCH_ID,VARIABLE_NO ORDER BY BATCH_ID
        </mapped-statement-->
    <dynamic-mapped-statement name="viewRemitIssue" result-class = "java.util.LinkedHashMap" >
        SELECT  PROD_ID, BATCH_ID,MIN(BATCH_DT),VARIABLE_NO, COUNT(ISSUE_ID) AS "COUNT", DUPLICATE_CHARGE, AUTHORIZE_STATUS, REMARKS, INSTRUMENT_NO2  FROM REMIT_ISSUE WHERE 
        ( STATUS != 'DELETED' OR STATUS IS NULL ) AND  
        ( AUTHORIZE_STATUS IS NULL ) AND (AUTHORIZE_REMARK IS NULL or AUTHORIZE_REMARK = 'FROM_BILLS_MODULE') AND
        ( PAID_STATUS != 'PAID' OR PAID_STATUS IS NULL ) AND BRANCH_ID = #BRANCH_CODE:VARCHAR# 
         <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="BATCH_ID">
                    UPPER(BATCH_ID) LIKE UPPER('%$BATCH_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="VARIABLE_NO">
                    UPPER(VARIABLE_NO) LIKE UPPER('%$VARIABLE_NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="DUPLICATE_CHARGE">
                    UPPER(DUPLICATE_CHARGE) LIKE UPPER('%$DUPLICATE_CHARGE$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="INSTRUMENT_NO2">
                    UPPER(INSTRUMENT_NO2) LIKE UPPER('%$INSTRUMENT_NO2$%')
                </isNotNull>
            </isParameterPresent>
           </dynamic>
        GROUP BY PROD_ID, BATCH_ID, VARIABLE_NO, DUPLICATE_CHARGE, AUTHORIZE_STATUS, REMARKS, INSTRUMENT_NO2 ORDER BY BATCH_ID
    </dynamic-mapped-statement>
                        
    <mapped-statement name="getCountOfVariableNo" result-class="java.util.LinkedHashMap" >
        SELECT COUNT(VARIABLE_NO) AS "VAR_NO_COUNT" FROM REMIT_ISSUE WHERE VARIABLE_NO = #VARIABLE_NO:VARCHAR# AND ( STATUS != 'DELETED' OR STATUS IS NULL ) 
    </mapped-statement>
        
    <mapped-statement name="getPrefixAndSuffix" result-class="java.util.LinkedHashMap">
        SELECT NUMBER_PATTERN AS "NUMBER_PATTERN", NUMBER_PATTERN_SUFFIX AS "NUMBER_PATTERN_SUFFIX" FROM REMITTANCE_PRODUCT 
        WHERE PROD_ID = #PROD_ID:VARCHAR# AND ( STATUS  !='DELETED' OR STATUS IS NULL )                
    </mapped-statement>
        
    <mapped-statement name="getPayableAt" result-class="java.lang.String">
        SELECT PAY_ISSUE_BRANCH FROM REMITTANCE_PRODUCT WHERE PROD_ID = #PRODUCT_ID:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="getPrintServices" result-class="java.util.LinkedHashMap">
                <!--SELECT PRINT_SERVICES AS "PRINT_SERVICES" FROM REMITTANCE_PRODUCT WHERE PROD_ID = #PROD_ID# AND ( STATUS != 'DELETED' OR STATUS IS NULL )-->
        SELECT PRINT_SERVICES AS "PRINT_SERVICES" FROM REMITTANCE_PRODUCT WHERE BEHAVES_LIKE = #BEHAVES_LIKE:VARCHAR# AND ( STATUS != 'DELETED' OR STATUS IS NULL )
    </mapped-statement>
        
    <mapped-statement name="getAccountHeadForProductId" result-class="java.util.LinkedHashMap">
        SELECT ISSUE_HD,PAY_HD FROM REMITTANCE_PRODUCT WHERE PROD_ID = #PROD_ID:VARCHAR# AND (STATUS  != 'DELETED' OR STATUS IS NULL )                
    </mapped-statement>
        
    <mapped-statement name="getAccountHeadBalForProdId" result-class="java.util.LinkedHashMap">
        SELECT CUR_BAL FROM GL WHERE AC_HD_ID = #AC_HD_ID:VARCHAR# AND BRANCH_CODE = #BRANCH_CODE:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getBank_CodeFromBank" result-class="java.util.LinkedHashMap" >
        SELECT BANK_CODE AS "BANK_CODE" FROM BANK
    </mapped-statement>

    <dynamic-mapped-statement name="getRemitIssueAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT  BATCH_ID,BATCH_DT,COUNT(ISSUE_ID) AS "COUNT",VARIABLE_NO, INSTRUMENT_NO1, INSTRUMENT_NO2, REMARKS FROM REMIT_ISSUE RI
        WHERE ( STATUS = 'CREATED' OR  STATUS = 'MODIFIED' )
        AND BRANCH_ID = #BRANCH_CODE:VARCHAR# AND STATUS_BY != #USER_ID:VARCHAR# and INSTRUMENT_NO2 is not null
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = RI.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AUTHORIZE_STATUS IS NULL OR 
                AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        GROUP BY BATCH_ID,BATCH_DT,VARIABLE_NO,INSTRUMENT_NO1,INSTRUMENT_NO2,REMARKS ORDER BY BATCH_ID,BATCH_DT,VARIABLE_NO,INSTRUMENT_NO1,INSTRUMENT_NO2,REMARKS
    </dynamic-mapped-statement>
        
	<!-- Use authorizeOperativeAcctProduct object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="authorizeRemitIssue" result-class="java.util.HashMap">
        UPDATE REMIT_ISSUE SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_USER = #AUTHORIZE_USER:VARCHAR#,
        AUTHORIZE_DT = #TODAY_DT:DATE#
        WHERE BATCH_ID = #BATCH_ID:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="getCancelCharges" result-class="java.util.LinkedHashMap">
        SELECT CHARGE AS "CHARGE" 
        FROM  REMITTANCE_PROD_CHARGES WHERE PROD_ID = #PROD_ID:VARCHAR#
        AND CHARGE_TYPE = 'CANCELLATION'
    </mapped-statement>
        
    <dynamic-mapped-statement name="getExchange" result-class="java.util.LinkedHashMap">
        SELECT CHARGE AS "CHARGE", AMT_RANGE_FROM as FROM_AMT, 
        AMT_RANGE_TO as TO_AMT, FOR_EVERY_AMT, 
        FOR_EVERY_RATE, FOR_EVERY_TYPE, PERCENTAGE
        FROM  REMITTANCE_PROD_CHARGES WHERE PROD_ID = #PROD_ID:VARCHAR#
        AND (#AMOUNT:NUMBER# BETWEEN AMT_RANGE_FROM AND AMT_RANGE_TO OR 
        #AMOUNT:NUMBER# > (SELECT MAX(AMT_RANGE_TO) FROM 
        REMITTANCE_PROD_CHARGES WHERE PROD_ID = #PROD_ID:VARCHAR#
        AND CHARGE_TYPE = #CHARGE_TYPE:VARCHAR#
        AND CATEGORY = #CATEGORY:VARCHAR# AND ( STATUS != 'DELETED'OR STATUS IS NULL )
        <dynamic>
            <isNotEqual property="PAYABLE" compareValue="ISSU_BRANCH">
                AND BANK_CODE = #BANK_CODE:VARCHAR# AND BRANCH_CODE = #BRANCH_CODE:VARCHAR#
            </isNotEqual>
        </dynamic>
        ))
        AND CHARGE_TYPE = #CHARGE_TYPE:VARCHAR#
        AND CATEGORY = #CATEGORY:VARCHAR# AND ( STATUS != 'DELETED'OR STATUS IS NULL )
        <dynamic>
            <isNotEqual property="PAYABLE" compareValue="ISSU_BRANCH">
                AND BANK_CODE = #BANK_CODE:VARCHAR# AND BRANCH_CODE = #BRANCH_CODE:VARCHAR#
            </isNotEqual>
        </dynamic>
    </dynamic-mapped-statement> 
        
    <mapped-statement name="getBehavesLikeFromRemitProduct" result-class="java.util.LinkedHashMap" >
        SELECT BEHAVES_LIKE AS "BEHAVES_LIKE" FROM REMITTANCE_PRODUCT WHERE PROD_ID = #PROD_ID:VARCHAR# AND ( STATUS != 'DELETED' OR STATUS IS NULL )
    </mapped-statement>
        
    <mapped-statement name="getMin_Max_Amt" result-class="java.util.LinkedHashMap" >
        SELECT MIN_AMT AS "MIN_AMT",MAX_AMT AS "MAX_AMT" FROM REMITTANCE_PROD_BRANCH 
        WHERE ( STATUS != 'DELETED' OR STATUS IS NULL ) AND PROD_ID = #PROD_ID:VARCHAR# AND BANK_CODE = #BANK_CODE:VARCHAR# AND 
        BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND #AMOUNT:NUMBER# NOT BETWEEN MIN_AMT AND MAX_AMT
    </mapped-statement>
        
    <mapped-statement name="getNoOfDays" result-class="java.util.LinkedHashMap" >
        SELECT (TO_DATE(TO_CHAR(#TODAY_DT:TIMESTAMP# ,'dd/mm/yyyy'), 'dd/mm/yyyy') - TO_DATE(TO_CHAR(BATCH_DT,'dd/mm/yyyy'),'dd/mm/yyyy') ) as "NUM_OF_DAYS"
        FROM REMIT_ISSUE  WHERE ( STATUS != 'DELETED'OR STATUS IS NULL ) AND VARIABLE_NO = #VARIABLE_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getLapsePeriod" result-class="java.util.LinkedHashMap" >
        SELECT LAPSE_PERIOD AS "LAPSE_PERIOD" FROM REMITTANCE_PRODUCT  WHERE BEHAVES_LIKE = #BEHAVES_LIKE:VARCHAR#  AND ( STATUS != 'DELETED' OR STATUS IS NULL )
            <!--SELECT LAPSE_PERIOD AS "LAPSE_PERIOD" FROM REMITTANCE_PRODUCT  WHERE PROD_ID = #PROD_ID#  AND ( STATUS != 'DELETED' OR STATUS IS NULL )-->
    </mapped-statement>
        
    <mapped-statement name="IsAuthorized" result-class="java.util.LinkedHashMap">
        SELECT COUNT(AUTHORIZE_STATUS) AS "COUNT" FROM REMIT_ISSUE WHERE BATCH_ID = #BATCH_ID:VARCHAR# AND ISSUE_ID = #ISSUE_ID:VARCHAR# AND STATUS != 'DELETED' AND AUTHORIZE_STATUS IS NOT NULL AND ( PAID_STATUS IS NULL OR PAID_STATUS != 'PAID' )
    </mapped-statement>
        
    <mapped-statement name="getRemitAccountHeads" result-class="java.util.HashMap" >
        SELECT ISSUE_HD, EXCHANGE_HD, OTHER_CHRG_HD, POSTAGE_HD, PAY_HD, CANCELL_CHRG_HD, 
        REVAL_CHRG_HD, DUPL_CHRG_HD FROM REMITTANCE_PRODUCT  
        WHERE PROD_ID = #value:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="getInstrumentNo" result-class="java.util.HashMap" >
                <!--SELECT INS1, MAX(INS2) AS INS2_MAX, INS2 FROM
                (SELECT RI.INSTRUMENT_NO1 AS INS1, TO_NUMBER(RI.INSTRUMENT_NO2) + 1 AS INS2, 
                ID.LEAVES_SLNO_FROM AS SL_FROM, ID.LEAVES_SLNO_TO AS SL_TO
                FROM INVENTORY_MASTER IM, INVENTORY_DETAILS ID, REMIT_ISSUE RI 
                WHERE IM.ITEM_ID = ID.ITEM_ID AND RI.INSTRUMENT_NO1 = IM.INSTRUMENT_PREFIX
                AND RI.INSTRUMENT_NO2 BETWEEN ID.LEAVES_SLNO_FROM  AND ID.LEAVES_SLNO_TO
                AND IM.ITEM_TYPE = 'DEMAND_DRAFTS'
                UNION
                SELECT IM.INSTRUMENT_PREFIX AS INS1, TO_NUMBER(ID.LEAVES_SLNO_FROM) AS INS2,
                ID.LEAVES_SLNO_FROM AS SL_FROM, ID.LEAVES_SLNO_TO AS SL_TO
                FROM INVENTORY_MASTER IM, INVENTORY_DETAILS ID
                WHERE IM.ITEM_ID = ID.ITEM_ID AND ID.LEAVES_SLNO_FROM NOT IN (SELECT INSTRUMENT_NO2
                FROM REMIT_ISSUE) AND IM.ITEM_TYPE = 'DEMAND_DRAFTS' ORDER BY 2)
            WHERE INS2 BETWEEN 
            SL_FROM AND SL_TO GROUP BY INS1, INS2 HAVING MAX(INS2) > (SELECT NVL(MAX(INSTRUMENT_NO2),0) 
            FROM REMIT_ISSUE WHERE INS1 = INSTRUMENT_NO1 ) ORDER BY 3 ASC-->
              <!--  SELECT INS1, MAX(INS2) AS INS2_MAX, INS2 FROM
                (SELECT RI.INSTRUMENT_NO1 AS INS1, TO_NUMBER(RI.INSTRUMENT_NO2) + 1 AS INS2, 
                ID.LEAVES_SLNO_FROM AS SL_FROM, ID.LEAVES_SLNO_TO AS SL_TO
                FROM INVENTORY_MASTER IM, INVENTORY_DETAILS ID, REMIT_ISSUE RI 
                WHERE IM.ITEM_ID = ID.ITEM_ID AND RI.INSTRUMENT_NO1 = ID.INSTRUMENT_PREFIX
                AND RI.INSTRUMENT_NO2 BETWEEN ID.LEAVES_SLNO_FROM  AND ID.LEAVES_SLNO_TO
                AND IM.ITEM_TYPE = #BEHAVES_LIKE# AND ID.INITIATED_BRANCH = #BRANCH_CODE#
                AND RI.BRANCH_ID = #BRANCH_CODE#
                UNION
                SELECT ID.INSTRUMENT_PREFIX AS INS1, TO_NUMBER(ID.LEAVES_SLNO_FROM) AS INS2,
                ID.LEAVES_SLNO_FROM AS SL_FROM, ID.LEAVES_SLNO_TO AS SL_TO
                FROM INVENTORY_MASTER IM, INVENTORY_DETAILS ID
                WHERE IM.ITEM_ID = ID.ITEM_ID AND  NOT EXISTS (SELECT INSTRUMENT_NO2
                FROM REMIT_ISSUE WHERE BRANCH_ID = #BRANCH_CODE# AND ID.LEAVES_SLNO_FROM=INSTRUMENT_NO2) AND 
                IM.ITEM_TYPE = #BEHAVES_LIKE# AND ID.INITIATED_BRANCH = #BRANCH_CODE# ORDER BY 2)
            WHERE INS2 BETWEEN 
            SL_FROM AND SL_TO AND INS2 NOT IN(SELECT INSTRUMENT_NO2 FROM REMIT_ISSUE WHERE INS1 = INSTRUMENT_NO1
            AND STATUS != 'DELETED' AND BRANCH_ID = #BRANCH_CODE#) GROUP BY INS1, INS2 HAVING MAX(INS2) > (SELECT NVL(MAX(INSTRUMENT_NO2),0) 
            FROM REMIT_ISSUE WHERE INS1 = INSTRUMENT_NO1 AND BRANCH_ID = #BRANCH_CODE# AND STATUS != 'DELETED') ORDER BY 3 ASC-->
        SELECT INS1,to_char(MAX(INS2))  AS "MAX(INS2)" FROM(
        SELECT INS1, MAX(INS2) AS INS2_MAX, INS2 FROM
        (SELECT RI.INSTRUMENT_NO1 AS INS1, TO_NUMBER(RI.INSTRUMENT_NO2) + 1 AS INS2, 
        ID.LEAVES_SLNO_FROM AS SL_FROM, ID.LEAVES_SLNO_TO AS SL_TO
        FROM INVENTORY_MASTER IM, INVENTORY_DETAILS ID, REMIT_ISSUE RI 
        WHERE IM.ITEM_ID = ID.ITEM_ID AND RI.INSTRUMENT_NO1 = ID.INSTRUMENT_PREFIX
        AND RI.INSTRUMENT_NO2 BETWEEN ID.LEAVES_SLNO_FROM  AND ID.LEAVES_SLNO_TO
        AND IM.ITEM_TYPE = #BEHAVES_LIKE:VARCHAR# AND ID.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR#
        AND RI.BRANCH_ID = #BRANCH_CODE:VARCHAR#
        UNION
        SELECT ID.INSTRUMENT_PREFIX AS INS1, TO_NUMBER(ID.LEAVES_SLNO_FROM) AS INS2,
        ID.LEAVES_SLNO_FROM AS SL_FROM, ID.LEAVES_SLNO_TO AS SL_TO
        FROM INVENTORY_MASTER IM, INVENTORY_DETAILS ID
        WHERE IM.ITEM_ID = ID.ITEM_ID AND  NOT EXISTS (SELECT INSTRUMENT_NO2
        FROM REMIT_ISSUE WHERE BRANCH_ID = #BRANCH_CODE:VARCHAR# AND ID.LEAVES_SLNO_FROM=INSTRUMENT_NO2) AND 
        IM.ITEM_TYPE = #BEHAVES_LIKE:VARCHAR# AND ID.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# ORDER BY 2)
        WHERE INS2 BETWEEN 
        SL_FROM AND SL_TO AND INS2 NOT IN(SELECT INSTRUMENT_NO2 FROM REMIT_ISSUE WHERE INS1 = INSTRUMENT_NO1
        AND STATUS != 'DELETED' AND BRANCH_ID = #BRANCH_CODE:VARCHAR#) GROUP BY INS1, INS2 HAVING MAX(INS2) > (SELECT NVL(MAX(INSTRUMENT_NO2),0) 
        FROM REMIT_ISSUE WHERE INS1 = INSTRUMENT_NO1 AND BRANCH_ID = #BRANCH_CODE:VARCHAR# AND STATUS != 'DELETED') ORDER BY 3 ASC) GROUP BY INS1
            
    </mapped-statement>
        
    <mapped-statement name="getPanValidationAmt" result-class="java.lang.Double" >
        SELECT CASH_LIMIT FROM REMITTANCE_PRODUCT WHERE PROD_ID = #PRODUCT_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getVariableNumber" result-class="java.util.HashMap" >
        SELECT VARIABLE_NO,REMARKS FROM REMIT_ISSUE WHERE BATCH_ID = #value:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="getBatchId" result-class="java.util.HashMap" >
        SELECT BATCH_ID,ISSUE_ID FROM REMIT_ISSUE WHERE VARIABLE_NO = #value:VARCHAR# 
    </mapped-statement>
        
    <dynamic-mapped-statement name="getPrintingDetails" result-class="java.util.LinkedHashMap" >
        SELECT BATCH_DT, ISSUE_ID, PROD_ID, DRAWEE_BANK, DRAWEE_BRANCH_CODE, FAVOURING, AMOUNT, INSTRUMENT_NO1, INSTRUMENT_NO2
        FROM REMIT_ISSUE WHERE BRANCH_ID = #BRANCH_CODE:VARCHAR# AND PROD_ID = #PROD_ID:VARCHAR#
        AND BATCH_DT BETWEEN #FROM_DT:DATE# AND #TO_DT:DATE# AND AUTHORIZE_STATUS= 'AUTHORIZED'
        <dynamic>
            <isNotPropertyAvailable prepend = "AND" property="AUTHORIZECHECK">
                PRINTED = 'Y'
            </isNotPropertyAvailable>
            <isPropertyAvailable prepend = "AND" property="AUTHORIZECHECK">
                PRINTED IS NULL 
            </isPropertyAvailable>
        </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement  name="updatePayorderdd" result-class="java.util.HashMap">
        UPDATE REMIT_ISSUE SET 
        PRINTED = 'Y',
        PRINT_STATUS_BY = #STATUS_BY:VARCHAR#
        WHERE ISSUE_ID = #ISSUE_ID:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement  name="updateRemitIssueForPrinting" result-class="java.util.HashMap">
        UPDATE REMIT_ISSUE SET 
        INSTRUMENT_NO1 = #ISTRUMENT_NO1:VARCHAR#,
        INSTRUMENT_NO2 = #ISTRUMENT_NO2:VARCHAR#
        WHERE ISSUE_ID = #ISSUE_ID:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement  name="updateMissedInstruments" result-class="java.util.HashMap">
        INSERT INTO MISSING_INSTRUMENTS ( 
        INSTRUMENT_NO1, INSTRUMENT_NO2, BRANCH_CODE)
        VALUES(  #ISTRUMENT_NO1:VARCHAR#, #ISTRUMENT_NO2:VARCHAR#, #BRANCH_CODE:VARCHAR#)
		
    </mapped-statement>
    <mapped-statement  name="checkForMissingInstruments" result-class="java.util.HashMap">
              <!-- SELECT NVL(COUNT(*),0) "CNT" FROM MISSING_INSTRUMENTS WHERE #MAX(INS2)#  BETWEEN
               START_INSTRUMENT_NO2 AND END_INSTRUMENT_NO2
               AND START_INSTRUMENT_NO1= #INS1# AND END_INSTRUMENT_NO1 = #INS1#
               AND BRANCH_CODE= #BRANCH_CODE# -->
               
        SELECT NVL(COUNT(*),0) "CNT" FROM MISSING_INSTRUMENTS WHERE ( TO_NUMBER(#MAX(INS2)#) BETWEEN
        START_INSTRUMENT_NO2 AND END_INSTRUMENT_NO2
        AND START_INSTRUMENT_NO1= #INS1:VARCHAR# AND END_INSTRUMENT_NO1 = #INS1:VARCHAR#)
        OR ( TO_NUMBER(#MAX(INS2)#) = START_INSTRUMENT_NO2 and START_INSTRUMENT_NO1= #INS1:VARCHAR#)
        AND BRANCH_CODE= #BRANCH_CODE:VARCHAR#
		
    </mapped-statement>
        
    <mapped-statement  name="checkForInventory" result-class="java.util.HashMap">
        SELECT LEAVES_SLNO_TO FROM INVENTORY_DETAILS WHERE INSTRUMENT_PREFIX = #INS1:VARCHAR#
        AND STATUS!='DELETED' AND INITIATED_BRANCH= #BRANCH_CODE:VARCHAR#
    </mapped-statement>
        
    <mapped-statement  name="GetStartSlNo" result-class="java.util.HashMap">
        SELECT ID.LEAVES_SLNO_FROM,ID.LEAVES_SLNO_TO, ID.INSTRUMENT_PREFIX  FROM  INVENTORY_DETAILS ID , INVENTORY_MASTER IM
        WHERE ID.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND ID.ITEM_ID = IM.ITEM_ID AND IM.ITEM_TYPE = #BEHAVES_LIKE:VARCHAR# AND ID.STATUS!='DELETED'
        AND IM.STATUS!='DELETED' ORDER BY ID.TRANS_ID
    </mapped-statement>
        
    <mapped-statement  name="getMaxInsNo" result-class="java.util.HashMap">
        SELECT MAX(to_number(INSTRUMENT_NO2)) INS2 FROM REMIT_ISSUE WHERE BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND  INSTRUMENT_NO1 = #INS1:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="selectRemitProductId" result-class="java.util.HashMap">
        SELECT PROD_ID,PAY_ISSUE_BRANCH FROM REMITTANCE_PRODUCT WHERE BEHAVES_LIKE = #BEHAVES_LIKE:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name ="getSelectDepositPayOrder" result-class = "java.util.HashMap">
        SELECT * FROM REMIT_ISSUE WHERE REMARKS = #REMARKS:VARCHAR# AND AUTHORIZE_STATUS IS NULL AND STATUS !='DELETED'
    </mapped-statement>
        
    <mapped-statement name ="updateSelectDepositPayOrder" result-class = "java.util.HashMap">
        UPDATE REMIT_ISSUE SET STATUS = #STATUS:VARCHAR# WHERE REMARKS = #DEPOSIT_NO:VARCHAR# 
    </mapped-statement>
        
        
    <dynamic-mapped-statement name="getServiceTax" result-class="java.util.LinkedHashMap">
        SELECT SERVICE_TAX AS "SERVICE_TAX"
        FROM  REMITTANCE_PROD_CHARGES WHERE PROD_ID = #PROD_ID:VARCHAR#
        AND (#AMOUNT# BETWEEN AMT_RANGE_FROM AND AMT_RANGE_TO OR 
        #AMOUNT# > (SELECT MAX(AMT_RANGE_TO) FROM 
        REMITTANCE_PROD_CHARGES WHERE PROD_ID = #PROD_ID:VARCHAR#
        AND CHARGE_TYPE = #CHARGE_TYPE:VARCHAR#
        AND CATEGORY = #CATEGORY:VARCHAR# AND ( STATUS != 'DELETED'OR STATUS IS NULL )
        <dynamic>
            <isNotEqual property="PAYABLE" compareValue="ISSU_BRANCH">
                AND BANK_CODE = #BANK_CODE:VARCHAR# AND BRANCH_CODE = #BRANCH_CODE:VARCHAR#
            </isNotEqual>
        </dynamic>
        ))
        AND CHARGE_TYPE = #CHARGE_TYPE:VARCHAR#
        AND CATEGORY = #CATEGORY:VARCHAR# AND ( STATUS != 'DELETED'OR STATUS IS NULL )
        <dynamic>
            <isNotEqual property="PAYABLE" compareValue="ISSU_BRANCH">
                AND BANK_CODE = #BANK_CODE:VARCHAR# AND BRANCH_CODE = #BRANCH_CODE:VARCHAR#
            </isNotEqual>
        </dynamic>
    </dynamic-mapped-statement> 
        
    <mapped-statement  name="checkValidInsNum" result-class="java.util.HashMap">
        SELECT ISSUE_ID,AUTHORIZE_STATUS from remit_issue where 
        STATUS != 'DELETED' AND INSTRUMENT_NO1 = #INSTRUMENT_NO1:VARCHAR# and 
        INSTRUMENT_NO2 = #INSTRUMENT_NO2:VARCHAR# and (AUTHORIZE_STATUS != 'REJECTED' OR AUTHORIZE_STATUS IS NULL)
    </mapped-statement>
        
    <mapped-statement name="authorizeBillsRemitIssue" result-class="java.util.HashMap">
        UPDATE REMIT_ISSUE SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_USER = #AUTHORIZE_USER:VARCHAR#,
        AUTHORIZE_DT = #TODAY_DT:DATE#
        WHERE REMARKS = #REMARKS:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="updateRemittanceDupIssueTO" result-class="java.util.HashMap">
        UPDATE REMIT_ISSUE SET 
        DUPLICATE_DT = #DUPLICATE_DT:DATE#,
        DUPLICATE_CHARGE = #DUPLICATE_CHARGE:NUMBER#,
        DUPLICATE_REMARKS = #DUPLICATE_REMARKS:VARCHAR#,
        PAID_STATUS = #PAID_STATUS:VARCHAR#,
        DUPLICATE_TRANS = #NEW_VARIABLE_NO:VARCHAR#,
        DUP_SERV_TAX = #DUP_SERV_TAX:NUMBER# WHERE
        VARIABLE_NO = #VARIABLE_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateRemittanceRevIssueTO" result-class="java.util.HashMap">
        UPDATE REMIT_ISSUE SET 
        REVALIDATE_DT = #REVALIDATE_DT:DATE#,
        REVALIDATE_CHARGE = #REVALIDATE_CHARGE:NUMBER#,
        REVALIDATE_REMARKS = #REVALIDATE_REMARKS:VARCHAR#,
        PAID_STATUS = #PAID_STATUS:VARCHAR#,
        REVALIDATE_TRANS = #NEW_VARIABLE_NO:VARCHAR#,
        REV_SERV_TAX = #REV_SERV_TAX:NUMBER# WHERE
        VARIABLE_NO = #VARIABLE_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getRevOldVariableNo" result-class="java.util.HashMap" >
        SELECT VARIABLE_NO FROM REMIT_ISSUE WHERE REVALIDATE_TRANS = #NEW_VARIABLE_NO:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="getDupOldVariableNo" result-class="java.util.HashMap" >
        SELECT VARIABLE_NO FROM REMIT_ISSUE WHERE DUPLICATE_TRANS = #NEW_VARIABLE_NO:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="updateRejectRemittanceDupIssueTO" result-class="java.util.HashMap">
        UPDATE REMIT_ISSUE SET 
        DUPLICATE_DT = NULL,
        DUPLICATE_CHARGE = NULL,
        DUPLICATE_REMARKS = NULL,
        PAID_STATUS = NULL,
        DUPLICATE_TRANS = NULL,
        DUP_SERV_TAX = NULL WHERE
        VARIABLE_NO = #VARIABLE_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateRejectRemittanceRevIssueTO" result-class="java.util.HashMap">
        UPDATE REMIT_ISSUE SET 
        REVALIDATE_DT = NULL,
        REVALIDATE_CHARGE = NULL,
        REVALIDATE_REMARKS = NULL,
        PAID_STATUS = NULL,
        REVALIDATE_TRANS = NULL,
        REV_SERV_TAX = NULL WHERE
        VARIABLE_NO = #VARIABLE_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getVarNoActClose" result-class="java.util.HashMap" >
        SELECT VARIABLE_NO FROM REMIT_ISSUE WHERE REMARKS = #value:VARCHAR#
        AND STATUS != 'DELETED' AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>
        
    <mapped-statement name="getAllLapsedRemittances" result-class="java.util.HashMap" >
        select ri.batch_dt,ri.instrument_no2,rp.LAPSE_PERIOD,
        (TO_DATE(#CUR_DATE#) - TO_DATE(ri.batch_dt)), rp.LAPSED_HD,rp.ISSUE_HD,ri.amount,
        ri.VARIABLE_NO,ri.instrument_no1
        from remit_issue ri,remittance_product rp where 
        (TO_DATE(#CUR_DATE#) - TO_DATE(ri.batch_dt)) > rp.LAPSE_PERIOD
        AND RI.INSTRUMENT_NO2 IS NOT NULL
        AND RI.AUTHORIZE_STATUS = 'AUTHORIZED'
        AND RI.STATUS != 'DELETED' and (ri.remarks != 'LAPSED' OR ri.remarks IS NULL) AND 
        RP.PROD_ID = RI.PROD_ID AND RI.PAID_STATUS IS NULL and rp.LAPSE_APPL in ('y','Y')
        and rp.STATUS != 'DELETED' AND RP.AUTHORIZE_STATUS = 'AUTHORIZED' AND
        RI.BRANCH_ID = #BRANCH_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateRemitIssueForLapse" result-class="java.util.HashMap">
        UPDATE REMIT_ISSUE SET
        REMARKS = 'LAPSED'
        WHERE 
        VARIABLE_NO = #VARIABLE_NO:VARCHAR#
    </mapped-statement>
        
</sql-map>
