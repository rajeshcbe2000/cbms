<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="DrawingPowerMaintenanceTOMap">

<!-- Use DrawingPowerMaintenanceTO object (JavaBean) properties as parameters for insert. 
     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertDrawingPowerMaintenanceTO" inline-parameters="true">
        INSERT INTO LOANS_DRAWING_POWER
        (BORROW_NO, PROD_ID, ACCT_NO, STOCK_STAT_FREQ, PREV_DPVALUE_CALCDT, PREV_DP_MONTH, PREV_DP_VALUE, CURR_DP_MONTH, DUE_DT, STOCK_SUBMIT_DT, GOODS_PARTICULARS, INSPECTION_DT, OPENING_STOCK_VALUE, PURCHASE, CLOSING_STOCK_VALUE, SALES, AUTHORIZE_REMARKS, AUTHORIZE_STATUS, SECURITY_NO, STATUS, STATUS_BY, STATUS_DT, AUTHORIZE_BY, AUTHORIZE_DT, BRANCH_CODE, CREATED_BY, CREATED_DT, INITIATED_BRANCH,STOCK_STAT_DAY,SERIAL_NO,NEXT_DUE_DT
        ) VALUES (
        #borrowNo:VARCHAR#, #prodId:VARCHAR#, #acctNo:VARCHAR#, #stockStatFreq:NUMERIC#, #prevDpvalueCalcdt:DATE#, #prevDpMonth:VARCHAR#, #prevDpValue:NUMERIC#, #currDpMonth:VARCHAR#, #dueDt:DATE#, #stockSubmitDt:DATE#, #goodsParticulars:VARCHAR#, #inspectionDt:DATE#, #openingStockValue:NUMERIC#, #purchase:NUMERIC#, #closingStockValue:NUMERIC#, #sales:NUMERIC#, #authorizeRemarks:VARCHAR#, #authorizeStatus:VARCHAR#, #securityNo:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #authorizeBy:VARCHAR#, #authorizeDt:DATE#, #branchCode:VARCHAR#, #createdBy:VARCHAR#, #createdDt:DATE#, #initiatedBranch:VARCHAR#,#stockStatDay:NUMERIC#,#serialNo:NUMBER#,#nextDueDt:DATE#)
    </mapped-statement>
<!-- Use DrawingPowerMaintenanceTO object (JavaBean) properties as parameters for update. 
     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateDrawingPowerMaintenanceTO" inline-parameters="true">
        UPDATE LOANS_DRAWING_POWER SET 
<!--	BORROW_NO = #borrowNo:VARCHAR#,
        PROD_ID = #prodId:VARCHAR#,
	ACCT_NO = #acctNo:VARCHAR#,
	SECURITY_NO = #securityNo:VARCHAR#,
        AUTHORIZE_BY = #authorizeBy:VARCHAR#,
	AUTHORIZE_DT = #authorizeDt:DATE#,
        AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
	AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#, -->
        STOCK_STAT_FREQ = #stockStatFreq:NUMERIC#,
        PREV_DPVALUE_CALCDT = #prevDpvalueCalcdt:DATE#,
        PREV_DP_MONTH = #prevDpMonth:VARCHAR#,
        PREV_DP_VALUE = #prevDpValue:NUMERIC#,
        CURR_DP_MONTH = #currDpMonth:VARCHAR#,
        DUE_DT = #dueDt:DATE#,
        NEXT_DUE_DT=#nextDueDt:DATE#,
        STOCK_SUBMIT_DT = #stockSubmitDt:DATE#,
        GOODS_PARTICULARS = #goodsParticulars:VARCHAR#,
        INSPECTION_DT = #inspectionDt:DATE#,
        OPENING_STOCK_VALUE = #openingStockValue:NUMERIC#,
        PURCHASE = #purchase:NUMERIC#,
        CLOSING_STOCK_VALUE = #closingStockValue:NUMERIC#,
        SALES = #sales:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        INITIATED_BRANCH = #initiatedBranch:VARCHAR#,
        STOCK_STAT_DAY = #stockStatDay:VARCHAR#
        WHERE ACCT_NO = #acctNo:VARCHAR#
        AND SERIAL_NO = #serialNo:NUMBER#
        AND AUTHORIZE_STATUS IS NULL
<!--    AND BORROW_NO = #borrowNo:VARCHAR# 
        AND SECURITY_NO = #securityNo:VARCHAR# -->
        AND STATUS NOT IN ('DELETED')
    </mapped-statement>

<!-- Use DrawingPowerMaintenanceTO object (JavaBean) properties as parameters for delete. 
     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteDrawingPowerMaintenanceTO" inline-parameters="true">
        UPDATE LOANS_DRAWING_POWER SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE ACCT_NO = #acctNo:VARCHAR#
        AND SERIAL_NO = #serialNo:NUMBER#
        AND AUTHORIZE_STATUS IS NULL
        AND STATUS NOT IN ('DELETED')
    </mapped-statement>

<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
     be auto-mapped results to DrawingPowerMaintenanceTO object (JavaBean) properties -->
    <result-map name="getDrawingPowerMaintenanceTOResult" class="com.see.truetransact.transferobject.termloan.drawingpower.DrawingPowerMaintenanceTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="acctNo" column="ACCT_NO"/>
        <property name="stockStatFreq" column="STOCK_STAT_FREQ"/>
        <property name="prevDpvalueCalcdt" column="PREV_DPVALUE_CALCDT"/>
        <property name="prevDpMonth" column="PREV_DP_MONTH"/>
        <property name="prevDpValue" column="PREV_DP_VALUE"/>
        <property name="currDpMonth" column="CURR_DP_MONTH"/>
        <property name="dueDt" column="DUE_DT"/>
        <property name="nextDueDt" column="NEXT_DUE_DT"/>
        <property name="stockSubmitDt" column="STOCK_SUBMIT_DT"/>
        <property name="goodsParticulars" column="GOODS_PARTICULARS"/>
        <property name="inspectionDt" column="INSPECTION_DT"/>
        <property name="openingStockValue" column="OPENING_STOCK_VALUE"/>
        <property name="purchase" column="PURCHASE"/>
        <property name="closingStockValue" column="CLOSING_STOCK_VALUE"/>
        <property name="sales" column="SALES"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="securityNo" column="SECURITY_NO"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="createdBy" column="CREATED_BY"/>
        <property name="createdDt" column="CREATED_DT"/>
        <property name="initiatedBranch" column="INITIATED_BRANCH"/>
        <property name="stockStatDay" column="STOCK_STAT_DAY"/>  
        <property name="serialNo" column="SERIAL_NO"/>  
    </result-map>
    
<!--    <mapped-statement name="getSelectDrawingPowerMaintenanceTO" result-map="getDrawingPowerMaintenanceTOResult" >
	SELECT * FROM LOANS_DRAWING_POWER 
	WHERE ACCT_NO = #ACCOUNT NUMBER:VARCHAR# -->
<!--        AND BORROW_NO = #BORROWER NUMBER# 
        AND SECURITY_NO = #SECURITY NUMBER# -->
<!--        AND STATUS NOT IN ('DELETED')
    </mapped-statement> -->
    
    <dynamic-mapped-statement name="getBorrowerList" result-class="java.util.LinkedHashMap">
        SELECT LB.BORROW_NO, LFD.ACCT_NUM, C.CUST_ID, 
        get_cust_name(c.cust_id) AS CUST_NAME, 
        LFD.PROD_ID,  LP.ACCT_HEAD ,NVL(LFD.DRAWING_POWER,'N') DRAWING_POWER FROM LOANS_BORROWER LB, CUSTOMER C, 
        LOANS_FACILITY_DETAILS LFD, LOANS_PRODUCT LP
        WHERE LB.BORROW_NO = LFD.BORROW_NO AND 
        LB.STATUS NOT IN ('DELETED') AND 
        LFD.STATUS NOT IN ('DELETED') AND 
        LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED' AND 
       <!-- LFD.AUTHORIZE_STATUS_2 = 'AUTHORIZED' AND--> 
        LB.CUST_ID = C.CUST_ID AND LP.PROD_ID = LFD.PROD_ID 
        <!-- BEFORE CC ONLY IS THEIR-->
        AND LP.BEHAVES_LIKE IN ('CC','OD') AND LFD.BRANCH_ID = #BRANCH_CODE:VARCHAR# 
        <!-- To prevent duplication of Recore... -->
       <!-- AND LFD.ACCT_NUM NOT IN (SELECT ACCT_NO FROM LOANS_DRAWING_POWER
                                 WHERE  STATUS != 'DELETED')-->
<!--          AND  NOT EXISTS (SELECT ACCT_NO FROM LOANS_DRAWING_POWER
                                 WHERE  STATUS != 'DELETED' AND LFD.ACCT_NUM=ACCT_NO) -->    
            <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "BORROW_NO" >
                    UPPER(LB.BORROW_NO) LIKE UPPER('%$BORROW_NO$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "ACCT_NUM" >
                    UPPER(LFD.ACCT_NUM) LIKE UPPER('%$ACCT_NUM$%')
                </isNotEmpty>
            </isParameterPresent>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "CUST_NAME" >
                    UPPER(get_cust_name(c.cust_id)) LIKE UPPER('%$CUST_NAME$%')
                </isNotEmpty>
            </isParameterPresent>
              <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "PROD_ID" >
                    UPPER(LFD.PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "ACCT_HEAD" >
                    UPPER(LP.ACCT_HEAD) LIKE UPPER('%$ACCT_HEAD$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "DRAWING_POWER" >
                    UPPER(NVL(LFD.DRAWING_POWER,'N')) LIKE UPPER('%$DRAWING_POWER$%')
                </isNotEmpty>
            </isParameterPresent>
            </dynamic>
        ORDER BY  LB.BORROW_NO, LFD.ACCT_NUM, C.CUST_ID
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="getSecurityDetailsForCust" result-class="java.util.LinkedHashMap">
        SELECT SECURITY_NO, SECURITY_CATEGORY, SECURITY_TYPE, SECURITY_VALUE, SECURITY_VALUE_ON
        FROM CUST_SECURITY_DETAILS 
        WHERE CUST_ID = #CUST_ID:VARCHAR# 
        AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "SEC_NO_LIST" >
                    SECURITY_NO NOT IN ($SEC_NO_LIST$)
                </isNotEmpty>
            </isParameterPresent>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "SECURITY_NO" >
                    UPPER(SECURITY_NO) LIKE UPPER('%$SECURITY_NO$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "SECURITY_CATEGORY" >
                    UPPER(SECURITY_CATEGORY) LIKE UPPER('%$SECURITY_CATEGORY$%')
                </isNotEmpty>
            </isParameterPresent>
               <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "SECURITY_VALUE" >
                    UPPER(SECURITY_VALUE) LIKE UPPER('%$SECURITY_VALUE$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "SECURITY_VALUE_ON" >
                    UPPER(SECURITY_VALUE_ON) LIKE UPPER('%$SECURITY_VALUE_ON$%')
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="ViewAllDrawingPowerMaintenanceTO" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT LDP.ACCT_NO AS "Account Number", LDP.PROD_ID AS "Product ID", LDP.BORROW_NO AS "Borrower Number"
        FROM LOANS_DRAWING_POWER LDP  
        WHERE LDP.STATUS NOT IN ('DELETED') AND LDP.BRANCH_CODE = #BRANCH_CODE:VARCHAR# 
         <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Account Number" >
                    UPPER(LDP.ACCT_NO) LIKE UPPER('%$Account Number$%')
                </isNotEmpty>
            </isParameterPresent>
              <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Product ID" >
                    UPPER(LDP.PROD_ID) LIKE UPPER('%$Product ID$%')
                </isNotEmpty>
            </isParameterPresent>
              <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Borrower Number" >
                    UPPER(LDP.BORROW_NO) LIKE UPPER('%$Borrower Number$%')
                </isNotEmpty>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
    
    <!-- =================================================================================== -->        
<!--Authorization Queries -->
    <dynamic-mapped-statement name="getDrawingPowerMaintenanceAuthorizeList" result-class="java.util.LinkedHashMap">
        SELECT DISTINCT BORROW_NO AS "Borrower Number", PROD_ID AS "Product ID", ACCT_NO AS "Account Number"
        FROM LOANS_DRAWING_POWER
        WHERE STATUS != 'DELETED' 
        AND INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# 
        AND STATUS_BY != #USER_ID:VARCHAR# 
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = LOANS_DRAWING_POWER.STATUS_BY)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AUTHORIZE_STATUS IS NULL OR 
                AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
 
    </dynamic-mapped-statement>
     
    <mapped-statement name="authorizeDrawingPowerMaintenance" result-class="java.util.HashMap">
        UPDATE LOANS_DRAWING_POWER SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,	
        AUTHORIZE_BY = #USER_ID:VARCHAR#,
        AUTHORIZE_DT = #AUTHORIZEDT:DATE#
        WHERE ACCT_NO = #ACCOUNT NUMBER:VARCHAR#
        AND STATUS != 'DELETED'
        AND AUTHORIZE_STATUS IS NULL
<!--        AND BORROW_NO = #BORROWER NUMBER# 
        AND SECURITY_NO = #SECURITY NUMBER# -->
    </mapped-statement>
<!-- =================================================================================== --> 
    
        
<!-- Use DrawingPowerMaintenanceDetailsTO object (JavaBean) properties as parameters for insert. 
     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertDrawingPowerMaintenanceDetailsTO" inline-parameters="true">
        INSERT INTO LOANS_DRAWING_POWER_DETAILS
        (BORROW_NO, PROD_ID, ACCT_NO, SECURITY_NO, SL_NO, PRESENT_STOCK_VALUE, MARGIN, LAST_STOCK_VALUE, CALC_DRAWING_POWER, STATUS, STATUS_BY, STATUS_DT,MARGIN_AMT
        ) VALUES (
        #borrowNo:VARCHAR#, #prodId:VARCHAR#, #acctNo:VARCHAR#, #securityNo:VARCHAR#, #slNo:VARCHAR#, #presentStockValue:NUMERIC#, #margin:NUMERIC#, #lastStockValue:NUMERIC#, #calcDrawingPower:NUMERIC#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#,#marginAmt:NUMERIC#)
    </mapped-statement>

<!-- Use DrawingPowerMaintenanceDetailsTO object (JavaBean) properties as parameters for update. 
     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateDrawingPowerMaintenanceDetailsTO" inline-parameters="true">
        UPDATE LOANS_DRAWING_POWER_DETAILS SET 
<!--	BORROW_NO = #borrowNo:VARCHAR#,
	PROD_ID = #prodId:VARCHAR#,
	ACCT_NO = #acctNo:VARCHAR#,
	SECURITY_NO = #securityNo:VARCHAR#, 
	SL_NO = #slNo:VARCHAR#,-->
        PRESENT_STOCK_VALUE = #presentStockValue:NUMERIC#,
        MARGIN = #margin:NUMERIC#,
        LAST_STOCK_VALUE = #lastStockValue:NUMERIC#,
        CALC_DRAWING_POWER = #calcDrawingPower:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        MARGIN_AMT = #marginAmt:NUMERIC#
        WHERE ACCT_NO = #acctNo:VARCHAR#
<!--        AND BORROW_NO = #borrowNo:VARCHAR# 
        AND SECURITY_NO = #securityNo:VARCHAR# -->
        AND SL_NO = #slNo:VARCHAR#
    </mapped-statement>

<!-- Use DrawingPowerMaintenanceDetailsTO object (JavaBean) properties as parameters for delete. 
     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteDrawingPowerMaintenanceDetailsTO" inline-parameters="true">
<!--	DELETE FROM LOANS_DRAWING_POWER_DETAILS 
	WHERE -->
        UPDATE LOANS_DRAWING_POWER_DETAILS SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE ACCT_NO = #acctNo:VARCHAR#
<!--        AND BORROW_NO = #borrowNo:VARCHAR# 
        AND SECURITY_NO = #securityNo:VARCHAR# -->
        AND SL_NO = #slNo:VARCHAR#
    </mapped-statement> 
    
    <mapped-statement name="authorizeDrawingPowerMaintenanceDetails" result-class="java.util.HashMap">
        UPDATE LOANS_DRAWING_POWER_DETAILS SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,	
        AUTHORIZE_BY = #USER_ID:VARCHAR#,
        AUTHORIZE_DT = (SELECT SYS_DATE() FROM DUAL),
        SECURITY_NO = #SECURITY_NO:VARCHAR#
        WHERE ACCT_NO = #ACCOUNT NUMBER:VARCHAR#
        AND STATUS != 'DELETED'
        AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>

<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
     be auto-mapped results to DrawingPowerMaintenanceDetailsTO object (JavaBean) properties -->
    <result-map name="getDrawingPowerMaintenanceDetailsTOResult" class="com.see.truetransact.transferobject.termloan.drawingpower.DrawingPowerMaintenanceDetailsTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="acctNo" column="ACCT_NO"/>
        <property name="securityNo" column="SECURITY_NO"/>
        <property name="slNo" column="SL_NO"/>
        <property name="presentStockValue" column="PRESENT_STOCK_VALUE"/>
        <property name="margin" column="MARGIN"/>
        <property name="lastStockValue" column="LAST_STOCK_VALUE"/>
        <property name="calcDrawingPower" column="CALC_DRAWING_POWER"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="marginAmt" column="MARGIN_AMT"/>
    </result-map>
    
    <mapped-statement name="getSelectDrawingPowerMaintenanceDetailsTO" result-map="getDrawingPowerMaintenanceDetailsTOResult" >
        SELECT * FROM LOANS_DRAWING_POWER_DETAILS 
        WHERE 
    </mapped-statement>
    
    <mapped-statement name="Drawing_Power.getSerialNumber" result-class="java.util.LinkedHashMap" >
        SELECT COUNT(SL_NO) AS "SERIAL NUMBER"
        FROM LOANS_DRAWING_POWER_DETAILS
        WHERE SECURITY_NO = #SECURITY_NO:VARCHAR# 
<!--        AND BORROW_NO = #BORROW_NO#-->
        AND ACCT_NO = #ACCT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="DrawingPowerMaintenanceDetails" result-class="java.util.LinkedHashMap" >
        SELECT SECURITY_NO,BORROW_NO, SL_NO, PRESENT_STOCK_VALUE, MARGIN,MARGIN_AMT,LAST_STOCK_VALUE, 
        CALC_DRAWING_POWER,STATUS,AUTHORIZE_STATUS FROM LOANS_DRAWING_POWER_DETAILS
        WHERE ACCT_NO = #ACCOUNT NUMBER:VARCHAR#
<!--        AND SECURITY_NO = #SECURITY NUMBER# -->
        AND STATUS NOT IN ('DELETED')
        ORDER BY TO_NUMBER(SL_NO)
    </mapped-statement> 
    
    <mapped-statement name="getSelectDrawingPowerMaintenanceTO" result-class="java.util.LinkedHashMap" >
        SELECT * FROM LOANS_DRAWING_POWER 
        WHERE ACCT_NO = #ACCOUNT NUMBER:VARCHAR#
        AND STATUS NOT IN ('DELETED') ORDER BY SERIAL_NO
    </mapped-statement>
    
    <mapped-statement name="getPreviousMonthDetails" result-class="java.util.LinkedHashMap" >
        SELECT PREV_DPVALUE_CALCDT,CURR_DP_MONTH,STOCK_STAT_FREQ,STOCK_STAT_DAY,PREV_DP_VALUE,DUE_DT,
        CLOSING_STOCK_VALUE FROM LOANS_DRAWING_POWER WHERE STATUS!='DELETED' AND PREV_DPVALUE_CALCDT 
        IN(SELECT MAX(PREV_DPVALUE_CALCDT)FROM LOANS_DRAWING_POWER WHERE ACCT_NO = #ACCT_NO:VARCHAR#
        AND STATUS!='DELETED')
    </mapped-statement> 
    
    <mapped-statement name="getAuthorizedRecordsDetails" result-class="java.util.LinkedHashMap" >
        SELECT ACCT_NO FROM LOANS_DRAWING_POWER WHERE ACCT_NO = #ACCT_NO:VARCHAR# AND 
        SERIAL_NO = #SL_NO:NUMBER# AND STATUS!='DELETED' AND AUTHORIZE_STATUS IS NOT NULL
<!--        (AUTHORIZE_STATUS = 'AUTHORIZED' OR AUTHORIZE_STATUS = 'REJECTED') -->
    </mapped-statement>     
    
    <mapped-statement name="updateAvailBalanceForAdvances" result-class="java.util.HashMap">
        UPDATE LOANS_FACILITY_DETAILS SET AVAILABLE_BALANCE = #AVAILABLE_BALANCE:NUMBER#,
        LOAN_PAID_INT = LOAN_PAID_INT + #LOAN_PAID_INT:NUMBER# WHERE ACCT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getSelectAuthStatusofDP" result-class = "java.util.HashMap">
        SELECT AUTHORIZE_STATUS FROM LOANS_DRAWING_POWER_DETAILS WHERE STATUS != 'DELETED' 
        AND ACCT_NO = #ACCT_NO:VARCHAR# AND AUTHORIZE_STATUS IS NULL 
    </mapped-statement>
    
<!--    <mapped-statement name="getSelectAuthStatusNullAmtofDP" result-class = "java.util.HashMap">
        SELECT SUM(NVL(CALC_DRAWING_POWER,0)) AS "DRAWING_POWER" FROM LOANS_DRAWING_POWER_DETAILS 
        WHERE STATUS != 'DELETED' AND ACCT_NO = #ACT_NUM# AND AUTHORIZE_STATUS !='REJECTED'       
    </mapped-statement> -->
    
    <mapped-statement name="getSelectAuthStatusNotNullofDP" result-class = "java.util.HashMap">
        SELECT SUM(NVL(CALC_DRAWING_POWER,0)) AS "DRAWING_POWER" FROM LOANS_DRAWING_POWER_DETAILS 
        WHERE STATUS != 'DELETED'AND ACCT_NO = #ACT_NUM:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND AUTHORIZE_DT IN(SELECT MAX(AUTHORIZE_DT) FROM LOANS_DRAWING_POWER_DETAILS WHERE 
        ACCT_NO = #ACT_NUM:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED') 
    </mapped-statement>
    
    <mapped-statement name="getSelectTODCreatedDate" result-class = "java.util.HashMap">
        SELECT FROM_DT FROM TOD_ALLOWED WHERE TRANS_ID = #SECURITY_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="Tod.updateAvailableBalanceAD" result-class="java.util.HashMap">
        UPDATE LOANS_FACILITY_DETAILS SET AVAILABLE_BALANCE = #AMOUNT:NUMBER#,
        LOAN_PAID_INT = #LOAN_PAID_INT:NUMBER# WHERE ACCT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="Tod.updateBalancesAD" result-class="java.util.HashMap">
        UPDATE LOANS_FACILITY_DETAILS
        SET AVAILABLE_BALANCE = #AMOUNT:NUMBER#,
        LOAN_PAID_INT = nvl(CLEAR_BALANCE,0)+(SELECT NVL(LIMIT,0) FROM LOANS_SANCTION_DETAILS,LOANS_FACILITY_DETAILS
        WHERE LOANS_SANCTION_DETAILS.SANCTION_NO=LOANS_FACILITY_DETAILS.SANCTION_NO AND
        LOANS_SANCTION_DETAILS.SL_NO=LOANS_FACILITY_DETAILS.SL_NO AND LOANS_FACILITY_DETAILS.ACCT_NUM=#ACT_NUM:VARCHAR#)
        WHERE ACCT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getLoanAcDetailsIndividualJoint" result-class = "java.util.HashMap">
        SELECT BORROW_NO FROM LOANS_BORROWER WHERE BORROW_NO=#ACCT_NO:VARCHAR# AND (CONSTITUTION='INDIVIDUAL' OR CONSTITUTION='JOINT_ACCOUNT') AND STATUS!='DELETED'
        AND AUTHORIZE_STATUS='AUTHORIZED'
    </mapped-statement>
    
</sql-map>