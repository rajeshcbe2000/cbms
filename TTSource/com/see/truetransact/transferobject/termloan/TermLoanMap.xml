<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="TermLoanMap">

	<!-- Use TermLoanBorrowerTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanBorrowerTO" inline-parameters="true">
        INSERT INTO LOANS_BORROWER
        (BORROW_NO, CUST_ID, CONSTITUTION, CATEGORY, "references", AUTHORIZE_REMARKS, AUTHORIZE_STATUS, STATUS, AUTHORIZED_BY, AUTHORIZED_DT, 
        STATUS_BY, STATUS_DT, BRANCH_CODE, INITIATED_BRANCH,SHG_ID,APPLICATION_NO
        ) VALUES (
        #borrowNo:VARCHAR#, #custId:VARCHAR#, #constitution:VARCHAR#, #category:VARCHAR#, #references:VARCHAR#, #authorizeRemarks:VARCHAR#, 
        #authorizeStatus:VARCHAR#, #status:VARCHAR#, #authorizedBy:VARCHAR#, #authorizedDt:TIMESTAMP#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, 
        #branchCode:VARCHAR#, #initiatedBranch:VARCHAR#,#shgID:VARCHAR#,#applicationNo:VARCHAR#)
    </mapped-statement>

	<!-- Use TermLoanBorrowerTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanBorrowerTO" inline-parameters="true">
        UPDATE LOANS_BORROWER SET 
<!--		BORROW_NO = #borrowNo:VARCHAR#,-->
        CUST_ID = #custId:VARCHAR#,
        CONSTITUTION = #constitution:VARCHAR#,
        CATEGORY = #category:VARCHAR#,
        "references" = #references:VARCHAR#,
        SHG_ID = #shgID:VARCHAR#,       
        APPLICATION_NO = #applicationNo:VARCHAR#,
<!--		AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR# -->
        STATUS = #status:VARCHAR#,
        BRANCH_CODE = #branchCode:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        INITIATED_BRANCH = #initiatedBranch:VARCHAR# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanBorrowerTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanBorrowerTO" inline-parameters="true">
<!--		DELETE FROM LOANS_BORROWER 
		WHERE BORROW_NO = #borrowNo:VARCHAR#-->
        UPDATE LOANS_BORROWER SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
    <mapped-statement name="updateStatusForAccountTL" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET 
        ACCT_STATUS = #ACCT_STATUS:VARCHAR#,
        ACCT_CLOSE_DT = NULL
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getProdIdForSelectedItem" result-class="java.util.HashMap" >
        select MAX_AMT_OF_CASH_PAYMENT from LOANS_PROD_ACPARAM where PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name="getProdIdTypeForSelectedAct" result-class="java.util.HashMap" >
        select prod_type,prod_id,ACCT_STATUS from ALL_PRODUCT_ACCTS1
        <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "WHERE" property = "ACCT_NUM" >
                    ACT_NUM=#ACCT_NUM:VARCHAR#
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "WHERE" property = "PROD_ID" >
                    PROD_ID=#PROD_ID:VARCHAR#
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        
    </dynamic-mapped-statement>
    
    <mapped-statement name="getInitInterestTL"  result-class="java.util.HashMap">
        select GET_TL_INIT_INTEREST(#ACCT_NUM:VARCHAR#) as INTEREST from dual
    </mapped-statement>
    
    
    <mapped-statement name="authorizeAcctStatusTL"  inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET 
        ACCT_STATUS = #ACCOUNT_STATUS:VARCHAR#,
        ACCT_CLOSE_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE ACCT_NUM = #ACCOUNTNO:VARCHAR#	
    </mapped-statement>
    
    <dynamic-mapped-statement name="getStatusForAccountTL" result-class="java.util.HashMap" >
        SELECT ACCT_NUM, ACCT_STATUS, CREATED_BY, ACCT_CLOSE_DT FROM LOANS_FACILITY_DETAILS
        <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "" property = "ACCT_CLOSE_DT" >
                    AS OF TIMESTAMP #ACCT_CLOSE_DT:DATE#
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        WHERE ACCT_NUM=#ACCT_NUM:VARCHAR#
    </dynamic-mapped-statement>
	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanBorrowerTO object (JavaBean) properties -->
    <result-map name="getTermLoanBorrowerTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanBorrowerTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="custId" column="CUST_ID"/>
        <property name="constitution" column="CONSTITUTION"/>
        <property name="shgID" column="SHG_ID"/>
        <property name="applicationNo" column="APPLICATION_NO"/>
        <property name="category" column="CATEGORY"/>
        <property name="references" column="REFERENCES"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="initiatedBranch" column="INITIATED_BRANCH"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanBorrowerTO" result-map = "getTermLoanBorrowerTOResult" >
        SELECT * FROM LOANS_BORROWER 
        WHERE BORROW_NO = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
    <dynamic-mapped-statement name="viewTermLoan" result-class = "java.util.LinkedHashMap" >
        <!--SELECT LOANS_BORROWER.BORROW_NO AS "BORROWER NO", LOANS_BORROWER.CUST_ID AS "CUSTOMER ID", 
        CUSTOMER.FNAME || ' ' || CUSTOMER.MNAME || ' ' || CUSTOMER.LNAME AS "CUSTOMER NAME"
        FROM LOANS_BORROWER, CUSTOMER WHERE LOANS_BORROWER.BRANCH_CODE = #BRANCH_ID# AND 
        (LOANS_BORROWER.STATUS = 'CREATED' OR LOANS_BORROWER.STATUS = 'MODIFIED')
        AND (LOANS_BORROWER.CUST_ID = CUSTOMER.CUST_ID) ORDER BY "BORROWER NO" -->
        <!--SELECT LOANS_FACILITY_DETAILS.ACCT_NUM , MEMBERSHIP_NO,PROD_DESC,LOANS_FACILITY_DETAILS.RENEWAL_ACCT_NO AS "RENEWED_LOAN_NO" ,get_cust_name(CUSTOMER.CUST_ID) AS "CUSTOMER NAME",
        LOANS_BORROWER.CUST_ID AS "CUSTOMER ID",LSD.LIMIT AS SANCTION_AMT,LSD.FROM_DT AS ACCOUNT_OPENDT,
        LCD.ASSET_STATUS,LOANS_FACILITY_DETAILS.ACCT_STATUS,LOANS_BORROWER.BORROW_NO AS "BORROWER NO",LOANS_FACILITY_DETAILS.PROD_ID,OAN.OLD_ACT_NUM
        FROM--> <!--LOANS_BORROWER, CUSTOMER,LOANS_FACILITY_DETAILS,LOANS_SANCTION_DETAILS LSD,LOANS_CLASSIFY_DETAILS LCD ,OLD_AC_NOS OAN,loans_product-->
        <!--CUSTOMER,
         LOANS_CLASSIFY_DETAILS LCD,
         OLD_AC_NOS            OAN LEFT JOIN LOANS_FACILITY_DETAILS ON
         OAN.NEW_ACT_NUM = LOANS_FACILITY_DETAILS.ACCT_NUM JOIN 
         loans_product ON LOANS_FACILITY_DETAILS.PROD_ID = LOANS_PRODUCT.PROD_ID JOIN
         LOANS_BORROWER ON LOANS_FACILITY_DETAILS.BORROW_NO = LOANS_BORROWER.BORROW_NO JOIN
         LOANS_SANCTION_DETAILS LSD ON LSD.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO AND
         LSD.SL_NO = LOANS_FACILITY_DETAILS.SL_NO-->
         SELECT LOANS_FACILITY_DETAILS.ACCT_NUM,
         MEMBERSHIP_NO,
         PROD_DESC,
         LOANS_FACILITY_DETAILS.RENEWAL_ACCT_NO AS "RENEWED_LOAN_NO",
         get_cust_name(customer.cust_id)
            AS "CUSTOMER NAME",
         LOANS_BORROWER.CUST_ID AS "CUSTOMER ID",
         LSD.LIMIT AS SANCTION_AMT,
         LSD.FROM_DT AS ACCOUNT_OPENDT,
         LCD.ASSET_STATUS,
         LOANS_FACILITY_DETAILS.ACCT_STATUS,
         LOANS_BORROWER.BORROW_NO AS "BORROWER NO",
         LOANS_FACILITY_DETAILS.PROD_ID,
         OAN.OLD_ACT_NUM
    FROM LOANS_BORROWER
         JOIN LOANS_FACILITY_DETAILS ON LOANS_FACILITY_DETAILS.BORROW_NO = LOANS_BORROWER.BORROW_NO
		 LEFT JOIN OLD_AC_NOS OAN ON OAN.NEW_ACT_NUM  = LOANS_FACILITY_DETAILS.ACCT_NUM ,
         CUSTOMER,
         LOANS_SANCTION_DETAILS LSD,
         LOANS_CLASSIFY_DETAILS LCD,
         loans_product
        WHERE 
        LOANS_BORROWER.BRANCH_CODE = #BRANCH_ID:VARCHAR# AND   <!--LOANS_FACILITY_DETAILS.BORROW_NO=LOANS_BORROWER.BORROW_NO AND-->
        (LOANS_BORROWER.STATUS = 'CREATED' OR LOANS_BORROWER.STATUS = 'MODIFIED') AND LSD.STATUS !='DELETED' AND 
         LSD.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO
         AND LSD.SL_NO = LOANS_FACILITY_DETAILS.SL_NO
        <!--LSD.BORROW_NO
        =LOANS_FACILITY_DETAILS.BORROW_NO AND  LSD.SL_NO 
        =LOANS_FACILITY_DETAILS.SL_NO 
        AND --> and (LOANS_FACILITY_DETAILS.AUTHORIZE_STATUS_1 IS NULL OR LOANS_FACILITY_DETAILS.AUTHORIZE_STATUS_1 !='REJECTED') 
        AND LOANS_FACILITY_DETAILS.PROD_ID = LOANS_PRODUCT.PROD_ID
        <!--AND LOANS_FACILITY_DETAILS.PROD_ID=LOANS_PRODUCT.PROD_ID
        AND OAN.NEW_ACT_NUM(+)=LOANS_FACILITY_DETAILS.ACCT_NUM-->
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="CLOSED_ACCT">
                    ACCT_STATUS='CLOSED'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="GOLD_LOAN">
                    ACCT_STATUS !='RENEWAL'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="ACCT_NUMBER">
                    LOANS_FACILITY_DETAILS.ACCT_NUM=#ACCT_NUMBER:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LOANS_BORROWER.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="PROD_ID">
                    LOANS_FACILITY_DETAILS.PROD_ID = #PROD_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic> 
        AND LSD.SANCTION_NO=LOANS_FACILITY_DETAILS.SANCTION_NO AND
        LOANS_FACILITY_DETAILS.ACCT_NUM =LCD.ACCT_NUM
        AND (LOANS_BORROWER.CUST_ID = CUSTOMER.CUST_ID) AND NOT EXISTS
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')
        AND LOANS_BORROWER.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
         <dynamic>
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBERSHIP_NO">
                    UPPER(MEMBERSHIP_NO) LIKE UPPER('%$MEMBERSHIP_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="ACCT_NUM">
                    UPPER(LOANS_FACILITY_DETAILS.ACCT_NUM) LIKE UPPER('%$ACCT_NUM$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="RENEWED_LOAN_NO">
                    UPPER(LOANS_FACILITY_DETAILS.RENEWAL_ACCT_NO) LIKE UPPER('%$RENEWED_LOAN_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER ID">
                    UPPER(LOANS_BORROWER.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER NAME">
                    UPPER(get_cust_name(CUSTOMER.CUST_ID)) LIKE UPPER('%$CUSTOMER NAME$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="BORROWER NO">
                    UPPER(LOANS_BORROWER.BORROW_NO) LIKE UPPER('%$BORROWER NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="SANCTION_AMT">
                    UPPER(LSD.LIMIT) LIKE UPPER('%$SANCTION_AMT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="SANCTION_AMT">
                    UPPER(LSD.LIMIT) LIKE UPPER('%$SANCTION_AMT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ACCOUNT_OPENDT">
                    UPPER(LSD.FROM_DT) LIKE UPPER('%$ACCOUNT_OPENDT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ASSET_STATUS">
                    UPPER(LCD.ASSET_STATUS) LIKE UPPER('%$ASSET_STATUS$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ACCT_STATUS">
                    UPPER(LOANS_FACILITY_DETAILS.ACCT_STATUS) LIKE UPPER('%$ACCT_STATUS$%')
                </isNotNull>
            </isParameterPresent>
                <isParameterPresent>
                <isNotNull prepend="AND"   property="OLD_ACT_NUM">
                    UPPER(OAN.OLD_ACT_NUM) LIKE UPPER('%$OLD_ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
            ORDER BY "BORROWER NO" 
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="" property="FILTERED_LIST" compareValue="FILTERED_LIST_org.postgresql.Driver" >
                    limit 100
                </isEqual>
            </isPropertyAvailable>
           </dynamic>       
    </dynamic-mapped-statement>
    <dynamic-mapped-statement name="viewGoldLoan" result-class = "java.util.LinkedHashMap" >
        <!--SELECT LOANS_BORROWER.BORROW_NO AS "BORROWER NO", LOANS_BORROWER.CUST_ID AS "CUSTOMER ID", 
        CUSTOMER.FNAME || ' ' || CUSTOMER.MNAME || ' ' || CUSTOMER.LNAME AS "CUSTOMER NAME"
        FROM LOANS_BORROWER, CUSTOMER WHERE LOANS_BORROWER.BRANCH_CODE = #BRANCH_ID# AND 
        (LOANS_BORROWER.STATUS = 'CREATED' OR LOANS_BORROWER.STATUS = 'MODIFIED')
        AND (LOANS_BORROWER.CUST_ID = CUSTOMER.CUST_ID) ORDER BY "BORROWER NO" -->
        SELECT LOANS_FACILITY_DETAILS.ACCT_NUM , MEMBERSHIP_NO,  LOANS_FACILITY_DETAILS.RENEWAL_ACCT_NO AS "RENEWED_LOAN_NO" ,get_cust_name(CUSTOMER.CUST_ID) AS "CUSTOMER NAME",
        LOANS_BORROWER.CUST_ID AS "CUSTOMER ID",LSD.LIMIT AS SANCTION_AMT,LSD.FROM_DT AS ACCOUNT_OPENDT,
        LCD.ASSET_STATUS,LOANS_FACILITY_DETAILS.ACCT_STATUS,LOANS_BORROWER.BORROW_NO AS "BORROWER NO",LOANS_FACILITY_DETAILS.PROD_ID,OAN.OLD_ACT_NUM
        FROM CUSTOMER,
	LOANS_CLASSIFY_DETAILS LCD,LOANS_FACILITY_DETAILS left join 
	OLD_AC_NOS OAN on OAN.NEW_ACT_NUM = LOANS_FACILITY_DETAILS.ACCT_NUM
    join LOANS_BORROWER on LOANS_FACILITY_DETAILS.BORROW_NO = LOANS_BORROWER.BORROW_NO join
    LOANS_SANCTION_DETAILS LSD on LSD.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO
        WHERE 
        <!--LOANS_BORROWER.BRANCH_CODE = #BRANCH_ID:VARCHAR# AND   LOANS_FACILITY_DETAILS.BORROW_NO=LOANS_BORROWER.BORROW_NO AND
        (LOANS_BORROWER.STATUS = 'CREATED' OR LOANS_BORROWER.STATUS = 'MODIFIED') AND LSD.STATUS !='DELETED' AND LSD.BORROW_NO
        =LOANS_FACILITY_DETAILS.BORROW_NO AND  LSD.SL_NO 
        =LOANS_FACILITY_DETAILS.SL_NO 
        AND (LOANS_FACILITY_DETAILS.AUTHORIZE_STATUS_1 IS NULL OR LOANS_FACILITY_DETAILS.AUTHORIZE_STATUS_1 !='REJECTED') 
        AND OAN.NEW_ACT_NUM(+)=LOANS_FACILITY_DETAILS.ACCT_NUM-->
        LOANS_BORROWER.BRANCH_CODE = #BRANCH_ID:VARCHAR#
	AND (LOANS_BORROWER.STATUS = 'CREATED' OR LOANS_BORROWER.STATUS = 'MODIFIED')
	AND LSD.STATUS != 'DELETED'
	AND LSD.SL_NO = LOANS_FACILITY_DETAILS.SL_NO
	<!--AND (LOANS_FACILITY_DETAILS.AUTHORIZE_STATUS_1 IS NULL
						OR LOANS_FACILITY_DETAILS.AUTHORIZE_STATUS_1 != 'REJECTED')-->
        AND LOANS_FACILITY_DETAILS.AUTHORIZE_STATUS_1 = 'AUTHORIZED'                                         
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="CLOSED_ACCT">
                    ACCT_STATUS='CLOSED'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="NOT_CLOSED_ACCT">
                    ACCT_STATUS!='CLOSED'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="GOLD_LOAN">
                    ACCT_STATUS !='RENEWAL'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        
       <!-- <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="ACCT_NUM">
                    LOANS_FACILITY_DETAILS.ACCT_NUM=#ACCT_NUM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>-->
        
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LOANS_BORROWER.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        
        AND  LOANS_FACILITY_DETAILS.PROD_ID in (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK ='GOLD_LOAN')  
        AND LSD.SANCTION_NO=LOANS_FACILITY_DETAILS.SANCTION_NO AND
        LOANS_FACILITY_DETAILS.ACCT_NUM =LCD.ACCT_NUM
        AND (LOANS_BORROWER.CUST_ID = CUSTOMER.CUST_ID) AND NOT EXISTS
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')
        AND LOANS_BORROWER.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
        <dynamic>
         <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ACCT_NUM">
                    UPPER(LOANS_FACILITY_DETAILS.ACCT_NUM) LIKE UPPER('%$ACCT_NUM$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="ACCOUNT_OPENDT">
                    UPPER(LSD.FROM_DT) LIKE UPPER('%$ACCOUNT_OPENDT$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBERSHIP_NO">
                    UPPER(MEMBERSHIP_NO) LIKE UPPER('%$MEMBERSHIP_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="RENEWED_LOAN_NO">
                    UPPER(LOANS_FACILITY_DETAILS.RENEWAL_ACCT_NO) LIKE UPPER('%$RENEWED_LOAN_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBERSHIP_NO">
                    UPPER(get_cust_name(CUSTOMER.CUST_ID)) LIKE UPPER('%$CUSTOMER NAME$%')
                </isNotNull>
            </isParameterPresent>
                     <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER ID">
                    UPPER(LOANS_BORROWER.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="SANCTION_AMT">
                    UPPER(LSD.LIMIT) LIKE UPPER('%$SANCTION_AMT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ASSET_STATUS">
                    UPPER(LCD.ASSET_STATUS) LIKE UPPER('%$ASSET_STATUS$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="BORROWER NO">
                    UPPER(LOANS_BORROWER.BORROW_NO) LIKE UPPER('%$BORROWER NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ACCT_STATUS">
                    UPPER(LOANS_FACILITY_DETAILS.ACCT_STATUS) LIKE UPPER('%$ACCT_STATUS$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="PROD_ID">
                    UPPER(LOANS_FACILITY_DETAILS.PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="OLD_ACT_NUM">
                    UPPER(OAN.OLD_ACT_NUM) LIKE UPPER('%$OLD_ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY "BORROWER NO"        
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="viewTermLoanForDelete" result-class = "java.util.LinkedHashMap" >
        SELECT MEMBERSHIP_NO, FD.PROD_ID,  FD.BORROW_NO, FD.ACCT_NUM, FD.SANCTION_NO, 
        get_cust_name(C.CUST_ID) AS "CUSTOMER NAME",
        FD.AUTHORIZE_BY_1, FD.AUTHORIZE_STATUS_1
        FROM LOANS_BORROWER LB, CUSTOMER C, LOANS_FACILITY_DETAILS FD WHERE 
        LB.BRANCH_CODE = #BRANCH_ID:VARCHAR# AND FD.BORROW_NO=LB.BORROW_NO AND LB.CUST_ID = C.CUST_ID AND 
        FD.ACCT_STATUS !='CLOSED' AND NOT EXISTS
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS LFD WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')
        AND LB.BORROW_NO = LFD.BORROW_NO)
        AND NOT EXISTS (SELECT ACT_NUM FROM LOAN_TRANS_DETAILS WHERE ACT_NUM = FD.ACCT_NUM)
        AND NOT EXISTS (SELECT ACT_NUM FROM ADV_TRANS_DETAILS WHERE ACT_NUM = FD.ACCT_NUM)
        AND LB.STATUS NOT IN('DELETED') AND FD.STATUS NOT IN('DELETED')
        AND FD.AUTHORIZE_STATUS_1 IS NULL
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS
                    (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LB.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY FD.BORROW_NO        
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="viewTermLoanForLTD" result-class = "java.util.LinkedHashMap" >
       <!-- SELECT LOANS_BORROWER.BORROW_NO AS "BORROWER NO", LOANS_BORROWER.CUST_ID AS "CUSTOMER ID", 
        CUSTOMER.FNAME || ' ' || CUSTOMER.MNAME || ' ' || CUSTOMER.LNAME AS "CUSTOMER NAME"
        FROM LOANS_BORROWER, CUSTOMER WHERE LOANS_BORROWER.BRANCH_CODE = #BRANCH_ID# AND 
        (LOANS_BORROWER.STATUS = 'CREATED' OR LOANS_BORROWER.STATUS = 'MODIFIED')
        AND (LOANS_BORROWER.CUST_ID = CUSTOMER.CUST_ID) AND BORROW_NO IN 
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS'))
        ORDER BY "BORROWER NO"  -->
        SELECT MEMBERSHIP_NO, LOANS_FACILITY_DETAILS.ACCT_NUM AS "LOAN_NO", LOANS_BORROWER.CUST_ID AS "CUSTOMER ID", 
        get_cust_name(CUSTOMER.CUST_ID)  AS "CUSTOMER NAME",LOANS_BORROWER.BORROW_NO AS "BORROWER NO",LOANS_FACILITY_DETAILS.PROD_ID
        FROM LOANS_BORROWER, CUSTOMER ,LOANS_FACILITY_DETAILS WHERE LOANS_BORROWER.BRANCH_CODE = #BRANCH_ID#  AND LOANS_FACILITY_DETAILS.BORROW_NO=LOANS_BORROWER.BORROW_NO AND
        (LOANS_BORROWER.STATUS = 'CREATED' OR LOANS_BORROWER.STATUS = 'MODIFIED') AND LOANS_FACILITY_DETAILS.STATUS !='DELETED' AND 
        (LOANS_FACILITY_DETAILS.AUTHORIZE_STATUS_1 IS NULL OR LOANS_FACILITY_DETAILS.AUTHORIZE_STATUS_1='AUTHORIZED')
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="CLOSED_ACCT">
                    ACCT_STATUS='CLOSED'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="ACCT_STATUS">
                    ACCT_STATUS !='CLOSED'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND (LOANS_BORROWER.CUST_ID = CUSTOMER.CUST_ID) AND EXISTS 
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE EXISTS 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS' AND 
        PROD_ID=LOANS_FACILITY_DETAILS.PROD_ID)AND BORROW_NO=LOANS_BORROWER.BORROW_NO)
         <dynamic>
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="DEPOSIT_ACT_NUM">
                    UPPER(MEMBERSHIP_NO) LIKE UPPER('%$MEMBERSHIP_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="LOAN_NO">
                    UPPER(LOANS_FACILITY_DETAILS.ACCT_NUM) LIKE UPPER('%$LOAN_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER ID">
                    UPPER(LOANS_BORROWER.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER NAME">
                    UPPER(get_cust_name(CUSTOMER.CUST_ID)) LIKE UPPER('%$CUSTOMER NAME$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="BORROWER NO">
                    UPPER(LOANS_BORROWER.BORROW_NO) LIKE UPPER('%$BORROWER NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="PROD_ID">
                    UPPER(LOANS_FACILITY_DETAILS.PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
           </dynamic>
        ORDER BY "BORROWER NO"       
    </dynamic-mapped-statement>                

    <dynamic-mapped-statement name="viewTermLoanForDeleteLTD" result-class = "java.util.LinkedHashMap" >
    
        SELECT MEMBERSHIP_NO, FD.PROD_ID,  FD.BORROW_NO AS "BORROWER NO", FD.ACCT_NUM AS "LOAN_NO", C.CUST_ID AS "CUSTOMER ID",FD.SANCTION_NO, 
        get_cust_name(C.CUST_ID) AS "CUSTOMER NAME",
        FD.AUTHORIZE_BY_1, FD.AUTHORIZE_STATUS_1
        FROM LOANS_BORROWER LB, CUSTOMER C, LOANS_FACILITY_DETAILS FD WHERE 
        LB.BRANCH_CODE = #BRANCH_ID:VARCHAR# AND FD.BORROW_NO=LB.BORROW_NO AND LB.CUST_ID = C.CUST_ID AND 
        FD.STATUS !='DELETED' AND FD.ACCT_STATUS !='CLOSED' AND EXISTS
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS LFD WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')
        AND LB.BORROW_NO = LFD.BORROW_NO)
        AND NOT EXISTS (SELECT ACT_NUM FROM LOAN_TRANS_DETAILS WHERE ACT_NUM = FD.ACCT_NUM)
        AND NOT EXISTS (SELECT ACT_NUM FROM ADV_TRANS_DETAILS WHERE ACT_NUM = FD.ACCT_NUM)
        AND FD.AUTHORIZE_STATUS_1 IS NULL
         <dynamic>
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBERSHIP_NO">
                    UPPER(MEMBERSHIP_NO) LIKE UPPER('%$MEMBERSHIP_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="PROD_ID">
                    UPPER(FD.PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="BORROWER NO">
                    UPPER(FD.BORROW_NO) LIKE UPPER('%$BORROWER NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="LOAN_NO">
                    UPPER(FD.ACCT_NUM) LIKE UPPER('%$LOAN_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER ID">
                    UPPER(C.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="SANCTION_NO">
                    UPPER(FD.SANCTION_NO) LIKE UPPER('%$SANCTION_NO$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER NAME">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUSTOMER NAME$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"   property="AUTHORIZE_BY_1">
                    UPPER(FD.AUTHORIZE_BY_1) LIKE UPPER('%$AUTHORIZE_BY_1$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="AUTHORIZE_BY_1">
                    UPPER(FD.AUTHORIZE_BY_1) LIKE UPPER('%$AUTHORIZE_BY_1$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="AUTHORIZE_STATUS_1">
                    UPPER(FD.AUTHORIZE_STATUS_1) LIKE UPPER('%$AUTHORIZE_STATUS_1$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        ORDER BY FD.BORROW_NO 
    </dynamic-mapped-statement>
                
<!-- ===================================================== -->

<!-- Use TermLoanCompanyTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanCompanyTO" inline-parameters="true">
        INSERT INTO LOANS_COMPANY
        (BORROW_NO, CO_REG_NO, ESTABLISH_DT, DEAL_BANK_SINCE, NET_WORTH, NET_WORTH_ON, CHIEF_EXEC_NAME, ADDR_TYPE, STREET, AREA, 
        CITY, STATE, COUNTRY_CODE, PINCODE, PHONE, RISK_RATE, BUSINESS_NATURE, REMARKS, CR_FACILITIES_SINCE, AUTHORIZE_REMARKS, 
        AUTHORIZE_STATUS, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (
        #borrowNo:VARCHAR#, #coRegNo:VARCHAR#, #establishDt:DATE#, #dealBankSince:DATE#, #netWorth:NUMERIC#, #netWorthOn:DATE#, 
        #chiefExecName:VARCHAR#, #addrType:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, #city:VARCHAR#, #state:VARCHAR#, #countryCode:VARCHAR#, 
        #pincode:VARCHAR#, #phone:VARCHAR#, #riskRate:NUMERIC#, #businessNature:VARCHAR#, #remarks:VARCHAR#, #crFacilitiesSince:DATE#, 
        #authorizeRemarks:VARCHAR#, #authorizeStatus:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#)
    </mapped-statement>

	<!-- Use TermLoanCompanyTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanCompanyTO" inline-parameters="true">
        UPDATE LOANS_COMPANY SET 
<!--		BORROW_NO = #borrowNo:VARCHAR#,-->
        CO_REG_NO = #coRegNo:VARCHAR#,
        ESTABLISH_DT = #establishDt:DATE#,
        DEAL_BANK_SINCE = #dealBankSince:DATE#,
        NET_WORTH = #netWorth:NUMERIC#,
        NET_WORTH_ON = #netWorthOn:DATE#,
        CHIEF_EXEC_NAME = #chiefExecName:VARCHAR#,
        ADDR_TYPE = #addrType:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        PINCODE = #pincode:VARCHAR#,
        PHONE = #phone:VARCHAR#,
        RISK_RATE = #riskRate:NUMERIC#,
        BUSINESS_NATURE = #businessNature:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        CR_FACILITIES_SINCE = #crFacilitiesSince:DATE#,
<!--		AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanCompanyTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanCompanyTO" inline-parameters="true">
<!--		DELETE FROM LOANS_COMPANY 
		WHERE BORROW_NO = #borrowNo:VARCHAR# -->
        UPDATE LOANS_COMPANY SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
    <mapped-statement name="getIntRateforDeposit" result-class="java.util.HashMap">
        SELECT RATE_OF_INT,BEHAVES_LIKE,AVAILABLE_BALANCE FROM DEPOSIT_SUB_ACINFO DSA,DEPOSITS_PRODUCT DP ,DEPOSIT_ACINFO DA WHERE 
        DSA.DEPOSIT_NO=#ACCOUNT_NO:VARCHAR#  AND  ACCT_STATUS !='CLOSED' AND DA.DEPOSIT_NO=DSA.DEPOSIT_NO AND DA.PROD_ID=DP.PROD_ID         
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanCompanyTO object (JavaBean) properties -->
    <result-map name="getTermLoanCompanyTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanCompanyTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="coRegNo" column="CO_REG_NO"/>
        <property name="establishDt" column="ESTABLISH_DT"/>
        <property name="dealBankSince" column="DEAL_BANK_SINCE"/>
        <property name="netWorth" column="NET_WORTH"/>
        <property name="netWorthOn" column="NET_WORTH_ON"/>
        <property name="chiefExecName" column="CHIEF_EXEC_NAME"/>
        <property name="addrType" column="ADDR_TYPE"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="pincode" column="PINCODE"/>
        <property name="phone" column="PHONE"/>
        <property name="riskRate" column="RISK_RATE"/>
        <property name="businessNature" column="BUSINESS_NATURE"/>
        <property name="remarks" column="REMARKS"/>
        <property name="crFacilitiesSince" column="CR_FACILITIES_SINCE"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanCompanyTO" result-map="getTermLoanCompanyTOResult" >
        SELECT * FROM LOANS_COMPANY 
        WHERE BORROW_NO = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
<!-- ================================================================= -->

<!--                     additional sanction details                         -=========    -->
<!-- Use TermLoanCompanyTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanAdditionalSanctionTO" inline-parameters="true">
        INSERT INTO LOANS_ADDITIONAL_SANCTION
        (ACCT_NUM,SANCTION_DT, SANCTION_LIMIT, SANCTION_BY, SLNO , STATUS ) VALUES (
        #acctNum:VARCHAR#, #additionalSanctionDt:DATE#, #additionalLimit:NUMERIC#, #permittedBy:VARCHAR#, #slno:VARCHAR#, #status:VARCHAR#)
    </mapped-statement>

	<!-- Use TermLoanCompanyTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanAdditionalSanctionTO" inline-parameters="true">
        UPDATE LOANS_ADDITIONAL_SANCTION SET 
        SANCTION_DT = #additionalSanctionDt:DATE#,
        SANCTION_LIMIT=#additionalLimit:NUMERIC#,
        SANCTION_BY =#permittedBy:DATE#,
        SLNO =#slno:VARCHAR#,
        STATUS  =#status:VARCHAR#,
        AUTHORIZE_STATUS=#authorizeStatus:VARCHAR#
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND  SLNO =#slno:VARCHAR# AND  (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
        AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>

	<!-- Use TermLoanCompanyTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanAdditionalSanctionTO" inline-parameters="true">
<!--		DELETE FROM LOANS_COMPANY 
		WHERE BORROW_NO = #borrowNo:VARCHAR# -->
        UPDATE LOANS_ADDITIONAL_SANCTION SET 
        STATUS = #status:VARCHAR#
	<!--	STATUS_BY = #statusBy:VARCHAR#,
		STATUS_DT = #statusDt:TIMESTAMP#    -->
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND  SLNO =#slno:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanCompanyTO object (JavaBean) properties -->
    <result-map name="getTermLoanAdditionalSanctionTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanAdditionalSanctionTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="additionalSanctionDt" column="SANCTION_DT"/>
        <property name="additionalLimit" column="SANCTION_LIMIT"/>
        <property name="permittedBy" column="SANCTION_BY"/>
        <property name="slno" column="SLNO"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanAdditionalSanctionTO" result-map="getTermLoanAdditionalSanctionTOResult" >
        SELECT * FROM LOANS_ADDITIONAL_SANCTION
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')  AND (AUTHORIZE_STATUS IS NULL OR 
        AUTHORIZE_STATUS ='AUTHORIZED' )ORDER BY SLNO
    </mapped-statement>
        
<!--               =================================================                                    -->       
<!-- Use TermLoanAuthorizedSignatoryTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertAuthorizedSignatoryTOTL" inline-parameters="true">
        INSERT INTO LOANS_AUTHORIZE
        (SLNO, BORROW_NO,AUTHRIZE_NO, CUST_ID, CUST_NAME, COMM_ADDR, STREET, AREA, CITY, STATE, COUNTRY_CODE, PINCODE, LIMITS, 
        DESIGNATION, HOME_PHONE, HOME_FAX, PAGER, EMAIL_ID, BUSINESS_PHONE, BUSINESS_FAX, MOBILE, AUTHORIZE_REMARKS, 
        AUTHORIZE_STATUS, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (
        #slNo:NUMERIC#,#borrowNo:VARCHAR#, #authrizeNo:NUMERIC#, #custId:VARCHAR#, #custName:VARCHAR#, #commAddr:VARCHAR#, 
        #street:VARCHAR#, #area:VARCHAR#, #city:VARCHAR#, #state:VARCHAR#, #countryCode:VARCHAR#, #pincode:VARCHAR#, 
        #limits:NUMERIC#, #designation:VARCHAR#, 
        #homePhone:VARCHAR#, #homeFax:VARCHAR#, #pager:VARCHAR#, #emailId:VARCHAR#, #businessPhone:VARCHAR#, #businessFax:VARCHAR#, 
        #mobile:VARCHAR#, #authorizeRemarks:VARCHAR#, #authorizeStatus:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#)
    </mapped-statement>

	<!-- Use TermLoanAuthorizedSignatoryTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateAuthorizedSignatoryTOTL" inline-parameters="true">
        UPDATE LOANS_AUTHORIZE SET 
		<!-- BORROW_NO = #borrowNo:VARCHAR#, 
                SLNO = #slNo:NUMERIC#,-->
        AUTHRIZE_NO = #authrizeNo:NUMERIC#,
               
        CUST_ID = #custId:VARCHAR#,
        CUST_NAME = #custName:VARCHAR#,
        COMM_ADDR = #commAddr:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        PINCODE = #pincode:VARCHAR#,
        LIMITS = #limits:NUMERIC#,
        DESIGNATION = #designation:VARCHAR#,
        HOME_PHONE = #homePhone:VARCHAR#,
        HOME_FAX = #homeFax:VARCHAR#,
        PAGER = #pager:VARCHAR#,
        EMAIL_ID = #emailId:VARCHAR#,
        BUSINESS_PHONE = #businessPhone:VARCHAR#,
        BUSINESS_FAX = #businessFax:VARCHAR#,
        MOBILE = #mobile:VARCHAR#,
		<!-- AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#, 
		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SLNO = #slNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanAuthorizedSignatoryTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteAuthorizedSignatoryTOTL" inline-parameters="true">
		<!-- DELETE FROM LOANS_AUTHORIZE 
		WHERE -->
        UPDATE LOANS_AUTHORIZE SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SLNO = #slNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanAuthorizedSignatoryTO object (JavaBean) properties -->
    <result-map name="getAuthorizedSignatoryTOResultTL" class="com.see.truetransact.transferobject.common.authorizedsignatory.AuthorizedSignatoryTO">
        <property name="slNo" column="SLNO"/>
        <property name="borrowNo" column="BORROW_NO"/>
               
        <property name="authrizeNo" column="AUTHRIZE_NO"/>
        <property name="custId" column="CUST_ID"/>
        <property name="custName" column="CUST_NAME"/>
        <property name="commAddr" column="COMM_ADDR"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="pincode" column="PINCODE"/>
        <property name="limits" column="LIMITS"/>
        <property name="designation" column="DESIGNATION"/>
        <property name="homePhone" column="HOME_PHONE"/>
        <property name="homeFax" column="HOME_FAX"/>
        <property name="pager" column="PAGER"/>
        <property name="emailId" column="EMAIL_ID"/>
        <property name="businessPhone" column="BUSINESS_PHONE"/>
        <property name="businessFax" column="BUSINESS_FAX"/>
        <property name="mobile" column="MOBILE"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
    </result-map>
    <mapped-statement name="getSelectAuthorizedSignatoryTOTL" result-map="getAuthorizedSignatoryTOResultTL" >
        SELECT * FROM LOANS_AUTHORIZE 
        WHERE BORROW_NO = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY SLNO
    </mapped-statement>
        
    <mapped-statement name="getSelectAuthorizedSignatoryMaxSLNOTL" result-class="java.util.HashMap" >
        SELECT MAX(SLNO) AS MAX_AUTHORIZE_NO FROM LOANS_AUTHORIZE WHERE BORROW_NO = #borrowNo:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
        
        <!-- Use AuthorizedSignatoryInstructionTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertAuthorizedSignatoryInstructionTOTL" inline-parameters="true">
        INSERT INTO LOANS_AUTHORIZE_INSTRUCTION
        (BORROW_NO, SL_NO, FROM_AMT, TO_AMT, INSTRUCTION, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (
        #borrowNo:VARCHAR#,#slNo:NUMERIC#, #fromAmt:NUMERIC#, #toAmt:NUMERIC#, #instruction:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#)
    </mapped-statement>

	<!-- Use AuthorizedSignatoryInstructionTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateAuthorizedSignatoryInstructionTOTL" inline-parameters="true">
        UPDATE LOANS_AUTHORIZE_INSTRUCTION SET 
        FROM_AMT = #fromAmt:NUMERIC#,
        TO_AMT = #toAmt:NUMERIC#,
                
        INSTRUCTION = #instruction:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SL_NO = #slNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use AuthorizedSignatoryInstructionTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteAuthorizedSignatoryInstructionTOTL" inline-parameters="true">
        UPDATE LOANS_AUTHORIZE_INSTRUCTION SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SL_NO = #slNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to AuthorizedSignatoryInstructionTO object (JavaBean) properties -->
    <result-map name="getAuthorizedSignatoryInstructionTOResult" class="com.see.truetransact.transferobject.common.authorizedsignatory.AuthorizedSignatoryInstructionTO">
        <property name="borrowNo" column="BORROW_NO"/>
            
        <property name="slNo" column="SL_NO"/>
        <property name="fromAmt" column="FROM_AMT"/>
        <property name="toAmt" column="TO_AMT"/>
        <property name="instruction" column="INSTRUCTION"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
    </result-map>
    <mapped-statement name="getSelectAuthorizedSignatoryInstructionTOTL" result-map="getAuthorizedSignatoryInstructionTOResult" >
        SELECT * FROM LOANS_AUTHORIZE_INSTRUCTION 
        WHERE BORROW_NO = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY SL_NO
    </mapped-statement>
        
    <mapped-statement name="getSelectAuthorizedSignatoryInstructionMaxSLNOTL" result-class="java.util.HashMap" >
        SELECT MAX(SL_NO) AS MAX_AUTHORIZE_INSTRUCTION_NO FROM LOANS_AUTHORIZE_INSTRUCTION WHERE BORROW_NO = #borrowNo:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
<!-- ================================================================= -->
        
	<!-- Use TermLoanPowerAttorneyTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertPowerAttorneyTOTL" inline-parameters="true">
        INSERT INTO LOANS_POA
        (BORROW_NO, POA_NO, POA_HOLDER_NAME, STREET, AREA, CITY, STATE, COUNTRY_CODE, PINCODE, PHONE, PERIOD_FROM, PERIOD_TO, REMARKS, 
        AUTHORIZE_REMARKS, AUTHORIZE_STATUS, STATUS, TO_WHOM, ADDR_TYPE, STATUS_BY, STATUS_DT, CUST_ID
        ) VALUES (
        #borrowNo:VARCHAR#, #poaNo:NUMERIC#, #poaHolderName:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, #city:VARCHAR#, #state:VARCHAR#, 
        #countryCode:VARCHAR#, #pincode:VARCHAR#, #phone:VARCHAR#, #periodFrom:DATE#, #periodTo:DATE#, #remarks:VARCHAR#, #authorizeRemarks:VARCHAR#, 
        #authorizeStatus:VARCHAR#, #status:VARCHAR#, #toWhom:VARCHAR#, #addrType:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #custId:VARCHAR#)
    </mapped-statement>

	<!-- Use TermLoanPowerAttorneyTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updatePowerAttorneyTOTL" inline-parameters="true">
        UPDATE LOANS_POA SET 
		<!--BORROW_NO = #borrowNo:VARCHAR#,
		POA_NO = #poaNo:NUMERIC#,-->
        POA_HOLDER_NAME = #poaHolderName:VARCHAR#,
                
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        PINCODE = #pincode:VARCHAR#,
        PHONE = #phone:VARCHAR#,
        PERIOD_FROM = #periodFrom:DATE#,
        PERIOD_TO = #periodTo:DATE#,
        REMARKS = #remarks:VARCHAR#,
        TO_WHOM = #toWhom:VARCHAR#,
        ADDR_TYPE = #addrType:VARCHAR#,
		<!--AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        CUST_ID = #custId:VARCHAR# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND POA_NO = #poaNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanPowerAttorneyTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deletePowerAttorneyTOTL" inline-parameters="true">
		<!-- DELETE FROM LOANS_POA 
		WHERE BORROW_NO = #value# -->
        UPDATE LOANS_POA SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND POA_NO = #poaNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanPowerAttorneyTO object (JavaBean) properties -->
    <result-map name="getPowerAttorneyTOResultTL" class="com.see.truetransact.transferobject.common.powerofattorney.PowerAttorneyTO">
        <property name="borrowNo" column="BORROW_NO"/>
               
        <property name="poaNo" column="POA_NO"/>
        <property name="poaHolderName" column="POA_HOLDER_NAME"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="pincode" column="PINCODE"/>
        <property name="phone" column="PHONE"/>
        <property name="periodFrom" column="PERIOD_FROM"/>
        <property name="periodTo" column="PERIOD_TO"/>
        <property name="remarks" column="REMARKS"/>
        <property name="toWhom" column="TO_WHOM"/>
        <property name="addrType" column="ADDR_TYPE"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="custId" column="CUST_ID"/>
    </result-map>
    <mapped-statement name="getSelectPowerAttorneyTOTL" result-map="getPowerAttorneyTOResultTL" >
        SELECT * FROM LOANS_POA 
        WHERE BORROW_NO = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(POA_NO)
    </mapped-statement>

    <mapped-statement name="getSelectPowerAttorneyMaxSLNOTL" result-class="java.util.HashMap" >
        SELECT MAX(POA_NO) AS MAX_POA_NO FROM LOANS_POA WHERE BORROW_NO = #borrowNo:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
        
        <!-- Use TermLoanSanctionTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanSanctionTO" inline-parameters="true">
        INSERT INTO LOANS_SANCTION
        (BORROW_NO, SANCTION_NO, SANCTION_AUTHORITY, SANCTION_DT, SANCTION_MODE, REMARKS, AUTHORIZE_REMARKS, AUTHORIZE_STATUS, STATUS, SL_NO, STATUS_BY, STATUS_DT
        ) VALUES (
        #borrowNo:VARCHAR#, #sanctionNo:VARCHAR#, #sanctionAuthority:VARCHAR#, #sanctionDt:DATE#, #sanctionMode:VARCHAR#, 
        #remarks:VARCHAR#, #authorizeRemarks:VARCHAR#, #authorizeStatus:VARCHAR#,  #status:VARCHAR#, #slNo:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#)
    </mapped-statement>

	<!-- Use TermLoanSanctionTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanSanctionTO" inline-parameters="true">
        UPDATE LOANS_SANCTION SET 
		<!--BORROW_NO = #borrowNo:VARCHAR#,
		SANCTION_NO = #sanctionNo:VARCHAR#,-->
        SANCTION_AUTHORITY = #sanctionAuthority:VARCHAR#,
        SANCTION_DT = #sanctionDt:DATE#,
        SANCTION_MODE = #sanctionMode:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        SL_NO = #slNo:VARCHAR#,
		<!--AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SANCTION_NO = #sanctionNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanSanctionTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanSanctionTO" inline-parameters="true">
        UPDATE LOANS_SANCTION SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SANCTION_NO = #sanctionNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanSanctionTO object (JavaBean) properties -->
    <result-map name="getTermLoanSanctionTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanSanctionTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="sanctionNo" column="SANCTION_NO"/>
        <property name="slNo" column="SL_NO"/>
        <property name="sanctionAuthority" column="SANCTION_AUTHORITY"/>
        <property name="sanctionDt" column="SANCTION_DT"/>
        <property name="sanctionMode" column="SANCTION_MODE"/>
        <property name="remarks" column="REMARKS"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanSanctionTO" result-map="getTermLoanSanctionTOResult" >
        SELECT * FROM LOANS_SANCTION 
        WHERE BORROW_NO = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(SANCTION_NO)
    </mapped-statement>
        
    <mapped-statement name="getSelectTermLoanSanctionMaxSLNO" result-class="java.util.HashMap">
        SELECT MAX(SANCTION_NO) AS MAX_SL_NO FROM LOANS_SANCTION WHERE BORROW_NO = #borrowNo:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
        
        	<!-- Use TermLoanSanctionFacilityTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanSanctionFacilityTO" inline-parameters="true">
        INSERT INTO LOANS_SANCTION_DETAILS
        (BORROW_NO, SANCTION_NO, SL_NO, FACILITY_TYPE, "limit", FROM_DT, TO_DT, STATUS, NO_INSTALL, REPAYMENT_FREQUENCY, PRODUCT_ID, 
        REPAYMENT_DT, MORATORIUM_GIVEN, NO_MORATORIUM, STATUS_BY, STATUS_DT,INITIAL_MONEY_DEPOSIT,ELIGIBLE_CROP_AMT
        ) VALUES (
        #borrowNo:VARCHAR#, #sanctionNo:VARCHAR#, #slNo:NUMERIC#, #facilityType:VARCHAR#, #limit:NUMERIC#, #fromDt:DATE#, #toDt:DATE#, 
        #status:VARCHAR#, #noInstall:NUMERIC#, #repaymentFrequency:NUMERIC#, #productId:VARCHAR#, #repaymentDt:DATE#, #moratoriumGiven:VARCHAR#, 
        #noMoratorium:NUMERIC#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#,#initialMoneyDeposit:NUMERIC#,#eligibleAmt:VARCHAR#)
    </mapped-statement>

	<!-- Use TermLoanSanctionFacilityTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanSanctionFacilityTO" inline-parameters="true">
        UPDATE LOANS_SANCTION_DETAILS SET 
		<!--BORROW_NO = #borrowNo:VARCHAR#,
		SANCTION_NO = #sanctionNo:VARCHAR#,
		SL_NO = #slNo:NUMERIC#,-->
        FACILITY_TYPE = #facilityType:VARCHAR#,
        "limit" = #limit:NUMERIC#,
        INITIAL_MONEY_DEPOSIT=#initialMoneyDeposit:NUMERIC#,
        FROM_DT = #fromDt:DATE#,
        TO_DT = #toDt:DATE#,
        NO_INSTALL = #noInstall:NUMERIC#,
        REPAYMENT_FREQUENCY = #repaymentFrequency:NUMERIC#,
        PRODUCT_ID = #productId:VARCHAR#,
        REPAYMENT_DT = #repaymentDt:DATE#,
        MORATORIUM_GIVEN = #moratoriumGiven:VARCHAR#,
        NO_MORATORIUM = #noMoratorium:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        OD_RENEWAL =#odRenewal:VARCHAR# ,
        ELIGIBLE_CROP_AMT=#eligibleAmt:VARCHAR#
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SANCTION_NO = #sanctionNo:VARCHAR# AND SL_NO = #slNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanSanctionFacilityTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanSanctionFacilityTO" inline-parameters="true">
        UPDATE LOANS_SANCTION_DETAILS SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SANCTION_NO = #sanctionNo:VARCHAR# AND SL_NO = #slNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
    <mapped-statement name="updateProdID_TermLoanSanctionFacilityTO" inline-parameters="true">
        UPDATE LOANS_SANCTION_DETAILS SET 
        FACILITY_TYPE = #facilityType:VARCHAR#,
        PRODUCT_ID = #productId:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SANCTION_NO = #sanctionNo:VARCHAR# AND SL_NO = #slNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanSanctionFacilityTO object (JavaBean) properties -->
    <result-map name="getTermLoanSanctionFacilityTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanSanctionFacilityTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="sanctionNo" column="SANCTION_NO"/>
        <property name="slNo" column="SL_NO"/>
        <property name="facilityType" column="FACILITY_TYPE"/>
        <property name="limit" column="limit"/>
        <property name="initialMoneyDeposit" column="INITIAL_MONEY_DEPOSIT"/>
        <property name="fromDt" column="FROM_DT"/>
        <property name="toDt" column="TO_DT"/>
        <property name="noInstall" column="NO_INSTALL"/>
        <property name="repaymentFrequency" column="REPAYMENT_FREQUENCY"/>
        <property name="productId" column="PRODUCT_ID"/>
        <property name="status" column="STATUS"/>
        <property name="repaymentDt" column="REPAYMENT_DT"/>
        <property name="moratoriumGiven" column="MORATORIUM_GIVEN"/>
        <property name="noMoratorium" column="NO_MORATORIUM"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="eligibleAmt" column="ELIGIBLE_CROP_AMT"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanSanctionFacilityTO" result-map="getTermLoanSanctionFacilityTOResult" >
		<!--SELECT * FROM LOANS_SANCTION_DETAILS  LSD  ,LOANS_FACILITY_DETAILS  LFD 
		WHERE LSD.BORROW_NO = #value# AND LFD.BORROW_NO=#value# AND LFD.SL_NO=LSD.SL_NO AND LFD.ACCT_STATUS !='CLOSED' AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(SL_NO) -->
        SELECT * FROM LOANS_SANCTION_DETAILS
        WHERE BORROW_NO||'_'||SANCTION_NO IN 
        (SELECT BORROW_NO||'_'||SANCTION_NO FROM LOANS_FACILITY_DETAILS WHERE 
        BORROW_NO = #value:VARCHAR# <!--AND ACCT_STATUS !='CLOSED'-->)  AND 
        (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
        ORDER BY TO_NUMBER(SL_NO)
    </mapped-statement>
        
    <mapped-statement name="getSelectTermLoanSanctionRenewalFacilityTO" result-map="getTermLoanSanctionFacilityTOResult" >
        SELECT TT.*
        FROM LOANS_SANCTION_RENEWAL_DETAILS TT
        INNER JOIN
        (
        SELECT LSR.BORROW_NO, MAX(RENEWAL_DT) AS RENEWAL_DT
        FROM LOANS_SANCTION_RENEWAL_DETAILS LSR,LOANS_FACILITY_DETAILS LFD WHERE  LSR.BORROW_NO=LFD.BORROW_NO AND LFD.ACCT_NUM =#ACCT_NUM:VARCHAR#
        GROUP BY LSR.BORROW_NO
        ) GROUPINNERJOIN ON TT.BORROW_NO = GROUPINNERJOIN.BORROW_NO AND TT.RENEWAL_DT = GROUPINNERJOIN.RENEWAL_DT
    </mapped-statement>
        
    <mapped-statement name="getSelectTermLoanSanctionTO.AUTHORIZE" result-map="getTermLoanSanctionTOResult" >
        SELECT LS.* FROM LOANS_SANCTION LS, LOANS_FACILITY_DETAILS LFD, LOANS_SANCTION_DETAILS LSD  
        WHERE 
        LFD.ACCT_NUM = #value:VARCHAR#  
        AND LFD.BORROW_NO = LSD.BORROW_NO 
        AND LFD.SANCTION_NO = LSD.SANCTION_NO 
        AND LFD.SL_NO = LSD.SL_NO 
        AND LFD.BORROW_NO = LS.BORROW_NO 
        AND LFD.SANCTION_NO = LS.SANCTION_NO 
        AND (LFD.STATUS = 'CREATED' OR LFD.STATUS = 'MODIFIED') 
        AND (LSD.STATUS = 'CREATED' OR LSD.STATUS = 'MODIFIED') 
        AND (LS.STATUS = 'CREATED' OR LS.STATUS = 'MODIFIED') 
    </mapped-statement>
                
    <mapped-statement name="getSelectTermLoanSanctionFacilityTO.AUTHORIZE" result-map="getTermLoanSanctionFacilityTOResult" >
        SELECT LSD.* FROM LOANS_FACILITY_DETAILS LFD, LOANS_SANCTION_DETAILS LSD  
        WHERE 
        LFD.ACCT_NUM = #value:VARCHAR#  
        AND LFD.BORROW_NO = LSD.BORROW_NO 
        AND LFD.SANCTION_NO = LSD.SANCTION_NO 
        AND LFD.SL_NO = LSD.SL_NO 
        AND (LFD.STATUS = 'CREATED' OR LFD.STATUS = 'MODIFIED') 
        AND (LSD.STATUS = 'CREATED' OR LSD.STATUS = 'MODIFIED') 
    </mapped-statement>
        
    <mapped-statement name="getSelectTermLoanSanctionFacilityMaxSLNO" result-class="java.util.HashMap">
        SELECT MAX(SL_NO) AS MAX_SL_NO FROM LOANS_SANCTION_DETAILS WHERE BORROW_NO = #borrowNo:VARCHAR#
        AND SANCTION_NO = #sanctionNo:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
        
    <mapped-statement name="getSelectLandSecurityPledgeAmount" result-class="java.util.HashMap">
        select NVL(SUM(B.CLEAR_BALANCE*-1),0) as pledge_amount from loans_security_land a join loans_facility_details b
        on a.acct_num=b.acct_num where a.document_gen_id=#DOC_GEN_ID:VARCHAR# and b.acct_status!='CLOSED'
    </mapped-statement>
        
    <mapped-statement name="getSelectGahanDocumentPledgeAmount" result-class="java.util.HashMap">
        select pledge_amt from gahan_document_details  where document_gen_id=#DOC_GEN_ID:VARCHAR#
    </mapped-statement>
        
        	<!-- Use TermLoanFacilityTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanFacilityTO" inline-parameters="true">
        INSERT INTO LOANS_FACILITY_DETAILS
        (BORROW_NO, SANCTION_NO, SL_NO, PROD_ID, SECURITY_TYPE, SECURITY_DETAILS, ACCOUNT_TYPE, INTEREST_NATURE, INTEREST_TYPE, 
        ACCOUNT_LIMIT, RISK_WEIGHT, DEMAND_PROM_DT, DEMAND_PROM_EXPDT, MULTI_DISBURSE, AOD_DT, PURPOSE_DESC, GROUP_DESC, INTEREST,
        CONTACT_PERSON, DEALER_ID, CONTACT_PHONE, REMARKS, AUTHORIZE_STATUS_1, AUTHORIZE_REMARKS_1, STATUS, ACCT_NUM, AUTHORIZE_BY_1, 
        AUTHORIZE_DT_1, CREATE_DT, STATUS_BY, STATUS_DT, AVAILABLE_BALANCE, CLEAR_BALANCE, UNCLEAR_BALANCE, SHADOW_DEBIT,
        SHADOW_CREDIT, TOTAL_BALANCE, LAST_TRANS_DT, BRANCH_ID, ACCT_STATUS, INT_GET_FROM, LOAN_BALANCE_PRINCIPAL, LOAN_PAID_INT,
        LOAN_PAID_PENALINT, EXCESS_AMT, LAST_REPAY_DT, AUTHORIZE_STATUS_2, AUTHORIZE_REMARKS_2, AUTHORIZE_BY_2, AUTHORIZE_DT_2, 
        CREATED_BY, ACCT_NAME,ACCT_OPEN_DT,RECOMMANDED_BY,LAST_INT_CALC_DT,DRAWING_POWER,POF_ATTORNEY,AUTH_SIGNATORY,
        DOC_DETAILS,ACCT_TRANSFER,IS_MOBILE_BANKING,SALARY_RECOVERY,SUBSIDY_ALLOWED,SUBSIDY_AMT,SUBSIDY_ADJUST_ACHD,SUBSIDY_DT,REBATE_ALLOWED,REBATE_AMT,REBATE_DT,RENEWAL_ACCT_NO,
        JEWELLERY_DETAILS,GROSS_WEIGHT,NET_WEIGHT,VALUE_OF_GOLD,GOLD_REMARKS,OTS,RECOMMANDED_BY2,KOLE_LAND_AREA) VALUES (
        #borrowNo:VARCHAR#, #sanctionNo:VARCHAR#, #slNo:NUMERIC#, #prodId:VARCHAR#, #securityType:VARCHAR#, #securityDetails:VARCHAR#, #accountType:VARCHAR#, #interestNature:VARCHAR#, #interestType:VARCHAR#, 
        #accountLimit:VARCHAR#, #riskWeight:VARCHAR#, #demandPromDt:DATE#, #demandPromExpdt:DATE#, #multiDisburse:VARCHAR#, #aodDt:DATE#, #purposeDesc:VARCHAR#, #groupDesc:VARCHAR#, #interest:VARCHAR#, #contactPerson:VARCHAR#, #dealerID:VARCHAR#, 
        #contactPhone:VARCHAR#, #remarks:VARCHAR#, #authorizeStatus1:VARCHAR#, #authorizeRemarks1:VARCHAR#, #status:VARCHAR#, #acctNum:VARCHAR#, #authorizeBy1:VARCHAR#, #authorizeDt1:TIMESTAMP#, #createDt:TIMESTAMP#, 
        #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #availableBalance:NUMERIC#, #clearBalance:NUMERIC#, 
        #unclearBalance:NUMERIC#, #shadowDebit:NUMERIC#, #shadowCredit:NUMERIC#, #totalBalance:NUMERIC#, #lastTransDt:TIMESTAMP#, 
        #branchId:VARCHAR#, #acctStatus:VARCHAR#, #intGetFrom:VARCHAR#, #loanBalancePrincipal:NUMERIC#, #loanPaidInt:NUMERIC#,
        #loanPaidPenalint:NUMERIC#, #excessAmt:NUMERIC#, #lastRepayDt:TIMESTAMP#, #authorizeStatus2:VARCHAR#, 
        #authorizeRemarks2:VARCHAR#, #authorizeBy2:VARCHAR#, #authorizeDt2:TIMESTAMP#, #createdBy:VARCHAR#, #acctName:VARCHAR#,
        #accOpenDt:DATE#,#recommendedBy:VARCHAR#,#lastIntCalcDt:DATE#,#dpYesNo:VARCHAR#,#pofAttorney:VARCHAR#,
        #authorizedSignatory:VARCHAR#,#docDetails:VARCHAR#,#acctTransfer:VARCHAR#,#isMobileBanking:VARCHAR#, #salaryRecovery:VARCHAR#,
        #subsidyAllowed:VARCHAR#,#subsidyAmt:NUMERIC#,#subsidyAdjustAchd:VARCHAR#,#subsidyDate:DATE#,#rebateAllowed:VARCHAR#,#rebateAmt:NUMERIC#,#rebateDate:DATE#,#renewalAcctNo:VARCHAR#,
        #txtJewelleryDetails:varchar#, #txtGrossWeight:VARCHAR#, #txtNetWeight:VARCHAR#, #txtValueOfGold:NUMERIC#, #txtGoldRemarks:VARCHAR#,#ots:VARCHAR#,#recommendedBy2:VARCHAR#,#koleLandArea:NUMERIC#)
    </mapped-statement>

	<!-- Use TermLoanFacilityTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanFacilityTO" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET 
		<!--BORROW_NO = #borrowNo:VARCHAR#,
		SANCTION_NO = #sanctionNo:VARCHAR#,
		RECARABLE = #recarable:VARCHAR#,
		INTEREST_NATURE = #interestNature:VARCHAR#,
		SL_NO = #slNo:NUMERIC#,-->
        ACCT_TRANSFER=#acctTransfer:VARCHAR#,
        AVAILABLE_BALANCE  = #availableBalance:NUMERIC#,
        PROD_ID = #prodId:VARCHAR#,
        SECURITY_TYPE = #securityType:VARCHAR#,
        SECURITY_DETAILS = #securityDetails:VARCHAR#,
        ACCOUNT_TYPE = #accountType:VARCHAR#,
        INTEREST_TYPE = #interestType:VARCHAR#,
        ACCOUNT_LIMIT = #accountLimit:VARCHAR#,
        RISK_WEIGHT = #riskWeight:VARCHAR#,
        DEMAND_PROM_DT = #demandPromDt:DATE#,
        DEMAND_PROM_EXPDT = #demandPromExpdt:DATE#,
        MULTI_DISBURSE = #multiDisburse:VARCHAR#,
        AOD_DT = #aodDt:DATE#,
        PURPOSE_DESC = #purposeDesc:VARCHAR#,
        GROUP_DESC = #groupDesc:VARCHAR#,
        INTEREST = #interest:VARCHAR#,
        CONTACT_PERSON = #contactPerson:VARCHAR#,
        CONTACT_PHONE = #contactPhone:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        DEALER_ID = #dealerID:VARCHAR#,
        INT_GET_FROM = #intGetFrom:VARCHAR#,
        BRANCH_ID = #branchId:VARCHAR#,
        ACCT_STATUS = #acctStatus:VARCHAR#,
        ACCT_NAME = #acctName:VARCHAR#,
        AUTHORIZE_STATUS_1 = #authorizeStatus1:VARCHAR#,
        AUTHORIZE_REMARKS_1 = #authorizeRemarks1:VARCHAR#,
        AUTHORIZE_BY_1 = #authorizeBy1:VARCHAR#,
<!--                AUTHORIZE_DT_1 = #authorizeDt1:TIMESTAMP#, -->
        AUTHORIZE_STATUS_2 = #authorizeStatus2:VARCHAR#,
        AUTHORIZE_REMARKS_2 = #authorizeRemarks2:VARCHAR#,
        AUTHORIZE_BY_2 = #authorizeBy2:VARCHAR#,
<!--                AUTHORIZE_DT_2 = #authorizeDt2:TIMESTAMP#,-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#, 
        ACCT_OPEN_DT=#accOpenDt:TIMESTAMP#,
               <!-- ACCT_CLOSE_DT=#accCloseDt:DATE#,-->
        RECOMMANDED_BY=#recommendedBy:VARCHAR#,
        DRAWING_POWER=#dpYesNo:VARCHAR#,
        POF_ATTORNEY=#pofAttorney:VARCHAR#,
        AUTH_SIGNATORY=#authorizedSignatory:VARCHAR#,
        DOC_DETAILS=#docDetails:VARCHAR#,
        IS_MOBILE_BANKING=#isMobileBanking:VARCHAR#,
        SALARY_RECOVERY=#salaryRecovery:VARCHAR#,
        SUBSIDY_ALLOWED=#subsidyAllowed:VARCHAR#,
        SUBSIDY_AMT=#subsidyAmt:NUMERIC#,
        SUBSIDY_ADJUST_ACHD=#subsidyAdjustAchd:VARCHAR#,
        SUBSIDY_DT=#subsidyDate:DATE#,
        REBATE_ALLOWED=#rebateAllowed:VARCHAR#,
        REBATE_AMT=#rebateAmt:NUMERIC#,
        REBATE_DT=#rebateDate:DATE#,
        JEWELLERY_DETAILS = #txtJewelleryDetails:NUMERIC#, 
        GROSS_WEIGHT = #txtGrossWeight:VARCHAR#,
        NET_WEIGHT = #txtNetWeight:VARCHAR#,
        VALUE_OF_GOLD = #txtValueOfGold:NUMERIC#,
        GOLD_REMARKS = #txtGoldRemarks:VARCHAR#,
        OTS          = #ots:VARCHAR# ,
        RECOMMANDED_BY2=#recommendedBy2:VARCHAR#,
        KOLE_LAND_AREA = #koleLandArea:NUMERIC#
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SANCTION_NO = #sanctionNo:VARCHAR# AND SL_NO = #slNo:NUMERIC#  AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
       <!-- security details --> 
    <mapped-statement name="updateSecurityTermLoanFacilityTO" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET 
                		<!--BORROW_NO = #borrowNo:VARCHAR#,
		SANCTION_NO = #sanctionNo:VARCHAR#,
		RECARABLE = #recarable:VARCHAR#,
		INTEREST_NATURE = #interestNature:VARCHAR#,
		SL_NO = #slNo:NUMERIC#,-->
        ACCT_TRANSFER=#acctTransfer:VARCHAR#,
        AVAILABLE_BALANCE  = #availableBalance:NUMERIC#,
        PROD_ID = #prodId:VARCHAR#,
        SECURITY_TYPE = #securityType:VARCHAR#,
        SECURITY_DETAILS = #securityDetails:VARCHAR#,
        ACCOUNT_TYPE = #accountType:VARCHAR#,
        INTEREST_TYPE = #interestType:VARCHAR#,
        ACCOUNT_LIMIT = #accountLimit:VARCHAR#,
        RISK_WEIGHT = #riskWeight:VARCHAR#,
        DEMAND_PROM_DT = #demandPromDt:DATE#,
        DEMAND_PROM_EXPDT = #demandPromExpdt:DATE#,
        MULTI_DISBURSE = #multiDisburse:VARCHAR#,
        AOD_DT = #aodDt:DATE#,
        PURPOSE_DESC = #purposeDesc:VARCHAR#,
        GROUP_DESC = #groupDesc:VARCHAR#,
        INTEREST = #interest:VARCHAR#,
        CONTACT_PERSON = #contactPerson:VARCHAR#,
        CONTACT_PHONE = #contactPhone:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        DEALER_ID = #dealerID:VARCHAR#,
        INT_GET_FROM = #intGetFrom:VARCHAR#,
        BRANCH_ID = #branchId:VARCHAR#,
        ACCT_STATUS = #acctStatus:VARCHAR#,
        ACCT_NAME = #acctName:VARCHAR#,
        AUTHORIZE_STATUS_1 = #authorizeStatus1:VARCHAR#,
        AUTHORIZE_REMARKS_1 = #authorizeRemarks1:VARCHAR#,
        AUTHORIZE_BY_1 = #authorizeBy1:VARCHAR#,
<!--                AUTHORIZE_DT_1 = #authorizeDt1:TIMESTAMP#, -->
        AUTHORIZE_STATUS_2 = #authorizeStatus2:VARCHAR#,
        AUTHORIZE_REMARKS_2 = #authorizeRemarks2:VARCHAR#,
        AUTHORIZE_BY_2 = #authorizeBy2:VARCHAR#,
<!--                AUTHORIZE_DT_2 = #authorizeDt2:TIMESTAMP#,-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#, 
        ACCT_OPEN_DT=#accOpenDt:TIMESTAMP#,
               <!-- ACCT_CLOSE_DT=#accCloseDt:DATE#,-->
        RECOMMANDED_BY=#recommendedBy:VARCHAR#,
        DRAWING_POWER=#dpYesNo:VARCHAR#,
        POF_ATTORNEY=#pofAttorney:VARCHAR#,
        AUTH_SIGNATORY=#authorizedSignatory:VARCHAR#,
        DOC_DETAILS=#docDetails:VARCHAR#,
        IS_MOBILE_BANKING=#isMobileBanking:VARCHAR#,
        SALARY_RECOVERY=#salaryRecovery:VARCHAR#,
        SUBSIDY_ALLOWED=#subsidyAllowed:VARCHAR#,
        SUBSIDY_AMT=#subsidyAmt:NUMERIC#,
        SUBSIDY_ADJUST_ACHD=#subsidyAdjustAchd:VARCHAR#,
        SUBSIDY_DT=#subsidyDate:DATE#,
        REBATE_ALLOWED=#rebateAllowed:VARCHAR#,
        REBATE_AMT=#rebateAmt:NUMERIC#,
        REBATE_DT=#rebateDate:DATE#,
        JEWELLERY_DETAILS = #txtJewelleryDetails:NUMERIC#, 
        GROSS_WEIGHT = #txtGrossWeight:VARCHAR#,
        NET_WEIGHT = #txtNetWeight:VARCHAR#,
        VALUE_OF_GOLD = #txtValueOfGold:NUMERIC#,
        GOLD_REMARKS = #txtGoldRemarks:VARCHAR#,
        RECOMMANDED_BY2=#recommendedBy2:VARCHAR#,
        KOLE_LAND_AREA = #koleLandArea:NUMERIC#
        WHERE ACCT_NUM = #acctNum:VARCHAR#   AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
    <mapped-statement name="updateSecurityTermLoanFacilityTOMaterializedView" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET 
		<!--BORROW_NO = #borrowNo:VARCHAR#,
		SANCTION_NO = #sanctionNo:VARCHAR#,
		RECARABLE = #recarable:VARCHAR#,
		INTEREST_NATURE = #interestNature:VARCHAR#,
		SL_NO = #slNo:NUMERIC#,-->
               
        PROD_ID = #prodId:VARCHAR#,
        SECURITY_TYPE = #securityType:VARCHAR#,
        SECURITY_DETAILS = #securityDetails:VARCHAR#,
        ACCOUNT_TYPE = #accountType:VARCHAR#,
        INTEREST_TYPE = #interestType:VARCHAR#,
        ACCOUNT_LIMIT = #accountLimit:VARCHAR#,
        RISK_WEIGHT = #riskWeight:VARCHAR#,
        DEMAND_PROM_DT = #demandPromDt:DATE#,
        DEMAND_PROM_EXPDT = #demandPromExpdt:DATE#,
        MULTI_DISBURSE = #multiDisburse:VARCHAR#,
        AOD_DT = #aodDt:DATE#,
        PURPOSE_DESC = #purposeDesc:VARCHAR#,
        GROUP_DESC = #groupDesc:VARCHAR#,
        INTEREST = #interest:VARCHAR#,
        CONTACT_PERSON = #contactPerson:VARCHAR#,
        CONTACT_PHONE = #contactPhone:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        DEALER_ID = #dealerID:VARCHAR#,
        INT_GET_FROM = #intGetFrom:VARCHAR#,
        BRANCH_ID = #branchId:VARCHAR#,
        ACCT_STATUS = #acctStatus:VARCHAR#,
        ACCT_NAME = #acctName:VARCHAR#,
        AUTHORIZE_STATUS_1 = #authorizeStatus1:VARCHAR#,
        AUTHORIZE_REMARKS_1 = #authorizeRemarks1:VARCHAR#,
        AUTHORIZE_BY_1 = #authorizeBy1:VARCHAR#,
        AUTHORIZE_DT_1 = #authorizeDt1:TIMESTAMP#,
        AUTHORIZE_STATUS_2 = #authorizeStatus2:VARCHAR#,
        AUTHORIZE_REMARKS_2 = #authorizeRemarks2:VARCHAR#,
        AUTHORIZE_BY_2 = #authorizeBy2:VARCHAR#,
        AUTHORIZE_DT_2 = #authorizeDt2:TIMESTAMP#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#, 
        ACCT_OPEN_DT=#accOpenDt:TIMESTAMP#,
        ACCT_CLOSE_DT=#accCloseDt:TIMESTAMP#,
        RECOMMANDED_BY=#recommendedBy:VARCHAR#,
        DRAWING_POWER=#dpYesNo:VARCHAR#,
        POF_ATTORNEY=#pofAttorney:VARCHAR#,
        AUTH_SIGNATORY=#authorizedSignatory:VARCHAR#,
        DOC_DETAILS=#docDetails:VARCHAR#,
        IS_MOBILE_BANKING=#isMobileBanking:VARCHAR#,
        SALARY_RECOVERY=#salaryRecovery:VARCHAR#,
        RECOMMANDED_BY2=#recommendedBy2:VARCHAR#
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
        <!-- security end.. --> 
        
    <mapped-statement name="updateTermLoanFacilityTOMaterializedView" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET 
		<!--BORROW_NO = #borrowNo:VARCHAR#,
		SANCTION_NO = #sanctionNo:VARCHAR#,
		RECARABLE = #recarable:VARCHAR#,
		INTEREST_NATURE = #interestNature:VARCHAR#,
		SL_NO = #slNo:NUMERIC#,-->
               
        PROD_ID = #prodId:VARCHAR#,
        SECURITY_TYPE = #securityType:VARCHAR#,
        SECURITY_DETAILS = #securityDetails:VARCHAR#,
        ACCOUNT_TYPE = #accountType:VARCHAR#,
        INTEREST_TYPE = #interestType:VARCHAR#,
        ACCOUNT_LIMIT = #accountLimit:VARCHAR#,
        RISK_WEIGHT = #riskWeight:VARCHAR#,
        DEMAND_PROM_DT = #demandPromDt:DATE#,
        DEMAND_PROM_EXPDT = #demandPromExpdt:DATE#,
        MULTI_DISBURSE = #multiDisburse:VARCHAR#,
        AOD_DT = #aodDt:DATE#,
        PURPOSE_DESC = #purposeDesc:VARCHAR#,
        GROUP_DESC = #groupDesc:VARCHAR#,
        INTEREST = #interest:VARCHAR#,
        CONTACT_PERSON = #contactPerson:VARCHAR#,
        CONTACT_PHONE = #contactPhone:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        DEALER_ID = #dealerID:VARCHAR#,
        INT_GET_FROM = #intGetFrom:VARCHAR#,
        BRANCH_ID = #branchId:VARCHAR#,
        ACCT_STATUS = #acctStatus:VARCHAR#,
        ACCT_NAME = #acctName:VARCHAR#,
        AUTHORIZE_STATUS_1 = #authorizeStatus1:VARCHAR#,
        AUTHORIZE_REMARKS_1 = #authorizeRemarks1:VARCHAR#,
        AUTHORIZE_BY_1 = #authorizeBy1:VARCHAR#,
        AUTHORIZE_DT_1 = #authorizeDt1:TIMESTAMP#,
        AUTHORIZE_STATUS_2 = #authorizeStatus2:VARCHAR#,
        AUTHORIZE_REMARKS_2 = #authorizeRemarks2:VARCHAR#,
        AUTHORIZE_BY_2 = #authorizeBy2:VARCHAR#,
        AUTHORIZE_DT_2 = #authorizeDt2:TIMESTAMP#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#, 
        ACCT_OPEN_DT=#accOpenDt:TIMESTAMP#,
        ACCT_CLOSE_DT=#accCloseDt:TIMESTAMP#,
        RECOMMANDED_BY=#recommendedBy:VARCHAR#,
        DRAWING_POWER=#dpYesNo:VARCHAR#,
        POF_ATTORNEY=#pofAttorney:VARCHAR#,
        AUTH_SIGNATORY=#authorizedSignatory:VARCHAR#,
        DOC_DETAILS=#docDetails:VARCHAR#,
        IS_MOBILE_BANKING=#isMobileBanking:VARCHAR#,
        SALARY_RECOVERY=#salaryRecovery:VARCHAR#,
        RECOMMANDED_BY2=#recommendedBy2:VARCHAR#
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SANCTION_NO = #sanctionNo:VARCHAR# AND SL_NO = #slNo:NUMERIC#  AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanFacilityTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanFacilityTO" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SANCTION_NO = #sanctionNo:VARCHAR# AND SL_NO = #slNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
                <!--AND ACCT_NUM = #acctNum:VARCHAR#  This line added by Rajesh -->
    </mapped-statement>

    <mapped-statement name="updateProdID_TermLoanFacilityTO" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET
        PROD_ID = #prodId:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND SANCTION_NO = #sanctionNo:VARCHAR# AND SL_NO = #slNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanFacilityTO object (JavaBean) properties -->
    <result-map name="getTermLoanFacilityTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanFacilityTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="sanctionNo" column="SANCTION_NO"/>
        <property name="slNo" column="SL_NO"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="securityType" column="SECURITY_TYPE"/>
        <property name="securityDetails" column="SECURITY_DETAILS"/>
        <property name="accountType" column="ACCOUNT_TYPE"/>
        <property name="interestType" column="INTEREST_TYPE"/>
        <property name="accountLimit" column="ACCOUNT_LIMIT"/>
        <property name="riskWeight" column="RISK_WEIGHT"/>
        <property name="demandPromDt" column="DEMAND_PROM_DT"/>
        <property name="demandPromExpdt" column="DEMAND_PROM_EXPDT"/>
        <property name="multiDisburse" column="MULTI_DISBURSE"/>
        <property name="aodDt" column="AOD_DT"/>
        <property name="purposeDesc" column="PURPOSE_DESC"/>
        <property name="groupDesc" column="GROUP_DESC"/>
        <property name="interest" column="INTEREST"/>
        <property name="contactPerson" column="CONTACT_PERSON"/>
        <property name="contactPhone" column="CONTACT_PHONE"/>
        <property name="dealerID" column="DEALER_ID"/>
        <property name="remarks" column="REMARKS"/>
        <property name="authorizeStatus1" column="AUTHORIZE_STATUS_1"/>
        <property name="authorizeRemarks1" column="AUTHORIZE_REMARKS_1"/>
        <property name="authorizeBy1" column="AUTHORIZE_BY_1"/>
        <property name="authorizeDt1" column="AUTHORIZE_DT_1"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="intGetFrom" column="INT_GET_FROM"/>
        <property name="branchId" column="BRANCH_ID"/>
        <property name="acctStatus" column="ACCT_STATUS"/>
        <property name="authorizeStatus2" column="AUTHORIZE_STATUS_2"/>
        <property name="authorizeRemarks2" column="AUTHORIZE_REMARKS_2"/>
        <property name="authorizeBy2" column="AUTHORIZE_BY_2"/>
        <property name="authorizeDt2" column="AUTHORIZE_DT_2"/>
        <property name="createdBy" column="CREATED_BY"/>
        <property name="acctName" column="ACCT_NAME"/>
        <property name="accOpenDt" column="ACCT_OPEN_DT"/>
        <property name="availableBalance" column="AVAILABLE_BALANCE"/>
        <property name="shadowCredit" column="SHADOW_CREDIT"/>  
        <property name="shadowDebit" column="SHADOW_DEBIT"/>  
        <property name="clearBalance" column="CLEAR_BALANCE"/>      
        <property name="pofAttorney" column="POF_ATTORNEY"/> 
        <property name="lastIntCalcDt" column="LAST_INT_CALC_DT"/> 
        <property name="authorizedSignatory" column="AUTH_SIGNATORY"/>      
        <property name="docDetails" column="DOC_DETAILS"/>            
        <property name="dpYesNo" column="DRAWING_POWER"/>         
        <property name="accCloseDt"  column="ACCT_CLOSE_DT"/>
        <property name="acctTransfer"  column="ACCT_TRANSFER"/>
        <property name="recommendedBy" column="RECOMMANDED_BY"/>
        <property name="isMobileBanking" column="IS_MOBILE_BANKING"/>
        <property name="salaryRecovery" column="SALARY_RECOVERY"/>
        <property name="subsidyAllowed" column="SUBSIDY_ALLOWED"/>
        <property name="subsidyAmt" column="SUBSIDY_AMT"/>
        <property name="subsidyAdjustAchd" column="SUBSIDY_ADJUST_ACHD"/>
        <property name="subsidyAdjustAmt" column="SUBSIDY_ADJUSTED_AMT"/>
        <property name="subsidyDate" column="SUBSIDY_DT"/>
        <property name="rebateAllowed" column="REBATE_ALLOWED"/>
        <property name="rebateAmt" column="REBATE_AMT"/>
        <property name="rebateDate" column="REBATE_DT"/>
        <property name="txtJewelleryDetails" column="JEWELLERY_DETAILS"/>
        <property name="txtGrossWeight" column="GROSS_WEIGHT"/>
        <property name="txtNetWeight" column="NET_WEIGHT"/>
        <property name="txtValueOfGold" column="VALUE_OF_GOLD"/>
        <property name="txtGoldRemarks" column="GOLD_REMARKS"/>
        <property name="ots" column="OTS"/>
        <property name="recommendedBy2" column="RECOMMANDED_BY2"/>
        <property name="koleLandArea" column="KOLE_LAND_AREA"/>
    </result-map>
        
    <mapped-statement name="getSelectTermLoanFacilityTO" result-map="getTermLoanFacilityTOResult" >
        SELECT * FROM LOANS_FACILITY_DETAILS 
        WHERE BORROW_NO = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')<!--AND ACCT_STATUS !='CLOSED'--> ORDER BY SANCTION_NO
    </mapped-statement>
      <!-- security details -->  
    <mapped-statement name="getSelectEditTermLoanFacilityTO" result-map="getTermLoanFacilityTOResult" >
        SELECT * FROM LOANS_FACILITY_DETAILS 
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')<!--AND ACCT_STATUS !='CLOSED'--> 
    </mapped-statement>
      <!-- security end.. -->  
    <mapped-statement name="getSelectTermLoanRenewalFacilityTO" result-map="getTermLoanFacilityTOResult" >
        SELECT tt.BORROW_NO,tt.SANCTION_NO,tt.SL_NO,tt.PROD_ID,tt.SECURITY_TYPE,tt.SECURITY_DETAILS,tt.ACCOUNT_TYPE,tt.INTEREST_NATURE,tt.INTEREST_TYPE,tt.ACCOUNT_LIMIT,tt.RISK_WEIGHT,trunc(tt.DEMAND_PROM_DT) AS DEMAND_PROM_DT,
        trunc(tt.DEMAND_PROM_EXPDT) AS DEMAND_PROM_EXPDT,tt.MULTI_DISBURSE,trunc(tt.AOD_DT) AS AOD_DT,tt.PURPOSE_DESC,tt.GROUP_DESC,tt.INTEREST,tt.CONTACT_PERSON,tt.CONTACT_PHONE,tt.REMARKS,tt.AUTHORIZE_STATUS_1,tt.
        AUTHORIZE_REMARKS_1,tt.STATUS,tt.ACCT_NUM,tt.AUTHORIZE_BY_1,trunc(tt.AUTHORIZE_DT_1) AS AUTHORIZE_DT_1,trunc(tt.CREATE_DT) AS CREATE_DT,tt.STATUS_BY,trunc(tt.STATUS_DT) AS STATUS_DT,tt.AVAILABLE_BALANCE,tt.
        CLEAR_BALANCE,tt.UNCLEAR_BALANCE,tt.SHADOW_DEBIT,tt.SHADOW_CREDIT,tt.TOTAL_BALANCE,trunc(tt.LAST_TRANS_DT) AS LAST_TRANS_DT,tt.BRANCH_ID,tt.ACCT_STATUS,tt.INT_GET_FROM,tt.LOAN_BALANCE_PRINCIPAL,tt.LOAN_PAID_INT,tt.
        LOAN_PAID_PENALINT,tt.EXCESS_AMT,trunc(tt.LAST_REPAY_DT) AS LAST_REPAY_DT,tt.AUTHORIZE_STATUS_2,tt.AUTHORIZE_REMARKS_2,tt.AUTHORIZE_BY_2,trunc(tt.AUTHORIZE_DT_2) AS AUTHORIZE_DT_2,tt.ACCT_NAME,tt.CREATED_BY,tt.
        LAST_INT_CALC_DT,trunc(tt.ACCT_OPEN_DT) AS ACCT_OPEN_DT,tt.RECOMMANDED_BY,trunc(tt.ACCT_CLOSE_DT) AS ACCT_CLOSE_DT,tt.ADV_FREEZE_AMT,trunc(tt.RETRASPECTIVE_APP_DT) AS RETRASPECTIVE_APP_DT,tt.DRAWING_POWER,tt.
        POF_ATTORNEY,tt.AUTH_SIGNATORY,tt.DOC_DETAILS,trunc(tt.RENEWAL_DT) AS RENEWAL_DT,tt.ACCT_TRANSFER FROM LOANS_RENEWAL_FACILITY_DETAILS tt
        INNER JOIN
        (
        SELECT acct_num, MAX(RENEWAL_DT) AS RENEWAL_DT

        FROM LOANS_RENEWAL_FACILITY_DETAILS where acct_num=#ACCT_NUM#
        GROUP BY acct_num
        ) groupInnerJoin ON tt.acct_num = groupInnerJoin.acct_num AND tt.RENEWAL_DT = groupInnerJoin.RENEWAL_DT and
        tt.acct_num=#ACCT_NUM:VARCHAR#
    </mapped-statement>
        
        
    <mapped-statement name="getSelectTermLoanFacilityTO.AUTHORIZE" result-map="getTermLoanFacilityTOResult" >
        SELECT * FROM LOANS_FACILITY_DETAILS 
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
    <mapped-statement name="getSelectTermLoanFacilityTOMaterializedView" result-map="getTermLoanFacilityTOResult" >
        SELECT * FROM LOANS_FACILITY_DETAILS_TMP 
        WHERE ACCT_NUM = #value:VARCHAR# 
    </mapped-statement>
        
        <!-- Use TermLoanSecurityTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanSecurityTO" inline-parameters="true">
        INSERT INTO LOANS_SECURITY_DETAILS
        (BORROW_NO, SLNO, ACCT_NUM, CUST_ID, SECURITY_NO, FROM_DT, TO_DT, SECURITY_AMT, STATUS, STATUS_BY, STATUS_DT, MARGIN, ELIGIBLE_LOAN_AMT
        ) VALUES (
        #borrowNo:VARCHAR#, #slno:NUMERIC#, #acctNum:VARCHAR#, #custId:VARCHAR#, #securityNo:NUMERIC#, #fromDt:DATE#, #toDt:DATE#, 
        #securityAmt:NUMERIC#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #margin:NUMERIC#, #eligibleLoanAmt:NUMERIC#)
    </mapped-statement>

	<!-- Use TermLoanSecurityTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanSecurityTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_DETAILS SET 
        SECURITY_NO = #securityNo:NUMERIC#, 
        CUST_ID = #custId:VARCHAR#,
        FROM_DT = #fromDt:DATE#,
        TO_DT = #toDt:DATE#,
        SECURITY_AMT = #securityAmt:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        MARGIN = #margin:NUMERIC#,
        ELIGIBLE_LOAN_AMT = #eligibleLoanAmt:NUMERIC#
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SLNO = #slno:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>

	<!-- Use TermLoanSecurityTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanSecurityTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_DETAILS SET 
        STATUS = #status:VARCHAR#, 
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SLNO = #slno:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanSecurityTO object (JavaBean) properties -->
    <result-map name="getTermLoanSecurityTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanSecurityTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="slno" column="SLNO"/>
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="custId" column="CUST_ID"/>
        <property name="securityNo" column="SECURITY_NO"/>
        <property name="fromDt" column="FROM_DT"/>
        <property name="toDt" column="TO_DT"/>
        <property name="securityAmt" column="SECURITY_AMT"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="margin" column="MARGIN"/>
        <property name="eligibleLoanAmt" column="ELIGIBLE_LOAN_AMT"/>
    </result-map>
        
    <mapped-statement name="getSelectTermLoanSecurityTO" result-map="getTermLoanSecurityTOResult" >
        SELECT * FROM LOANS_SECURITY_DETAILS 
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(SLNO)
    </mapped-statement>

    <mapped-statement name="getSelectTermLoanSecurityMaxSLNO" result-class="java.util.HashMap">
        SELECT MAX(SLNO) AS MAX_NO FROM LOANS_SECURITY_DETAILS WHERE ACCT_NUM = #acctNum:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
        
    <mapped-statement name="getSelectGoldLoan" result-class="java.util.HashMap">
        SELECT GROSS_WEIGHT,NET_WEIGHT,PARTICULARS,PURITY,AS_ON FROM SECURITY_DETAILS WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND STATUS != 'DELETED' AND AUTHORIZE_STATUS='AUTHORIZED'
    </mapped-statement>
        
    <mapped-statement name="getLoanSecurity_Eligible_Loan_Amt" result-class="java.util.HashMap">
	<!--	SELECT SUM(ELIGIBLE_LOAN_AMT) AS ELIGIBLE_LOAN_AMOUNT 
                FROM LOANS_SECURITY_DETAILS 
                WHERE ACCT_NUM = #ACCT_NUM# AND STATUS IN ('CREATED', 'MODIFIED')  -->
        SELECT SUM(CNT) AS COUNT FROM (
        SELECT COUNT(*) AS CNT FROM LOANS_SECURITY_MEMBER WHERE STATUS!='DELETED' AND ACCT_NUM=#ACCT_NUM:VARCHAR#
        UNION ALL
        SELECT COUNT(*) AS CNT FROM LOANS_SECURITY_SALARY WHERE ACCT_NUM=#ACCT_NUM:VARCHAR#
        UNION ALL
        SELECT COUNT(*) AS CNT FROM LOANS_SECURITY_LAND WHERE STATUS!='DELETED' AND ACCT_NUM=#ACCT_NUM:VARCHAR#)LCNT
    </mapped-statement>
        
    <mapped-statement name="getMinimaminstallmentTL" result-class="java.util.HashMap">
        SELECT * FROM LOANS_INSTALLMENT WHERE INSTALLMENT_DT =(SELECT MIN(INSTALLMENT_DT) FROM LOANS_INSTALLMENT WHERE 
        ACCT_NUM =#ACT_NUM:VARCHAR#  AND IS_BALANCE IS NULL AND STATUS !='DELETED') AND STATUS !='DELETED' AND ACCT_NUM =#ACT_NUM:VARCHAR# ORDER BY INSTALLMENT_SLNO
    </mapped-statement>
    
    <mapped-statement name="getMaximaminstallmentTL" result-class="java.util.HashMap">
     SELECT   * FROM loans_installment WHERE installment_dt =(SELECT MAX (installment_dt) FROM loans_installment
              WHERE acct_num = #ACT_NUM:VARCHAR#
                    AND status != 'DELETED' and INSTALLMENT_PAID='Y')
     AND status != 'DELETED'
     AND acct_num =#ACT_NUM:VARCHAR#
     ORDER BY installment_slno
    </mapped-statement>
    
    <mapped-statement name="updateloanInstallment" inline-parameters="true">
        UPDATE LOANS_INSTALLMENT SET IS_BALANCE=0,INSTALLMENT_PAID='Y' WHERE ACCT_NUM=#ACCT_NUM:VARCHAR# AND INSTALLMENT_SLNO=#INSTALLMENT_NO:NUMERIC# AND STATUS !='DELETED'
    </mapped-statement>
    
    <mapped-statement name="updateloanInstallmentRollBack" inline-parameters="true">
        UPDATE LOANS_INSTALLMENT SET IS_BALANCE=null,INSTALLMENT_PAID='N' WHERE ACCT_NUM=#ACCT_NUM:VARCHAR# AND INSTALLMENT_SLNO=#INSTALLMENT_NO:NUMERIC# AND STATUS !='DELETED'
    </mapped-statement>            
                
    <mapped-statement name="updateCustSecurityAvailableAmt" inline-parameters="true">
        UPDATE CUST_SECURITY_DETAILS SET 
        AVAILABLE_SECURITY_VALUE = NVL (AVAILABLE_SECURITY_VALUE, 0) - #AVAILABLE_SECURITY_VALUE:NUMBER# 
        WHERE CUST_ID = #CUST_ID:VARCHAR# AND SECURITY_NO = #SECURITY_NO:NUMERIC#
    </mapped-statement>
        
    <mapped-statement name="getCustSecurityDetails" result-class="java.util.HashMap">
        SELECT * FROM CUST_SECURITY_DETAILS  CSD,loans_security_details LSD
        WHERE CSD.CUST_ID = #CUST_ID:VARCHAR#  AND
        LSD.CUST_ID = #CUST_ID:VARCHAR#   AND 
        CSD.SECURITY_NO =#SECURITY_NO:NUMERIC# AND 
        LSD.SECURITY_NO =#SECURITY_NO:NUMERIC#
        AND CSD.STATUS !='DELETED' AND LSD.STATUS !='DELETED' AND
        CSD.CUST_ID = LSD.CUST_ID AND CSD.SECURITY_NO = LSD.SECURITY_NO AND 
        (AUTHORIZE_STATUS IS NULL  OR AUTHORIZE_STATUS IN('AUTHORIZED'))
        
          <!--  SELECT * FROM CUST_SECURITY_DETAILS  
            WHERE CUST_ID = #CUST_ID:VARCHAR# AND SECURITY_NO = #SECURITY_NO:NUMERIC#
            AND STATUS !='DELETED' AND (AUTHORIZE_STATUS IS NULL  OR AUTHORIZE_STATUS IN('AUTHORIZED'))-->
    </mapped-statement>
        
        <!-- Use TermLoanRepaymentTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanRepaymentTO" inline-parameters="true">
        INSERT INTO LOANS_REPAY_SCHEDULE
        (BORROW_NO, PROD_ID, SCHEDULE_NO, LOAN_AMOUNT, INT_TYPE, INSTALL_TYPE, REPAYMENT_TYPE, 
        NO_INSTALLMENTS, FIRST_INSTALL_DT, LAST_INSTALL_DT, TOTAL_BASE_AMT, BALANCE_LOAN_AMT, AMT_PENULTIMATE_INSTALL, 
        EMI, AMT_LAST_INSTALL, REPAYMENT_PR, TOTAL_INSTALL_AMT, REPAY_INTEREST, ADD_SI, POST_DATE_CHQALLOWED, AUTHORIZE_REMARKS, 
        AUTHORIZE_STATUS, ACCT_NUM, STATUS, STATUS_BY, STATUS_DT, REPAY_ACTIVE, DISBURSEMENT_ID, DISBURSEMENT_DT, SCHEDULE_MODE, 
        REF_SCHEDULE_NO,REPAY_FROMDT,REPAY_MOROTORIUM,EMI_IN_SIMPLEINTREST
        ) VALUES (
        #borrowNo:VARCHAR#, #prodId:VARCHAR#, #scheduleNo:NUMERIC#, #loanAmount:NUMERIC#, #intType:VARCHAR#, #installType:VARCHAR#, 
        #repaymentType:NUMERIC#, #noInstallments:NUMERIC#, #firstInstallDt:DATE#, #lastInstallDt:DATE#, #totalBaseAmt:NUMERIC#, 
        #balanceLoanAmt:NUMERIC#, #amtPenultimateInstall:NUMERIC#, #emi:NUMERIC#, #amtLastInstall:NUMERIC#, #repaymentPr:NUMERIC#, 
        #totalInstallAmt:NUMERIC#, #repayInterest:NUMERIC#, #addSi:VARCHAR#, #postDateChqallowed:VARCHAR#, #authorizeRemarks:VARCHAR#, 
        #authorizeStatus:VARCHAR#, #acctNum:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #repayActive:VARCHAR#, 
        #disbursementId:NUMERIC#, #disbursementDt:DATE#, #scheduleMode:VARCHAR#, #refScheduleNo:NUMERIC# ,#fromDate:DATE#,#repayMorotorium:NUMERIC#,#emi_uniform:VARCHAR#)
    </mapped-statement>

	<!-- Use TermLoanRepaymentTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanRepaymentTO" inline-parameters="true">
        UPDATE LOANS_REPAY_SCHEDULE SET 
		<!--BORROW_NO = #borrowNo:VARCHAR#,-->
        PROD_ID = #prodId:VARCHAR#,
		<!--SCHEDULE_NO = #scheduleNo:VARCHAR#,-->
        REPAY_MOROTORIUM =#repayMorotorium:NUMERIC#,
        LOAN_AMOUNT = #loanAmount:NUMERIC#,
        INT_TYPE = #intType:VARCHAR#,
        INSTALL_TYPE = #installType:VARCHAR#,
        REPAYMENT_TYPE = #repaymentType:NUMERIC#,
        NO_INSTALLMENTS = #noInstallments:NUMERIC#,
        REPAY_FROMDT =  #fromDate:DATE#,
        FIRST_INSTALL_DT = #firstInstallDt:DATE#,
        LAST_INSTALL_DT = #lastInstallDt:DATE#,
        TOTAL_BASE_AMT = #totalBaseAmt:NUMERIC#,
        BALANCE_LOAN_AMT = #balanceLoanAmt:NUMERIC#,
        AMT_PENULTIMATE_INSTALL = #amtPenultimateInstall:NUMERIC#,
        EMI = #emi:NUMERIC#,
        AMT_LAST_INSTALL = #amtLastInstall:NUMERIC#,
        REPAYMENT_PR = #repaymentPr:NUMERIC#,
        TOTAL_INSTALL_AMT = #totalInstallAmt:NUMERIC#,
        REPAY_INTEREST = #repayInterest:NUMERIC#,
        ADD_SI = #addSi:VARCHAR#,
        POST_DATE_CHQALLOWED = #postDateChqallowed:VARCHAR#,
        AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
		<!--ACCT_NUM = #acctNum:VARCHAR#-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        REPAY_ACTIVE = #repayActive:VARCHAR#,
        DISBURSEMENT_ID = #disbursementId:NUMERIC#,
        SCHEDULE_MODE = #scheduleMode:VARCHAR#,
        REF_SCHEDULE_NO = #refScheduleNo:NUMERIC#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SCHEDULE_NO = #scheduleNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>

	<!-- Use TermLoanRepaymentTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanRepaymentTO" inline-parameters="true">
        UPDATE LOANS_REPAY_SCHEDULE SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SCHEDULE_NO = #scheduleNo:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>

    <mapped-statement name="updateProdID_TermLoanRepaymentTO" inline-parameters="true">
        UPDATE LOANS_REPAY_SCHEDULE SET 
        PROD_ID = #prodId:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>
        
    <mapped-statement name="updateRepayScheduleNoInLoansDisbursement" inline-parameters="true">
        UPDATE LOANS_DISBURSEMENT SET 
        REPAYMENT_SCHEDULE_NO = #REPAYMENT_SCHEDULE_NO#<!--CASE WHEN  (#REPAYMENT_SCHEDULE_NO# = '' OR #REPAYMENT_SCHEDULE_NO# = NULL) THEN NULL ELSE #REPAYMENT_SCHEDULE_NO# END -->
        WHERE ACT_NUM = cast(#ACCOUNTNO# as VARCHAR) AND DISBURSEMENT_ID = cast(#DISBURSEMENT_ID# as NUMERIC) AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>
        
	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanRepaymentTO object (JavaBean) properties -->
    <result-map name="getTermLoanRepaymentTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanRepaymentTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="scheduleNo" column="SCHEDULE_NO"/>
        <property name="loanAmount" column="LOAN_AMOUNT"/>
        <property name="intType" column="INT_TYPE"/>
        <property name="installType" column="INSTALL_TYPE"/>
        <property name="repaymentType" column="REPAYMENT_TYPE"/>
        <property name="noInstallments" column="NO_INSTALLMENTS"/>
        <property name="fromDate" column="REPAY_FROMDT"/>
        <property name="firstInstallDt" column="FIRST_INSTALL_DT"/>
        <property name="lastInstallDt" column="LAST_INSTALL_DT"/>
        <property name="repayMorotorium" column="REPAY_MOROTORIUM"/>
        <property name="totalBaseAmt" column="TOTAL_BASE_AMT"/>
        <property name="balanceLoanAmt" column="BALANCE_LOAN_AMT"/>
        <property name="amtPenultimateInstall" column="AMT_PENULTIMATE_INSTALL"/>
        <property name="emi" column="EMI"/>
        <property name="amtLastInstall" column="AMT_LAST_INSTALL"/>
        <property name="repaymentPr" column="REPAYMENT_PR"/>
        <property name="totalInstallAmt" column="TOTAL_INSTALL_AMT"/>
        <property name="repayInterest" column="REPAY_INTEREST"/>
        <property name="addSi" column="ADD_SI"/>
        <property name="postDateChqallowed" column="POST_DATE_CHQALLOWED"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="repayActive" column="REPAY_ACTIVE"/>
        <property name="disbursementId" column="DISBURSEMENT_ID"/>
        <property name="disbursementDt" column="DISBURSEMENT_DT"/>
        <property name="scheduleMode" column="SCHEDULE_MODE"/>
        <property name="refScheduleNo" column="REF_SCHEDULE_NO"/>
        <property name="emi_uniform" column="EMI_IN_SIMPLEINTREST"/>
    </result-map>
        
    <mapped-statement name="getSelectTermLoanRepaymentTO" result-map="getTermLoanRepaymentTOResult" >
        SELECT * FROM LOANS_REPAY_SCHEDULE 
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(SCHEDULE_NO)
    </mapped-statement>
        
    <mapped-statement name="getSelectTermLoanRepaymentMaxSLNO" result-class="java.util.HashMap">
        SELECT MAX(SCHEDULE_NO) AS MAX_SCHEDULE_NO FROM LOANS_REPAY_SCHEDULE WHERE ACCT_NUM = #acctNum:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
        <!-- Use TermLoanInstallMultIntTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanInstallMultIntTO" inline-parameters="true">
        INSERT INTO LOANS_INSTALLMENT_MULTIRATE
        (ACCT_NUM, SCHEDULE_ID, INSTALLMENT_SLNO, INTEREST_RATE, FROM_DT, TO_DT
        ) VALUES (
        #acctNum:VARCHAR#, #scheduleId:NUMERIC#, #installmentSlno:NUMERIC#, #interestRate:NUMERIC#, #fromDt:DATE#, #toDt:DATE#)
    </mapped-statement>

	<!-- Use TermLoanInstallMultIntTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanInstallMultIntTO" inline-parameters="true">
        UPDATE LOANS_INSTALLMENT_MULTIRATE SET 
        INTEREST_RATE = #interestRate:NUMERIC#,
        FROM_DT = #fromDt:DATE#,
        TO_DT = #toDt:DATE#
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SCHEDULE_ID = #scheduleId:NUMERIC# AND INSTALLMENT_SLNO = #installmentSlno:NUMERIC#
    </mapped-statement>

	<!-- Use TermLoanInstallMultIntTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanInstallMultIntTO" inline-parameters="true">
        UPDATE LOANS_INSTALLMENT_MULTIRATE SET 
        INTEREST_RATE = #interestRate:NUMERIC#
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SCHEDULE_ID = #scheduleId:NUMERIC# AND INSTALLMENT_SLNO = #installmentSlno:NUMERIC#
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanInstallMultIntTO object (JavaBean) properties -->
    <result-map name="getTermLoanInstallMultIntTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanInstallMultIntTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="scheduleId" column="SCHEDULE_ID"/>
        <property name="installmentSlno" column="INSTALLMENT_SLNO"/>
        <property name="interestRate" column="INTEREST_RATE"/>
        <property name="fromDt" column="FROM_DT"/>
        <property name="toDt" column="TO_DT"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanInstallMultIntTO" result-map="getTermLoanInstallMultIntTOResult" >
        SELECT * FROM LOANS_INSTALLMENT_MULTIRATE 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SCHEDULE_ID = #scheduleId:NUMERIC# AND INSTALLMENT_SLNO = #installmentSlno:NUMERIC#
    </mapped-statement>
        
        <!-- Use TermLoanInstallmentTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanInstallmentTO" inline-parameters="true">
        INSERT INTO LOANS_INSTALLMENT
        (ACCT_NUM, SCHEDULE_ID, INSTALLMENT_SLNO, INSTALLMENT_DT, PRINCIPAL_AMT, INTEREST_AMT, TOTAL_AMT, BALANCE_AMT, 
        STATUS, INTEREST_RATE, INSTALLMENT_PAID,ACTIVE_STATUS
        ) VALUES (
        #acctNum:VARCHAR#, #scheduleId:NUMERIC#, #installmentSlno:NUMERIC#, #installmentDt:DATE#, #principalAmt:NUMERIC#, 
        #interestAmt:NUMERIC#, #totalAmt:NUMERIC#, #balanceAmt:NUMERIC#, #status:VARCHAR#, 
        #interestRate:NUMERIC#, #installmentPaid:VARCHAR#,#activeStatus:VARCHAR#)
    </mapped-statement>

	<!-- Use TermLoanInstallmentTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanInstallmentTO" inline-parameters="true">
        UPDATE LOANS_INSTALLMENT SET 
		<!--ACCT_NUM = #acctNum:VARCHAR#,
		SCHEDULE_ID = #scheduleId:VARCHAR#,
		INSTALLMENT_SLNO = #installmentSlno:NUMERIC#,-->
        ACTIVE_STATUS=#activeStatus:VARCHAR#,
        INSTALLMENT_DT = #installmentDt:DATE#,
        PRINCIPAL_AMT = #principalAmt:NUMERIC#,
        INTEREST_AMT = #interestAmt:NUMERIC#,
        TOTAL_AMT = #totalAmt:NUMERIC#,
        BALANCE_AMT = #balanceAmt:NUMERIC#,
        INTEREST_RATE = #interestRate:NUMERIC#,
        INSTALLMENT_PAID = #installmentPaid:VARCHAR#,
        STATUS = #status:VARCHAR#
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SCHEDULE_ID = #scheduleId:NUMERIC# AND INSTALLMENT_SLNO = #installmentSlno:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')   
    </mapped-statement>

	<!-- Use TermLoanInstallmentTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanInstallmentTO" inline-parameters="true">
        UPDATE LOANS_INSTALLMENT SET 
        STATUS = #status:VARCHAR#
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SCHEDULE_ID = #scheduleId:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')  
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanInstallmentTO object (JavaBean) properties -->
    <result-map name="getTermLoanInstallmentTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanInstallmentTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="scheduleId" column="SCHEDULE_ID"/>
        <property name="installmentSlno" column="INSTALLMENT_SLNO"/>
        <property name="installmentDt" column="INSTALLMENT_DT"/>
        <property name="principalAmt" column="PRINCIPAL_AMT"/>
        <property name="interestAmt" column="INTEREST_AMT"/>
        <property name="totalAmt" column="TOTAL_AMT"/>
        <property name="balanceAmt" column="BALANCE_AMT"/>
        <property name="status" column="STATUS"/>
        <property name="interestRate" column="INTEREST_RATE"/>
        <property name="installmentPaid" column="INSTALLMENT_PAID"/>
        <property name="activeStatus" column="ACTIVE_STATUS"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanInstallmentTO" result-map="getTermLoanInstallmentTOResult" >
        SELECT * FROM LOANS_INSTALLMENT 
        WHERE ACCT_NUM = #DELACTNUM:VARCHAR# AND SCHEDULE_ID = #DELSCHNUM:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(INSTALLMENT_SLNO) 
    </mapped-statement>
        
    <mapped-statement name="getSelectTermLoanInstallmentMaxSLNO" result-class="java.util.HashMap">
        SELECT MAX(INSTALLMENT_SLNO) AS MAX_INSTALL_NO FROM LOANS_INSTALLMENT WHERE ACCT_NUM = #acctNum:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
        
        <!-- Use TermLoanGuarantorTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanGuarantorTO" inline-parameters="true">
        INSERT INTO LOANS_GUARANTOR_DETAILS
        (BORROW_NO, PROD_ID, CUST_ID, GUARANTOR_AC_NO, NAME, STREET, AREA, CITY, STATE, COUNTRY_CODE, PINCODE, PHONE, CONSTITUTION, 
        GUARANTOR_NET_WORTH, GUARANTOR_NETWORTH_ON, AUTHORIZE_REMARKS, AUTHORIZE_STATUS, ACCT_NUM, STATUS, SLNO, STATUS_BY, STATUS_DT, 
        GUARANTOR_PROD_TYPE, GUARANTOR_PROD_ID, DOB,GUARANT_CONSITIUTION
        ) VALUES (
        #borrowNo:VARCHAR#, #prodId:VARCHAR#, #custId:VARCHAR#, #guarantorAcNo:VARCHAR#, #name:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, 
        #city:VARCHAR#, #state:VARCHAR#, #countryCode:VARCHAR#, #pincode:VARCHAR#, #phone:VARCHAR#, #constitution:VARCHAR#, #guarantorNetWorth:NUMERIC#, 
        #guarantorNetworthOn:DATE#, #authorizeRemarks:VARCHAR#, #authorizeStatus:VARCHAR#, #acctNum:VARCHAR#, #status:VARCHAR#, #slno:NUMERIC#, 
        #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #guarantorProdType:VARCHAR#, #guarantorProdId:VARCHAR#, #dob:DATE#,#guarntConstitution:VARCHAR#)
    </mapped-statement>

	<!-- Use TermLoanGuarantorTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanGuarantorTO" inline-parameters="true">
        UPDATE LOANS_GUARANTOR_DETAILS SET 
		<!--BORROW_NO = #borrowNo:VARCHAR#,-->
        PROD_ID = #prodId:VARCHAR#,
        CUST_ID = #custId:VARCHAR#,
        GUARANTOR_AC_NO = #guarantorAcNo:VARCHAR#,
        GUARANT_CONSITIUTION=#guarntConstitution:VARCHAR#,
        NAME = #name:VARCHAR#,
        GUARANTOR_PROD_TYPE = #guarantorProdType:VARCHAR#,
        GUARANTOR_PROD_ID = #guarantorProdId:VARCHAR#,
        DOB = #dob:DATE#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        PINCODE = #pincode:VARCHAR#,
        PHONE = #phone:VARCHAR#,
        CONSTITUTION = #constitution:VARCHAR#,
        GUARANTOR_NET_WORTH = #guarantorNetWorth:NUMERIC#,
        GUARANTOR_NETWORTH_ON = #guarantorNetworthOn:DATE#,
        AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
		<!--ACCT_NUM = #acctNum:VARCHAR#,-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
		<!--SLNO = #slno:VARCHAR#-->
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SLNO = #slno:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanGuarantorTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanGuarantorTO" inline-parameters="true">
        UPDATE LOANS_GUARANTOR_DETAILS SET 
        AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SLNO = #slno:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

    <mapped-statement name="updateProdID_TermLoanGuarantorTO" inline-parameters="true">
        UPDATE LOANS_GUARANTOR_DETAILS SET
        PROD_ID = #prodId:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanGuarantorTO object (JavaBean) properties -->
    <result-map name="getTermLoanGuarantorTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanGuarantorTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="custId" column="CUST_ID"/>
        <property name="guarantorAcNo" column="GUARANTOR_AC_NO"/>
        <property name="name" column="NAME"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="pincode" column="PINCODE"/>
        <property name="phone" column="PHONE"/>
        <property name="constitution" column="CONSTITUTION"/>
        <property name="guarntConstitution" column="GUARANT_CONSITIUTION"/>
        <property name="guarantorNetWorth" column="GUARANTOR_NET_WORTH"/>
        <property name="guarantorNetworthOn" column="GUARANTOR_NETWORTH_ON"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="status" column="STATUS"/>
        <property name="slno" column="SLNO"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="guarantorProdType" column="GUARANTOR_PROD_TYPE"/>
        <property name="guarantorProdId" column="GUARANTOR_PROD_ID"/>
        <property name="dob" column="DOB"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanGuarantorTO" result-map="getTermLoanGuarantorTOResult" >
        SELECT * FROM LOANS_GUARANTOR_DETAILS 
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(SLNO)
    </mapped-statement>
        
        
          <!-- Use TermLoanGuarantorTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanInstitGuarantorTO" inline-parameters="true">
        INSERT INTO LOANS_INSTUT_GUARANTOR_DETAILS
        (
        PLINAME	,PLIBRANCH,SLNO,GUARATNO,GUARANDATE,GUARANPERIODFROM,GUARANPERIODTO,GUARANCOMMISION,GUARANSTATUS,
        STATUSDATE,GUARNREMARKS,STATUS,GUARNT_CONSTITUTION,ACCT_NUM
        ) VALUES (
        #pliName:VARCHAR#, #pliBranch:VARCHAR#, #slno:VARCHAR#, #guaratNo:VARCHAR#, #guaranDate:DATE#,
        #guaranPeriodFrom:DATE#, #guaranPeriodTo:DATE#, #guaranCommision:VARCHAR#, #guaranStatus:VARCHAR#, 
        #statusDate:DATE#, #guarnRemarks:VARCHAR#, #status:VARCHAR#, #guarntConstitution:VARCHAR#,#acctNum:VARCHAR#)
    </mapped-statement>
 
	<!-- Use TermLoanGuarantorTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanInstitGuarantorTO" inline-parameters="true">
        UPDATE LOANS_INSTUT_GUARANTOR_DETAILS SET 
		<!--BORROW_NO = #borrowNo:VARCHAR#,-->
        PLINAME=#pliName:VARCHAR#,
        PLIBRANCH=#pliBranch:VARCHAR#,
        SLNO=#slno:VARCHAR#,
        GUARATNO=#guaratNo:VARCHAR#,
        GUARANDATE=#guaranDate:DATE#,
        GUARANPERIODFROM=#guaranPeriodFrom:DATE#,
        GUARANPERIODTO=#guaranPeriodTo:DATE#,
        GUARANCOMMISION=#guaranCommision:VARCHAR#,
        GUARANSTATUS=#guaranStatus:VARCHAR#,
        STATUSDATE=#statusDate:DATE#,
        GUARNREMARKS=#guarnRemarks:VARCHAR#,
        STATUS=#status:VARCHAR#,
        GUARNT_CONSTITUTION=#guarntConstitution:VARCHAR#
		<!--SLNO = #slno:VARCHAR#-->
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SLNO = #slno:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanGuarantorTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanInstitGuarantorTO" inline-parameters="true">
        UPDATE LOANS_GUARANTOR_DETAILS SET 
        AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SLNO = #slno:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

    <mapped-statement name="updateProdID_TermLoanInstitGuarantorTO" inline-parameters="true">
        UPDATE LOANS_GUARANTOR_DETAILS SET
        PROD_ID = #prodId:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanGuarantorTO object (JavaBean) properties -->
    <result-map name="getTermLoanInstitGuarantorTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanInstitGuarantorTO">
        <property name="pliName" column="PLINAME"/>
        <property name="pliBranch" column="PLIBRANCH"/>
        <property name="slno" column="SLNO"/>
        <property name="guaratNo" column="GUARATNO"/>
        <property name="guaranDate" column="GUARANDATE"/>
        <property name="guaranPeriodFrom" column="GUARANPERIODFROM"/>
        <property name="guaranPeriodTo" column="GUARANPERIODTO"/>
        <property name="guaranCommision" column="GUARANCOMMISION"/>
        <property name="guaranStatus" column="GUARANSTATUS"/>
                
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="status" column="STATUS"/>
        <property name="statusDate" column="STATUSDATE"/>
        <property name="guarntConstitution" column="GUARNT_CONSTITUTION"/>
        <property name="guarnRemarks" column="GUARNREMARKS"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanInstitGuarantorTO" result-map="getTermLoanInstitGuarantorTOResult" >
        SELECT * FROM LOANS_INSTUT_GUARANTOR_DETAILS
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(SLNO)
    </mapped-statement>
    <mapped-statement name="getSelectTermLoanGuarantorMaxSLNO" result-class="java.util.HashMap">
        SELECT MAX(SLNO) AS MAX_SL_NO FROM LOANS_GUARANTOR_DETAILS WHERE ACCT_NUM = #acctNum:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
        
        <!-- Use TermLoanDocumentTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanDocumentTO" inline-parameters="true">
        INSERT INTO LOANS_DOC
        (BORROW_NO, ACCT_NO, DOC_TYPE, DOC_FORM_NO, IS_SUBMITTED, SUBMITTED_DT, REMARKS, STATUS_BY, STATUS_DT, DOC_EXP_DT, IS_MANDATORY, IS_EXECUTED, DOC_EXEC_DT
        ) VALUES (
        #borrowNo:VARCHAR#, #acctNo:VARCHAR#, #docType:VARCHAR#, #docFormNo:VARCHAR#, #isSubmitted:VARCHAR#, #submittedDt:DATE#, #remarks:VARCHAR#, #statusBy:VARCHAR#, 
        #statusDt:TIMESTAMP#, #docExpDt:DATE#, #isMandatory:VARCHAR#, #isExecuted:VARCHAR#, #docExecDt:DATE#)
    </mapped-statement>

	<!-- Use TermLoanDocumentTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanDocumentTO" inline-parameters="true">
        UPDATE LOANS_DOC SET 
        IS_SUBMITTED = #isSubmitted:VARCHAR#,
        SUBMITTED_DT = #submittedDt:DATE#,
        REMARKS = #remarks:VARCHAR#,
        DOC_EXP_DT = #docExpDt:DATE#,
        IS_MANDATORY = #isMandatory:VARCHAR#,
        IS_EXECUTED = #isExecuted:VARCHAR#,
        DOC_EXEC_DT = #docExecDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NO = #acctNo:VARCHAR# AND DOC_TYPE = #docType:VARCHAR# AND DOC_FORM_NO = #docFormNo:VARCHAR#
    </mapped-statement>
        
	<!-- Use TermLoanDocumentTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanDocumentTO" inline-parameters="true">
        UPDATE LOANS_DOC SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NO = #acctNo:VARCHAR# AND  DOC_TYPE = #docType:VARCHAR# AND DOC_FORM_NO = #docFormNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanDocumentTO object (JavaBean) properties -->
    <result-map name="getTermLoanDocumentTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanDocumentTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="acctNo" column="ACCT_NO"/>
        <property name="docType" column="DOC_TYPE"/>
        <property name="docFormNo" column="DOC_FORM_NO"/>
        <property name="isSubmitted" column="IS_SUBMITTED"/>
        <property name="submittedDt" column="SUBMITTED_DT"/>
        <property name="remarks" column="REMARKS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="docExpDt" column="DOC_EXP_DT"/>
        <property name="isMandatory" column="IS_MANDATORY"/>
        <property name="isExecuted" column="IS_EXECUTED"/>
        <property name="docExecDt" column="DOC_EXEC_DT"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanDocumentTO" result-class="java.util.HashMap">
        SELECT LPD.DOC_TYPE, LPD.DOC_NO DOC_FORM_NO, LPD.DOC_DESC, NULL IS_SUBMITTED, NULL SUBMITTED_DT, NULL BORROW_NO, NULL ACCT_NO, NULL REMARKS, 
        NULL DOC_EXP_DT, NULL IS_MANDATORY, NULL IS_EXECUTED, NULL DOC_EXEC_DT 
        FROM LOANS_PROD_DOC LPD 
        WHERE ((LPD.STATUS != 'DELETED') AND LPD.PROD_ID = (SELECT PROD_ID FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #value# AND DOC_DETAILS='DOCDETAILS') AND 
                <!--LPD.DOC_NO || LPD.DOC_TYPE NOT IN (SELECT DOC_FORM_NO || DOC_TYPE FROM 
                LOANS_DOC WHERE ACCT_NO = #value#)) -->
        NOT EXISTS (SELECT DOC_FORM_NO || DOC_TYPE FROM 
        LOANS_DOC WHERE ACCT_NO = #value:VARCHAR# AND LPD.DOC_NO || LPD.DOC_TYPE=DOC_FORM_NO || DOC_TYPE)) 
        UNION 
        SELECT LPD.DOC_TYPE, LPD.DOC_NO DOC_FORM_NO, LPD.DOC_DESC, LD.IS_SUBMITTED, 
        LD.SUBMITTED_DT, LD.BORROW_NO, LD.ACCT_NO, LD.REMARKS, 
        LD.DOC_EXP_DT, LD.IS_MANDATORY, LD.IS_EXECUTED, LD.DOC_EXEC_DT 
        FROM LOANS_PROD_DOC LPD, LOANS_DOC LD 
        WHERE (LPD.STATUS != 'DELETED') AND 
        LPD.PROD_ID = (SELECT PROD_ID FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #value:VARCHAR# AND DOC_DETAILS='DOCDETAILS') AND 
        LPD.DOC_NO || LPD.DOC_TYPE = LD.DOC_FORM_NO || LD.DOC_TYPE AND LD.ACCT_NO = #value:VARCHAR#
    </mapped-statement>
        
        <!-- Use TermLoanInterestTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanInterestTO" inline-parameters="true">   
        INSERT INTO LOANS_INT_MAINTENANCE
        (BORROW_NO, PROD_ID, FROM_DT, TO_DT, FROM_AMT, TO_AMT, INTEREST, PENAL_INTEREST, AGAINST_CLEARING_INT, STATEMENT_PENAL, 
        INTEREST_EXPIRY_LIMIT, AUTHORIZE_REMARKS, AUTHORIZE_STATUS, ACCT_NUM, STATUS, SLNO, STATUS_BY, STATUS_DT,INT_ACTIVE_STATUS,
        RET_CREATE_DT,TOD_OVERDUE_INT,TOD_INT
        ) VALUES (
        #borrowNo:VARCHAR#, #prodId:VARCHAR#, #fromDt:DATE#, #toDt:DATE#, #fromAmt:NUMERIC#, #toAmt:NUMERIC#, #interest:NUMERIC#, 
        #penalInterest:NUMERIC#, #againstClearingInt:NUMERIC#, #statementPenal:NUMERIC#, #interestExpiryLimit:NUMERIC#, #authorizeRemarks:VARCHAR#, 
        #authorizeStatus:VARCHAR#, #acctNum:VARCHAR#, #status:VARCHAR#, #slno:NUMERIC#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#,#activeStatus:VARCHAR#,
        #retCreateDt:DATE#,#todOverDueInt:NUMERIC#,#todInt:NUMERIC#)
    </mapped-statement>

	<!-- Use TermLoanInterestTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanInterestTO" inline-parameters="true">
        UPDATE LOANS_INT_MAINTENANCE SET 
		<!--BORROW_NO = #borrowNo:VARCHAR#,-->
        PROD_ID = #prodId:VARCHAR#,
                <!--FROM_DT = #fromDt:DATE#,-->
        TO_DT = #toDt:DATE#,
        FROM_AMT = #fromAmt:NUMERIC#,
        TO_AMT = #toAmt:NUMERIC#,
        INTEREST = #interest:NUMERIC#,
        PENAL_INTEREST = #penalInterest:NUMERIC#,
        AGAINST_CLEARING_INT = #againstClearingInt:NUMERIC#,
        STATEMENT_PENAL = #statementPenal:NUMERIC#,
        INTEREST_EXPIRY_LIMIT = #interestExpiryLimit:NUMERIC#,
        TOD_OVERDUE_INT= #todOverDueInt:NUMERIC#,
        TOD_INT=#todInt:NUMERIC#,
        AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
		<!--ACCT_NUM = #acctNum:VARCHAR#,-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# ,
        INT_ACTIVE_STATUS=#activeStatus:VARCHAR#
		<!--SLNO = #slno:VARCHAR#-->
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SLNO = #slno:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanInterestTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanInterestTO" inline-parameters="true">
        UPDATE LOANS_INT_MAINTENANCE SET
        AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#<!--,
                STATUS = #status:VARCHAR#,
		STATUS_BY = #statusBy:VARCHAR#,
		STATUS_DT = #statusDt:TIMESTAMP# -->
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SLNO = #slno:NUMERIC# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

    <mapped-statement name="updateProdID_TermLoanInterestTO" inline-parameters="true">
        UPDATE LOANS_INT_MAINTENANCE SET
        PROD_ID = #prodId:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
    <mapped-statement name="updateIntMaintenanceTL" inline-parameters="true">
        UPDATE LOANS_INT_MAINTENANCE SET TO_DT =NULL WHERE TO_DT =#toDt:DATE#-1  AND ACCT_NUM=#acctNum:VARCHAR#
    </mapped-statement>    
        
	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanInterestTO object (JavaBean) properties -->
    <result-map name="getTermLoanInterestTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanInterestTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="fromDt" column="FROM_DT"/>
        <property name="toDt" column="TO_DT"/>
        <property name="fromAmt" column="FROM_AMT"/>
        <property name="toAmt" column="TO_AMT"/>
        <property name="interest" column="INTEREST"/>
        <property name="penalInterest" column="PENAL_INTEREST"/>
        <property name="againstClearingInt" column="AGAINST_CLEARING_INT"/>
        <property name="statementPenal" column="STATEMENT_PENAL"/>
        <property name="interestExpiryLimit" column="INTEREST_EXPIRY_LIMIT"/>
        <property name="todOverDueInt" column="TOD_OVERDUE_INT"/>
        <property name="todInt" column="TOD_INT"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>  
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="status" column="STATUS"/>
        <property name="slno" column="SLNO"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="activeStatus" column="INT_ACTIVE_STATUS"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanInterestTO" result-map="getTermLoanInterestTOResult" >
        SELECT * FROM LOANS_INT_MAINTENANCE 
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(SLNO) 
    </mapped-statement>
        
    <mapped-statement name="getSelectTermLoanAcctInterest" result-class="java.util.LinkedHashMap" >
        SELECT   *
        FROM LOANS_INT_MAINTENANCE
        WHERE ACCT_NUM = #ACCOUNT_NO:VARCHAR#
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
        AND ((#FROM_DATE# BETWEEN FROM_DT AND TO_DT) AND (INT_ACTIVE_STATUS !='N') <!--OR (FROM_DT &lt; #FROM_DATE# AND TO_DT IS NULL)-->
        )
        AND AUTHORIZE_STATUS='AUTHORIZED'    
        ORDER BY TO_NUMBER (SLNO)	
    </mapped-statement>
    <result-map name="getLoanProductInterestTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanInterestTO">
        <property name="prodId" column="PROD_ID"/>
        <property name="fromDt" column="ROI_DATE"/>
        <property name="toDt" column="ROI_END_DATE"/>
        <property name="fromAmt" column="FROM_AMOUNT"/>
        <property name="toAmt" column="TO_AMOUNT"/>
        <property name="interest" column="ROI"/>
        <property name="penalInterest" column="PENAL_INT"/>
        <property name="todOverDueInt" column="OVERDUE_INT"/>
        <property name="todInt" column="ADDITIONAL_INT"/>
        <property name="againstClearingInt" column="AGAINST_CLEARING_INT"/>
        <property name="statementPenal" column="STATEMENT_PENEL"/>
        <property name="interestExpiryLimit" column="INT_EXPIRY_LIMIT"/>
        <property name="status" column="STATUS"/>
        <property name="activeStatus" column="ROI_ACTIVE_STATUS"/>
    </result-map>
    <mapped-statement name="getSelectProductTermLoanInterestTO" result-map="getLoanProductInterestTOResult" >
        SELECT DRGTR.ROI, DRGTR.ROI_DATE, DRGTR.ROI_END_DATE, DRGP.PROD_ID, DRGTR.FROM_AMOUNT, DRGTR.TO_AMOUNT,  DRGTR.ROI_ACTIVE_STATUS,
        DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT  "ADDITIONAL_INT", DRGTR.INT_EXPIRY_LIMIT, DRGTR.PENAL_INT, DRGTR.STATUS,DRGTR.OD_INT_RATE "OVERDUE_INT",DRGTR.STATEMENT_PENEL
        FROM DEPOSIT_ROI_GROUP DRG, 
        DEPOSIT_ROI_GROUP_CAT DRGC, DEPOSIT_ROI_GROUP_PROD DRGP,
        DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR WHERE
        DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID AND
        DRG.PRODUCT_TYPE IN( 'TL','AD') AND 
        DRGP.PROD_ID = #PROD_ID:VARCHAR# AND 
        DRGC.CATEGORY_ID = #CATEGORY_ID:VARCHAR# AND
        #AMOUNT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND
        ((#FROM_DATE:DATE#&gt;= ROI_DATE AND #FROM_DATE:DATE# &lt;= ROI_END_DATE) OR 
        (ROI_DATE&lt;= #FROM_DATE:DATE# AND ROI_END_DATE IS NULL))
        AND  (cast(#TO_DATE# as DATE))-(cast(#FROM_DATE# as DATE)) BETWEEN FROM_PERIOD AND TO_PERIOD
          <!--((#FROM_DATE# &gt;= ROI_DATE) OR (#TO_DATE# &lt;= ROI_END_DATE))-->
    </mapped-statement>
        <!--<mapped-statement name="getSelectProductBillsInterestTO" result-map="getTermLoanInterestTOResult" >
		SELECT DRGTR.ROI, DRGTR.ROI_DATE, DRGTR.ROI_END_DATE, DRGP.PROD_ID, DRGTR.FROM_AMOUNT, DRGTR.TO_AMOUNT,DRGTR.ROI_ACTIVE_STATUS,
                DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT, DRGTR.INT_EXPIRY_LIMIT, DRGTR.PENAL_INT, DRGTR.STATUS FROM DEPOSIT_ROI_GROUP DRG, 
                DEPOSIT_ROI_GROUP_CAT DRGC, DEPOSIT_ROI_GROUP_PROD DRGP,
                DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR WHERE
                DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID AND
                DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID AND
                DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID AND
                DRG.PRODUCT_TYPE IN( 'BILLS') AND 
                DRGP.PROD_ID = #PROD_ID# AND 
                DRGC.CATEGORY_ID = #CATEGORY_ID# AND
                #AMOUNT# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND
                ((#FROM_DATE# BETWEEN ROI_DATE AND ROI_END_DATE) OR 
                (ROI_DATE&lt;#FROM_DATE# AND ROI_END_DATE IS NULL))
                AND #TO_DATE#-#FROM_DATE# BETWEEN FROM_PERIOD AND TO_PERIOD
	</mapped-statement>-->
    <mapped-statement name="getSelectProductMaintenanceRetraspectiveInterestTO" result-class="java.util.LinkedHashMap" >
        SELECT DRGTR.ROI, DRGTR.ROI_DATE, DRGTR.ROI_END_DATE, DRGP.PROD_ID, DRGTR.FROM_AMOUNT, DRGTR.TO_AMOUNT, 
        DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT "ADDITIONAL_INT", DRGTR.INT_EXPIRY_LIMIT, DRGTR.PENAL_INT, DRGTR.STATUS,DRGTR.OD_INT_RATE "OVERDUE_INT",
        DRGTR.STATEMENT_PENEL FROM DEPOSIT_ROI_GROUP DRG, 
        DEPOSIT_ROI_GROUP_CAT DRGC, DEPOSIT_ROI_GROUP_PROD DRGP,
        DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR WHERE
        DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID AND
        DRG.PRODUCT_TYPE IN( 'TL','AD') 
        AND  DRGTR.ROI_GROUP_ID =#ROI_GROUP_ID:VARCHAR# AND 
        ((#FROM_DATE:DATE#  BETWEEN ROI_DATE AND ROI_END_DATE) OR 
        (ROI_DATE <!--&lt;-->= #FROM_DATE:DATE# AND ROI_END_DATE IS NULL))
    </mapped-statement>
        
    <mapped-statement name="getSelectProductTermLoanInterestFloatTO" result-map="getLoanProductInterestTOResult" >
        SELECT DRGTR.ROI, DRGTR.ROI_DATE, DRGTR.ROI_END_DATE, DRGP.PROD_ID, DRGTR.FROM_AMOUNT, DRGTR.TO_AMOUNT, 
        DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT "ADDITIONAL_INT", DRGTR.INT_EXPIRY_LIMIT, DRGTR.PENAL_INT, DRGTR.STATUS,
        DRGTR.ROI_ACTIVE_STATUS,DRGTR.OD_INT_RATE "OVERDUE_INT",DRGTR.STATEMENT_PENEL
        FROM DEPOSIT_ROI_GROUP DRG, 
        DEPOSIT_ROI_GROUP_CAT DRGC, DEPOSIT_ROI_GROUP_PROD DRGP,
        DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR WHERE
        DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID AND
        DRG.PRODUCT_TYPE IN( 'TL','AD') AND 
        DRGP.PROD_ID = #PROD_ID:VARCHAR# AND 
        DRGC.CATEGORY_ID = #CATEGORY_ID:VARCHAR# AND
        #AMOUNT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND
        ((#FROM_DATE:DATE# BETWEEN ROI_DATE AND ROI_END_DATE) OR 
        (ROI_DATE&lt;#FROM_DATE:DATE# AND ROI_END_DATE IS NULL) OR (ROI_DATE &gt; #FROM_DATE:DATE#))
        AND TO_NUMBER(TO_CHAR(TO_DATE(#TO_DATE:DATE#),'J'))-TO_NUMBER(TO_CHAR(TO_DATE (#FROM_DATE:DATE#),'J')) BETWEEN FROM_PERIOD AND TO_PERIOD
                <!--((#FROM_DATE# &gt;= ROI_DATE) OR (#TO_DATE# &lt;= ROI_END_DATE))-->
    </mapped-statement>
    <mapped-statement name="getRnwWithOrWithoutInt" result-class="java.util.LinkedHashMap">
        select nvl(RENEW_WITH_NEW_INTRATE,'N') as RENEW_WITH_NEW_INTRATE from LOANS_PROD_ACPARAM where PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getSelectProductTermLoanColenderInterestTO" result-class="java.util.LinkedHashMap" >
        SELECT DRGTR.ROI, DRGTR.ROI_DATE, DRGTR.ROI_END_DATE, DRGP.PROD_ID, DRGTR.FROM_AMOUNT, DRGTR.TO_AMOUNT,  DRGTR.ROI_ACTIVE_STATUS,
        DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT  "ADDITIONAL_INT", DRGTR.INT_EXPIRY_LIMIT, DRGTR.PENAL_INT, DRGTR.STATUS,DRGTR.OD_INT_RATE "OVERDUE_INT",DRGTR.STATEMENT_PENEL
        FROM DEPOSIT_ROI_GROUP DRG,
        DEPOSIT_ROI_GROUP_CAT DRGC, DEPOSIT_ROI_GROUP_PROD DRGP,
        DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR WHERE
        DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID AND
        DRG.PRODUCT_TYPE IN( 'TL','AD') AND
        DRGP.PROD_ID = #PROD_ID:VARCHAR# AND
        DRGC.CATEGORY_ID = #CATEGORY_ID:VARCHAR# AND
        #AMOUNT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND
        ((#FROM_DATE:DATE#&gt;= ROI_DATE AND #FROM_DATE:DATE# &lt;= ROI_END_DATE) OR
        (ROI_DATE&lt;= #FROM_DATE:DATE# AND ROI_END_DATE IS NULL))
        AND TO_NUMBER(TO_CHAR(#TO_DATE:DATE#,'J'))-TO_NUMBER(TO_CHAR(#FROM_DATE:DATE#,'J')) BETWEEN FROM_PERIOD AND TO_PERIOD 
    </mapped-statement>
   
    <mapped-statement name="getSelectTODinterestDetails" result-class="java.util.HashMap" >
        SELECT LB.CUST_ID, LFD.ACCT_NUM AS "ACT_NUM", LFD.PROD_ID AS "PROD_ID", LPA.INT_PAYABLE_ACHD AS "DEBIT_INT",
        (SELECT MIN(NVL(LAST_INT_CALC_DT+1,FROM_DT)) FROM TOD_ALLOWED WHERE 
        ACT_NUM=LFD.ACCT_NUM AND 
        ( LAST_INT_CALC_DT&lt; TO_DT)
        ) AS "START", LFD.BRANCH_ID
        FROM LOANS_FACILITY_DETAILS LFD,
        LOANS_BORROWER LB,
        LOANS_PRODUCT LP,
        LOANS_PROD_ACHD LPA
        WHERE LFD.ACCT_NUM =#ACCT_NUM:VARCHAR#
        AND LFD.PROD_ID = LP.PROD_ID
        AND LPA.PROD_ID = LP.PROD_ID
        AND LB.BORROW_NO = LFD.BORROW_NO
        AND LFD.STATUS != 'DELETED'
        AND (LFD.ACCT_STATUS NOT IN ('CLOSED'))
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        AND LP.STATUS != 'DELETED'
        AND LP.AUTHORIZE_STATUS= 'AUTHORIZED'
        AND LFD.PROD_ID = #PROD_ID:VARCHAR#

    </mapped-statement>

       
    <mapped-statement name="getInterestDetailsWhereConditions" result-class="java.util.HashMap">
        SELECT LB.CATEGORY, LSD.LIMIT, LFD.INT_GET_FROM, LFD.PROD_ID, LSD.FROM_DT AS FROM_DATE, LSD.TO_DT AS TO_DATE,LFD.INTEREST_TYPE FROM LOANS_FACILITY_DETAILS LFD, LOANS_SANCTION_DETAILS LSD, LOANS_BORROWER LB
        WHERE LFD.ACCT_NUM = #value:VARCHAR#  
        AND LFD.BORROW_NO = LSD.BORROW_NO 
        AND LFD.BORROW_NO = LB.BORROW_NO 
        AND (LFD.STATUS = 'CREATED' OR LFD.STATUS = 'MODIFIED') 
        AND (LB.STATUS =  'CREATED' OR LB.STATUS = 'MODIFIED') 
        AND (LSD.STATUS =  'CREATED' OR LSD.STATUS = 'MODIFIED') 
        AND LFD.PROD_ID = LSD.PRODUCT_ID
        AND LFD.SANCTION_NO=LSD.SANCTION_NO 
        AND LFD.SL_NO    =LSD.SL_NO
    </mapped-statement>
        
    <mapped-statement name="getIntDetailsWhereConditions" result-class="java.util.HashMap">
        SELECT LB.CATEGORY, LSD.LIMIT, LFD.INT_GET_FROM, LFD.PROD_ID, LSD.FROM_DT AS FROM_DATE, LSD.TO_DT AS TO_DATE FROM LOANS_FACILITY_DETAILS LFD, LOANS_SANCTION_DETAILS LSD, LOANS_BORROWER LB
        WHERE LFD.ACCT_NUM = #ACCT_NUM:VARCHAR#   
        AND LFD.BORROW_NO = LSD.BORROW_NO 
        AND LFD.BORROW_NO = LB.BORROW_NO 
        AND (LFD.STATUS = 'CREATED' OR LFD.STATUS = 'MODIFIED') 
        AND (LB.STATUS =  'CREATED' OR LB.STATUS = 'MODIFIED') 
        AND (LSD.STATUS =  'CREATED' OR LSD.STATUS = 'MODIFIED') 
        AND LFD.SANCTION_NO=LSD.SANCTION_NO 
        AND LFD.SL_NO    =LSD.SL_NO
    </mapped-statement>
        
    <mapped-statement name="getSelectTermLoanInterestMaxSLNO" result-class="java.util.HashMap">
        SELECT MAX(SLNO) AS MAX_SL_NO FROM LOANS_INT_MAINTENANCE WHERE ACCT_NUM = #acctNum:VARCHAR# AND STATUS = 'DELETED'
    </mapped-statement>
        
    <dynamic-mapped-statement name="getSelectProductTermLoanInterestMap" result-class="java.util.LinkedHashMap" >
        SELECT DRGTR.ROI "INTEREST", DRGTR.ROI_DATE "FROM_DT", DRGTR.ROI_END_DATE "TO_DT", 
        DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT "ADDITIONAL_INT", 
        DRGTR.INT_EXPIRY_LIMIT "INTEREST_EXPIRY_LIMIT", DRGTR.PENAL_INT "PENAL_INTEREST", DRGTR.STATUS, 
        DRGTR.STATEMENT_PENEL "STATEMENT_PENAL" ,DRGTR.OD_INT_RATE "OVERDUE_INT"
        FROM DEPOSIT_ROI_GROUP DRG, 
        DEPOSIT_ROI_GROUP_CAT DRGC, DEPOSIT_ROI_GROUP_PROD DRGP, 
        DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR WHERE
        DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID AND
        DRG.PRODUCT_TYPE IN( 'TL','AD') AND 
        DRGP.PROD_ID = #PROD_ID:VARCHAR#  
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend ="AND" property="CREDIT" >
                    DRGTR.INT_TYPE='C' 
                </isNotNull>
                    
                <isNotNull prepend ="AND" property="DEBIT" >
                    DRGTR.INT_TYPE='D'  
                </isNotNull>
                    
            </isParameterPresent>
        </dynamic>
        AND DRGC.CATEGORY_ID = #CATEGORY_ID:VARCHAR# AND 
        #AMOUNT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND
        ((#FROM_DATE:DATE# BETWEEN ROI_DATE AND ROI_END_DATE) OR 
        (ROI_DATE&lt;=#FROM_DATE:DATE# AND ROI_END_DATE IS NULL)) AND ROI_ACTIVE_STATUS!='N'
        AND
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend ="" property="AMOUNT_WISE_INT_RATE" >
                    TO_NUMBER(TO_CHAR(cast(#TO_DATE# as date),'J')) - TO_NUMBER(TO_CHAR(cast(#FROM_DATE# as date),'J')) BETWEEN FROM_PERIOD AND TO_PERIOD  
                </isNotNull>                                 
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend ="" property="PERIOD_WISE_INT_RATE" >
                    TO_NUMBER(TO_CHAR(cast(#INT_UP_TO_DATE# as date),'J')) - TO_NUMBER(TO_CHAR(cast(#FROM_DATE# as date),'J')) BETWEEN FROM_PERIOD AND TO_PERIOD  
                </isNotNull>                                 
            </isParameterPresent>
        </dynamic>                     
                <!--#AMOUNT# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND
                ((#FROM_DATE# &gt;= ROI_DATE) OR (#TO_DATE# &lt;= ROI_END_DATE))-->
    </dynamic-mapped-statement>
        
    <mapped-statement name="getSelectProductDayEndTermLoanInterestMap" result-class="java.util.LinkedHashMap" >
        SELECT DRGTR.ROI "INTEREST", DRGTR.ROI_DATE "FROM_DT", DRGTR.ROI_END_DATE "TO_DT", 
        DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT "ADDITIONAL_INT", 
        DRGTR.INT_EXPIRY_LIMIT "INTEREST_EXPIRY_LIMIT", DRGTR.PENAL_INT "PENAL_INTEREST", DRGTR.STATUS, 
        DRGTR.STATEMENT_PENEL "STATEMENT_PENAL" ,DRGTR.OD_INT_RATE "OVERDUE_INT"
        FROM DEPOSIT_ROI_GROUP DRG, 
        DEPOSIT_ROI_GROUP_CAT DRGC, DEPOSIT_ROI_GROUP_PROD DRGP, 
        DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR WHERE
        DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID AND
        DRG.PRODUCT_TYPE IN( 'TL','AD') AND 
        DRGP.PROD_ID = #PROD_ID:VARCHAR# AND 
        DRGC.CATEGORY_ID = #CATEGORY_ID:VARCHAR# AND 
        #AMOUNT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND <!-- FLOATING RATEOF INTEREST PURPOSE  DAYEND BALANCE DATE WE HAVE TO TAKE-->
        ((#DAYENDSTDT:DATE# BETWEEN ROI_DATE AND ROI_END_DATE) OR 
        (ROI_DATE&lt;=#DAYENDSTDT:DATE# AND ROI_END_DATE IS NULL))
        AND TO_NUMBER(TO_CHAR(cast(#TO_DATE# as date),'J')) - TO_NUMBER(TO_CHAR(cast(#FROM_DATE# as date),'J')) BETWEEN FROM_PERIOD AND TO_PERIOD
                <!--#AMOUNT# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND
                ((#FROM_DATE# &gt;= ROI_DATE) OR (#TO_DATE# &lt;= ROI_END_DATE))-->
    </mapped-statement>
        
    <mapped-statement name="getSelectProductTermLoanFlotingInterestMap" result-class="java.util.LinkedHashMap" >
        SELECT DRGTR.ROI "INTEREST", DRGTR.ROI_DATE "FROM_DT", DRGTR.ROI_END_DATE "TO_DT", 
        DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT "ADDITIONAL_INT", 
        DRGTR.INT_EXPIRY_LIMIT "INTEREST_EXPIRY_LIMIT", DRGTR.PENAL_INT "PENAL_INTEREST", DRGTR.STATUS, 
        DRGTR.STATEMENT_PENEL "STATEMENT_PENAL" ,DRGTR.OD_INT_RATE "OVERDUE_INT"
        FROM DEPOSIT_ROI_GROUP DRG, 
        DEPOSIT_ROI_GROUP_CAT DRGC, DEPOSIT_ROI_GROUP_PROD DRGP, 
        DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR WHERE
        DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID AND
        DRG.PRODUCT_TYPE IN( 'TL','AD') AND 
        DRGP.PROD_ID = #PROD_ID:VARCHAR# AND 
        DRGC.CATEGORY_ID = #CATEGORY_ID:VARCHAR# AND 
        #AMOUNT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND
        (ROI_DATE BETWEEN #DAYENDSTDT:DATE# AND #DAYENDEDDT:DATE#) <!--OR 
                (ROI_DATE &lt; #TO_DATE# AND ROI_END_DATE IS NULL))-->
        AND TO_NUMBER(TO_CHAR(cast(#TO_DATE# as datE),'J')) - TO_NUMBER(TO_CHAR(cast(#FROM_DATE# as datE),'J')) BETWEEN FROM_PERIOD AND TO_PERIOD
                
		<!--SELECT DRGTR.ROI "INTEREST", DRGTR.ROI_DATE "FROM_DT", DRGTR.ROI_END_DATE "TO_DT", 
                DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT "LIMIT_AMT", 
                DRGTR.INT_EXPIRY_LIMIT "INTEREST_EXPIRY_LIMIT", DRGTR.PENAL_INT "PENAL_INTEREST", DRGTR.STATUS, 
                DRGTR.STATEMENT_PENEL "STATEMENT_PENAL" 
                FROM DEPOSIT_ROI_GROUP DRG, 
                DEPOSIT_ROI_GROUP_CAT DRGC, DEPOSIT_ROI_GROUP_PROD DRGP, 
                DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR WHERE
                DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID AND
                DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID AND
                DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID AND
                DRG.PRODUCT_TYPE IN( 'TL','AD') AND 
                DRGP.PROD_ID = #PROD_ID# AND 
                DRGC.CATEGORY_ID = #CATEGORY_ID# AND 
                #AMOUNT# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND
                ((#FROM_DATE# BETWEEN ROI_DATE AND ROI_END_DATE) OR 
                (ROI_DATE&lt;#FROM_DATE# AND ROI_END_DATE IS NULL))
                AND #TO_DATE# - #FROM_DATE# BETWEEN FROM_PERIOD AND TO_PERIOD-->
                <!--#AMOUNT# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND
                ((#FROM_DATE# &gt;= ROI_DATE) OR (#TO_DATE# &lt;= ROI_END_DATE))-->
    </mapped-statement>
        
    <mapped-statement name="getSelectProductTermLoanRetraspectiveCalcInterestMap" result-class="java.util.LinkedHashMap" >
           <!--SELECT   DRGTR.ROI, DRGTR.ROI_DATE, DRGTR.ROI_END_DATE, DRGP.PROD_ID,
            DRGTR.FROM_AMOUNT, DRGTR.TO_AMOUNT, DRGTR.AGAINST_CLEARING_INT,
            DRGTR.LIMIT_AMOUNT, DRGTR.INT_EXPIRY_LIMIT, DRGTR.PENAL_INT,
            DRGTR.STATUS
            FROM DEPOSIT_ROI_GROUP DRG,
            DEPOSIT_ROI_GROUP_CAT DRGC,
            DEPOSIT_ROI_GROUP_PROD DRGP,
            DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR
            WHERE DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID
            AND DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID
            AND DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID
            AND DRG.PRODUCT_TYPE IN ('TL', 'AD')
            AND DRGP.PROD_ID = #PROD_ID#
            AND DRGC.CATEGORY_ID = #CATEGORY_ID#
            AND #AMOUNT# BETWEEN FROM_AMOUNT AND TO_AMOUNT
            AND (ROI_DATE &gt; =
            (SELECT ROI_DATE
            FROM DEPOSIT_ROI_GROUP_TYPE_RATE
            WHERE STATUS != 'DELETED'
            AND AUTHORIZE_STATUS = 'AUTHORIZED'
            AND ROI_ACTIVE_STATUS != 'N'
            AND CREATE_DT =
            (SELECT MAX (CREATE_DT)
            FROM DEPOSIT_ROI_GROUP_TYPE_RATE
            WHERE STATUS != 'DELETED'
            AND AUTHORIZE_STATUS = 'AUTHORIZED'
            AND ROI_ACTIVE_STATUS != 'N'
            AND ROI_GROUP_ID = DRGTR.ROI_GROUP_ID
            AND #TO_DATE# - #FROM_DATE# BETWEEN FROM_PERIOD AND TO_PERIOD
            AND #AMOUNT# BETWEEN FROM_AMOUNT AND TO_AMOUNT
            )
            AND CREATE_DT IS NOT NULL
            AND ROI_GROUP_ID = DRGTR.ROI_GROUP_ID
            AND #TO_DATE# - #FROM_DATE# BETWEEN FROM_PERIOD AND TO_PERIOD
            AND #AMOUNT# BETWEEN FROM_AMOUNT AND TO_AMOUNT
            )
            )
            AND ROI_ACTIVE_STATUS != 'N'
            AND #TO_DATE# - #FROM_DATE# BETWEEN FROM_PERIOD AND TO_PERIOD
            ORDER BY ROI_DATE-->
        SELECT   DRGTR.ROI, DRGTR.ROI_DATE, DRGTR.ROI_END_DATE, DRGP.PROD_ID,
        DRGTR.FROM_AMOUNT, DRGTR.TO_AMOUNT, DRGTR.AGAINST_CLEARING_INT,
        DRGTR.LIMIT_AMOUNT, DRGTR.INT_EXPIRY_LIMIT, DRGTR.PENAL_INT,DRGTR.STATEMENT_PENEL,
        DRGTR.STATUS
        FROM DEPOSIT_ROI_GROUP DRG,
        DEPOSIT_ROI_GROUP_CAT DRGC,
        DEPOSIT_ROI_GROUP_PROD DRGP,
        DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR
        WHERE DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID
        AND DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID
        AND DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID
        AND DRG.PRODUCT_TYPE IN ('TL', 'AD')
        AND DRGTR.CREATE_DT BETWEEN  #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#
        AND ROI_DATE&lt;=#CURR_DT:DATE# 
        AND  ROI_DATE&lt;#LAST_INT_CALC_DT:DATE#
        AND DRGP.PROD_ID =#PROD_ID:VARCHAR#
        AND DRGC.CATEGORY_ID = #CATEGORY_ID:VARCHAR#
        AND #AMOUNT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT
        AND TO_NUMBER(TO_CHAR(#TO_DATE:DATE#,'J')) - TO_NUMBER(TO_CHAR(#FROM_DATE:DATE#,'J')) BETWEEN FROM_PERIOD AND TO_PERIOD
        ORDER BY ROI_DATE
    </mapped-statement>

    <mapped-statement name="getSelectProductTermLoanRetraspectiveInactiveCalcInterestMap" result-class="java.util.LinkedHashMap" >
               <!-- SELECT   drgtr.roi, drgtr.roi_date, drgtr.roi_end_date,
                 drgtr.against_clearing_int, drgtr.limit_amount "LIMIT_AMT",
                 drgtr.int_expiry_limit "INTEREST_EXPIRY_LIMIT",
                 drgtr.penal_int "PENAL_INTEREST", drgtr.status,
                 drgtr.statement_penel "STATEMENT_PENAL"
            FROM deposit_roi_group drg,
                 deposit_roi_group_cat drgc,
                 deposit_roi_group_prod drgp,
                 deposit_roi_group_type_rate drgtr
           WHERE drg.roi_group_id = drgc.roi_group_id
             AND drg.roi_group_id = drgp.roi_group_id
             AND drg.roi_group_id = drgtr.roi_group_id
             AND drg.product_type IN ('TL', 'AD')
             AND drgp.prod_id = #PROD_ID#
             AND drgc.category_id = #CATEGORY_ID#
             AND #AMOUNT#  BETWEEN from_amount AND to_amount
             AND ((roi_date &gt;=
                      (SELECT roi_date
                         FROM deposit_roi_group_type_rate
                        WHERE status != 'DELETED'
                          AND authorize_status = 'AUTHORIZED'
                          AND #START_DT# BETWEEN roi_date AND roi_end_date
                          AND roi_active_status = 'N'
                          AND #TO_DATE# - #FROM_DATE#  BETWEEN from_period AND to_period
                          AND #AMOUNT#  BETWEEN from_amount AND to_amount
                          AND roi_group_id = drgtr.roi_group_id)
                  )
                 )
             AND drgtr.roi_active_status = 'N'
             AND #TO_DATE# - #FROM_DATE#  BETWEEN from_period AND to_period
        ORDER BY roi_date -->
       <!--
        SELECT   DRGTR.ROI, DRGTR.ROI_DATE, DRGTR.ROI_END_DATE,
                 DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT "LIMIT_AMT",
                 DRGTR.INT_EXPIRY_LIMIT "INTEREST_EXPIRY_LIMIT",
                 DRGTR.PENAL_INT "PENAL_INTEREST", DRGTR.STATUS,
                 DRGTR.STATEMENT_PENEL "STATEMENT_PENAL"
            FROM DEPOSIT_ROI_GROUP DRG,
                 DEPOSIT_ROI_GROUP_CAT DRGC,
                 DEPOSIT_ROI_GROUP_PROD DRGP,
                 DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR
           WHERE DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID
             AND DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID
             AND DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID
             AND DRG.PRODUCT_TYPE IN ('TL', 'AD')
             AND DRGP.PROD_ID = #PROD_ID#
             AND DRGC.CATEGORY_ID = #CATEGORY_ID#
             AND #AMOUNT# BETWEEN FROM_AMOUNT AND TO_AMOUNT
             AND ((ROI_DATE =
                      (SELECT MAX (ROI_DATE)
                         FROM DEPOSIT_ROI_GROUP_TYPE_RATE
                        WHERE STATUS != 'DELETED'
                          AND AUTHORIZE_STATUS = 'AUTHORIZED'
                          AND ROI_DATE &lt;= #START_DT#
                          AND #TO_DATE# - #FROM_DATE# BETWEEN FROM_PERIOD AND TO_PERIOD
                          AND #AMOUNT# BETWEEN FROM_AMOUNT AND TO_AMOUNT
                          AND ROI_GROUP_ID = DRGTR.ROI_GROUP_ID
                          AND CREATE_DT NOT BETWEEN #LAST_INT_CALC_DT# AND #CURR_DT#)
                  )
                 )
             AND  CREATE_DT NOT BETWEEN #LAST_INT_CALC_DT# AND #CURR_DT#
             AND #TO_DATE# - #FROM_DATE# BETWEEN FROM_PERIOD AND TO_PERIOD
             ORDER BY ROI_DATE
             -->
            
        SELECT   DRGTR.ROI, DRGTR.ROI_DATE, DRGTR.ROI_END_DATE,
        DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT "LIMIT_AMT",
        DRGTR.INT_EXPIRY_LIMIT "INTEREST_EXPIRY_LIMIT",
        DRGTR.PENAL_INT "PENAL_INTEREST", DRGTR.STATUS,
        DRGTR.STATEMENT_PENEL "STATEMENT_PENAL"
        FROM DEPOSIT_ROI_GROUP DRG,
        DEPOSIT_ROI_GROUP_CAT DRGC,
        DEPOSIT_ROI_GROUP_PROD DRGP,
        DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR
        WHERE DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID
        AND DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID
        AND DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID
        AND DRG.PRODUCT_TYPE IN ('TL', 'AD')
        AND DRGP.PROD_ID = #PROD_ID:VARCHAR#
        AND DRGC.CATEGORY_ID = #CATEGORY_ID:VARCHAR#
        AND #AMOUNT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT
        AND ROI_DATE IN (
        SELECT ROI_DATE
        FROM DEPOSIT_ROI_GROUP_TYPE_RATE
        WHERE STATUS != 'DELETED'
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND TO_NUMBER(TO_CHAR(#TO_DATE:DATE#,'J')) - TO_NUMBER(TO_CHAR(#FROM_DATE:DATE#,'J')) BETWEEN FROM_PERIOD AND TO_PERIOD
        AND #AMOUNT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT
        AND ROI_GROUP_ID = DRGTR.ROI_GROUP_ID
        AND CREATE_DT NOT BETWEEN #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#
        AND ROI_DATE >= #START_DT:DATE#)
        AND CREATE_DT NOT BETWEEN #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#
        AND TO_NUMBER(TO_CHAR(#TO_DATE:DATE#,'J')) - TO_NUMBER(TO_CHAR(#FROM_DATE:DATE#,'J')) BETWEEN FROM_PERIOD AND TO_PERIOD
        ORDER BY ROI_DATE
     
    </mapped-statement>
        
    <mapped-statement name="getSelectProductTermLoanRetraspectiveInactiveCalcNullInterestMap" result-class="java.util.LinkedHashMap" >
          
        SELECT   DRGTR.ROI, DRGTR.ROI_DATE, DRGTR.ROI_END_DATE,
        DRGTR.AGAINST_CLEARING_INT, DRGTR.LIMIT_AMOUNT "LIMIT_AMT",
        DRGTR.INT_EXPIRY_LIMIT "INTEREST_EXPIRY_LIMIT",
        DRGTR.PENAL_INT "PENAL_INTEREST", DRGTR.STATUS,
        DRGTR.STATEMENT_PENEL "STATEMENT_PENAL"
        FROM DEPOSIT_ROI_GROUP DRG,
        DEPOSIT_ROI_GROUP_CAT DRGC,
        DEPOSIT_ROI_GROUP_PROD DRGP,
        DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR
        WHERE DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID
        AND DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID
        AND DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID
        AND DRG.PRODUCT_TYPE IN ('TL', 'AD')
        AND DRGP.PROD_ID = #PROD_ID:VARCHAR#
        AND DRGC.CATEGORY_ID = #CATEGORY_ID:VARCHAR#
        AND #AMOUNT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT
        AND ROI_DATE IN (SELECT MAX (ROI_DATE)
        FROM DEPOSIT_ROI_GROUP_TYPE_RATE
        WHERE STATUS != 'DELETED'
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND ROI_DATE &lt;  #START_DT:DATE#
        AND TO_NUMBER(TO_CHAR(#TO_DATE:DATE#,'J')) - TO_NUMBER(TO_CHAR(#FROM_DATE:DATE#,'J'))  BETWEEN FROM_PERIOD AND TO_PERIOD
        AND #AMOUNT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT
        AND ROI_GROUP_ID = DRGTR.ROI_GROUP_ID
        AND CREATE_DT NOT BETWEEN #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#)

        AND  CREATE_DT NOT BETWEEN #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#
        AND TO_NUMBER(TO_CHAR(#TO_DATE:DATE#,'J')) - TO_NUMBER(TO_CHAR(#FROM_DATE:DATE#,'J')) BETWEEN FROM_PERIOD AND TO_PERIOD
        ORDER BY ROI_DATE
     
    </mapped-statement>
          
    <mapped-statement name="getSelectAccountTermLoanRetraspectiveCalcInterestMap" result-class="java.util.LinkedHashMap" >
        SELECT   FROM_DT AS ROI_DATE, TO_DT AS ROI_END_DATE, INTEREST AS ROI
        FROM LOANS_INT_MAINTENANCE LIM
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
        AND FROM_DT IN (
        SELECT FROM_DT
        FROM LOANS_INT_MAINTENANCE
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
        AND STATUS != 'DELETED'
        AND RET_CREATE_DT IN (
        SELECT MAX (RET_CREATE_DT)
        FROM LOANS_INT_MAINTENANCE
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
        AND RET_CREATE_DT BETWEEN #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#
        AND STATUS != 'DELETED'))
        AND RET_CREATE_DT BETWEEN #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#                 
        ORDER BY TO_NUMBER (SLNO)   
        <!--SELECT  FROM_DT AS ROI_DATE,TO_DT AS ROI_END_DT,INTEREST AS ROI
                    FROM LOANS_INT_MAINTENANCE LIM
                   WHERE ACCT_NUM = #ACCT_NUM#
                     AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
                     AND FROM_DT&gt;=
                            (SELECT FROM_DT
                               FROM LOANS_INT_MAINTENANCE
                              WHERE ACCT_NUM = #ACCT_NUM#
                                AND INT_ACTIVE_STATUS != 'N'
                                AND STATUS != 'DELETED'
                                AND RET_CREATE_DT =
                                       (SELECT MAX (RET_CREATE_DT)
                                          FROM LOANS_INT_MAINTENANCE
                                         WHERE ACCT_NUM = #ACCT_NUM#
                                           AND INT_ACTIVE_STATUS != 'N'
                                           AND STATUS != 'DELETED'))
                     AND INT_ACTIVE_STATUS != 'N'
                ORDER BY TO_NUMBER (SLNO)  -->      
    </mapped-statement>
                
    <mapped-statement name="getSelectAccountTermLoanRetraspectiveInactiveCalcInterestMap" result-class="java.util.LinkedHashMap" >
            
        SELECT  FROM_DT AS ROI_DATE,TO_DT AS ROI_END_DATE,INTEREST AS ROI
        FROM LOANS_INT_MAINTENANCE 
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
        AND FROM_DT IN
        (SELECT  FROM_DT
        FROM LOANS_INT_MAINTENANCE
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
                            
        AND  FROM_DT  &gt;= #START_DT:DATE# 
        AND STATUS != 'DELETED' AND
        RET_CREATE_DT NOT BETWEEN #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#
        )
        AND 
        RET_CREATE_DT NOT BETWEEN #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#
        ORDER BY TO_NUMBER (SLNO)     
            <!-- SELECT  FROM_DT AS ROI_DATE,TO_DT AS ROI_END_DT,INTEREST AS ROI
                    FROM LOANS_INT_MAINTENANCE 
               WHERE ACCT_NUM = #ACCT_NUM#
                 AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
                 AND FROM_DT&gt;=
                        (SELECT FROM_DT
                           FROM LOANS_INT_MAINTENANCE
                          WHERE ACCT_NUM = #ACCT_NUM#
                            AND INT_ACTIVE_STATUS = 'N'
                            AND (#START_DT# BETWEEN FROM_DT AND TO_DT)
                            AND STATUS != 'DELETED')
                 AND INT_ACTIVE_STATUS = 'N'
            ORDER BY TO_NUMBER (SLNO) -->  	
    </mapped-statement>
            
    <mapped-statement name="getSelectAccountTermLoanRetraspectiveInactiveNullCalcInterestMap" result-class="java.util.LinkedHashMap" >
            
        SELECT  FROM_DT AS ROI_DATE,TO_DT AS ROI_END_DT,INTEREST AS ROI
        FROM LOANS_INT_MAINTENANCE 
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
        AND FROM_DT=
        (SELECT MAX( FROM_DT)
        FROM LOANS_INT_MAINTENANCE
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
                            
        AND  FROM_DT  &lt; #START_DT:DATE#
        AND STATUS != 'DELETED' AND
        RET_CREATE_DT NOT BETWEEN #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#
        )
        AND 
        RET_CREATE_DT NOT BETWEEN #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#
        ORDER BY TO_NUMBER (SLNO) 
                <!--SELECT  FROM_DT AS ROI_DATE,TO_DT AS ROI_END_DT,INTEREST AS ROI
                    FROM LOANS_INT_MAINTENANCE 
               WHERE ACCT_NUM = #ACCT_NUM#
                 AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
                 AND FROM_DT&gt;=
                        (SELECT FROM_DT
                           FROM LOANS_INT_MAINTENANCE
                          WHERE ACCT_NUM = #ACCT_NUM#
                            AND INT_ACTIVE_STATUS = 'N'
                            AND (#START_DT# BETWEEN FROM_DT AND TO_DT)
                            AND STATUS != 'DELETED')
                 AND INT_ACTIVE_STATUS = 'N'
            ORDER BY TO_NUMBER (SLNO) -->  	
    </mapped-statement>
                
    <mapped-statement name="getSelectAccountTermLoanFlotingInterestMap" result-class="java.util.LinkedHashMap" >
        SELECT * FROM LOANS_INT_MAINTENANCE 
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') AND 
        #AMOUNT:NUMBER# BETWEEN FROM_AMT AND TO_AMT AND
        ((FROM_DT BETWEEN #DAYENDSTDT:DATE# AND #DAYENDEDDT:DATE#) <!--OR 
                (FROM_DT&lt;=#DAYENDSTDT# AND TO_DT IS NULL)-->) <!--((#FROM_DATE# &gt;= FROM_DT) OR (#TO_DATE# &lt;= TO_DT))--> 
        ORDER BY TO_NUMBER(SLNO) 
    </mapped-statement>
        
    <mapped-statement name="getSelectAccountTermLoanDayEndInterestMap" result-class="java.util.LinkedHashMap" >
        SELECT * FROM LOANS_INT_MAINTENANCE 
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') AND 
        #AMOUNT# BETWEEN FROM_AMT AND TO_AMT AND
        ((#DAYENDSTDT:DATE# BETWEEN FROM_DT AND TO_DT) OR 
        (FROM_DT&lt;=#DAYENDSTDT:DATE#  AND TO_DT IS NULL)) <!--((#FROM_DATE# &gt;= FROM_DT) OR (#TO_DATE# &lt;= TO_DT))--> 
        ORDER BY TO_NUMBER(SLNO) 
    </mapped-statement>    
        
    <mapped-statement name="getSelectAccountTermLoanInterestMap" result-class="java.util.LinkedHashMap" >
        SELECT * FROM LOANS_INT_MAINTENANCE 
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') AND 
        #AMOUNT:NUMBER# BETWEEN FROM_AMT AND TO_AMT AND
        ((#FROM_DATE:DATE# BETWEEN FROM_DT AND TO_DT) OR 
        (FROM_DT&lt;=#FROM_DATE:DATE# AND TO_DT IS NULL)) AND (INT_ACTIVE_STATUS IS NULL  OR INT_ACTIVE_STATUS!='N') <!--((#FROM_DATE# &gt;= FROM_DT) OR (#TO_DATE# &lt;= TO_DT))--> 
        ORDER BY TO_NUMBER(SLNO) 
    </mapped-statement>    
        
    <dynamic-mapped-statement name="getSelectDrawingPowerInterestMap" result-class="java.util.LinkedHashMap">
               <!-- SELECT * FROM LOANS_DRAWING_POWER LDP  ,LOANS_FACILITY_DETAILS LFD WHERE
                LFD.ACCT_NUM=LDP.ACCT_NO  AND  LDP.STATUS !='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED' AND 
                LFD.ACCT_STATUS !='CLOSED' AND LAST_INT_CALC_DT&lt;STOCK_SUBMIT_DT  AND ACCT_NUM=#ACCT_NUM#
                -->
        /* FORMATTED ON 2009/11/27 15:31 (FORMATTER PLUS V4.8.8) */
        SELECT *
        FROM LOANS_DRAWING_POWER LDP, LOANS_FACILITY_DETAILS LFD
        WHERE LFD.ACCT_NUM = LDP.ACCT_NO
        AND LDP.STATUS != 'DELETED'
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND LFD.ACCT_STATUS != 'CLOSED'
        AND ACCT_NUM = #ACCT_NUM:VARCHAR#
        AND (( NEXT_DUE_DT BETWEEN LFD.LAST_INT_CALC_DT
        AND #CHECK_DATE_LAST:DATE#
        AND (STOCK_SUBMIT_DT IS NULL OR NEXT_DUE_DT &lt; STOCK_SUBMIT_DT)
        )
        OR ( NEXT_DUE_DT &lt; LAST_INT_CALC_DT
        AND (STOCK_SUBMIT_DT IS NULL
        OR STOCK_SUBMIT_DT BETWEEN LFD.LAST_INT_CALC_DT AND #CHECK_DATE_LAST:DATE#
        )
        )
        )                
                              <!--dynamic>
                <isParameterPresent>
                    <isNotNull prepend="AND"  property="QUARTERLY">
                        STOCK_STAT_FREQ &lt;= #QUARTERLY#
                    </isNotNull>
                    
                    <isNotNull prepend="AND"  property="HALFYEARLY">
                        STOCK_STAT_FREQ &lt;= #HALFYEARLY#
                    </isNotNull>
                    
                    <isNotNull prepend="AND"  property="YEARLY">
                        STOCK_STAT_FREQ &lt;= #YEARLY#
                    </isNotNull>
                    
                    <isNotNull prepend="AND"  property="MONTHLY">
                        STOCK_STAT_FREQ = #MONTHLY#
                    </isNotNull>
                
                </isParameterPresent>
                </dynamic-->
    </dynamic-mapped-statement>
        
    <mapped-statement name="getSelectLimitExpiryInterestMap" result-class="java.util.LinkedHashMap">
        SELECT LSD.FROM_DT-1 AS CURR_FROM_DT,LSRD.TO_DT AS EXPIRY_TO_DT FROM 
        LOANS_SANCTION_RENEWAL_DETAILS LSRD ,LOANS_RENEWAL_FACILITY_DETAILS LRFD,
        LOANS_FACILITY_DETAILS LFD, LOANS_SANCTION_DETAILS  LSD  WHERE
        LFD.ACCT_NUM =LRFD.ACCT_NUM AND LRFD.SANCTION_NO=LSRD.SANCTION_NO AND LRFD.SL_NO=LSRD.SL_NO
        AND LSD.SANCTION_NO=LFD.SANCTION_NO AND LSD.SL_NO=LFD.SL_NO AND  LSD.FROM_DT &gt; LSRD.TO_DT
        AND LSRD.STATUS !='DELETED' AND  LSD.FROM_DT &gt; LSRD.FROM_DT AND LFD.LAST_INT_CALC_DT &lt; LSRD.TO_DT
        AND LFD.ACCT_STATUS !='CLOSED' AND LFD.STATUS !='DELETED' AND LFD.ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
            
    <mapped-statement name="insertRepaymentInterest" inline-parameters="true">
        INSERT INTO LOANS_REPAYMENT
        (ACCT_NUM, TRANS_ID, TRANS_DT, PRINCIPAL_AMT, INTEREST_AMT, PENAL_INT_AMT, STATUS, STATUS_BY, STATUS_DT, 
        AUTHORIZE_STATUS, AUTHORIZE_BY, AUTHORIZE_DT, INTEREST_RATE, PENAL_INT_RATE, BALANCE_AMT
        ) VALUES (
        #ACCT_NUM:VARCHAR#, #TRANS_ID:VARCHAR#, #TRANS_DT:TIMESTAMP#, #PRINCIPAL_AMT:NUMERIC#, #INTEREST_AMT:NUMERIC#, #PENAL_INT_AMT:NUMERIC#, 
        #STATUS:VARCHAR#, #STATUS_BY:VARCHAR#, #STATUS_DT:TIMESTAMP#, #AUTHORIZE_STATUS:VARCHAR#, #AUTHORIZE_BY:VARCHAR#, #AUTHORIZE_DT:TIMESTAMP#, 
        #INTEREST_RATE:NUMERIC#, #PENAL_INT_RATE:NUMERIC#, #BALANCE_AMT:NUMERIC#)
    </mapped-statement>

	<!-- Use Repayment object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateRepaymentInterest" inline-parameters="true">
        UPDATE LOANS_REPAYMENT SET 
        TRANS_DT = #TRANS_DT:TIMESTAMP#,
        PRINCIPAL_AMT = #PRINCIPAL_AMT:NUMERIC#,
        INTEREST_AMT = #INTEREST_AMT:NUMERIC#,
        PENAL_INT_AMT = #PENAL_INT_AMT:NUMERIC#,
        STATUS = #STATUS:VARCHAR#,
        STATUS_BY = #STATUS_BY:VARCHAR#,
        STATUS_DT = #STATUS_DT:TIMESTAMP#,
        AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR#,
        AUTHORIZE_BY = #AUTHORIZE_BY:VARCHAR#,
        AUTHORIZE_DT = #AUTHORIZE_DT:TIMESTAMP#,
        INTEREST_RATE = #INTEREST_RATE:NUMERIC#,
        BALANCE_AMT = #BALANCE_AMT:NUMERIC#,
        PENAL_INT_RATE = #PENAL_INT_RATE:NUMERIC#
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND TRANS_ID = #TRANS_ID:VARCHAR# AND (STATUS IN ('CREATED', 'MODIFIED'))
    </mapped-statement>

	<!-- Use Repayment object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteRepaymentInterest" inline-parameters="true">
        UPDATE LOANS_REPAYMENT SET 
        STATUS = #STATUS:VARCHAR#, 
        STATUS_BY = #USER_ID:VARCHAR#, 
        STATUS_DT = #STATUS_DT:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND TRANS_ID = #transId:VARCHAR# AND (STATUS IN ('CREATED', 'MODIFIED')) 
    </mapped-statement>
        
    <mapped-statement name="getBalanceLoanPrincipalAmt" result-class="java.util.HashMap" >
        SELECT LOAN_BALANCE_PRINCIPAL 
        FROM LOANS_FACILITY_DETAILS 
        WHERE ACCT_NUM = #ACCOUNTNO:VARCHAR# AND (STATUS IN ('CREATED', 'MODIFIED'))
    </mapped-statement>
        
        <!-- Use Repayment object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertRepaymentMultiInterest" inline-parameters="true">
        INSERT INTO LOANS_REPAYMENT_MULTIRATE
        (ACCT_NUM, TRANS_ID, INT_TYPE, INTEREST_RATE, FROM_DT, TO_DT
        ) VALUES (
        #ACCT_NUM:VARCHAR#, #TRANS_ID:VARCHAR#, #INT_TYPE:VARCHAR#, #INTEREST_RATE:NUMERIC#, #FROM_DT:DATE#, #TO_DT:DATE#)
    </mapped-statement>

	<!-- Use Repayment object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateRepaymentMultiInterest" inline-parameters="true">
        UPDATE LOANS_REPAYMENT_MULTIRATE SET 
        INT_TYPE = #INT_TYPE:VARCHAR#,
        INTEREST_RATE = #INTEREST_RATE:NUMERIC#,
        FROM_DT = #FROM_DT:DATE#,
        TO_DT = #TO_DT:DATE#
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND TRANS_ID = #TRANS_ID:VARCHAR#
    </mapped-statement>

        <!-- Use TermLoanClassificationTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanClassificationTO" inline-parameters="true">
        INSERT INTO LOANS_CLASSIFY_DETAILS
        (BORROW_NO, PROD_ID, COMMODITY_CODE, BUSINESS_SECTOR_CODE, FACILITY_TYPE, PURPOSE_CODE, INDUSTRY_CODE, TWENTY_CODE, GOVT_SCHEME_CODE, NPA_DT, ECGC, 
        DOCUMENT_COMPLETE, GUARANTEE_COVER_CODE, HEALTH_CODE, DISTRICT_CODE, SECTOR_CODE, PAYMENT_CODE, REFINANCING_INSTITUTION, ASSET_STATUS, DIRECT_FINANCE, 
        PRIORITY_SECTOR, QIS, AUTHORIZE_REMARKS, AUTHORIZE_STATUS, ACCT_NUM, STATUS, STATUS_BY, STATUS_DT,PURPOSE
        ) VALUES (
        #borrowNo:VARCHAR#, #prodId:VARCHAR#, #commodityCode:VARCHAR#, #businessSectorCode:VARCHAR#, #facilityType:VARCHAR#, 
        #purposeCode:VARCHAR#, #industryCode:VARCHAR#, #twentyCode:VARCHAR#, #govtSchemeCode:VARCHAR#, #npaDt:DATE#, #ecgc:VARCHAR#, 
        #documentComplete:VARCHAR#, #guaranteeCoverCode:VARCHAR#, #healthCode:VARCHAR#, #districtCode:VARCHAR#, #sectorCode:VARCHAR#, 
        #paymentCode:VARCHAR#, #refinancingInstitution:VARCHAR#, #assetStatus:VARCHAR#, #directFinance:VARCHAR#, #prioritySector:VARCHAR#, 
        #qis:VARCHAR#, #authorizeRemarks:VARCHAR#, #authorizeStatus:VARCHAR#, #acctNum:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, 
        #statusDt:TIMESTAMP#,#purpose:VARCHAR#)
    </mapped-statement>

	<!-- Use TermLoanClassificationTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanClassificationTO" inline-parameters="true">
        UPDATE LOANS_CLASSIFY_DETAILS SET 
		<!--BORROW_NO = #borrowNo:VARCHAR#,-->
        PROD_ID = #prodId:VARCHAR#,
        COMMODITY_CODE = #commodityCode:VARCHAR#,
        BUSINESS_SECTOR_CODE = #businessSectorCode:VARCHAR#,
        FACILITY_TYPE = #facilityType:VARCHAR#,
        PURPOSE_CODE = #purposeCode:VARCHAR#,
        INDUSTRY_CODE = #industryCode:VARCHAR#,
        TWENTY_CODE = #twentyCode:VARCHAR#,
        GOVT_SCHEME_CODE = #govtSchemeCode:VARCHAR#,
        NPA_DT = #npaDt:DATE#,
        ECGC = #ecgc:VARCHAR#,
        DOCUMENT_COMPLETE = #documentComplete:VARCHAR#,
        GUARANTEE_COVER_CODE = #guaranteeCoverCode:VARCHAR#,
        HEALTH_CODE = #healthCode:VARCHAR#,
        DISTRICT_CODE = #districtCode:VARCHAR#,
        SECTOR_CODE = #sectorCode:VARCHAR#,
        PAYMENT_CODE = #paymentCode:VARCHAR#,
        REFINANCING_INSTITUTION = #refinancingInstitution:VARCHAR#,
        ASSET_STATUS = #assetStatus:VARCHAR#,
        DIRECT_FINANCE = #directFinance:VARCHAR#,
        PRIORITY_SECTOR = #prioritySector:VARCHAR#,
        QIS = #qis:VARCHAR#,
        AUTHORIZE_REMARKS = #authorizeRemarks:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
		<!--ACCT_NUM = #acctNum:VARCHAR#,-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        PURPOSE = #purpose:VARCHAR# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanClassificationTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanClassificationTO" inline-parameters="true">
        UPDATE LOANS_CLASSIFY_DETAILS SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

    <mapped-statement name="updateProdID_TermLoanClassificationTO" inline-parameters="true">
        UPDATE LOANS_CLASSIFY_DETAILS SET 
        PROD_ID = #prodId:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanClassificationTO object (JavaBean) properties -->
    <result-map name="getTermLoanClassificationTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanClassificationTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="commodityCode" column="COMMODITY_CODE"/>
        <property name="businessSectorCode" column="BUSINESS_SECTOR_CODE"/>
        <property name="facilityType" column="FACILITY_TYPE"/>
        <property name="purposeCode" column="PURPOSE_CODE"/>
        <property name="industryCode" column="INDUSTRY_CODE"/>
        <property name="twentyCode" column="TWENTY_CODE"/>
        <property name="govtSchemeCode" column="GOVT_SCHEME_CODE"/>
        <property name="npaDt" column="NPA_DT"/>
        <property name="ecgc" column="ECGC"/>
        <property name="documentComplete" column="DOCUMENT_COMPLETE"/>
        <property name="guaranteeCoverCode" column="GUARANTEE_COVER_CODE"/>
        <property name="healthCode" column="HEALTH_CODE"/>
        <property name="districtCode" column="DISTRICT_CODE"/>
        <property name="sectorCode" column="SECTOR_CODE"/>
        <property name="paymentCode" column="PAYMENT_CODE"/>
        <property name="refinancingInstitution" column="REFINANCING_INSTITUTION"/>
        <property name="assetStatus" column="ASSET_STATUS"/>
        <property name="directFinance" column="DIRECT_FINANCE"/>
        <property name="prioritySector" column="PRIORITY_SECTOR"/>
        <property name="qis" column="QIS"/>
        <property name="authorizeRemarks" column="AUTHORIZE_REMARKS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="purpose" column="PURPOSE"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanClassificationTO" result-map="getTermLoanClassificationTOResult" >
        SELECT * FROM LOANS_CLASSIFY_DETAILS 
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 




    </mapped-statement>
        
        <!-- Use TermLoanJointAcctTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanJointAcctTO" inline-parameters="true">
        INSERT INTO LOANS_JOINT
        (CUST_ID, STATUS, BORROW_NO, STATUS_BY, STATUS_DT
        ) VALUES (
        #custId:VARCHAR#, #status:VARCHAR#, #borrowNo:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#)
    </mapped-statement>

	<!-- Use TermLoanJointAcctTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanJointAcctTO" inline-parameters="true">
        UPDATE LOANS_JOINT SET 
		<!--CUST_ID = #custId:VARCHAR#,
		BORROW_NO = #borrowNo:VARCHAR#,-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND CUST_ID = #custId:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use TermLoanJointAcctTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanJointAcctTO" inline-parameters="true">
        UPDATE LOANS_JOINT SET 
		<!--CUST_ID = #custId:VARCHAR#,
		BORROW_NO = #borrowNo:VARCHAR#,-->
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND CUST_ID = #custId:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanJointAcctTO object (JavaBean) properties -->
    <result-map name="getTermLoanJointAcctTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanJointAcctTO">
        <property name="custId" column="CUST_ID"/>
        <property name="status" column="STATUS"/>
        <property name="borrowNo" column="BORROW_NO"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanJointAcctTO" result-map="getTermLoanJointAcctTOResult" >
        SELECT * FROM LOANS_JOINT 
        WHERE BORROW_NO = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
        <!-- Use TermLoanOtherDetailsTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTermLoanOtherDetailsTO" inline-parameters="true">
        INSERT INTO ADVANCES_PARAM_DETAILS
        (ACT_NUM, INT_CR_BAL, INT_DR_BAL, CHK_BOOK, NRO_STATUS, MOBILE_BANKING, ATM_CARD, ATM_CARD_NO, ATM_CARD_EXPRDT, CR_CARD, CR_CARD_NO, 
        CR_CARD_EXPRDT, DR_CARD, DR_CARD_NO, DR_CARD_EXPRDT, ABB, ABB_CHRG, NPA, NPA_DT, STOP_PAY_CHRG, MODE_OF_OPERATION, SETTLEMENT_MODE, 
        ACT_OPEN_CHRG, CHK_RETURN, INOP_CHRG, STAT_CHRG, NONMAIN_CHRG, LAST_DR_INT_APPLDT, CUSTGRP_LIMIT_VALIDATION, MIN_ACT_BAL, CHK_BOOK_CHRG, 
        REQ_FLEXI_PD, MISC_SERV_CHRG, FOLIO_CHRG, ACT_CLOSING_CHRG, STAT_FREQ, EXCESS_WITHD_CHRG, LAST_CR_INT_APPLDT, ATM_CARD_VALIDFROM, 
        CR_CARD_VALIDFROM, DR_CARD_VALIDFROM, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (
        #actNum:VARCHAR#, #intCrBal:VARCHAR#, #intDrBal:VARCHAR#, #chkBook:VARCHAR#, #nroStatus:VARCHAR#, #mobileBanking:VARCHAR#, 
        #atmCard:VARCHAR#, #atmCardNo:VARCHAR#, #atmCardExprdt:DATE#, #crCard:VARCHAR#, #crCardNo:VARCHAR#, #crCardExprdt:DATE#, 
        #drCard:VARCHAR#, #drCardNo:VARCHAR#, #drCardExprdt:DATE#, #abb:VARCHAR#, #abbChrg:NUMERIC#, #npa:VARCHAR#, #npaDt:DATE#, 
        #stopPayChrg:VARCHAR#, #modeOfOperation:VARCHAR#, #settlementMode:VARCHAR#, #actOpenChrg:NUMERIC#, #chkReturn:VARCHAR#, 
        #inopChrg:VARCHAR#, #statChrg:VARCHAR#, #nonmainChrg:VARCHAR#, #lastDrIntAppldt:DATE#, #custgrpLimitValidation:VARCHAR#, 
        #minActBal:NUMERIC#, #chkBookChrg:NUMERIC#, #reqFlexiPd:NUMERIC#, #miscServChrg:NUMERIC#, #folioChrg:NUMERIC#, #actClosingChrg:NUMERIC#, 
        #statFreq:NUMERIC#, #excessWithdChrg:NUMERIC#, #lastCrIntAppldt:DATE#, #atmCardValidfrom:DATE#, #crCardValidfrom:DATE#, #drCardValidfrom:DATE#, 
        #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#)
    </mapped-statement>

	<!-- Use TermLoanOtherDetailsTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTermLoanOtherDetailsTO" inline-parameters="true">
        UPDATE ADVANCES_PARAM_DETAILS SET 
        INT_CR_BAL = #intCrBal:VARCHAR#,
        INT_DR_BAL = #intDrBal:VARCHAR#,
        CHK_BOOK = #chkBook:VARCHAR#,
        NRO_STATUS = #nroStatus:VARCHAR#,
        MOBILE_BANKING = #mobileBanking:VARCHAR#,
        ATM_CARD = #atmCard:VARCHAR#,
        ATM_CARD_NO = #atmCardNo:VARCHAR#,
        ATM_CARD_EXPRDT = #atmCardExprdt:DATE#,
        CR_CARD = #crCard:VARCHAR#,
        CR_CARD_NO = #crCardNo:VARCHAR#,
        CR_CARD_EXPRDT = #crCardExprdt:DATE#,
        DR_CARD = #drCard:VARCHAR#,
        DR_CARD_NO = #drCardNo:VARCHAR#,
        DR_CARD_EXPRDT = #drCardExprdt:DATE#,
        ABB = #abb:VARCHAR#,
        ABB_CHRG = #abbChrg:NUMERIC#,
        NPA = #npa:VARCHAR#,
        NPA_DT = #npaDt:DATE#,
        STOP_PAY_CHRG = #stopPayChrg:VARCHAR#,
        MODE_OF_OPERATION = #modeOfOperation:VARCHAR#,
        SETTLEMENT_MODE = #settlementMode:VARCHAR#,
        ACT_OPEN_CHRG = #actOpenChrg:NUMERIC#,
        CHK_RETURN = #chkReturn:VARCHAR#,
        INOP_CHRG = #inopChrg:VARCHAR#,
        STAT_CHRG = #statChrg:VARCHAR#,
        NONMAIN_CHRG = #nonmainChrg:VARCHAR#,
        LAST_DR_INT_APPLDT = #lastDrIntAppldt:DATE#,
        CUSTGRP_LIMIT_VALIDATION = #custgrpLimitValidation:VARCHAR#,
        MIN_ACT_BAL = #minActBal:NUMERIC#,
        CHK_BOOK_CHRG = #chkBookChrg:NUMERIC#,
        REQ_FLEXI_PD = #reqFlexiPd:NUMERIC#,
        MISC_SERV_CHRG = #miscServChrg:NUMERIC#,
        FOLIO_CHRG = #folioChrg:NUMERIC#,
        ACT_CLOSING_CHRG = #actClosingChrg:NUMERIC#,
        STAT_FREQ = #statFreq:NUMERIC#,
        EXCESS_WITHD_CHRG = #excessWithdChrg:NUMERIC#,
        LAST_CR_INT_APPLDT = #lastCrIntAppldt:DATE#,
        ATM_CARD_VALIDFROM = #atmCardValidfrom:DATE#,
        CR_CARD_VALIDFROM = #crCardValidfrom:DATE#,
        DR_CARD_VALIDFROM = #drCardValidfrom:DATE#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE ACT_NUM = #actNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>

	<!-- Use TermLoanOtherDetailsTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanOtherDetailsTO" inline-parameters="true">
        UPDATE ADVANCES_PARAM_DETAILS SET 
        STATUS = #status:VARCHAR#, 
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACT_NUM = #actNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanOtherDetailsTO object (JavaBean) properties -->
    <result-map name="getTermLoanOtherDetailsTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanOtherDetailsTO">
        <property name="actNum" column="ACT_NUM"/>
        <property name="intCrBal" column="INT_CR_BAL"/>
        <property name="intDrBal" column="INT_DR_BAL"/>
        <property name="chkBook" column="CHK_BOOK"/>
        <property name="nroStatus" column="NRO_STATUS"/>
        <property name="mobileBanking" column="MOBILE_BANKING"/>
        <property name="atmCard" column="ATM_CARD"/>
        <property name="atmCardNo" column="ATM_CARD_NO"/>
        <property name="atmCardExprdt" column="ATM_CARD_EXPRDT"/>
        <property name="crCard" column="CR_CARD"/>
        <property name="crCardNo" column="CR_CARD_NO"/>
        <property name="crCardExprdt" column="CR_CARD_EXPRDT"/>
        <property name="drCard" column="DR_CARD"/>
        <property name="drCardNo" column="DR_CARD_NO"/>
        <property name="drCardExprdt" column="DR_CARD_EXPRDT"/>
        <property name="abb" column="ABB"/>
        <property name="abbChrg" column="ABB_CHRG"/>
        <property name="npa" column="NPA"/>
        <property name="npaDt" column="NPA_DT"/>
        <property name="stopPayChrg" column="STOP_PAY_CHRG"/>
        <property name="modeOfOperation" column="MODE_OF_OPERATION"/>
        <property name="settlementMode" column="SETTLEMENT_MODE"/>
        <property name="actOpenChrg" column="ACT_OPEN_CHRG"/>
        <property name="chkReturn" column="CHK_RETURN"/>
        <property name="inopChrg" column="INOP_CHRG"/>
        <property name="statChrg" column="STAT_CHRG"/>
        <property name="nonmainChrg" column="NONMAIN_CHRG"/>
        <property name="lastDrIntAppldt" column="LAST_DR_INT_APPLDT"/>
        <property name="custgrpLimitValidation" column="CUSTGRP_LIMIT_VALIDATION"/>
        <property name="minActBal" column="MIN_ACT_BAL"/>
        <property name="chkBookChrg" column="CHK_BOOK_CHRG"/>
        <property name="reqFlexiPd" column="REQ_FLEXI_PD"/>
        <property name="miscServChrg" column="MISC_SERV_CHRG"/>
        <property name="folioChrg" column="FOLIO_CHRG"/>
        <property name="actClosingChrg" column="ACT_CLOSING_CHRG"/>
        <property name="statFreq" column="STAT_FREQ"/>
        <property name="excessWithdChrg" column="EXCESS_WITHD_CHRG"/>
        <property name="lastCrIntAppldt" column="LAST_CR_INT_APPLDT"/>
        <property name="atmCardValidfrom" column="ATM_CARD_VALIDFROM"/>
        <property name="crCardValidfrom" column="CR_CARD_VALIDFROM"/>
        <property name="drCardValidfrom" column="DR_CARD_VALIDFROM"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
    </result-map>
    <mapped-statement name="getSelectTermLoanOtherDetailsTO" result-map="getTermLoanOtherDetailsTOResult" >
        SELECT * FROM ADVANCES_PARAM_DETAILS 
        WHERE ACT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
    <mapped-statement name="getSelectCustomerAddress" result-class="java.util.HashMap" >
                <!--SELECT * FROM CUSTOMER, CUST_ADDR WHERE CUSTOMER.CUST_ID = CUST_ADDR.CUST_ID AND
                CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE AND CUSTOMER.CUST_ID = #custId:VARCHAR#-->
        SELECT CUSTOMER.CUST_ID, get_cust_name(CUSTOMER.CUST_ID)  as "Name", 
        DOB, STREET, AREA,EMAIL_ID,CUST_ADDR.ADDR_TYPE,
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE LOOKUP_REF_ID= CITY 
        AND LOOKUP_ID = 'CUSTOMER.CITY') AS CITY,             
        (SELECT lookup_desc FROM lookup_master WHERE LOOKUP_REF_ID= STATE 
        AND LOOKUP_ID = 'CUSTOMER.STATE') AS STATE, PIN_CODE,             
        (SELECT lookup_desc FROM lookup_master WHERE LOOKUP_REF_ID= COUNTRY_CODE 
        AND LOOKUP_ID = 'CUSTOMER.COUNTRY') AS COUNTRY          
        FROM CUSTOMER , CUST_ADDR WHERE (CUSTOMER.CUST_ID = #custId#)             
        AND (CUSTOMER.STATUS IN ('MODIFIED', 'UPDATE', 'CREATED')) 
        AND (CUST_ADDR.CUST_ID  = CUSTOMER.CUST_ID)             
        AND COMM_ADDR_TYPE = ADDR_TYPE

    </mapped-statement>
        
        
    <mapped-statement name="getSelectCustomerOpenDate" result-class="java.util.HashMap" >
        SELECT decode(CUSTOMER.CUST_TYPE, 'INDIVIDUAL',CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME),comp_name) as "CUSTOMER NAME", CREATEDDT, COMP_NAME, 
        CUST_TYPE, EMAIL_ID, DESIGNATION, NETWORTH_AS_ON  
        FROM CUSTOMER WHERE CUST_ID =#custId:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getSelectCustomerPhone"  result-class="java.util.HashMap">
        SELECT PHONE_TYPE_ID, PHONE_NUMBER, AREA_CODE, ADDR_TYPE FROM CUST_PHONE 
        WHERE CUST_ID=#custId:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
    <mapped-statement name="getSelectCustomerOtherAccounts"  result-class="java.util.HashMap">
        SELECT CH.PRODUCT_TYPE,CH.PROD_ID,CH.ACCT_NO  FROM CUST_HISTORY CH,
        CUSTOMER WHERE   CUSTOMER.CUST_ID=CH.CUST_ID AND CUSTOMER.CUST_ID=#CUST_ID# 
        AND CH.PROD_ID IN (SELECT PROD_ID FROM OP_AC_ACHEAD_PARAM)
    </mapped-statement>
                
    <dynamic-mapped-statement name="getCustomers" result-class="java.util.LinkedHashMap" >
        SELECT C.MEMBERSHIP_NO AS MEMBER_NO, C.CUST_ID AS "CUSTOMER ID", get_cust_name(c.cust_id) AS "NAME", COMP_NAME, 
        AM.ACT_NUM, DA.DEPOSIT_NO, DOB, C.NETWORTH 
        FROM CUSTOMER C, ACT_MASTER AM, DEPOSIT_ACINFO DA
        WHERE 
        C.CUST_ID = AM.CUST_ID(+) AND
        C.CUST_ID = DA.CUST_ID(+) AND
        (C.STATUS = 'CREATED' OR C.STATUS = 'MODIFIED') AND C.AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND (CUSTOMER_STATUS NOT IN ('DECEASED') OR CUSTOMER_STATUS IS NULL)
        AND  NOT EXISTS (SELECT CUST_ID FROM CUSTOMER_SUSPENDED  WHERE   STATUS='SUSPENDED'
        AND C.CUST_ID=CUST_ID)
             <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBER_NO">
                    UPPER(C.MEMBERSHIP_NO) LIKE UPPER('%$MEMBER_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER ID">
                    UPPER(C.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="NAME">
                    UPPER(get_cust_name(c.cust_id)) LIKE UPPER('%$NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="AM.ACT_NUM">
                    UPPER(AM.ACT_NUM) LIKE UPPER('%$AM.ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="DA.DEPOSIT_NO">
                    UPPER(DA.DEPOSIT_NO) LIKE UPPER('%$DA.DEPOSIT_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="C.NETWORTH">
                    UPPER(C.NETWORTH) LIKE UPPER('%$C.NETWORTH$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend='AND' property="ACT_NUM">
                    C.MEMBERSHIP_NO = #ACT_NUM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend='AND' property="CUST_ID">
                    C.CUST_ID = #CUST_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY "CUSTOMER ID"
    </dynamic-mapped-statement>
        
    <mapped-statement name="getProdIntDetails" result-class="java.util.LinkedHashMap" >
        SELECT PENAL_APPL, PENAL_INT_RATE, LIMIT_EXPIRY_INT, PLR_RATE_APPL, PLR_RATE,INSURANCE_APPLICABLE,INSURANCE_SANCTION,
        INSURANCE_RATE 
        FROM LOANS_PROD_INTREC WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
        
    <dynamic-mapped-statement name="IntCalculationDetail" result-class="java.util.HashMap" >
        SELECT LPAT.*,INSTALL_TYPE,CALENDAR_FREQ,AS_CUSTOMER_COMES,PENAL_APP_PRINCIPAL,PENAL_APP_INTEREST,BEHAVES_LIKE,LAST_INT_CALC_DT,LFD.PROD_ID, ACCT_OPEN_DT,PENAL_WAIVER,INTEREST_WAIVER,PRINCIPAl_WAIVER,NOTICE_WAIVER,ARC_WAIVER,
        ARBITRARY_WAIVER,DECREE_WAIVER,EP_COST_WAIVER,POSTAGE_WAIVER,ADVERTISE_WAIVER,LEGAL_WAIVER,INSURANCE_WAIVER,MISCELLANEOUS_WAIVER,OTS,PENAL_APP_EMI,EMI_PENAL_CALC_BASED_ON,IS_OVERDUE_INT,OVERDUEINT_WAIVER,lpi.PREMATURE_CLOSE_CALC_REQUIRED,lpi.GOLD_LOAN_OVERDUE_INT,
        LRS.EMI_IN_SIMPLEINTREST,RECOVERY_WAIVER,MEASUREMENT_WAIVER,KOLE_FIELD_OPERATION_WAIVER,KOLE_FIELD_EXPENSE_WAIVER,LP.EMI_CLOSE_SIMPLEINTEREST
        FROM LOANS_PROD_INTREC LPI, LOANS_PRODUCT LP, LOANS_FACILITY_DETAILS LFD,LOANS_REPAY_SCHEDULE LRS,LOANS_PROD_APPROPRIATE_TRANS LPAT,LOANS_PROD_SUBSIDY_REBATE LPSR        
        WHERE LP.PROD_ID=LPI.PROD_ID AND LPSR.PROD_ID =LP.PROD_ID AND LFD.PROD_ID = LP.PROD_ID AND LPAT.PROD_ID= LP.PROD_ID
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend='' property="BATCH_ID">
                    AND LFD.ACCT_NUM = (SELECT DISTINCT(LINK_BATCH_ID) FROM TRANSFER_TRANS WHERE BATCH_ID=#BATCH_ID# AND TRANS_DT=#TRANS_DT:DATE# 
                    AND INITIATED_BRANCH = #INITIATED_BRANCH:VARCHAR#)
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend='' property="ACT_NUM">
                    AND LFD.ACCT_NUM = #ACT_NUM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND LRS.ACCT_NUM=LFD.ACCT_NUM AND LRS.STATUS !='DELETED'
        and lrs.REPAY_ACTIVE = 'Y'
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="IntCalculationDetailAD" result-class="java.util.HashMap" >
        SELECT CALENDAR_FREQ,AS_CUSTOMER_COMES,PENAL_APP_PRINCIPAL,PENAL_APP_INTEREST,BEHAVES_LIKE,LAST_INT_CALC_DT,LFD.PROD_ID, ACCT_OPEN_DT,PENAL_WAIVER,INTEREST_WAIVER,OTS
        FROM LOANS_PROD_INTREC LPI, LOANS_PRODUCT LP, LOANS_FACILITY_DETAILS LFD,ADVANCES_PARAM_DETAILS APD ,LOANS_PROD_SUBSIDY_REBATE LPSR
        WHERE LP.PROD_ID=LPI.PROD_ID AND LPSR.PROD_ID =LP.PROD_ID AND LFD.PROD_ID = LP.PROD_ID AND APD.ACT_NUM=LFD.ACCT_NUM <!--AND LFD.ACCT_NUM in-->
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend='' property="BATCH_ID">
                   AND LFD.ACCT_NUM in (SELECT DISTINCT(LINK_BATCH_ID) FROM TRANSFER_TRANS WHERE BATCH_ID=#BATCH_ID:VARCHAR# AND TRANS_DT=#TRANS_DT:DATE# 
                    AND INITIATED_BRANCH = #INITIATED_BRANCH:VARCHAR# AND LINK_BATCH_ID IS NOT NULL)
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend='' property="ACT_NUM">
                AND LFD.ACCT_NUM in (#ACT_NUM:VARCHAR#)
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND APD.ACT_NUM=LFD.ACCT_NUM AND APD.STATUS !='DELETED'
    </dynamic-mapped-statement>
        
    <mapped-statement name="insertLoanInterestTMP" result-class="java.util.HashMap" >
        INSERT INTO LOANS_CLOSING_INT_TMP(ACT_NUM ,FROM_DT,TO_DATE,AMT,NO_OF_DAYS,TOT_PRODUCT,INT_AMT,INT_RATE,PROD_ID,INT_CALC_DT,CUST_ID,REMARKS)
        VALUES (#ACT_NUM:VARCHAR#,#FROM_DT#,#TO_DATE#,#AMT:NUMERIC#,#NO_OF_DAYS:NUMERIC#,#TOT_PRODUCT:NUMERIC#
        ,#INT_AMT:NUMERIC#,#INT_RATE:NUMERIC#,#PROD_ID:VARCHAR#,(SELECT SYSD_ATE() FROM DUAL),#CUST_ID:VARCHAR#,#REMARKS:VARCHAR#)
    </mapped-statement>

    <mapped-statement name="insertLoanInterestTMPPROCEDURE " result-class="java.util.HashMap" >
        <!-- Changed by Nikhil for Interest Report-->
        SELECT INSERTLOANINTERESTTMP(#ACT_NUM:VARCHAR#,cast(#FROM_DT# as timestamp without time zone),cast(#TO_DATE# as timestamp without time zone),#AMT:NUMERIC#,#NO_OF_DAYS:NUMERIC#,#TOT_PRODUCT:NUMERIC#
        ,#INT_AMT:NUMERIC#,#INT_RATE:NUMERIC#,#PROD_ID:VARCHAR#,(SELECT SYS_DATE() FROM DUAL),#CUST_ID:VARCHAR#,#REMARKS:VARCHAR#,cast(#CURR_DT# as timestamp without time zone),#BRANCH_CODE:VARCHAR#,#USER_ID:VARCHAR#,#VALIDATE_TYPE:VARCHAR#) FROM DUAL
    </mapped-statement>
        
    <mapped-statement name="insertLoanInterest" inline-parameters="true" >
        INSERT INTO LOANS_INTEREST(ACT_NUM ,FROM_DT,TO_DATE,AMT,NO_OF_DAYS,TOT_PRODUCT,INT_AMT,INT_RATE,PROD_ID,INT_CALC_DT,CUST_ID,REMARKS)
        VALUES (#ACT_NUM:VARCHAR#,#FROM_DT:DATE#,#TO_DATE:DATE#,#AMT:NUMERIC#,#NO_OF_DAYS:NUMERIC#,#TOT_PRODUCT:NUMERIC#
        ,#INT_AMT:NUMERIC#,#INT_RATE:NUMERIC#,#PROD_ID:VARCHAR#,(SELECT SYS_DATE() FROM DUAL),#CUST_ID:VARCHAR#,#REMARKS:VARCHAR#)
    </mapped-statement>
        
    <dynamic-mapped-statement name="selectLoanInterestTMP" result-class="java.util.HashMap" >
        SELECT * FROM LOANS_CLOSING_INT_TMP WHERE ACT_NUM=#ACT_NUM:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="FROM_DT">
                    FROM_DT &gt;=#FROM_DT:DATE# AND TO_DATE &lt;= #TO_DATE:DATE# 
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY FROM_DT
    </dynamic-mapped-statement>
        
    <mapped-statement name="selectLoanInterest" result-class="java.util.HashMap" >
        SELECT * FROM LOANS_INTEREST WHERE ACT_NUM=#ACT_NUM:VARCHAR#
        AND FROM_DT &gt;=#FROM_DT:DATE# AND TO_DATE &lt;= #TO_DATE:DATE# ORDER BY FROM_DT
    </mapped-statement>
        
    <mapped-statement name="deleteLoanInterestTMP" result-class="java.util.HashMap" >
        DELETE  FROM LOANS_CLOSING_INT_TMP WHERE ACT_NUM=#ACT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteLoanInterest" result-class="java.util.HashMap" >
          <!--  DELETE FROM LOANS_INTEREST LI WHERE 
            EXISTS( SELECT ACT_NUM FROM LOANS_INTEREST WHERE ACT_NUM=LI.ACT_NUM AND ACT_NUM=#ACT_NUM# AND FROM_DT &gt; #LAST_INT_CALC_DT:DATE#) -->
        DELETE FROM LOANS_INTEREST  WHERE  ACT_NUM=#ACT_NUM:VARCHAR# AND FROM_DT &gt; #LAST_INT_CALC_DT:DATE#
    </mapped-statement>

        
    <mapped-statement name="getSelectCustSecurityTOList" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT CSD.CUST_ID AS "CUSTOMER ID",
        get_cust_name(customer.cust_id) AS "CUSTOMER NAME"
        FROM CUST_SECURITY_DETAILS CSD, CUSTOMER WHERE 
        (CSD.STATUS = 'CREATED' OR CSD.STATUS = 'MODIFIED') AND CSD.AUTHORIZE_STATUS = 'AUTHORIZED' 
        AND (CSD.CUST_ID = CUSTOMER.CUST_ID)
    </mapped-statement>
        
    <dynamic-mapped-statement name="getSelectCustSecurityNoTOList" result-class="java.util.LinkedHashMap" >
        SELECT SECURITY_NO, 
        SECURITY_VALUE AS "SECURITY VALUE", AVAILABLE_SECURITY_VALUE FROM CUST_SECURITY_DETAILS 
        WHERE CUST_ID = #CUST_ID:VARCHAR# AND ((#FROM_DATE:DATE# &gt;= FROM_DT) OR (#TO_DATE:DATE# &lt;= TO_DT))AND AUTHORIZE_STATUS='AUTHORIZED' AND 
        (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
        <dynamic>
            <isNotEmpty prepend=" AND SECURITY_NO NOT IN ( " property="SECURITY_NO">
                $SECURITY_NO$ )
            </isNotEmpty>
        </dynamic>
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="getDisbursementDetails" result-class="java.util.HashMap" >
        SELECT DISBURSEMENT_ID, DISBURSEMENT_AMT, DISBURSEMENT_DT FROM LOANS_DISBURSEMENT 
        WHERE ACT_NUM = #ACT_NUM:VARCHAR# AND STATUS IN ('CREATED', 'MODIFIED') AND AUTHORIZE_STATUS IN ('AUTHORIZED') AND (REPAYMENT_SCHEDULE_NO IS NULL 
        <dynamic>
            <isNotEmpty prepend=" OR REPAYMENT_SCHEDULE_NO IN ( " property="REPAYMENT_SCHEDULE_NO">
                $REPAYMENT_SCHEDULE_NO$ )
            </isNotEmpty>
        </dynamic>)
        <dynamic>
            <isNotEmpty prepend=" AND DISBURSEMENT_ID NOT IN ( " property="DISBURSEMENT_ID">
                $DISBURSEMENT_ID$ )
            </isNotEmpty>
        </dynamic>
           <dynamic>
           <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="DISBURSEMENT_ID">
                    UPPER(DISBURSEMENT_ID) LIKE UPPER('%$DISBURSEMENT_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="DISBURSEMENT_AMT">
                    UPPER(DISBURSEMENT_AMT) LIKE UPPER('%$DISBURSEMENT_AMT$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="DISBURSEMENT_DT">
                    UPPER(DISBURSEMENT_DT) LIKE UPPER('%$DISBURSEMENT_DT$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="getSelectSecurityCustName" result-class="java.util.HashMap" >
        SELECT get_cust_name(CUSTOMER.CUST_ID) AS "CUSTOMER NAME" FROM CUSTOMER  
        WHERE CUST_ID = #CUST_ID:VARCHAR# 
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
    <mapped-statement name="getSelectSecurityAmtClosingTL" result-class="java.util.HashMap" >
        SELECT CUST_ID,SECURITY_NO,-ELIGIBLE_LOAN_AMT as AVAILABLE_SECURITY_VALUE  FROM 
        LOANS_SECURITY_DETAILS WHERE ACCT_NUM =#ACCOUNTNO:VARCHAR# AND STATUS !='DELETED'
    </mapped-statement>
    <dynamic-mapped-statement name="TermLoan.getProdID_Behaves" result-class="java.util.HashMap" >
        SELECT PROD_ID, PROD_DESC FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = #behavesLike:VARCHAR# 
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') AND AUTHORIZE_STATUS = 'AUTHORIZED'
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend='AND' property="AUTHORIZE_REMARK">
                    AUTHORIZE_REMARK NOT IN(#AUTHORIZE_REMARK:VARCHAR#)
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
    
    <mapped-statement name="getDepositLoanAuthRemark" result-class="java.util.HashMap" >
        SELECT AUTHORIZE_REMARK  FROM 
        LOANS_PRODUCT WHERE PROD_DESC=#PROD_DESC:VARCHAR# AND STATUS !='DELETED'
    </mapped-statement>
    
    <mapped-statement name="getKccSacntionTodate" result-class="java.util.HashMap" >
        select LSD.BORROW_NO,LSD.TO_DT
        from LOANS_FACILITY_DETAILS lf,LOANS_SANCTION_DETAILS lsd
        where LSD.BORROW_NO = LF.BORROW_NO
        and LF.ACCT_NUM =#ACCOUNTNO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getInterestPaidUpToDate" result-class="java.util.HashMap" >
        SELECT GET_TL_LAST_INTERESTDATE(#ACCOUNTNO:VARCHAR#, cast(#ASON_DT# as date),cast(#TRANS_AMOUNT# as NUMERIC))  AS INTEREST_UPTO FROM DUAL
    </mapped-statement>
    
    <mapped-statement name="insertauthorizationLock" inline-parameters="true" >
        INSERT INTO SCREEN_LOCK(TRANS_ID,OPEN_BY,MODE_OF_OPERATION,TRANS_DT,INITIATED_BRANCH)
        VALUES(#TRANS_ID:VARCHAR#,#USER_ID:VARCHAR#,#MODE_OF_OPERATION:VARCHAR#,#TRANS_DT:DATE#,#INITIATED_BRANCH:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="selectauthorizationLock" result-class="java.util.HashMap" >
        SELECT TRANS_ID ,OPEN_BY,MODE_OF_OPERATION  FROM SCREEN_LOCK WHERE 
        TRANS_ID = #TRANS_ID# and OPEN_BY !=#USER_ID:VARCHAR# AND TRANS_DT = #TRANS_DT:DATE#
        AND INITIATED_BRANCH = #INITIATED_BRANCH:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="DELETE_SCREEN_LOCK" inline-parameters="true" >
        DELETE FROM SCREEN_LOCK WHERE OPEN_BY=#USER_ID:VARCHAR# AND TRANS_DT = #TRANS_DT:DATE#
        AND INITIATED_BRANCH = #INITIATED_BRANCH:VARCHAR#
    </mapped-statement>
         
    <mapped-statement name="TermLoan.getBehavesLike" result-class="java.util.HashMap" >
            <!--SELECT LP.BEHAVES_LIKE, LFD.PROD_ID, LFD.INT_GET_FROM, LFD.SECURITY_DETAILS, 
                LSD.LIMIT 
            FROM LOANS_PRODUCT LP, LOANS_FACILITY_DETAILS LFD, LOANS_SANCTION_DETAILS LSD 
            WHERE LP.PROD_ID = LFD.PROD_ID 
                AND LFD.ACCT_NUM = #ACCT_NUM# 
                AND LSD.SL_NO = LFD.SL_NO 
                AND LSD.SANCTION_NO = LFD.SANCTION_NO 
                AND LSD.STATUS IN ('CREATED', 'MODIFIED') 
                AND (LP.STATUS = 'CREATED' OR LP.STATUS = 'MODIFIED') AND LP.AUTHORIZE_STATUS = 'AUTHORIZED' 
                AND (LFD.STATUS = 'CREATED' OR LFD.STATUS = 'MODIFIED') -->
        /* FORMATTED ON 2009/07/22 10:48 (FORMATTER PLUS V4.8.8) */
        SELECT LP.BEHAVES_LIKE, LFD.PROD_ID, LFD.INT_GET_FROM, LFD.SECURITY_DETAILS,
        (  NVL (LSD.LIMIT, 0)
        + NVL ((SELECT   SUM (NVL (SANCTION_LIMIT, 0)) AS LIMIT
        FROM LOANS_ADDITIONAL_SANCTION
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# 
        AND (STATUS IS NULL OR STATUS != 'DELETED')
        AND (   AUTHORIZE_STATUS IS NULL
        OR AUTHORIZE_STATUS = 'AUTHORIZED'
        )
        GROUP BY ACCT_NUM),
        0
        )
        ) AS LIMIT
        FROM LOANS_PRODUCT LP,
        LOANS_FACILITY_DETAILS LFD,
        LOANS_SANCTION_DETAILS LSD
        WHERE LP.PROD_ID = LFD.PROD_ID
        AND LFD.ACCT_NUM = #ACCT_NUM:VARCHAR# 
        AND LSD.SL_NO = LFD.SL_NO
        AND LSD.SANCTION_NO = LFD.SANCTION_NO
        AND LSD.BORROW_NO=LFD.BORROW_NO
        AND LSD.STATUS IN ('CREATED', 'MODIFIED')
        AND (LP.STATUS = 'CREATED' OR LP.STATUS = 'MODIFIED')
        AND LP.AUTHORIZE_STATUS = 'AUTHORIZED'
        AND (LFD.STATUS = 'CREATED' OR LFD.STATUS = 'MODIFIED')

    </mapped-statement>
        
    <mapped-statement name="additionalSanctionLien" result-class="java.util.HashMap" >
        UPDATE LOANS_ADDITIONAL_SANCTION   SET LIEN_NO=#LIEN_NO:VARCHAR# WHERE ACCT_NUM=#ACCT_NUM# AND SLNO=#SLNO# AND STATUS !='DELETED' AND AUTHORIZE_STATUS IS NULL
    </mapped-statement> 

        
    <mapped-statement name="getAcctInterestDetailsCount" result-class="java.lang.Integer" >
        SELECT COUNT(ACCT_NUM) AS NO_RECORDS FROM LOANS_INT_MAINTENANCE 
        WHERE ACCT_NUM = #value:VARCHAR# AND  STATUS !='DELETED'  <!--STATUS IN ('CREATED', 'MODIFIED')   #ACCT_NUM:VARCHAR# -->
    </mapped-statement>
        
    <mapped-statement name="TermLoan.getProduct_Details" result-class="java.util.HashMap" >
        SELECT * FROM LOANS_PROD_INTCALC WHERE PROD_ID = #prodId:VARCHAR#
    </mapped-statement>

    <dynamic-mapped-statement name="getChittalNoForLoanNotice" result-class="java.util.HashMap" >
        select  CHITTAL_NO,MA.SCHEME_NAME,MA.SUB_NO,MEMBER_NO,MA.MEMBER_NAME, MA.TRANS_ID,MA.DIVISION_NO from MDS_SCHEME_DETAILS msd  
        join MDS_APPLICATION ma on MA.SCHEME_NAME = MSD.SCHEME_NAME where PROD_DESC= 'MDS' and MA.SCHEME_NAME=#PROD_ID:VARCHAR#
          <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="CHITTAL_NO">
                    UPPER(CHITTAL_NO) LIKE UPPER('%$CHITTAL_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="SCHEME_NAME">
                    UPPER(MA.SCHEME_NAME) LIKE UPPER('%$SCHEME_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="SUB_NO">
                    UPPER(MA.SUB_NO) LIKE UPPER('%$SUB_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBER_NO">
                    UPPER(MEMBER_NO) LIKE UPPER('%$MEMBER_NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBER_NAME">
                    UPPER(MA.MEMBER_NAME) LIKE UPPER('%$MEMBER_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="TRANS_ID">
                    UPPER(MA.TRANS_ID) LIKE UPPER('%$TRANS_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="DIVISION_NO">
                    UPPER(DIVISION_NO) LIKE UPPER('%$DIVISION_NO$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
        
     <dynamic-mapped-statement name="TermLoan.getProdHead" result-class="java.util.LinkedHashMap" >
        <!--SELECT LOANS_PRODUCT.ACCT_HEAD AS "AC_HEAD" FROM LOANS_PRODUCT WHERE LOANS_PRODUCT.PROD_ID = #prodId:VARCHAR#-->
        SELECT LP.ACCT_HEAD AS "AC_HEAD", LP.PROD_DESC AS AC_HD_DESC, DEP_ELIGIBLE_LOAN_AMT, DEPOSIT_ROUNDOFF, BEHAVES_LIKE, AUTHORIZE_REMARK ,DEP_AMT_LOAN_MATURING,DEP_AMT_MATURING_PERIOD
        FROM LOANS_PRODUCT LP,LOANS_PROD_INTCALC LPI  WHERE 
        LP.PROD_ID = #prodId:VARCHAR# AND LP.PROD_ID=LPI.PROD_ID
         <dynamic>
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="AC_HEAD">
                    UPPER(LP.ACCT_HEAD) LIKE UPPER('%$AC_HEAD$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="AC_HD_DESC">
                    UPPER(LP.PROD_DESC) LIKE UPPER('%$AC_HD_DESC$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="DEP_ELIGIBLE_LOAN_AMT">
                    UPPER(DEP_ELIGIBLE_LOAN_AMT) LIKE UPPER('%$DEP_ELIGIBLE_LOAN_AMT$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="DEPOSIT_ROUNDOFF">
                    UPPER(DEPOSIT_ROUNDOFF) LIKE UPPER('%$DEPOSIT_ROUNDOFF$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="BEHAVES_LIKE">
                    UPPER(BEHAVES_LIKE) LIKE UPPER('%$BEHAVES_LIKE$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"   property="AUTHORIZE_REMARK">
                    UPPER(AUTHORIZE_REMARK) LIKE UPPER('%$AUTHORIZE_REMARK$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="DEP_AMT_MATURING_PERIOD">
                    UPPER(DEP_AMT_MATURING_PERIOD) LIKE UPPER('%$DEP_AMT_MATURING_PERIOD$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="DEP_AMT_LOAN_MATURING">
                    UPPER(DEP_AMT_LOAN_MATURING) LIKE UPPER('%$DEP_AMT_LOAN_MATURING$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="getBorrowerNumber" result-class="java.util.HashMap" >
        SELECT BORROW_NO FROM LOANS_BORROWER WHERE (CUST_ID = #custId:VARCHAR# AND CONSTITUTION = #constitution:VARCHAR#
        AND CATEGORY = #category:VARCHAR# AND STATUS != 'DELETED')
    </mapped-statement>
        
    <mapped-statement name="getBorrowerNumberForLTD" result-class="java.util.HashMap" >
        SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #LOAN_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getAccountNumber" result-class="java.util.HashMap" >
        SELECT ACCT_NUM, INT_GET_FROM FROM LOANS_FACILITY_DETAILS WHERE (BORROW_NO = #borrowNo:VARCHAR# AND SANCTION_NO = #sanctionNo:VARCHAR#
        AND SL_NO = #slNo:NUMERIC# AND (STATUS = 'MODIFIED' OR STATUS = 'CREATED'))
    </mapped-statement>
        
    <mapped-statement name="getFacilityProdID" result-class="java.util.HashMap" >
        SELECT PRODUCT_ID FROM LOANS_SANCTION_DETAILS WHERE (BORROW_NO = #borrowNo:VARCHAR# AND SANCTION_NO = #sanctionNo:VARCHAR#
        AND SL_NO = #slNo:NUMERIC# AND (STATUS = 'MODIFIED' OR STATUS = 'CREATED'))
    </mapped-statement>
        
    <mapped-statement name="getCountOfSanctionNo" result-class="java.util.HashMap" >
        SELECT COUNT(SANCTION_NO) AS "SANCTION_NO" FROM LOANS_SANCTION
        WHERE SANCTION_NO = #sanctionNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED' )
    </mapped-statement>
        
    <mapped-statement name="getCompFreqRoundOff_LoanProd" result-class="java.util.HashMap" >
        SELECT DEBITINT_COMP_FREQ, DEBIT_INT_ROUNDOFF FROM LOANS_PROD_INTREC WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getSanctionDetails" result-class="java.util.HashMap" >
        SELECT SD.LIMIT, SD.TO_DT, S.SANCTION_DT FROM LOANS_SANCTION_DETAILS SD, LOANS_SANCTION  S 
        WHERE S.SANCTION_NO = #sanctionNo:VARCHAR# AND (SD.SANCTION_NO = #sanctionNo:VARCHAR# AND SD.SL_NO = #slNo:NUMERIC#)
        AND S.STATUS NOT IN('DELETED') AND SD.STATUS NOT IN('DELETED') AND  SD.BORROW_NO=#borrowNo:VARCHAR# AND 
        SD.BORROW_NO=S.BORROW_NO 

    </mapped-statement>
        
    <mapped-statement name="getFacilityExpDate" result-class="java.util.HashMap" >
        SELECT SD.TO_DT  "TO_DATE", SD.TO_DT "FROM_DATE" FROM LOANS_SANCTION_DETAILS SD, LOANS_FACILITY_DETAILS SFD
        WHERE SD.SANCTION_NO = SFD.SANCTION_NO AND 
        SFD.ACCT_NUM = #acctNum:VARCHAR# AND 
        SFD.STATUS != 'DELETED' AND SD.SL_NO = SFD.SL_NO AND SD.STATUS != 'DELETED'
        AND SD.BORROW_NO=SFD.BORROW_NO
    </mapped-statement>
    
    <!-- Added by nithya -->
    
    <mapped-statement name="getLoanRepaymentType" result-class="java.util.HashMap" >
        SELECT REPAYMENT_TYPE,REPAYMENT_FREQ,EMI_FLAT_RATE FROM LOANS_PRODUCT WHERE PROD_ID = #PRODUCT_ID:VARCHAR#
    </mapped-statement>
    
    <!-- End -->
        
    <mapped-statement name="TermLoan.getLoanPeriodMultiples" result-class="java.util.HashMap" >
        SELECT LOAN_PERIODS_MULTIPLES FROM LOANS_PROD_INTCALC WHERE PROD_ID = #prodId:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getEmiInSimpleinterest" result-class="java.util.HashMap">
        SELECT NVL(EMI_IN_SIMPLEINTEREST,'N') AS EMI_IN_SIMPLEINTEREST FROM LOANS_PROD_ACPARAM WHERE PROD_ID = #PRODUCT_ID:VARCHAR#
    </mapped-statement> 
       
    <dynamic-mapped-statement name="getInterestAndPenalIntActHead" result-class="java.util.HashMap" >
        SELECT DISTINCT(AC_DEBIT_INT) as "AC_DEBIT_INT", PENAL_INT,INT_PAYABLE_ACHD ,ACCT_HEAD,NOTICE_CHARGES,LPA.OTHRCHRGS_HD as OTHER_CHARGES,POSTAGE_CHARGES,MISC_SERV_CHRG,AC_CLOSING_CHRG,ADVERTISE_ACHEAD,
        LEGAL_CHARGES,ARBITRARY_CHARGES,INSURANCE_CHARGES,EXECUTION_DECREE_CHARGES,ARC_COST as "ARC Cost", ARC_EXPENSE as "ARC Expense",LPA.ARC_EP_SUSPENCE_ACHD, LPA.REBATE_INTEREST_ACHD,
        EA_COST as "EA Cost", EA_EXPENSE as "EA Expense", EP_COST as "EP Cost", EP_EXPENSE as "EP Expense" ,LFD.PROD_ID,LPA.DEBIT_DISCOUNT_ACHD,LPA.DEBIT_PENAL_HEAD,LPA.DEBIT_PRINCIPAL_HEAD,LPA.DEBIT_NOTICE_HEAD,LPA.DEBIT_ARC_HEAD ,LPA.DEBIT_ADVERTISE_HEAD,LPA.DEBIT_ARBITRARY_HEAD,LPA.DEBIT_DECREE_HEAD
        ,LPA.DEBIT_EP_COST_HEAD,LPA.DEBIT_INSURANCE_HEAD,LPA.DEBIT_LEGAL_HEAD,LPA.DEBIT_POSTAGE_HEAD,LPA.DEBIT_MISCELLANEOUS_HEAD,AC_CREDIT_INT,LPSR.REBATE_MODE,LPA.OVER_DUEINT_ACHD,LPA.DEBIT_OVERDUEINT_HEAD,RECOVERY_CHARGES,MEASUREMENT_CHARGES,DEBIT_RECOVERY_HEAD,DEBIT_MEASUREMENT_HEAD,
        LPA.KOLE_FIELD_OPERATION,LPA.KOLE_FIELD_EXPENSE,LPA.DEBIT_KOLE_FIELD_OPERATION,LPA.DEBIT_KOLE_FIELD_EXPENSE
        FROM LOANS_PRODUCT LP,
        LOANS_PROD_ACHD LPA,  LOANS_FACILITY_DETAILS LFD , LOANS_PROD_SUBSIDY_REBATE LPSR WHERE LPA.PROD_ID = LP.PROD_ID AND LFD.PROD_ID=LP.PROD_ID
        AND LPSR.PROD_ID=LP.PROD_ID
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend='AND'    property="ACCT_NUM">
                    LFD.ACCT_NUM=#ACCT_NUM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend='AND'    property="PROD_ID">
                    LP.PROD_ID=#PROD_ID:VARCHAR# 
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND LP.STATUS !='DELETED' AND LP.AUTHORIZE_STATUS='AUTHORIZED'
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="getOverDueDetails" result-class="java.util.HashMap" >
          <!--  SELECT INSTALLMENT_DT, PRINCIPAL_AMT, INTEREST_AMT, INTEREST_RATE 
            FROM LOANS_INSTALLMENT 
            WHERE ((#FROM_DATE# &lt;= INSTALLMENT_DT) AND (#TO_DATE# &gt;= INSTALLMENT_DT)) -->
        SELECT INSTALLMENT_DT, PRINCIPAL_AMT, INTEREST_AMT, INTEREST_RATE
        FROM LOANS_INSTALLMENT 
        WHERE #FROM_DT:DATE# &lt;= INSTALLMENT_DT AND 
        #TO_DATE:DATE# &gt;= INSTALLMENT_DT  AND STATUS !='DELETED' and nvl(active_status,'Y')='Y'
        <dynamic>
            <isParameterPresent>
                <isNotNull  prepend= "AND"  property="ACT_NUM">      
                    ACCT_NUM=#ACT_NUM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="getPrincipalDueDetails" result-class="java.util.HashMap" >
        SELECT  * FROM LOANS_INSTALLMENT  WHERE
        #CURR_DATE:DATE# &gt;= INSTALLMENT_DT 
        <dynamic>
            <isParameterPresent>
                <isNotNull  prepend= "AND"  property="ACT_NUM">      
                    ACCT_NUM=#ACT_NUM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND STATUS !='DELETED' and nvl(active_status,'Y')='Y' ORDER BY INSTALLMENT_SLNO
    </dynamic-mapped-statement>
            
    <mapped-statement name="insertTermLoanChargeTO" inline-parameters="true">
        INSERT INTO LOANS_ACCT_CHARGE_DETAILS
        (
        PROD_TYPE,PROD_ID,ACT_NUM,CHARGE_TYPE,CHARGE_DATE,AMOUNT,
        STATUS, STATUS_BY,STATUS_DT,AUTHORIZE_STATUS,AUTHORIZE_BY ,AUTHORIZE_DT,PAID_AMT,CHARGE_NO,SCREEN_NAME,BRANCH_ID,BATCH_ID,NARRATION)  
        VALUES(#prod_Type:VARCHAR#,#prod_Id:VARCHAR#,#act_num:VARCHAR#,#charge_Type:VARCHAR#,
        #chargeDt:DATE#,#amount:NUMERIC#,#status:VARCHAR#,#status_By:VARCHAR#,#status_Dt:DATE#,#authorize_Status:VARCHAR#,
        #authorize_by:VARCHAR#,#authorize_Dt:DATE#, 
        #paidAmount:NUMERIC#,(SELECT NVL(MAX(CHARGE_NO)+1,1) FROM LOANS_ACCT_CHARGE_DETAILS WHERE ACT_NUM =#act_num:VARCHAR#),
        #screenName:VARCHAR#,#branchId:VARCHAR#,#batchID:VARCHAR#,#narration:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="updateTermLoanChargeTO" inline-parameters="true">
        UPDATE  LOANS_ACCT_CHARGE_DETAILS SET
        PROD_TYPE=#prod_Type:VARCHAR#,
        PROD_ID=#prod_Id:VARCHAR#,
           <!-- ACT_NUM=#act_num:VARCHAR#,-->
        CHARGE_TYPE=#charge_Type:VARCHAR#,
        CHARGE_DATE=#chargeDt:DATE#,
        AMOUNT=#amount:NUMERIC#,
        STATUS=#status:VARCHAR#, 
        STATUS_BY=#status_By:VARCHAR#,
        STATUS_DT=#status_Dt:DATE#,
        AUTHORIZE_STATUS=#authorize_Status:VARCHAR#,
        AUTHORIZE_BY= #authorize_by:VARCHAR#,
        AUTHORIZE_DT=#authorize_Dt:DATE#,
        PAID_AMT= #paidAmount:NUMERIC#
            <!-- CHARGE_NO =#chargeGenerateNo:NUMERIC#  -->
        WHERE CHARGE_NO =#chargeGenerateNo:NUMERIC# AND ACT_NUM=#act_num:VARCHAR# 
    </mapped-statement>
        
    <result-map name="getTermLoanChargeDetails" class="com.see.truetransact.transferobject.termloan.chargesTo.TermLoanChargesTO">
        <property name="act_num" column="ACT_NUM"/>
        <property name="prod_Type" column="PROD_TYPE"/>
        <property name="prod_Id" column="PROD_ID"/>
        <property name="act_num" column="ACT_NUM"/>
        <property name="charge_Type" column="CHARGE_TYPE"/>
        <property name="chargeDt" column="CHARGE_DATE"/>
        <property name="amount" column="AMOUNT"/>
        <property name="status" column="STATUS"/> 
        <property name="status_By" column="STATUS_BY"/>
        <property name="status_Dt" column="STATUS_DT"/>
        <property name="authorize_Status" column="AUTHORIZE_STATUS"/>
        <property name="authorize_by" column="AUTHORIZE_BY"/>
        <property name="authorize_Dt" column="AUTHORIZE_DT"/>
        <property name="paidAmount" column="PAID_AMT"/>
        <property name="chargeGenerateNo" column="CHARGE_NO"/>
		<property name="screenName" column="SCREEN_NAME"/>	
    </result-map>
    <mapped-statement name="getSelectTermLoanChargeDetailsTO" result-map="getTermLoanChargeDetails" >
        SELECT * FROM LOANS_ACCT_CHARGE_DETAILS 
        WHERE ACT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
        
    <dynamic-mapped-statement name="viewChargesDetails" result-class="java.util.HashMap"> 
        SELECT DISTINCT(ACT_NUM) as ACCOUNTNO,PROD_TYPE ,get_cust_name(C.CUST_ID) AS "CUSTOMERNAME",LFD.PROD_ID FROM LOANS_ACCT_CHARGE_DETAILS LCD,LOANS_FACILITY_DETAILS LFD,
        LOANS_BORROWER LB,CUSTOMER C
        WHERE LFD.ACCT_NUM=LCD.ACT_NUM AND LCD.STATUS !='DELETED' AND LFD.STATUS !='DELETED' AND LFD.ACCT_STATUS!='CLOSED'
        AND LFD.BORROW_NO=LB.BORROW_NO AND LB.CUST_ID=C.CUST_ID
          <dynamic>
         <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="ACCOUNTNO">
                    UPPER(DISTINCT(ACT_NUM)) LIKE UPPER('%$ACCOUNTNO$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_TYPE">
                    UPPER(PROD_TYPE) LIKE UPPER('%$PROD_TYPE$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMERNAME">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUSTOMERNAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(LFD.PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="getChargeDetailsforUpdate" result-class="java.util.HashMap">
        SELECT ACT_NUM, NVL(AMOUNT,0)-NVL(PAID_AMT,0) AS PAYABLE_AMT,PAID_AMT,CHARGE_TYPE,CHARGE_NO FROM LOANS_ACCT_CHARGE_DETAILS WHERE ACT_NUM=#ACT_NUM# AND
        NVL(PAID_AMT,0)!=NVL(AMOUNT,0) AND STATUS !='DELETED' AND CHARGE_TYPE=#CHARGE_TYPE:VARCHAR# ORDER BY CHARGE_NO
    </mapped-statement>
        
    <mapped-statement name="updateChargeDetails" result-class="java.util.HashMap">
        UPDATE LOANS_ACCT_CHARGE_DETAILS SET
        PAID_AMT=#PAID_AMT:NUMERIC#
        WHERE CHARGE_TYPE=#CHARGE_TYPE:VARCHAR# AND CHARGE_NO=#CHARGE_NO:NUMERIC#
        AND ACT_NUM=#ACT_NUM:VARCHAR#
    </mapped-statement> 
    
    <mapped-statement name="updatePaidAmount">
        update LOANS_ACCT_CHARGE_DETAILS set PAID_AMT = 0 where ACT_NUM =#CHITTAL_NO:VARCHAR#
    </mapped-statement>
        
    <dynamic-mapped-statement name="updateChargeRollBackDetails" result-class="java.util.HashMap">
        UPDATE LOANS_ACCT_CHARGE_DETAILS SET
        PAID_AMT=NVL(PAID_AMT,0)-#PAID_AMT:NUMERIC#
        WHERE CHARGE_TYPE=#CHARGE_TYPE:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CHARGE_NO">
                    CHARGE_NO=#CHARGE_NO:NUMERIC#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND ACT_NUM=#ACT_NUM:VARCHAR#
    </dynamic-mapped-statement> 
        
    <mapped-statement name="viewChargesDetailsForAuthorize" result-class="java.util.HashMap"> 
           <!-- SELECT ACT_NUM as ACCOUNTNO,PROD_TYPE,PROD_ID,CHARGE_TYPE,CHARGE_DATE,AMOUNT,AUTHORIZE_STATUS FROM LOANS_ACCT_CHARGE_DETAILS WHERE AUTHORIZE_STATUS IS NULL--> <!--AND 
            STATUS !='DELETED'-->
        SELECT ACT_NUM as ACCOUNTNO,PROD_TYPE,LACD.PROD_ID,CHARGE_TYPE,CHARGE_DATE,AMOUNT,LACD.AUTHORIZE_STATUS ,
        get_cust_name(C.CUST_ID) AS "CUSTOMERNAME"
        FROM LOANS_ACCT_CHARGE_DETAILS LACD,LOANS_FACILITY_DETAILS LFD ,LOANS_BORROWER LB ,CUSTOMER C WHERE
        LACD.AUTHORIZE_STATUS IS NULL and (LACD.SCREEN_NAME != 'Loan Notice' or LACD.SCREEN_NAME is null) 
        AND LFD.ACCT_STATUS !='CLOSED' AND LFD.STATUS !='DELETED' AND LFD.BORROW_NO=LB.BORROW_NO AND 
        LB.CUST_ID=C.CUST_ID AND LFD.ACCT_NUM=LACD.ACT_NUM AND LACD.STATUS !='DELETED'
        AND LACD.BRANCH_ID = #BRANCH_ID#
        
        UNION
        SELECT act_num AS accountno, lacd.prod_type, lacd.prod_id, charge_type,
        charge_date, amount, lacd.authorize_status,
        member_name AS "CUSTOMERNAME"
        FROM loans_acct_charge_details lacd,
        MDS_SCHEME_DETAILS  lfd,
        mds_application ma
        WHERE lacd.authorize_status IS NULL
        AND lfd.status != 'CLOSED'
        AND lfd.status != 'DELETED'
        AND MA.SCHEME_NAME = LFD.SCHEME_NAME
        AND MA.CHITTAL_NO ||'_'||MA.SUB_NO=LACD.ACT_NUM
        AND lacd.status != 'DELETED' AND LACD.PROD_TYPE='MDS'
        AND LACD.BRANCH_ID = #BRANCH_ID#
        UNION
        SELECT ACT_NUM AS accountno, LACD.prod_type, LACD.prod_id, charge_type,
        charge_date, amount, lacd.authorize_status,
        get_cust_name(C.CUST_ID) AS "CUSTOMERNAME"
        FROM LOANS_ACCT_CHARGE_DETAILS LACD,
        DEPOSIT_ACINFO  DA,
        DEPOSIT_SUB_ACINFO DS,
        CUSTOMER C
        WHERE LACD.authorize_status IS NULL
        AND DS.status != 'CLOSED'
        AND DS.status != 'DELETED' 
        AND DA.DEPOSIT_NO=DS.DEPOSIT_NO 
        AND C.CUST_ID=DA.CUST_ID
        AND LACD.ACT_NUM=DA.DEPOSIT_NO
        AND LACD.status != 'DELETED' AND LACD.PROD_TYPE='TD'
        AND LACD.BRANCH_ID = #BRANCH_ID#
    </mapped-statement>
        
    <mapped-statement name="updateAuthorizeDetail" inline-parameters="true"> 
        UPDATE LOANS_ACCT_CHARGE_DETAILS SET
        AUTHORIZE_BY=#AUTHORIZE_BY:VARCHAR#,
        AUTHORIZE_DT=#AUTHORIZE_DATE:DATE#,
        AUTHORIZE_STATUS=#AUTHORIZE_STATUS:VARCHAR#
        WHERE ACT_NUM=#ACT_NUM:VARCHAR# AND AUTHORIZE_STATUS IS NULL AND STATUS !='DELETED'
    </mapped-statement>
        
    <mapped-statement name="getDepositLienDetails" result-class="java.util.LinkedHashMap" >
        SELECT DEPOSIT_NO "Deposit No.", DEPOSIT_SUB_NO "Sub No.", LIEN_NO "Lien No.", 
        LIEN_AMOUNT "Value", LIEN_DT "Lien Dt." ,LIEN_PROD_ID "Lien ProdId" ,LIEN_AC_HD "Lien AcHd"
        FROM DEPOSIT_LIEN 
        WHERE LIEN_AC_NO = #ACCT_NO:VARCHAR# AND 
        STATUS IN ('CREATED', 'MODIFIED','UNLIENED')  AND 
        (AUTHORIZE_STATUS IS NULL OR AUTHORIZE_STATUS = 'AUTHORIZED')
    </mapped-statement>
        
    <mapped-statement name="getChargeDetails" result-class="java.util.HashMap" >
        SELECT SUM (NVL(AMOUNT,0)-NVL(PAID_AMT,0)) AS CHARGE_AMT,CHARGE_TYPE <!--,CHARGE_NO --> FROM LOANS_ACCT_CHARGE_DETAILS WHERE ACT_NUM=#ACT_NUM:VARCHAR#
        AND STATUS !='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED'
        GROUP BY CHARGE_TYPE <!--,CHARGE_NO  --> ORDER BY CHARGE_TYPE
    </mapped-statement>
        
    <mapped-statement name="getDepositLienHolderName" result-class="java.util.LinkedHashMap" >
        SELECT get_cust_name(C.CUST_ID) AS "NAME"  FROM CUSTOMER C
        WHERE EXISTS (SELECT CUST_ID FROM DEPOSIT_ACINFO DA WHERE CUST_ID = C.CUST_ID AND
        EXISTS (SELECT DEPOSIT_NO FROM DEPOSIT_LIEN WHERE DEPOSIT_NO = DA.DEPOSIT_NO 
        AND LIEN_AC_NO = #ACCT_NO:VARCHAR#))
 
    </mapped-statement>
        
    <dynamic-mapped-statement name="getPendingTransactionTL" result-class="java.util.LinkedHashMap" >
        SELECT LINK_BATCH_ID FROM ALL_TRANS_TL WHERE  TRANS_DT=#TRANS_DT# AND  STATUS !='DELETED'  
        AND (AUTHORIZE_STATUS NOT IN('AUTHORIZED','REJECTED' ) OR  AUTHORIZE_STATUS IS NULL)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="BATCH_ID">
                    BATCH_ID!=#BATCH_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            
            <!--<isParameterPresent>
                <isNotNull prepend="AND" property="INITIATED_BRANCH">
                    INITIATED_BRANCH = #INITIATED_BRANCH:VARCHAR#
                </isNotNull>
            </isParameterPresent>-->
            
            <isParameterPresent>
                <isNotNull prepend="AND" property="BRANCH_ID">
                    BRANCH_ID = #BRANCH_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            
            <isParameterPresent>
                <isNotNull prepend="AND" property="PROD_ID">
                    PROD_ID=#PROD_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND  LINK_BATCH_ID=#LINK_BATCH_ID:VARCHAR# <!-- AND 
        TRANS_TYPE='CREDIT'-->
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="getPendingTransactionAD" result-class="java.util.LinkedHashMap" >
        SELECT LINK_BATCH_ID FROM ALL_TRANS_TL WHERE  TRANS_DT=#TRANS_DT# AND  STATUS !='DELETED'  
        AND INITIATED_BRANCH = #INITIATED_BRANCH:VARCHAR#
        AND (AUTHORIZE_STATUS NOT IN('AUTHORIZED','REJECTED' ) OR  AUTHORIZE_STATUS IS NULL)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="BATCH_ID">
                    BATCH_ID!=#BATCH_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            
            <isParameterPresent>
                <isNotNull prepend="AND" property="PROD_ID">
                    PROD_ID=#PROD_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND  LINK_BATCH_ID=#LINK_BATCH_ID:VARCHAR#  AND 
        TRANS_TYPE='DEBIT'
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="getPendingTransactionTransferAD" result-class="java.util.LinkedHashMap" >
        SELECT nvl(ACT_NUM,LINK_BATCH_ID) as ACT_NUM FROM ALL_TRANS_TL WHERE  TRANS_DT=#TRANS_DT# AND  STATUS !='DELETED'  
        <!--AND INITIATED_BRANCH = #INITIATED_BRANCH:VARCHAR#-->
        AND (AUTHORIZE_STATUS NOT IN('AUTHORIZED','REJECTED' ) OR  AUTHORIZE_STATUS IS NULL)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="BATCH_ID">
                    BATCH_ID!=#BATCH_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            
            <isParameterPresent>
                <isNotNull prepend="AND" property="PROD_ID">
                    PROD_ID=#PROD_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND  nvl(ACT_NUM,LINK_BATCH_ID)=#LINK_BATCH_ID:VARCHAR#   
       <!--AND  TRANS_TYPE='DEBIT'-->
    </dynamic-mapped-statement>
    
    <mapped-statement name="getDepositLienAmount" result-class="java.util.HashMap" >
        SELECT SUM(LIEN_AMOUNT) "ELIGIBLE_LOAN_AMOUNT" 
        FROM DEPOSIT_LIEN 
        WHERE LIEN_AC_NO = #ACCT_NUM:VARCHAR# AND 
        STATUS IN ('CREATED', 'MODIFIED') AND 
        AUTHORIZE_STATUS IN ('AUTHORIZED') 
        GROUP BY(LIEN_AC_NO) 
    </mapped-statement>
        
    <mapped-statement name="getLoanRepayedDetails" result-class="java.util.HashMap" >
        SELECT SFD.AVAILABLE_BALANCE "AMOUNT", SFD.EXCESS_AMT "EXCESS_AMOUNT", SFD.PROD_ID, SFD.LOAN_BALANCE_PRINCIPAL, 
        DECODE(SFD.LAST_REPAY_DT, NULL, (SELECT DISBURSEMENT_DT FROM LOANS_DISBURSEMENT
        WHERE ACT_NUM = #ACCT_NUM:VARCHAR# AND STATUS != 'DELETED' AND AUTHORIZE_STATUS = 'AUTHORIZED'), 
        SFD.LAST_REPAY_DT) AS LAST_REPAY_DT , SFD.INT_GET_FROM, LB.CATEGORY, LSD.LIMIT, LSD.FROM_DT    
        FROM LOANS_FACILITY_DETAILS SFD, LOANS_BORROWER LB, LOANS_SANCTION_DETAILS LSD   
        WHERE 
        SFD.ACCT_NUM = #ACCT_NUM:VARCHAR# AND 
        LB.BORROW_NO = SFD.BORROW_NO AND 
        LSD.BORROW_NO = SFD.BORROW_NO AND 
        SFD.SANCTION_NO = LSD.SANCTION_NO AND 
        SFD.SL_NO = LSD.SL_NO AND 
        (SFD.STATUS = 'CREATED' OR SFD.STATUS = 'MODIFIED') 
    </mapped-statement>
        
    <dynamic-mapped-statement name="getSelectTermLoanAuthorizeTOList" result-class="java.util.LinkedHashMap" >
         <!--SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,FD.ACCT_NUM,FD.RENEWAL_ACCT_NO as RENEWED_LOAN_NO,FD.PROD_ID,  FD.BORROW_NO,AT.AMOUNT, get_cust_name(C.CUST_ID) AS Name, FD.SANCTION_NO
            ,FD.AUTHORIZE_BY_1, FD.AUTHORIZE_STATUS_1, FD.AUTHORIZE_BY_2, FD.AUTHORIZE_STATUS_2
        FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS FD, CUSTOMER CUST ,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND  AT.link_batch_id=FD.ACCT_NUM AND LB.CUST_ID = CUST.CUST_ID AND LB.BORROW_NO = FD.BORROW_NO 
        AND FD.STATUS NOT IN ('DELETED') AND 
        FD.BRANCH_ID = #BRANCH_ID:VARCHAR# AND 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'OD', 1, 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'CC', 1,(SELECT COUNT(ACCT_NUM) FROM LOANS_REPAY_SCHEDULE WHERE ACCT_NUM = FD.ACCT_NUM AND STATUS IN ('CREATED', 'MODIFIED'))))) > 0) 
        AND (FD.STATUS_BY != #STATUS_BY:VARCHAR# AND 
        (FD.AUTHORIZE_BY_1 IS NULL OR FD.AUTHORIZE_BY_1 != #STATUS_BY:VARCHAR#)) AND 
            (FD.AUTHORIZE_BY_2 IS NULL  OR FD.AUTHORIZE_BY_2 != #STATUS_BY#)))
            AND cast(cast(#HIERARCHY_ID# as numeric) as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = FD.STATUS_BY AND BRANCH_CODE=#BRANCH_ID:VARCHAR#)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="GOLD_LOAN">
                    FD.ACCT_STATUS !='RENEWAL'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 = 'EXCEPTION') OR FD.AUTHORIZE_STATUS_2 = 'EXCEPTION' 
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 IS NULL OR 
                FD.AUTHORIZE_STATUS_1 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                       OR 
                         (FD.AUTHORIZE_STATUS_2 IS NULL OR 
                         FD.AUTHORIZE_STATUS_2 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>           
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LB.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>   
                
               <dynamic>
                    <isParameterPresent>
                        <isNotNull prepend="AND" property="PROD_ID">
                        FD.PROD_ID = #PROD_ID#
                        </isNotNull>
                    </isParameterPresent>
                </dynamic>
                  
        AND  NOT EXISTS  
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')AND BORROW_NO=LB.BORROW_NO)
                
        UNION -->
                
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,FD.ACCT_NUM,FD.RENEWAL_ACCT_NO as RENEWED_LOAN_NO,FD.PROD_ID,  FD.BORROW_NO, AT.AMOUNT, get_cust_name(CUST.CUST_ID) AS Name, FD.SANCTION_NO
            <!--,FD.AUTHORIZE_BY_1, FD.AUTHORIZE_STATUS_1, FD.AUTHORIZE_BY_2, FD.AUTHORIZE_STATUS_2 -->
        FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS FD , CUSTOMER CUST ,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND AT.ACT_NUM = FD.ACCT_NUM AND  AT.TRANS_TYPE='DEBIT' AND LB.CUST_ID = CUST.CUST_ID AND LB.BORROW_NO = FD.BORROW_NO 
        AND FD.STATUS NOT IN ('DELETED') AND 
        FD.BRANCH_ID = #BRANCH_ID:VARCHAR# AND 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'OD', 1, 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'CC', 1,(SELECT COUNT(ACCT_NUM) FROM LOANS_REPAY_SCHEDULE WHERE ACCT_NUM = FD.ACCT_NUM AND STATUS IN ('CREATED', 'MODIFIED'))))) > 0) 
        AND (FD.STATUS_BY != #STATUS_BY:VARCHAR# AND 
        (FD.AUTHORIZE_BY_1 IS NULL OR FD.AUTHORIZE_BY_1 != #STATUS_BY:VARCHAR#)) AND 
            <!--(FD.AUTHORIZE_BY_2 IS NULL  OR FD.AUTHORIZE_BY_2 != #STATUS_BY#)))
            AND -->cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = FD.STATUS_BY AND BRANCH_CODE=#BRANCH_ID:VARCHAR#)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="GOLD_LOAN">
                    FD.ACCT_STATUS !='RENEWAL'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 = 'EXCEPTION') <!--OR FD.AUTHORIZE_STATUS_2 = 'EXCEPTION' --> 
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 IS NULL OR 
                FD.AUTHORIZE_STATUS_1 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                    <!--     OR 
                         (FD.AUTHORIZE_STATUS_2 IS NULL OR 
                         FD.AUTHORIZE_STATUS_2 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION')))-->
            </isNotEqual>
        </dynamic>           
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LB.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>   
                
               <!-- <dynamic>
                    <isParameterPresent>
                        <isNotNull prepend="AND" property="PROD_ID">
                        FD.PROD_ID = #PROD_ID#
                        </isNotNull>
                    </isParameterPresent>
                </dynamic> -->
                  
        AND  NOT EXISTS  <!-- The following 3 lines added to exclude the LTD loans -->
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')AND BORROW_NO=LB.BORROW_NO)
        UNION
        SELECT NULL AS TRANS_ID,FD.ACCT_NUM,FD.RENEWAL_ACCT_NO as RENEWED_LOAN_NO,FD.PROD_ID,  FD.BORROW_NO,  NULL AS AMOUNT , get_cust_name(CUST.CUST_ID) AS Name, FD.SANCTION_NO
            <!--,FD.AUTHORIZE_BY_1, FD.AUTHORIZE_STATUS_1, FD.AUTHORIZE_BY_2, FD.AUTHORIZE_STATUS_2 -->
        FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS FD, CUSTOMER CUST 
        WHERE LB.CUST_ID = CUST.CUST_ID AND LB.BORROW_NO = FD.BORROW_NO 
        AND FD.STATUS != 'DELETED'
        AND FD.STATUS != 'CREATED'  AND 
        FD.BRANCH_ID = #BRANCH_ID:VARCHAR# AND 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'OD', 1, 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'CC', 1,(SELECT COUNT(ACCT_NUM) FROM LOANS_REPAY_SCHEDULE WHERE ACCT_NUM = FD.ACCT_NUM AND STATUS IN ('CREATED', 'MODIFIED'))))) > 0) 
        AND (FD.STATUS_BY != #STATUS_BY:VARCHAR# AND 
        (FD.AUTHORIZE_BY_1 IS NULL OR FD.AUTHORIZE_BY_1 != #STATUS_BY:VARCHAR#)) AND 
            <!--(FD.AUTHORIZE_BY_2 IS NULL  OR FD.AUTHORIZE_BY_2 != #STATUS_BY#)))
            AND -->cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = FD.STATUS_BY AND BRANCH_CODE=#BRANCH_ID:VARCHAR#)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="GOLD_LOAN">
                    FD.ACCT_STATUS !='RENEWAL'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 = 'EXCEPTION') <!--OR FD.AUTHORIZE_STATUS_2 = 'EXCEPTION' --> 
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 IS NULL OR 
                FD.AUTHORIZE_STATUS_1 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                    <!--     OR 
                         (FD.AUTHORIZE_STATUS_2 IS NULL OR 
                         FD.AUTHORIZE_STATUS_2 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION')))-->
            </isNotEqual>
        </dynamic>           
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LB.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>   
                
               <!-- <dynamic>
                    <isParameterPresent>
                        <isNotNull prepend="AND" property="PROD_ID">
                        FD.PROD_ID = #PROD_ID#
                        </isNotNull>
                    </isParameterPresent>
                </dynamic> -->
                  
        AND  NOT EXISTS  <!-- The following 3 lines added to exclude the LTD loans -->
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')AND BORROW_NO=LB.BORROW_NO)
        
        UNION
        SELECT NULL AS TRANS_ID,FD.ACCT_NUM,FD.RENEWAL_ACCT_NO as RENEWED_LOAN_NO,FD.PROD_ID,  FD.BORROW_NO,  NULL AS AMOUNT , get_cust_name(CUST.CUST_ID) AS Name, FD.SANCTION_NO
            <!--,FD.AUTHORIZE_BY_1, FD.AUTHORIZE_STATUS_1, FD.AUTHORIZE_BY_2, FD.AUTHORIZE_STATUS_2 -->
        FROM LOANS_BORROWER LB, CUSTOMER CUST , LOANS_FACILITY_DETAILS  FD 
        LEFT OUTER JOIN LOANS_DISBURSEMENT LD ON LD.ACT_NUM = FD.ACCT_NUM 
        WHERE LB.CUST_ID = CUST.CUST_ID AND LB.BORROW_NO = FD.BORROW_NO 
        AND FD.STATUS != 'DELETED'
        AND FD.STATUS != 'MODIFIED'
        AND LD.ACT_NUM IS NULL  AND
        FD.BRANCH_ID = #BRANCH_ID:VARCHAR# AND 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'OD', 1, 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'CC', 1,(SELECT COUNT(ACCT_NUM) FROM LOANS_REPAY_SCHEDULE WHERE ACCT_NUM = FD.ACCT_NUM AND STATUS IN ('CREATED', 'MODIFIED'))))) > 0) 
        AND (FD.STATUS_BY != #STATUS_BY:VARCHAR# AND 
        (FD.AUTHORIZE_BY_1 IS NULL OR FD.AUTHORIZE_BY_1 != #STATUS_BY:VARCHAR#)) AND 
            <!--(FD.AUTHORIZE_BY_2 IS NULL  OR FD.AUTHORIZE_BY_2 != #STATUS_BY#)))
            AND -->cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = FD.STATUS_BY AND BRANCH_CODE=#BRANCH_ID:VARCHAR#)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="GOLD_LOAN">
                    FD.ACCT_STATUS !='RENEWAL'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 = 'EXCEPTION') <!--OR FD.AUTHORIZE_STATUS_2 = 'EXCEPTION' --> 
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 IS NULL OR 
                FD.AUTHORIZE_STATUS_1 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                    <!--     OR 
                         (FD.AUTHORIZE_STATUS_2 IS NULL OR 
                         FD.AUTHORIZE_STATUS_2 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION')))-->
            </isNotEqual>
        </dynamic>           
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LB.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>   
                
               <!-- <dynamic>
                    <isParameterPresent>
                        <isNotNull prepend="AND" property="PROD_ID">
                        FD.PROD_ID = #PROD_ID#
                        </isNotNull>
                    </isParameterPresent>
                </dynamic> -->
                  
        AND  NOT EXISTS  <!-- The following 3 lines added to exclude the LTD loans -->
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')AND BORROW_NO=LB.BORROW_NO)
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="getSelectTermLoanCashierAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,FD.ACCT_NUM,FD.RENEWAL_ACCT_NO as RENEWED_LOAN_NO,FD.PROD_ID,  FD.BORROW_NO,  AT.AMOUNT, get_cust_name(CUST.CUST_ID) AS Name,FD.SANCTION_NO
            <!--,FD.AUTHORIZE_BY_1, FD.AUTHORIZE_STATUS_1, FD.AUTHORIZE_BY_2, FD.AUTHORIZE_STATUS_2 -->
        FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS FD, CUSTOMER CUST ,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND  AT.link_batch_id=FD.ACCT_NUM AND CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN 'AUTHORIZED' ELSE AT.PAYMENT_STATUS END IS NOT NULL AND LB.CUST_ID = CUST.CUST_ID AND LB.BORROW_NO = FD.BORROW_NO 
        AND FD.STATUS NOT IN ('DELETED') AND 
        FD.BRANCH_ID = #BRANCH_ID:VARCHAR#  
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTH_TRANS_TYPE">
                   AT.TRANS_TYPE ='DEBIT'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'OD', 1, 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'CC', 1,(SELECT COUNT(ACCT_NUM) FROM LOANS_REPAY_SCHEDULE WHERE ACCT_NUM = FD.ACCT_NUM AND STATUS IN ('CREATED', 'MODIFIED'))))) > 0) 
        AND (FD.STATUS_BY != #STATUS_BY:VARCHAR# AND 
        (FD.AUTHORIZE_BY_1 IS NULL OR FD.AUTHORIZE_BY_1 != #STATUS_BY:VARCHAR#)) AND 
            <!--(FD.AUTHORIZE_BY_2 IS NULL  OR FD.AUTHORIZE_BY_2 != #STATUS_BY#)))
            AND -->cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = FD.STATUS_BY AND BRANCH_CODE=#BRANCH_ID:VARCHAR#)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="GOLD_LOAN">
                    FD.ACCT_STATUS !='RENEWAL'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 = 'EXCEPTION') <!--OR FD.AUTHORIZE_STATUS_2 = 'EXCEPTION' --> 
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 IS NULL OR 
                FD.AUTHORIZE_STATUS_1 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                    <!--     OR 
                         (FD.AUTHORIZE_STATUS_2 IS NULL OR 
                         FD.AUTHORIZE_STATUS_2 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION')))-->
            </isNotEqual>
        </dynamic>           
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LB.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>   
                
               <!-- <dynamic>
                    <isParameterPresent>
                        <isNotNull prepend="AND" property="PROD_ID">
                        FD.PROD_ID = #PROD_ID#
                        </isNotNull>
                    </isParameterPresent>
                </dynamic> -->
                  
        AND  NOT EXISTS  <!-- The following 3 lines added to exclude the LTD loans -->
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')AND BORROW_NO=LB.BORROW_NO)
                
        UNION 
                
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,FD.ACCT_NUM,FD.RENEWAL_ACCT_NO as RENEWED_LOAN_NO,FD.PROD_ID,  FD.BORROW_NO, AT.AMOUNT, get_cust_name(CUST.CUST_ID) AS Name, FD.SANCTION_NO
         <!--,FD.AUTHORIZE_BY_1, FD.AUTHORIZE_STATUS_1, FD.AUTHORIZE_BY_2, FD.AUTHORIZE_STATUS_2 -->
        FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS FD, CUSTOMER CUST ,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND AT.ACT_NUM=FD.ACCT_NUM AND CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN NULL ELSE AT.PAYMENT_STATUS END IS  NULL AND AT.TRANS_TYPE='DEBIT' AND LB.CUST_ID = CUST.CUST_ID AND LB.BORROW_NO = FD.BORROW_NO 
        AND FD.STATUS NOT IN ('DELETED') AND 
        FD.BRANCH_ID = #BRANCH_ID:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTH_TRANS_TYPE">
                   AT.TRANS_TYPE ='DEBIT'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'OD', 1, 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'CC', 1,(SELECT COUNT(ACCT_NUM) FROM LOANS_REPAY_SCHEDULE WHERE ACCT_NUM = FD.ACCT_NUM AND STATUS IN ('CREATED', 'MODIFIED'))))) > 0) 
        AND (FD.STATUS_BY != #STATUS_BY:VARCHAR# AND 
        (FD.AUTHORIZE_BY_1 IS NULL OR FD.AUTHORIZE_BY_1 != #STATUS_BY:VARCHAR#)) AND 
            <!--(FD.AUTHORIZE_BY_2 IS NULL  OR FD.AUTHORIZE_BY_2 != #STATUS_BY#)))
            AND -->cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = FD.STATUS_BY AND BRANCH_CODE=#BRANCH_ID:VARCHAR#)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="GOLD_LOAN">
                    FD.ACCT_STATUS !='RENEWAL'
                    AND NVL(GET_GOLDLOAN_RENEWAL_AUTH_CNT(FD.RENEWAL_ACCT_NO,#TRANS_DT:DATE#),0) = 0
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 = 'EXCEPTION') <!--OR FD.AUTHORIZE_STATUS_2 = 'EXCEPTION' --> 
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 IS NULL OR 
                FD.AUTHORIZE_STATUS_1 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                    <!--     OR 
                         (FD.AUTHORIZE_STATUS_2 IS NULL OR 
                         FD.AUTHORIZE_STATUS_2 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION')))-->
            </isNotEqual>
        </dynamic>           
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LB.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>   
                
               <!-- <dynamic>
                    <isParameterPresent>
                        <isNotNull prepend="AND" property="PROD_ID">
                        FD.PROD_ID = #PROD_ID#
                        </isNotNull>
                    </isParameterPresent>
                </dynamic> -->
                  
        AND  NOT EXISTS  <!-- The following 3 lines added to exclude the LTD loans -->
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')AND BORROW_NO=LB.BORROW_NO)
        UNION
        SELECT NULL AS TRANS_ID,FD.ACCT_NUM,FD.RENEWAL_ACCT_NO as RENEWED_LOAN_NO,FD.PROD_ID,  FD.BORROW_NO, NULL AS AMOUNT, get_cust_name(CUST.CUST_ID) AS Name, FD.SANCTION_NO
            <!--,FD.AUTHORIZE_BY_1, FD.AUTHORIZE_STATUS_1, FD.AUTHORIZE_BY_2, FD.AUTHORIZE_STATUS_2 -->
        FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS FD, CUSTOMER CUST 
        WHERE LB.CUST_ID = CUST.CUST_ID AND LB.BORROW_NO = FD.BORROW_NO 
        AND FD.STATUS NOT IN ('DELETED','CREATED') AND 
        FD.BRANCH_ID = #BRANCH_ID:VARCHAR# AND 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'OD', 1, 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'CC', 1,(SELECT COUNT(ACCT_NUM) FROM LOANS_REPAY_SCHEDULE WHERE ACCT_NUM = FD.ACCT_NUM AND STATUS IN ('CREATED', 'MODIFIED'))))) > 0) 
        AND (FD.STATUS_BY != #STATUS_BY:VARCHAR# AND 
        (FD.AUTHORIZE_BY_1 IS NULL OR FD.AUTHORIZE_BY_1 != #STATUS_BY:VARCHAR#)) AND 
            <!--(FD.AUTHORIZE_BY_2 IS NULL  OR FD.AUTHORIZE_BY_2 != #STATUS_BY#)))
            AND -->cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = FD.STATUS_BY AND BRANCH_CODE=#BRANCH_ID:VARCHAR#)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="GOLD_LOAN">
                    FD.ACCT_STATUS !='RENEWAL'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 = 'EXCEPTION') <!--OR FD.AUTHORIZE_STATUS_2 = 'EXCEPTION' --> 
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 IS NULL OR 
                FD.AUTHORIZE_STATUS_1 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                    <!--     OR 
                         (FD.AUTHORIZE_STATUS_2 IS NULL OR 
                         FD.AUTHORIZE_STATUS_2 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION')))-->
            </isNotEqual>
        </dynamic>           
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LB.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>   
                
               <!-- <dynamic>
                    <isParameterPresent>
                        <isNotNull prepend="AND" property="PROD_ID">
                        FD.PROD_ID = #PROD_ID#
                        </isNotNull>
                    </isParameterPresent>
                </dynamic> -->
                  
        AND  NOT EXISTS  <!-- The following 3 lines added to exclude the LTD loans -->
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')AND BORROW_NO=LB.BORROW_NO)
        UNION
        SELECT NULL AS TRANS_ID,FD.ACCT_NUM,FD.RENEWAL_ACCT_NO as RENEWED_LOAN_NO,FD.PROD_ID,  FD.BORROW_NO,  NULL AS AMOUNT , get_cust_name(CUST.CUST_ID) AS Name, FD.SANCTION_NO
            <!--,FD.AUTHORIZE_BY_1, FD.AUTHORIZE_STATUS_1, FD.AUTHORIZE_BY_2, FD.AUTHORIZE_STATUS_2 -->
        FROM LOANS_BORROWER LB, CUSTOMER CUST , LOANS_FACILITY_DETAILS FD
        LEFT OUTER JOIN LOANS_DISBURSEMENT LD ON LD.ACT_NUM = FD.ACCT_NUM 
        WHERE LB.CUST_ID = CUST.CUST_ID AND LB.BORROW_NO = FD.BORROW_NO 
        AND FD.STATUS != 'DELETED'
        AND FD.STATUS != 'MODIFIED'
        AND LD.ACT_NUM IS NULL  AND
        FD.BRANCH_ID = #BRANCH_ID:VARCHAR# AND         
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'OD', 1, 
        (DECODE((SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE STATUS IN ('CREATED', 'MODIFIED') AND PROD_ID = FD.PROD_ID), 
        'CC', 1,(SELECT COUNT(ACCT_NUM) FROM LOANS_REPAY_SCHEDULE WHERE ACCT_NUM = FD.ACCT_NUM AND STATUS IN ('CREATED', 'MODIFIED'))))) > 0) 
        AND (FD.STATUS_BY != #STATUS_BY:VARCHAR# AND 
        (FD.AUTHORIZE_BY_1 IS NULL OR FD.AUTHORIZE_BY_1 != #STATUS_BY:VARCHAR#)) AND 
            <!--(FD.AUTHORIZE_BY_2 IS NULL  OR FD.AUTHORIZE_BY_2 != #STATUS_BY#)))
            AND -->cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = FD.STATUS_BY AND BRANCH_CODE=#BRANCH_ID:VARCHAR#)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="GOLD_LOAN">
                    FD.ACCT_STATUS !='RENEWAL'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 = 'EXCEPTION') <!--OR FD.AUTHORIZE_STATUS_2 = 'EXCEPTION' --> 
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 IS NULL OR 
                FD.AUTHORIZE_STATUS_1 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                    <!--     OR 
                         (FD.AUTHORIZE_STATUS_2 IS NULL OR 
                         FD.AUTHORIZE_STATUS_2 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION')))-->
            </isNotEqual>
        </dynamic>           
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LB.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>   
                
               <!-- <dynamic>
                    <isParameterPresent>
                        <isNotNull prepend="AND" property="PROD_ID">
                        FD.PROD_ID = #PROD_ID#
                        </isNotNull>
                    </isParameterPresent>
                </dynamic> -->
                  
        AND  NOT EXISTS  <!-- The following 3 lines added to exclude the LTD loans -->
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')AND BORROW_NO=LB.BORROW_NO)
    </dynamic-mapped-statement>
         <!-- The following mapped statement added to display only the LTD loans For Authorization -->
    <dynamic-mapped-statement name="getSelectTermLoanAuthorizeTOListForLTD" result-class="java.util.LinkedHashMap" >
         SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,
         FD.PROD_ID,
         FD.BORROW_NO,
         FD.ACCT_NUM,
         <!--DECODE (CUST_TYPE,
               'INDIVIDUAL', FNAME || ' ' || MNAME || ' ' || LNAME,
               COMP_NAME)
          AS "CUSTOMER NAME",-->
          DECODE(CUST_TYPE,'INDIVIDUAL',CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME),COMP_NAME ) AS "CUSTOMER NAME",
         AT.AMOUNT ,
         CUST.CUST_ID AS "CUSTOMER ID",
         CUST.MEMBERSHIP_NO AS MEMBERSHIP_NO,
         FD.SANCTION_NO
        FROM LOANS_BORROWER LB, 
             LOANS_FACILITY_DETAILS FD, 
             CUSTOMER CUST ,
             ALL_TRANS AT 
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# 
        AND AT.link_batch_id=FD.ACCT_NUM 
        AND LB.CUST_ID = CUST.CUST_ID 
        AND LB.BORROW_NO = FD.BORROW_NO 
        AND AT.AUTHORIZE_STATUS IS NULL 
        AND FD.ACCT_STATUS!='CLOSED' 
        AND FD.STATUS NOT IN ('DELETED') 
        AND FD.BRANCH_ID = #BRANCH_ID:VARCHAR#
          <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTH_TRANS_TYPE">
                   AT.TRANS_TYPE ='DEBIT'
                </isNotNull>
            </isParameterPresent>
        </dynamic> AND 
        (FD.STATUS_BY != #STATUS_BY:VARCHAR# AND 
        (FD.AUTHORIZE_BY_1 IS NULL OR FD.AUTHORIZE_BY_1 != #STATUS_BY#)) AND 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = FD.STATUS_BY AND BRANCH_CODE=#BRANCH_ID:VARCHAR#)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ((FD.AUTHORIZE_STATUS_1 IS NULL OR 
                FD.AUTHORIZE_STATUS_1 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                    )
            </isNotEqual>
        </dynamic>
        AND EXISTS  
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS LFD WHERE  EXISTS 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS' AND LFD.PROD_ID=PROD_ID)AND LB.BORROW_NO=BORROW_NO)        
    </dynamic-mapped-statement>
    <dynamic-mapped-statement name="getSelectTermLoanCashierAuthorizeTOListForLTD" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,FD.PROD_ID, <!--(SELECT  DEPOSIT_NO from deposit_lien where LIEN_AC_NO=FD.ACCT_NUM  group by DEPOSIT_NO) as DEPOSIT_NO
            ,--> FD.BORROW_NO, FD.ACCT_NUM,  get_cust_name(CUST.CUST_ID) AS "CUSTOMER NAME",
        AT.AMOUNT ,CUST.CUST_ID AS "CUSTOMER ID",CUST.MEMBERSHIP_NO AS MEMBERSHIP_NO,FD.SANCTION_NO
        FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS FD, CUSTOMER CUST ,ALL_TRANS AT<!--, DEPOSIT_LIEN "DL"-->
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND AT.link_batch_id=FD.ACCT_NUM AND CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN 'AUTHORIZED' ELSE AT.PAYMENT_STATUS END IS NOT NULL  AND LB.CUST_ID = CUST.CUST_ID AND LB.BORROW_NO = FD.BORROW_NO AND
            <!--DL.LIEN_AC_NO=FD.ACCT_NUM AND 
            DL.AUTHORIZE_STATUS IS NULL--> 
        <!--FD.AUTHORIZE_STATUS_1 IS NULL -->
        at.AUTHORIZE_STATUS is null
        AND FD.ACCT_STATUS!='CLOSED' 
           <!--AND DL.STATUS IN('CREATED','MODIFIED')-->
        AND FD.STATUS NOT IN ('DELETED') AND 
        FD.BRANCH_ID = #BRANCH_ID:VARCHAR# 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTH_TRANS_TYPE">
                   AT.TRANS_TYPE ='DEBIT'
                </isNotNull>
            </isParameterPresent>
        </dynamic> AND 
        (FD.STATUS_BY != #STATUS_BY:VARCHAR# AND 
        (FD.AUTHORIZE_BY_1 IS NULL OR FD.AUTHORIZE_BY_1 != #STATUS_BY#)) AND 
            <!--(FD.AUTHORIZE_BY_2 IS NULL  OR FD.AUTHORIZE_BY_2 != #STATUS_BY#)))
            AND -->cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = FD.STATUS_BY AND BRANCH_CODE=#BRANCH_ID:VARCHAR#)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 = 'EXCEPTION' <!--OR FD.AUTHORIZE_STATUS_2 = 'EXCEPTION' -->) 
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ((FD.AUTHORIZE_STATUS_1 IS NULL OR 
                FD.AUTHORIZE_STATUS_1 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                    <!--     OR 
                         (FD.AUTHORIZE_STATUS_2 IS NULL OR 
                         FD.AUTHORIZE_STATUS_2 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))-->)
            </isNotEqual>
        </dynamic>
        AND EXISTS  
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS LFD WHERE  EXISTS 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS' AND LFD.PROD_ID=PROD_ID)AND LB.BORROW_NO=BORROW_NO)
                
        UNION 
                
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,FD.PROD_ID, <!--(SELECT  DEPOSIT_NO from deposit_lien where LIEN_AC_NO=FD.ACCT_NUM  group by DEPOSIT_NO) as DEPOSIT_NO
            ,--> FD.BORROW_NO, FD.ACCT_NUM,  get_cust_name(CUST.CUST_ID) AS "CUSTOMER NAME",
        AT.AMOUNT ,CUST.CUST_ID AS "CUSTOMER ID",CUST.MEMBERSHIP_NO AS MEMBERSHIP_NO,FD.SANCTION_NO
        FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS FD, CUSTOMER CUST,ALL_TRANS AT <!--, DEPOSIT_LIEN "DL"-->
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND AT.link_batch_id=FD.ACCT_NUM AND CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN NULL ELSE AT.PAYMENT_STATUS END IS  NULL AND AT.TRANS_TYPE='DEBIT' AND LB.CUST_ID = CUST.CUST_ID AND LB.BORROW_NO = FD.BORROW_NO AND
            <!--DL.LIEN_AC_NO=FD.ACCT_NUM AND 
            DL.AUTHORIZE_STATUS IS NULL--> 
        <!--FD.AUTHORIZE_STATUS_1 IS NULL -->
        at.AUTHORIZE_STATUS is null
        AND FD.ACCT_STATUS!='CLOSED' 
           <!--AND DL.STATUS IN('CREATED','MODIFIED')-->
        AND FD.STATUS NOT IN ('DELETED') AND 
        FD.BRANCH_ID = #BRANCH_ID:VARCHAR# AND 
        (FD.STATUS_BY != #STATUS_BY:VARCHAR# AND 
        (FD.AUTHORIZE_BY_1 IS NULL OR FD.AUTHORIZE_BY_1 != #STATUS_BY:VARCHAR#)) AND 
            <!--(FD.AUTHORIZE_BY_2 IS NULL  OR FD.AUTHORIZE_BY_2 != #STATUS_BY#)))
            AND -->cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = FD.STATUS_BY AND BRANCH_CODE=#BRANCH_ID:VARCHAR#)
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (FD.AUTHORIZE_STATUS_1 = 'EXCEPTION' <!--OR FD.AUTHORIZE_STATUS_2 = 'EXCEPTION' -->) 
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                ((FD.AUTHORIZE_STATUS_1 IS NULL OR 
                FD.AUTHORIZE_STATUS_1 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
                    <!--     OR 
                         (FD.AUTHORIZE_STATUS_2 IS NULL OR 
                         FD.AUTHORIZE_STATUS_2 NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))-->)
            </isNotEqual>
        </dynamic>
        AND EXISTS  
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS LFD WHERE  EXISTS 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS' AND LFD.PROD_ID=PROD_ID)AND LB.BORROW_NO=BORROW_NO)
    </dynamic-mapped-statement> 
    <mapped-statement name="getBorrowerTabCustFields" result-class="java.util.LinkedHashMap" >
        SELECT C.NETWORTH, C.RISK_RATING, C.CR_AVAILED_SINCE, DECODE(CUST_TYPE, 'INDIVIDUAL', C.PRIMARY_OCCUPATION, CO.NATURE_OF_BUSINESS) AS "BUSINESS", 
        NVL((SELECT MIN(FROM_DT) FROM CUST_HISTORY WHERE CUST_ID = C.CUST_ID AND RELATIONSHIP='ACCT_HOLDER'), #BRANCH_CURRENT_DT:DATE#) AS "DEALING_WITH_BANK_SINCE", 
        C.NETWORTH_AS_ON 
        FROM CUSTOMER C LEFT JOIN  CORP_CUST_FINANCE CO
        ON C.CUST_ID = CO.CUST_ID  WHERE C.CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getCorpMainCustDetails" result-class="java.util.LinkedHashMap" >
        SELECT get_cust_name(C.CUST_ID) AS "NAME",  C.COMM_ADDR_TYPE, 
        CCF.COMP_REG_NO, CCF.ESTABLISH_DT, CA.STREET, CA.AREA, CA.CITY, CA.STATE, CA.PIN_CODE, 
        CA.COUNTRY_CODE, CP.AREA_CODE || '-' || CP.PHONE_NUMBER AS "PHONE_NUMBER"  
        FROM CUSTOMER C, CORP_CUST_FINANCE CCF, CUST_ADDR CA, CUST_PHONE CP , CUSTOMER AC 
        WHERE C.CUST_ID = AC.AUTHORIZE_CUST_ID
        AND AC.CUST_ID =  #CUST_ID:VARCHAR# 
        AND AC.CUST_ID = CCF.CUST_ID
        AND C.COMM_ADDR_TYPE = CA.ADDR_TYPE 
        AND CA.CUST_ID = C.CUST_ID AND (CA.STATUS = 'CREATED' OR CA.STATUS = 'MODIFIED')
        AND CP.CUST_ID = C.CUST_ID AND (CP.STATUS = 'CREATED' OR CP.STATUS = 'MODIFIED') 
    </mapped-statement>
        
    <dynamic-mapped-statement name="getSelectLoanAccInfoList" result-class="java.util.LinkedHashMap" >
        <!--SELECT CUSTOMER.CUST_ID AS "CUSTOMER ID",
    get_cust_name(CUSTOMER.CUST_ID) AS "Name",
    CUSTOMER.CUST_TYPE_ID, CUSTOMER.CUST_TYPE, CUSTOMER.BRANCH_CODE 
    FROM CUSTOMER, CUST_ADDR
    WHERE (CUSTOMER.STATUS = 'CREATED' OR CUSTOMER.STATUS = 'MODIFIED') 
    AND CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED'
    AND (CUSTOMER.CUSTOMER_STATUS NOT IN ('DECEASED') OR  CUSTOMER.CUSTOMER_STATUS IS NULL)
    AND (CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID)
    AND CUSTOMER.BRANCH_CODE = #BRANCH_CODE# 
    AND (CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE) 
    AND (CUST_ADDR.STATUS = 'CREATED' OR CUST_ADDR.STATUS = 'MODIFIED')
    AND CUSTOMER.CUST_ID NOT IN 
        (SELECT CUST_ID FROM LOANS_BORROWER WHERE STATUS IN ('CREATED', 'MODIFIED')) -->                
        <!--SELECT CUSTOMER.CUST_ID AS "CUSTOMER ID", get_cust_name(CUSTOMER.CUST_ID) AS "Name",
        CUSTOMER.CUST_TYPE_ID, AM.ACT_NUM, DA.DEPOSIT_NO, SA.SHARE_ACCT_NO,
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS CUST_TYPE, CUSTOMER.BRANCH_CODE FROM 
        CUSTOMER, CUST_ADDR, ACT_MASTER AM, DEPOSIT_ACINFO DA, SHARE_ACCT SA WHERE 
        CUSTOMER.CUST_ID = AM.CUST_ID(+) AND
        CUSTOMER.CUST_ID = DA.CUST_ID(+) AND
        CUSTOMER.CUST_ID = SA.CUST_ID(+) AND
        (CUSTOMER.STATUS = 'CREATED' OR CUSTOMER.STATUS = 'MODIFIED')
        AND CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED' AND (CUSTOMER.CUSTOMER_STATUS NOT IN ('DECEASED')
        OR  CUSTOMER.CUSTOMER_STATUS IS NULL) AND (CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID)  AND 
        CUSTOMER.BRANCH_CODE = #BRANCH_CODE# AND (CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE) AND 
        (CUST_ADDR.STATUS = 'CREATED' OR CUST_ADDR.STATUS = 'MODIFIED') AND NOT EXISTS
        (SELECT CUST_ID FROM LOANS_BORROWER WHERE STATUS IN ('CREATED', 'MODIFIED') AND  CUSTOMER.CUST_ID=LOANS_BORROWER.CUST_ID)-->
        <!-- AND (CUSTOMER.MEMBERSHIP_CLASS !='NONE')     -->           <!--OR CUSTOMER.MEMBERSHIP_CLASS IS NOT NULL-->
        <!-- AND   SHARE_ACCT.CUST_ID=CUSTOMER.CUST_ID AND (NOT_ELIGIBLE_LOAN='N' 
        OR NOT_ELIGIBLE_DT &lt; #CURR_DT# OR NOT_ELIGIBLE_DT IS NULL)
        AND SHARE_ACCT.STATUS !='DELETED' AND SHARE_ACCT.AUTHORIZE = 'AUTHORIZED' -->
        <!--SELECT CUSTOMER.CUST_ID AS "CUSTOMER ID", get_cust_name(CUSTOMER.CUST_ID) AS "Name", CUSTOMER.CUST_TYPE_ID, AM.ACT_NUM, DA.DEPOSIT_NO, SA.SHARE_ACCT_NO,SA.STATUS, (SELECT 
        LOOKUP_DESC FROM LOOKUP_MASTER WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS CUST_TYPE, CUSTOMER.BRANCH_CODE FROM CUSTOMER, CUST_ADDR, ACT_MASTER AM, 
        DEPOSIT_ACINFO DA, SHARE_ACCT SA WHERE CUSTOMER.CUST_ID = AM.CUST_ID(+) AND CUSTOMER.CUST_ID = DA.CUST_ID(+) AND 
        CUSTOMER.CUST_ID = SA.CUST_ID(+) AND (CUSTOMER.STATUS = 'CREATED' OR CUSTOMER.STATUS = 'MODIFIED') AND 
        CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED' AND (CUSTOMER.CUSTOMER_STATUS NOT IN ('DECEASED') OR 
        CUSTOMER.CUSTOMER_STATUS IS NULL) AND (CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID) AND CUSTOMER.BRANCH_CODE = #BRANCH_CODE# AND 
        (CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE) AND (CUST_ADDR.STATUS = 'CREATED' OR CUST_ADDR.STATUS = 'MODIFIED') -->
        <!-- AND NOT EXISTS (SELECT CUST_ID FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS LFD WHERE 
        LB.STATUS IN ('CREATED', 'MODIFIED') AND LB.BORROW_NO=LFD.BORROW_NO AND LFD.STATUS IN ('CREATED', 'MODIFIED')
        AND (LFD.AUTHORIZE_STATUS_1 IS NULL OR LFD.AUTHORIZE_STATUS_1='AUTHORIZED') AND CUSTOMER.CUST_ID=LB.CUST_ID AND PROD_ID NOT IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS'))-->
            
        SELECT CUSTOMER.CUST_ID AS "CUSTOMER ID",
        DECODE (
        CUSTOMER.CUST_TYPE,
        'INDIVIDUAL',    FNAME
        || ' '
        || NVL (MNAME, '')
        || ' '
        || NVL (LNAME, ''),
        CUSTOMER.COMP_NAME)
        AS "Name",
        CUSTOMER.CUST_TYPE_ID,
        AM.ACT_NUM,
        DA.DEPOSIT_NO,
        SA.SHARE_ACCT_NO,
        SA.STATUS,
        (SELECT LOOKUP_DESC
        FROM LOOKUP_MASTER
        WHERE     (   LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE'
        OR LOOKUP_ID = 'CUSTOMER.TYPE')
        AND LOOKUP_REF_ID = CUSTOMER.CUST_TYPE)
        AS CUST_TYPE,
        CUSTOMER.BRANCH_CODE
        FROM CUSTOMER JOIN CUST_ADDR ON (CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID)
        AND (CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE)
        LEFT JOIN ACT_MASTER AM ON CUSTOMER.CUST_ID = AM.CUST_ID 
        LEFT JOIN DEPOSIT_ACINFO DA ON CUSTOMER.CUST_ID = DA.CUST_ID
        LEFT JOIN SHARE_ACCT SA ON CUSTOMER.CUST_ID = SA.CUST_ID
        WHERE  
        (CUSTOMER.STATUS = 'CREATED' OR CUSTOMER.STATUS = 'MODIFIED')
        AND CUSTOMER.AUTHORIZE_STATUS = 'AUTHORIZED'
        AND (   CUSTOMER.CUSTOMER_STATUS NOT IN ('DECEASED')
        OR CUSTOMER.CUSTOMER_STATUS IS NULL)
        AND (CUST_ADDR.STATUS = 'CREATED' OR CUST_ADDR.STATUS = 'MODIFIED')
        AND  NOT EXISTS (SELECT CUST_ID FROM CUSTOMER_SUSPENDED  WHERE   STATUS='SUSPENDED'
        AND CUSTOMER.CUST_ID=CUST_ID)             
             
        <dynamic>
            <isNotEmpty prepend=" AND CUSTOMER.CUST_ID NOT IN ( " property="CUSTOMER_ID">
                $CUSTOMER_ID$ )
            </isNotEmpty>
        </dynamic>
          
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER ID">
                    UPPER(CUSTOMER.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="Name">
                    UPPER(get_cust_name(CUSTOMER.CUST_ID)) LIKE UPPER('%$Name$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_TYPE_ID">
                    UPPER(CUSTOMER.CUST_TYPE_ID) LIKE UPPER('%$CUST_TYPE_ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ACT_NUM">
                    UPPER(AM.ACT_NUM) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="DEPOSIT_NO">
                    UPPER(DA.DEPOSIT_NO) LIKE UPPER('%$DEPOSIT_NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="SHARE_ACCT_NO">
                    UPPER(SA.SHARE_ACCT_NO) LIKE UPPER('%$SHARE_ACCT_NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="BRANCH_CODE">
                    UPPER(CUSTOMER.BRANCH_CODE) LIKE UPPER('%$BRANCH_CODE$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUST_ID">
                    CUSTOMER.CUST_ID=#CUST_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUSTOMER_ID OR MEMBER_NO">
                    (CUSTOMER.CUST_ID=#CUSTOMER_ID OR MEMBER_NO# OR CUSTOMER.MEMBERSHIP_NO=#CUSTOMER_ID OR MEMBER_NO#)
                </isNotNull>
                  
            </isParameterPresent>
                
        </dynamic>
    </dynamic-mapped-statement>

    <dynamic-mapped-statement name="getSelectCustListForLTD" result-class="java.util.LinkedHashMap" >
        SELECT CUSTOMER.CUST_ID AS "CUSTOMER ID", get_cust_name(CUSTOMER.CUST_ID) AS "Name",
        CUSTOMER.CUST_TYPE_ID, AM.ACT_NUM, DA.DEPOSIT_NO, SA.SHARE_ACCT_NO,SA.STATUS,
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS CUST_TYPE, CUSTOMER.BRANCH_CODE FROM 
        CUSTOMER, CUST_ADDR, ACT_MASTER AM, DEPOSIT_ACINFO DA, SHARE_ACCT SA WHERE 
        CUSTOMER.CUST_ID = AM.CUST_ID(+) AND
        CUSTOMER.CUST_ID = DA.CUST_ID(+) AND
        CUSTOMER.CUST_ID = SA.CUST_ID(+) AND
        (CUSTOMER.STATUS = 'CREATED' OR CUSTOMER.STATUS = 'MODIFIED')
        AND CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED' AND (CUSTOMER.CUSTOMER_STATUS NOT IN ('DECEASED')
        OR  CUSTOMER.CUSTOMER_STATUS IS NULL) AND (CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID)  AND 
        CUSTOMER.BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND (CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE) AND 
        (CUST_ADDR.STATUS = 'CREATED' OR CUST_ADDR.STATUS = 'MODIFIED') <!--AND EXISTS
        (SELECT CUST_ID FROM DEPOSIT_ACINFO WHERE STATUS IN ('CREATED', 'MODIFIED')srinath sir want to allintitated branch custid22-dec-09 
        AND DEPOSIT_STATUS != 'CLOSED' AND INITIATED_BRANCH = #BRANCH_CODE# AND CUST_ID = CUSTOMER.CUST_ID)-->
        AND NOT EXISTS (SELECT CUST_ID FROM CUSTOMER_SUSPENDED WHERE STATUS='SUSPENDED'
        AND CUSTOMER.CUST_ID=CUST_ID)
        <dynamic>
            <isNotEmpty prepend=" AND CUSTOMER.CUST_ID NOT IN ( " property="CUSTOMER_ID">
                $CUSTOMER_ID$ )
            </isNotEmpty>
        </dynamic>
        <dynamic>
            
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER ID">
                    UPPER(CUSTOMER.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="Name">
        UPPER(get_cust_name(CUSTOMER.CUST_ID)) LIKE UPPER('%$Name$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_TYPE_ID">
                    UPPER(CUSTOMER.CUST_TYPE_ID) LIKE UPPER('%$CUST_TYPE_ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="ACT_NUM">
                    UPPER(AM.ACT_NUM) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="DEPOSIT_NO">
                    UPPER(DA.DEPOSIT_NO) LIKE UPPER('%$DEPOSIT_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="SHARE_ACCT_NO">
                    UPPER(SA.SHARE_ACCT_NO) LIKE UPPER('%$SHARE_ACCT_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="BRANCH_CODE">
                    UPPER(CUSTOMER.BRANCH_CODE) LIKE UPPER('%$BRANCH_CODE$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUST_ID">
                    CUSTOMER.CUST_ID=#CUST_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="getSelectCustListForSHG" result-class="java.util.LinkedHashMap" >
     <!--   SELECT CUSTOMER.CUST_ID AS "CUSTOMER ID", get_cust_name(CUSTOMER.CUST_ID) AS "Name", CUSTOMER.CUST_TYPE_ID, AM.ACT_NUM, DA.DEPOSIT_NO, SA.SHARE_ACCT_NO, (SELECT LOOKUP_DESC
             FROM LOOKUP_MASTER WHERE (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND LOOKUP_REF_ID = 
             CUSTOMER.CUST_TYPE) AS CUST_TYPE, CUSTOMER.BRANCH_CODE FROM CUSTOMER, CUST_ADDR, ACT_MASTER AM, DEPOSIT_ACINFO DA, 
             SHARE_ACCT SA,SHG_MEMBER_DETAILS SMD WHERE CUSTOMER.CUST_ID = AM.CUST_ID(+) AND CUSTOMER.CUST_ID = DA.CUST_ID(+) AND CUSTOMER.CUST_ID =
             SA.CUST_ID(+) AND (CUSTOMER.STATUS = 'CREATED' OR CUSTOMER.STATUS = 'MODIFIED') AND CUSTOMER.
             AUTHORIZE_STATUS='AUTHORIZED' AND (CUSTOMER.CUSTOMER_STATUS NOT IN ('DECEASED') OR CUSTOMER.CUSTOMER_STATUS IS NULL)
             AND (CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID) AND CUSTOMER.BRANCH_CODE = #BRANCH_CODE# AND (CUSTOMER.COMM_ADDR_TYPE = 
             CUST_ADDR.ADDR_TYPE) AND (CUST_ADDR.STATUS = 'CREATED' OR CUST_ADDR.STATUS = 'MODIFIED') AND NOT EXISTS 
             (SELECT CUST_ID FROM CUSTOMER_SUSPENDED WHERE STATUS='SUSPENDED' AND CUSTOMER.CUST_ID=CUST_ID) 
             AND SMD.SHG_ID = #SHG_ID# AND  SMD.MEMBER_NO = CUSTOMER.MEMBERSHIP_NO AND SMD.STATUS!='DELETED' -->
        SELECT C.MEMBERSHIP_NO,C.CUST_ID AS "CUSTOMER ID", get_cust_name(C.CUST_ID) AS "Name",
        C.BRANCH_CODE FROM CUSTOMER C, SHG_MEMBER_DETAILS SMD WHERE C. AUTHORIZE_STATUS='AUTHORIZED' AND C.BRANCH_CODE = #BRANCH_CODE:VARCHAR#
        AND (C.STATUS = 'CREATED' OR C.STATUS = 'MODIFIED') AND NOT EXISTS (SELECT CUST_ID FROM CUSTOMER_SUSPENDED WHERE 
        STATUS='SUSPENDED' AND C.CUST_ID=CUST_ID) AND SMD.SHG_ID = #SHG_ID:VARCHAR# AND SMD.MEMBER_NO = C.MEMBERSHIP_NO AND SMD.STATUS!='DELETED'
             <dynamic>
           <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER ID">
                    UPPER(C.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBERSHIP_NO">
                    UPPER(C.MEMBERSHIP_NO) LIKE UPPER('%$MEMBERSHIP_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="Name">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$Name$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="BRANCH_CODE">
                    UPPER(C.BRANCH_CODE) LIKE UPPER('%$BRANCH_CODE$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUST_ID">
                    C.CUST_ID=#CUST_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            
        </dynamic>
        ORDER BY C.CUST_ID
    </dynamic-mapped-statement>             
    
    
    

    <dynamic-mapped-statement name="getSelectDepositCustListForLTD" result-class="java.util.LinkedHashMap" >
       <!-- SELECT DA.DEPOSIT_NO AS "Deposit_No", 
        OPENING_MODE as "Opening Mode",
        DA.PROD_ID as "Product Id",
        FNAME || ' ' || MNAME || ' '|| LNAME as "Customer",
        NVL(DSA.AVAILABLE_BALANCE,0) as "Balance",
        DSA.DEPOSIT_DT,
        DP.BEHAVES_LIKE,DPS.PREMATURE_WITHDRAWAL
        FROM DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA, CUSTOMER CUST ,
        DEPOSITS_PRODUCT DP,DEPOSITS_PROD_SCHEME DPS
        WHERE DA.CUST_ID = CUST.CUST_ID AND 
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND
        DA.STATUS not in ('DELETED', 'REJECTED') 
        AND DP.PROD_ID=DPS.PROD_ID 
        AND DA.PROD_ID=DP.PROD_ID 
        AND (DA.DEPOSIT_STATUS NOT IN ('CLOSED') OR 
        DA.DEPOSIT_STATUS IS NULL) AND BRANCH_ID = #BRANCH_CODE#  AND    MATURITY_DT &gt; #CURR_DT#  -->

        SELECT DA.DEPOSIT_NO AS "Deposit_No", OPENING_MODE AS "Opening Mode",
        DP.PROD_ID AS "Product 
        Id",   get_cust_name(cust.cust_id) AS "Customer",
        NVL (DSA.AVAILABLE_BALANCE, 0) AS "Balance",
        DSA.DEPOSIT_DT,DSA.MATURITY_DT,DSA.RATE_OF_INT,DP.BEHAVES_LIKE,DPS.PREMATURE_WITHDRAWAL,CUST.MEMBERSHIP_NO
        FROM DEPOSIT_ACINFO DA,
        DEPOSIT_SUB_ACINFO DSA,
        CUSTOMER CUST,
        DEPOSITS_PRODUCT DP,
        DEPOSITS_PROD_SCHEME DPS
        WHERE DP.PROD_DESC IN (
        SELECT SELECTED_DEPOSITS
        FROM LOANS_PRODUCT LP, LOAN_PROD_AGAINST_AV_DEPOSIT LPAA
        WHERE LPAA.PROD_ID = LP.PROD_ID
        AND LP.PROD_ID = #LOAN_PROD_ID:VARCHAR#)
        AND DA.CUST_ID = CUST.CUST_ID
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        AND DA.STATUS NOT IN ('DELETED', 'REJECTED')
        AND (DA.DEPOSIT_STATUS NOT IN ('CLOSED') OR DA.DEPOSIT_STATUS IS NULL)
        AND BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND DP.PROD_ID = DA.PROD_ID
        AND DPS.PROD_ID = DA.PROD_ID
        AND MATURITY_DT > #CURR_DT:DATE#
        AND (DSA.FLEXI_STATUS IS NULL OR DSA.FLEXI_STATUS !='Y')
        AND DSA.ACCT_STATUS !='CLOSED'
        <dynamic>
            <isNotEmpty prepend=" AND CUSTOMER.CUST_ID NOT IN ( " property="CUSTOMER_ID">
                $CUSTOMER_ID$ )
            </isNotEmpty>
        </dynamic>
        
        <dynamic>
            <isNotEmpty prepend=" AND DSA.DEPOSIT_NO NOT IN ( " property="DEPOSIT_NO_PRESENT">
                $DEPOSIT_NO_PRESENT$ )
            </isNotEmpty>
        </dynamic>        
        <dynamic>
            <isNotEmpty prepend="AND" property="RATE_OF_INT">
                DSA.RATE_OF_INT =#RATE_OF_INT:NUMBER#
            </isNotEmpty>
        </dynamic>   
        
        <dynamic>
            <isNotEmpty prepend="AND" property="DEPOSIT_PROD_ID">
                DP.PROD_ID =#DEPOSIT_PROD_ID:VARCHAR#
            </isNotEmpty>
        </dynamic>  
        
        <dynamic>
            <isNotEmpty prepend="AND" property="MATURITY_DT">
                DSA.MATURITY_DT  = TO_DATE(#MATURITY_DT:DATE#,'DD-MM-YYYY')
            </isNotEmpty>
        </dynamic> 
         <dynamic>
               <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="Deposit_No">
                    UPPER(DA.DEPOSIT_NO) LIKE UPPER('%$Deposit_No$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBERSHIP_NO">
                    UPPER(CUST.MEMBERSHIP_NO) LIKE UPPER('%$MEMBERSHIP_NO$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"   property="Opening Mode">
                    UPPER(OPENING_MODE) LIKE UPPER('%$Opening Mode$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ProductId">
                    UPPER(DP.PROD_ID) LIKE UPPER('%$ProductId$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="Customer">
                    UPPER(get_cust_name(cust.cust_id)) LIKE UPPER('%$Customer$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="Balance">
                    UPPER(NVL (DSA.AVAILABLE_BALANCE, 0)) LIKE UPPER('%$Balance$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"   property="DEPOSIT_DT">
                    UPPER(DSA.DEPOSIT_DT) LIKE UPPER('%$DEPOSIT_DT$%')
                </isNotNull>
            </isParameterPresent>
             <!-- <isParameterPresent>
                <isNotNull prepend="AND"   property="MATURITY_DT">
                    UPPER(DSA.MATURITY_DT) LIKE UPPER('%$MATURITY_DT$%')
                </isNotNull>
            </isParameterPresent>-->
              <isParameterPresent>
                <isNotNull prepend="AND"   property="BEHAVES_LIKE">
                    UPPER(DP.BEHAVES_LIKE) LIKE UPPER('%$BEHAVES_LIKE$%')
                </isNotNull>
            </isParameterPresent>
                <isParameterPresent>
                <isNotNull prepend="AND"   property="PREMATURE_WITHDRAWAL">
                    UPPER(DPS.PREMATURE_WITHDRAWAL) LIKE UPPER('%$PREMATURE_WITHDRAWAL$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic> 
    </dynamic-mapped-statement>

    <mapped-statement name="getDepositDetailsForLTD" result-class="java.util.LinkedHashMap" >
        <!--SELECT DA.CUST_ID,DL.LIEN_NO AS "LIENNO", DL.LIEN_AMOUNT AS "AMOUNT",DSA.AVAILABLE_BALANCE AS "BALANCE" ,DL.STATUS,DSA.MATURITY_DT, DSA.DEPOSIT_SUB_NO, CONSTITUTION, 
        CATEGORY, DPI.INT_TYPE
        FROM DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA, DEPOSITS_PROD_INTPAY DPI,DEPOSIT_LIEN DL
        WHERE DA.PROD_ID = DPI.PROD_ID AND 
        DL.DEPOSIT_NO=DA.DEPOSIT_NO AND
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND
        DA.DEPOSIT_NO = #DEPOSIT_NO# -->
        SELECT DA.CUST_ID,DA.DEPOSIT_NO, DSA.AVAILABLE_BALANCE AS "BALANCE", DSA.MATURITY_DT, 
        DSA.DEPOSIT_SUB_NO, CONSTITUTION, CATEGORY, DPI.INT_TYPE  FROM DEPOSIT_ACINFO DA, 
        DEPOSIT_SUB_ACINFO DSA, DEPOSITS_PROD_INTPAY DPI
        WHERE DA.PROD_ID = DPI.PROD_ID AND   
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getDepositCustDetailsForLTD" result-class="java.util.LinkedHashMap" >
        SELECT  LB.CUST_ID,DL.LIEN_AC_NO  FROM 
        DEPOSIT_ACINFO DA, 
        DEPOSIT_SUB_ACINFO DSA, DEPOSITS_PROD_INTPAY DPI,LOANS_FACILITY_DETAILS LFD,LOANS_BORROWER LB,DEPOSIT_LIEN DL
        WHERE DA.PROD_ID = DPI.PROD_ID AND DA.DEPOSIT_NO=DL.DEPOSIT_NO AND LFD.ACCT_NUM=DL.LIEN_AC_NO AND   
        LFD.BORROW_NO=LB.BORROW_NO AND DL.STATUS NOT IN ('DELETED' ,'UNLIENED') AND (DL.AUTHORIZE_STATUS='AUTHORIZED' OR 
        DL.AUTHORIZE_STATUS IS NULL) AND  
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.DEPOSIT_NO =  #DEPOSIT_NO:VARCHAR# AND LFD.ACCT_STATUS !='CLOSED'
    </mapped-statement>
    <mapped-statement name="getDepositLienDetailsForLTD" result-class="java.util.LinkedHashMap" >
        SELECT DA.CUST_ID,DL.LIEN_NO AS "LIENNO", DL.LIEN_AMOUNT AS "AMOUNT", DSA.AVAILABLE_BALANCE AS "BALANCE" ,
        DL.STATUS,DSA.MATURITY_DT, DSA.DEPOSIT_SUB_NO, CONSTITUTION, CATEGORY, DPI.INT_TYPE FROM DEPOSIT_ACINFO 
        DA, DEPOSIT_SUB_ACINFO DSA, DEPOSITS_PROD_INTPAY DPI,DEPOSIT_LIEN DL WHERE DA.PROD_ID = DPI.PROD_ID AND 
        DL.DEPOSIT_NO=DA.DEPOSIT_NO AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND  
        DL.AUTHORIZE_STATUS is NULL AND DL.STATUS NOT IN('DELETED','UNLIENED') AND 
        DL.LIEN_AC_NO = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getDepositDetails" result-class="java.util.HashMap" >
        SELECT * FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO=
        (SELECT DISTINCT DEPOSIT_NO  FROM DEPOSIT_LIEN WHERE  LIEN_AC_NO=#ACCT_NUM:VARCHAR#
        AND AUTHORIZE_STATUS IS NOT NULL) 
    </mapped-statement>
          
    <mapped-statement name="getDepositbeforeAuthDetails" result-class="java.util.HashMap" >
        SELECT * FROM DEPOSIT_SUB_ACINFO DSA  WHERE DEPOSIT_NO=
        (SELECT DISTINCT DEPOSIT_NO  FROM DEPOSIT_LIEN WHERE DSA.DEPOSIT_NO=DEPOSIT_NO AND LIEN_AC_NO=#ACCT_NUM:VARCHAR#
        ) 
    </mapped-statement>
                    
    <mapped-statement name="getThisCustShareHolderOrNot" result-class="java.util.LinkedHashMap" >
        SELECT COUNT(SA.SHARE_ACCT_NO) NO_SHARE  FROM SHARE_ACCT SA, SHARE_ACCT_DETAILS SAD 
        WHERE (SA.CUST_ID = #CUST_ID:VARCHAR#) 
        AND (SA.STATUS IN ('CREATED', 'MODIFIED')) 
        AND (SA.AUTHORIZE = 'AUTHORIZED') 
        AND (SAD.SHARE_ACCT_NO = SA.SHARE_ACCT_NO) 
        AND (SAD.STATUS IN ('CREATED', 'MODIFIED')) 
        AND (SAD.AUTHORIZE = 'AUTHORIZED') 
        AND (SAD.SHARE_STATUS = 'RES_ACCEPT')
    </mapped-statement>
        
    <mapped-statement name="getThisCustDepositAcctHolderOrNot" result-class="java.util.LinkedHashMap" >
        SELECT COUNT(DA.CUST_ID) NO_ACCT FROM DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA 
        WHERE (DA.CUST_ID = #CUST_ID:VARCHAR#) 
        AND (DA.DEPOSIT_NO = DSA.DEPOSIT_NO) 
        AND (DA.STATUS IN ('CREATED', 'MODIFIED')) 
        AND (DA.AUTHORIZE_STATUS = 'AUTHORIZED') 
        AND (DA.DEPOSIT_STATUS NOT IN ('CLOSED')) 
        AND  DA.DEPOSIT_STATUS IS NOT NULL 
<!--                AND (DSA.STATUS IN ('CREATED', 'MODIFIED')) -->
        AND DSA.STATUS IS NOT NULL 
        AND (DSA.AUTHORIZE_STATUS = 'AUTHORIZED') 
        AND (DSA.ACCT_STATUS NOT IN ('CLOSED') OR DSA.ACCT_STATUS IS NULL) 
    </mapped-statement>
        
    <mapped-statement name="getCustGroupDesc" result-class="java.util.LinkedHashMap" >
        SELECT C.CUSTOMERGROUP 
        FROM CUSTOMER C 
        WHERE C.CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getProdClassiDetails" result-class="java.util.LinkedHashMap" >
        SELECT * FROM LOANS_PROD_CLASSIFICATION WHERE PROD_ID = #PROD_ID# AND 
        (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>
        
    <mapped-statement name="updateCustNetworthDetailsTL" result-class="java.util.HashMap" >        
        UPDATE CUSTOMER SET 
        NETWORTH = #NETWORTH:NUMBER#,
        NETWORTH_AS_ON = #NETWORTH_AS_ON:DATE# 
        WHERE CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
        
    <result-map name="getAccountResultListTL" class="java.util.LinkedHashMap">
        <property name="AccountNo" column="ACT_NUM"/>
        <property name="CustomerName" column="CUSTOMER_NAME"/>
        <property name="Category" column="CATEGORY"/>
        <property name="Constitution" column="CONSTITUTION"/>
    </result-map>
    <mapped-statement name="Cash.getGuarantorAccountListTL" result-map="getAccountResultListTL" >
        SELECT
        LFD.ACCT_NUM as ACT_NUM, get_cust_name(CU.CUST_ID) AS CUSTOMER_NAME,
        LB.CATEGORY as CATEGORY, LB.CONSTITUTION 
        FROM LOANS_BORROWER LB, CUSTOMER CU, LOANS_FACILITY_DETAILS LFD
        WHERE LB.CUST_ID = CU.CUST_ID AND 
        CU.CUST_ID = #CUST_ID:VARCHAR# AND 
        LB.BORROW_NO = LFD.BORROW_NO AND 
        LFD.PROD_ID = #PROD_ID:VARCHAR# AND
        (LFD.ACCT_STATUS IN ('NEW','TRANSFER_IN', 'DECEASED', 'OPERATIONAL') or LFD.ACCT_STATUS is null) AND 
        LB.STATUS NOT IN ('DELETED') AND 
        LFD.STATUS NOT IN ('DELETED') AND 
        LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED' 
           <!-- LFD.AUTHORIZE_STATUS_2 = 'AUTHORIZED'-->
        ORDER BY LFD.ACCT_NUM
    </mapped-statement>
        

    <result-map name="getAccountResultListTD" class="java.util.LinkedHashMap">
        <property name="AccountNo" column="ACT_NUM"/>
        <property name="CustomerName" column="CUSTOMER_NAME"/>
        <property name="CustomerType" column="CUST_TYPE_ID"/>
        <property name="ProductType" column="TYPE"/>
        <property name="Amount" column="AMOUNT"/>
        <property name="Constitution" column="CONSTITUTION"/>
    </result-map>
    <mapped-statement name="Cash.getGuarantorAccountListTD" result-map="getAccountResultListTD" >
        SELECT 
        DA.DEPOSIT_NO || '_' || DEPOSIT_SUB_NO as ACT_NUM, 
        get_cust_name(CU.CUST_ID) AS CUSTOMER_NAME,
        CU.CUST_TYPE as CUST_TYPE_ID, DP.BEHAVES_LIKE AS TYPE, DS.DEPOSIT_AMT AS AMOUNT, DA.CONSTITUTION 
        FROM DEPOSIT_ACINFO DA, CUSTOMER CU,DEPOSIT_SUB_ACINFO DS,
        DEPOSITS_PRODUCT DP 
        WHERE DA.CUST_ID = CU.CUST_ID AND 
        CU.CUST_ID = #CUST_ID:VARCHAR# AND  
        DP.PROD_ID = DA.PROD_ID AND 
        DA.PROD_ID = #PROD_ID:VARCHAR# AND 
        DA.DEPOSIT_NO=DS.DEPOSIT_NO  AND
        (DS.DEPOSIT_AMT != DS.AVAILABLE_BALANCE OR
        DS.DEPOSIT_AMT != DS.SHADOW_CREDIT OR (
        DS.AVAILABLE_BALANCE IS NULL AND DS.SHADOW_CREDIT IS NULL)
        OR DP.BEHAVES_LIKE = 'RECURRING') AND 
        (DS.ACCT_STATUS IN ('NEW','PART_FREEZE','OPERATIONAL') or DS.ACCT_STATUS is null) AND 
        DS.STATUS NOT IN ('DELETED') AND 
        DS.AUTHORIZE_STATUS='AUTHORIZED' 
        ORDER BY DA.DEPOSIT_NO
    </mapped-statement>
        
    <result-map name="getAccountResultListAD" class="java.util.LinkedHashMap">
        <property name="AccountNo" column="ACT_NUM"/>
        <property name="CustomerName" column="CUSTOMER_NAME"/>
        <property name="Category" column="CATEGORY"/>
        <property name="Constitution" column="CONSTITUTION"/>
    </result-map>
    <mapped-statement name="Cash.getGuarantorAccountListAD" result-map="getAccountResultListAD" >
        SELECT
        LFD.ACCT_NUM as ACT_NUM, get_cust_name(CU.CUST_ID) AS CUSTOMER_NAME,
        LB.CATEGORY as CATEGORY, LB.CONSTITUTION 
        FROM LOANS_BORROWER LB, CUSTOMER CU, LOANS_FACILITY_DETAILS LFD
        WHERE LB.CUST_ID = CU.CUST_ID AND 
        CU.CUST_ID = #CUST_ID:VARCHAR# AND 
        LB.BORROW_NO = LFD.BORROW_NO AND 
        LFD.PROD_ID = #PROD_ID:VARCHAR# AND
        (LFD.ACCT_STATUS IN ('NEW','TRANSFER_IN', 'DECEASED', 'OPERATIONAL') or LFD.ACCT_STATUS is null) AND 
        LB.STATUS NOT IN ('DELETED') AND 
        LFD.STATUS NOT IN ('DELETED') AND 
        LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED' 
            <!--LFD.AUTHORIZE_STATUS_2 = 'AUTHORIZED'-->
        ORDER BY LFD.ACCT_NUM
    </mapped-statement>
        
    <result-map name="getAccountResultListOA" class="java.util.LinkedHashMap">
        <property name="AccountNo" column="ACT_NUM"/>
        <property name="CustomerName" column="CUSTOMER_NAME"/>
        <property name="CustomerType" column="CUST_TYPE_ID"/>
        <property name="Constitution" column="ACT_CAT_ID"/>
    </result-map>
    <mapped-statement name="Cash.getGuarantorAccountListOA" result-map="getAccountResultListOA" >
        SELECT
        ACT_NUM, get_cust_name(CU.CUST_ID) AS CUSTOMER_NAME,
        CUST_TYPE_ID, AM.ACT_CAT_ID 
        FROM ACT_MASTER AM, CUSTOMER CU
        WHERE AM.CUST_ID = CU.CUST_ID AND 
        CU.CUST_ID = #CUST_ID:VARCHAR# AND  
        AM.PROD_ID = #PROD_ID:VARCHAR# AND 
        (AM.ACT_STATUS_ID IN ('NEW','PART_FREEZE','OPERATIONAL','CREDIT_FREEZE','DEBIT_FREEZE','TOTAL_FREEZE','COMP_FREEZE')) AND 
        AM.STATUS NOT IN ('DELETED') AND 
        AM.AUTHORIZATION_STATUS='AUTHORIZED'
        ORDER BY ACT_NUM
    </mapped-statement>
        
    <mapped-statement name="authorizeTermLoan" result-class="java.util.HashMap">
        UPDATE LOANS_FACILITY_DETAILS SET 
        AUTHORIZE_STATUS_1 = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZE_BY_1 = #USER_ID:VARCHAR#,
        AUTHORIZE_DT_1 = #AUTHORIZEDT:TIMESTAMP#,
        AUTHORIZE_DT_2 = #AUTHORIZEDT:TIMESTAMP#,
        AUTHORIZE_STATUS_2 =''
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#            
    </mapped-statement>
    <mapped-statement name="authorizeGldLoan" result-class="java.util.HashMap">
        UPDATE LOANS_FACILITY_DETAILS SET 
        AUTHORIZE_STATUS_1 = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZE_BY_1 = #USER_ID:VARCHAR#,
        AUTHORIZE_DT_1 = #AUTHORIZEDT:TIMESTAMP#,
        AUTHORIZE_DT_2 = #AUTHORIZEDT:TIMESTAMP#,
        AUTHORIZE_STATUS_2 =''
        WHERE RENEWAL_ACCT_NO = #ACCT_NUM:VARCHAR#            
        AND AUTHORIZE_STATUS_1 IS NULL
    </mapped-statement>
        
    <mapped-statement name="getProdLevelOtherDetails" result-class="java.util.HashMap" >
        SELECT LPC.AC_CLOSING_CHRG, LPC.MISC_SERV_CHRG, LPS.ATM_CARD_ISSUED, LPS.CR_CARD_ISSUED, LPS.MOBILE_BANK_CLIENT, 
        APA.CHK_ALLOWED, APC.CHQBK_ISSUED_CHRG, APC.CHQBK_ISSUED_CHRG_PER, APS.DEBIT_CARD_ISSUED  
        FROM ADVANCES_PROD_ACPARAM APA, ADVANCES_PROD_CHARGES APC, ADVANCES_PROD_SPECIALITEM APS,
        LOANS_PROD_CHARGES LPC, LOANS_PROD_SPECIALITEM LPS, LOANS_PRODUCT LP  
        WHERE LP.PROD_ID = #PROD_ID:VARCHAR# AND LPS.PROD_ID = LP.PROD_ID 
        AND LPC.PROD_ID = LP.PROD_ID AND APA.PROD_ID = LP.PROD_ID 
        AND APC.PROD_ID = LP.PROD_ID AND APS.PROD_ID = LP.PROD_ID AND LP.STATUS != 'DELETED'
    </mapped-statement>
    <mapped-statement name="getLoanAccCloseCharges" result-class="java.util.HashMap" >
        SELECT AC_CLOSING_CHRG   FROM LOANS_PROD_CHARGES
        WHERE  PROD_ID=#PRODUCT_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getProcPercentageTL" result-class="java.util.HashMap" >
        SELECT PROD_ID, PROC_CHRG_PER, PROC_CHRG FROM LOANS_PROD_CHARGES WHERE PROC_CHRG='Y' AND 
        PROD_ID = (SELECT PROD_ID FROM LOANS_FACILITY_DETAILS WHERE   ACCT_NUM = #ACT_NUM:VARCHAR#)
           
    </mapped-statement>
        
    <mapped-statement name="getOABalanceTLCustomer" result-class="java.util.HashMap" >
        SELECT PROD_ID, ACT_NUM, CLEAR_BALANCE FROM ACT_MASTER WHERE 
        CUST_ID = (SELECT CUST_ID FROM LOANS_BORROWER WHERE
        BORROW_NO = (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE
        ACCT_NUM = #ACT_NUM:VARCHAR#))
    </mapped-statement>
        
    <mapped-statement name="getProcChargeAcHd" result-class="java.util.HashMap" >
        SELECT PROC_CHRG FROM LOANS_PROD_ACHD WHERE 
        PROD_ID = #TL_PROD_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getClearBalance" result-class="java.util.HashMap" >
        SELECT CLEAR_BALANCE FROM LOANS_FACILITY_DETAILS WHERE 
        ACCT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getNPADate" result-class="java.util.HashMap" >
        SELECT MAX(TO_DATE) AS TO_DT FROM NPA_HISTORY WHERE ACT_NUM=#ACT_NUM:VARCHAR# <!--AND CURR_STATUS=#ASSET_STATUS#-->
    </mapped-statement>
        
    <mapped-statement name="updateclearBal" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET LAST_INT_CALC_DT= #LAST_CALC_DT:DATE#  WHERE ACCT_NUM=#ACCOUNTNO:VARCHAR#
    </mapped-statement>
           
    <mapped-statement name="updateLastCalcDate" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET LAST_INT_CALC_DT= #LAST_CALC_DT:DATE#  WHERE ACCT_NUM=#ACCOUNTNO:VARCHAR#
    </mapped-statement> 
    
    <mapped-statement name="updateadvPbal" inline-parameters="true">
        update ADV_TRANS_DETAILS 
        set  PBAL=PBAL+#AMOUNT:NUMERIC#
        where TRANS_DT=#TODAY_DT:DATE#
        and ACT_NUM=#ACCOUNTNO:VARCHAR#
        and TRANS_SLNO=#TRANS_SLNO:NUMERIC#
    </mapped-statement>
        
        
        
        
    <mapped-statement name="getLoanFacilityforAd" result-class="java.util.LinkedHashMap">
        select acct_num,AVAILABLE_BALANCE,CLEAR_BALANCE,LOAN_BALANCE_PRINCIPAL,TOTAL_BALANCE,GET_ADV_PEN_INT_APPLICATION(acct_num,#TODAY:DATE#) as PENAL,
        GET_ADV_INTEREST_APPLICATION(acct_num,#TODAY:DATE#) as INTEREST
        from loans_facility_details ,dual d
        where acct_num between #FROM_AC:VARCHAR# and #TO_AC:VARCHAR# order by acct_num
    </mapped-statement>
        
        
        
    <mapped-statement name="updateloanFacilityForOD" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET
        CLEAR_BALANCE=#CLEAR_BALANCE:NUMERIC#,
        LOAN_BALANCE_PRINCIPAL=#LOAN_BALANCE_PRINCIPAL:NUMERIC#,
        TOTAL_BALANCE=#TOTAL_BALANCE:NUMERIC#,
        AVAILABLE_BALANCE=#AVAILABLE_BALANCE:NUMERIC#
             
        WHERE ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
        
        
        
        
    <mapped-statement name="updateadvPenal" inline-parameters="true">
        update ADV_TRANS_DETAILS 
        set  PENAL=#PENAL:NUMERIC#,
        INTEREST=nvl(INTEREST,0)-#PENAL:NUMERIC#,
        IBAL=0,
        PIBAL=0
        where TRANS_DT=#TODAY_DT:DATE#
        and ACT_NUM=#ACCOUNTNO:VARCHAR#
        and TRANS_SLNO=#TRANS_SLNO:NUMERIC#
    </mapped-statement>
        
    <mapped-statement name="updateAdvParam" inline-parameters="true">
        update advances_param_details
        set  LAST_DR_INT_APPLDT=#TODAY_DT:DATE#
        where
        ACT_NUM=#ACCOUNTNO:VARCHAR#
    </mapped-statement>
           
        
        
    <mapped-statement name="updateRetrasPectiveDt" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET RETRASPECTIVE_APP_DT= #UPDATE_RET_APP_DT:DATE#  WHERE ACCT_NUM=#ACCOUNTNO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateEMIlastIntCalc" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET LAST_INT_CALC_DT=(SELECT INSTALLMENT_DT-1 FROM LOANS_INSTALLMENT WHERE 
        INSTALLMENT_SLNO=#INSTALLMENT_NO:NUMBER# AND STATUS !='DELETED' AND ACCT_NUM=#ACCT_NUM:VARCHAR# AND  nvl(active_status,'Y') ='Y' ) WHERE  ACCT_NUM=#ACCT_NUM:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="getAllLoanInstallment" result-class="java.util.HashMap" >
        SELECT INSTALLMENT_DT, PRINCIPAL_AMT,TOTAL_AMT FROM LOANS_INSTALLMENT WHERE ACCT_NUM=#ACT_NUM:VARCHAR# AND STATUS !='DELETED' AND nvl(active_status,'Y') = 'Y'
        ORDER BY INSTALLMENT_SLNO
    </mapped-statement>
    
    <mapped-statement name="getAllLoanInstallmentLinkedMap" result-class="java.util.LinkedHashMap" >
        SELECT PRINCIPAL_AMT AS PRINCIPAL, INTEREST_AMT AS INTEREST_AMOUNT, BALANCE_AMT AS BALANCE,'UPDATE' AS COMMAND,
        INSTALLMENT_SLNO SLNO,INTEREST_RATE AS INTEREST_RATE,TOTAL_AMT AS TOTAL,TO_CHAR(INSTALLMENT_DT,'DD-MM-YYYY') AS INSTALLMENT_DATE 
        FROM LOANS_INSTALLMENT WHERE ACCT_NUM=#ACT_NO:VARCHAR# AND STATUS !='DELETED' AND nvl(active_status,'Y') ='Y'
        ORDER BY INSTALLMENT_SLNO
    </mapped-statement>
        
    <mapped-statement name="getAllLoanInstallmentArrayList" result-class="java.util.ArrayList" >
        SELECT * FROM LOANS_INSTALLMENT WHERE ACCT_NUM=#ACT_NO:VARCHAR# AND STATUS !='DELETED'AND nvl(active_status,'Y') ='Y'
        ORDER BY INSTALLMENT_SLNO
    </mapped-statement>
        
        
    <dynamic-mapped-statement name="getPaidPrinciple" result-class="java.util.HashMap" >
        select sum(NVL(PRINCIPLE,0)) AS PRINCIPLE, sum(NVL(INTEREST,0)) AS INTEREST, sum(NVL(PENAL,0)) AS PENAL ,sum(NVL(EXPENSE,0)) AS EXPENSE
        from LOAN_TRANS_DETAILS where ACT_NUM=#ACT_NUM:VARCHAR# and (TRN_CODE='C*' OR TRN_CODE='OLG')
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="FROM_DT">
                    TRANS_DT BETWEEN #FROM_DT:DATE# AND #TO_DATE:DATE#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="SALARY_RECOVERY">
                    SUBSTR(TRANS_ID,1,8) NOT IN (SELECT SR.VOUCHER_RELEASE_BATCH_ID
                    FROM SALARY_RECOVERY_LIST_DETAIL SR
                    WHERE SR.ACT_NUM = #ACT_NUM:VARCHAR#
                    AND SR.INT_CALC_UPTO_DT &lt; #FROM_DT:DATE# and SR.VOUCHER_RELEASE_BATCH_ID IS NOT NULL)
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
    <dynamic-mapped-statement name="getPaidPrincipleEMI1" result-class="java.util.HashMap" >
        select sum(NVL(PRINCIPLE,0)) AS PRINCIPLE, sum(NVL(INTEREST,0)) AS INTEREST, sum(NVL(PENAL,0)) AS PENAL ,sum(NVL(EXPENSE,0)) AS EXPENSE
        from LOAN_TRANS_DETAILS where ACT_NUM=#ACT_NUM:VARCHAR# and (TRN_CODE='C*' OR TRN_CODE='OLG')
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="FROM_DT">
                    TRANS_DT BETWEEN #FROM_DT:DATE# AND #TO_DATE:DATE#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
    <dynamic-mapped-statement name="getPaidPrincipleEMI" result-class="java.util.HashMap" >
        select sum(NVL(principle,0)+NVL(interest,0)) AS PRINCIPLE, sum(NVL(INTEREST,0)) AS INTEREST, sum(NVL(PENAL,0)) AS PENAL ,sum(NVL(EXPENSE,0)) AS EXPENSE
        from LOAN_TRANS_DETAILS where ACT_NUM=#ACT_NUM:VARCHAR# and (TRN_CODE='C*' OR TRN_CODE='OLG')
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="FROM_DT">
                    TRANS_DT BETWEEN #FROM_DT:DATE# AND #TO_DATE:DATE#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
         
    <mapped-statement name ="getEmiDue" result-class="java.util.HashMap">
        SELECT * FROM LOANS_INSTALLMENT WHERE INSTALLMENT_DT &lt;=#CURR_DT:DATE# AND 
        ACCT_NUM=#ACCT_NUM:VARCHAR# AND IS_BALANCE IS NULL AND STATUS !='DELETED' AND nvl(active_status,'Y') ='Y' ORDER BY INSTALLMENT_SLNO
    </mapped-statement>
    
    <mapped-statement name ="getSelectVoucherReleaseorNot" result-class="java.util.HashMap">
        SELECT SR.VOUCHER_RELEASE_DATE,LFD.LAST_INT_CALC_DT FROM SALARY_RECOVERY_LIST_DETAIL SR,LOANS_FACILITY_DETAILS LFD WHERE 
        LFD.ACCT_NUM = SR.ACT_NUM  AND SR.ACT_NUM = #ACT_NUM:VARCHAR# AND LFD.LAST_INT_CALC_DT = SR.INT_CALC_UPTO_DT and 
        SR.VOUCHER_RELEASE_BATCH_ID IS NOT NULL 
    </mapped-statement>
         
    <mapped-statement name ="getEmiDueBasedInstallment" result-class="java.util.HashMap">
        SELECT * FROM LOANS_INSTALLMENT LI WHERE ACCT_NUM=#ACCT_NUM:VARCHAR# AND STATUS!='DELETED' AND nvl(active_status,'Y') ='Y' AND IS_BALANCE IS NULL AND 
        INSTALLMENT_SLNO&gt;=(SELECT MIN(INSTALLMENT_SLNO) FROM LOANS_INSTALLMENT WHERE IS_BALANCE IS NULL 
        AND STATUS!='DELETED' AND ACCT_NUM=LI.ACCT_NUM AND nvl(active_status,'Y') ='Y') AND INSTALLMENT_SLNO &lt;=
        (SELECT MIN(INSTALLMENT_SLNO) FROM LOANS_INSTALLMENT WHERE IS_BALANCE IS NULL 
        AND STATUS!='DELETED' AND ACCT_NUM=LI.ACCT_NUM AND nvl(active_status,'Y') ='Y')+(#NO_OF_INSTALLMENT:NUMBER#-1)
        ORDER BY INSTALLMENT_SLNO
    </mapped-statement>
      <mapped-statement name ="getFromToEmiDueBasedInstallment" result-class="java.util.HashMap">
        select min(installment_slno) AS FROMIN,MAX(installment_slno) TOIN from
      (SELECT * FROM LOANS_INSTALLMENT LI WHERE ACCT_NUM=#ACCT_NUM:VARCHAR# AND STATUS!='DELETED' AND nvl(active_status,'Y') ='Y' AND IS_BALANCE IS NULL AND 
        INSTALLMENT_SLNO&gt;=(SELECT MIN(INSTALLMENT_SLNO) FROM LOANS_INSTALLMENT WHERE IS_BALANCE IS NULL 
        AND STATUS!='DELETED' AND ACCT_NUM=LI.ACCT_NUM AND nvl(active_status,'Y') ='Y') AND INSTALLMENT_SLNO &lt;=
        (SELECT MIN(INSTALLMENT_SLNO) FROM LOANS_INSTALLMENT WHERE IS_BALANCE IS NULL 
        AND STATUS!='DELETED' AND ACCT_NUM=LI.ACCT_NUM AND nvl(active_status,'Y') ='Y')+(#NO_OF_INSTALLMENT:NUMBER#-1)
        ORDER BY INSTALLMENT_SLNO)a
    </mapped-statement>
    <dynamic-mapped-statement name="getIntDetails" result-class="java.util.HashMap" >
        <!--SELECT A.DEBIT-B.CREDIT IBAL,A.DEBITPENAL-B.CREDITPENAL AS PBAL FROM (SELECT SUM(INTEREST) DEBIT ,SUM(PENAL) DEBITPENAL FROM LOAN_TRANS_DETAILS WHERE TRN_CODE = 'DI' AND ACT_NUM=#ACT_NUM#) A,
        (SELECT SUM(INTEREST) CREDIT,SUM(PENAL) CREDITPENAL FROM LOAN_TRANS_DETAILS WHERE TRN_CODE = 'C*' AND ACT_NUM=#ACT_NUM#) B -->
        SELECT 
        NVL(IBAL,0) AS IBAL,
        TRANS_SLNO,
        TRN_CODE,
        NVL(PBAL,0) AS PBAL,
        TRANS_DT,
        NVL(PRINCIPLE,0) AS PRINCIPLE,
        NVL(INTEREST,0) AS INTEREST ,
        NVL(PENAL,0) AS PENAL,
        NVL(PIBAL,0) AS PIBAL,
        NVL(EXPENSE,0) AS EXPENSE ,
        NVL(EBAL,0) AS EBAL,
        NVL(NPA_INTEREST,0) AS NPA_INTEREST,
        NVL(NPA_INT_BAL,0) AS NPA_INT_BAL,
        NVL(NPA_PENAL,0) AS NPA_PENAL,
        NVL(NPA_PENAL_BAL,0) AS NPA_PENAL_BAL,
        NVL(EXCESS_AMT,0) AS EXCESS_AMT,
        TRANS_ID
        FROM LOAN_TRANS_DETAILS WHERE TRANS_SLNO IN 
        (SELECT MAX(TRANS_SLNO) FROM LOAN_TRANS_DETAILS WHERE ACT_NUM = #ACT_NUM:VARCHAR#
            
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="AUTHORIZE_STATUS">
                    AUTHORIZE_STATUS  IN('AUTHORIZED')
                </isNotNull>
                  
            </isParameterPresent>
        </dynamic>
        )  AND ACT_NUM = #ACT_NUM:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="AUTHORIZE_STATUS">
                    AUTHORIZE_STATUS  IN('AUTHORIZED')
                </isNotNull>
            </isParameterPresent>
                
        </dynamic>
    </dynamic-mapped-statement>
          
    <mapped-statement name="deleteLTDTrans" inline-parameters="true" >
        DELETE FROM LTD_LOAN_TRANS_DETAILS WHERE ACT_NUM=#ACT_NUM:VARCHAR#
    </mapped-statement>
          
    <dynamic-mapped-statement name="getIntDetailsForLTD" result-class="java.util.HashMap" >
            <!--SELECT A.DEBIT-B.CREDIT IBAL,A.DEBITPENAL-B.CREDITPENAL AS PBAL FROM (SELECT SUM(INTEREST) DEBIT ,SUM(PENAL) DEBITPENAL FROM LOAN_TRANS_DETAILS WHERE TRN_CODE = 'DI' AND ACT_NUM=#ACT_NUM#) A,
            (SELECT SUM(INTEREST) CREDIT,SUM(PENAL) CREDITPENAL FROM LOAN_TRANS_DETAILS WHERE TRN_CODE = 'C*' AND ACT_NUM=#ACT_NUM#) B -->
        SELECT IBAL ,TRANS_DT,TRANS_SLNO,TRN_CODE,PBAL,TRANS_DT,PRINCIPLE ,INTEREST,PENAL,PIBAL,EXPENSE,EBAL,DAY_END_BALANCE,PROD_ID FROM LTD_LOAN_TRANS_DETAILS WHERE TRANS_SLNO IN 
        (SELECT MAX(TRANS_SLNO) FROM LTD_LOAN_TRANS_DETAILS WHERE ACT_NUM = #ACT_NUM:VARCHAR#
            
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="AUTHORIZE_STATUS">
                    AUTHORIZE_STATUS  IN('AUTHORIZED')
                </isNotNull>
                  
            </isParameterPresent>
        </dynamic>
        )  AND ACT_NUM = #ACT_NUM:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="AUTHORIZE_STATUS">
                    AUTHORIZE_STATUS  IN('AUTHORIZED')
                </isNotNull>
            </isParameterPresent>
                
        </dynamic>
    </dynamic-mapped-statement>
          
    <dynamic-mapped-statement name="getIntDetailsAD" result-class="java.util.HashMap" >
            <!--SELECT A.DEBIT-B.CREDIT IBAL,A.DEBITPENAL-B.CREDITPENAL AS PBAL FROM (SELECT SUM(INTEREST) DEBIT ,SUM(PENAL) DEBITPENAL FROM LOAN_TRANS_DETAILS WHERE TRN_CODE = 'DI' AND ACT_NUM=#ACT_NUM#) A,
            (SELECT SUM(INTEREST) CREDIT,SUM(PENAL) CREDITPENAL FROM LOAN_TRANS_DETAILS WHERE TRN_CODE = 'C*' AND ACT_NUM=#ACT_NUM#) B -->
        SELECT NVL(IBAL,0) AS IBAL ,TRANS_SLNO,TRN_CODE,NVL(PBAL,0) AS PBAL,TRANS_DT,NVL(PRINCIPLE,0) AS PRINCIPLE,NVL(INTEREST,0) AS INTEREST,NVL(PENAL,0) AS PENAL,NVL(PIBAL,0) AS PIBAL,EXPENSE,NVL(EBAL,0) AS EBAL,NVL(NPA_INTEREST,0) AS NPA_INTEREST,NVL(NPA_INT_BAL,0) AS NPA_INT_BAL,
        NVL(NPA_PENAL,0) AS NPA_PENAL,NVL(NPA_PENAL_BAL,0) AS NPA_PENAL_BAL ,EXCESS_AMT, TRANS_ID FROM ADV_TRANS_DETAILS WHERE TRANS_SLNO IN 
        (SELECT MAX(TRANS_SLNO) FROM ADV_TRANS_DETAILS WHERE ACT_NUM = #ACT_NUM:VARCHAR#
            
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="AUTHORIZE_STATUS">
                    AUTHORIZE_STATUS  IN('AUTHORIZED')
                </isNotNull>
                  
            </isParameterPresent>
        </dynamic>
        )  AND ACT_NUM = #ACT_NUM:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="AUTHORIZE_STATUS">
                    AUTHORIZE_STATUS  IN('AUTHORIZED')
                </isNotNull>
            </isParameterPresent>
                
        </dynamic>
    </dynamic-mapped-statement>
         
    <mapped-statement name="updateIntDetailsAD" inline-parameters="true" >
        UPDATE ADV_TRANS_DETAILS SET  PRINCIPLE =#PBAL:NUMERIC# , PBAL=#PBAL:NUMERIC#,TRANS_DT=#LAST_CALC_DT:TIMESTAMP#  
        WHERE ACT_NUM=#ACT_NUM:VARCHAR# AND TRANS_DT=#TO_DATE:TIMESTAMP#  
    </mapped-statement> 
    <mapped-statement name="getAdvPaidDetails" result-class="java.util.HashMap" >
        SELECT PRINCIPLE,INTEREST ,PENAL FROM ADV_TRANS_DETAILS WHERE 
        TRANS_ID=#TRANS_ID# AND  ACT_NUM=#ACCOUNTNO:VARCHAR#
        AND TRANS_DT = #TRANS_DT:DATE# AND
        BRANCH_ID = #INITIATED_BRANCH:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getTermLoanPaidDetails" result-class="java.util.HashMap" >
        SELECT PRINCIPLE,INTEREST ,PENAL FROM LOAN_TRANS_DETAILS WHERE TRANS_ID=#TRANS_ID:VARCHAR# 
        AND  ACT_NUM=#ACCOUNTNO:VARCHAR#
        AND TRANS_DT = #TRANS_DT:DATE# AND
        INITIATED_BRANCH = #INITIATED_BRANCH:VARCHAR#
    </mapped-statement>
          
    <mapped-statement name="getTermLoanminusPrincipal" result-class="java.util.HashMap" >
        SELECT PRINCIPLE AS PRINCIPAL_AMOUNT,INTEREST AS INTEREST_AMOUNT,PENAL AS PENUL_INTEREST_AMOUNT  
        FROM loan_trans_details WHERE ACT_NUM=#ACCOUNTNO:VARCHAR# AND TRN_CODE='C*' AND 
        PRINCIPLE+INTEREST+PENAL = #AMOUNT:NUMBER#  
    </mapped-statement>
        
    <mapped-statement name="updateAvailableBalanceLTD" result-class="java.util.HashMap" >
        UPDATE LOANS_FACILITY_DETAILS SET AVAILABLE_BALANCE=NVL(AVAILABLE_BALANCE,0)+#additionalLimit:NUMERIC# WHERE ACCT_NUM=#acctNum:VARCHAR#
    </mapped-statement>    
                
    <mapped-statement name="getPenalIntDetails" result-class="java.util.HashMap" >
        SELECT A.DEBITPENAL-B.CREDITPENAL AS PBAL FROM (SELECT SUM(PENAL) DEBITPENAL FROM LOAN_TRANS_DETAILS WHERE TRN_CODE = 'DPI' AND ACT_NUM=#ACT_NUM:VARCHAR#) A,
        (SELECT SUM(PENAL) CREDITPENAL FROM LOAN_TRANS_DETAILS WHERE TRN_CODE = 'C*' AND ACT_NUM=#ACT_NUM:VARCHAR#) B
    </mapped-statement>
    <mapped-statement name="checkTransaction" result-class="java.util.HashMap" >
        SELECT COUNT(*) AS CNT FROM LOAN_TRANS_DETAILS WHERE ACT_NUM = #ACT_NUM:VARCHAR#
            <!--AND TRN_CODE IN('C*','OLG')-->
            <!--SELECT A.CNT+B.CNT AS CNT FROM (SELECT COUNT(*) AS CNT FROM CASH_TRANS WHERE 
            ACT_NUM = #ACT_NUM# AND STATUS!='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED') A, 
            (SELECT COUNT(*) AS CNT FROM TRANSFER_TRANS WHERE 
            ACT_NUM = #ACT_NUM# AND STATUS!='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED') B-->
    </mapped-statement>
        
    <mapped-statement name="checkTransactionAD" result-class="java.util.HashMap" >
        SELECT COUNT(*) AS CNT FROM ADV_TRANS_DETAILS WHERE ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getPenalIntDetailsAD" result-class="java.util.HashMap" >
        SELECT A.DEBITPENAL-B.CREDITPENAL AS PBAL FROM (SELECT SUM(PENAL) DEBITPENAL FROM ADV_TRANS_DETAILS WHERE TRN_CODE = 'DPI' AND ACT_NUM=#ACT_NUM:VARCHAR#) A,
        (SELECT SUM(PENAL) CREDITPENAL FROM ADV_TRANS_DETAILS WHERE TRN_CODE = 'C*' AND ACT_NUM=#ACT_NUM:VARCHAR#) B
    </mapped-statement>
        
    <dynamic-mapped-statement name="getClosingAccountDetailsTL" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT LFD.prod_id, ACPROD.ACCT_HEAD as AC_HD_ID, ACHD.AC_HD_DESC,  get_cust_name(cust.cust_id) AS "Customer Name",
        ACTCLOS.ACT_NUM as ACCT_NUM, LFD.LOAN_BALANCE_PRINCIPAL, ACTCLOS.UNUSED_CHK, 
        ACTCLOS.ACT_CLOSING_CHRG, ACTCLOS.INT_PAYABLE, ACTCLOS.CHRG_DETAILS, ACTCLOS.PAYABLE_BAL  
        FROM LOANS_FACILITY_DETAILS LFD , 
        LOANS_PRODUCT ACPROD, AC_HD ACHD, CUSTOMER CUST, ACT_CLOSING ACTCLOS ,LOANS_BORROWER LB  WHERE ACTCLOS.ACT_NUM=LFD.ACCT_NUM AND 
        LFD.PROD_ID=ACPROD.PROD_ID AND   ACPROD.ACCT_HEAD=ACHD.AC_HD_ID AND  LB.CUST_ID=CUST.CUST_ID AND  LB.BORROW_NO=
        LFD.BORROW_NO AND
        ACTCLOS.ACT_NUM=#ACT_NUM:VARCHAR# AND ACTCLOS.AUTHORIZE_STATUS IS NULL
        <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "DELETED">
                    ACTCLOS.STATUS = 'DELETED'
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>    
    </dynamic-mapped-statement> 
        
    <mapped-statement name="getDueDetails" result-class="java.util.HashMap" >
        SELECT DISTINCT(LI.ACCT_NUM), PRINCIPAL_AMT FROM 
        LOANS_INSTALLMENT LI,LOANS_FACILITY_DETAILS LFD , LOAN_TRANS_DETAILS LTD WHERE  LFD.ACCT_STATUS !='CLOSED'
        AND LI.INSTALLMENT_DT=#CURR_DATE:DATE# AND LTD.EXCESS_AMT!=0 AND LFD.BRANCH_ID=#BRANCH_ID:VARCHAR# AND (active_status,'Y') ='Y'
    </mapped-statement>
        
    <mapped-statement name="TermLoanChargescustomerName" result-class="java.util.HashMap" >        
        SELECT 
        <!--get_cust_name(C.CUST_ID) AS "Name",-->
        DECODE(C.CUST_TYPE,'INDIVIDUAL',concat(C.FNAME,C.MNAME, C.LNAME),C.COMP_NAME) AS "Name",
        LFD.ACCT_NUM,C.CUST_ID,
        C.AUTHORIZE_STATUS FROM CUSTOMER C,LOANS_BORROWER LB,LOANS_FACILITY_DETAILS LFD WHERE C.CUST_ID = LB.CUST_ID AND
        LFD.BORROW_NO = LB.BORROW_NO
        AND LFD.ACCT_NUM = #ACCOUNTNO:VARCHAR# AND LFD.ACCT_STATUS !='CLOSED'
        AND LFD.PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getDepositBehavesforLoan" result-class="java.util.HashMap" >   
        SELECT BEHAVES_LIKE,LOAN_BALANCE_PRINCIPAL,MATURITY_DT FROM DEPOSITS_PRODUCT DP, DEPOSIT_LIEN DL,LOANS_FACILITY_DETAILS LFD ,DEPOSIT_ACINFO DA,
        DEPOSIT_SUB_ACINFO DSA 
        WHERE DP.STATUS !='DELETED'  AND LFD.ACCT_NUM=DL.LIEN_AC_NO AND DL.LIEN_AC_NO=#ACCT_NUM:VARCHAR#
        AND DA.PROD_ID =DP.PROD_ID AND LFD.STATUS !='DELETED'AND DA.DEPOSIT_NO=DL.DEPOSIT_NO
        AND DSA.DEPOSIT_NO =DA.DEPOSIT_NO AND DSA.AUTHORIZE_STATUS='AUTHORIZED'     
            
            <!--
            SELECT BEHAVES_LIKE,LOAN_BALANCE_PRINCIPAL FROM DEPOSITS_PRODUCT DP, DEPOSIT_LIEN DL,LOANS_FACILITY_DETAILS LFD ,DEPOSIT_ACINFO DSA
            WHERE DP.STATUS !='DELETED'  AND LFD.ACCT_NUM=DL.LIEN_AC_NO AND DL.LIEN_AC_NO=#ACCT_NUM#
            AND DSA.PROD_ID =DP.PROD_ID AND LFD.STATUS !='DELETED'AND DSA.DEPOSIT_NO=DL.DEPOSIT_NO  --><!--AND LFD.BRANCH_ID=#BRANCH_ID# AND
            LFD.BRANCH_ID=DSA.BRANCH_ID-->
    </mapped-statement>
    
    <mapped-statement name="getExpiryDateForDepositLoan" result-class="java.util.HashMap" >
        SELECT lfd.acct_num, lsd.to_dt as MATURITY_DT   FROM loans_facility_details lfd, loans_sanction_details lsd
        WHERE lsd.borrow_no = lfd.borrow_no   AND lfd.status != 'CLOSED'
        AND lfd.authorize_status_1 = 'AUTHORIZED'   AND lfd.acct_num = #ACCT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getLoanacctOpenDt" result-class="java.util.HashMap" >        
        SELECT ACCT_OPEN_DT,TEMP_LAST_INT_CALC_DT,LAST_INT_CALC_DT FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM=#ACCT_NUM:VARCHAR# AND STATUS !='DELETED'
    </mapped-statement>
        
    <mapped-statement name="updateRetraspectiveBatchId" result-class="java.util.HashMap"> 
        UPDATE LOANS_FACILITY_DETAILS SET AUTHORIZE_REMARKS_2 =#BATCH_ID:VARCHAR#,AUTHORIZE_DT_2=#RETRASPECTIVE_APP_DT:DATE# 
        WHERE ACCT_NUM=#ACT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="selectRetraspectiveBatchId" result-class="java.util.HashMap"> 
        SELECT AUTHORIZE_DT_2 FROM LOANS_FACILITY_DETAILS 
        WHERE ACCT_NUM=#ACT_NUM:VARCHAR# AND AUTHORIZE_REMARKS_2=#BATCH_ID:VARCHAR#
    </mapped-statement>
        
        
    <mapped-statement name="selectLoansInstallmentTL" result-class="java.util.LinkedHashMap"> 
        SELECT INSTALLMENT_SLNO,TO_CHAR(INSTALLMENT_DT,'DD-MM-YYYY'), PRINCIPAL_AMT,INTEREST_AMT,TOTAL_AMT,'', BALANCE_AMT, ACTIVE_STATUS   
        FROM LOANS_INSTALLMENT WHERE ACCT_NUM=#ACCT_NUM# AND SCHEDULE_ID= CAST(#SCHEDULE_ID# AS NUMERIC) ORDER BY INSTALLMENT_SLNO
    </mapped-statement>
        
    <mapped-statement name="selectLoansInstallmentEMITL" result-class="java.util.LinkedHashMap"> 
        SELECT INSTALLMENT_SLNO,TO_CHAR(TO_DATE(INSTALLMENT_DT,'DD-MM-YYYY')), PRINCIPAL_AMT,INTEREST_AMT,TOTAL_AMT, BALANCE_AMT, ACTIVE_STATUS   
        FROM LOANS_INSTALLMENT WHERE ACCT_NUM=#ACCT_NUM# AND SCHEDULE_ID= #SCHEDULE_ID# ORDER BY INSTALLMENT_SLNO
    </mapped-statement>
    <dynamic-mapped-statement name="LoanNotAcctList" result-class="java.util.LinkedHashMap">
        <dynamic>
            <isEqual property="PRODUCT_TYPE" compareValue="TL" >
                SELECT ACCT_NUM AS ACT_NUM, PROD_ID, LB.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM LOANS_BORROWER LB, LOANS_FACILITY_DETAILS LF, CUSTOMER C,CUST_ADDR CA WHERE 
                LB.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND LB.BORROW_NO = LF.BORROW_NO AND
                LB.CUST_ID = C.CUST_ID AND LB.STATUS!='DELETED' AND LF.STATUS!='DELETED' 
                AND PROD_ID=#PRODUCT_ID:VARCHAR#
                AND PROD_ID NOT IN (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE ='OD' )
                AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
                 <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="ACT_NUM">
                    UPPER(ACCT_NUM) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
                 <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(LB.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="ADDRESS">
                    UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                </isNotNull>
            </isParameterPresent>
            </isEqual>
            <isEqual property="PRODUCT_TYPE" compareValue="TD" >
                SELECT DEPOSIT_NO AS ACT_NUM, PROD_ID, DA.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME,
                STREET||', '|| AREA||', '||CITY AS ADDRESS
                FROM DEPOSIT_ACINFO DA, CUSTOMER C,CUST_ADDR CA WHERE DA.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR# AND  PROD_ID=#PRODUCT_ID:VARCHAR# AND
                DA.CUST_ID = C.CUST_ID AND DA.STATUS!='DELETED' AND CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE=C.COMM_ADDR_TYPE
                     <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="ACT_NUM">
                    UPPER(DEPOSIT_NO) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
                 <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(DA.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUST_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="ADDRESS">
                    UPPER(STREET||', '|| AREA||', '||CITY) LIKE UPPER('%$ADDRESS$%')
                </isNotNull>
            </isParameterPresent>
            </isEqual>
        </dynamic>
    </dynamic-mapped-statement>
    
    <mapped-statement name="updateLoansInstallmentTL" result-class="java.util.HashMap"> 
        UPDATE LOANS_INSTALLMENT LI SET ACTIVE_STATUS= 'N' WHERE SCHEDULE_ID=(SELECT MAX(SCHEDULE_NO) From
        LOANS_REPAY_SCHEDULE WHERE ACCT_NUM=LI.ACCT_NUM AND LI.SCHEDULE_ID =SCHEDULE_NO)AND ACCT_NUM=#ACCT_NUM:VARCHAR#
        AND INSTALLMENT_DT&gt;=#CURR_DT:DATE# AND SCHEDULE_ID=#SCHEDULE_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="updateLoansInstallmentInTermLoanEMI" result-class="java.util.HashMap"> 
        UPDATE LOANS_INSTALLMENT LI SET ACTIVE_STATUS= 'N' WHERE SCHEDULE_ID=(SELECT MAX(SCHEDULE_NO) From
        LOANS_REPAY_SCHEDULE WHERE ACCT_NUM=LI.ACCT_NUM AND LI.SCHEDULE_ID =SCHEDULE_NO)AND ACCT_NUM=#ACCT_NUM:VARCHAR#
        AND SCHEDULE_ID=#SCHEDULE_ID:VARCHAR#
    </mapped-statement>
     
    <mapped-statement name="updateLoansInstallmentRejectTL" result-class="java.util.HashMap"> 
        UPDATE LOANS_INSTALLMENT LI SET ACTIVE_STATUS= 'Y' WHERE SCHEDULE_ID=(SELECT MAX(SCHEDULE_NO) From
        LOANS_REPAY_SCHEDULE WHERE ACCT_NUM=LI.ACCT_NUM AND REPAY_ACTIVE ='N' )AND ACCT_NUM=#ACCT_NUM:VARCHAR#
        AND INSTALLMENT_DT&gt;=#CURR_DT:DATE#
    </mapped-statement>

     
    <mapped-statement name="updateRepaymentRejectTL" result-class="java.util.HashMap"> 
        UPDATE LOANS_REPAY_SCHEDULE LI SET REPAY_ACTIVE= 'Y',SCHEDULE_MODE='REGULAR' WHERE SCHEDULE_NO=(SELECT MAX(SCHEDULE_NO) From
        LOANS_REPAY_SCHEDULE WHERE ACCT_NUM=LI.ACCT_NUM AND REPAY_ACTIVE ='N' )AND ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
     
    <mapped-statement name="updateLoansInstallmentNewRejectTL" result-class="java.util.HashMap"> 
        UPDATE LOANS_INSTALLMENT LI SET STATUS= 'DELETED' WHERE SCHEDULE_ID=(SELECT MAX(SCHEDULE_NO) From
        LOANS_REPAY_SCHEDULE WHERE ACCT_NUM=LI.ACCT_NUM  )AND ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
     
    <mapped-statement name="updateRepaymentNewRejectTL" result-class="java.util.HashMap"> 
        UPDATE LOANS_REPAY_SCHEDULE LI SET STATUS= 'DELETED' WHERE SCHEDULE_NO=(SELECT MAX(SCHEDULE_NO) From
        LOANS_REPAY_SCHEDULE WHERE ACCT_NUM=LI.ACCT_NUM  )AND ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>          
        
    <mapped-statement name="updateRestructringInstallment"  result-class="java.util.HashMap" >  
        <!-- TRANS ID USE AS REPAY ACTIVE STATUS IN LOANS_INSTALLMENT TABLE -->      
        UPDATE LOANS_INSTALLMENT SET TRANS_ID='Y'  WHERE  INSTALLMENT_DT &lt;(SELECT MIN(INSTALLMENT_DT)  FROM  
        LOANS_INSTALLMENT WHERE ACCT_NUM =#ACCT_NUM:VARCHAR# AND STATUS !='DELETED' AND SCHEDULE_ID=(SELECT MAX(SCHEDULE_NO) FROM 
        LOANS_REPAY_SCHEDULE  WHERE ACCT_NUM=#ACCT_NUM:VARCHAR# AND STATUS !='DELETED' AND REPAY_ACTIVE ='Y') ) AND 
        SCHEDULE_ID=(SELECT MAX(SCHEDULE_NO) FROM 
        LOANS_REPAY_SCHEDULE  WHERE ACCT_NUM=#ACCT_NUM:VARCHAR# AND STATUS !='DELETED' AND REPAY_ACTIVE ='N')  AND 
        ACCT_NUM=#ACCT_NUM:VARCHAR# AND STATUS !='DELETED'
    </mapped-statement>
        
    <mapped-statement name="updateReschduleStatus"  result-class="java.util.HashMap" >  
        UPDATE LOANS_REPAY_SCHEDULE SET REPAY_ACTIVE ='Y'  WHERE 
        SCHEDULE_NO=(SELECT MAX(SCHEDULE_NO) FROM LOANS_REPAY_SCHEDULE
        WHERE ACCT_NUM=#ACCT_NUM:VARCHAR# AND STATUS !='DELETED' AND  REPAY_ACTIVE ='N')
        AND ACCT_NUM=#ACCT_NUM:VARCHAR# AND STATUS !='DELETED' AND
        REPAY_ACTIVE ='N'
    </mapped-statement>
        
    <mapped-statement name="updateInstallmentStatus"  result-class="java.util.HashMap" >  
        UPDATE LOANS_INSTALLMENT SET STATUS ='DELETED' WHERE 
        SCHEDULE_ID=(SELECT MAX(SCHEDULE_ID) FROM LOANS_INSTALLMENT 
        WHERE ACCT_NUM=#ACCT_NUM:VARCHAR#
        AND STATUS !='DELETED') AND ACCT_NUM=#ACCT_NUM:VARCHAR# AND STATUS !='DELETED'
    </mapped-statement>
        
    <mapped-statement name="insertTermLoanDisburstTO"  inline-parameters="true">
        INSERT INTO LOANS_DISBURST_DETAILS(ACCT_NUM , DISBURST_DT,DISBURST_STAGE , 
        DISBURST_AMT_RS,DISBURST_AMT ,  
        DISBURST_AMT_YES_NO,SLNO,STATUS ,REMARKS)VALUES
        (#acctNum:VARCHAR#,#disburstDt:DATE#,#disburstStage:VARCHAR#,#subLimitAmtRs:NUMERIC#,
        #subLimitAmt:NUMERIC#,#disburstAmt_yes_no:VARCHAR#,#slno:VARCHAR#,#status:VARCHAR#,#remarks:VARCHAR#)	  
    </mapped-statement>
        
    <mapped-statement name="updateTermLoanDisburstTO" inline-parameters="true">
        UPDATE LOANS_DISBURST_DETAILS SET
              
        DISBURST_DT=#disburstDt:DATE#,
        DISBURST_STAGE=#disburstStage:VARCHAR# , 
        DISBURST_AMT_RS=#subLimitAmtRs:NUMERIC#,
        DISBURST_AMT=#subLimitAmt:NUMERIC# ,  
        DISBURST_AMT_YES_NO=#disburstAmt_yes_no:VARCHAR#,
        SLNO=#slno:VARCHAR#,
        STATUS=#status:VARCHAR# ,
        REMARKS=#remarks:VARCHAR#
		
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
        AND SLNO=#slno:VARCHAR#
    </mapped-statement>

	<!-- Use TermLoanOtherDetailsTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteTermLoanDisburstTO" inline-parameters="true">
        UPDATE LOANS_DISBURST_DETAILS SET 
        STATUS = #status:VARCHAR#, 
        STATUS_BY = #statusBy:VARCHAR#, 
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACT_NUM = #actNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanOtherDetailsTO object (JavaBean) properties -->
    <result-map name="getTermLoanDisburstTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanDisburstTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="disburstDt" column="DISBURST_DT"/>
        <property name="disburstStage" column="DISBURST_STAGE"/>
        <property name="subLimitAmtRs" column="DISBURST_AMT_RS"/>
        <property name="disburstAmt_yes_no" column="DISBURST_AMT_YES_NO"/>
        <property name="subLimitAmt" column="DISBURST_AMT"/>
        <property name="slno" column="SLNO"/>
        <property name="status" column="STATUS"/>
        <property name="remarks" column="REMARKS"/>
		
    </result-map>
    <mapped-statement name="getSelectTermLoanDisburstTO" result-map="getTermLoanDisburstTOResult" >
        SELECT * FROM LOANS_DISBURST_DETAILS 
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY SLNO
    </mapped-statement>
        
        
    <mapped-statement name="insertTermLoanFacilityExtnTO"  inline-parameters="true">
        INSERT INTO LOANS_EXTN_FACILITY_DETAILS(ACCT_NUM , DISBURSEMENT_MODE,REFERAL_CODE , 
        SOURCE_CODE)VALUES
        (#acctNum:VARCHAR#,#disbursementMode:VARCHAR#,#referalCode:VARCHAR# ,#sourceCode:VARCHAR#)
            
    </mapped-statement>
        
    <mapped-statement name="updateTermLoanFacilityExtnTO" inline-parameters="true">
        UPDATE LOANS_EXTN_FACILITY_DETAILS  SET
        DISBURSEMENT_MODE=#disbursementMode:VARCHAR#,
        REFERAL_CODE=#referalCode:VARCHAR#, 
        SOURCE_CODE=#sourceCode:VARCHAR#
        WHERE ACCT_NUM = #acctNum:VARCHAR# 
    </mapped-statement>

	
	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to TermLoanOtherDetailsTO object (JavaBean) properties -->
    <result-map name="getTermLoanFacilityExtnTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanExtenFacilityDetailsTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="disbursementMode" column="DISBURSEMENT_MODE"/>
        <property name="referalCode" column="REFERAL_CODE"/>
        <property name="sourceCode" column="SOURCE_CODE"/>
    </result-map>
        
    <mapped-statement name="getSelectTermLoanFacilityExtnTO" result-map="getTermLoanFacilityExtnTOResult" >
        SELECT * FROM LOANS_EXTN_FACILITY_DETAILS 
        WHERE ACCT_NUM = #value:VARCHAR#
    </mapped-statement>
 <!--   <mapped-statement name="updateSecurityDetails" result-class="java.util.HashMap" >
        UPDATE SECURITY_DETAILS SET PARTICULARS =#PARTICULARS:VARCHAR#,APPRAISER_ID=#APP_ID:VARCHAR#,
        TOTAL_SECURITY_VALUE=#TOTAL:VARCHAR#
        WHERE ACCT_NUM=#ACT_NUM:VARCHAR# 
    </mapped-statement>-->
    <dynamic-mapped-statement name="updateSecurityDetails" result-class="java.util.HashMap">
        UPDATE SECURITY_DETAILS SET PARTICULARS =#PARTICULARS:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="," property="APP_ID">
                    APPRAISER_ID=#APP_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="," property="TOTAL_SECURITY_VALUE">
                    TOTAL_SECURITY_VALUE=#TOTAL:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        WHERE ACCT_NUM=#ACT_NUM:VARCHAR# 
    </dynamic-mapped-statement>
    <mapped-statement name="insertGoldLoanSecurityTO" inline-parameters="true">
        
        INSERT INTO SECURITY_DETAILS
        (SL_NO,ACCT_NUM,AS_ON,GROSS_WEIGHT,NET_WEIGHT,PURITY,MARKET_RATE,SECURITY_VALUE,TOTAL_SECURITY_VALUE,MARGIN,MARGIN_AMT,ELIGIBLE_LOAN_AMT,
        APPRAISER_ID,PARTICULARS,STATUS,STATUS_DT,STATUS_BY,AUTHORIZE_STATUS,AUTHORIZE_BY,AUTHORIZE_DT,NOOF_PACKET
        ) VALUES (
        #slNo#,#acctNum:VARCHAR#,#asOn:DATE#,#grossWeight#,#netWeight#,#purity:NUMERIC#,#marketRate:NUMERIC#,#securityValue:NUMERIC#,
        #totalSecurityValue:NUMERIC#,#margin:NUMERIC#,#marginAmt:NUMERIC#,#eligibleLoanAmt:NUMERIC#,#appraiserId:VARCHAR#,#particulars:VARCHAR#,
        #status:VARCHAR#,#statusDt:DATE#,#statusBy:VARCHAR#,#authorizeStatus:VARCHAR#,#authorizeBy:VARCHAR#,#authorizeDt:DATE#,#noofPacket# )
   
    </mapped-statement>
	
    <mapped-statement name="updateGoldLoanSecurityTO" inline-parameters="true">
        UPDATE SECURITY_DETAILS SET
        SL_NO = #slNo#,
        AS_ON = #asOn:DATE#,
        GROSS_WEIGHT = #grossWeight#,
        NET_WEIGHT = #netWeight#,
        PURITY = #purity:NUMERIC#,
        MARKET_RATE = #marketRate:NUMERIC#,
        SECURITY_VALUE = #securityValue:NUMERIC#,
        TOTAL_SECURITY_VALUE = #totalSecurityValue:NUMERIC#,
        MARGIN = #margin:NUMERIC#,
        MARGIN_AMT = #marginAmt:NUMERIC#,
        ELIGIBLE_LOAN_AMT = #eligibleLoanAmt:NUMERIC#,
        APPRAISER_ID = #appraiserId:VARCHAR#,
        PARTICULARS = #particulars:VARCHAR#, 
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#,
        NOOF_PACKET = #noofPacket#
        WHERE ACCT_NUM = #acctNum:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="authorizeGoldLoanSecurityTO" inline-parameters="true">
        UPDATE SECURITY_DETAILS SET
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        AUTHORIZE_BY = #authorizeBy:VARCHAR#,
        AUTHORIZE_DT =#authorizeDt:DATE#
        WHERE ACCT_NUM=#acctNum:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getSelectProductLevelDocDetails" result-class="java.util.HashMap">
        SELECT * FROM LOANS_PROD_DOC WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
        
    <result-map name="getGoldLoanSecurityTOResult" class="com.see.truetransact.transferobject.termloan.GoldLoanSecurityTO">
        <property name="slNo" column="SL_NO"/>
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="asOn" column="AS_ON"/>
        <property name="grossWeight" column="GROSS_WEIGHT"/>
        <property name="netWeight" column="NET_WEIGHT"/>
        <property name="purity" column="PURITY"/>
        <property name="marketRate" column="MARKET_RATE"/>
        <property name="securityValue" column="SECURITY_VALUE"/>
        <property name="totalSecurityValue" column="TOTAL_SECURITY_VALUE"/>
        <property name="margin" column="MARGIN"/>
        <property name="marginAmt" column="MARGIN_AMT"/>
        <property name="eligibleLoanAmt" column="ELIGIBLE_LOAN_AMT"/>
        <property name="appraiserId" column="APPRAISER_ID"/>
        <property name="particulars" column="PARTICULARS"/>
        <property name="noofPacket" column="NOOF_PACKET"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
    </result-map>
        
    <mapped-statement name="getSelectGoldLoanSecurityTO" result-map="getGoldLoanSecurityTOResult">
        SELECT * FROM SECURITY_DETAILS 
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') ORDER BY TO_NUMBER(SL_NO)
    </mapped-statement>
        
    <mapped-statement name="getSelectAcctLevelDocDetails" result-class="java.util.HashMap">
        SELECT * FROM LOANS_PROD_DOC WHERE STATUS!='DELETED' AND PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
        
    <dynamic-mapped-statement name="getSelectAppraiserId" result-class="java.util.HashMap">
        <!--SELECT get_cust_name(C.CUST_ID) AS EMPLOYEE_NAME,EMPLOYEE_CODE,BRANCH_CODE FROM BANK_EMPLOYEE WHERE DEPTT_ID = 'Appr'-->
        SELECT  LTRIM(coalesce(TITLE,'')||' '||FNAME||coalesce(LNAME,'')) AS EMPLOYEE_NAME,ED.EMPLOYEEID,CU.BRANCH_CODE FROM EMPLOYEE_OTHER_DETAILS ED,CUSTOMER CU 
        WHERE ED.DESIG_ID = 'Appr' AND CU.STAFF_ID = ED.EMPLOYEEID
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="EMPLOYEE_CODE">
                    ED.EMPLOYEEID = #EMPLOYEE_CODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="TermLoan.getAcctProdHead" result-class="java.util.LinkedHashMap">
        SELECT LP.ACCT_HEAD AS "AC_HEAD"  ,DEP_ELIGIBLE_LOAN_AMT,DEPOSIT_ROUNDOFF FROM LOANS_PRODUCT LP,LOANS_PROD_INTCALC LPI,
        LOANS_FACILITY_DETAILS LFD WHERE LFD.PROD_ID = LP.PROD_ID AND LFD.PROD_ID = LPI.PROD_ID AND LP.PROD_ID=LPI.PROD_ID AND 
        LFD.ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="TermLoan.getGoldLoanProdIDs" result-class="java.util.HashMap">
        SELECT PROD_ID, PROD_DESC,AUTHORIZE_STATUS,AUTHORIZE_REMARK,'Term Loan' AS "TERMLOAN" FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK = 'GOLD_LOAN'
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
		<!-- AND AUTHORIZE_STATUS = 'AUTHORIZED' -->
    </mapped-statement>
    <mapped-statement name="getGoldLoanProductIDs" result-class="java.util.HashMap">
        SELECT PROD_ID as KEY, PROD_DESC as VALUE FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK = 'GOLD_LOAN'
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
		<!-- AND AUTHORIZE_STATUS = 'AUTHORIZED' -->
    </mapped-statement>
        
    <mapped-statement name="getNewCustomerDetails" result-class="java.util.HashMap">
        SELECT CUST_ID AS "Customer ID", get_cust_name(CUSTOMER.CUST_ID) AS "Name" FROM CUSTOMER WHERE CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getSelectMarginPercentage" result-class="java.util.HashMap">
        SELECT DEP_ELIGIBLE_LOAN_AMT, MAX_PERIOD FROM LOANS_PROD_INTCALC WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getSelectAppraiserRate" result-class="java.util.HashMap">
        SELECT PERCENTAGE,SERVICE_TAX,AMOUNT FROM APPRAISER_COMMISION_DETAILS ACD,BRANCH_GROUP_DETAILS BGD WHERE 
        ACD.GROUP_ID=BGD.BRANCH_GROUP_ID AND BGD.BRANCH_ID= #BRANCH_CODE:VARCHAR# AND #AMOUNT:NUMBER# BETWEEN FROM_AMT AND TO_AMT 
        AND ((#TODAYS_DATE:DATE# BETWEEN FROM_DATE AND TO_DATE) OR (FROM_DATE&lt;=#TODAYS_DATE:DATE# AND TO_DATE IS NULL))
    </mapped-statement>
            
    <dynamic-mapped-statement name="getCashTransLoanAuthDetails" result-class="java.util.HashMap">
           <!-- SELECT * FROM CASH_TRANS WHERE STATUS != 'DELETED' AND TRANS_DT = #CURR_DT# AND LINK_BATCH_ID = #LOAN_NO# AND AUTHORIZE_STATUS = 'AUTHORIZED' ORDER BY TRANS_ID -->
        SELECT C.TRANS_ID, AH.AC_HD_DESC AS AC_HD_ID, C.ACT_NUM, C.INP_AMOUNT, C.INP_CURR, C.AMOUNT, C.TRANS_DT, C.TRANS_TYPE, C.INST_TYPE, C.INST_DT, 
        C.TOKEN_NO, C.INIT_TRANS_ID, C.INIT_CHANN_TYPE, C.PARTICULARS, C.STATUS, C.INSTRUMENT_NO1, 
        C.INSTRUMENT_NO2, C.AVAILABLE_BALANCE, C.PROD_ID, C.PROD_TYPE, C.AUTHORIZE_STATUS, 
        C.AUTHORIZE_BY, C.AUTHORIZE_DT, C.AUTHORIZE_REMARKS, C.STATUS_BY, C.BRANCH_ID, 
        C.STATUS_DT, C.LINK_BATCH_ID, C.INITIATED_BRANCH, C.LINK_BATCH_DT, C.PAYMENT_STATUS, 
        C.PAYMENT_BY, C.PAYMENT_STATUS_DT, C.PAN_NUMBER, C.AUTHORIZE_STATUS_2, C.AUTHORIZE_BY_2, 
        C.AUTHORIZE_DT_2, C.LOAN_HIERARCHY, C.NARRATION, C.SCREEN_NAME, C.SHIFT, 
        C.TRANS_ALL_ID, 
        C.SINGLE_TRANS_ID,C.GL_TRANS_ACT_NUM, C.TRANS_MOD_TYPE FROM CASH_TRANS C
        JOIN AC_HD AH ON C.AC_HD_ID=AH.AC_HD_ID 
        WHERE C.STATUS != 'DELETED' AND C.TRANS_DT = #CURR_DT# AND C.LINK_BATCH_ID = #LOAN_NO:VARCHAR# 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property ="AUTH_STATUS">
                    (C.AUTHORIZE_STATUS IS NULL  OR C.AUTHORIZE_STATUS!='REJECTED')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY C.TRANS_ID
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="getTransferTransLoanAuthDetails" result-class="java.util.HashMap">
            <!-- SELECT * FROM TRANSFER_TRANS WHERE STATUS != 'DELETED' AND TRANS_DT = #CURR_DT# AND LINK_BATCH_ID = #LOAN_NO# AND AUTHORIZE_STATUS = 'AUTHORIZED' ORDER BY TRANS_ID -->
        SELECT T.TRANS_ID, T.BATCH_ID,AH.AC_HD_DESC AS AC_HD_ID,T.ACT_NUM,T.INP_AMOUNT,T.
        INP_CURR,T.AMOUNT,T.TRANS_DT,T.TRANS_TYPE,T.INST_TYPE,T.
        INST_DT,T.INIT_TRANS_ID,T.INIT_CHANN_TYPE,T.PARTICULARS,T.STATUS,T.
        INSTRUMENT_NO1,T.INSTRUMENT_NO2,T.PROD_ID,T.AUTHORIZE_STATUS,T.AUTHORIZE_BY,T.
        AUTHORIZE_DT,T.AUTHORIZE_REMARKS,T.STATUS_BY,T.BRANCH_ID,T.STATUS_DT,T.
        PROD_TYPE,T.LINK_BATCH_ID,T.LINK_BATCH_DT,T.TRANS_MODE,T.INITIATED_BRANCH,T.
        LOAN_HIERARCHY,T.AUTHORIZE_STATUS_2,T.NARRATION,T.SHIFT,T.
        TRANS_ALL_ID,T.REC_MODE,T.
        SINGLE_TRANS_ID,T.AUTHORIZE_BY_2,T.GL_TRANS_ACT_NUM,T.TRANS_MOD_TYPE FROM TRANSFER_TRANS T
        JOIN AC_HD AH ON AH.AC_HD_ID=T.AC_HD_ID 
        WHERE T.STATUS != 'DELETED' AND T.TRANS_DT = #CURR_DT# AND T.LINK_BATCH_ID = #LOAN_NO:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property ="AUTH_STATUS">
                    (T.AUTHORIZE_STATUS IS NULL  OR (T.AUTHORIZE_STATUS!='REJECTED' AND T.AUTHORIZE_STATUS!='AUTHORIZED' ))
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY T.TRANS_ID
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="getCustomerAuthPermission" result-class="java.util.HashMap">
        SELECT CUSTOMER_SCREEN_AUTH FROM LOANS_PROD_INTCALC WHERE PROD_ID = #PROD_ID# AND CUSTOMER_SCREEN_AUTH = 'Y'
    </dynamic-mapped-statement>
        
    <mapped-statement name="deleteGoldLoanSecurityTO" inline-parameters="true">
        UPDATE SECURITY_DETAILS SET STATUS = #status:VARCHAR#, STATUS_BY = #statusBy:VARCHAR#, STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
            
    <dynamic-mapped-statement name="getRepaymentPeriod" result-class="java.util.HashMap">
        SELECT MIN_PERIOD,MAX_PERIOD FROM LOANS_PROD_INTCALC WHERE PROD_ID = #PROD_ID:VARCHAR#
    </dynamic-mapped-statement>
        
        
    <mapped-statement name="insertTermLoanCaseDetailTO" inline-parameters="true">
        INSERT INTO TERM_LOAN_CASE_DETAILS
        (ACT_NUM, CASE_STATUS, CASE_NO, FILING_DT, FILING_FEES, MISC_CHARGES,STATUS
        ) VALUES (
        #actNum:VARCHAR#, #caseStatus:VARCHAR#, #caseNo:VARCHAR#, #fillingDt:DATE#, #fillingFees:NUMERIC#, #miscCharges:NUMERIC#, #status:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="updateTermLoanCaseDetailTO" inline-parameters="true">
        UPDATE TERM_LOAN_CASE_DETAILS SET 
        CASE_NO = #caseNo:VARCHAR#,
        FILING_DT = #fillingDt:DATE#,
        FILING_FEES = #fillingFees:NUMERIC#,
        MISC_CHARGES = #miscCharges:NUMERIC#,
        STATUS   =#status:VARCHAR#
        WHERE ACT_NUM = #actNum:VARCHAR# AND CASE_STATUS = #caseStatus:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteTermLoanCaseDetailTO" inline-parameters="true">
        DELETE TERM_LOAN_CASE_DETAILS  WHERE ACT_NUM = #actNum:VARCHAR# AND CASE_STATUS = #caseStatus:VARCHAR# 
    </mapped-statement>
        
    <result-map name="getTermLoanCaseDetailTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanCaseDetailTO">
        <property name="actNum" column="ACT_NUM"/>
        <property name="caseStatus" column="CASE_STATUS"/>
        <property name="caseNo" column="CASE_NO"/>
        <property name="fillingDt" column="FILING_DT"/>
        <property name="fillingFees" column="FILING_FEES"/>
        <property name="miscCharges" column="MISC_CHARGES"/>
        <property name="status" column="STATUS"/>
        <property name="authStatus" column="AUTHOIZE_STATUS"/>
        <property name="authDate" column="AUTHORIZE_DATE"/>
        <property name="authBy" column="AUTHOIRZE_BY"/>
    </result-map>
        
    <mapped-statement name="getSelectTermLoanCaseDetailTO" result-map="getTermLoanCaseDetailTOResult" >
        SELECT * FROM TERM_LOAN_CASE_DETAILS WHERE ACT_NUM = #value:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getSelectTermLoanCaseDetail" result-class="java.util.HashMap">
        SELECT * FROM TERM_LOAN_CASE_DETAILS WHERE ACT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="insertTermLoanChargeDetails" inline-parameters="true">
        INSERT INTO LOANS_ACCT_CHARGE_DETAILS
        (ACT_NUM,CHARGE_TYPE,CHARGE_DATE,AMOUNT,CHARGE_NO  
        ) VALUES (
        #actNum:VARCHAR#,#caseStatus:VARCHAR#,#fillingDt:DATE#,#miscCharges:NUMERIC#,#caseNo:VARCHAR#)
    </mapped-statement>
        
    <dynamic-mapped-statement name="getSelectTermLoanChargeList" result-class="java.util.HashMap">
        SELECT * FROM LOANS_ACCT_CHARGE_DETAILS WHERE ACT_NUM = #act_num:VARCHAR# AND CHARGE_TYPE = #charge_Type:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property ="screenName">
                SCREEN_NAME = #screenName:VARCHAR#  AND  AUTHORIZE_STATUS='AUTHORIZED'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="updateChargeNoCostFromTermLoanAcctCharge" result-class="java.util.HashMap">
        UPDATE TERM_LOAN_CASE_DETAILS SET FILE_CHARGE_NO = #CHARGE_NO:VARCHAR# 
        WHERE FILING_FEES=#AMOUNT:NUMBER# AND ACT_NUM=#ACT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateChargeNoExpFromTermLoanAcctCharge" result-class="java.util.HashMap">
        UPDATE TERM_LOAN_CASE_DETAILS SET MISC_CHARGE_NO =#CHARGE_NO:VARCHAR# 
        WHERE MISC_CHARGES=#AMOUNT# AND ACT_NUM=#ACT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateCaseAuthDetails" result-class="java.util.HashMap">
        UPDATE TERM_LOAN_CASE_DETAILS SET AUTHOIZE_STATUS=#AUTHORIZESTATUS:VARCHAR#,AUTHOIRZE_BY=#USER_ID:VARCHAR#,AUTHORIZE_DATE =#AUTHORIZEDT:DATE#
        WHERE ACT_NUM=#ACT_NUM:VARCHAR# AND AUTHOIZE_STATUS IS NULL AND (STATUS IS NULL OR STATUS !='DELETED')
    </mapped-statement>
    <mapped-statement name="insertKccRenewalDetailsTO" inline-parameters="true">
        INSERT INTO KCC_RENEWAL_DETAILS
        (ACT_NUM,FROM_DT,TO_DT,STATUS,BRANCH,STATUS_DT,RENEWAL_ID,IS_RISK_FUND_PROCESSED  
        ) VALUES (
        #actNum:VARCHAR#,#fromDt:DATE#,#toDt:DATE#,#status:VARCHAR#,#branchID:VARCHAR#,#statusDt:DATE#,#renewalId:VARCHAR#,#riskFundProcessStatus:VARCHAR2#)
    </mapped-statement>
        
        
        
 <!--       <mapped-statement name="getTermLoanCaseChargePaidAmount" result-class="java.util.HashMap">
            SELECT sum(FILING_FEES -NVL(PAID_FILING_FEES,0)) AS FILING_FEES,sum(MISC_CHARGES -NVL(PAID_MISC_FEES,0)) AS MISC_CHARGES, CASE_STATUS FROM TERM_LOAN_CASE_DETAILS WHERE ACT_NUM=#ACT_NUM# 
            AND((FILING_FEES !=NVL(PAID_FILING_FEES,0)) OR (MISC_CHARGES !=NVL(PAID_MISC_FEES,0))) 
            group  by case_status
	</mapped-statement>
        
        <mapped-statement name="getSelectTermLoanCaseChargeDetails" result-class="java.util.HashMap">
             SELECT * FROM TERM_LOAN_CASE_DETAILS WHERE ACT_NUM=#ACT_NUM# 
             AND((FILING_FEES !=NVL(PAID_FILING_FEES,0)) OR (MISC_CHARGES !=NVL(PAID_MISC_FEES,0))) ORDER BY CASE_STATUS
	</mapped-statement>
        
         <mapped-statement name="updatePaidCaseExpenceAmt" result-class="java.util.HashMap">
            UPDATE  TERM_LOAN_CASE_DETAILS SET PAID_MISC_FEES=#PAID_MISC_FEES#   WHERE ACT_NUM=#ACT_NUM# AND CASE_STATUS=#CHARGE_TYPE#
	</mapped-statement>
        
        <mapped-statement name="updatePaidCaseFileAmt" result-class="java.util.HashMap">
             UPDATE  TERM_LOAN_CASE_DETAILS SET PAID_FILING_FEES=#PAID_FILING_FESS_AMT#   WHERE ACT_NUM=#ACT_NUM# AND CASE_STATUS=#CHARGE_TYPE#
	</mapped-statement>  -->
        
    <mapped-statement name="getCustIdfromMembershipLiability" result-class="java.util.HashMap">
        SELECT CUST_ID,MEMBERSHIP_NO AS MEM_NO,FNAME AS CUST_NAME FROM ALL_CUSTOMER WHERE ACT_NUM = #ACT_NUM:VARCHAR# OR ACT_NUM = #ACT_NUM:VARCHAR#||'_1'
    </mapped-statement>      
        
    <mapped-statement name="insertLoanChargesTO" inline-parameters="true">
        INSERT INTO LOAN_CHARGE_DEFINITION
        (SCHEME_ID, CHARGE_ID, CHARGE_DESC, ACC_HEAD, MANDATORY, DEDUCTION_ACCU, CHARGE_BASE, FROM_SLAB_AMT,TO_SLAB_AMT, FLAT_CHARGE, 
        CHARGE_RATE, DIVISIBLE_BY, ROUND_OFF_TYPE, MIN_CHARGE_AMOUNT, MAX_CHARGE_AMOUNT, STATUS, STATUS_DT,STATUS_BY,CHARGE_EDITABLE,IS_DEPOSIT_OR_LOAN,
        DAY_WISE_CALC,PREMATURE_RATE) VALUES (
        #schemeId:VARCHAR#, #chargeId:VARCHAR#, #chargeDesc:VARCHAR#, #accHead:VARCHAR#, #mandatory:VARCHAR#, 
        #deductionAccu:VARCHAR#, #chargeBase:VARCHAR#, #fromSlabAmt:VARCHAR#, #toSlabAmt:VARCHAR#, cast(#flatCharge# as numeric), 
        #chargeRate:VARCHAR#, #divisibleBy:VARCHAR#, #roundOffType:VARCHAR#, #minChargeAmount:VARCHAR#, #maxChargeAmount:VARCHAR#, 
        #status:VARCHAR#, #statusDt:DATE#, #statusBy:VARCHAR#,#editable:VARCHAR#,#isDepositOrLoan:VARCHAR#,#dayWiseCalc:VARCHAR#,cast(#prematureRate# as numeric))
    </mapped-statement>
        
    <mapped-statement name="updateLoanChargesTO" inline-parameters="true">
        UPDATE LOAN_CHARGE_DEFINITION SET 
        CHARGE_DESC = #chargeDesc:VARCHAR#,
        ACC_HEAD = #accHead:VARCHAR#,
        MANDATORY = #mandatory:VARCHAR#,
        DEDUCTION_ACCU = #deductionAccu:VARCHAR#,
        CHARGE_BASE = #chargeBase:VARCHAR#,
        FROM_SLAB_AMT = #fromSlabAmt:VARCHAR#,
        TO_SLAB_AMT = #toSlabAmt:VARCHAR#,
        FLAT_CHARGE = #flatCharge:VARCHAR#,
        CHARGE_RATE = #chargeRate:VARCHAR#,
        DIVISIBLE_BY = #divisibleBy:VARCHAR#,
        ROUND_OFF_TYPE = #roundOffType:VARCHAR#,
        MIN_CHARGE_AMOUNT = #minChargeAmount:VARCHAR#,
        MAX_CHARGE_AMOUNT = #maxChargeAmount:VARCHAR#,
        CHARGE_EDITABLE=#editable#,
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#,
        AUTHORIZED_STATUS = #authorizedStatus:VARCHAR#,
        AUTHORIZED_DT = #authorizedDt:DATE#,
        AUTHORIZED_BY = #authorizedBy:VARCHAR#,
        IS_DEPOSIT_OR_LOAN = #isDepositOrLoan:VARCHAR#,
        DAY_WISE_CALC = #dayWiseCalc:VARCHAR#,
        PREMATURE_RATE = cast(#prematureRate# as numeric)
        WHERE SCHEME_ID = #schemeId:VARCHAR# AND CHARGE_ID = #chargeId:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
        
    <mapped-statement name="deleteLoanChargesTO" inline-parameters="true">
        UPDATE LOAN_CHARGE_DEFINITION SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE SCHEME_ID = #schemeId:VARCHAR# AND CHARGE_ID = #chargeId:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
        
    <result-map name="getLoanChargesTOResult" class="com.see.truetransact.transferobject.common.charges.LoanChargesTO">
        <property name="schemeId" column="SCHEME_ID"/>
        <property name="chargeId" column="CHARGE_ID"/>
        <property name="chargeDesc" column="CHARGE_DESC"/>
        <property name="accHead" column="ACC_HEAD"/>
        <property name="mandatory" column="MANDATORY"/>
        <property name="deductionAccu" column="DEDUCTION_ACCU"/>
        <property name="chargeBase" column="CHARGE_BASE"/>
        <property name="fromSlabAmt" column="FROM_SLAB_AMT"/>
        <property name="toSlabAmt" column="TO_SLAB_AMT"/>
        <property name="flatCharge" column="FLAT_CHARGE"/>
        <property name="chargeRate" column="CHARGE_RATE"/>
        <property name="divisibleBy" column="DIVISIBLE_BY"/>
        <property name="roundOffType" column="ROUND_OFF_TYPE"/>
        <property name="minChargeAmount" column="MIN_CHARGE_AMOUNT"/>
        <property name="maxChargeAmount" column="MAX_CHARGE_AMOUNT"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="editable" column="CHARGE_EDITABLE"/>
        <property name="isDepositOrLoan" column="IS_DEPOSIT_OR_LOAN"/>
        <property name="dayWiseCalc" column="DAY_WISE_CALC"/>
        <property name="prematureRate" column="PREMATURE_RATE"/>
    </result-map>
        
    <mapped-statement name="getSelectLoanChargesTO" result-map="getLoanChargesTOResult" >
        SELECT * FROM LOAN_CHARGE_DEFINITION 
        WHERE STATUS!='DELETED' AND SCHEME_ID=#SCHEME_ID:VARCHAR# AND CHARGE_ID=#CHARGE_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="authorizeLoanChargesDetails" result-class="java.util.HashMap">
        UPDATE LOAN_CHARGE_DEFINITION SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #AUTHORIZED_BY:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#
        WHERE STATUS!='DELETED' AND SCHEME_ID=#SCHEME_ID# AND CHARGE_ID=#CHARGE_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getChargeDetailDelete" result-class="java.util.LinkedHashMap">
        SELECT SCHEME_ID,CHARGE_ID,CHARGE_DESC,ACC_HEAD,STATUS FROM LOAN_CHARGE_DEFINITION WHERE 
        STATUS!='DELETED' AND AUTHORIZED_STATUS IS NULL AND IS_DEPOSIT_OR_LOAN = #IS_DEPOSIT_OR_LOAN:VARCHAR# ORDER BY CHARGE_ID    
    </mapped-statement>
    
    <mapped-statement name="getChargeDetailEditView" result-class="java.util.LinkedHashMap">
        SELECT SCHEME_ID,CHARGE_ID,CHARGE_DESC,ACC_HEAD,AUTHORIZED_STATUS FROM LOAN_CHARGE_DEFINITION WHERE 
        STATUS!='DELETED' AND AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS = 'AUTHORIZED' AND IS_DEPOSIT_OR_LOAN = #IS_DEPOSIT_OR_LOAN:VARCHAR#  ORDER BY CHARGE_ID 
    </mapped-statement>
        
    <mapped-statement name="getChargeDetailAuthorize" result-class="java.util.LinkedHashMap">
        SELECT SCHEME_ID,CHARGE_ID,CHARGE_DESC,ACC_HEAD,STATUS FROM LOAN_CHARGE_DEFINITION C WHERE 
        STATUS!='DELETED' AND IS_DEPOSIT_OR_LOAN = #IS_DEPOSIT_OR_LOAN:VARCHAR# AND AUTHORIZED_STATUS IS NULL 
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND  RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = C.STATUS_BY)
        AND STATUS_BY!= #USER_ID:VARCHAR# ORDER BY C.CHARGE_ID    
    </mapped-statement>
        
    <mapped-statement name="LoanCharge.getProdId" result-class="java.util.LinkedHashMap" >
        SELECT CHARGE_ID FROM LOAN_CHARGE_DEFINITION
        WHERE SCHEME_ID = #SCHEME_ID:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
        
    <mapped-statement name="insertLoanSlabChargesTO" inline-parameters="true">
        INSERT INTO LOAN_SLAB_AMOUNT_DETAILS
        (SL_NO, CHARGE_ID, FROM_SLAB_AMT, TO_SLAB_AMT, CHARGE_RATE, DIVISIBLE_BY, ROUND_OFF_TYPE, MIN_CHARGE_AMOUNT, MAX_CHARGE_AMOUNT, STATUS, STATUS_DT, STATUS_BY
        ) VALUES (
        #slNo:NUMERIC#, #chargeId:VARCHAR#, #fromSlabAmt:NUMERIC#, #toSlabAmt:NUMERIC#, #chargeRate:NUMERIC#, #divisibleBy:NUMERIC#, 
        #roundOffType:VARCHAR#, #minChargeAmount:NUMERIC#, #maxChargeAmount:NUMERIC#, #status:VARCHAR#, #statusDt:DATE#, #statusBy:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="updateLoanSlabChargesTO" inline-parameters="true">
        UPDATE LOAN_SLAB_AMOUNT_DETAILS SET 
        FROM_SLAB_AMT = #fromSlabAmt:NUMERIC#,
        TO_SLAB_AMT = #toSlabAmt:NUMERIC#,
        CHARGE_RATE = #chargeRate:NUMERIC#,
        DIVISIBLE_BY = #divisibleBy:NUMERIC#,
        ROUND_OFF_TYPE = #roundOffType:VARCHAR#,
        MIN_CHARGE_AMOUNT = #minChargeAmount:NUMERIC#,
        MAX_CHARGE_AMOUNT = #maxChargeAmount:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#
        WHERE SL_NO = #slNo:NUMERIC# AND CHARGE_ID = #chargeId:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
        
    <mapped-statement name="deleteLoanSlabChargesTO" inline-parameters="true">
        UPDATE LOAN_SLAB_AMOUNT_DETAILS SET 
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#
        WHERE SL_NO = #slNo:NUMERIC# AND CHARGE_ID = #chargeId:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
        
    <mapped-statement name="deleteLoanSlabChargeDetails" inline-parameters="true">
        UPDATE LOAN_SLAB_AMOUNT_DETAILS SET 
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#
        WHERE CHARGE_ID = #chargeId:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
        
    <result-map name="getLoanSlabChargesTOResult" class="com.see.truetransact.transferobject.common.charges.LoanSlabChargesTO">
        <property name="slNo" column="SL_NO"/>
        <property name="chargeId" column="CHARGE_ID"/>
        <property name="fromSlabAmt" column="FROM_SLAB_AMT"/>
        <property name="toSlabAmt" column="TO_SLAB_AMT"/>
        <property name="chargeRate" column="CHARGE_RATE"/>
        <property name="divisibleBy" column="DIVISIBLE_BY"/>
        <property name="roundOffType" column="ROUND_OFF_TYPE"/>
        <property name="minChargeAmount" column="MIN_CHARGE_AMOUNT"/>
        <property name="maxChargeAmount" column="MAX_CHARGE_AMOUNT"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
    </result-map>
    <mapped-statement name="getSelectLoanSlabChargesTO" result-map="getLoanSlabChargesTOResult" >
        SELECT * FROM LOAN_SLAB_AMOUNT_DETAILS WHERE STATUS!='DELETED' AND CHARGE_ID=#CHARGE_ID:VARCHAR# ORDER BY SL_NO 
    </mapped-statement>
        
    <mapped-statement name="getSlabAmount" result-class="java.util.HashMap" >
        SELECT * FROM LOAN_SLAB_AMOUNT_DETAILS WHERE STATUS!='DELETED'
        AND  CHARGE_ID=#CHARGE_ID:VARCHAR# AND cast(#AMOUNT# as numeric) BETWEEN FROM_SLAB_AMT AND TO_SLAB_AMT
    </mapped-statement>
        
        
        
     <!--   <mapped-statement name="getChargeDetailsData" result-class="java.util.LinkedHashMap" >
         SELECT ACC_HEAD,CHARGE_DESC AS "DESC",FLAT_CHARGE AS AMOUNT,MANDATORY M FROM LOAN_CHARGE_DEFINITION WHERE STATUS != 'DELETED' AND 
                AUTHORIZED_STATUS = 'AUTHORIZED' AND DEDUCTION_ACCU = 'O' AND SCHEME_ID=#SCHEME_ID#
        </mapped-statement>
        
        <mapped-statement name="getClosingChargeDetails" result-class="java.util.LinkedHashMap" >
         SELECT ACC_HEAD,CHARGE_DESC AS "DESC",FLAT_CHARGE AS AMOUNT,MANDATORY M FROM LOAN_CHARGE_DEFINITION WHERE STATUS != 'DELETED' AND
                AUTHORIZED_STATUS = 'AUTHORIZED' AND DEDUCTION_ACCU = 'C' AND SCHEME_ID =#PROD_ID#
        </mapped-statement>
        
        <mapped-statement name="getAllChargeDetailsData" result-class="java.util.HashMap" >
         SELECT * FROM LOAN_CHARGE_DEFINITION WHERE SCHEME_ID=#SCHEME_ID# AND DEDUCTION_ACCU = 'O' AND STATUS!='DELETED' AND AUTHORIZED_STATUS='AUTHORIZED'
        </mapped-statement>
        
        <mapped-statement name="getAllClosingChargeDetailsData" result-class="java.util.HashMap" >
         SELECT * FROM LOAN_CHARGE_DEFINITION WHERE SCHEME_ID=#SCHEME_ID# AND DEDUCTION_ACCU = 'C' AND STATUS!='DELETED' AND AUTHORIZED_STATUS='AUTHORIZED'
        </mapped-statement> -->
        
    <dynamic-mapped-statement name="getDepositChargeDetailsData" result-class="java.util.LinkedHashMap" >
        SELECT CHARGE_DESC AS "DESC",nvl(FLAT_CHARGE,0) AS AMOUNT,MANDATORY M,nvl(CHARGE_EDITABLE,'N') AS E FROM LOAN_CHARGE_DEFINITION WHERE STATUS != 'DELETED' AND 
        AUTHORIZED_STATUS = 'AUTHORIZED' AND IS_DEPOSIT_OR_LOAN = #IS_DEPOSIT_OR_LOAN:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="DEDUCTION_ACCU">
                    DEDUCTION_ACCU = #DEDUCTION_ACCU:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="DEDUCTION_ACCU_RENEWAL">
                    DEDUCTION_ACCU IN('O','C')
                </isNotNull>
            </isParameterPresent>
        </dynamic> 
        AND SCHEME_ID=#SCHEME_ID:VARCHAR# 
    </dynamic-mapped-statement>    

    <dynamic-mapped-statement name="getChargeDetailsData" result-class="java.util.LinkedHashMap" >
        SELECT CHARGE_ID,CHARGE_DESC AS "DESC",nvl(cast(FLAT_CHARGE as NUMERIC),0) AS AMOUNT,MANDATORY M,nvl(CHARGE_EDITABLE,'N') AS E FROM LOAN_CHARGE_DEFINITION WHERE STATUS != 'DELETED' AND 
        AUTHORIZED_STATUS = 'AUTHORIZED' 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="DEDUCTION_ACCU">
                    DEDUCTION_ACCU = #DEDUCTION_ACCU:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="DEDUCTION_ACCU_RENEWAL">
                    DEDUCTION_ACCU IN('O','C')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CHECK_MANDATORY">
                    MANDATORY='Y'
                </isNotNull>
            </isParameterPresent>
        </dynamic> 
        AND SCHEME_ID=#SCHEME_ID:VARCHAR# 
    </dynamic-mapped-statement> 
        
    <dynamic-mapped-statement name="getAllChargeDetailsData" result-class="java.util.HashMap" >
        SELECT * FROM LOAN_CHARGE_DEFINITION WHERE STATUS!='DELETED' AND AUTHORIZED_STATUS='AUTHORIZED' 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="DEDUCTION_ACCU">
                    DEDUCTION_ACCU = #DEDUCTION_ACCU:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="DEDUCTION_ACCU_RENEWAL">
                    DEDUCTION_ACCU IN('O','C')
                </isNotNull>
            </isParameterPresent>
        </dynamic> 
        AND SCHEME_ID=#SCHEME_ID:VARCHAR#
    </dynamic-mapped-statement> 
    <mapped-statement name="getchittalNo" result-class="java.util.HashMap" >
        select MA.CHITTAL_NO,MA.LOAN_GIVEN  from MDS_APPLICATION ma where ma.AUTHORIZE_STATUS = 'AUTHORIZED' and ma.AUTHORIZE_STATUS != 'DELETED' and ma.AUTHORIZE_STATUS != 'REJECTED' and ma.AUTHORIZE_STATUS != 'CLOSED' and MA.LOAN_ACT_NUM = #LOAN_ACT_NUM:VARCHAR#
    </mapped-statement>
    <dynamic-mapped-statement name="getSelectMembershipLiabilityDetails" result-class="java.util.LinkedHashMap">
        SELECT acct_num AS act_num, prod_desc AS product_desc,
        NVL ("limit", 0) AS LIMIT, NVL (principal, 0) AS balance,
        CASE
        WHEN NVL (prin_demand, 0) - NVL (prin_paid, 0) > 0
        THEN NVL (prin_demand, 0) - NVL (prin_paid, 0)
        ELSE 0
        END AS princ_due,
        NVL (interest_demand, 0) - NVL (int_paid, 0) AS int_due, penal,
        charges, NVL (principal, 0) + NVL (interest_demand, 0) AS total,RLN.FROM_DT,RLN.TO_DT
        FROM rep_loan_notice_two rln, loans_borrower lb
        WHERE lb.borrow_no = rln.borrow_no AND rln.cust_id =#CUST_ID:VARCHAR# 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "GOLD_LOAN">
                    RLN.PROD_TYPE ='GOLD_LOAN'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        UNION
        SELECT acct_num AS act_num,prod_desc AS product_desc,
        NVL ("limit", 0) AS LIMIT, NVL (principal, 0) AS balance,
        CASE
        WHEN NVL (prin_demand, 0) - NVL (prin_paid, 0) > 0
        THEN NVL (prin_demand, 0) - NVL (prin_paid, 0)
        ELSE 0
        END AS princ_due,
        NVL (interest_demand, 0) AS int_due, penal, charges,
        NVL (principal, 0) + NVL (interest_demand, 0) AS total,RLN.FROM_DT,RLN.TO_DT
        FROM rep_loan_notice_two rln, loans_joint lb
        WHERE lb.borrow_no = rln.borrow_no AND rln.cust_id =#CUST_ID:VARCHAR# 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "GOLD_LOAN">
                    RLN.PROD_TYPE ='GOLD_LOAN'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        UNION
        SELECT rln.acct_num AS act_num,prod_desc AS product_desc,
        NVL ("limit", 0) AS LIMIT, NVL (principal, 0) AS balance,
        CASE
        WHEN NVL (prin_demand, 0) - NVL (prin_paid, 0) > 0
        THEN NVL (prin_demand, 0) - NVL (prin_paid, 0)
        ELSE 0
        END AS princ_due,
        NVL (interest_demand, 0) AS int_due, penal, charges,
        NVL (principal, 0) + NVL (interest_demand, 0) AS total,RLN.FROM_DT,RLN.TO_DT
        FROM rep_loan_notice_two rln, loans_guarantor_details lb
        WHERE lb.acct_num = rln.acct_num AND rln.cust_id = #CUST_ID:VARCHAR# 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "GOLD_LOAN">
                    RLN.PROD_TYPE ='GOLD_LOAN'
                </isNotNull>
            </isParameterPresent>
            <isNull prepend = " " property = "GOLD_LOAN">
                UNION
                SELECT acct_num, prod_desc AS product_desc, 0 AS LIMIT, balance, princ_due, int_due, penal,
                charges, balance + int_due AS total,null as FROM_DT,null as TO_DT
                FROM mds_liability_details
                WHERE cust_id =#CUST_ID:VARCHAR# 
            </isNull>
        </dynamic>
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="getSelectPaddyCustDetails" result-class="java.util.LinkedHashMap">
        SELECT PURCHASE_ID, CND_NUMBER AS CND_NO, PURCHASE_NAME, TRANSACTION_DATE AS TRANS_DT, 
        PURCHASE_DATE, SUM(KILO_GRAMS) AS WEIGHT, SUM(NET_AMOUNT) AS AMOUNT, SUM(ACREAGE) AS ACRE 
        FROM PADDY_PURCHASE_MASTER 
        WHERE STATUS!='DELETED' AND AUTHORIZE_STATUS IS NOT NULL AND
        AUTHORIZE_STATUS='AUTHORIZED' AND (LOAN_GIVEN IS NULL OR LOAN_GIVEN='N')  AND PRODUCT_CODE=#PADDY_PROD_ID:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "PADDY_NO">
                    CND_NUMBER =#PADDY_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="PURCHASE_ID">
                    UPPER(PURCHASE_ID) LIKE UPPER('%$PURCHASE_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CND_NO">
                    UPPER(CND_NUMBER) LIKE UPPER('%$CND_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PURCHASE_NAME">
                    UPPER(PURCHASE_NAME) LIKE UPPER('%$PURCHASE_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="TRANS_DT">
                    UPPER(TRANSACTION_DATE) LIKE UPPER('%$TRANS_DT$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        GROUP BY PURCHASE_ID, CND_NUMBER, PURCHASE_NAME, TRANSACTION_DATE, PURCHASE_DATE         
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="getSelectMDSCustDetails" result-class="java.util.LinkedHashMap">
        select * from (SELECT MA.CHITTAL_NO ||'_'||MA.SUB_NO AS CHITTAL_NO, MA.MEMBER_TYPE, MA.MEMBER_NO, MA.MEMBER_NAME, (MIN(MTD.INST_AMT)*SUM(NO_OF_INST)) AS AMOUNT, MA.CHIT_END_DT AS END_DT
        FROM MDS_TRANS_DETAILS MTD, MDS_APPLICATION MA WHERE MTD.CHITTAL_NO=MA.CHITTAL_NO AND MTD.SUB_NO=MA.SUB_NO
        AND MTD.STATUS!='DELETED' AND MTD.AUTHORIZE_STATUS IS NOT NULL AND MTD.AUTHORIZE_STATUS='AUTHORIZED'
        AND NOT EXISTS (SELECT * FROM MDS_PRIZED_MONEY_DETAILS WHERE CHITTAL_NO=MA.CHITTAL_NO AND SUB_NO=MA.SUB_NO AND SCHEME_NAME=#MDS_PROD_ID:VARCHAR# AND AUTHORIZED_STATUS='AUTHORIZED')
        AND (LOAN_GIVEN IS NULL OR LOAN_GIVEN='N') AND MA.SCHEME_NAME=#MDS_PROD_ID:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "CHITTAL_NUMBER">
                    MA.CHITTAL_NO=#CHITTAL_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="CHITTAL_NO">
                    UPPER(MA.CHITTAL_NO ||'_'||MA.SUB_NO) LIKE UPPER('%$CHITTAL_NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBER_TYPE">
                    UPPER(MA.MEMBER_TYPE) LIKE UPPER('%$MEMBER_TYPE$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBER_NO">
                    UPPER(MA.MEMBER_NO) LIKE UPPER('%$MEMBER_NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBER_NAME">
                    UPPER(MA.MEMBER_NAME) LIKE UPPER('%$MEMBER_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="END_DT">
                    UPPER(MA.CHIT_END_DT) LIKE UPPER('%$END_DT$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        GROUP BY MA.CHITTAL_NO,MA.SUB_NO, MA.MEMBER_TYPE, MA.MEMBER_NO, MA.MEMBER_NAME,MA.CHIT_END_DT) A
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                WHERE ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
        </dynamic>
        ORDER BY CHITTAL_NO
    </dynamic-mapped-statement>
        
    <mapped-statement name="updatePaddyLoanStatus" result-class="java.util.HashMap">
        UPDATE PADDY_PURCHASE_MASTER SET 
        LOAN_GIVEN=#LOAN_GIVEN:VARCHAR#, LOAN_STATUS=#LOAN_STATUS:VARCHAR#, LOAN_ACT_NUM=#ACT_NUM:VARCHAR#
        WHERE CND_NUMBER=#CND_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateMDSLoanStatus" result-class="java.util.HashMap">
        UPDATE MDS_APPLICATION SET 
        LOAN_GIVEN=#LOAN_GIVEN:VARCHAR#, LOAN_STATUS=#LOAN_STATUS:VARCHAR#, LOAN_ACT_NUM=#ACT_NUM:VARCHAR#
        WHERE CHITTAL_NO=#CHITTAL_NO:VARCHAR# AND SUB_NO=#SUB_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getPaddyCustDetailsForEditAndAuthorize" result-class="java.util.LinkedHashMap">
        SELECT PURCHASE_ID, CND_NUMBER AS CND_NO, PURCHASE_NAME, TRANSACTION_DATE AS TRANS_DT, 
        PURCHASE_DATE, SUM(cast(KILO_GRAMS as INTEGER)) AS WEIGHT, SUM(cast(NET_AMOUNT as INTEGER)) AS AMOUNT, SUM(cast(ACREAGE as INTEGER)) AS ACRE 
        FROM PADDY_PURCHASE_MASTER  
        WHERE LOAN_ACT_NUM=#value:VARCHAR#
        GROUP BY PURCHASE_ID, CND_NUMBER, PURCHASE_NAME, TRANSACTION_DATE, PURCHASE_DATE  
    </mapped-statement>
        
    <mapped-statement name="getMDSCustDetailsForEditAndAuthorize" result-class="java.util.LinkedHashMap">
        SELECT MA.CHITTAL_NO, MA.SUB_NO, MA.MEMBER_TYPE, MA.MEMBER_NO, MA.MEMBER_NAME, SUM(MTD.INST_AMT) AS AMOUNT 
        FROM MDS_TRANS_DETAILS MTD, MDS_APPLICATION MA WHERE MA.LOAN_GIVEN='Y' AND MTD.CHITTAL_NO=MA.CHITTAL_NO
        AND MTD.STATUS!='DELETED' AND MTD.AUTHORIZE_STATUS IS NOT NULL AND MTD.AUTHORIZE_STATUS='AUTHORIZED'
        AND LOAN_ACT_NUM=#value:VARCHAR#
        GROUP BY MA.CHITTAL_NO, MA.SUB_NO, MA.MEMBER_TYPE, MA.MEMBER_NO, MA.MEMBER_NAME
    </mapped-statement>

<!--    <mapped-statement name="getAppraiserCode" result-map="get-AppraiserName-result"> 
        SELECT EM.EMPLOYEEID as EMPLOYEE_CODE,EM.EMPLOYEE_NAME AS NAME  FROM EMPLOYEE_MASTER EM join EMPLOYEE_OTHER_DETAILS  ep on EM.EMPLOYEEID =EP.EMPLOYEEID WHERE EP.DEPT_ID = 'Appr' 
        ORDER BY EM.EMPLOYEEID
        SELECT get_cust_name(C.CUST_ID) AS NAME,C.STAFF_ID AS EMPLOYEE_CODE FROM CUSTOMER C WHERE
        STAFF_ID IS NOT NULL AND C.CUST_TYPE_ID='STAFF'
        AND C.BRANCH_CODE = #BRANCH_CODE:VARCHAR# 
        ORDER BY STAFF_ID
        SELECT get_cust_name(C.CUST_ID) AS NAME,C.STAFF_ID AS EMPLOYEE_CODE FROM CUSTOMER C ,USER_MASTER UM  WHERE   
        STAFF_ID IS NOT NULL AND C.CUST_TYPE_ID='STAFF' AND UM.BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND UM.EMPLOYEE_ID=C.CUST_ID   
        AND UM.STATUS != 'DELETED' AND UM.SUSPEND_USER ='N' ORDER BY STAFF_ID
    </mapped-statement>-->

    <dynamic-mapped-statement  name="getAppraiserCode" result-map="get-AppraiserName-result"> 
 <!-- SELECT EM.EMPLOYEEID as EMPLOYEE_CODE,EM.EMPLOYEE_NAME AS NAME  FROM EMPLOYEE_MASTER EM join EMPLOYEE_OTHER_DETAILS  ep on EM.EMPLOYEEID =EP.EMPLOYEEID WHERE EP.DEPT_ID = 'Appr' 
        ORDER BY EM.EMPLOYEEID-->
        <!--SELECT get_cust_name(C.CUST_ID) AS NAME,C.STAFF_ID AS EMPLOYEE_CODE FROM CUSTOMER C WHERE
        STAFF_ID IS NOT NULL AND C.CUST_TYPE_ID='STAFF'
        AND C.BRANCH_CODE = #BRANCH_CODE:VARCHAR# 
        ORDER BY STAFF_ID-->
        SELECT get_cust_name(C.CUST_ID) AS NAME,C.STAFF_ID AS EMPLOYEE_CODE FROM CUSTOMER C ,USER_MASTER UM  WHERE   
        STAFF_ID IS NOT NULL AND C.CUST_TYPE_ID='STAFF' AND UM.BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND UM.EMPLOYEE_ID=C.CUST_ID   
        AND UM.STATUS != 'DELETED' AND UM.SUSPEND_USER ='N'AND UM.APPRAISER_ID='Y' ORDER BY STAFF_ID
    </dynamic-mapped-statement> 
        
    <result-map name="get-AppraiserName-result" class="com.see.truetransact.transferobject.common.lookup.LookUpTO">
        <property name="lookUpRefID" column="EMPLOYEE_CODE" />
        <property name="lookUpDesc" column="NAME" />
    </result-map> 
        
    <mapped-statement name="getAppraiserName" result-class="java.util.HashMap" >
       <!-- SELECT get_cust_name(C.CUST_ID) AS EMPLOYEE_NAME FROM BANK_EMPLOYEE WHERE EMPLOYEE_CODE = #EMPLOYEE_CODE:VARCHAR# AND DEPTT_ID = 'Appr'-->
        SELECT  get_cust_name(CUST_ID) AS EMPLOYEE_NAME FROM CUSTOMER WHERE STAFF_ID = #EMPLOYEE_CODE:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getSelectAppraiserName" result-class="java.util.HashMap" >
        <!--SELECT get_cust_name(C.CUST_ID) AS EMPLOYEE_NAME,EMPLOYEE_CODE FROM BANK_EMPLOYEE  ,user_master  WHERE  DEPTT_ID = 'Appr' and
        EMPLOYEE_CODE=EMPLOYEE_ID AND USER_ID=#USER_ID:VARCHAR#  AND AUTHORIZED_STATUS='AUTHORIZED' and user_master.BRANCH_CODE=#BRANCH_CODE:VARCHAR#-->
        SELECT get_cust_name(C.CUST_ID) AS employee_name,STAFF_ID AS  employee_code FROM CUSTOMER C,USER_MASTER UM,EMPLOYEE_OTHER_DETAILS ED WHERE UM.EMPLOYEE_ID = C.CUST_ID 
        AND  user_id = #USER_ID:VARCHAR#  AND authorized_status = 'AUTHORIZED' AND UM.branch_code = #BRANCH_CODE:VARCHAR# AND ED.EMPLOYEEID = C.STAFF_ID AND ED.DESIG_ID='Appr'
    </mapped-statement>
    <mapped-statement name="getSelectRenewalAppraiserName" result-class="java.util.HashMap" >
        <!--SELECT get_cust_name(C.CUST_ID) AS EMPLOYEE_NAME FROM BANK_EMPLOYEE  WHERE EMPLOYEE_CODE=#EMP_CODE:VARCHAR#-->
        SELECT get_cust_name(CUST_ID) AS EMPLOYEE_NAME FROM CUSTOMER  WHERE STAFF_ID=#EMP_CODE:VARCHAR#
    </mapped-statement>
                
    <mapped-statement name="getSanctionAmount" result-class="java.util.HashMap" >
        SELECT "limit" AS SANCTION_AMOUNT FROM LOANS_SANCTION_DETAILS LSD,LOANS_FACILITY_DETAILS LFD WHERE 
        LSD.BORROW_NO = LFD.BORROW_NO AND LFD.ACCT_NUM = #ACCT_NUM:VARCHAR# AND LFD.STATUS != 'DELETED'
        AND LFD.AUTHORIZE_STATUS_1='AUTHORIZED'
    </mapped-statement>
    <mapped-statement name="getSanctionAmountwithoutauth" result-class="java.util.HashMap" >
        SELECT "limit" AS SANCTION_AMOUNT FROM LOANS_SANCTION_DETAILS LSD,LOANS_FACILITY_DETAILS LFD WHERE 
        LSD.BORROW_NO = LFD.BORROW_NO AND LFD.ACCT_NUM = #ACCT_NUM:VARCHAR# AND LFD.STATUS != 'DELETED'
        
    </mapped-statement>
    <mapped-statement name="getIncidentalCharges" result-class="java.util.HashMap" >
        SELECT COMMIT_CHRG,COMMIT_CHRG_PER,COMMIT_CHRG_AMT FROM LOANS_PROD_CHARGES WHERE PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getIncidentalAcHead" result-class="java.util.HashMap" >
        SELECT COMMITMENT_CHRG AS ACC_HEAD FROM LOANS_PROD_ACHD WHERE PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
        
    <!-- =============================================GOLD LOAN NOMINEE ===================== -->    
        <!-- Use AccountNomineeTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertNomineeTOTL" inline-parameters="true">
        INSERT INTO LOANS_NOMINEE_DETAIL
        (ACT_NUM, NOMINEE_ID, NOMINEE_NAME, RELATIONSHIP, STREET, AREA, CITY, STATE, PIN_CODE, AREA_CODE, PH_NO, 
        SHARE_PER, NOMINEE_STATUS, NOMINEE_DOB, GUARDIAN_NAME, G_STREET, G_AREA, G_CITY, G_STATE, G_PIN_CODE, G_AREA_CODE, 
        G_PH_NO, G_RELATIONSHIP, COUNTRY_CODE, G_COUNTRY_CODE, STATUS, STATUS_BY, STATUS_DT, CUST_ID
        ) VALUES (
        #actNum:VARCHAR#, #nomineeId:VARCHAR#, #nomineeName:VARCHAR#, #relationship:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, 
        #city:VARCHAR#, #state:VARCHAR#, #pinCode:VARCHAR#, #areaCode:VARCHAR#, #phNo:VARCHAR#, #sharePer:NUMERIC#, #nomineeStatus:VARCHAR#, 
        #nomineeDob:DATE#, #guardianName:VARCHAR#, #gStreet:VARCHAR#, #gArea:VARCHAR#, #gCity:VARCHAR#, #gState:VARCHAR#, #gPinCode:VARCHAR#, 
        #gAreaCode:VARCHAR#, #gPhNo:VARCHAR#, #gRelationship:VARCHAR#, #countryCode:VARCHAR#, #gCountryCode:VARCHAR#, #status:VARCHAR#, 
        #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #custId:VARCHAR#)
    </mapped-statement>

    <!-- Use AccountNomineeTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateNomineeTOTL" inline-parameters="true">
        UPDATE LOANS_NOMINEE_DETAIL SET 
<!--	ACT_NUM = #actNum:VARCHAR#,
	NOMINEE_ID = #nomineeId:VARCHAR#,-->
        NOMINEE_NAME = #nomineeName:VARCHAR#,
        RELATIONSHIP = #relationship:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        PIN_CODE = #pinCode:VARCHAR#,
        AREA_CODE = #areaCode:VARCHAR#,
        PH_NO = #phNo:VARCHAR#,
        SHARE_PER = #sharePer:NUMERIC#,
        NOMINEE_STATUS = #nomineeStatus:VARCHAR#,
        NOMINEE_DOB = #nomineeDob:DATE#,
        GUARDIAN_NAME = #guardianName:VARCHAR#,
        G_STREET = #gStreet:VARCHAR#,
        G_AREA = #gArea:VARCHAR#,
        G_CITY = #gCity:VARCHAR#,
        G_STATE = #gState:VARCHAR#,
        G_PIN_CODE = #gPinCode:VARCHAR#,
        G_AREA_CODE = #gAreaCode:VARCHAR#,
        G_PH_NO = #gPhNo:VARCHAR#,
        G_RELATIONSHIP = #gRelationship:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        G_COUNTRY_CODE = #gCountryCode:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#, 
        CUST_ID = #custId:VARCHAR#        
        WHERE ACT_NUM = #actNum:VARCHAR# and NOMINEE_ID = #nomineeId:VARCHAR#
    </mapped-statement>

    <!-- Use AccountNomineeTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteNomineeTOTL" inline-parameters="true">
        DELETE FROM LOANS_NOMINEE_DETAIL 
        WHERE ACT_NUM = #value:VARCHAR# 
        and (STATUS ='MODIFIED' OR STATUS = 'CREATED')
    </mapped-statement>

    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to AccountNomineeTO object (JavaBean) properties -->
    <result-map name="getNomineeTOResultTL" class="com.see.truetransact.transferobject.common.nominee.NomineeTO">
        <property name="actNum" column="ACT_NUM"/>

        <property name="nomineeId" column="NOMINEE_ID"/>
        <property name="nomineeName" column="NOMINEE_NAME"/>
        <property name="relationship" column="RELATIONSHIP"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="pinCode" column="PIN_CODE"/>
        <property name="areaCode" column="AREA_CODE"/>
        <property name="phNo" column="PH_NO"/>
        <property name="sharePer" column="SHARE_PER"/>
        <property name="nomineeStatus" column="NOMINEE_STATUS"/>
        <property name="nomineeDob" column="NOMINEE_DOB"/>
        <property name="guardianName" column="GUARDIAN_NAME"/>
        <property name="gStreet" column="G_STREET"/>
        <property name="gArea" column="G_AREA"/>
        <property name="gCity" column="G_CITY"/>
        <property name="gState" column="G_STATE"/>
        <property name="gPinCode" column="G_PIN_CODE"/>
        <property name="gAreaCode" column="G_AREA_CODE"/>
        <property name="gPhNo" column="G_PH_NO"/>
        <property name="gRelationship" column="G_RELATIONSHIP"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="gCountryCode" column="G_COUNTRY_CODE"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="custId" column="CUST_ID"/>        
    </result-map>
    <mapped-statement name="getSelectNomineeTOTL" result-map="getNomineeTOResultTL" >
        SELECT * FROM LOANS_NOMINEE_DETAIL 
        WHERE ACT_NUM = #value:VARCHAR# AND(STATUS!='DELETED' OR STATUS IS NULL)
    </mapped-statement>
    
    <!-- SECURITY DETAILS -->
    
    <mapped-statement name="insertTermLoanSecurityMemberTO" inline-parameters="true">
        INSERT INTO LOANS_SECURITY_MEMBER
        (ACCT_NUM, MEMBER_NO, MEMBER_NAME, MEMBER_TYPE, CONTACT_NO, NETWORTH,TOTAL_SALARY, BRANCH_CODE, STATUS, STATUS_DT, STATUS_BY,MEMBER_PRIORITY
        ) VALUES (
        #acctNum:VARCHAR#, #memberNo:VARCHAR#, #memberName:VARCHAR#, #memberType:VARCHAR#, #contactNo:NUMERIC#, 
        #networth:VARCHAR#,#txtMemberTotalSalary:NUMERIC#, #branchCode:VARCHAR#, #status:VARCHAR#, #statusDt:DATE#, #statusBy:VARCHAR#,#priority:NUMBER#)
    </mapped-statement>
    
    <mapped-statement name="updateTermLoanSecurityMemberTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_MEMBER SET 
        MEMBER_NAME = #memberName:VARCHAR#,
        MEMBER_TYPE = #memberType:VARCHAR#,
        CONTACT_NO = #contactNo:NUMERIC#,
        NETWORTH = #networth:VARCHAR#,
        TOTAL_SALARY=#txtMemberTotalSalary:NUMERIC#,
        BRANCH_CODE = #branchCode:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#,
        MEMBER_PRIORITY = #priority:NUMBER#
        WHERE MEMBER_NO = #memberNo:VARCHAR# AND ACCT_NUM = #acctNum:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
   
    <mapped-statement name="deleteTermLoanSecurityMemberTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_MEMBER SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        AUTHORIZED_STATUS = null,
        AUTHORIZED_BY = null,
        AUTHORIZED_DT = null
        WHERE MEMBER_NO = #memberNo:VARCHAR# AND ACCT_NUM = #acctNum:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
   
    <mapped-statement name="authorizeMemberDetails" result-class="java.util.HashMap">
        UPDATE LOANS_SECURITY_MEMBER SET 
        AUTHORIZED_STATUS = #AUTHORIZESTATUS#,
        AUTHORIZED_BY = #USER_ID#,
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE <!--STATUS != 'DELETED' --> STATUS_DT= #STATUS_DT:DATE#
        AND ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
   
    <mapped-statement name="getSelectTermLoanSecurityMemberTO" result-map="getTermLoanSecurityMemberTOResult" >
        SELECT * FROM LOANS_SECURITY_MEMBER WHERE STATUS!='DELETED' AND ACCT_NUM = #value:VARCHAR#  
    </mapped-statement>
   
    <mapped-statement name="deleteTermLoanSecurityMemberDetails" inline-parameters="true">
        UPDATE LOANS_SECURITY_MEMBER SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND STATUS!='DELETED'               
    </mapped-statement>
   
    <result-map name="getTermLoanSecurityMemberTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanSecurityMemberTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="memberNo" column="MEMBER_NO"/>
        <property name="memberName" column="MEMBER_NAME"/>
        <property name="memberType" column="MEMBER_TYPE"/>
        <property name="contactNo" column="CONTACT_NO"/>
        <property name="networth" column="NETWORTH"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="priority" column="MEMBER_PRIORITY"/>
    </result-map>
    
    <mapped-statement name="insertTermLoanSecuritySalaryTO" inline-parameters="true">
        INSERT INTO LOANS_SECURITY_SALARY
        (ACCT_NUM, SALARY_CERFICATE_NO, EMP_NAME, EMP_ADDRESS, CITY, PIN, DESIGNATION, CONTACT_NO, RETIREMENT_DT, EMP_MEMBER_NO, TOTAL_SALARY, NETWORTH, SALARY_REMARKS,STATUS,SLNO,
        STATUS_BY,STATUS_DT
        ) VALUES (
        #acctNum:VARCHAR#, #salaryCerficateNo:VARCHAR#, #empName:VARCHAR#, #empAddress:VARCHAR#, #city:VARCHAR#, #pin:NUMERIC#, #designation:VARCHAR#, 
        #contactNo:NUMERIC#, #retirementDt:DATE#, #empMemberNo:VARCHAR#, #totalSalary:NUMERIC#, #networth:VARCHAR#, #salaryRemarks:VARCHAR#,#status:VARCHAR#,#slNo:NUMERIC#,
        #statusBy:VARCHAR#,#statusDt:DATE#)
    </mapped-statement>
    
    <mapped-statement name="updateTermLoanSecuritySalaryTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_SALARY SET 
        SALARY_CERFICATE_NO = #salaryCerficateNo:VARCHAR#,
        EMP_NAME = #empName:VARCHAR#,
        EMP_ADDRESS = #empAddress:VARCHAR#,
        CITY = #city:VARCHAR#,
        PIN = #pin:NUMERIC#,
        DESIGNATION = #designation:VARCHAR#,
        CONTACT_NO = #contactNo:NUMERIC#,
        RETIREMENT_DT = #retirementDt:DATE#,
        EMP_MEMBER_NO = #empMemberNo:VARCHAR#,
        TOTAL_SALARY = #totalSalary:NUMERIC#,
        NETWORTH = #networth:VARCHAR#,
        SALARY_REMARKS = #salaryRemarks:VARCHAR#,
        STATUS =#status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#        
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND  SLNO =#slNo:NUMERIC#
    </mapped-statement>
    
    <mapped-statement name="deleteTermLoanSecuritySalaryTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_SALARY SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        AUTHORIZED_STATUS = null,
        AUTHORIZED_BY = null,
        AUTHORIZED_DT = null
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND  SLNO =#slNo:NUMERIC#
    </mapped-statement>
    
    
    <mapped-statement name="authorizeSalarySecurityDetails" result-class="java.util.HashMap">
        UPDATE LOANS_SECURITY_SALARY SET 
        AUTHORIZED_STATUS = #AUTHORIZESTATUS#,
        AUTHORIZED_BY = #USER_ID#,
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE <!--STATUS != 'DELETED' --> STATUS_DT= #STATUS_DT:DATE#
        AND ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    
    <!-- security details -->
    <mapped-statement name="updateEditTermLoanSecuritySalaryTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_SALARY SET 
        SALARY_CERFICATE_NO = #salaryCerficateNo:VARCHAR#,
        EMP_NAME = #empName:VARCHAR#,
        EMP_ADDRESS = #empAddress:VARCHAR#,
        CITY = #city:VARCHAR#,
        PIN = #pin:NUMERIC#,
        DESIGNATION = #designation:VARCHAR#,
        CONTACT_NO = #contactNo:NUMERIC#,
        RETIREMENT_DT = #retirementDt:DATE#,
        EMP_MEMBER_NO = #empMemberNo:VARCHAR#,
        TOTAL_SALARY = #totalSalary:NUMERIC#,
        NETWORTH = #networth:VARCHAR#,
        SALARY_REMARKS = #salaryRemarks:VARCHAR#,
        STATUS =#status:VARCHAR#
                
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
    <!-- security end -->
    
    <mapped-statement name="getSelectTermLoanSecuritySalaryTO" result-map="getTermLoanSecuritySalaryTOResult" >
        SELECT * FROM LOANS_SECURITY_SALARY WHERE ACCT_NUM = #value:VARCHAR#  AND STATUS !='DELETED' ORDER BY SLNO
    </mapped-statement>
    
    <result-map name="getTermLoanSecuritySalaryTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanSecuritySalaryTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="salaryCerficateNo" column="SALARY_CERFICATE_NO"/>
        <property name="empName" column="EMP_NAME"/>
        <property name="empAddress" column="EMP_ADDRESS"/>
        <property name="city" column="CITY"/>
        <property name="pin" column="PIN"/>
        <property name="designation" column="DESIGNATION"/>
        <property name="contactNo" column="CONTACT_NO"/>
        <property name="retirementDt" column="RETIREMENT_DT"/>
        <property name="empMemberNo" column="EMP_MEMBER_NO"/>
        <property name="totalSalary" column="TOTAL_SALARY"/>
        <property name="networth" column="NETWORTH"/>
        <property name="salaryRemarks" column="SALARY_REMARKS"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="slNo" column="SLNO"/>
    </result-map>
    
    <mapped-statement name="insertTermLoanSecurityLandTO" inline-parameters="true">
        INSERT INTO LOANS_SECURITY_LAND
        (ACCT_NUM, MEMBER_NO, MEMBER_NAME, DOCUMENT_NO, DOCUMENT_TYPE, DOCUMENT_DT, REGISTERED_OFFICE, PLEDGE, PLEDGE_DT, PLEDGE_NO, PLEDGE_AMOUNT, VILLAGE, SURVEY_NO, 
        TOTAL_AREA, NATURE, "right", REMARKS, BRANCH_CODE, STATUS, STATUS_DT, STATUS_BY,GAHAN_YESNO,DOCUMENT_GEN_ID
        ) VALUES (
        #acctNum:VARCHAR#, #memberNo:VARCHAR#, #memberName:VARCHAR#, #documentNo:VARCHAR#, #documentType:VARCHAR#, #documentDt:DATE#, #registeredOffice:VARCHAR#, 
        #pledge:VARCHAR#, #pledgeDt:DATE#, #pledgeNo:VARCHAR#, #pledgeAmount:NUMERIC#, #village:VARCHAR#, #surveyNo:VARCHAR#, #totalArea:VARCHAR#, #nature:VARCHAR#, 
        #right:VARCHAR#, #remarks:VARCHAR#, #branchCode:VARCHAR#, #status:VARCHAR#, #statusDt:DATE#, #statusBy:VARCHAR#,#gahanYesNo:VARCHAR#,#docGenId:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name="updateTermLoanSecurityLandTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_LAND SET 
        GAHAN_YESNO =#gahanYesNo:VARCHAR#,
        MEMBER_NAME = #memberName:VARCHAR#,
        DOCUMENT_NO = #documentNo:VARCHAR#,
        DOCUMENT_TYPE = #documentType:VARCHAR#,
        DOCUMENT_DT = #documentDt:DATE#,
        REGISTERED_OFFICE = #registeredOffice:VARCHAR#,
        PLEDGE = #pledge:VARCHAR#,
        PLEDGE_DT = #pledgeDt:DATE#,
        PLEDGE_NO = #pledgeNo:VARCHAR#,
        PLEDGE_AMOUNT = #pledgeAmount:NUMERIC#,
        VILLAGE = #village:VARCHAR#,
        SURVEY_NO = #surveyNo:VARCHAR#,
        TOTAL_AREA = #totalArea:VARCHAR#,
        NATURE = #nature:VARCHAR#,
        "right" = #right:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        BRANCH_CODE = #branchCode:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#,
        DOCUMENT_GEN_ID=#docGenId:VARCHAR#
        WHERE MEMBER_NO = #memberNo:VARCHAR# AND ACCT_NUM = #acctNum:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
    <mapped-statement name="updateTermLoanSecurityLandTO1" inline-parameters="true">
        UPDATE LOANS_SECURITY_LAND SET 
        GAHAN_YESNO =#gahanYesNo:VARCHAR#,
        MEMBER_NAME = #memberName:VARCHAR#,
        DOCUMENT_NO = #documentNo:VARCHAR#,
        DOCUMENT_TYPE = #documentType:VARCHAR#,
        DOCUMENT_DT = #documentDt:DATE#,
        REGISTERED_OFFICE = #registeredOffice:VARCHAR#,
        PLEDGE = #pledge:VARCHAR#,
        PLEDGE_DT = #pledgeDt:DATE#,
        PLEDGE_NO = #pledgeNo:VARCHAR#,
        PLEDGE_AMOUNT = #pledgeAmount:NUMERIC#,
        VILLAGE = #village:VARCHAR#,
        SURVEY_NO = #surveyNo:VARCHAR#,
        TOTAL_AREA = #totalArea:VARCHAR#,
        NATURE = #nature:VARCHAR#,
        "right" = #right:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        BRANCH_CODE = #branchCode:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#,
        DOCUMENT_GEN_ID=#docGenId:VARCHAR#
        WHERE MEMBER_NO = #memberNo:VARCHAR# AND ACCT_NUM = #acctNum:VARCHAR# AND STATUS != 'DELETED' AND SURVEY_NO = #oldSurvyNo:VARCHAR#
    </mapped-statement>
     
    <mapped-statement name="deleteTermLoanSecurityLandTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_LAND SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE MEMBER_NO = #memberNo:VARCHAR# AND ACCT_NUM = #acctNum:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
    <mapped-statement name="deleteTermLoanSecurityLandTO1" inline-parameters="true">
        UPDATE LOANS_SECURITY_LAND SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE MEMBER_NO = #memberNo:VARCHAR# AND ACCT_NUM = #acctNum:VARCHAR# AND STATUS != 'DELETED'
        AND SURVEY_NO = #oldSurvyNo:VARCHAR#
    </mapped-statement>
     
    <mapped-statement name="getSelectTermLoanSecurityLandTO" result-map="getTermLoanSecurityLandTOResult" >
        SELECT * FROM LOANS_SECURITY_LAND WHERE ACCT_NUM = #value:VARCHAR#  AND STATUS != 'DELETED'
    </mapped-statement>
     
    <result-map name="getTermLoanSecurityLandTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanSecurityLandTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="memberNo" column="MEMBER_NO"/>
        <property name="memberName" column="MEMBER_NAME"/>
        <property name="documentNo" column="DOCUMENT_NO"/>
        <property name="documentType" column="DOCUMENT_TYPE"/>
        <property name="documentDt" column="DOCUMENT_DT"/>
        <property name="registeredOffice" column="REGISTERED_OFFICE"/>
        <property name="pledge" column="PLEDGE"/>
        <property name="pledgeDt" column="PLEDGE_DT"/>
        <property name="pledgeNo" column="PLEDGE_NO"/>
        <property name="pledgeAmount" column="PLEDGE_AMOUNT"/>
        <property name="village" column="VILLAGE"/>
        <property name="surveyNo" column="SURVEY_NO"/>
        <property name="totalArea" column="TOTAL_AREA"/>
        <property name="nature" column="NATURE"/>
        <property name="right" column="RIGHT"/>
        <property name="remarks" column="REMARKS"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="gahanYesNo" column="GAHAN_YESNO"/>
        <property name="docGenId" column="DOCUMENT_GEN_ID"/>
    </result-map>
     
    <mapped-statement name="deleteTermLoanSecurityCollateralDetails" inline-parameters="true">
        UPDATE LOANS_SECURITY_LAND SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP# 
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND STATUS!='DELETED'               
    </mapped-statement>
    
    <mapped-statement name="authorizeCollateralDetails" result-class="java.util.HashMap">
        UPDATE LOANS_SECURITY_LAND SET 
        AUTHORIZED_STATUS = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE <!--STATUS != 'DELETED' --> STATUS_DT = #STATUS_DT:DATE#
        AND ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
     
    <dynamic-mapped-statement name="getShareAccountDetails" result-class="java.util.HashMap">
        SELECT A.NO_OF_SHARES-B.NO_OF_SHARES AS NO_OF_SHARES, A.TOTAL_SHARE_AMOUNT-B.TOTAL_SHARE_AMOUNT AS TOTAL_SHARE_AMOUNT FROM
        (SELECT NVL(SUM(SAD.NO_OF_SHARES),0) AS NO_OF_SHARES,
        NVL(SUM (SAD.SHARE_VALUE),0) AS TOTAL_SHARE_AMOUNT FROM 
        SHARE_ACCT_DETAILS SAD,SHARE_ACCT SA
        WHERE  SA.SHARE_ACCT_NO = SAD.SHARE_ACCT_NO 
        <!--AND SHARE_NO_FROM='ADD'-->
        AND SHARE_NO_FROM IN ('ADD','DIFFERENTIAL') 
        AND SA.STATUS!='CLOSED' AND
        SAD.STATUS !='DELETED' AND SAD.AUTHORIZE = 'AUTHORIZED' AND SA.CUST_ID=#CUSTOMER ID:VARCHAR#        
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="MEMBER_NO">
                    SA.SHARE_ACCT_NO = #MEMBER_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>        
        ) A,
        (SELECT NVL(SUM (SAD.NO_OF_SHARES),0) AS NO_OF_SHARES,
        NVL(SUM (SAD.SHARE_VALUE) ,0) AS TOTAL_SHARE_AMOUNT FROM 
        SHARE_ACCT_DETAILS SAD,SHARE_ACCT SA
        WHERE  SA.SHARE_ACCT_NO = SAD.SHARE_ACCT_NO AND SHARE_NO_FROM='WITHDRAWAL' AND SA.STATUS!='CLOSED' AND
        SAD.STATUS !='DELETED' AND SAD.AUTHORIZE = 'AUTHORIZED' AND SA.CUST_ID=#CUSTOMER ID:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="MEMBER_NO">
                    SA.SHARE_ACCT_NO = #MEMBER_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>            
        ) B
    </dynamic-mapped-statement>
     
    <dynamic-mapped-statement name="getShareLoanLimitPercentage" result-class="java.util.HashMap">
         SELECT NVL(s.BORROWER_SHARE,0) AS BORROWER_SHARE_PERCENTAGE,s.LOAN_TYPE,NVL(s.MAX_LOAN_AMT,0) AS MAX_LOAN_AMT FROM 
         SHARE_PROD_LOANS s
            <dynamic>
             <isParameterPresent>
                <isNotNull  property="PRODUCT_ID">
                    join LOANS_PRODUCT L on S.LOAN_TYPE=L.AUTHORIZE_REMARK
                </isNotNull>
            </isParameterPresent>
            </dynamic>
            WHERE s.STATUS!='DELETED' AND 
        s.SHARE_TYPE=(SELECT SHARE_TYPE FROM SHARE_ACCT WHERE CUST_ID=#CUST_ID:VARCHAR#)
          <dynamic>
             <isParameterPresent>
                <isNotNull prepend="AND" property="PRODUCT_ID">
                  L.PROD_ID=#PRODUCT_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
     
    <mapped-statement name="getTotalSanctionAmount" result-class="java.util.HashMap">
        SELECT ACCT_NUM,"limit" AS SANCTION_AMOUNT,NVL(CLEAR_BALANCE*-1,0) AS OUTSTANDING_AMOUNT FROM 
        LOANS_FACILITY_DETAILS LFD,LOANS_SANCTION_DETAILS LSD,LOANS_BORROWER LB
        WHERE LB.STATUS!='DELETED' AND lfd.AUTHORIZE_STATUS_1 = 'AUTHORIZED' AND LFD.ACCT_STATUS!='CLOSED' AND
        LB.BORROW_NO = LSD.BORROW_NO AND LFD.BORROW_NO = LSD.BORROW_NO AND  LB.CUST_ID=#CUST_ID:VARCHAR# 
        AND LB.BORROW_NO IN (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN (SELECT PROD_ID FROM 
        LOANS_PRODUCT WHERE BEHAVES_LIKE!='LOANS_AGAINST_DEPOSITS' AND AUTHORIZE_REMARK = #AUTHORIZE_REMARK:VARCHAR#))
    </mapped-statement>
     
    <mapped-statement name="getLoanNomineeDetails" result-map="getNomineeTOResultTL" >
        SELECT * FROM LOANS_NOMINEE_DETAIL WHERE ACT_NUM = (SELECT MAX(ACT_NUM) FROM LOANS_NOMINEE_DETAIL
        WHERE ACT_NUM IN (SELECT ACCT_NUM FROM LOANS_FACILITY_DETAILS LFD, LOANS_BORROWER LB
        WHERE LFD.BORROW_NO=LB.BORROW_NO AND CUST_ID=#CUST_ID:VARCHAR#))
    </mapped-statement>
     
    <mapped-statement name="getLoanAccountNoAuthorizeDt" result-class="java.util.HashMap">
        SELECT AUTHORIZE_DT_1 AS AUTHORIZE_DT FROM LOANS_FACILITY_DETAILS WHERE STATUS!='DELETED' AND ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
     
    <mapped-statement name="getLoanProductFromDepositProduct" result-class="java.util.HashMap">
        SELECT DA.DEPOSIT_NO AS DEPOSIT_NO,LP.PROD_ID AS 
        LOAN_PRODUCT,DA.PROD_ID AS DEPOSIT_PRODUCT,LP.ACCT_HEAD AS 
        LOAN_ACCOUNT_HEAD, C.CUST_ID AS CUSTOMER_ID,get_cust_name(c.cust_id) AS CUSTOMER_NAME,MEMBERSHIP_NO,
        AVAILABLE_BALANCE AS DEPOSIT_AVAILABLE_BALANCE,CLEAR_BALANCE,RATE_OF_INT AS DEPOSIT_INT,CATEGORY,MATURITY_DT,DEPOSIT_AMT,TOTAL_INT_CREDIT,MATURITY_AMT FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA 
        ,DEPOSITS_PRODUCT DP,LOAN_PROD_AGAINST_AV_DEPOSIT LV,LOANS_PRODUCT LP  ,CUSTOMER C
        WHERE DSA.DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# AND DA.DEPOSIT_NO=DSA.DEPOSIT_NO AND ACCT_STATUS 
        !='CLOSED' AND DA.PROD_ID=DP.PROD_ID AND  C.CUST_ID=DA.CUST_ID AND 
        LV.SELECTED_DEPOSITS=DP.PROD_DESC AND LV.PROD_ID=LP.PROD_ID
    </mapped-statement>
      
    <mapped-statement name="getDepositAndLienDetails" result-class="java.util.HashMap">
        SELECT  DL.DEPOSIT_NO AS DEPOSIT_NO,DL.LIEN_AC_HD AS LOAN_ACHD ,DL.LIEN_PROD_ID AS LOAN_PRODID ,DA.PROD_ID AS DEPOSIT_PRODID FROM DEPOSIT_LIEN DL ,DEPOSIT_ACINFO DA
        WHERE DA.DEPOSIT_NO=DL.DEPOSIT_NO AND LIEN_AC_NO=#ACCT_NO:VARCHAR# AND DL.STATUS IN('CREATED','MODIFIED')
        AND (DL.AUTHORIZE_STATUS IS NULL OR DL.AUTHORIZE_STATUS='AUTHORIZED') 
    </mapped-statement>
    
    <mapped-statement name="getLastPaidDate" result-class="java.util.HashMap">
        SELECT INSTALLMENT_DT AS LASTPAID_INSTALLMENT_DT FROM LOANS_INSTALLMENT WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND STATUS !='DELETED' AND 
        INSTALLMENT_DT IN (SELECT MAX(INSTALLMENT_DT) FROM LOANS_INSTALLMENT WHERE ACCT_NUM =#ACCT_NUM:VARCHAR# AND STATUS !='DELETED' AND 
        BALANCE_AMT  &gt; =#LOAN_BALANCE_PRINCIPAL:NUMBER#)
    </mapped-statement>
     
    <mapped-statement name="getNextInstallmentDueDate" result-class="java.util.HashMap">
        SELECT MIN(INSTALLMENT_DT) NEXT_INSTALLMENT_DT 
        FROM LOANS_INSTALLMENT WHERE ACCT_NUM =#ACCT_NUM:VARCHAR# AND STATUS !='DELETED' AND 
        INSTALLMENT_DT &gt; #LASTPAID_INSTALLMENT_DT:DATE#
    </mapped-statement>
     
    <mapped-statement name="getLastInstallmentDate" result-class="java.util.HashMap">
        SELECT MAX(INSTALLMENT_DT) AS LAST_INSTALLMENT_DT 
        FROM LOANS_INSTALLMENT
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND STATUS !='DELETED' AND INSTALLMENT_DT &lt;=#CURR_DT:DATE# 
    </mapped-statement>       
      
    <mapped-statement name="getDepositLoanInEdit" result-class="java.util.HashMap">
        SELECT DA.DEPOSIT_NO,DSA.DEPOSIT_AMT,DSA.RATE_OF_INT, DSA.MATURITY_AMT, DSA.MATURITY_DT,DSA.TOTAL_INT_CREDIT,DSA.AVAILABLE_BALANCE
        FROM DEPOSIT_ACINFO DA ,DEPOSIT_SUB_ACINFO DSA WHERE   
        DA.DEPOSIT_NO =(SELECT DEPOSIT_NO FROM DEPOSIT_LIEN WHERE DA.DEPOSIT_NO=DEPOSIT_NO AND (STATUS ='CREATED' OR STATUS !='UNLIENED') AND 
        (AUTHORIZE_STATUS IS NULL OR AUTHORIZE_STATUS != 'REJECTED') AND 
        LIEN_AC_NO=#value:VARCHAR#)
        AND  DSA.DEPOSIT_NO=DA.DEPOSIT_NO
            <!--
            
                        SELECT C.CUST_ID,C.MEMBERSHIP_NO,DA.DEPOSIT_NO,DSA.DEPOSIT_AMT,get_cust_name(C.CUST_ID) AS "CUSTOMER NAME"  
            FROM DEPOSIT_ACINFO DA ,CUSTOMER C ,DEPOSIT_SUB_ACINFO DSA WHERE   
            DA.DEPOSIT_NO =(SELECT DEPOSIT_NO FROM DEPOSIT_LIEN WHERE DA.DEPOSIT_NO=DEPOSIT_NO AND (STATUS ='CREATED' OR STATUS !='UNLIENED') AND 
            (AUTHORIZE_STATUS IS NULL OR AUTHORIZE_STATUS != 'REJECTED') AND 
            LIEN_AC_NO=#value#)
            AND C.CUST_ID=DA.CUST_ID AND DSA.DEPOSIT_NO=DA.DEPOSIT_NO -->
    </mapped-statement>   
      
    <mapped-statement name="insertLoansRenewalFacilityDetails" result-class="java.util.HashMap">
        INSERT INTO LOANS_RENEWAL_FACILITY_DETAILS (
        BORROW_NO, SANCTION_NO, SL_NO, PROD_ID, SECURITY_TYPE, SECURITY_DETAILS, ACCOUNT_TYPE, INTEREST_NATURE, INTEREST_TYPE, 
        ACCOUNT_LIMIT, RISK_WEIGHT, DEMAND_PROM_DT, DEMAND_PROM_EXPDT, MULTI_DISBURSE, AOD_DT, PURPOSE_DESC, GROUP_DESC, INTEREST,
        CONTACT_PERSON, CONTACT_PHONE, REMARKS, AUTHORIZE_STATUS_1, AUTHORIZE_REMARKS_1, STATUS, ACCT_NUM, AUTHORIZE_BY_1, 
        AUTHORIZE_DT_1, CREATE_DT, STATUS_BY, STATUS_DT, AVAILABLE_BALANCE, CLEAR_BALANCE, UNCLEAR_BALANCE, SHADOW_DEBIT,
        SHADOW_CREDIT, TOTAL_BALANCE, LAST_TRANS_DT, BRANCH_ID, ACCT_STATUS, INT_GET_FROM, LOAN_BALANCE_PRINCIPAL, LOAN_PAID_INT,
        LOAN_PAID_PENALINT, EXCESS_AMT, LAST_REPAY_DT, AUTHORIZE_STATUS_2, AUTHORIZE_REMARKS_2, AUTHORIZE_BY_2, AUTHORIZE_DT_2, 
        CREATED_BY, ACCT_NAME,ACCT_OPEN_DT,RECOMMANDED_BY,LAST_INT_CALC_DT,DRAWING_POWER,POF_ATTORNEY,AUTH_SIGNATORY,DOC_DETAILS,ACCT_TRANSFER,RENEWAL_DT)

        (SELECT BORROW_NO, SANCTION_NO, SL_NO, PROD_ID, SECURITY_TYPE, SECURITY_DETAILS, ACCOUNT_TYPE, INTEREST_NATURE, INTEREST_TYPE, 
        ACCOUNT_LIMIT, RISK_WEIGHT, DEMAND_PROM_DT, DEMAND_PROM_EXPDT, MULTI_DISBURSE, AOD_DT, PURPOSE_DESC, GROUP_DESC, INTEREST,
        CONTACT_PERSON, CONTACT_PHONE, REMARKS, AUTHORIZE_STATUS_1, AUTHORIZE_REMARKS_1, STATUS, ACCT_NUM, AUTHORIZE_BY_1, 
        AUTHORIZE_DT_1, CREATE_DT, STATUS_BY, STATUS_DT, AVAILABLE_BALANCE, CLEAR_BALANCE, UNCLEAR_BALANCE, SHADOW_DEBIT,
        SHADOW_CREDIT, TOTAL_BALANCE, LAST_TRANS_DT, BRANCH_ID, ACCT_STATUS, INT_GET_FROM, LOAN_BALANCE_PRINCIPAL, LOAN_PAID_INT,
        LOAN_PAID_PENALINT, EXCESS_AMT, LAST_REPAY_DT, AUTHORIZE_STATUS_2, AUTHORIZE_REMARKS_2, AUTHORIZE_BY_2, AUTHORIZE_DT_2, 
        CREATED_BY, ACCT_NAME,ACCT_OPEN_DT,RECOMMANDED_BY,LAST_INT_CALC_DT,DRAWING_POWER,POF_ATTORNEY,AUTH_SIGNATORY,DOC_DETAILS,ACCT_TRANSFER,(SELECT SYS_DATE() FROM DUAL) FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM=#ACCT_NUM:VARCHAR# )

    </mapped-statement>  
      
    <mapped-statement name="insertLoansRenewalSanctionDetails" result-class="java.util.HashMap">
        INSERT INTO LOANS_SANCTION_RENEWAL_DETAILS
        (BORROW_NO, SANCTION_NO, SL_NO, FACILITY_TYPE, "limit", FROM_DT, TO_DT, STATUS, NO_INSTALL, REPAYMENT_FREQUENCY, PRODUCT_ID, REPAYMENT_DT, 
        MORATORIUM_GIVEN, NO_MORATORIUM, STATUS_BY, STATUS_DT,INITIAL_MONEY_DEPOSIT,RENEWAL_DT
        ) 
        (SELECT BORROW_NO, SANCTION_NO, SL_NO, FACILITY_TYPE, "limit", FROM_DT, TO_DT, STATUS, NO_INSTALL, REPAYMENT_FREQUENCY, PRODUCT_ID, REPAYMENT_DT, 
        MORATORIUM_GIVEN, NO_MORATORIUM, STATUS_BY, STATUS_DT,INITIAL_MONEY_DEPOSIT,(SELECT SYS_DATE() FROM DUAL) FROM LOANS_SANCTION_DETAILS WHERE BORROW_NO=#BORROW_NO:VARCHAR#)
        
    </mapped-statement>  
      
    <mapped-statement name="updateLoansSanctionDetails" result-class="java.util.HashMap">
        UPDATE LOANS_SANCTION_DETAILS LSD SET 
        OD_RENEWAL =NULL WHERE  LSD.BORROW_NO =(SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS LFD WHERE LFD.BORROW_NO=LSD.BORROW_NO AND ACCT_NUM=#ACCT_NUM:VARCHAR#)
    </mapped-statement> 
          
      <!--
        <dynamic-mapped-statement name="getGahanDetailsforLoan" result-class="java.util.HashMap">
            SELECT GCD.DOCUMENT_NO, MEMBERSHIP_NO,  DECODE (CUST.CUST_TYPE,  'INDIVIDUAL', CUST.FNAME || ' ' || CUST.MNAME || 
            ' ' || CUST.LNAME,  CUST.COMP_NAME ) AS "CUSTOMER",  MEMBERSHIP_CLASS, CUST.CUST_ID ,GCD.DOCUMENT_GEN_ID FROM CUSTOMER CUST, 
            GAHAN_CUSTOMER_DETAILS GCD,  GAHAN_DOCUMENT_DETAILS GDD  WHERE CUST.STATUS != 'DELETED'  AND CUST.CUST_ID = 
            GCD.CUST_ID  AND GCD.DOCUMENT_GEN_ID = GDD.DOCUMENT_GEN_ID  AND CUST.AUTHORIZE_STATUS = 'AUTHORIZED'  AND 
            GDD.STATUS !='DELETED' AND GDD.AUTHORIZE_STATUS ='AUTHORIZED' AND GDD.GAHAN_RELEASE !='Y'  
            <dynamic>
                <isParameterPresent>
                    <isNotNull prepend="AND" property="DOCUMENT_NO">
                        GDD.DOCUMENT_NO=#DOCUMENT_NO#
                    </isNotNull>
                </isParameterPresent>
                
                <isParameterPresent>
                    <isNotNull prepend="AND" property="MEMBERSHIP_NO">
                        MEMBERSHIP_NO=#MEMBERSHIP_NO#
                    </isNotNull>
                </isParameterPresent>
                
                <isParameterPresent>
                   <isNotEmpty prepend=" AND GDD.DOCUMENT_NO NOT IN ( " property="ENTERED_DOCUMENT_NO">
                         $ENTERED_DOCUMENT_NO$ )
                   </isNotEmpty>
                </isParameterPresent>
            </dynamic>
            AND MEMBERSHIP_NO IS NOT NULL ORDER BY CUST.CUST_ID
        </dynamic-mapped-statement> 
        
        
    -->
        
        
    <dynamic-mapped-statement name="getGahanDetailsforLoan" result-class="java.util.LinkedHashMap">
        SELECT PLEDGE_NO,gt.DOCUMENT_NO, MEMBERSHIP_NO,  get_cust_name(cust.cust_id) AS "CUSTOMER",  
        MEMBERSHIP_CLASS, CUST.CUST_ID ,GCD.DOCUMENT_GEN_ID FROM CUSTOMER CUST,gahan_doc_table gt,
        GAHAN_CUSTOMER_DETAILS GCD,  GAHAN_DOCUMENT_DETAILS GDD  WHERE CUST.STATUS != 'DELETED'  AND CUST.CUST_ID = 
        GCD.CUST_ID  AND GCD.DOCUMENT_GEN_ID = GDD.DOCUMENT_GEN_ID  AND CUST.AUTHORIZE_STATUS = 'AUTHORIZED'  AND 
        GDD.STATUS !='DELETED' AND GDD.AUTHORIZE_STATUS ='AUTHORIZED' AND GDD.GAHAN_RELEASE !='Y' and gt.document_gen_id=gcd.document_gen_id
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="DOCUMENT_NUMBER">
                    gt.DOCUMENT_NO=#DOCUMENT_NUMBER:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="MEMBERSHIP_NUMBER">
                    MEMBERSHIP_NO=#MEMBERSHIP_NUMBER:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotEmpty prepend=" AND GDD.PLEDGE_NO NOT IN ( " property="ENTERED_DOCUMENT_NO">
                    $ENTERED_DOCUMENT_NO$ )
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        AND MEMBERSHIP_NO IS NOT NULL
          <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER">
                    UPPER(get_cust_name(CUST.CUST_ID)) LIKE UPPER('%$CUSTOMER$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PLEDGE_NO">
                    UPPER(PLEDGE_NO) LIKE UPPER('%$PLEDGE_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="DOCUMENT_NO">
                    UPPER(gt.DOCUMENT_NO) LIKE UPPER('%$DOCUMENT_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBERSHIP_CLASS">
                    UPPER(MEMBERSHIP_CLASS) LIKE UPPER('%$MEMBERSHIP_CLASS$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(CUST.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="DOCUMENT_GEN_ID">
                    UPPER(GCD.DOCUMENT_GEN_ID) LIKE UPPER('%$DOCUMENT_GEN_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBERSHIP_NO">
                    UPPER(MEMBERSHIP_NO) LIKE UPPER('%$MEMBERSHIP_NO$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        ORDER BY CUST.CUST_ID
    </dynamic-mapped-statement> 
       
    <mapped-statement name="getGahanJointDetailsforLoan" result-class="java.util.HashMap">
        SELECT  GJ.CUST_ID, GJ.CONSTITUTION ,get_cust_name(c.cust_id) AS "CUSTOMER"
        FROM GAHAN_JOINT GJ,CUSTOMER C
        WHERE GJ.STATUS != 'DELETED'  AND  C.STATUS != 'DELETED'  AND C.CUST_ID=GJ.CUST_ID AND
        DOCUMENT_GEN_ID IN (SELECT DOCUMENT_GEN_ID FROM GAHAN_CUSTOMER_DETAILS
        WHERE CUST_ID = (SELECT CUST_ID
        FROM CUSTOMER WHERE MEMBERSHIP_NO = #MEMBER_NO:VARCHAR#))
    </mapped-statement> 

    <mapped-statement name="getGahanJointDetailsforLoanFromGahan" result-class="java.util.HashMap">
        SELECT  GJ.CUST_ID, GJ.CONSTITUTION ,get_cust_name(c.cust_id) AS "CUSTOMER"
        FROM GAHAN_JOINT GJ,CUSTOMER C
        WHERE GJ.STATUS != 'DELETED'  AND  C.STATUS != 'DELETED'  AND C.CUST_ID=GJ.CUST_ID AND
        DOCUMENT_GEN_ID=#DOCUMENT_GEN_ID:VARCHAR#
    </mapped-statement> 

    <mapped-statement name="getGahanAvailableSecurityforLoan" result-class="java.util.HashMap">
        <!-- SELECT NVL(TOT_SECURITY_VALUE,0) - NVL(PLEDGED_AMOUNT,0) AS AVAILABLE_SECURITY_VALUE FROM
        (SELECT SUM(PLEDGE_AMT) AS TOT_SECURITY_VALUE FROM GAHAN_DOCUMENT_DETAILS WHERE DOCUMENT_GEN_ID=#DOC_GEN_ID#) A,
        (SELECT SUM(PLEDGE_AMOUNT) AS PLEDGED_AMOUNT FROM LOANS_SECURITY_LAND WHERE STATUS !='DELETED' AND AUTHORIZED_STATUS='AUTHORIZED' AND  DOCUMENT_GEN_ID = #DOC_GEN_ID#) B -->
        SELECT NVL(PLEDGE_AMT,0) AS AVAILABLE_SECURITY_VALUE FROM GAHAN_DOCUMENT_DETAILS WHERE DOCUMENT_GEN_ID=#DOC_GEN_ID:VARCHAR#
    </mapped-statement> 
        
    <mapped-statement name="getGahanAvailableOrNot" result-class="java.util.HashMap">
        SELECT * FROM GAHAN_DOCUMENT_DETAILS  WHERE STATUS !='DELETED'  AND AUTHORIZE_STATUS ='AUTHORIZED' AND DOCUMENT_NO=#DOCUMENT_NO:VARCHAR#
    </mapped-statement> 
      
    <dynamic-mapped-statement name="getSelGahanForLn" result-class="java.util.HashMap">
        select sum(CLEAR_BALANCE) as clearBal from LOANS_FACILITY_DETAILS where ACCT_NUM in 
        (select ACCT_NUM from LOANS_SECURITY_LAND where DOCUMENT_GEN_ID=#DOC_GEN_ID:VARCHAR#) 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="LOAN_RENEWAL">
                    ACCT_STATUS NOT IN ('CLOSED')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement> 
    
    <mapped-statement name="getSelGahanForMds" result-class="java.util.HashMap">
        Select sum((NO_OF_INSTALLMENTS - paidInst)*INSTALLMENT_AMOUNT) as amount
        from 
        (select sum(NO_OF_INST) as paidInst,CHITTAL_NO,NO_OF_INSTALLMENTS,INSTALLMENT_AMOUNT from 
        MDS_TRANS_DETAILS join MDS_SCHEME_DETAILS
        on MDS_TRANS_DETAILS.SCHEME_NAME=MDS_SCHEME_DETAILS.SCHEME_NAME
        where MDS_TRANS_DETAILS.AUTHORIZE_STATUS IN ('AUTHORIZED')    
        group By CHITTAL_NO,NO_OF_INSTALLMENTS,INSTALLMENT_AMOUNT
        having 
        CHITTAL_NO in (Select CHITTAL_NO from MDS_SECURITY_LAND where DOCUMENT_GEN_ID=#DOC_GEN_ID:VARCHAR#)
        ) a
    </mapped-statement>  
      
    <mapped-statement name="getMDSCaseChargeDetails" result-class="java.util.HashMap" >
        SELECT SUM (NVL(AMOUNT,0)-NVL(PAID_AMT,0)) AS CHARGE_AMT,CHARGE_TYPE,CHARGE_NO FROM LOANS_ACCT_CHARGE_DETAILS WHERE ACT_NUM=#ACT_NUM:VARCHAR#
        AND STATUS !='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED' AND CHARGE_TYPE NOT IN('NOTICE CHARGES','POSTAGE CHARGES')
        GROUP BY CHARGE_TYPE,CHARGE_NO ORDER BY CHARGE_TYPE
    </mapped-statement>
        
    <mapped-statement name="getMDSNoticeChargeDetails" result-class="java.util.HashMap" >
        SELECT SUM (NVL(AMOUNT,0)-NVL(PAID_AMT,0)) AS CHARGE_AMT,CHARGE_TYPE,CHARGE_NO FROM LOANS_ACCT_CHARGE_DETAILS WHERE ACT_NUM=#ACT_NUM:VARCHAR#
        AND STATUS !='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED' AND CHARGE_TYPE IN('NOTICE CHARGES','POSTAGE CHARGES')
        GROUP BY CHARGE_TYPE,CHARGE_NO ORDER BY CHARGE_TYPE 
    </mapped-statement>
        
    <mapped-statement name="getLoanProductAuthRemarks" result-class="java.util.LinkedHashMap" >
        SELECT PROD_DESC,AUTHORIZE_REMARK,ACCT_HEAD FROM LOANS_PRODUCT WHERE STATUS!='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED' AND PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getMDSLoanProductSchemes" result-map="MDS_get-ProdId-result" >
        SELECT   scheme_name AS prod_id, scheme_desc AS prod_desc
        FROM mds_scheme_details msd
        WHERE status != 'DELETED' AND authorized_status = 'AUTHORIZED' and MSD.SCHEME_END_DT >=(select DE.CURR_APPL_DT  from day_end de  where MSD.BRANCH_CODE = DE.BRANCH_CODE  ) 
        ORDER BY scheme_name
    </mapped-statement>
    
    <mapped-statement name="getMDSLoanProductSchemesNew" result-map="MDS_get-ProdId-result" >
        SELECT MSD.SCHEME_NAME,MSD.SCHEME_DESC FROM MDS_PRIZED_MONEY_DETAILS MPD
        JOIN MDS_SCHEME_DETAILS MSD ON MSD.SCHEME_NAME = MPD.SCHEME_NAME WHERE MPD.DRAW_AUCTION_DATE > (SELECT LAST_DAY(ADD_MONTHS(DE.CURR_APPL_DT,-1))+ 1     FROM DAY_END DE)
    </mapped-statement>
    
    <mapped-statement name="getPaddyLoanProductID" result-map="MDS_get-ProdId-result" >
        SELECT ITEM_CODE AS PROD_ID,ITEM_DESC AS PROD_DESC FROM PADDY_ITEM_OPENING WHERE STATUS != 'DELETED' 
        AND AUTHORIZE_STATUS='AUTHORIZED' ORDER BY ITEM_CODE
    </mapped-statement>

                
    <result-map name="MDS_get-ProdId-result" class="com.see.truetransact.transferobject.common.lookup.LookUpTO">
        <property name="lookUpRefID" column="PROD_ID" />
        <property name="lookUpDesc" column="PROD_DESC" />
    </result-map> 
        
    <mapped-statement name="getMDSLoanProdId" result-class="java.util.HashMap" >
        SELECT SCHEME_NAME AS MDS_PROD_ID FROM MDS_APPLICATION WHERE CHITTAL_NO=#CHITTAL_NO:VARCHAR#           
    </mapped-statement>
    <mapped-statement name="getMdsAuthorizeRemark" result-class="java.util.HashMap" >
        SELECT AUTHORIZE_REMARK AS AUTHORIZE_REMARK FROM LOANS_PRODUCT WHERE AUTHORIZE_STATUS = 'AUTHORIZED' and AUTHORIZE_STATUS != 'REJECTED' and PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getPaddyLoanProdId" result-class="java.util.HashMap" >
        SELECT PRODUCT_CODE AS PADDY_PROD_ID FROM PADDY_PURCHASE_MASTER WHERE CND_NUMBER=#CND_NUMBER:VARCHAR#        
    </mapped-statement>
        
    <mapped-statement name="getShareIMBPAmount" result-class="java.util.HashMap">
        SELECT NVL(IMBP,0) AS IMBP_AMOUNT FROM SHARE_ACCT WHERE CUST_ID=#CUST_ID:VARCHAR# AND STATUS!='DELETED' AND AUTHORIZE='AUTHORIZED'
    </mapped-statement>    
    <mapped-statement name="getFuncShareIMBPAmount" result-class="java.util.HashMap">
        SELECT GET_MEMBER_ELIGBLELOANAMT(#MEM_NO:VARCHAR#,#DATE:DATE#) AS IMBP_AMOUNT FROM DUAL
    </mapped-statement>
    
    <mapped-statement name="getTotalSanctionAmountOnlyTL" result-class="java.util.HashMap">
        SELECT ACCT_NUM,"limit" AS SANCTION_AMOUNT FROM 
        LOANS_FACILITY_DETAILS LFD,LOANS_SANCTION_DETAILS LSD,LOANS_BORROWER LB
        WHERE LB.STATUS!='DELETED' AND LB.AUTHORIZE_STATUS='AUTHORIZED' AND LFD.ACCT_STATUS!='CLOSED' AND
        LB.BORROW_NO = LSD.BORROW_NO AND LFD.BORROW_NO = LSD.BORROW_NO AND  LB.CUST_ID=#CUST_ID:VARCHAR# 
        AND LB.BORROW_NO IN (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN (SELECT PROD_ID FROM 
        LOANS_PRODUCT WHERE BEHAVES_LIKE!='LOANS_AGAINST_DEPOSITS' AND AUTHORIZE_REMARK NOT IN('GOLD_LOAN','MDS_LOAN','PADDY_LOAN')))
    </mapped-statement>
        
    <mapped-statement name="getLockStatusDetails" result-class="java.util.HashMap" >
        SELECT SALARY_RECOVERY,LOCK_STATUS FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #LOAN_NO:VARCHAR# AND STATUS!='DELETED'
    </mapped-statement>
        
    <mapped-statement name="getLoanExpDate" result-class="java.util.HashMap" >
        SELECT A.*,B.* FROM
        (SELECT IBAL ,TRANS_SLNO,TRN_CODE,PBAL,TRANS_DT,PRINCIPLE,INTEREST FROM ADV_TRANS_DETAILS WHERE TRANS_SLNO IN 
        (SELECT MAX(TRANS_SLNO) FROM ADV_TRANS_DETAILS WHERE ACT_NUM = #ACT_NUM:VARCHAR#) AND ACT_NUM = #ACT_NUM:VARCHAR#)A,  
        (SELECT FROM_DT,TO_DT FROM LOANS_SANCTION_DETAILS WHERE BORROW_NO=(SELECT BORROW_NO FROM 
        LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #ACT_NUM:VARCHAR#)) B
    </mapped-statement>
    
    <mapped-statement name="getLoanExpDate1" result-class="java.util.HashMap" >
        SELECT A.*,B.* FROM
        (SELECT IBAL ,TRANS_SLNO,TRN_CODE,PBAL,TRANS_DT,PRINCIPLE,INTEREST FROM ADV_TRANS_DETAILS WHERE TRANS_SLNO IN 
        (SELECT MAX(TRANS_SLNO) FROM ADV_TRANS_DETAILS WHERE ACT_NUM = #ACT_NUM:VARCHAR#) AND ACT_NUM = #ACT_NUM:VARCHAR#)A,  
        (SELECT FROM_DT,TO_DT FROM LOANS_SANCTION_DETAILS WHERE BORROW_NO=(SELECT BORROW_NO FROM 
        LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #ACT_NUM:VARCHAR#)) B
    </mapped-statement>

        
    <!--================================================================================-->
    <dynamic-mapped-statement name="getSubsidyProvisionDetails" result-class="java.util.LinkedHashMap" >
            
        SELECT ACCT_NUM , get_cust_name(C.CUST_ID)  as "Name" ,
        SUBSIDY_ADJUST_ACHD,SUBSIDY_AMT ,DECODE(SUBSIDY_ADJUSTED_AMT,NULL,SUBSIDY_AMT,SUBSIDY_AMT-SUBSIDY_ADJUSTED_AMT) AS "TRANS_AMT",
        SUBSIDY_DT FROM LOANS_FACILITY_DETAILS LFD,LOANS_BORROWER LB,
        CUSTOMER C WHERE C.CUST_ID=LB.CUST_ID AND C.STATUS !='DELETED' AND LB.BORROW_NO =LFD.BORROW_NO AND LFD.STATUS !='DELETED' AND 
        LFD.ACCT_STATUS !='CLOSED' AND LFD.AUTHORIZE_STATUS_1='AUTHORIZED' AND SUBSIDY_AMT!=NVL(SUBSIDY_ADJUSTED_AMT ,0)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="PROD_ID">
                    LFD.PROD_ID =#PROD_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend="AND" property="FROM_ACCT_NUM" >
                    LFD.ACCT_NUM BETWEEN #FROM_ACCT_NUM:VARCHAR# AND #TO_ACCT_NUM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
                
            <isParameterPresent>
                <isNotNull prepend ="AND" property="ADD_NEW_RECORDS">
                    LFD.ACCT_NUM NOT IN( $ADD_NEW_RECORDS$)
                </isNotNull>       
            </isParameterPresent>
                
        </dynamic>     
        ORDER BY LFD.ACCT_NUM,LFD.PROD_ID
    </dynamic-mapped-statement>
        
    <mapped-statement name="insertTermLoanSubsidyDetailsTO" inline-parameters="true">
        INSERT INTO LOANS_ACCT_SUBSIDY_DETAILS

        (ACCT_NUM, ADJUST_ACHEAD,SUBSIDY_AMT,TRANS_AMT, SUBSIDY_ADJUST_DT, STATUS, STATUS_DT,STATUS_BY,SUBSIDY_ID,BRANCH_CODE
        ) VALUES (
        #acctNum:VARCHAR#, #adjustAchd:VARCHAR#, #subsidyAmt:NUMERIC#, #transAmt:NUMERIC#, #subsidyDt:DATE#, #status:VARCHAR#, #statusDt:DATE#, 
        #statusBy:VARCHAR#,#subsidyId:VARCHAR#,#branchCode:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="updateTermLoanSubsidyDetailsTO" inline-parameters="true">
        UPDATE LOANS_ACCT_SUBSIDY_DETAILS SET

        ACCT_NUM =#acctNum:VARCHAR#, 
        ADJUST_ACHEAD=#adjustAchd:VARCHAR#,
        SUBSIDY_AMT=#subsidyAmt:NUMERIC#,
        TRANS_AMT=#transAmt:NUMERIC#,
        SUBSIDY_ADJUST_DT=#subsidyDt:DATE#,
        STATUS=#status:VARCHAR#, 
        STATUS_DT=#statusDt:DATE#,
        STATUS_BY=#statusBy:VARCHAR#,
        BRANCH_CODE=#branchCode#
        WHERE
        ACCT_NUM =#acctNum:VARCHAR# AND SUBSIDY_ID=#subsidyId:VARCHAR# AND  STATUS !='DELETED' AND (AUTHORIZE_STATUS NOT IN  ('REJECTED','AUTHORIZED') OR
        AUTHORIZE_STATUS IS NULL)
                  
    </mapped-statement>
    
    <mapped-statement name="updateTermLoanSubsidyAuthorizeDetailsTO" inline-parameters="true">
        UPDATE LOANS_ACCT_SUBSIDY_DETAILS SET
        AUTHORIZE_STATUS =#authorizeStatus:VARCHAR#,
        AUTHORIZE_BY =#authorizeBy:VARCHAR#,
        AUTHORIZE_DT =#authorizeDate:DATE#
        WHERE
        ACCT_NUM =#acctNum:VARCHAR# AND SUBSIDY_ID=#subsidyId:VARCHAR# AND  STATUS !='DELETED' AND (AUTHORIZE_STATUS NOT IN  ('REJECTED','AUTHORIZED') OR
        AUTHORIZE_STATUS IS NULL)
                  
    </mapped-statement>
    
    <dynamic-mapped-statement name="getEditTermLoanSubsidyDetailsTO" result-class="java.util.LinkedHashMap" >
        SELECT SUBSIDY_ID,ACCT_NUM,ADJUST_ACHEAD,SUBSIDY_AMT,TRANS_AMT,SUBSIDY_ADJUST_DT FROM LOANS_ACCT_SUBSIDY_DETAILS LAS WHERE   STATUS != 'DELETED' AND (AUTHORIZE_STATUS NOT IN  ('REJECTED','AUTHORIZED') OR
        AUTHORIZE_STATUS IS NULL)
        AND BRANCH_CODE=#BRANCH_CODE:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend ="AND" property="AUTHORIZE">
                    cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
                    FROM USER_MASTER UM, ROLE_MASTER RM 
                    WHERE RM.ROLE_ID = UM.USER_ROLE AND  RM.GROUP_ID=UM.USER_GROUP AND UM.USER_ID = LAS.STATUS_BY)
                    AND LAS.STATUS_BY!= #USER_ID:VARCHAR# 
                </isNotNull>       
            </isParameterPresent>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="SUBSIDY_ID">
                    UPPER(SUBSIDY_ID) LIKE UPPER('%$SUBSIDY_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="ACCT_NUM">
                    UPPER(ACCT_NUM) LIKE UPPER('%$ACCT_NUM$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="ADJUST_ACHEAD">
                    UPPER(ADJUST_ACHEAD) LIKE UPPER('%$ADJUST_ACHEAD$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="SUBSIDY_AMT">
                    UPPER(SUBSIDY_AMT) LIKE UPPER('%$SUBSIDY_AMT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="TRANS_AMT">
                    UPPER(TRANS_AMT) LIKE UPPER('%$TRANS_AMT$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="SUBSIDY_ADJUST_DT">
                    UPPER(SUBSIDY_ADJUST_DT) LIKE UPPER('%$SUBSIDY_ADJUST_DT$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY SUBSIDY_ID
    </dynamic-mapped-statement>
    
    <mapped-statement name="getSelectTermLoanSubsidyDetailsTO" result-class="java.util.LinkedHashMap" >
        SELECT LASD.ACCT_NUM , get_cust_name(C.CUST_ID)  as "Name" ,
        ADJUST_ACHEAD AS "SUBSIDY_ADJUST_ACHD",LASD.SUBSIDY_AMT ,LASD.TRANS_AMT,SUBSIDY_ADJUST_DT AS "SUBSIDY_DT" FROM LOANS_ACCT_SUBSIDY_DETAILS LASD ,
        LOANS_FACILITY_DETAILS LFD, LOANS_BORROWER LB, CUSTOMER C WHERE SUBSIDY_ID = #SUBSIDY_ID:VARCHAR# 
        AND LASD.STATUS != 'DELETED' AND (LASD.AUTHORIZE_STATUS NOT IN  ('REJECTED','AUTHORIZED') OR
        LASD.AUTHORIZE_STATUS IS NULL) AND LFD.ACCT_NUM =LASD.ACCT_NUM AND LB.BORROW_NO =LFD.BORROW_NO AND C.CUST_ID =LB.CUST_ID
        AND LASD.BRANCH_CODE=#BRANCH_CODE:VARCHAR# 
           
    </mapped-statement>
     
    <result-map name="getSelectTermLoanSubsidyDetailsTOResult" class="com.see.truetransact.transferobject.termloan.loansubsidy.TermLoanSubsidyTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="adjustAchd" column="ADJUST_ACHEAD"/>
        <property name="subsidyAmt" column="SUBSIDY_AMT"/>
        <property name="transAmt" column="TRANS_AMT"/>
        <property name="subsidyDt" column="SUBSIDY_ADJUST_DT"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="subsidyId" column="SUBSIDY_ID"/>
        <property name="branchCode" column="BRANCH_CODE"/>
    </result-map>
    
    <!--================================================================================-->
    <mapped-statement name="SelectTermLoanSubsidyAcctHeadDeatils" result-class="java.util.HashMap" >
        SELECT * FROM LOANS_FACILITY_DETAILS LF, LOANS_PRODUCT LP WHERE 
        EXISTS(SELECT PROD_ID  FROM LOANS_FACILITY_DETAILS LFD WHERE LFD.PROD_ID= LP.PROD_ID AND LF.ACCT_NUM=ACCT_NUM)
        AND LP.PROD_ID =LF.PROD_ID AND LF.ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
       
    <mapped-statement name="updateTermLoanFacilityDetailsTO" result-class="java.util.HashMap" >
        UPDATE LOANS_FACILITY_DETAILS SET SUBSIDY_DT=#CURR_DT:DATE# ,SUBSIDY_ADJUSTED_AMT= NVL(SUBSIDY_ADJUSTED_AMT,0) + #TRANS_AMT:NUMBER#  WHERE  ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateTermLoanFacilityWaiveofDetailsTO" result-class="java.util.HashMap" >
        UPDATE LOANS_FACILITY_DETAILS SET PENAL_WAIVE_OFF ='Y' ,PENAL_WAIVE_AMT= NVL(PENAL_WAIVE_AMT,0) + #PENAL_TRANS_AMT:NUMBER# ,
        INTEREST_WAIVE_AMT= NVL(INTEREST_WAIVE_AMT,0) + #INTEREST_TRANS_AMT:NUMBER# ,PENAL_WAIVE_DT=#CURR_DT:DATE#
        WHERE  ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateTermLoanFacilityNoticeWaiveofDetailsTO" result-class="java.util.HashMap" >
        UPDATE LOANS_FACILITY_DETAILS SET NOTICE_WAIVE_OFF ='Y' ,NOTICE_WAIVE_AMT= NVL(NOTICE_WAIVE_AMT,0) + #WAIVE_TRANS_AMT:NUMBER# ,
        NOTICE_WAIVE_DT=#CURR_DT:DATE#
        WHERE  ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateTermLoanFacilityPrincipalWaiveofDetailsTO" result-class="java.util.HashMap" >
        UPDATE LOANS_FACILITY_DETAILS SET PRINCIPAL_WAIVE_AMT= NVL((PRINCIPAL_WAIVE_AMT,0) + #WAIVE_TRANS_AMT:NUMBER# 
        WHERE  ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateTermLoanFacilityRebateDetailsTO" result-class="java.util.HashMap" >
        UPDATE LOANS_FACILITY_DETAILS SET REBATE_AMT= NVL(REBATE_AMT,0) + #REBATE_AMT:NUMBER# ,
        REBATE_DT=#CURR_DT:DATE#
        WHERE  ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="insertTermLoanInterestWaiveOffTO" inline-parameters="true">
        INSERT INTO LOAN_INTEREST_WAIVE_OFF
        (ACCT_NUM, WAIVE_OFF_DT, INTEREST_WAIVE , PENAL_WAIVE, STATUS, STATUS_BY,STATUS_DT,WAIVE_OFF_ID
        ) VALUES (
        #acctNum:VARCHAR#, #waiveDt:DATE#, #interestAmt:NUMERIC#, #penalAmt:NUMERIC#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#,#waiveOffId:VARCHAR#)
    </mapped-statement>
   
    <mapped-statement name="insertTermLoanWaiveOffTO" inline-parameters="true">
        INSERT INTO LOAN_WAIVE_OFF
        (ACCT_NUM, WAIVE_OFF_DT,WAIVE_AMT,REMARKS,STATUS, STATUS_BY,STATUS_DT,WAIVE_OFF_ID
        ) VALUES (
        #acctNum:VARCHAR#, #waiveDt:DATE#, #waiveAmt:NUMERIC#,#remarks:VARCHAR#,#status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#,#waiveOffId:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name="updateTermLoanWaiveOffTO" inline-parameters="true">
        UPDATE LOAN_WAIVE_OFF
        SET
        AUTH_STATUS  =#authorizeStatus:VARCHAR#,
        AUTH_BY =#authorizedBy:VARCHAR#,
        AUTH_DT=#authorizedDt:DATE#
        WHERE
        ACCT_NUM=#acctNum:VARCHAR# AND WAIVE_OFF_ID=#waiveOffId:VARCHAR# AND REMARKS=#remarks:VARCHAR#
		
    </mapped-statement>
   
    <mapped-statement name="updateTermLoanInterestWaiveOffTO" inline-parameters="true">
        UPDATE LOAN_INTEREST_WAIVE_OFF
        SET
		 
        WAIVE_OFF_DT=#waiveDt:DATE#, 
        INTEREST_WAIVE=#interestAmt:NUMERIC#, 
        PENAL_WAIVE=#penalAmt:NUMERIC#, 
        STATUS =#status:VARCHAR#, 
        STATUS_BY =#statusBy:VARCHAR#,
        STATUS_DT =#statusDt:DATE#,
        AUTH_STATUS  =#authorizeStatus:VARCHAR#,
        AUTH_BY =#authorizedBy:VARCHAR#
        WHERE
        ACCT_NUM=#acctNum:VARCHAR# AND WAIVE_OFF_ID=#waiveOffId:VARCHAR#
		
    </mapped-statement>
    
    <result-map name="getSelectTermLoanAllWaiveOffDetailsTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanPenalWaiveOffTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="waiveDt" column="WAIVE_OFF_DT"/>
        <property name="remarks" column="REMARKS"/>
        <property name="waiveAmt" column="WAIVE_AMT"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTH_STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="waiveOffId" column="WAIVE_OFF_ID"/>
    </result-map>
        
    <result-map name="getSelectTermLoanWaiveOffDetailsTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanPenalWaiveOffTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="waiveDt" column="WAIVE_OFF_DT"/>
        <property name="interestAmt" column="INTEREST_WAIVE"/>
        <property name="penalAmt" column="PENAL_WAIVE"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTH_STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="waiveOffId" column="WAIVE_OFF_ID"/>
    </result-map>
     
    <mapped-statement name="getSelectTermLoanWaiveOffTO" result-map="getSelectTermLoanWaiveOffDetailsTOResult" >
        SELECT * FROM LOAN_INTEREST_WAIVE_OFF WHERE ACCT_NUM = #value:VARCHAR#  AND STATUS != 'DELETED' and AUTH_STATUS IS NULL
    </mapped-statement>
    
    <mapped-statement name="getSelectTermLoanWaivingOffTO" result-map="getSelectTermLoanAllWaiveOffDetailsTOResult" >
        SELECT * FROM LOAN_WAIVE_OFF WHERE ACCT_NUM = #value:VARCHAR#  AND STATUS != 'DELETED' and AUTH_STATUS IS NULL
    </mapped-statement>
    
    <dynamic-mapped-statement name="getSelectTermLoanAuthorizedWaivingOffTO" result-map="getSelectTermLoanAllWaiveOffDetailsTOResult" >
        SELECT * FROM LOAN_WAIVE_OFF WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#  AND STATUS != 'DELETED' and AUTH_STATUS = 'AUTHORIZED'
        and WAIVE_OFF_DT  = #WAIVE_OFF_DT:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="REMARKS">
                    REMARKS = #REMARKS:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
   
    <mapped-statement name="getSelectTermLoanAllWaiveOffTO" result-map="getSelectTermLoanAllWaiveOffDetailsTOResult" >
        SELECT * FROM LOAN_WAIVE_OFF WHERE ACCT_NUM = #LINKBATCHID:VARCHAR# AND REMARKS=#REMARKS:VARCHAR# AND STATUS != 'DELETED' and AUTH_STATUS IS NULL
    </mapped-statement>
     
    <mapped-statement name="updateTermLoanFacilityRenewal" result-class="java.util.HashMap" >
        UPDATE LOANS_FACILITY_DETAILS SET RENEWAL_ACCT_NO= NULL
        WHERE  ACCT_NUM=#ACCOUNTNO:VARCHAR#
    </mapped-statement>
     
    <result-map name="getTermLoanDepositTypeTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanDepositTypeTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="txtRateOfInterest" column="INT_RATE"/>
        <property name="txtMaturityValue" column="MATURITY_VALUE"/>
        <property name="prodType" column="PROD_TYPE"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="txtDepNo" column="DEPOSIT_NO"/>
        <property name="tdtDepDt" column="DEPOSIT_DT"/>
        <property name="txtDepAmount" column="AMOUNT"/>
        <property name="txtMaturityDt" column="MATURITY_DT"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="statusDt" column="STATUS_DT"/>
                
    </result-map>
         
    <result-map name="getTermLoanLosTypeTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanLosTypeTO">
        <property name="borrowNo" column="BORROW_NO"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="losInstitution" column="OTHER_INSTITUTION"/>
        <property name="losName" column="NAME"/> 
        <property name="losAmount" column="AMOUNT"/> 
        <property name="losSecurityNo" column="SECURITY_NO"/> 
        <property name="losSecurityType" column="SECURITY_TYPE"/> 
        <property name="losRemarks" column="REMARKS"/> 
        <property name="losMaturityValue" column="MATURITY_VAL"/> 
        <property name="losIssueDt" column="ISSUE_DT"/> 
        <property name="losMatDt" column="MATURITY_DT"/> 
        <property name="branchCode" column="BRANCH_CODE"/>
    </result-map>
         
         
    <mapped-statement name="insertDepositSecurityTableDetails" inline-parameters="true">
        INSERT INTO LOANS_DEPOSIT_TYPE
        (BORROW_NO,DEPOSIT_NO,PROD_TYPE,PROD_ID,DEPOSIT_DT,AMOUNT,INT_RATE,MATURITY_VALUE,MATURITY_DT,STATUS,STATUS_BY,BRANCH_CODE,STATUS_DT
        ) VALUES (
        #borrowNo:VARCHAR#, #txtDepNo:varchar#, #prodType:VARCHAR#, #prodId:VARCHAR#, #tdtDepDt:DATE#, #txtDepAmount:NUMERIC#,
        #txtRateOfInterest:VARCHAR#,#txtMaturityValue:NUMERIC#,#txtMaturityDt:DATE#, #status:VARCHAR#, #statusBy:VARCHAR#, #branchCode:VARCHAR#,#statusDt:DATE#)
    </mapped-statement>
        
    <mapped-statement name="EditTermLoanDepositTypeDetaisTO" result-map="getTermLoanDepositTypeTOResult" >
        SELECT * FROM LOANS_DEPOSIT_TYPE
        WHERE BORROW_NO = #value# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement> 
        
    <mapped-statement name="updateTermLoanDepositTypeTO" inline-parameters="true">
        UPDATE LOANS_DEPOSIT_TYPE SET 
        PROD_TYPE = #prodType:VARCHAR#, 
        DEPOSIT_NO = #txtDepNo:VARCHAR#,
        PROD_ID = #prodId:VARCHAR#,
        DEPOSIT_DT = #tdtDepDt:DATE#,
        AMOUNT = #txtDepAmount:NUMERIC#,
        INT_RATE=#txtRateOfInterest:VARCHAR#,
        MATURITY_VALUE=#txtMaturityValue:NUMERIc#,
        MATURITY_DT=#txtMaturityDt:DATE#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND DEPOSIT_NO=#txtDepNo:VARCHAR# and BRANCH_CODE = #branchCode:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>
        
    <!--security details -->
    <mapped-statement name="updateSecurityTermLoanDepositTypeTO" inline-parameters="true">
        UPDATE LOANS_DEPOSIT_TYPE SET 
        PROD_TYPE = #prodType:VARCHAR#, 
        DEPOSIT_NO = #txtDepNo:VARCHAR#,
        PROD_ID = #prodId:VARCHAR#,
        DEPOSIT_DT = #tdtDepDt:DATE#,
        AMOUNT = #txtDepAmount:NUMERIC#,
        INT_RATE=#txtRateOfInterest:VARCHAR#,
        MATURITY_VALUE=#txtMaturityValue:NUMERIc#,
        MATURITY_DT=#txtMaturityDt:DATE#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>
    <!-- security end -->
        
    <mapped-statement name="deleteTermLoanSecurityDepositTO" inline-parameters="true" >
        UPDATE LOANS_DEPOSIT_TYPE SET 
        STATUS='DELETED', 
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        AUTHORIZED_STATUS = null,
        AUTHORIZED_BY = null,
        AUTHORIZED_DT = null
        WHERE BORROW_NO =  #borrowNo:VARCHAR# AND DEPOSIT_NO=#txtDepNo:VARCHAR#
    </mapped-statement> 
        
    <mapped-statement name="authorizeTermLoanDepositType" result-class="java.util.HashMap">
        UPDATE LOANS_DEPOSIT_TYPE SET 
        AUTHORIZED_STATUS = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE <!--STATUS != 'DELETED' --> STATUS_DT = #STATUS_DT:DATE#
        AND BORROW_NO = (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM= #ACCT_NUM# AND STATUS!='DELETED') 
    </mapped-statement>
        
    <!--security details -->
    <mapped-statement name="authorizeSecurityTermLoanDepositType" result-class="java.util.HashMap">
        UPDATE LOANS_DEPOSIT_TYPE SET 
        AUTHORIZED_STATUS = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE <!--STATUS != 'DELETED' --> STATUS_DT = #STATUS_DT:DATE#
        AND BORROW_NO = #ACCT_NUM:VARCHAR#
    </mapped-statement>
         
    <mapped-statement name="authorizeSecurityTermLoanLosType" result-class="java.util.HashMap">
        UPDATE LOANS_LOS_TYPE SET 
        AUTHORIZED_STATUS = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE 
        <!--STATUS != 'DELETED' --> STATUS_DT = #STATUS_DT:DATE#
        AND BORROW_NO = #ACCT_NUM:VARCHAR#
    </mapped-statement>
         
    <mapped-statement name="authorizeSecurityTermLoanGoldType" result-class="java.util.HashMap">
        UPDATE LOANS_FACILITY_DETAILS SET 
        AUTHORIZE_STATUS_1 = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZE_BY_1 = #USER_ID:VARCHAR#,
        AUTHORIZE_DT_1 = #AUTHORIZEDT:TIMESTAMP#
        WHERE STATUS != 'DELETED' AND ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
         
         
    <!--security end-->
        
    <mapped-statement name="insertLosSecurityTableDetails" inline-parameters="true">
        INSERT INTO LOANS_LOS_TYPE 
        (BORROW_NO,OTHER_INSTITUTION,NAME,SECURITY_TYPE,SECURITY_NO,AMOUNT,ISSUE_DT,MATURITY_DT,MATURITY_VAL,REMARKS,STATUS,STATUS_BY,BRANCH_CODE,STATUS_DT
        ) VALUES (
        #borrowNo:VARCHAR#, #losInstitution:VARCHAR#,#losName:VARCHAR#,#losSecurityType:VARCHAR#,#losSecurityNo:VARCHAR#,
        #losAmount:NUMERIC#,#losIssueDt:DATE#,#losMatDt:DATE#,#losMaturityValue:NUMERIC# ,#losRemarks:VARCHAR#,#status:VARCHAR#, #statusBy:VARCHAR#, #branchCode:VARCHAR#,#statusDt:DATE#)
    </mapped-statement>
        
    <mapped-statement name="updateTermLoanLosTypeTO" inline-parameters="true">
        UPDATE LOANS_LOS_TYPE SET 
        OTHER_INSTITUTION = #losInstitution:VARCHAR#, 
        NAME = #losName:VARCHAR#,
        SECURITY_TYPE = #losSecurityType:VARCHAR#,
        ISSUE_DT = #losIssueDt:DATE#,
        AMOUNT = #losAmount:NUMERIC#,
        SECURITY_NO=#losSecurityNo:VARCHAR#,
        MATURITY_VAL=#losMaturityValue:NUMERIC#,
        MATURITY_DT=#losMatDt:DATE#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        REMARKS=#losRemarks:VARCHAR#
        WHERE BORROW_NO = #borrowNo:VARCHAR# and SECURITY_NO=#losSecurityNo:VARCHAR# AND BRANCH_CODE = #branchCode:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>
        
    <!--security details -->
    <mapped-statement name="updateSecurityTermLoanLosTypeTO" inline-parameters="true">
        UPDATE LOANS_LOS_TYPE SET 
        OTHER_INSTITUTION = #losInstitution:VARCHAR#, 
        NAME = #losName:VARCHAR#,
        SECURITY_TYPE = #losSecurityType:VARCHAR#,
        ISSUE_DT = #losIssueDt:DATE#,
        AMOUNT = #losAmount:NUMERIC#,
        SECURITY_NO=#losSecurityNo:VARCHAR#,
        MATURITY_VAL=#losMaturityValue:NUMERIC#,
        MATURITY_DT=#losMatDt:DATE#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        REMARKS=#losRemarks:VARCHAR#
        WHERE BORROW_NO = #borrowNo:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') 
    </mapped-statement>
    <!-- security end -->
        
    <mapped-statement name="deleteTermLoanSecurityLosTO" inline-parameters="true" >
        UPDATE LOANS_LOS_TYPE SET STATUS='DELETED',
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        AUTHORIZED_STATUS = null,
        AUTHORIZED_BY = null,
        AUTHORIZED_DT = null
        WHERE BORROW_NO =  #borrowNo:VARCHAR# and SECURITY_NO=#losSecurityNo:VARCHAR#
    </mapped-statement> 
        
    <mapped-statement name="authorizeTermLoanLosType" result-class="java.util.HashMap">
        UPDATE LOANS_LOS_TYPE SET 
        AUTHORIZED_STATUS = #AUTHORIZESTATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE <!--STATUS != 'DELETED' --> STATUS_DT = #STATUS_DT:DATE#
        AND BORROW_NO = (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM= #ACCT_NUM:VARCHAR# AND STATUS!='DELETED') 
    </mapped-statement>
         
    <mapped-statement name="EditTermLoanLosTypeDetaisTO" result-map="getTermLoanLosTypeTOResult" >
        SELECT * FROM LOANS_LOS_TYPE
        WHERE BORROW_NO = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement> 
        
    <mapped-statement name="checkDepositNoAlreadyinLoansDeposit" result-class="java.util.HashMap">
        SELECT * FROM LOANS_DEPOSIT_TYPE WHERE STATUS!='DELETED' AND AUTHORIZED_STATUS='AUTHORIZED' AND DEPOSIT_NO=#DEPOSIT_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="checkDepositNoAlreadyinLoansLOS" result-class="java.util.HashMap">
        SELECT * FROM LOANS_LOS_TYPE WHERE STATUS!='DELETED' AND SECURITY_NO=#SECURITY_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="deleteTermLoanSecurityDepositDetails" inline-parameters="true">
        UPDATE LOANS_DEPOSIT_TYPE SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#		
        WHERE BORROW_NO =(SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM=#acctNum:VARCHAR#  AND STATUS!='DELETED') AND STATUS!='DELETED'               
    </mapped-statement>
         
    <mapped-statement name="deleteTermLoanSecurityLosDetails" inline-parameters="true">
        UPDATE LOANS_LOS_TYPE SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#		
        WHERE BORROW_NO =(SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM=#acctNum:VARCHAR#  AND STATUS!='DELETED') AND STATUS!='DELETED'               
    </mapped-statement>
        

    <mapped-statement name="getChargecalcDetails" result-class="java.util.HashMap">
        SELECT ACD.CHARGE_TYPE,ACD.CHARGE_BASE,ACD.FLAT_CHARGE,ACD.CHARGE_RATE,ACD.MIN_CHARGE_AMOUNT,ACD.MAX_CHARGE_AMOUNT ,ACD.ROUND_OFF_TYPE,
        ASAD.CHARGE_RATE AS SLAB_CHARGE_RATE,ASAD.FROM_SLAB_AMT,ASAD.TO_SLAB_AMT
        ,ASAD.ROUND_OFF_TYPE AS SLAB_ROUND_OFF_TYPE ,ASAD.MIN_CHARGE_AMOUNT AS SLAB_MIN_CHARGE_AMOUNT,ASAD.MAX_CHARGE_AMOUNT AS SLAB_MAX_CHARGE_AMOUNT
        FROM ARC_CHARGE_DEFINITION ACD LEFT JOIN ARC_SLAB_AMOUNT_DETAILS ASAD ON  ACD.CHARGE_ID =ASAD.CHARGE_ID
        WHERE CHARGE_TYPE=#CHARGE_TYPE:VARCHAR# 
        AND ACD.STATUS !='DELETED' AND ACD.AUTHORIZED_STATUS ='AUTHORIZED'
        AND ASAD.STATUS !='DELETED'
        ORDER BY SL_NO
    </mapped-statement>
        
    <mapped-statement name="getLoanApplicationNo" result-class="java.util.LinkedHashMap">
        SELECT APPLICATION_NO,CUSTOMER_ID,MEMBER_ID,APPLICATION_DATE FROM LOAN_APPLICATION_REGISTER WHERE STATUS!='DELETED' AND 
        APPLICATION_NO=#APPLICATION_NO:VARCHAR# AND STATUS_REGISTER='Received' 
    </mapped-statement>
    
     <dynamic-mapped-statement name="getLoanApplicationNoAction" result-class="java.util.LinkedHashMap">
        SELECT APPLICATION_NO,CUSTOMER_ID,MEMBER_ID,APPLICATION_DATE,PROD_ID,LOAN_AMT_APPLIED,NO_OF_INSTALLMENT,INSTALLMENT_TYPE,MORATORIUM_PERIOD,INSTALLMENT_AMOUNT
        FROM LOAN_APPLICATION_REGISTER WHERE BRANCH_ID = #BRANCH_CODE:VARCHAR#  and STATUS!='DELETED' AND (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS IS NULL) AND
        STATUS_REGISTER='Received' and APPLICATION_NO not in (select a.APPLICATION_NO from LOANS_BORROWER a where a.APPLICATION_NO is not null)
          <dynamic>
         <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="APPLICATION_NO">
                    UPPER(APPLICATION_NO) LIKE UPPER('%$APPLICATION_NO$%')
                </isNotNull>
            </isParameterPresent>
                <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER_ID">
                    UPPER(CUSTOMER_ID) LIKE UPPER('%$CUSTOMER_ID$%')
                </isNotNull>
            </isParameterPresent>
                <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBER_ID">
                    UPPER(MEMBER_ID) LIKE UPPER('%$MEMBER_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="APPLICATION_DATE">
                    UPPER(APPLICATION_DATE) LIKE UPPER('%$APPLICATION_DATE$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="LOAN_AMT_APPLIED">
                    UPPER(LOAN_AMT_APPLIED) LIKE UPPER('%$LOAN_AMT_APPLIED$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="NO_OF_INSTALLMENT">
                    UPPER(NO_OF_INSTALLMENT) LIKE UPPER('%$NO_OF_INSTALLMENT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="INSTALLMENT_TYPE">
                    UPPER(INSTALLMENT_TYPE) LIKE UPPER('%$INSTALLMENT_TYPE$%')
                </isNotNull>
            </isParameterPresent>
                <isParameterPresent>
                <isNotNull prepend="AND"      property="MORATORIUM_PERIOD">
                    UPPER(MORATORIUM_PERIOD) LIKE UPPER('%$MORATORIUM_PERIOD$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="updateLoanAppRegisterStatus" result-class="java.util.HashMap">
        UPDATE LOAN_APPLICATION_REGISTER SET STATUS_REGISTER='SANCTIONED' WHERE STATUS!='DELETED' AND APPLICATION_NO=#APPLICATION_NO:VARCHAR# AND CUSTOMER_ID=#CUSTOMER_ID:VARCHAR#
    </mapped-statement>


    <mapped-statement name="getUnSecuredLoanAccounts" result-class="java.util.LinkedHashMap">
        SELECT LSD.LIMIT,LFD.PROD_ID ,get_cust_name(c.cust_id) AS "NAME",LB.CUST_ID, LFD.ACCT_NUM,C.MEMBERSHIP_NO AS "MEMBER_NO"               
        FROM LOANS_FACILITY_DETAILS LFD,LOANS_BORROWER LB,LOANS_SANCTION_DETAILS LSD,CUSTOMER C WHERE LFD.BORROW_NO=LB.BORROW_NO
        AND LFD.BORROW_NO=LSD.BORROW_NO AND LFD.SECURITY_DETAILS='UNSECURED' AND LFD.STATUS!='DELETED'
        AND LFD.AUTHORIZE_STATUS_1='AUTHORIZED' AND LFD.ACCT_STATUS!='CLOSED' AND C.CUST_ID=LB.CUST_ID AND LFD.BRANCH_ID='0001'
    </mapped-statement>
        
    <dynamic-mapped-statement name="getDailyLoanDetails" result-class="java.util.LinkedHashMap">
            SELECT RLN.ACCT_NUM AS ACT_NUM , FNAME, NVL("limit",0) AS LIMIT , LAST_INT_CALC_DT, NVL(PRINCIPAL,0) AS BALANCE ,
            CASE WHEN NVL(PRIN_DEMAND,0)-NVL(PRIN_PAID,0)>0 THEN NVL(PRIN_DEMAND,0)-NVL(PRIN_PAID,0)  ELSE 0  END  AS PRINC_DUE ,
            NVL(INTEREST_DEMAND,0) AS INT_DUE, PENAL, CHARGES,RLN.PROD_ID,'TL' AS PROD_TYPE
            FROM REP_LOAN_NOTICE_TWO RLN, LOANS_BORROWER LB,
            DAILY_LOAN_SANCTION_DETAILS DLSD  WHERE  LB.BORROW_NO=RLN.BORROW_NO 
            <dynamic>
                <isParameterPresent>
                    <isNotNull prepend="AND"  property="BRANCH_CODE">
                        LB.BRANCH_CODE = #BRANCH_CODE:VARCHAR# 
                    </isNotNull>
                </isParameterPresent>
            </dynamic>                 
            AND LB.CUST_ID=RLN.CUST_ID AND 
            DLSD.ACCT_NUM = RLN.ACCT_NUM AND AGENT_ID IS NOT NULL AND DLSD.STATUS!='DELETED' AND DLSD.AGENT_ID=#AGENT_ID:VARCHAR# 
            UNION ALL
            SELECT LF.ACCT_NUM AS ACT_NUM, GET_JOINT_CUST (LF.ACCT_NUM) AS FNAME,
            NVL ("limit", 0) AS LIMIT, LAST_INT_CALC_DT,
             NVL (LOAN_BALANCE_PRINCIPAL, 0) AS BALANCE, 0 AS PRINC_DUE,0 AS INT_DUE,
            0 AS PENAL,0 AS CHARGES,
            LF.PROD_ID, 'AD' AS PROD_TYPE        
            FROM LOANS_FACILITY_DETAILS LF,LOANS_BORROWER LB,ADVANCES_PARAM_DETAILS APD,
            DAILY_LOAN_SANCTION_DETAILS DLSD,LOANS_SANCTION_DETAILS LSD
            WHERE LB.BORROW_NO = LF.BORROW_NO
            AND APD.ACT_NUM = LF.ACCT_NUM
            AND LSD.BORROW_NO = LF.BORROW_NO
            AND DLSD.ACCT_NUM = LF.ACCT_NUM
            AND LF.ACCT_STATUS  != 'CLOSED'
            AND LF.STATUS !='DELETED'
            AND LF.AUTHORIZE_STATUS_1=  'AUTHORIZED'
            <dynamic>
                <isParameterPresent>
                    <isNotNull prepend="AND"  property="BRANCH_CODE">
                        LF.BRANCH_ID = #BRANCH_CODE:VARCHAR#
                    </isNotNull>
                </isParameterPresent>
            </dynamic>            
            AND DLSD.AGENT_ID=#AGENT_ID:VARCHAR#  
            ORDER BY ACT_NUM 
    </dynamic-mapped-statement>
        
    <mapped-statement name="getAdjustmentDailyLoanDetails" result-class="java.util.LinkedHashMap">
        SELECT A.ACT_NUM , FNAME, A.LIMIT, A.LAST_INT_CALC_DT, A.BALANCE ,A.PRINC_DUE ,A.INT_DUE, A.PENAL, A.CHARGES, A.PROD_ID,B.PAYMENT FROM
        (SELECT RLN.ACCT_NUM AS ACT_NUM , FNAME, NVL("limit",0) AS LIMIT , LAST_INT_CALC_DT, NVL(PRINCIPAL,0) AS BALANCE ,
            CASE WHEN NVL(PRIN_DEMAND,0)-NVL(PRIN_PAID,0)>0 THEN NVL(PRIN_DEMAND,0)-NVL(PRIN_PAID,0)  ELSE 0  END  AS PRINC_DUE ,
            NVL(INTEREST_DEMAND,0) AS INT_DUE, PENAL, CHARGES,RLN.PROD_ID,'TL' AS PROD_TYPE
            FROM REP_LOAN_NOTICE_TWO RLN, LOANS_BORROWER LB,
            DAILY_LOAN_SANCTION_DETAILS DLSD  WHERE  LB.BORROW_NO=RLN.BORROW_NO AND  LB.BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND LB.CUST_ID=RLN.CUST_ID AND 
            DLSD.ACCT_NUM = RLN.ACCT_NUM AND AGENT_ID IS NOT NULL AND DLSD.STATUS!='DELETED' AND DLSD.AGENT_ID=#AGENT_ID:VARCHAR# 
            UNION ALL
            SELECT LF.ACCT_NUM AS ACT_NUM, GET_JOINT_CUST(LF.ACCT_NUM) AS FNAME, NVL ("limit", 0) AS LIMIT,
                 LAST_INT_CALC_DT, NVL (LOAN_BALANCE_PRINCIPAL, 0) AS BALANCE,
                0 AS PRINC_DUE,NVL(GET_ADV_INTEREST_APPLICATION(LF.ACCT_NUM,#ASON_DT:DATE#,(CASE WHEN LF.INT_GET_FROM = 'ACT' THEN
                            (SELECT LIM.INTEREST FROM LOANS_INT_MAINTENANCE LIM WHERE LIM.ACCT_NUM = LF.ACCT_NUM AND LIM.STATUS != 'DELETED')
                        WHEN LF.INT_GET_FROM = 'PROD' THEN
                             GET_TL_ROI(LF.PROD_ID,LSD.FROM_DT,LSD.LIMIT)
                        ELSE 0
                         END)),0)AS INT_DUE,
                GET_ADV_PEN_INT_APPLICATION(LF.ACCT_NUM,#ASON_DT:DATE#) AS PENAL,
                (SELECT   SUM (NVL (AMOUNT, 0) - NVL (PAID_AMT, 0)) AS CHARGE_AMT
                FROM LOANS_ACCT_CHARGE_DETAILS
                WHERE ACT_NUM = LF.ACCT_NUM AND STATUS != 'DELETED'
            AND AUTHORIZE_STATUS = 'AUTHORIZED')AS CHARGES, LF.PROD_ID,'AD' AS PROD_TYPE        
            FROM LOANS_FACILITY_DETAILS LF,LOANS_BORROWER LB,ADVANCES_PARAM_DETAILS APD,
            DAILY_LOAN_SANCTION_DETAILS DLSD,LOANS_SANCTION_DETAILS LSD
            WHERE LB.BORROW_NO = LF.BORROW_NO
            AND APD.ACT_NUM = LF.ACCT_NUM
            AND LSD.BORROW_NO = LF.BORROW_NO
            AND DLSD.ACCT_NUM = LF.ACCT_NUM
            AND LF.ACCT_STATUS  != 'CLOSED'
            AND LF.STATUS !='DELETED'
            AND LF.AUTHORIZE_STATUS_1=  'AUTHORIZED'
            AND LF.BRANCH_ID = #BRANCH_CODE:VARCHAR#
            AND DLSD.AGENT_ID=#AGENT_ID:VARCHAR#  
            ORDER BY ACT_NUM ) A, 
        (SELECT ACT_NUM, NVL(SUM(PAYMENT),0) AS PAYMENT FROM  DAILY_LOAN_COLLECTION_DETAILS WHERE ADJUSTED_LOAN='N'AND AGENT_ID=#AGENT_ID:VARCHAR#
        AND AUTHORIZED_STATUS='AUTHORIZED' AND STATUS!='DELETED' GROUP BY  ACT_NUM ORDER BY ACT_NUM) B
        WHERE A.ACT_NUM=B.ACT_NUM
    </mapped-statement>
    
    <mapped-statement name="getAdjustmentDailyLoanDetailsimp" result-class="java.util.LinkedHashMap">
        SELECT A.ACT_NUM , FNAME, A.LIMIT, A.LAST_INT_CALC_DT, A.BALANCE ,B.PRINC_DUE ,B.INT_DUE, B.PENAL, B.CHARGES, A.PROD_ID,B.PAYMENT FROM
        (SELECT RLN.ACCT_NUM AS ACT_NUM , FNAME, NVL("limit",0) AS LIMIT , LAST_INT_CALC_DT, NVL(PRINCIPAL,0) AS BALANCE ,
            CASE WHEN NVL(PRIN_DEMAND,0)-NVL(PRIN_PAID,0)>0 THEN NVL(PRIN_DEMAND,0)-NVL(PRIN_PAID,0)  ELSE 0  END  AS PRINC_DUE ,
            NVL(INTEREST_DEMAND,0) AS INT_DUE, PENAL, CHARGES,RLN.PROD_ID,'TL' AS PROD_TYPE
            FROM REP_LOAN_NOTICE_TWO RLN, LOANS_BORROWER LB,
            DAILY_LOAN_SANCTION_DETAILS DLSD  WHERE  LB.BORROW_NO=RLN.BORROW_NO AND  LB.BRANCH_CODE = #BRANCH_CODE:VARCHAR# AND LB.CUST_ID=RLN.CUST_ID AND 
            DLSD.ACCT_NUM = RLN.ACCT_NUM AND AGENT_ID IS NOT NULL AND DLSD.STATUS!='DELETED' AND DLSD.AGENT_ID=#AGENT_ID:VARCHAR# 
            UNION ALL
            SELECT LF.ACCT_NUM AS ACT_NUM, GET_JOINT_CUST(LF.ACCT_NUM) AS FNAME, NVL ("limit", 0) AS LIMIT,
                 LAST_INT_CALC_DT, NVL (LOAN_BALANCE_PRINCIPAL, 0) AS BALANCE,
                0 AS PRINC_DUE,NVL(GET_ADV_INTEREST_APPLICATION(LF.ACCT_NUM,#ASON_DT:DATE#,(CASE WHEN LF.INT_GET_FROM = 'ACT' THEN
                            (SELECT LIM.INTEREST FROM LOANS_INT_MAINTENANCE LIM WHERE LIM.ACCT_NUM = LF.ACCT_NUM AND LIM.STATUS != 'DELETED')
                        WHEN LF.INT_GET_FROM = 'PROD' THEN
                             GET_TL_ROI(LF.PROD_ID,LSD.FROM_DT,LSD.LIMIT)
                        ELSE 0
                         END)),0)AS INT_DUE,
                GET_ADV_PEN_INT_APPLICATION(LF.ACCT_NUM,#ASON_DT:DATE#) AS PENAL,
                (SELECT   SUM (NVL (AMOUNT, 0) - NVL (PAID_AMT, 0)) AS CHARGE_AMT
                FROM LOANS_ACCT_CHARGE_DETAILS
                WHERE ACT_NUM = LF.ACCT_NUM AND STATUS != 'DELETED'
            AND AUTHORIZE_STATUS = 'AUTHORIZED')AS CHARGES, LF.PROD_ID,'AD' AS PROD_TYPE        
            FROM LOANS_FACILITY_DETAILS LF,LOANS_BORROWER LB,ADVANCES_PARAM_DETAILS APD,
            DAILY_LOAN_SANCTION_DETAILS DLSD,LOANS_SANCTION_DETAILS LSD
            WHERE LB.BORROW_NO = LF.BORROW_NO
            AND APD.ACT_NUM = LF.ACCT_NUM
            AND LSD.BORROW_NO = LF.BORROW_NO
            AND DLSD.ACCT_NUM = LF.ACCT_NUM
            AND LF.ACCT_STATUS  != 'CLOSED'
            AND LF.STATUS !='DELETED'
            AND LF.AUTHORIZE_STATUS_1=  'AUTHORIZED'
            AND LF.BRANCH_ID = #BRANCH_CODE:VARCHAR#
            AND DLSD.AGENT_ID=#AGENT_ID:VARCHAR#  
            ORDER BY ACT_NUM ) A, 
        (SELECT ACT_NUM, NVL(SUM(PAYMENT),0) AS PAYMENT,NVL(SUM(PENAL),0) AS PENAL,NVL(SUM(PRINC_DUE),0) AS PRINC_DUE,
        NVL(SUM(INTEREST),0) AS INT_DUE,NVL(SUM(CHARGE),0) AS CHARGES
        FROM  DAILY_LOAN_COLLECTION_DETAILS WHERE ADJUSTED_LOAN='N'AND AGENT_ID=#AGENT_ID:VARCHAR# 
        and PAYMENT!=0   AND AUTHORIZED_STATUS='AUTHORIZED' AND STATUS!='DELETED' GROUP BY  ACT_NUM ORDER BY ACT_NUM) B
        WHERE A.ACT_NUM=B.ACT_NUM 
    </mapped-statement>
        
    <mapped-statement name="getAgentAccountdetails" result-class="java.util.LinkedHashMap">
        SELECT * FROM AGENT_MASTER WHERE AGENT_ID=#AGENT_ID:VARCHAR# AND STATUS!='DELETED' AND AUTHORIZED_STATUS='AUTHORIZED' 
    </mapped-statement>
    
    <mapped-statement name="getAgentAccountdet" result-class="java.util.LinkedHashMap">
        SELECT DP_PROD_ID,DP_PROD_TYPE,DP_ACT_NUM,(SELECT AC_HD_ID FROM ALL_PRODUCTS WHERE PROD_ID = DP_PROD_ID) AC_HD_ID FROM AGENT_MASTER
        WHERE AGENT_ID=#AGENT_ID:VARCHAR# AND STATUS!='DELETED' AND AUTHORIZED_STATUS='AUTHORIZED' AND DP_PROD_TYPE IS NOT NULL AND DP_ACT_NUM IS NOT NULL
    </mapped-statement>
        
    <mapped-statement name="insertDailyLoanTansaction" result-class="java.util.HashMap">
        INSERT INTO DAILY_LOAN_COLLECTION_DETAILS
        (LOAN_COLLECTION_NO, AGENT_ID, ACT_NUM, MEMBER_NAME, LAST_INT_CALC_DT, "limit", BALANCE, PRINC_DUE, INTEREST, PENAL, 
        CHARGE, TOTAL_DUE, PAYMENT, STATUS, STATUS_DT, STATUS_BY,ADJUSTED_LOAN,BRANCH_ID,COMMISSION
        ) VALUES (
        #LOAN_COLLECTION_NO:VARCHAR#, #AGENT_ID:VARCHAR#, #ACT_NUM:VARCHAR#, #FNAME:VARCHAR#, #LAST_INT_CALC_DT:TIMESTAMP#, #LIMIT:NUMERIC#, #BALANCE:NUMERIC#, 
        #PRINC_DUE:NUMERIC#, #INT_DUE:NUMERIC#, #PENAL:NUMERIC#, #CHARGES:NUMERIC#, #TOTAL_DUE:NUMERIC#, #PAYMENT:NUMERIC#, 
        #STATUS:VARCHAR#, #STATUS_DT:TIMESTAMP#, #STATUS_BY:VARCHAR#, #ADJUSTED_LOAN:VARCHAR#,#BRANCH_ID:VARCHAR#,#COMMISSION:NUMERIC#)
    </mapped-statement>
        
    <mapped-statement name="insertDailyLoanAdjustmentTansaction" result-class="java.util.HashMap">
        INSERT INTO DAILY_LOAN_ADJUSTMENT_DETAILS
        (LOAN_ADJUSTMENT_NO, AGENT_ID, ACT_NUM, MEMBER_NAME, LAST_INT_CALC_DT, "limit", BALANCE, PRINC_DUE, INTEREST, PENAL, 
        CHARGE, TOTAL_DUE, PAYMENT, STATUS, STATUS_DT, STATUS_BY,BRANCH_ID
        ) VALUES (
        #LOAN_ADJUSTMENT_NO:VARCHAR#, #AGENT_ID:VARCHAR#, #ACT_NUM:VARCHAR#, #FNAME:VARCHAR#, #LAST_INT_CALC_DT:TIMESTAMP#, #LIMIT:NUMERIC#, #BALANCE:NUMERIC#, 
        #PRINC_DUE:NUMERIC#, #INT_DUE:NUMERIC#, #PENAL:NUMERIC#, #CHARGES:NUMERIC#, #TOTAL_DUE:NUMERIC#, #PAYMENT:NUMERIC#, 
        #STATUS:VARCHAR#, #STATUS_DT:TIMESTAMP#, #STATUS_BY:VARCHAR#,#BRANCH_ID:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="getDailyLoanTableTransAuthorize" result-class="java.util.LinkedHashMap">
        SELECT * FROM DAILY_LOAN_COLLECTION_DETAILS WHERE STATUS!='DELETED' AND AUTHORIZED_STATUS IS NULL AND LOAN_COLLECTION_NO = #LOAN_COLLECTION_NO#
    </mapped-statement>
        
    <mapped-statement name="getDailyLoanTransAuthorize" result-class="java.util.LinkedHashMap">               
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID, AGENT_ID, LOAN_COLLECTION_NO,C.STATUS,C.AUTHORIZED_STATUS
           FROM DAILY_LOAN_COLLECTION_DETAILS C ,ALL_TRANS AT
          WHERE C.BRANCH_ID = #BRANCH_CODE:VARCHAR#
            AND AT.LINK_BATCH_ID = C.ACT_NUM
            AND C.STATUS != 'DELETED'
            AND AT.TRANS_DT = #TRANS_DT:DATE#
            AND C.AUTHORIZED_STATUS IS NULL
            AND AT.AUTHORIZE_STATUS IS NULL
            AND cast(#HIERARCHY_ID# as numeric) &gt;=
                   (SELECT DISTINCT DECODE (NVL (SAME_HIERARCHY_ALLOWED, 'N'),
                                            'Y', HIERARCHY_ID,
                                            HIERARCHY_ID + 1
                                           )
                               FROM USER_MASTER UM, ROLE_MASTER RM
                              WHERE RM.ROLE_ID = UM.USER_ROLE
                                AND RM.GROUP_ID = UM.USER_GROUP
                                AND UM.USER_ID = C.STATUS_BY)
            AND AT.STATUS_BY != #USER_ID:VARCHAR#
       ORDER BY TRANS_ID
    </mapped-statement>
        
    <mapped-statement name="getAdjustmentDailyLoanTransAuthorize" result-class="java.util.LinkedHashMap">
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID, AGENT_ID, LOAN_ADJUSTMENT_NO,C.STATUS,C.AUTHORIZED_STATUS
           FROM DAILY_LOAN_ADJUSTMENT_DETAILS C ,ALL_TRANS AT
          WHERE C.BRANCH_ID = #BRANCH_CODE:VARCHAR#
            AND AT.LINK_BATCH_ID = C.ACT_NUM
            AND C.STATUS != 'DELETED'
            AND AT.TRANS_DT = #TRANS_DT:DATE#
            AND C.AUTHORIZED_STATUS IS NULL
            AND cast(#HIERARCHY_ID# as numeric) &gt;=
                   (SELECT DISTINCT DECODE (NVL (SAME_HIERARCHY_ALLOWED, 'N'),
                                            'Y', HIERARCHY_ID,
                                            HIERARCHY_ID + 1
                                           )
                               FROM USER_MASTER UM, ROLE_MASTER RM
                              WHERE RM.ROLE_ID = UM.USER_ROLE
                                AND RM.GROUP_ID = UM.USER_GROUP
                                AND UM.USER_ID = C.STATUS_BY)
            AND AT.STATUS_BY != #USER_ID:VARCHAR#
       ORDER BY TRANS_ID
    </mapped-statement>
        
    <mapped-statement name="authorizeDailyLoanTransactionDetails" result-class="java.util.HashMap">
        UPDATE DAILY_LOAN_COLLECTION_DETAILS SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #AUTHORIZED_BY:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#
        WHERE STATUS != 'DELETED' AND LOAN_COLLECTION_NO = #LOAN_COLLECTION_NO:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="authorizeDailyLoanAdjustmentDetails" result-class="java.util.HashMap">
        UPDATE DAILY_LOAN_ADJUSTMENT_DETAILS SET 
        AUTHORIZED_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #AUTHORIZED_BY:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZED_DT:TIMESTAMP#
        WHERE STATUS != 'DELETED' AND LOAN_ADJUSTMENT_NO = #LOAN_ADJUSTMENT_NO:VARCHAR# 
    </mapped-statement>
        
    <dynamic-mapped-statement name="getDailyLoanTransEnquiry" result-class="java.util.LinkedHashMap">
        SELECT DISTINCT LOAN_COLLECTION_NO,AGENT_ID,STATUS,AUTHORIZED_STATUS FROM DAILY_LOAN_COLLECTION_DETAILS  WHERE STATUS!='DELETED' 
        AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS = 'AUTHORIZED') 
         <dynamic>
                <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="LOAN_ADJUSTMENT_NO">
                    UPPER(LOAN_ADJUSTMENT_NO) LIKE UPPER('%$LOAN_ADJUSTMENT_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="AGENT_ID">
                    UPPER(AGENT_ID) LIKE UPPER('%$AGENT_ID$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        ORDER BY LOAN_COLLECTION_NO
    </dynamic-mapped-statement>
   <dynamic-mapped-statement name="getAdjustmentDailyLoanTransEnquiry" result-class="java.util.LinkedHashMap">
        SELECT DISTINCT LOAN_ADJUSTMENT_NO,AGENT_ID,STATUS,AUTHORIZED_STATUS FROM DAILY_LOAN_ADJUSTMENT_DETAILS  WHERE STATUS!='DELETED' 
        AND (AUTHORIZED_STATUS IS NULL OR AUTHORIZED_STATUS = 'AUTHORIZED')
        <dynamic>
                <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="LOAN_ADJUSTMENT_NO">
                    UPPER(LOAN_ADJUSTMENT_NO) LIKE UPPER('%$LOAN_ADJUSTMENT_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="AGENT_ID">
                    UPPER(AGENT_ID) LIKE UPPER('%$AGENT_ID$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
        ORDER BY LOAN_ADJUSTMENT_NO
    </dynamic-mapped-statement>
        
    <mapped-statement name="getDailyLoanTableTransEnquiry" result-class="java.util.LinkedHashMap">
        SELECT * FROM DAILY_LOAN_COLLECTION_DETAILS WHERE STATUS!='DELETED' AND LOAN_COLLECTION_NO = #LOAN_COLLECTION_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getDailyLoanAdjustmentTransEnquiry" result-class="java.util.LinkedHashMap">
        SELECT * FROM DAILY_LOAN_ADJUSTMENT_DETAILS WHERE STATUS!='DELETED' AND LOAN_ADJUSTMENT_NO = #LOAN_ADJUSTMENT_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getDailyLoanSanctionDetails" result-class="java.util.LinkedHashMap">
        SELECT * FROM DAILY_LOAN_SANCTION_DETAILS WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND STATUS!='DELETED'
    </mapped-statement>	   
        
    <mapped-statement name="updateDailyLoanAdjustmentStatus" result-class="java.util.LinkedHashMap">
        UPDATE DAILY_LOAN_COLLECTION_DETAILS SET ADJUSTED_LOAN='Y' WHERE ACT_NUM=#ACT_NUM:VARCHAR# AND AGENT_ID=#AGENT_ID:VARCHAR# AND PAYMENT=#PAYMENT:NUMBER#
    </mapped-statement>
    <!-- start -->

    <mapped-statement name="getLoanProdCategory" result-class="java.util.HashMap">
        SELECT AUTHORIZE_REMARK FROM LOANS_PRODUCT WHERE PROD_ID=#PRODUCT_ID:VARCHAR#
    </mapped-statement>        
        
    <mapped-statement name="insertDailyLoanSanctionDetails" inline-parameters="true">
        INSERT INTO DAILY_LOAN_SANCTION_DETAILS
        (ACCT_NUM,AGENT_ID,LOAN_PERIOD_DAYS,DIRECT_REPAYMENT,PROD_TYPE,PROD_ID,ACCT_HEAD,ACCOUNTNO,STATUS,MAX_PERIOD_CHAR)
        VALUES (
        #loanAcctNum:VARCHAR#, #agentId:varchar#,#loanPeriod:NUMERIC#,#directPayment:VARHCAR#, #prodType:VARCHAR#, #prodId:VARCHAR#,#acctHead:VARCHAR#,#accountNum:VARCHAR#,#status:VARCHAR#,#maxPeriodChar:VARCHAR#)
    </mapped-statement>
        
        
    <mapped-statement name="updateDailyLoanSanctionDetails" inline-parameters="true">
        UPDATE  DAILY_LOAN_SANCTION_DETAILS
        SET
        AGENT_ID =#agentId:varchar#,
        LOAN_PERIOD_DAYS=#loanPeriod:NUMERIC#,
        DIRECT_REPAYMENT=#directPayment:VARHCAR#,
        PROD_TYPE=#prodType:VARCHAR#,
        PROD_ID=#prodId:VARCHAR#,
        ACCT_HEAD=#acctHead:VARCHAR#,
        ACCOUNTNO=#accountNum:VARCHAR#,
        STATUS =#status:VARCHAR#,
        MAX_PERIOD_CHAR =#maxPeriodChar:VARCHAR#
        where 
        ACCT_NUM=#loanAcctNum:VARCHAR#
      
    </mapped-statement>
        
    <result-map name="getDailyLoanSanctionResult" class="com.see.truetransact.transferobject.termloan.DailyLoanSanctionDetailsTO">
        <property name="agentId" column="AGENT_ID"/>
        <property name="loanPeriod" column="LOAN_PERIOD_DAYS"/>
        <property name="directPayment" column="DIRECT_REPAYMENT"/>
        <property name="prodType" column="PROD_TYPE"/>
        <property name="prodId" column="PROD_ID"/> 
        <property name="acctHead" column="ACCT_HEAD"/> 
        <property name="accountNum" column="ACCOUNTNO"/> 
        <property name="status" column="STATUS"/> 
        <property name="loanAcctNum" column="ACCT_NUM"/>
        <property name="maxPeriodChar" column="MAX_PERIOD_CHAR"/>
    </result-map>

    <mapped-statement name="selectDailyLoanSanctionTO" result-map="getDailyLoanSanctionResult" >
        SELECT * FROM DAILY_LOAN_SANCTION_DETAILS
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement> 
        
    <mapped-statement name="insertTermLoanCourtDetailsTO" inline-parameters="true">
        INSERT INTO LOAN_OTS_DETAILS
        (COURT_ORDER_NO ,COURT_ORDER_DT  ,OTS_DT,OTS_RATE,TOT_AMT_DUE,SETTLEMENT_AMT,PRINCIPAL_AMT,INTEREST_AMT,
        PENAL,CHARGES_AMT,INSTALLMENT_AMT,INSTALLMENT_NO,FIRST_INSTALL_DT,LAST_INSTALL_DT,FREQ,SINGLE_INSTALL ,
        REMARKS,STATUS,STATUS_DT,SLNO,ACCT_NUM,PENAL_RATE)
        VALUES (
        #courtOrderNo:VARCHAR#,#courtOrderDate:DATE#,#oTSDate:DATE# ,#oTSRate:NUMERIC#,#totAmountDue:NUMERIC# ,#settlementAmt:NUMERIC# , #principalAmount:NUMERIC# , 
        #interestAmount:NUMERIC#, #penalInterestAmount:NUMERIC# , #chargeAmount:NUMERIC# , #installmentAmt:NUMERIC# ,
        #installmentNo:NUMERIC# , #firstInstallmentDt:DATE#,#lastInstallmentDt:DATE#,#freq:NUMERIC#,#repaySingle_YES:VARCHAR#,#courtRemarks:VARCHAR#,#status:VARCHAR# ,
        #status_dt:DATE#,#slno:VARCHAR#,#acctNum:VARCHAR#,#penal:NUMERIC#)

    </mapped-statement>
        
        
    <mapped-statement name="updateTermLoanCourtDetailsTO" inline-parameters="true">
        UPDATE  LOAN_OTS_DETAILS
        SET
        COURT_ORDER_NO=#courtOrderNo:VARCHAR#,
        COURT_ORDER_DT=#courtOrderDate:DATE#  ,
        OTS_DT=#oTSDate:DATE#,
        OTS_RATE=#oTSRate:NUMERIC#,
        TOT_AMT_DUE=#totAmountDue:NUMERIC#,
        SETTLEMENT_AMT=#settlementAmt:NUMERIC#,
        PRINCIPAL_AMT=#principalAmount:NUMERIC#,
        INTEREST_AMT= #interestAmount:NUMERIC#,
        PENAL=#penalInterestAmount:NUMERIC#,
        CHARGES_AMT=#chargeAmount:NUMERIC#,
        INSTALLMENT_AMT=#installmentAmt:NUMERIC# ,
        INSTALLMENT_NO=#installmentNo:NUMERIC#,
        FIRST_INSTALL_DT=#firstInstallmentDt:DATE#,
        LAST_INSTALL_DT=#lastInstallmentDt:DATE#,
        FREQ=#freq:NUMERIC#,
        SINGLE_INSTALL =#repaySingle_YES:VARCHAR#,
        REMARKS=#courtRemarks:VARCHAR#,
        STATUS=#status:VARCHAR#,
        STATUS_DT=#status_dt:DATE#,
        PENAL_RATE =#penal:NUMERIC#
        where 
        ACCT_NUM=#acctNum:VARCHAR# AND SLNO=#slno:VARCHAR# AND STATUS != 'DELETED' AND (AUTH_STATUS IS NULL OR AUTH_STATUS !='REJECTED')
      
    </mapped-statement>
        
    <mapped-statement name="authorizeTermLoanCourtDetailsTO" inline-parameters="true">
        UPDATE  LOAN_OTS_DETAILS
        SET
        AUTH_STATUS=#AUTHORIZESTATUS:VARCHAR#,
        AUTH_DATE=#AUTHORIZEDT:DATE# 
        where 
        ACCT_NUM=#ACT_NUM:VARCHAR#  AND STATUS != 'DELETED' AND  (AUTH_STATUS IS NULL OR AUTH_STATUS !='REJECTED')
    </mapped-statement>
         
    <mapped-statement name="deleteTermLoanCourtDetailsTO" inline-parameters="true">
        UPDATE  LOAN_OTS_DETAILS  SET
        STATUS=#status:VARCHAR#
        where 
        ACCT_NUM=#acctNum:VARCHAR# AND SLNO=#slno:VARCHAR#
    </mapped-statement>
    
    <result-map name="getTermLoanCourtDetailsTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanCourtDetailsTO">
        <property name="courtOrderNo" column="COURT_ORDER_NO"/>
        <property name="courtOrderDate" column="COURT_ORDER_DT"/>
        <property name="oTSDate" column="OTS_DT"/>
        <property name="oTSRate" column="OTS_RATE"/>
        <property name="totAmountDue" column="TOT_AMT_DUE"/> 
        <property name="settlementAmt" column="SETTLEMENT_AMT"/> 
        <property name="principalAmount" column="PRINCIPAL_AMT"/> 
        <property name="interestAmount" column="INTEREST_AMT"/> 
        <property name="penalInterestAmount" column="PENAL"/>
        <property name="chargeAmount" column="CHARGES_AMT"/>
        <property name="installmentAmt" column="INSTALLMENT_AMT"/>
        <property name="installmentNo" column="INSTALLMENT_NO"/>
        <property name="firstInstallmentDt" column="FIRST_INSTALL_DT"/>
        <property name="lastInstallmentDt" column="LAST_INSTALL_DT"/>
        <property name="freq" column="FREQ"/>
        <property name="repaySingle_YES" column="SINGLE_INSTALL"/>
        <property name="courtRemarks" column="REMARKS"/>
        <property name="status" column="STATUS"/>
        <property name="status_dt" column="STATUS_DT"/>
        <property name="slno" column="SLNO"/>
        <property name="authStatus" column="AUTH_STATUS"/>
        <property name="penal" column="PENAL_RATE"/>
    </result-map>

    <mapped-statement name="selectTermLoanCourtDetailsTO" result-map="getTermLoanCourtDetailsTOResult" >
        SELECT * FROM LOAN_OTS_DETAILS
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>        
        
    <mapped-statement name="insertTermLoanOTSInstallmentTO" inline-parameters="true">        
        INSERT INTO LOAN_OTS_INSTALLMENT (ACCT_NUM ,INSTALL_NO ,INSTALL_DATE ,INSTALL_AMOUNT ,STATUS ,SLNO)
        VALUES
        (#acctNum:VARCHAR#,#instllmentNo:VARCHAR#,#installmentDate:DATE#,#installmentAmt:NUMERIC#,#status:VARCHAR#,#slno:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name="getAllLimitAmountsForGoldLoans" result-class="java.util.LinkedHashMap">
        SELECT NVL(SUM ("limit"),0) AS SANCTION  FROM LOANS_FACILITY_DETAILS LFD,LOANS_SANCTION_DETAILS LSD,LOANS_BORROWER LB,
        LOANS_PRODUCT LP WHERE LB.STATUS!='DELETED' AND LB.AUTHORIZE_STATUS='AUTHORIZED' AND LFD.ACCT_STATUS!='CLOSED' AND  LB.CUST_ID=#CUST_ID:VARCHAR#
        and LB.BORROW_NO = LSD.BORROW_NO AND LFD.BORROW_NO = LSD.BORROW_NO AND LFD. PROD_ID=LP.PROD_ID AND  LP. BEHAVES_LIKE!='LOANS_AGAINST_DEPOSITS'        
        AND LP.AUTHORIZE_REMARK = #AUTHORIZE_REMARK:VARCHAR# AND LP. BEHAVES_LIKE!='OD'
    </mapped-statement>
        
    <mapped-statement name="getAllLimitAmountsForOtherLoans" result-class="java.util.LinkedHashMap">
        SELECT NVL(SUM ("limit"),0) AS SANCTION  FROM LOANS_FACILITY_DETAILS LFD,LOANS_SANCTION_DETAILS LSD,LOANS_BORROWER LB,
        LOANS_PRODUCT LP WHERE LB.STATUS!='DELETED' AND LB.AUTHORIZE_STATUS='AUTHORIZED' AND LFD.ACCT_STATUS!='CLOSED' AND  LB.CUST_ID=#CUST_ID:VARCHAR#
        and LB.BORROW_NO = LSD.BORROW_NO AND LFD.BORROW_NO = LSD.BORROW_NO AND LFD. PROD_ID=LP.PROD_ID AND  LP. BEHAVES_LIKE!='LOANS_AGAINST_DEPOSITS'        
        AND (LP.AUTHORIZE_REMARK =#AUTHORIZE_REMARK:VARCHAR# OR LP.AUTHORIZE_REMARK ='PADDY_LOAN') AND LP. BEHAVES_LIKE!='OD'
    </mapped-statement>

    <mapped-statement name="getUnAuthLoanSecurityLandDetails" result-class="java.util.HashMap">
        SELECT * FROM LOANS_SECURITY_LAND
        WHERE DOCUMENT_GEN_ID = #DOCUMENT_GEN_ID:VARCHAR# AND STATUS!='DELETED' AND AUTHORIZED_STATUS IS NULL
    </mapped-statement>	 


    <mapped-statement name="updateTermLoanOTSInstallmentTO" inline-parameters="true">
        <!--UPDATE  LOAN_OTS_INSTALLMENT
        SET    
        STATUS=#status:VARCHAR#
        where 
        ACCT_NUM=#acctNum:VARCHAR# AND SLNO=#slno:VARCHAR# -->
        DELETE  FROM LOAN_OTS_INSTALLMENT WHERE ACCT_NUM=#acctNum:VARCHAR# AND SLNO=#slno:VARCHAR#
      
    </mapped-statement>		

    <result-map name="getTermLoanOTSInstallmentTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanOTSInstallmentTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="instllmentNo" column="INSTALL_NO"/>
        <property name="installmentDate" column="INSTALL_DATE"/>
        <property name="installmentAmt" column="INSTALL_AMOUNT"/>
        <property name="status" column="STATUS"/> 
        <property name="slno" column="SLNO"/>          
    </result-map>

    <mapped-statement name="SelectTermLoanOTSInstallmentTO" result-map="getTermLoanOTSInstallmentTOResult" >
        SELECT * FROM LOAN_OTS_INSTALLMENT
        WHERE ACCT_NUM = #value:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>        
        
    <mapped-statement name="getSanctionDetailsForClosing" result-class="java.util.LinkedHashMap">
        SELECT LSD.FROM_DT,LSD.TO_DT,LD.NET_WEIGHT,LD.PURITY FROM LOANS_SANCTION_DETAILS LSD,LOANS_FACILITY_DETAILS LFD ,SECURITY_DETAILS LD WHERE LSD.BORROW_NO=LFD.BORROW_NO AND LFD.ACCT_NUM=#ACCT_NUM:VARCHAR# AND 
        ACCT_STATUS !='CLOSED'  AND LFD.ACCT_NUM = LD.ACCT_NUM AND LD.STATUS != 'DELETED' <!--AND LD.AUTHORIZE_STATUS='AUTHORIZED' -->
            
    </mapped-statement> 
        
    <mapped-statement name="getNoOfMonths" result-class="java.lang.Object">
        select  ceil(months_between(#TO_DATE:DATE#,#FROM_DATE:DATE#))  AS NOMONTHS from dual
    </mapped-statement>  

    <mapped-statement name="getLoanFacilityDetailsFromBorrowNo" result-class="java.util.LinkedHashMap">
        SELECT * FROM LOANS_FACILITY_DETAILS  WHERE STATUS!='DELETED' AND AUTHORIZE_STATUS_1='AUTHORIZED' AND ACCT_STATUS!='CLOSED' AND BORROW_NO=#BORROW_NO:VARCHAR#
    </mapped-statement> 
        
    <!--<mapped-statement name="getSelectTransactionDetails" result-class="java.util.LinkedHashMap">            
         
       SELECT * FROM (SELECT   c.trans_id, c.trans_dt, c.particulars, 
  		case when c.trans_type='CREDIT' THEN c.amount ELSE 0 END AS CREDIT, 
  		case when c.trans_type='DEBIT' THEN c.amount ELSE 0 END AS DEBIT,P.BALANCE
            FROM cash_trans C
            LEFT JOIN PASS_BOOK P ON C.ACT_NUM=P.ACT_NUM AND C.TRANS_ID=P.TRANS_ID AND C.TRANS_DT=P.TRANS_DT
           WHERE (c.act_num = #ACT_NUM# OR c.link_batch_id = #ACT_NUM#)
             AND c.status != 'DELETED'
             AND c.authorize_status = 'AUTHORIZED'
        UNION
        SELECT   T.trans_id, T.trans_dt, T.particulars, case when T.trans_type='CREDIT' THEN T.amount ELSE 0 END AS CREDIT, 
  		case when T.trans_type='DEBIT' THEN T.amount ELSE 0 END AS DEBIT,P.BALANCE
        FROM transfer_trans t
        LEFT JOIN PASS_BOOK P ON T.ACT_NUM=P.ACT_NUM AND T.TRANS_ID=P.TRANS_ID AND P.TRANS_DT=T.TRANS_DT
        WHERE (T.act_num = #ACT_NUM# OR T.link_batch_id = #ACT_NUM#)
        ORDER BY trans_dt DESC) WHERE ROWNUM &lt;=20
        
        SELECT trans_id,trans_dt,particulars,debit,credit,balance FROM  
        (SELECT NVL(P.TRANS_ID,0) AS TRANS_ID,P.TRANS_DT,P.PARTICULARS,P.DEBIT,P.CREDIT,P.BALANCE,P.PAGENO,P.SLNO 
        FROM PASS_BOOK P WHERE P.ACT_NUM=#ACT_NUM:varchar#
        AND P.AUTHORIZE_STATUS='AUTHORIZED' 
        UNION
        SELECT LTD.TRANS_ID,LTD.TRANS_DT,LTD.PARTICULARS,
        CASE WHEN LTD.TRANS_TYPE='DEBIT' THEN LTD.PRINCIPLE ELSE 0 END AS DEBIT,
        CASE WHEN LTD.TRANS_TYPE='CREDIT' THEN NVL(LTD.PRINCIPLE,0)+
        NVL(LTD.INTEREST,0)+NVL(LTD.PENAL,0)+NVL(LTD.EXPENSE,0) ELSE 0 END AS CREDIT, LTD.PBAL,0 as PAGENO, TRANS_SLNO as SLNO
        FROM LOAN_TRANS_DETAILS LTD WHERE LTD.ACT_NUM=#ACT_NUM:varchar# 
        AND LTD.AUTHORIZE_STATUS='AUTHORIZED' 
        UNION
        SELECT LTD.TRANS_ID,LTD.TRANS_DT,LTD.PARTICULARS,
        CASE WHEN LTD.TRANS_TYPE='DEBIT' THEN LTD.PRINCIPLE ELSE 0 END AS DEBIT,
        CASE WHEN LTD.TRANS_TYPE='CREDIT' THEN NVL(LTD.PRINCIPLE,0)+
        NVL(LTD.INTEREST,0)+NVL(LTD.PENAL,0)+NVL(LTD.EXPENSE,0) ELSE 0 END AS CREDIT, LTD.PBAL,0 as PAGENO, 0 as SLNO
        FROM ADV_TRANS_DETAILS LTD WHERE LTD.ACT_NUM=#ACT_NUM:varchar#
        AND LTD.AUTHORIZE_STATUS='AUTHORIZED'
        ORDER BY TRANS_DT DESC, PAGENO DESC,SLNO DESC
        )
        WHERE ROWNUM &lt;=20 
    </mapped-statement>  -->
    
    <!--<dynamic-mapped-statement name="getSelectTransactionDetails" result-class="java.util.LinkedHashMap">
             SELECT trans_id,trans_dt,particulars,debit,credit,balance FROM  
        (SELECT NVL(P.TRANS_ID,0) AS TRANS_ID,P.TRANS_DT,P.PARTICULARS,P.DEBIT,P.CREDIT,P.BALANCE,P.PAGENO,P.SLNO 
        FROM PASS_BOOK P WHERE P.ACT_NUM=#ACT_NUM:varchar#
        AND P.AUTHORIZE_STATUS='AUTHORIZED' 
        <dynamic>
            <isParameterPresent>
                <isEqual prepend="UNION" property="prod_type" compareValue="TD" >
                SELECT   NVL (p.trans_id, 0) AS trans_id, p.trans_dt, p.particulars,
                  CASE
                    WHEN p.trans_type = 'DEBIT'
                       THEN P.AMOUNT
                    ELSE 0
                 END AS debit,
                  CASE
                    WHEN p.trans_type = 'CREDIT'
                       THEN P.AMOUNT
                    ELSE 0
                 END AS credit,
            0 as balance,0 as pageno, 0 as slno
            FROM ALL_TRANS p
           WHERE p.act_num = #ACT_NUM:varchar# AND p.authorize_status = 'AUTHORIZED'
            </isEqual>
            </isParameterPresent>
        </dynamic>
        UNION
        SELECT LTD.TRANS_ID,LTD.TRANS_DT,LTD.PARTICULARS,
        CASE WHEN LTD.TRANS_TYPE='DEBIT' THEN LTD.PRINCIPLE ELSE 0 END AS DEBIT,
        CASE WHEN LTD.TRANS_TYPE='CREDIT' THEN NVL(LTD.PRINCIPLE,0)+
        NVL(LTD.INTEREST,0)+NVL(LTD.PENAL,0)+NVL(LTD.EXPENSE,0) ELSE 0 END AS CREDIT, LTD.PBAL,0 as PAGENO, TRANS_SLNO as SLNO
        FROM LOAN_TRANS_DETAILS LTD WHERE LTD.ACT_NUM=#ACT_NUM:varchar# 
        AND LTD.AUTHORIZE_STATUS='AUTHORIZED' 
        UNION
        SELECT LTD.TRANS_ID,LTD.TRANS_DT,LTD.PARTICULARS,
        CASE WHEN LTD.TRANS_TYPE='DEBIT' THEN LTD.PRINCIPLE ELSE 0 END AS DEBIT,
        CASE WHEN LTD.TRANS_TYPE='CREDIT' THEN NVL(LTD.PRINCIPLE,0)+
        NVL(LTD.INTEREST,0)+NVL(LTD.PENAL,0)+NVL(LTD.EXPENSE,0) ELSE 0 END AS CREDIT, LTD.PBAL,0 as PAGENO, 0 as SLNO
        FROM ADV_TRANS_DETAILS LTD WHERE LTD.ACT_NUM=#ACT_NUM:varchar#
        AND LTD.AUTHORIZE_STATUS='AUTHORIZED'
        ORDER BY TRANS_DT DESC, PAGENO DESC,SLNO DESC
        )
        WHERE ROWNUM &lt;=20 
    </dynamic-mapped-statement>-->
    
    <dynamic-mapped-statement name="getSelectTransactionDetails" result-class="java.util.LinkedHashMap">     
        <dynamic>
            <isEqual prepend="" property="TABLE" compareValue="PASS_BOOK" >
                SELECT  TRANS_ID, TRANS_DT, PARTICULARS,INST_NO, DEBIT, CREDIT, BALANCE
                FROM (SELECT   TRANS_ID, TO_CHAR (TRANS_DT, 'DD-MM-YYYY') TRANS_DT, CREATED_DT,
                PARTICULARS,INSTRUMENT_NO2 AS INST_NO,
                TRIM (TO_CHAR (DEBIT, '99,99,99,99,99,990.00')) DEBIT,
                TRIM (TO_CHAR (CREDIT, '99,99,99,99,99,990.00')) CREDIT,
                TRIM (TO_CHAR (ABS (BALANCE), '99,99,99,99,99,990.00')
                )
                || CASE
                WHEN BALANCE &gt; 0
                THEN ' Cr.'
                WHEN BALANCE &lt; 0
                THEN ' Dr.'
                ELSE ''
                END BALANCE,PAGENO,SLNO
                FROM PASS_BOOK
                WHERE ACT_NUM = #ACT_NUM#
                ORDER BY CREATED_DT DESC, PAGENO DESC,SLNO DESC,TRANS_ID DESC) A
                <!--WHERE ROWNUM &lt;= 20-->
                ORDER BY CREATED_DT DESC, PAGENO DESC, SLNO DESC, TRANS_ID DESC
                limit 20
            </isEqual>
            
            <isEqual prepend="" property="TABLE" compareValue="LOAN_TRANS_DETAILS" >
                SELECT * FROM (
                SELECT TO_CHAR (LTD.TRANS_DT, 'DD-MM-YYYY') TRANS_DT,
                TRANS_TYPE,TRANS_SLNO,
                TRIM(TO_CHAR (SUM (PRINCIPLE), '99,99,99,99,99,990.00')) AS PRINCIPAL,
                TRIM(TO_CHAR (SUM (INTEREST), '99,99,99,99,99,990.00')) INTEREST,
                TRIM(TO_CHAR (SUM (PENAL), '99,99,99,99,99,990.00')) PENAL,
                TRIM(TO_CHAR (BALANCE, '99,99,99,99,99,990.00'))
                || CASE
                WHEN BALANCE &gt; 0 THEN ' Dr.'
                WHEN BALANCE &lt; 0 THEN ' Cr.'
                ELSE ''
                END BALANCE
                FROM LOAN_TRANS_DETAILS LTD,
                (SELECT ACT_NUM,
                TO_CHAR (TRANS_DT, 'DD-MM-YYYY') TRANS_DT,
                PBAL AS BALANCE
                FROM LOAN_TRANS_DETAILS LT1
                WHERE (ACT_NUM, TRANS_SLNO) =
                (  SELECT ACT_NUM, MAX (TRANS_SLNO)
                FROM LOAN_TRANS_DETAILS
                WHERE     ACT_NUM = LT1.ACT_NUM
                AND TO_CHAR (TRANS_DT, 'DD-MM-YYYY') =
                TO_CHAR (LT1.TRANS_DT, 'DD-MM-YYYY')
                GROUP BY ACT_NUM)) A
                WHERE     LTD.ACT_NUM = #ACT_NUM#
                AND A.ACT_NUM = LTD.ACT_NUM
                AND TO_CHAR (LTD.TRANS_DT, 'DD-MM-YYYY') = A.TRANS_DT
                GROUP BY TO_CHAR (LTD.TRANS_DT, 'DD-MM-YYYY'), TRANS_TYPE, BALANCE,TRANS_SLNO
                 order by TO_CHAR (LTD.TRANS_DT,
		'DD-MM-YYYY') desc,
		TRANS_SLNO desc )b
                <!--ORDER BY TO_DATE (A.TRANS_DT, 'DD-MM-YYYY') DESC,TRANS_SLNO DESC
                )b--> <!--WHERE ROWNUM &lt;= 20-->
                ORDER BY TO_DATE (TRANS_DT, 'DD-MM-YYYY')DESC,TRANS_SLNO DESC limit 20
            </isEqual>
            
            <isEqual prepend="" property="TABLE" compareValue="DAILY_DEPOSIT_TRANS" >
                SELECT * FROM (
                SELECT BATCH_ID,
                TO_CHAR (TRN_DT, 'DD-MM-YYYY') AS TRANS_DT,
                TO_CHAR (NVL(TRN_DT,COLL_DT), 'DD-MM-YYYY') COLL_DT,
                AGENT_NO,
                TRIM(TO_CHAR (AMOUNT, '99,99,99,99,99,990.00')) AMOUNT,
                TRIM(TO_CHAR (ABS (TOTAL_BAL), '99,99,99,99,99,990.00'))
                || CASE
                WHEN TOTAL_BAL &gt; 0 THEN ' Cr.'
                WHEN TOTAL_BAL &lt; 0 THEN ' Dr.'
                ELSE ''
                END
                BALANCE
                FROM daily_deposit_trans
                WHERE ACC_NUM = #ACT_NUM#
                ORDER BY COLL_DT DESC
                )a <!--WHERE ROWNUM &lt;= 20-->
                ORDER BY COLL_DT limit 20
            </isEqual>            
            
            <isEqual prepend="" property="TABLE" compareValue="JOIN_ALL_TRANS" >
                SELECT        
                T.TRANS_ID,
                T.TRANS_DT,
                T.PARTICULARS,
                CASE WHEN T.TRANS_TYPE = 'CREDIT' THEN T.AMOUNT ELSE 0 END AS Withdrawal,
                CASE WHEN T.TRANS_TYPE = 'DEBIT' THEN T.AMOUNT ELSE 0 END AS Deposit,
                <!--CASE WHEN OTHER_BANKS_ACT_MASTER.AVAILABLE_BALANCE &lt; 0 THEN
                OTHER_BANKS_ACT_MASTER.AVAILABLE_BALANCE || ' Cr' 
                ELSE 
                OTHER_BANKS_ACT_MASTER.AVAILABLE_BALANCE || ' Dr' 
                END 
                AS BALANCE-->
                CASE WHEN NVL(GET_OTHERBANK_ACT_BAL( #ACT_NUM#, T.TRANS_DT),0) &lt; 0 THEN
                   NVL(GET_OTHERBANK_ACT_BAL( #ACT_NUM#, T.TRANS_DT),0) || ' Cr'
                ELSE
                   NVL(GET_OTHERBANK_ACT_BAL( #ACT_NUM#, T.TRANS_DT),0) || ' Dr'
                END
                AS BALANCE
                FROM OTHER_BANKS_ACT_MASTER
                JOIN OTHER_BANK_ACCOUNT_PRODUCTS P
                ON OTHER_BANKS_ACT_MASTER.PROD_ID = P.PROD_ID
                JOIN
                ALL_TRANS T
                ON T.ACT_NUM = OTHER_BANKS_ACT_MASTER.ACT_MASTER_ID
                AND T.AC_HD_ID = P.PRINCIPAL_AC_HD
                WHERE     OTHER_BANKS_ACT_MASTER.ACT_MASTER_ID = #ACT_NUM#
                AND T.AUTHORIZE_STATUS = 'AUTHORIZED'
                AND T.STATUS != 'DELETED'
                ORDER BY TRANS_DT DESC,         
                TRANS_ID,
                BATCH_ID
            </isEqual>           
            
            
            <isEqual prepend="" property="TABLE" compareValue="JOIN_ALL_TRANS_SA" >
                SELECT T.TRANS_ID,
                T.TRANS_DT,
                T.PARTICULARS,
                CASE WHEN T.TRANS_TYPE = 'DEBIT' THEN T.AMOUNT ELSE 0 END
                AS Withdrawal,
                CASE WHEN T.TRANS_TYPE = 'CREDIT' THEN T.AMOUNT ELSE 0 END
                AS Deposit,
                CASE
                WHEN NVL (GET_SUSPENSE_ACT_BAL (#ACT_NUM#, T.TRANS_DT), 0) &lt; 0
                THEN
                NVL (GET_SUSPENSE_ACT_BAL (#ACT_NUM#, T.TRANS_DT), 0) || ' Dr'
                ELSE
                NVL (GET_SUSPENSE_ACT_BAL (#ACT_NUM#, T.TRANS_DT), 0) || ' Cr'
                END
                AS BALANCE
                FROM SUSPENSE_ACCOUNT_MASTER
                JOIN SUSPENSE_PRODUCT P
                ON SUSPENSE_ACCOUNT_MASTER.SUSPENSE_PROD_ID = P.PROD_ID
                JOIN ALL_TRANS T
                ON     T.ACT_NUM = SUSPENSE_ACCOUNT_MASTER.SUSPENSE_ACCT_NUM
                AND T.AC_HD_ID = P.AC_HD_ID
                WHERE     SUSPENSE_ACCT_NUM = #ACT_NUM#
                AND T.AUTHORIZE_STATUS = 'AUTHORIZED'
                AND T.STATUS != 'DELETED'
                ORDER BY TRANS_DT DESC, TRANS_ID, BATCH_ID
            </isEqual>        
                   
        </dynamic>
    </dynamic-mapped-statement>
    
    <mapped-statement name="getSelectCategory" result-class="java.util.HashMap">
        SELECT CUST_CATEGORY FROM CUSTOMER WHERE CUST_ID=#CUSTOMER ID:VARCHAR#
    </mapped-statement> 
        
        
    <mapped-statement name="getSelectDebitInterest" result-class="java.util.LinkedHashMap">
        SELECT NVL(IBAL,0) AS  "DEBITEDINTEREST"  FROM ADV_TRANS_DETAILS ATD WHERE 
        TRANS_DT = (SELECT MAX(TRANS_DT) FROM ADV_TRANS_DETAILS WHERE ATD.ACT_NUM=ACT_NUM AND ACT_NUM=#ACCT_NUM:VARCHAR# AND TRANS_DT &lt;= #START_DT:DATE# AND TRN_CODE='DI' )
        AND TRN_CODE='DI'        
    </mapped-statement>  
        
    <mapped-statement name="getSelectPaidInterest" result-class="java.lang.Object">
    
        SELECT NVL(SUM (INTEREST),0)
        AS "PAIDINTEREST"
        FROM ADV_TRANS_DETAILS
        WHERE ACT_NUM = #ACCT_NUM:VARCHAR# AND TRANS_TYPE='CREDIT'
        AND TRANS_DT BETWEEN #LAST_INT_CALC_DT:DATE# AND #CURR_DT:DATE#
            
    </mapped-statement>   
         
    <mapped-statement name="getMaxImbpLoanAmount" result-class="java.util.HashMap">
        SELECT I.MAX_LOAN_AMOUNT
        FROM IMBP_SETTINGS I
        JOIN IMBP_SETTINGS_PROD IP ON I.IMBP_ID = IP.IMBP_ID 
        WHERE I.IMBP_TYPE = 'GOLD_LOAN' AND IP.PROD_ID = #PRODUCT_ID:VARCHAR# AND I.STATUS != 'DELTED' AND i.effect_from=
        (SELECT MAX(ISS.EFFECT_FROM) FROM IMBP_SETTINGS ISS WHERE ISS.STATUS != 'DELETED' AND ISS.IMBP_TYPE = 'GOLD_LOAN')
    </mapped-statement>
    <mapped-statement name="getSumLoanBalPrinAmount" result-class="java.util.HashMap">    
        
        SELECT SUM(F.LOAN_BALANCE_PRINCIPAL) AS BALANCE
        FROM LOANS_FACILITY_DETAILS F
        JOIN LOANS_BORROWER B ON F.BORROW_NO = B.BORROW_NO
        WHERE B.CUST_ID = #CUST_ID:VARCHAR# AND F.AUTHORIZE_STATUS_1 = 'AUTHORIZED' AND F.STATUS != 'DELETED' AND
        F.PROD_ID IN 
        (
        SELECT IP.PROD_ID
        FROM IMBP_SETTINGS I
        JOIN IMBP_SETTINGS_PROD IP ON IP.IMBP_ID = I.IMBP_ID
        WHERE I.IMBP_TYPE = 'GOLD_LOAN' AND I.STATUS != 'DELETED' AND
        I.EFFECT_FROM = (SELECT MAX(ISS.EFFECT_FROM) FROM IMBP_SETTINGS ISS WHERE ISS.STATUS != 'DELETED' AND ISS.IMBP_TYPE = 'GOLD_LOAN') AND
        I.IMBP_ID IN 
        (
        SELECT I.IMBP_ID
        FROM IMBP_SETTINGS I
        JOIN IMBP_SETTINGS_PROD IP ON I.IMBP_ID = IP.IMBP_ID
        WHERE I.STATUS != 'DELETED' AND 
        I.EFFECT_FROM = (SELECT MAX(ISS.EFFECT_FROM) FROM IMBP_SETTINGS ISS WHERE ISS.STATUS != 'DELETED' AND ISS.IMBP_TYPE = 'GOLD_LOAN') AND
        IP.PROD_ID = #PRODUCT_ID:VARCHAR#
        )
        ) 
    </mapped-statement>
    <mapped-statement name="getAuctionRequire" result-class="java.util.HashMap" >
        SELECT AUCTION_AMT_ALLOWED FROM LOANS_PROD_ACPARAM 
        WHERE PROD_ID = #PROD_ID:VARCHAR# 
    </mapped-statement>
    <dynamic-mapped-statement name="getSelectAuctionMDSCustDetails" result-class="java.util.LinkedHashMap">
        SELECT MA.CHITTAL_NO ||'_'||MA.SUB_NO AS CHITTAL_NO, MA.MEMBER_TYPE, MA.MEMBER_NO, MA.MEMBER_NAME, MPD.PRIZED_AMOUNT as AMOUNT, MPD.PAYMENT_DATE AS END_DT,MPD.INSTALLMENT_NO AS AUCTION_NO
        FROM MDS_APPLICATION MA,MDS_PRIZED_MONEY_DETAILS MPD WHERE MPD.CHITTAL_NO=MA.CHITTAL_NO AND MPD.SUB_NO=MA.SUB_NO
        AND MPD.SUB_NO=MA.SUB_NO
        AND MPD.STATUS!='DELETED' AND MPD.AUTHORIZED_STATUS IS NOT NULL AND MPD.AUTHORIZED_STATUS='AUTHORIZED'
        AND  NOT EXISTS (SELECT * FROM MDS_MONEY_PAYMENT_DETAILS WHERE CHITTAL_NO=MA.CHITTAL_NO AND SUB_NO=MA.SUB_NO AND SCHEME_NAME=#MDS_PROD_ID:VARCHAR#)
        AND (LOAN_GIVEN IS NULL OR LOAN_GIVEN='N') AND MA.SCHEME_NAME=#MDS_PROD_ID:VARCHAR#
        <dynamic>
            <!--<isParameterPresent>
                <isNotNull prepend = "AND" property = "CHITTAL_NO">
                    MA.CHITTAL_NO=#CHITTAL_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>-->
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="CHITTAL_NO">
                    UPPER(MA.CHITTAL_NO ||'_'||MA.SUB_NO) LIKE UPPER('%$CHITTAL_NO$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBER_TYPE">
                    UPPER(MA.MEMBER_TYPE) LIKE UPPER('%$MEMBER_TYPE$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBER_NO">
                    UPPER(MA.MEMBER_NO) LIKE UPPER('%$MEMBER_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBER_NAME">
                    UPPER(MA.MEMBER_NAME) LIKE UPPER('%$MEMBER_NAME$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="AMOUNT">
                    UPPER(MPD.PRIZED_AMOUNT) LIKE UPPER('%$AMOUNT$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="END_DT">
                    UPPER(MPD.PAYMENT_DATE) LIKE UPPER('%$END_DT$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        GROUP BY MA.CHITTAL_NO,MA.SUB_NO, MA.MEMBER_TYPE, MA.MEMBER_NO, MA.MEMBER_NAME,MPD.PRIZED_AMOUNT,MPD.PAYMENT_DATE,MPD.INSTALLMENT_NO ORDER BY MA.CHITTAL_NO
    </dynamic-mapped-statement>
    <dynamic-mapped-statement name="getSelectAuctionMDSCustDetailsForSalRecovery" result-class="java.util.LinkedHashMap">
        SELECT MA.CHITTAL_NO ||'_'||MA.SUB_NO AS CHITTAL_NO, MA.MEMBER_TYPE, MA.MEMBER_NO, MA.MEMBER_NAME, MPD.PRIZED_AMOUNT as AMOUNT, MPD.PAYMENT_DATE AS END_DT
        FROM MDS_TRANS_DETAILS MTD, MDS_APPLICATION MA,MDS_PRIZED_MONEY_DETAILS MPD WHERE MA.CHITTAL_NO=MTD.CHITTAL_NO(+) AND MA.SUB_NO=MTD.SUB_NO(+)
        and  MPD.CHITTAL_NO=MA.CHITTAL_NO and MPD.SUB_NO=MA.SUB_NO
        AND MTD.STATUS!='DELETED' AND MTD.AUTHORIZE_STATUS IS NOT NULL AND MTD.AUTHORIZE_STATUS='AUTHORIZED'
        AND  EXISTS (SELECT * FROM MDS_PRIZED_MONEY_DETAILS WHERE CHITTAL_NO=MA.CHITTAL_NO AND SUB_NO=MA.SUB_NO AND SCHEME_NAME=#MDS_PROD_ID:VARCHAR#)
        AND (LOAN_GIVEN IS NULL OR LOAN_GIVEN='N') AND MA.SCHEME_NAME=#MDS_PROD_ID:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "CHITTAL_NO">
                    MA.CHITTAL_NO=#CHITTAL_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        GROUP BY MA.CHITTAL_NO,MA.SUB_NO, MA.MEMBER_TYPE, MA.MEMBER_NO, MA.MEMBER_NAME,MPD.PRIZED_AMOUNT,MPD.PAYMENT_DATE ORDER BY MA.CHITTAL_NO
    </dynamic-mapped-statement>
    <mapped-statement name="getwaiveoffDetails" result-class="java.util.HashMap" >
        SELECT * FROM LOANS_PROD_SUBSIDY_REBATE 
        WHERE PROD_ID = #PROD_ID:VARCHAR# 
    </mapped-statement>
    <mapped-statement name="getgoldRenewalDetails" result-class="java.util.HashMap" >
        select nvl(RENEW_WITH_OLDAMT,'N') as RENEW_WITH_OLDAMT,nvl(RENEW_THROUGH_CASH,'N') as RENEW_THROUGH_CASH,
        nvl(RENEW_WITH_MARKET_RATE,'N') as RENEW_WITH_MARKET_RATE from 
        LOANS_PROD_ACPARAM where PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="updateGldshadow" inline-parameters="true" >
        update LOANS_FACILITY_DETAILS set SHADOW_DEBIT=AVAILABLE_BALANCE where ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getLoanLiability" result-class="java.util.LinkedHashMap" >
        SELECT p.prod_desc, f.acct_num AS acct_num, sd.LIMIT,
        f.loan_balance_principal AS Prn_Due, sd.from_dt, sd.to_dt,
        get_gold_sectext (f.acct_num) AS oranaments,
        trunc(get_gold_sectext_gross_wt (f.acct_num)::numeric,3) AS gross_weight,
        trunc(get_gold_sectext_net_wt (f.acct_num)::numeric,3) AS net_weight,
        f.last_int_calc_dt AS lastcalcdt,p.AUTHORIZE_REMARK
        FROM loans_facility_details f JOIN loans_product p ON p.prod_id = f.prod_id
        JOIN loans_sanction_details sd ON sd.borrow_no = f.borrow_no
        JOIN loans_borrower b ON b.borrow_no = f.borrow_no
        JOIN customer c ON c.cust_id = b.cust_id
        JOIN share_acct sa ON sa.cust_id = c.cust_id
        WHERE sa.share_acct_no = #MemberNo:VARCHAR#  
        <!--AND f.clear_balance != 0 -->
        AND f.ACCT_STATUS !='CLOSED'
        AND F.AUTHORIZE_STATUS_1 NOT IN ('REJECTED') 
        UNION
        SELECT prod_desc, acct_num, 0 AS LIMIT, 
        princ_due AS Prn_Due,from_dt, to_dt, '' AS oranaments,
        0 AS gross_weight,
        0 AS net_weight,
        NULL AS lastcalcdt,NULL AS AUTHORIZE_REMARK
        FROM mds_liability_details 
        WHERE membership_no=#MemberNo:VARCHAR# 
    </mapped-statement>
    <mapped-statement name="getMemberLiability" result-class="java.util.HashMap" >
        SELECT P.PROD_DESC,F.ACCT_NUM,SD.LIMIT,F.LOAN_BALANCE_PRINCIPAL,SD.FROM_DT,SD.TO_DT,GET_GOLD_SECTEXT(F.ACCT_NUM) AS ORANAMENTS
        FROM LOANS_FACILITY_DETAILS F
        JOIN LOANS_PRODUCT P ON P.PROD_ID = F.PROD_ID
        JOIN LOANS_SANCTION_DETAILS SD ON SD.BORROW_NO = F.BORROW_NO
        JOIN LOANS_BORROWER B ON B.BORROW_NO = F.BORROW_NO
        JOIN CUSTOMER C ON C.CUST_ID = B.CUST_ID
        JOIN SHARE_ACCT SA ON SA.CUST_ID = C.CUST_ID
        WHERE SA.SHARE_ACCT_NO =#MemberNo:VARCHAR# AND F.CLEAR_BALANCE!=0
    </mapped-statement>
    <mapped-statement name="getPenalwaiveOff" result-class="java.util.HashMap" >
        SELECT * FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM=#ACT_NUM:VARCHAR#
    </mapped-statement>
    
    
    <mapped-statement name="getInterestAdv" result-class="java.util.HashMap" >
        select GET_ADV_INTEREST_APPLICATION(#ACTNUM:VARCHAR#,#ASONDT:DATE#) as INTEREST from dual
    </mapped-statement>
    
    
    
    <mapped-statement name="getPenalInterestAdv" result-class="java.util.HashMap" >
        select GET_ADV_PEN_INT_APPLICATION(#ACTNUM:VARCHAR#,#ASONDT:DATE#) as INTEREST from dual
    </mapped-statement>
    
    <mapped-statement name="getPenalInterestAdvKCC" result-class="java.util.HashMap" >
        select get_kcc_penal_int(#ACTNUM:VARCHAR#,#LOANDATE:DATE#,#ASONDT:DATE#) as INTEREST from dual
    </mapped-statement>
    
    <mapped-statement name="getKCCrenewalCount" result-class="java.util.HashMap" >
        select count(*) as count from KCC_RENEWAL_DETAILS where status='CREATED' and branch=#BRANCH#
        and ACT_NUM=#ACTNUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getKCCproductCount" result-class="java.util.HashMap" >
        select TOT_KCC_LIMIT  from LOANS_PRODUCT where PROD_ID=#PROD_ID:VARCHAR# AND KCC_NATURE='Y'
    </mapped-statement>
     
    <mapped-statement name="getDepositUnlienCheck" result-class="java.util.HashMap" >
        select deposit_unlien from deposits_prod_scheme where PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getUpdateDepositSubAcInfoStatusUnlien" result-class="java.util.HashMap" >
        UPDATE DEPOSIT_SUB_ACINFO SET STATUS = 'CREATED' WHERE DEPOSIT_NO = #BATCH_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getSelectShareLinkFromLoansProduct" result-class="java.util.HashMap" >
        SELECT SHARE_LINKING,LOAN_RENEWAL_ALLOWED,LOAN_RECEIPT_IN_RENEWAL FROM LOANS_PRODUCT WHERE PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getKccNature" result-class="java.util.HashMap" >
        select LP.KCC_NATURE from LOANS_FACILITY_DETAILS lf,loans_product lp where LP.PROD_ID = LF.PROD_ID and LF.ACCT_NUM =#ACT_NUM:VARCHAR#
        and LP.AUTHORIZE_STATUS = 'AUTHORIZED' and LF.AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        and LF.STATUS!='DELETED'
    </mapped-statement>
    
    <mapped-statement name="getSelectExcludeScStFromLoansProduct" result-class="java.util.HashMap" >
        SELECT EXCLUDE_SC_ST FROM LOANS_PRODUCT WHERE PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getSelectBehavesLikeForODFrmAdvanceProdct" result-class="java.util.HashMap" >
        select behaves_like from advance_product ap join loans_sanction_details lsd on ap.prod_id=lsd.product_id where lsd.borrow_no in (select BORROW_NO from loans_borrower where cust_id = #CUST_ID:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name="getSelectLimitAmtForOD" result-class="java.util.HashMap" >
        select lsd.limit as limit from loans_sanction_details lsd 
        join loans_product lp on lp.prod_id=lsd.product_id
        join advance_product ap on ap.prod_id=lsd.product_id 
        where lsd.borrow_no in (select borrow_no from loans_borrower where cust_id = #CUSTID:VARCHAR#) and lp.SHARE_LINKING='Y' and ap.behaves_like='OD'
    </mapped-statement>
    <mapped-statement name="getUpdateDepositLienForDepositUnlien" result-class="java.util.HashMap" >
        UPDATE DEPOSIT_LIEN SET STATUS ='UNLIENED',AUTHORIZE_STATUS='NULL',UNLIEN_DT=#LIEN_DT:DATE#,REMARKS='UNLIENED',UNLIEN_REMARKS='UNLIENED' WHERE DEPOSIT_NO = #BATCH_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="updateMDSApplDeletedLoanGivenStatus" result-class="java.util.HashMap">
        update mds_application set loan_given='N',loan_status='',loan_act_num='' where chittal_no = #CHITTAL_NO:VARCHAR# 
    </mapped-statement>
    <mapped-statement name="getCustomerPhoneNo"  result-class="java.util.HashMap">
        SELECT AREA_CODE,PHONE_NUMBER FROM CUST_PHONE 
        WHERE CUST_ID=#CUST_ID:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
    
    <mapped-statement name="getShareOutstanding" result-class="java.util.HashMap" > 
        select OUTSTANDING_AMOUNT FROM SHARE_ACCT where SHARE_ACCT_NO=#SHARE_ACCT_NO:VARCHAR#  AND CUST_ID=#CUST_ID:VARCHAR# 
    </mapped-statement> 
    <mapped-statement name="getFixedOrMarket" result-class="java.util.HashMap" > 
        SELECT BY_MARGIN_FIXED,FIXED_RATE_GOLD FROM LOANS_PROD_INTCALC where PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement> 
    <mapped-statement name="getBeavesLikeOverDraft" result-class="java.util.HashMap" > 
        SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE PROD_ID=#PROD_ID:VARCHAR# AND STATUS!='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED'
    </mapped-statement> 
    <mapped-statement name="updateCustPhone" result-class="java.util.HashMap" >
		
        update CUST_PHONE set PHONE_NUMBER = #PHONE_NUMBER:VARCHAR# where CUST_ID=#CUST_ID:VARCHAR# AND status not in ('DELETED')

    </mapped-statement>
    <mapped-statement name="insertCustPhone" result-class="java.util.HashMap" >
		
        insert into CUST_PHONE (CUST_ID,PHONE_TYPE_ID,AREA_CODE,PHONE_NUMBER
        ,ADDR_TYPE,PHONE_ID,STATUS,STATUS_BY,STATUS_DT)values
        (#CUST_ID:VARCHAR#,#PHONE_TYPE_ID:VARCHAR#,#AREA_CODE:VARCHAR#
        ,#PHONE_NUMBER:VARCHAR#,#ADDR_TYPE:VARCHAR#,cast(#PHONE_ID# as NUMERIC)
        ,#STATUS:VARCHAR#,#STATUS_BY:VARCHAR#,#STATUS_DT:VARCHAR#)

    </mapped-statement>
    <mapped-statement name="deleteTermLoanInterestMaintance" result-class="java.util.HashMap" >
        UPDATE LOANS_INT_MAINTENANCE SET
        STATUS = #STATUS:VARCHAR#,
        STATUS_BY = #STATUS_BY:VARCHAR#,
        STATUS_DT = #STATUS_DT:TIMESTAMP# 
        WHERE ACCT_NUM = #ACT_NUM:VARCHAR# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>
    <mapped-statement name="getLoanStatus" result-class="java.util.HashMap" > 
        SELECT P.PROD_DESC,A.ACT_NUM,GET_JOINT_CUST(A.ACT_NUM) AS ACNAME,A.CHARGE_TYPE,A.BALANCE,A.S_ORDER,A.MOD_TYPE
        FROM
        (
        WITH CTE_A AS
        (
        SELECT T.ACT_NUM,'NOTICE CHARGES' AS CHARGE_TYPE,SUM(NVL(cast(T.NOTICE_CHARGES as numeric),0)) AS AMOUNT
        FROM LOAN_TRANS_DETAILS T
        WHERE T.ACT_NUM = #ACT_NUM:VARCHAR# AND T.TRANS_DT &lt;= #FROM_DATE:DATE# AND
        T.TRANS_TYPE = 'CREDIT' AND T.AUTHORIZE_STATUS = 'AUTHORIZED'
        GROUP BY T.ACT_NUM
        UNION ALL
        SELECT T.ACT_NUM,'INSURANCE CHARGES' AS CHARGE_TYPE,SUM(NVL(T.INSURANCE_CHARGE,0)) AS AMOUNT
        FROM LOAN_TRANS_DETAILS T
        WHERE T.ACT_NUM = #ACT_NUM:VARCHAR# AND T.TRANS_DT &lt;= #FROM_DATE:DATE# AND
        T.TRANS_TYPE = 'CREDIT' AND T.AUTHORIZE_STATUS = 'AUTHORIZED'
        GROUP BY T.ACT_NUM
        UNION ALL
        SELECT T.ACT_NUM,'ARBITRARY CHARGES' AS CHARGE_TYPE,SUM(NVL(cast(T.ARBITARY_CHARGE as numeric),0)) AS AMOUNT
        FROM LOAN_TRANS_DETAILS T
        WHERE T.ACT_NUM = #ACT_NUM:VARCHAR# AND T.TRANS_DT &lt;= #FROM_DATE:DATE# AND
        T.TRANS_TYPE = 'CREDIT' AND T.AUTHORIZE_STATUS = 'AUTHORIZED'
        GROUP BY T.ACT_NUM
        UNION ALL
        SELECT T.ACT_NUM,'LEGAL CHARGES' AS CHARGE_TYPE,SUM(NVL(T.LEGAL_CHARGE,0)) AS AMOUNT
        FROM LOAN_TRANS_DETAILS T
        WHERE T.ACT_NUM =#ACT_NUM:VARCHAR# AND T.TRANS_DT &lt;=#FROM_DATE:DATE# AND
        T.TRANS_TYPE = 'CREDIT' AND T.AUTHORIZE_STATUS = 'AUTHORIZED'
        GROUP BY T.ACT_NUM
        UNION ALL
        SELECT T.ACT_NUM,'MISCELLANEOUS CHARGES' AS CHARGE_TYPE,SUM(NVL(T.MISC_CHARGES,0)) AS AMOUNT
        FROM LOAN_TRANS_DETAILS T
        WHERE T.ACT_NUM = #ACT_NUM:VARCHAR# AND T.TRANS_DT &lt;= #FROM_DATE:DATE# AND
        T.TRANS_TYPE = 'CREDIT' AND T.AUTHORIZE_STATUS = 'AUTHORIZED'
        GROUP BY T.ACT_NUM
        UNION ALL
        SELECT T.ACT_NUM,'EXECUTION DECREE CHARGES' AS CHARGE_TYPE,SUM(NVL(cast(T.ADVERTISE_CHARGE as numeric),0)) AS AMOUNT
        FROM LOAN_TRANS_DETAILS T
        WHERE T.ACT_NUM = #ACT_NUM:VARCHAR# AND T.TRANS_DT &lt;= #FROM_DATE:DATE# AND
        T.TRANS_TYPE = 'CREDIT' AND T.AUTHORIZE_STATUS = 'AUTHORIZED'
        GROUP BY T.ACT_NUM
        UNION ALL
        SELECT T.ACT_NUM,'POSTAGE CHARGES' AS CHARGE_TYPE,SUM(NVL(cast(T.POSTAGE_CHARGE as numeric),0)) AS AMOUNT
        FROM LOAN_TRANS_DETAILS T
        WHERE T.ACT_NUM = #ACT_NUM:VARCHAR# AND T.TRANS_DT &lt;= #FROM_DATE:DATE# AND
        T.TRANS_TYPE = 'CREDIT' AND T.AUTHORIZE_STATUS = 'AUTHORIZED'
        GROUP BY T.ACT_NUM
        UNION ALL
        SELECT T.ACT_NUM,'OTHERS' AS CHARGE_TYPE,SUM(NVL(cast(T.ADVERTISE_CHARGE as numeric),0)) AS AMOUNT
        FROM LOAN_TRANS_DETAILS T
        WHERE T.ACT_NUM = #ACT_NUM:VARCHAR# AND T.TRANS_DT &lt;= #FROM_DATE:DATE# AND
        T.TRANS_TYPE = 'CREDIT' AND T.AUTHORIZE_STATUS = 'AUTHORIZED'
        GROUP BY T.ACT_NUM
        UNION
        SELECT T.ACT_NUM,t.charge_type AS charge_type, SUM (nvl(t.PAID_AMT,0)) AS amount
        FROM loans_acct_charge_details t
        WHERE T.ACT_NUM = #ACT_NUM:VARCHAR# AND T.charge_date &lt;= #FROM_DATE:DATE# AND
        t.status != 'DELETED' AND T.AUTHORIZE_STATUS = 'AUTHORIZED'
        GROUP BY t.act_num, t.charge_type),
        CTE_B AS
        (
        SELECT A.ACT_NUM,A.CHARGE_TYPE,SUM(A.AMOUNT) AS AMOUNT
        FROM LOANS_ACCT_CHARGE_DETAILS A
        WHERE A.ACT_NUM = #ACT_NUM:VARCHAR# AND A.CHARGE_DATE &lt;= #FROM_DATE:DATE# AND
        A.AUTHORIZE_STATUS = 'AUTHORIZED' AND A.STATUS != 'DELETED'
        GROUP BY A.ACT_NUM,A.CHARGE_TYPE
        )
        SELECT B.ACT_NUM,A.CHARGE_TYPE,B.AMOUNT - A.AMOUNT AS BALANCE,NULL AS S_ORDER,'A' AS MOD_TYPE
        FROM CTE_B B
        LEFT JOIN CTE_A A ON A.ACT_NUM = B.ACT_NUM AND A.CHARGE_TYPE = NVL(B.CHARGE_TYPE,'OTHERS')
        UNION ALL
        SELECT F.ACCT_NUM AS ACT_NUM,'PRINCIPAL' AS CHARGE_TYPE,
        CASE WHEN P.BEHAVES_LIKE != 'OD' THEN GET_TL_BALANCE(F.ACCT_NUM,#FROM_DATE:DATE#)
        ELSE GET_ADV_BALANCE(F.ACCT_NUM,#FROM_DATE:DATE#)
        END AS BALANCE,
        1 AS S_ORDER,'A' AS MOD_TYPE
        FROM LOANS_FACILITY_DETAILS F
        JOIN LOANS_PRODUCT P ON P.PROD_ID = F.PROD_ID
        JOIN LOANS_SANCTION_DETAILS SD ON SD.BORROW_NO = F.BORROW_NO
        WHERE F.ACCT_NUM = #ACT_NUM:VARCHAR#
        UNION ALL
        SELECT F.ACCT_NUM AS ACT_NUM,'INTEREST' AS CHARGE_TYPE,
        CASE WHEN P.BEHAVES_LIKE != 'OD' THEN GET_TL_INTEREST(cast(F.ACCT_NUM as character varying),cast(SD.FROM_DT as date),cast(#FROM_DATE# as date))
        ELSE GET_ADV_INTEREST_APPLICATION(F.ACCT_NUM,#FROM_DATE:DATE#)
        END AS BALANCE,
        2 AS S_ORDER,'A' AS MOD_TYPE
        FROM LOANS_FACILITY_DETAILS F
        JOIN LOANS_PRODUCT P ON P.PROD_ID = F.PROD_ID
        JOIN LOANS_SANCTION_DETAILS SD ON SD.BORROW_NO = F.BORROW_NO
        WHERE F.ACCT_NUM = #ACT_NUM:VARCHAR#
        UNION ALL
        SELECT F.ACCT_NUM AS ACT_NUM,'PENAL INTEREST' AS CHARGE_TYPE,
        CASE WHEN P.BEHAVES_LIKE != 'OD' THEN GET_TL_OD_INTEREST(F.ACCT_NUM,#FROM_DATE:DATE#)
        ELSE GET_ADV_PEN_INT_APPLICATION(F.ACCT_NUM,#FROM_DATE:DATE#)
        END AS BALANCE,
        3 AS S_ORDER,'A' AS MOD_TYPE
        FROM LOANS_FACILITY_DETAILS F
        JOIN LOANS_PRODUCT P ON P.PROD_ID = F.PROD_ID
        JOIN LOANS_SANCTION_DETAILS SD ON SD.BORROW_NO = F.BORROW_NO
        WHERE F.ACCT_NUM = #ACT_NUM:VARCHAR#
        UNION ALL
        SELECT F.ACCT_NUM AS ACT_NUM,'PRINCIPAL OVERDUE' AS CHARGE_TYPE,
        CASE WHEN P.BEHAVES_LIKE != 'OD' THEN GET_TL_INST_OD(F.ACCT_NUM,#FROM_DATE:DATE#)
        ELSE 0
        END AS BALANCE,
        4 AS S_ORDER,'B' AS MOD_TYPE
        FROM LOANS_FACILITY_DETAILS F
        JOIN LOANS_PRODUCT P ON P.PROD_ID = F.PROD_ID
        JOIN LOANS_SANCTION_DETAILS SD ON SD.BORROW_NO = F.BORROW_NO
        WHERE F.ACCT_NUM = #ACT_NUM:VARCHAR#
        ) A
        JOIN LOANS_FACILITY_DETAILS F ON F.ACCT_NUM = A.ACT_NUM
        JOIN LOANS_PRODUCT P ON P.PROD_ID = F.PROD_ID
        WHERE BALANCE &lt;&gt; 0
        UNION ALL
        SELECT NULL AS PROD_DESC,NULL AS ACT_NUM,NULL AS ACNAME,NULL AS CHARGE_TYPE,0 AS BALANCE,0 AS S_ORDER,NULL AS MOD_TYPE
        FROM REP_TMPDATA
        WHERE REP_TMPDATA.ACCOUNTNO = #ACT_NUM:VARCHAR# AND
        REP_TMPDATA.FDATE = #FROM_DATE:DATE#
        ORDER BY MOD_TYPE,S_ORDER
    </mapped-statement> 

    <mapped-statement name="getTotalLoanBalance" result-class="java.util.HashMap" > 
        SELECT GET_TL_TOTAL(#ACT_NUM:VARCHAR#,#CURRDATE:DATE#) as TOTAL_LOAN_BALANCE from dual
    </mapped-statement>        

    <mapped-statement name="getDefaultGoldLoanProduct" result-class="java.util.HashMap">
        SELECT PROD_ID as KEY, PROD_DESC as VALUE FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK = 'GOLD_LOAN'
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED') AND DEFAULT_PROD='Y'
		<!-- AND AUTHORIZE_STATUS = 'AUTHORIZED' -->
    </mapped-statement>
    
    <mapped-statement name="getNoOfLoan" result-class="java.util.HashMap">
        <!--SELECT   COUNT (dl.deposit_no) AS COUNT,dl.LIEN_AC_NO
        FROM deposit_lien dl
        WHERE dl.deposit_no = #DEPOSIT_NUM:VARCHAR# AND dl.status = 'CREATED' and DL.REMARKS ='Lien for LTD'
        GROUP BY DL.LIEN_AC_NO-->        
        SELECT   DL.LIEN_AC_NO,DL.LIEN_AMOUNT,DSA.DEPOSIT_NO,DSA.AVAILABLE_BALANCE
        FROM DEPOSIT_LIEN DL,DEPOSIT_SUB_ACINFO DSA
        WHERE DL.DEPOSIT_NO = #DEPOSIT_NUM:VARCHAR#
        AND DSA.DEPOSIT_NO = DL.DEPOSIT_NO
        AND DL.STATUS = 'CREATED'
        AND DSA.STATUS = 'LIEN'
        AND (DL.AUTHORIZE_STATUS IS NULL OR DL.AUTHORIZE_STATUS = 'AUTHORIZED')
        AND DL.REMARKS = 'Lien for LTD'
        ORDER BY DL.LIEN_DT DESC
        
    </mapped-statement>
    
    <mapped-statement name="getSuspenseCreditDebitProductId" result-class="java.util.HashMap">
        SELECT SUSPENSE_CREDIT_PROD_ID,SUSPENSE_DEBIT_PROD_ID FROM LOANS_PROD_ACPARAM 
        WHERE PROD_ID = #prodId:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateSecurityReleaseDetails" result-class="java.util.HashMap" >
        update SECURITY_DETAILS set IS_RELEASE = #STATUS:VARCHAR# where ACCT_NUM = #ACCT_NUM:VARCHAR# and AUTHORIZE_STATUS = 'AUTHORIZED' and STATUS !='DELETED'
    </mapped-statement>
        
    <mapped-statement name="selectShareType" result-class="java.util.HashMap">
        SELECT SA.SHARE_TYPE FROM SHARE_ACCT SA WHERE SA.SHARE_ACCT_NO = #SHARE_ACCT_NO:VARCHAR# AND SA.STATUS != 'CLOSED'
    </mapped-statement>
    
    <mapped-statement name="getMaxImbpLoanAmt" result-class="java.util.HashMap">
        SELECT IMBP.MAX_LOAN_AMOUNT,IMBP.MAX_NO_OF_LOANS FROM IMBP_SETTINGS IMBP JOIN IMBP_SETTINGS_PROD IMPROD 
        ON IMBP.IMBP_ID = IMPROD.IMBP_ID AND IMBP.STATUS != 'DELETED' AND
        IMBP.IMBP_TYPE = #IMBP_TYPE:VARCHAR# AND IMPROD.PROD_ID = #PROD_ID:VARCHAR#
        AND NVL(IMBP.SHARE_TYPE, #SHARE_TYPE:VARCHAR#) = #SHARE_TYPE:VARCHAR#
        AND IMBP.EFFECT_FROM = (SELECT MAX(IMBPS.EFFECT_FROM) AS EFFECT_FROM FROM IMBP_SETTINGS IMBPS 
        WHERE IMBPS.IMBP_TYPE = #IMBP_TYPE:VARCHAR# AND NVL(IMBPS.SHARE_TYPE, #SHARE_TYPE:VARCHAR#) = #SHARE_TYPE:VARCHAR# AND IMBPS.STATUS != 'DELETED')
    </mapped-statement>
    
    <mapped-statement name="getLoanDetails" result-class="java.util.HashMap">
        SELECT DISTINCT(LB.CUST_ID), LB.BORROW_NO, LFD.CLEAR_BALANCE, LFD.SHADOW_DEBIT, LFD.SHADOW_CREDIT 
        FROM LOANS_FACILITY_DETAILS LFD JOIN LOANS_BORROWER LB 
        ON LFD.BORROW_NO = LB.BORROW_NO AND LFD.STATUS != 'DELETED' AND LB.STATUS != 'DELETED' AND LFD.ACCT_STATUS != 'CLOSED'
        AND LB.CUST_ID = #CUST_ID:VARCHAR# AND LFD.PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
     <mapped-statement name="getSecurityReleaseDetails" result-class="java.util.HashMap" >
        SELECT IS_RELEASE FROM SECURITY_DETAILS  WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' AND STATUS !='DELETED'
    </mapped-statement>
    <mapped-statement name="getSuspeceIsAuction" result-class="java.util.HashMap" >
        SELECT ISAUCTION FROM SUSPENSE_ACCOUNT_MASTER  WHERE SUSPENSE_ACCT_NUM = #ACCT_NUM:VARCHAR# AND AUTHORIZE_STATUS = 'AUTHORIZED' AND STATUS !='DELETED'
    </mapped-statement>
    
    <mapped-statement name="getMDSApplicationDetails" result-class="java.util.HashMap" >
        SELECT * FROM MDS_APPLICATION WHERE LOAN_ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getLoansRepaymentData" result-class="java.util.HashMap" >
        SELECT LSD.FROM_DT,LSD.TO_DT,LRS.FIRST_INSTALL_DT,LRS.LAST_INSTALL_DT,LRS.NO_INSTALLMENTS,       
        LRS.REPAYMENT_TYPE,LRS.LOAN_AMOUNT,LSD.REPAYMENT_FREQUENCY,LRS.SCHEDULE_NO,LRS.INSTALL_TYPE,LFD.PROD_ID,LFD.LOAN_BALANCE_PRINCIPAL ,
        NVL(LRS.LOAN_AMOUNT,0)-NVL(LFD.LOAN_BALANCE_PRINCIPAL,0) AS PAID
        FROM LOANS_SANCTION_DETAILS LSD,LOANS_REPAY_SCHEDULE LRS, LOANS_FACILITY_DETAILS LFD,LOANS_PRODUCT LP
        WHERE LFD.BORROW_NO  = LSD.BORROW_NO AND LFD.ACCT_NUM=LRS.ACCT_NUM AND LP.PROD_ID =LFD.PROD_ID AND LRS.REPAY_ACTIVE ='Y'
        AND LP.AUTHORIZE_REMARK !='GOLD_LOAN' AND LP.BEHAVES_LIKE !='LOANS_AGAINST_DEPOSITS' AND LRS.ACCT_NUM =#ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="checkDepositLienDetails" result-class="java.util.HashMap" >
	SELECT * FROM DEPOSIT_LIEN  WHERE DEPOSIT_NO =#DEPOSIT_NO# AND STATUS!='UNLIENED' AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>

    <mapped-statement name="getLoanAmountForEmi" result-class="java.util.HashMap" >
      select GET_DUEDETAILS_EMI(#Act_Num:varchar#) as DETAIL from dual 
    </mapped-statement>
    
    <mapped-statement name="getDefaultGoldPurity" result-class="java.util.HashMap" >
        SELECT LOOKUP_REF_ID AS KEY, LOOKUP_DESC AS VALUE,DEFAULT_ITEM
        FROM GOLD_CONFIGURATION GC,LOOKUP_MASTER LM
        WHERE LM.LOOKUP_DESC = GC.PURITY_OF_GOLD
        AND GC.STATUS !='DELETED'
        AND GC.AUTHORIZE_STATUS = 'AUTHORIZED'
        AND GC.TO_DATE IS NULL
        AND UPPER (LM.LOOKUP_ID) = UPPER (#LOOKUP_ID:varchar#)
        AND GC.DEFAULT_ITEM = 'Y'
    </mapped-statement>
    
    <mapped-statement name="getSuspenseAccountOfCustomer" result-class="java.util.HashMap" >
        SELECT * FROM SUSPENSE_ACCOUNT_MASTER SAM,SUSPENSE_PRODUCT SP
        WHERE SP.PROD_ID = SAM.SUSPENSE_PROD_ID
        AND SAM.STATUS !='DELETED'
        AND SAM.AUTHORIZE_STATUS = 'AUTHORIZED'
        AND SAM.SUSPENSE_CUSTOMER_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
    
     <mapped-statement name="selectSalSecurityLimit" result-class="java.util.HashMap">
 select nvl(SALARY_ELIGIB_SURETY,0) as SAL_SECURITY_LIMIT from LOAN_APPLICATION_PARAM_ECS l where L.PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
    
  <mapped-statement name="insertTermLoanSecurityVehicleTO" inline-parameters="true">
        INSERT INTO LOANS_SECURITY_VEHICLE
        (ACCT_NUM, MEMBER_NO, MEMBER_NAME, MEMBER_TYPE,CONTACT_NO,VEHICLE_NO,VEHICLE_TYPE,RC_BOOK_NO,VEHICLE_DATE,VEHICLE_DETAILS, BRANCH_CODE,TOT_SALARY,NETWORTH, STATUS, STATUS_DT, STATUS_BY
        ) VALUES (
        #acctNum:VARCHAR#, #memberNo:VARCHAR#, #memberName:VARCHAR#, #memberType:VARCHAR#, #contactNo:NUMERIC#, 
        #vehicleNo:VARCHAR#,#vehicleType:VARCHAR#,#vehicleRcBookNo:VARCHAR#,#vehicleDate:DATE#,#vehichleDetails:VARCHAR#,#branchCode:VARCHAR#,#memSalary:NUMBER#,#netWorth:NUMBER#, #status:VARCHAR#, #statusDt:DATE#, #statusBy:VARCHAR#)
    </mapped-statement>
 
 <mapped-statement name="updateTermLoanSecurityVehicleTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_VEHICLE SET 
        MEMBER_NAME = #memberName:VARCHAR#,
        MEMBER_TYPE = #memberType:VARCHAR#,
        CONTACT_NO = #contactNo:NUMERIC#,
        VEHICLE_NO=#vehicleNo:VARCHAR#
       ,VEHICLE_TYPE=#vehicleType:VARCHAR#,
        RC_BOOK_NO=#vehicleRcBookNo:VARCHAR#,
        VEHICLE_DATE=#vehicleDate:DATE#,
        VEHICLE_DETAILS=#vehichleDetails:VARCHAR#,
        TOT_SALARY=#memSalary:NUMBER#,
         NETWORTH= #netWorth:NUMBER#,
        BRANCH_CODE = #branchCode:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        STATUS_BY = #statusBy:VARCHAR#
        WHERE MEMBER_NO = #memberNo:VARCHAR# AND ACCT_NUM = #acctNum:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
        <mapped-statement name="deleteTermLoanSecurityVehicleTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_VEHICLE SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        AUTHORIZED_STATUS = null,
        AUTHORIZED_DT = null,
        AUTHORIZED_BY = null
        WHERE MEMBER_NO = #memberNo:VARCHAR# AND ACCT_NUM = #acctNum:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
    
     <mapped-statement name="getSelectTermLoanSecurityVehicleTO" result-map="getTermLoanSecurityVehicleTOResult" >
        SELECT * FROM LOANS_SECURITY_VEHICLE WHERE STATUS!='DELETED' AND ACCT_NUM = #value:VARCHAR#  
    </mapped-statement>
    
     <result-map name="getTermLoanSecurityVehicleTOResult" class="com.see.truetransact.transferobject.termloan.TermLoanSecurityVehicleTO">
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="memberNo" column="MEMBER_NO"/>
        <property name="memberName" column="MEMBER_NAME"/>
        <property name="memberType" column="MEMBER_TYPE"/>
        <property name="contactNo" column="CONTACT_NO"/>
        <property name="netWorth" column="NETWORTH"/>
         <property name="memSalary" column="TOT_SALARY"/>
        <property name="vehicleNo" column="VEHICLE_NO"/>
        <property name="vehicleRcBookNo" column="RC_BOOK_NO"/>
        <property name="vehicleType" column="VEHICLE_TYPE"/>
        <property name="vehicleDate" column="VEHICLE_DATE"/>
        <property name="vehichleDetails" column="VEHICLE_DETAILS"/>
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="authorizedStatus" column="AUTHORIZED_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
    </result-map>
    
   <mapped-statement name="authorizeVehicleDetails" result-class="java.util.HashMap">
        UPDATE LOANS_SECURITY_VEHICLE SET 
        AUTHORIZED_STATUS = #AUTHORIZESTATUS#,
        AUTHORIZED_BY = #USER_ID#,
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE <!--STATUS != 'DELETED'-->
        STATUS_DT= #STATUS_DT:DATE#
        AND ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getGoldSecurityExist" result-class="java.util.HashMap">
        SELECT  *
          FROM SECURITY_DETAILS WHERE ACCT_NUM=#ACCT_NUM:VARCHAR# 
          AND (GROSS_WEIGHT !=cast(#GROSS_WEIGHT# as NUMERIC) OR NET_WEIGHT != cast(#NET_WEIGHT# as NUMERIC) OR PARTICULARS !=#PARTICULARS:VARCHAR#)
          AND STATUS !='DELETED' AND AUTHORIZE_STATUS = 'AUTHORIZED'
          AND IS_RELEASE ='N'
          and as_on = (select max(as_on)  from SECURITY_DETAILS where ACCT_NUM=#ACCT_NUM:VARCHAR# AND 
          STATUS !='DELETED' AND AUTHORIZE_STATUS = 'AUTHORIZED' AND IS_RELEASE ='N')
    </mapped-statement>
    
    <mapped-statement name="updateGoldReleaseStatus" result-class="java.util.HashMap">
        UPDATE SECURITY_DETAILS SET IS_RELEASE = #isRelease:VARCHAR#,RELEASE_DT = #releaseDt:DATE# WHERE ACCT_NUM=#acctNum:VARCHAR#
          AND as_on = (select max(as_on)  from SECURITY_DETAILS where ACCT_NUM=#acctNum:VARCHAR# AND STATUS !='DELETED'
          AND AUTHORIZE_STATUS = 'AUTHORIZED' AND IS_RELEASE ='N')
    </mapped-statement>
    
    <mapped-statement name="getRepaymentDetailsForAcctno" result-class="java.util.HashMap">
       select distinct(LI.ACCT_NUM),LRS.INSTALL_TYPE as "REPAYMENT_TYPE" , 
       LRS.REPAYMENT_TYPE as "REPAYMENT_FREQ",
       LI.INTEREST_RATE as "INTEREST_RATE"
       from LOANS_REPAY_SCHEDULE lrs 
       join LOANS_INSTALLMENT li on LI.ACCT_NUM = LRS.ACCT_NUM
       where LRS.ACCT_NUM = #ACCT_NUM:VARCHAR# and LI.SCHEDULE_ID = (select max(LI.SCHEDULE_ID) from 
       LOANS_INSTALLMENT li where LI.ACCT_NUM= #ACCT_NUM:VARCHAR# and LI.STATUS = 'CREATED' AND LI.ACTIVE_STATUS ='Y') 
       and LRS.SCHEDULE_MODE = 'REGULAR'        
    </mapped-statement>
   
   
    
    <mapped-statement name="getLoansDetailsForScheduleCreation" result-class="java.util.HashMap">        
    
    SELECT lsd.from_dt, lsd.to_dt, lsd.repayment_dt, lrs.disbursement_dt,
           lsd.borrow_no,ls.sanction_dt
    FROM loans_sanction_details lsd JOIN LOANS_FACILITY_DETAILS lfd
           on LSD.BORROW_NO = LFD.BORROW_NO
           join loans_repay_schedule lrs on LFD.ACCT_NUM = LRS.ACCT_NUM       
           jOIN loans_sanction ls ON lsd.borrow_no = ls.borrow_no
    WHERE lfd.acct_num = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getMaxScheduleNumberForScheduleCreation" result-class="java.util.HashMap">
    select LRS.ACCT_NUM, LRS.SCHEDULE_NO,LRS.TOTAL_BASE_AMT,LRS.SCHEDULE_MODE,LRS.REF_SCHEDULE_NO 
    from LOANS_REPAY_SCHEDULE lrs where LRS.ACCT_NUM = #ACCT_NUM:VARCHAR#
    AND LRS.SCHEDULE_MODE = 'REGULAR'
    </mapped-statement>   
    
    <mapped-statement name="updateRepayScheduleForCreation" result-class="java.util.HashMap"> 
        UPDATE LOANS_REPAY_SCHEDULE SET 
        STATUS = 'MODIFIED',
        REPAY_ACTIVE = 'N',
        SCHEDULE_MODE = 'INACTIVE'
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND SCHEDULE_NO = #SCHEDULE_NO:NUMERIC# AND STATUS IN ('CREATED','MODIFIED') 
    </mapped-statement> 
    
    <mapped-statement name="getMaxInstallmentScheduleForCreation" result-class="java.util.HashMap"> 
       select distinct(LI.SCHEDULE_ID),LI.ACCT_NUM,LI.ACTIVE_STATUS,LRS.REPAY_ACTIVE,LRS.REF_SCHEDULE_NO FROM LOANS_INSTALLMENT li 
       join LOANS_REPAY_SCHEDULE lrs on LI.ACCT_NUM = LRS.ACCT_NUM 
       where LI.ACCT_NUM=#ACCT_NUM:VARCHAR# and LI.ACTIVE_STATUS = 'Y' AND LRS.REPAY_ACTIVE = 'Y'
    </mapped-statement>
    
    <mapped-statement name="updateRepayInstallmentForCreation" result-class="java.util.HashMap"> 
        UPDATE LOANS_INSTALLMENT SET 
        ACTIVE_STATUS = 'N'        
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR# AND SCHEDULE_ID = #SCHEDULE_NO:NUMERIC# AND STATUS IN ('CREATED','MODIFIED') 
    </mapped-statement>  
    
    <mapped-statement name="updateSanctionDetailsForCreation" result-class="java.util.HashMap">     
     UPDATE LOANS_SANCTION_DETAILS  SET    
     TO_DT = #TO_DT:DATE# , 
     REPAYMENT_DT =#REPAYMENT_DT:DATE# ,
     REPAYMENT_FREQUENCY = #REPAYMENT_FREQUENCY:NUMERIC# ,
     NO_INSTALL = #NO_INSTALL:NUMERIC#,
     NO_MORATORIUM = #NO_MORATORIUM:NUMERIC#,
     MORATORIUM_GIVEN = #MORATORIUM_GIVEN:VARCHAR# 
     WHERE BORROW_NO = ( 
     SELECT LSD.BORROW_NO FROM LOANS_SANCTION_DETAILS lsd 
     JOIN LOANS_FACILITY_DETAILS lfd ON LSD.BORROW_NO = lfd.BORROW_NO
     AND lfd.ACCT_NUM = #ACCT_NUM:VARCHAR#
     )         
    </mapped-statement>
    
    <mapped-statement name="getMaxAccountNumberForAcct" result-class="java.util.HashMap">
        select max(LRS.SCHEDULE_NO)as NEW_SCHEDULE from LOANS_REPAY_SCHEDULE lrs where LRS.ACCT_NUM = #ACCT_NUM:VARCHAR# 
    </mapped-statement>
    
    <dynamic-mapped-statement name="viewTermLoanForNewScheduleCreation" result-class = "java.util.LinkedHashMap" >
       SELECT LOANS_FACILITY_DETAILS.ACCT_NUM , MEMBERSHIP_NO,PROD_DESC,LOANS_FACILITY_DETAILS.RENEWAL_ACCT_NO AS "RENEWED_LOAN_NO" ,get_cust_name(CUSTOMER.CUST_ID) AS "CUSTOMER NAME",
        LOANS_BORROWER.CUST_ID AS "CUSTOMER ID",LSD.LIMIT AS SANCTION_AMT,LSD.FROM_DT AS ACCOUNT_OPENDT,
        LCD.ASSET_STATUS,LOANS_FACILITY_DETAILS.ACCT_STATUS,LOANS_BORROWER.BORROW_NO AS "BORROWER NO",LOANS_FACILITY_DETAILS.PROD_ID,OAN.OLD_ACT_NUM,
        LOANS_FACILITY_DETAILS.CLEAR_BALANCE as "OUTSTANDING_AMNT",NVL(LP.SALARY_RECOVERY,'N') AS PROD_SALARY_RECOVERY,NVL(LOANS_FACILITY_DETAILS.SALARY_RECOVERY,'N') AS
        SALARY_RECOVERY
        FROM <!--LOANS_BORROWER, CUSTOMER,LOANS_FACILITY_DETAILS,LOANS_SANCTION_DETAILS LSD,LOANS_CLASSIFY_DETAILS LCD ,OLD_AC_NOS OAN,loans_product,
        LOANS_PROD_ACPARAM LP-->
        customer join LOANS_BORROWER on LOANS_BORROWER.CUST_ID = CUSTOMER.CUST_ID
        join LOANS_FACILITY_DETAILS ON LOANS_FACILITY_DETAILS.BORROW_NO = LOANS_BORROWER.BORROW_NO 
        join LOANS_SANCTION_DETAILS LSD ON LSD.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO AND
        LSD.SL_NO = LOANS_FACILITY_DETAILS.SL_NO and LSD.SANCTION_NO = LOANS_FACILITY_DETAILS.SANCTION_NO
        join lOANS_CLASSIFY_DETAILS LCD ON LOANS_FACILITY_DETAILS.ACCT_NUM = LCD.ACCT_NUM
        left JOIN OLD_AC_NOS OAN ON OAN.NEW_ACT_NUM = LOANS_FACILITY_DETAILS.ACCT_NUM 
        JOIN loans_product ON LOANS_FACILITY_DETAILS.PROD_ID = LOANS_PRODUCT.PROD_ID 
        join LOANS_PROD_ACPARAM LP on LOANS_FACILITY_DETAILS.PROD_ID = LP.PROD_ID 
        WHERE 
        LOANS_BORROWER.BRANCH_CODE = #BRANCH_ID:VARCHAR# AND   <!--LOANS_FACILITY_DETAILS.BORROW_NO=LOANS_BORROWER.BORROW_NO AND-->
        (LOANS_BORROWER.STATUS = 'CREATED' OR LOANS_BORROWER.STATUS = 'MODIFIED') AND LSD.STATUS !='DELETED' AND <!--LSD.BORROW_NO
        =LOANS_FACILITY_DETAILS.BORROW_NO AND  LSD.SL_NO 
        =LOANS_FACILITY_DETAILS.SL_NO -->
        (LOANS_FACILITY_DETAILS.AUTHORIZE_STATUS_1 IS NULL OR LOANS_FACILITY_DETAILS.AUTHORIZE_STATUS_1 !='REJECTED') 
        <!--LOANS_FACILITY_DETAILS.PROD_ID=LOANS_PRODUCT.PROD_ID
        AND LOANS_FACILITY_DETAILS.PROD_ID=LP.PROD_ID
        AND OAN.NEW_ACT_NUM(+)=LOANS_FACILITY_DETAILS.ACCT_NUM-->
        AND LOANS_FACILITY_DETAILS.ACCT_STATUS NOT IN ('CLOSED')        
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="GOLD_LOAN">
                    ACCT_STATUS !='RENEWAL'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="ACCT_NUMBER">
                    LOANS_FACILITY_DETAILS.ACCT_NUM=#ACCT_NUMBER:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND"  property="AUTHORIZE_REMARK">
                    NOT EXISTS (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN          
                    (SELECT PROD_ID FROM LOANS_PRODUCT WHERE AUTHORIZE_REMARK $AUTHORIZE_REMARK$)         
                    AND LOANS_BORROWER.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="PROD_ID">
                    LOANS_FACILITY_DETAILS.PROD_ID = #PROD_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic> 
        <!--AND LSD.SANCTION_NO=LOANS_FACILITY_DETAILS.SANCTION_NO AND
        LOANS_FACILITY_DETAILS.ACCT_NUM =LCD.ACCT_NUM
        AND (LOANS_BORROWER.CUST_ID = CUSTOMER.CUST_ID) -->
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="BEHAVES_LIKE">
                    LOANS_PRODUCT.BEHAVES_LIKE = 'OD'
                </isNotNull>
            </isParameterPresent>
        </dynamic> 
        <!--AND NOT EXISTS
        (SELECT BORROW_NO FROM LOANS_FACILITY_DETAILS WHERE PROD_ID IN 
        (SELECT PROD_ID FROM LOANS_PRODUCT WHERE BEHAVES_LIKE = 'LOANS_AGAINST_DEPOSITS')
        AND LOANS_BORROWER.BORROW_NO = LOANS_FACILITY_DETAILS.BORROW_NO)-->
         <dynamic>
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="MEMBERSHIP_NO">
                    UPPER(MEMBERSHIP_NO) LIKE UPPER('%$MEMBERSHIP_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="ACCT_NUM">
                    UPPER(LOANS_FACILITY_DETAILS.ACCT_NUM) LIKE UPPER('%$ACCT_NUM$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="RENEWED_LOAN_NO">
                    UPPER(LOANS_FACILITY_DETAILS.RENEWAL_ACCT_NO) LIKE UPPER('%$RENEWED_LOAN_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER ID">
                    UPPER(LOANS_BORROWER.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER NAME">
                    UPPER(get_cust_name(CUSTOMER.CUST_ID)) LIKE UPPER('%$CUSTOMER NAME$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="BORROWER NO">
                    UPPER(LOANS_BORROWER.BORROW_NO) LIKE UPPER('%$BORROWER NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="SANCTION_AMT">
                    UPPER(LSD.LIMIT) LIKE UPPER('%$SANCTION_AMT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="SANCTION_AMT">
                    UPPER(LSD.LIMIT) LIKE UPPER('%$SANCTION_AMT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ACCOUNT_OPENDT">
                    UPPER(LSD.FROM_DT) LIKE UPPER('%$ACCOUNT_OPENDT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ASSET_STATUS">
                    UPPER(LCD.ASSET_STATUS) LIKE UPPER('%$ASSET_STATUS$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="ACCT_STATUS">
                    UPPER(LOANS_FACILITY_DETAILS.ACCT_STATUS) LIKE UPPER('%$ACCT_STATUS$%')
                </isNotNull>
            </isParameterPresent>
                <isParameterPresent>
                <isNotNull prepend="AND"   property="OLD_ACT_NUM">
                    UPPER(OAN.OLD_ACT_NUM) LIKE UPPER('%$OLD_ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
           </dynamic>
        ORDER BY "BORROWER NO"   
               
    </dynamic-mapped-statement>
    
     <mapped-statement name="getParticularLoanCountForCustomer" result-class="java.util.HashMap">
        SELECT COUNT(LFD.ACCT_NUM) as "NO_OF_LOANS" 
        FROM LOANS_FACILITY_DETAILS LFD JOIN LOANS_BORROWER LB 
        ON LFD.BORROW_NO = LB.BORROW_NO AND LFD.STATUS != 'DELETED' AND LB.STATUS != 'DELETED' AND LFD.ACCT_STATUS != 'CLOSED'
        AND LB.CUST_ID = #CUST_ID:VARCHAR# AND LFD.PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getTotalEmiPaid" result-class="java.util.HashMap">
        SELECT SUM (PRINCIPLE) + SUM (INTEREST) AS TOTAL_EMI_PAID  FROM LOAN_TRANS_DETAILS  WHERE ACT_NUM = #ACCT_NUM:VARCHAR#
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND TRANS_TYPE = 'CREDIT' 
    </mapped-statement>
    
    <mapped-statement name="getTotalEmiPaidInterest" result-class="java.util.HashMap">
        SELECT SUM (INTEREST) AS TOTAL_EMI_PAID_INTEREST  FROM LOAN_TRANS_DETAILS  WHERE ACT_NUM = #ACCT_NUM:VARCHAR#
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND TRANS_TYPE = 'CREDIT' 
    </mapped-statement>
    
    
    <mapped-statement name="getSelectEmiPrematureInterest" result-class="java.util.LinkedHashMap" >
       SELECT DISTINCT LF.CHARGE_RATE AS INTEREST,LM.PENAL_INTEREST AS PENAL_INTEREST,'GOLD_EMI_PREMATURE' AS GOLD_EMI_PREMATURE
        FROM LOANS_FACILITY_DETAILS LFD,LOANS_SANCTION_DETAILS LSD,LOANS_INT_MAINTENANCE LM,LOANS_REPAY_SCHEDULE LR,
        LOAN_CHARGE_DEFINITION LF,LOANS_PRODUCT LP
        WHERE LSD.BORROW_NO = LFD.BORROW_NO
        AND LR.ACCT_NUM = LFD.ACCT_NUM
        AND LM.ACCT_NUM =  LFD.ACCT_NUM 
        AND LFD.PROD_ID = LP.PROD_ID
        AND LP.PROD_DESC = LF.SCHEME_ID
        AND LP.PROD_ID = #PROD_ID:VARCHAR#
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        AND LF.STATUS !='DELETED'
        <!-- AND LP.AUTHORIZE_REMARK = 'GOLD_LOAN'-->
        AND LP.EMI_FLAT_RATE = 'Y'
        AND LFD.ACCT_NUM = #ACCT_NUM:VARCHAR#
        AND LR.INSTALL_TYPE = 'EMI'
        AND LSD.TO_DT &gt; #CURR_DT:DATE#
        AND LF.PREMATURE_RATE IS NOT NULL
    </mapped-statement>   
    
    <mapped-statement name="getEMIcalculationType" result-class="java.util.HashMap">
       SELECT NVL(EMI_FLAT_RATE,'N') AS EMI_FLAT_RATE FROM LOANS_PRODUCT WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getselectSIDetailsForTermLoan" result-class="java.util.HashMap">
       SELECT SI_ID  FROM STANDING_INSTRUCTION_CREDIT WHERE ACCT_NO =#ACT_NUM:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement> 
    
    <mapped-statement name="updateSIinTermLoanCredit" result-class="java.util.HashMap">
      UPDATE STANDING_INSTRUCTION_CREDIT SET STATUS = #STATUS:VARCHAR# 
      WHERE SI_ID = #SI_ID:VARCHAR# AND STATUS NOT IN ('DELETED')
    </mapped-statement>
   
    <mapped-statement name= "updateSIinTermLoanDebit" result-class="java.util.HashMap">
      UPDATE STANDING_INSTRUCTION_DEBIT SET STATUS = #STATUS:VARCHAR# 
      WHERE SI_ID = #SI_ID:VARCHAR# AND STATUS NOT IN ('DELETED')
    </mapped-statement>
    
    <mapped-statement name= "updateSIinTermLoan" result-class="java.util.HashMap">
      UPDATE STANDING_INSTRUCTION SET STATUS = #STATUS:VARCHAR# 
      WHERE SI_ID = #SI_ID:VARCHAR# AND STATUS NOT IN ('DELETED')
    </mapped-statement>  
  
     <mapped-statement name="updateRebateBalnce" inline-parameters="true">
        UPDATE LOANS_FACILITY_DETAILS SET REBATE_DT= #LAST_REBATE_DT:DATE#  WHERE ACCT_NUM=#ACCOUNTNO:VARCHAR#
    </mapped-statement>
    
  <mapped-statement name="getShareValueProdDetails" result-class="java.util.HashMap"> 
  SELECT S.FACE_VALUE,s.MAXIMUM_SHARE,S.FACE_VALUE*S.MAXIMUM_SHARE AS MAX_SHARE_VALUE FROM SHARE_CONF_DETAILS S JOIN 
  SHARE_ACCT SA on SA.SHARE_TYPE=S.SHARE_TYPE WHERE SA.SHARE_ACCT_NO = #SHARE_ACCT_NO:VARCHAR#
 </mapped-statement>
 
  <mapped-statement name="getInstallmentsRemainingForOutstandingAmnt" result-class="java.util.HashMap">
       select floor(MONTHS_BETWEEN(#TO_DT:DATE#,#FROM_DT:DATE#)) as "PENDING" from dual
  </mapped-statement>
  
    <dynamic-mapped-statement name="getDealerDetails" result-class="java.util.LinkedHashMap">
        SELECT
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="" property="AGENT">
                    AM.AGENT_ID AGENT_ID, FNAME AS AGENT_NAME,
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="" property="DEALER">
                    AM.AGENT_ID DEALER_ID, FNAME AS DEALER_NAME,
                </isNotNull>
            </isParameterPresent>
        </dynamic> 
        AM.BRANCH_ID FROM AGENT_MASTER AM, CUSTOMER C WHERE AM.AGENT_ID=C.CUST_ID AND 
        AM.STATUS!='DELETED' AND AM.AUTHORIZED_STATUS='AUTHORIZED' AND C.STATUS!='DELETED' 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="" property="BRANCH_ID">
                    AND AM.BRANCH_ID=#BRANCH_ID#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND TYPE = #TYPE# ORDER BY AM.AGENT_ID
    </dynamic-mapped-statement> 
    <mapped-statement name="getAgentIDDetails" result-class="java.util.HashMap">
        <!--SELECT DISTINCT AGENT_ID AS "KEY", AGENT_ID AS "VALUE" FROM AGENT_MASTER WHERE STATUS!='DELETED' AND 
        AUTHORIZED_STATUS='AUTHORIZED' AND BRANCH_ID=#BRANCH_ID:VARCHAR# AND TYPE='A' ORDER BY AGENT_ID-->        
        
        SELECT DISTINCT AGENT_ID AS "KEY", get_cust_name(AGENT_ID) AS "VALUE" FROM AGENT_MASTER WHERE STATUS!='DELETED' AND 
        AUTHORIZED_STATUS='AUTHORIZED' AND BRANCH_ID=#BRANCH_ID:VARCHAR# AND TYPE='A' ORDER BY AGENT_ID
        
        
    </mapped-statement> 
    
    <mapped-statement name="checkIfIntCalcPeriodSlabWiseOrNot" result-class="java.util.HashMap">
        SELECT lpa.IS_INT_PERIOD_SLAB_CALC FROM LOANS_PROD_ACPARAM lpa WHERE LPA.PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement> 
    
    <mapped-statement name ="getEMIOverDueInterest" result-class="java.util.HashMap">
        select GET_EMI_OVERDUE_INTEREST(#ACCT_NUM:VARCHAR#,#BRANCHCODE:VARCHAR#) as EMI_OVER_DUE_INT from dual
    </mapped-statement>
    
    <mapped-statement name="getAppraiserCodeIfBranchChange" result-map="get-AppraiserName-result">       
        SELECT get_cust_name(C.CUST_ID) AS NAME,C.STAFF_ID AS EMPLOYEE_CODE FROM CUSTOMER C ,USER_MASTER UM  WHERE   
        STAFF_ID IS NOT NULL AND C.CUST_TYPE_ID='STAFF' AND UM.EMPLOYEE_ID=C.CUST_ID   
        AND UM.STATUS != 'DELETED' AND UM.SUSPEND_USER ='N' ORDER BY STAFF_ID
    </mapped-statement>  
    
    <mapped-statement name="updateTermLoanSanctionDataForKCC" inline-parameters="true">      
        update LOANS_SANCTION_DETAILS 
        set FROM_DT = #FROM_DT:DATE#,
        TO_DT = #TO_DT:DATE# ,
        REPAYMENT_DT = #TO_DT:DATE#,
        "limit" = #LIMIT:NUMBER#
        where BORROW_NO = #BORROW_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateTermLoanGoldSecurityForKCC" inline-parameters="true">      
        update LOANS_FACILITY_DETAILS 
        set GOLD_REMARKS = #GOLD_REMARKS:VARCHAR#,
        GROSS_WEIGHT = #GROSS_WEIGHT:VARCHAR#,
        NET_WEIGHT = #NET_WEIGHT:VARCHAR#,
        VALUE_OF_GOLD = #VALUE_OF_GOLD:NUMERIC#,
        JEWELLERY_DETAILS = #JEWELLERY_DETAILS:VARCHAR#
        where ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>  
  
    <mapped-statement name="updateGoldReleaseStatusForKCC" result-class="java.util.HashMap">
        UPDATE SECURITY_DETAILS SET IS_RELEASE = #IS_RELEASE:VARCHAR#,RELEASE_DT = #RELEASE_DT:DATE# WHERE ACCT_NUM=#ACCT_NUM:VARCHAR#        
        AND IS_RELEASE = 'N'
        AND RELEASE_DT IS NULL      
    </mapped-statement>
  
    <mapped-statement name ="getLoanPreclosureInterestAmount" result-class="java.util.HashMap">
        select GET_LOAN_PRECLOSURE_INTEREST(#ACCT_NUM:VARCHAR#,#BRANCHCODE:VARCHAR#) as LOAN_PRECLOSURE_INTEREST from dual
    </mapped-statement>
    
    <mapped-statement name ="getLoanPreclosurePenalAmount" result-class="java.util.HashMap">
        select GET_LOAN_PRECLOSURE_PENAL(#ACCT_NUM:VARCHAR#,#BRANCHCODE:VARCHAR#) as LOAN_PRECLOSURE_PENAL from dual
    </mapped-statement> 
   
    <mapped-statement name="updateAcctAvailableBalForKCCRenewal" result-class="java.util.HashMap">        
        UPDATE LOANS_FACILITY_DETAILS  SET
        AVAILABLE_BALANCE = CLEAR_BALANCE + #LIMIT:NUMBER#
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name="GetTLOverDueList" result-class="java.util.LinkedHashMap">
        SELECT TL_PRODUCT_ALL.PROD_ID,TL_PRODUCT_ALL.PROD_DESC,OD.ACCT_NUM,
        OD.FNAME,OD.MEMBERSHIP_NO,OD.STREET,OD.AREA,S.MOBILE_NO,CUST_CASTE.CAST_DESC,
        OD.FROM_DT,OD.TO_DT,OD.SANC_AMT,OD.BALANCE,
        OD.PRNOD,CASE WHEN OD.PRNOD &gt; 0 THEN NVL(OD.INTEREST,0)  ELSE 0 END AS ODINT,
        CASE WHEN OD.PRNOD = 0 THEN NVL(OD.INTEREST,0)  ELSE 0 END AS NOTODINT,
        NVL(OD.PENINT,0) as PENAL,ARC_EP_CHARGE,Exec_FEE,ARB_FEE,Notice_Charge,Insur_Charge,Mis_Charge,LEGAL_CHARGES,nvl(phone,'.') as phone ,
        nvl(OD.PRNOD,0)+nvl(OD.INTEREST,0) +nvl(OD.PENINT,0) + nvl(ARC_EP_CHARGE,0) + nvl(Exec_FEE,0)+ 
        nvl(ARB_FEE,0) + nvl(Notice_Charge,0)+ nvl(Insur_Charge,0)+ nvl(Mis_Charge,0)+nvl(LEGAL_CHARGES,0) as total,
        INSTOD,RECOMMANDED_BY
        FROM
        (
        SELECT F.BRANCH_ID,F.PROD_ID,F.ACCT_NUM,
        C.FNAME,C.MEMBERSHIP_NO,CA.STREET,CA.AREA,C.CASTE,
        SD.FROM_DT,SD.TO_DT,SD.LIMIT AS SANC_AMT,
        GET_TL_BALANCE(F.ACCT_NUM,#AsOnDate:DATE#) AS BALANCE,
        CASE WHEN LP.BEHAVES_LIKE='OD' THEN GET_ADV_INST_OD(F.ACCT_NUM,#AsOnDate:DATE#)
        ELSE GET_TL_INST_OD(F.ACCT_NUM,#AsOnDate:DATE#) END AS PRNOD,
        GET_TL_INTEREST(F.ACCT_NUM,SD.FROM_DT,#AsOnDate:DATE#) AS INTEREST,
        GET_TL_PEN_INTEREST(F.ACCT_NUM,SD.FROM_DT,#AsOnDate:DATE#,GET_TL_PENROI(F.PROD_ID,F.ACCT_NUM,SD.FROM_DT,SD.LIMIT,F.INT_GET_FROM)) AS PENINT,
        (Select nvl(sum(LACD.AMOUNT),0) - nvl(sum(LACD.PAID_AMT),0)  from LOANS_ACCT_CHARGE_DETAILS lacd where LACD.ACT_NUM = F.ACCT_NUM   and LACD.CHARGE_TYPE = 'EXECUTION DECREE CHARGES') as Exec_FEE,
        (Select nvl(sum(LACD.AMOUNT),0) - nvl(sum(LACD.PAID_AMT),0)  from LOANS_ACCT_CHARGE_DETAILS lacd where LACD.ACT_NUM = F.ACCT_NUM   and LACD.CHARGE_TYPE = 'ARBITRARY CHARGES') as ARB_FEE,
        (Select nvl(sum(LACD.AMOUNT),0) - nvl(sum(LACD.PAID_AMT),0)  from LOANS_ACCT_CHARGE_DETAILS lacd where LACD.ACT_NUM = F.ACCT_NUM   and (LACD.CHARGE_TYPE = 'NOTICE CHARGES' or LACD.CHARGE_TYPE = 'POSTAGE CHARGES') ) as Notice_Charge,
        (Select nvl(sum(LACD.AMOUNT),0) - nvl(sum(LACD.PAID_AMT),0)  from LOANS_ACCT_CHARGE_DETAILS lacd where LACD.ACT_NUM = F.ACCT_NUM   and (LACD.CHARGE_TYPE = 'INSURANCE CHARGES' or LACD.CHARGE_TYPE = 'INSURANCE CHARGES' ) ) as Insur_Charge,
        (Select nvl(sum(LACD.AMOUNT),0) - nvl(sum(LACD.PAID_AMT),0)  from LOANS_ACCT_CHARGE_DETAILS lacd where LACD.ACT_NUM = F.ACCT_NUM   and (LACD.CHARGE_TYPE = 'MISCELLANEOUS CHARGES' or LACD.CHARGE_TYPE = 'MISCELLANEOUS CHARGES' ) ) as Mis_Charge,
        (Select nvl(sum(LACD.AMOUNT),0) - nvl(sum(LACD.PAID_AMT),0)  from LOANS_ACCT_CHARGE_DETAILS lacd where LACD.ACT_NUM = F.ACCT_NUM   and (LACD.CHARGE_TYPE = 'LEGAL CHARGES' or LACD.CHARGE_TYPE = 'LEGAL CHARGES' ) ) as LEGAL_CHARGES,
        (Select nvl(sum(LACD.AMOUNT),0) - nvl(sum(LACD.PAID_AMT),0)  from LOANS_ACCT_CHARGE_DETAILS lacd where LACD.ACT_NUM = F.ACCT_NUM   and (LACD.CHARGE_TYPE = 'OTHER CHARGES' or (LACD.CHARGE_TYPE = 'OTHER CHARGES' or LACD.CHARGE_TYPE = 'EP_COST') ) ) as ARC_EP_CHARGE,
        GET_CUST_PHONENO(C.CUST_ID) as phone,
        CEIL( GET_TL_INST_OD(F.ACCT_NUM,#AsOnDate:DATE#)/GET_TL_INSTAMT(F.ACCT_NUM)) AS INSTOD,F.RECOMMANDED_BY
        FROM LOANS_FACILITY_DETAILS F
        JOIN LOANS_SANCTION_DETAILS SD ON F.BORROW_NO = SD.BORROW_NO
        JOIN LOANS_BORROWER LB ON F.BORROW_NO = LB.BORROW_NO 
        JOIN CUSTOMER C ON C.CUST_ID = LB.CUST_ID
        JOIN TL_PRODUCT_ALL LP ON LP.PROD_ID = F.PROD_ID
        LEFT JOIN CUST_ADDR CA ON C.CUST_ID = CA.CUST_ID AND C.COMM_ADDR_TYPE = CA.ADDR_TYPE
        WHERE F.BRANCH_ID = NVL(#BranchId:VARCHAR#,F.BRANCH_ID) AND
        LP.PROD_DESC = NVL(#ProdDesc:VARCHAR#,LP.PROD_DESC) AND 
       <!-- SD.FROM_DT &lt;= #AsOnDate:DATE# AND -->
        (F.ACCT_CLOSE_DT IS NULL OR F.ACCT_CLOSE_DT &gt; #AsOnDate:DATE#)
        ) OD
        JOIN TL_PRODUCT_ALL ON OD.PROD_ID = TL_PRODUCT_ALL.PROD_ID
        LEFT JOIN CUST_CASTE ON OD.CASTE = CUST_CASTE.CASTE LEFT JOIN SMS_SUBSCRIPTION S ON OD.ACCT_NUM= S.ACT_NUM
        WHERE BALANCE &gt; 0 AND PRNOD &gt; 0  AND 
        TL_PRODUCT_ALL.PROD_DESC = NVL(#ProdDesc:VARCHAR#,TL_PRODUCT_ALL.PROD_DESC) 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="FROM_ACCT_NUM">
                    OD.ACCT_NUM &gt;= #FROM_ACCT_NUM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="TO_ACCT_NUM">
                    OD.ACCT_NUM &lt;= #TO_ACCT_NUM:VARCHAR# 
                </isNotNull>
            </isParameterPresent>          
            <isParameterPresent>
                <isNotEqual prepend = "AND" property="FROM_DT" compareValue="" >
                    OD.FROM_DT &lt;= #AsOnDate:DATE#
                </isNotEqual>
                <isNotNull prepend="AND" property="FROM_DT">
                    OD.FROM_DT &gt;= #FROM_DT:DATE#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="TO_DT">
                    OD.FROM_DT &lt;= #TO_DT:DATE# 
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OD_INST">
                    OD.INSTOD &gt;=  #OD_INST:NUMBER# 
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OD_FROM_PRINCIPLE">
                    OD.PRNOD &gt;= #OD_FROM_PRINCIPLE:NUMBER# 
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OD_TO_PRINCIPLE">
                    OD.PRNOD &lt;= #OD_TO_PRINCIPLE:NUMBER# 
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OD_FROM_INTEREST">
                    NVL(OD.INTEREST,0) &gt;= #OD_FROM_INTEREST:NUMBER# 
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OD_TO_INTEREST">
                    NVL(OD.INTEREST,0) &lt;= #OD_TO_INTEREST:NUMBER# 
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY RECOMMANDED_BY,OD.BRANCH_ID,TL_PRODUCT_ALL.PROD_ID,OD.FROM_DT,OD.ACCT_NUM
    </dynamic-mapped-statement>   
    
    <dynamic-mapped-statement name="GetTLDueSplit" result-class="java.util.LinkedHashMap">
        SELECT  ACT_NUM,PROD_DESC,FROM_DT,TO_DT,AMOUNT,INTEREST_AMOUNT,DUE_COUNT,MOBILE_NO FROM TABLE(GET_LOAN_DUE_SPLIT (#BranchId:VARCHAR#,#PROD_ID:VARCHAR#,#FRQ:NUMBER#))
    </dynamic-mapped-statement>
    
    <mapped-statement name="getInstallType" result-class="java.util.HashMap" >
        select INSTALL_TYPE from loans_repay_schedule
        where acct_num=#ACT_NUM:VARCHAR#
    </mapped-statement>
    
    
  <mapped-statement name="getSelectGoldLoanOverDueInt" result-class="java.util.LinkedHashMap" >       
        SELECT DISTINCT LF.PREMATURE_RATE AS INTEREST,LM.PENAL_INTEREST AS PENAL_INTEREST,'GOLD_OVERDUE_CLOSURE' AS GOLD_OVERDUE_CLOSURE
        FROM LOANS_FACILITY_DETAILS LFD,LOANS_SANCTION_DETAILS LSD,LOANS_INT_MAINTENANCE LM,LOANS_REPAY_SCHEDULE LR,
        LOAN_CHARGE_DEFINITION LF,LOANS_PRODUCT LP,LOANS_PROD_INTREC lpi
        WHERE LSD.BORROW_NO = LFD.BORROW_NO
        AND LR.ACCT_NUM = LFD.ACCT_NUM
        AND LM.ACCT_NUM =  LFD.ACCT_NUM 
        AND LFD.PROD_ID = LP.PROD_ID
        AND LP.PROD_DESC = LF.SCHEME_ID
        AND LPI.PROD_ID = LP.PROD_ID
        AND LP.PROD_ID = #PROD_ID:VARCHAR#
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        AND LF.STATUS !='DELETED'
        AND LP.AUTHORIZE_REMARK = 'GOLD_LOAN'     
        and lpi.GOLD_LOAN_OVERDUE_INT = 'Y' 
        AND LFD.ACCT_NUM = #ACCT_NUM:VARCHAR#     
        AND LSD.TO_DT + NVL(GRACE_GOLD_LOAN_OVERDUE_INT,0) &lt; #CURR_DT:DATE#
    </mapped-statement>  
    
     <mapped-statement name="updateGoldLoanRenewalStatusAsRenewal" result-class="java.util.HashMap">        
        UPDATE LOANS_FACILITY_DETAILS 
        set ACCT_STATUS = 'RENEWAL'
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getAllWaiveOffDetails" result-class="java.util.HashMap" >
        SELECT WAIVE_AMT, REMARKS FROM LOAN_WAIVE_OFF WHERE AUTH_STATUS IS NULL AND STATUS!='DELETED' 
        AND ACCT_NUM =#ACCOUNT NO:VARCHAR# AND WAIVE_OFF_DT = #TRANS_DT:DATE#
    </mapped-statement>
     
<mapped-statement name="getAuthorizeLoanNoticeList" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT LACD.ACT_NUM,LNCD.NOTICE_TYPE,CHARGE_DATE,BATCH_ID FROM LOANS_ACCT_CHARGE_DETAILS LACD,LOANS_NOTICE_CHARGE_DETAILS LNCD
        WHERE LNCD.ACT_NUM = LACD.ACT_NUM AND LNCD.PROD_ID = LACD.PROD_ID AND LACD.AUTHORIZE_STATUS IS NULL AND 
        LACD.CHARGE_DATE = #CHARGE_DATE:DATE# AND LACD.BRANCH_ID = #BRANCH_ID:VARCHAR# AND LACD.BATCH_ID IS NOT NULL AND 
        LACD.STATUS_BY != #USER_ID:VARCHAR# AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = LACD.STATUS_BY)    
    </mapped-statement>
    
    <mapped-statement name="updateBatchIdTO" result-class="java.util.HashMap">        
        UPDATE LOANS_ACCT_CHARGE_DETAILS
        set BATCH_ID = #BATCH_ID:VARCHAR#
        WHERE BATCH_ID = #NOTICE_GEN_ID:VARCHAR# AND CHARGE_TYPE = #CHARGE_TYPE:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getAccAuthLoanNoticeList" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT
        LFD.ACCT_NUM AS ACT_NUM,
        LB.CUST_ID,
        membership_no AS MEM_NO,
        FNAME AS NAME,
        PROD_DESC AS "TYPE",
        FROM_DT,
        NVL ("limit", 0) AS LIMIT,
        NVL (PRINCIPAL, 0) AS balance,
        CASE
        WHEN NVL (PRIN_DEMAND, 0) - NVL (PRIN_PAID, 0) > 0
        THEN
            NVL (PRIN_DEMAND, 0) - NVL (PRIN_PAID, 0)
        ELSE
            0
        END
        AS principal_due,
        DUE_DT,
        NVL (INTEREST_DEMAND, 0) AS int_due,
        penal,
        charges,
        NVL (NOTICE_CHARGE_AMT, 0) || '+' || NVL (POSTAGE_AMT, 0)
        AS ApplicableCharges,
        'ACT_HOLDER' AS CUST_TYPE,
        LOANS_PROD_CHQCHRG.NOTICE_TYPE
        FROM rep_loan_notice_two RLNT,
        LOANS_FACILITY_DETAILS LFD,
        LOANS_BORROWER LB,
        LOANS_PROD_CHQCHRG,
        LOANS_ACCT_CHARGE_DETAILS LACD,
        LOANS_NOTICE_CHARGE_DETAILS LNCD
        WHERE     LB.BORROW_NO = LFD.BORROW_NO
        AND LFD.PROD_ID = LOANS_PROD_CHQCHRG.PROD_ID
        AND LACD.PROD_ID = LOANS_PROD_CHQCHRG.PROD_ID
        AND RLNT.PROD_ID = LOANS_PROD_CHQCHRG.PROD_ID(+)
        AND LFD.ACCT_NUM = LACD.ACT_NUM
        AND LFD.ACCT_NUM = RLNT.ACCT_NUM
        AND LACD.AUTHORIZE_STATUS IS NULL
        AND LACD.BRANCH_ID = #BRANCH_ID:VARCHAR# 
        AND LACD.CHARGE_DATE = #CHARGE_DATE:DATE#
        AND LACD.BATCH_ID = #BATCH_ID:VARCHAR#
        AND LNCD.ACT_NUM = LACD.ACT_NUM
        AND LNCD.notice_type = LOANS_PROD_CHQCHRG.NOTICE_TYPE
        UNION
        SELECT DISTINCT
        LCM.ACCT_NUM AS ACT_NUM,
        C.CUST_ID,
        C.MEMBERSHIP_NO AS MEM_NO,
        C.FNAME AS NAME,
        PROD_DESC AS "TYPE",
        FROM_DT,
        NVL ("limit", 0) AS LIMIT,
        NVL (PRINCIPAL, 0) AS balance,
        CASE
        WHEN NVL (PRIN_DEMAND, 0) - NVL (PRIN_PAID, 0) > 0
        THEN
            NVL (PRIN_DEMAND, 0) - NVL (PRIN_PAID, 0)
        ELSE
            0
        END
        AS principal_due,
        DUE_DT,
        NVL (INTEREST_DEMAND, 0) AS int_due,
        penal,
        charges,
        NVL (NOTICE_CHARGE_AMT, 0) || '+' || NVL (POSTAGE_AMT, 0)
        AS ApplicableCharges,
        'GUARANTOR' AS CUST_TYPE,
        LPC.NOTICE_TYPE
        FROM rep_loan_notice_two RLNT,
        LOANS_SECURITY_MEMBER LCM,
        CUSTOMER C,
        LOANS_PROD_CHQCHRG LPC,
        LOANS_ACCT_CHARGE_DETAILS LACD,
        LOANS_FACILITY_DETAILS LFD,
        LOANS_BORROWER LB,
        LOANS_NOTICE_CHARGE_DETAILS LNCD
        WHERE     LCM.ACCT_NUM = RLNT.ACCT_NUM
        AND LFD.ACCT_NUM = LACD.ACT_NUM
        AND LFD.ACCT_NUM = RLNT.ACCT_NUM
        AND LFD.PROD_ID = LPC.PROD_ID
        AND LACD.PROD_ID = LPC.PROD_ID
        AND RLNT.PROD_ID = LPC.PROD_ID(+)
        AND LB.BORROW_NO = LFD.BORROW_NO
        AND C.MEMBERSHIP_NO = LCM.MEMBER_NO
        AND RLNT.BRANCH_CODE = #BRANCH_ID:VARCHAR#
        AND LACD.AUTHORIZE_STATUS IS NULL
        AND LACD.CHARGE_DATE = #CHARGE_DATE:DATE#
        AND LACD.BATCH_ID = #BATCH_ID:VARCHAR#
        AND LNCD.ACT_NUM = LACD.ACT_NUM
        AND LNCD.notice_type = LPC.NOTICE_TYPE
        UNION
        SELECT DISTINCT
        LSL.ACCT_NUM AS ACT_NUM,
        C.CUST_ID,
        C.membership_no AS MEM_NO,
        C.FNAME AS NAME,
        PROD_DESC AS "TYPE",
        FROM_DT,
        NVL ("limit", 0) AS LIMIT,
        NVL (PRINCIPAL, 0) AS balance,
        CASE
        WHEN NVL (PRIN_DEMAND, 0) - NVL (PRIN_PAID, 0) > 0
        THEN
            NVL (PRIN_DEMAND, 0) - NVL (PRIN_PAID, 0)
        ELSE
            0
        END
        AS principal_due,
        DUE_DT,
        NVL (INTEREST_DEMAND, 0) AS int_due,
        penal,
        charges,
        NVL (NOTICE_CHARGE_AMT, 0) || '+' || NVL (POSTAGE_AMT, 0)
        AS ApplicableCharges,
        'GUARANTOR' AS CUST_TYPE,
        LPC.NOTICE_TYPE
        FROM rep_loan_notice_two RLNT,
        LOANS_SECURITY_LAND LSL,
        LOANS_SECURITY_MEMBER LCM,
        CUSTOMER C,
        LOANS_PROD_CHQCHRG LPC,
        GAHAN_JOINT GJ,
        LOANS_ACCT_CHARGE_DETAILS LACD,
        LOANS_FACILITY_DETAILS LFD,
        LOANS_NOTICE_CHARGE_DETAILS LNCD
        WHERE     LSL.ACCT_NUM = RLNT.ACCT_NUM
        AND LCM.ACCT_NUM = LSL.ACCT_NUM
        AND LCM.ACCT_NUM = RLNT.ACCT_NUM
        AND LFD.ACCT_NUM = LACD.ACT_NUM
        AND LFD.ACCT_NUM = RLNT.ACCT_NUM
        AND RLNT.PROD_ID = LPC.PROD_ID(+)
        AND GJ.DOCUMENT_GEN_ID = LSL.DOCUMENT_GEN_ID
        AND GJ.CUST_ID NOT IN (SELECT C.CUST_ID
                                FROM CUSTOMER C
                            WHERE C.MEMBERSHIP_NO = LSL.MEMBER_NO)
        AND C.CUST_ID = GJ.CUST_ID
        AND RLNT.BRANCH_CODE = #BRANCH_ID:varchar#
        AND LACD.AUTHORIZE_STATUS IS NULL
        AND LACD.CHARGE_DATE = #CHARGE_DATE:DATE#
        AND LACD.BATCH_ID = #BATCH_ID:VARCHAR#
        AND LNCD.ACT_NUM = LACD.ACT_NUM
        AND LNCD.notice_type = LPC.NOTICE_TYPE
        ORDER BY 1
    </mapped-statement>
    
    <mapped-statement name="updateAuthorizeDetails" inline-parameters="true"> 
        UPDATE LOANS_ACCT_CHARGE_DETAILS SET
        AUTHORIZE_BY=#AUTHORIZE_BY:VARCHAR#,
        AUTHORIZE_DT=#AUTHORIZE_DATE:DATE#,
        AUTHORIZE_STATUS=#AUTHORIZE_STATUS:VARCHAR#
        WHERE BATCH_ID=#BATCH_ID:VARCHAR# AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>

	<mapped-statement name="getSelectGoldStockPhotoRequired" result-class="java.util.HashMap">
        SELECT GOLD_STOCK_PHOTO_REQUIRED FROM LOANS_PRODUCT WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
    
    
     <mapped-statement name="insertLoansSecurityGoldStockTO" inline-parameters="true">
        INSERT INTO LOANS_SECURITY_GOLD_STOCK
        (GOLD_STOCK_ID,ACCT_NUM,PROD_ID,PROD_TYPE,PLEDGE_AMOUNT,AS_ON,REMARKS,BRANCH_CODE,STATUS,
        STATUS_DT,STATUS_BY,AUTHORIZE_STATUS,AUTHORIZE_BY,AUTHORIZE_DT
        ) VALUES (
        #goldStockId:VARCHAR#,#acctNum:VARCHAR#,#prodId:VARCHAR#,#prodType:VARCHAR#,#pledgeAmount:NUMERIC#,#asOnDt:DATE#,#remarks:VARCHAR#,#branchCode:VARCHAR#,        
        #status:VARCHAR#,#statusDt:DATE#,#statusBy:VARCHAR#,#authorizedStatus:VARCHAR#,#authorizedBy:VARCHAR#,#authorizedDt:DATE#)
    </mapped-statement>
    
    <mapped-statement name="authorizeLoansSecurityGoldStockTO" inline-parameters="true">
        UPDATE LOANS_SECURITY_GOLD_STOCK SET
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        AUTHORIZE_BY = #authorizeBy:VARCHAR#,
        AUTHORIZE_DT =#authorizeDt:DATE#
        WHERE ACCT_NUM=#acctNum:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getUnAuthGoldStockSecurityDetails" result-class="java.util.HashMap">
         SELECT * FROM LOANS_SECURITY_GOLD_STOCK ls
         WHERE ls.GOLD_STOCK_ID = #GOLD_SECURITY_ID:VARCHAR# AND ls.STATUS!='DELETED' AND ls.AUTHORIZE_STATUS IS NULL 
    </mapped-statement>	 
    
    <mapped-statement name="getGoldStockAvailableSecurityforLoan" result-class="java.util.HashMap">
       SELECT NVL(CG.PLEDGE_AMT,0) AS AVAILABLE_SECURITY_VALUE FROM CUST_GOLD_SECURITY_DETAILS CG WHERE CG.GOLD_SECURITY_ID = #GOLD_SECURITY_ID:VARCHAR#
        AND CG.IS_RELEASE IS NULL AND CG.AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement> 
    
    <mapped-statement name="getSelectGoldStockExistsForLoan" result-class="java.util.HashMap">
      <!--  SELECT SUM (CLEAR_BALANCE) AS clearBal
        FROM LOANS_FACILITY_DETAILS
        WHERE ACCT_NUM IN (SELECT ACCT_NUM
        FROM LOANS_SECURITY_GOLD_STOCK ls
        WHERE ls.GOLD_STOCK_ID = #GOLD_SECURITY_ID:VARCHAR# AND ls.RELEASE_STOCK_FROM_LOAN IS NULL) -->        
        SELECT sum(CASE
        WHEN LSG.PLEDGE_AMOUNT &lt; (-1 * CLEAR_BALANCE)
        THEN
        LSG.PLEDGE_AMOUNT
        ELSE
        -1 * lfd.CLEAR_BALANCE
        END)
        AS PLEDGE_AMOUNT
        FROM LOANS_FACILITY_DETAILS lfd
        JOIN
        LOANS_SECURITY_GOLD_STOCK lsg
        ON     LFD.ACCT_NUM = LSG.ACCT_NUM
        AND lsg.GOLD_STOCK_ID = #GOLD_SECURITY_ID:VARCHAR#
        AND lsg.RELEASE_STOCK_FROM_LOAN IS NULL
        AND LFD.ACCT_STATUS != 'CLOSED'
    </mapped-statement> 
	
    <mapped-statement name="getSelectGoldStockExistsForMds" result-class="java.util.HashMap">
        SELECT SUM ( (NO_OF_INSTALLMENTS - paidInst) * INSTALLMENT_AMOUNT) AS amount
        FROM (  SELECT SUM (NO_OF_INST) AS paidInst,
        CHITTAL_NO,
        NO_OF_INSTALLMENTS,
        INSTALLMENT_AMOUNT
        FROM MDS_TRANS_DETAILS
        JOIN
        MDS_SCHEME_DETAILS
        ON MDS_TRANS_DETAILS.SCHEME_NAME =
        MDS_SCHEME_DETAILS.SCHEME_NAME
        WHERE MDS_TRANS_DETAILS.AUTHORIZE_STATUS IN ('AUTHORIZED')
        HAVING CHITTAL_NO IN (SELECT ACCT_NUM AS CHITTAL_NO
        FROM LOANS_SECURITY_GOLD_STOCK
        WHERE GOLD_STOCK_ID = #GOLD_SECURITY_ID:VARCHAR# AND RELEASE_STOCK_FROM_LOAN IS NULL)
        GROUP BY CHITTAL_NO, NO_OF_INSTALLMENTS, INSTALLMENT_AMOUNT) a
    </mapped-statement>     
    
    <mapped-statement name="getSelectLoanSecurityGoldStockTO" result-map="getLoanSecurityGoldStockTOResult" >
        SELECT * FROM LOANS_SECURITY_GOLD_STOCK ls WHERE ls.ACCT_NUM = #value:VARCHAR#
        AND ls.STATUS != 'DELETED' and LS.AUTHORIZE_STATUS = 'AUTHORIZED'
        and LS.RELEASE_STOCK_FROM_LOAN IS NULL
    </mapped-statement>
     
    <result-map name="getLoanSecurityGoldStockTOResult" class="com.see.truetransact.transferobject.termloan.LoansSecurityGoldStockTO">
        <property name="goldStockId" column="GOLD_STOCK_ID"/>
        <property name="acctNum" column="ACCT_NUM"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="prodType" column="PROD_TYPE"/>
        <property name="pledgeAmount" column="PLEDGE_AMOUNT"/>
        <property name="asOnDt" column="AS_ON"/>
        <property name="remarks" column="REMARKS"/>
        <property name="branchCode" column="BRANCH_CODE"/>        
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="authorizedStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizedDt" column="AUTHORIZE_DT"/>
        <property name="authorizedBy" column="AUTHORIZE_BY"/>        
    </result-map>    
    
    <mapped-statement name="getGoldStockSecurityExistForLoan" result-class="java.util.HashMap">       
        SELECT *
        FROM LOANS_SECURITY_GOLD_STOCK ls
        WHERE   ls.ACCT_NUM = #ACCT_NUM:VARCHAR# 
        and LS.GOLD_STOCK_ID = #GOLD_STOCK_ID:VARCHAR#
        and LS.RELEASE_STOCK_FROM_LOAN is null
        and LS.AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
    
    <mapped-statement name="updateLoansSecurityGoldStockReleaseDt" inline-parameters="true">     
        UPDATE LOANS_SECURITY_GOLD_STOCK  ls SET
        LS.RELEASE_STOCK_FROM_LOAN = 'Y',
        LS.RELEASE_DT = #RELEASE_DT:DATE#
        WHERE ACCT_NUM=#ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name ="getEMIInSimpleInterestPrincipleDue" result-class="java.util.HashMap">
        SELECT GET_EMI_UNIFORM_PRINCIPLE_DUE(#ACCT_NUM:VARCHAR#,#CURR_DT:DATE#) AS PRINCIPAL_DUE FROM DUAL
    </mapped-statement>
    
    <mapped-statement name ="getJointCustDataForDepositLoan" result-class="java.util.HashMap">   
        select distinct DJ.CUST_ID,DJ.DEPOSIT_NO from DEPOSIT_JOINTACT dj, 
        DEPOSIT_SUB_ACINFO dsa, DEPOSIT_ACINFO da
        where DSA.DEPOSIT_NO = DJ.DEPOSIT_NO
        and DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        and DSA.DEPOSIT_NO = #DEPOSIT_NO#
        and DJ.STATUS != 'DELETED'
        and DA.CONSTITUTION = 'JOINT_ACCOUNT'
    </mapped-statement>
    
    
     <result-map name="get-Kcc-Prod-result" class="com.see.truetransact.transferobject.common.lookup.LookUpTO">
            <!--property name="lookUpRefID" column="CUST_ID" /-->
        <property name="lookUpRefID" column="PROD_ID" />
        <property name="lookUpDesc" column="PROD_DESC" />
    </result-map> 
    <mapped-statement name="getProductsForKCCRenewal" result-map="get-Kcc-Prod-result"> 
        select LP.PROD_ID,LP.PROD_DESC from LOANS_PRODUCT lp
        where LP.BEHAVES_LIKE = 'OD'
    </mapped-statement>
    
     <mapped-statement name ="getRenewedAccountsForRiskFundPocessing" result-class="java.util.LinkedHashMap">   
        SELECT  LP.PROD_ID,LP.PROD_DESC,K.RENEWAL_ID,K.ACT_NUM,K.FROM_DT,K.TO_DT FROM KCC_RENEWAL_DETAILS K,LOANS_FACILITY_DETAILS lfd, LOANS_PRODUCT lp
        WHERE K.ACT_NUM = LFD.ACCT_NUM
        and LFD.PROD_ID = LP.PROD_ID
        and K.IS_RISK_FUND_PROCESSED = 'N'
        and K.BRANCH = #BRANCH_CODE:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name ="getAllAccountsByKCCRenewalId" result-class="java.util.LinkedHashMap">   
        select K.ACT_NUM,K.FROM_DT,K.TO_DT,LS.LIMIT,LFD.AVAILABLE_BALANCE
        from KCC_RENEWAL_DETAILS k,LOANS_FACILITY_DETAILS LFD,LOANS_SANCTION_DETAILS LS
        where K.ACT_NUM =LFD.ACCT_NUM
        and LFD.BORROW_NO = LS.BORROW_NO
        and K.RENEWAL_ID = #RENEWAL_ID:VARCHAR#
        AND K.IS_RISK_FUND_PROCESSED = 'N'
    </mapped-statement>     
    
    <mapped-statement name ="getSelectRiskFundDetailsForKCC" result-class="java.util.LinkedHashMap">   
        select * from LOAN_CHARGE_DEFINITION l
        where L.SCHEME_ID = #SCHEME_ID:VARCHAR#
        and L.CHARGE_DESC = 'Risk Fund'
    </mapped-statement>
    
    <dynamic-mapped-statement name="getAccountsForKCCMultipleRenewal" result-class="java.util.LinkedHashMap" >        
        SELECT LFD.ACCT_NUM,LFD.BORROW_NO,LS.FROM_DT,LS.TO_DT,LS.LIMIT,LFD.AVAILABLE_BALANCE, 
        GET_KCC_SURETY_AMT(LFD.ACCT_NUM) AS SURETY_AMOUNT
        FROM LOANS_FACILITY_DETAILS LFD, LOANS_SANCTION_DETAILS LS
        WHERE LFD.BORROW_NO = LS.BORROW_NO
        AND LFD.PROD_ID = #PROD_ID:VARCHAR#
        AND LFD.ACCT_STATUS != 'CLOSED'
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED' 
        <dynamic>
        <isParameterPresent>
            <isNotNull prepend="AND" property="DUE_ON_DATE">
                LS.TO_DT &lt;= #DUE_DT:DATE#
            </isNotNull>
        </isParameterPresent>
         <isParameterPresent>
            <isNotNull prepend="AND" property="AS_ON_DT">
                LS.TO_DT &gt;= #CURR_DT:DATE# and LS.TO_DT &lt; GET_NEXT_FINENDDATE(#CURR_DT:DATE#)
            </isNotNull>
        </isParameterPresent>
        </dynamic>
        and LFD.BRANCH_ID = #BRANCH_CODE:VARCHAR#
    </dynamic-mapped-statement>
    
    <mapped-statement name ="getSelectRiskFundAndTaxHeadIds" result-class="java.util.LinkedHashMap">
        select L.ACC_HEAD,AC.SERVICE_TAX_APPLICABLE,AC.SERVICE_TAX_ID,SS.TAX_HEAD_ID,SS.SWACHH_HEAD_ID,SS.KRISHI_HEAD_ID
        from LOAN_CHARGE_DEFINITION l, AC_HD_PARAM ac, SERVICE_TAX_SETTINGS SS
        where L.SCHEME_ID = #SCHEME_ID:VARCHAR#
        and L.CHARGE_DESC = 'Risk Fund'
        and L.ACC_HEAD = AC.AC_HD_ID
        and AC.SERVICE_TAX_APPLICABLE = 'Y'
        and SS.SERVICETAX_GEN_ID = AC.SERVICE_TAX_ID
    </mapped-statement>  
    
     <mapped-statement name="updateRiskFundProcessStatus" result-class="java.util.HashMap"> 
        UPDATE KCC_RENEWAL_DETAILS 
        SET IS_RISK_FUND_PROCESSED = 'Y'
        WHERE ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="insertKCCMultipleRenewalSanctionDetails" inline-parameters="true">
        INSERT INTO LOANS_SANCTION_RENEWAL_DETAILS
        (BORROW_NO, SANCTION_NO, SL_NO, FACILITY_TYPE, "limit", FROM_DT, TO_DT, STATUS, NO_INSTALL, REPAYMENT_FREQUENCY, PRODUCT_ID, REPAYMENT_DT, 
        MORATORIUM_GIVEN, NO_MORATORIUM, STATUS_BY, STATUS_DT,INITIAL_MONEY_DEPOSIT,RENEWAL_DT
        ) 
        (SELECT BORROW_NO, SANCTION_NO, SL_NO, FACILITY_TYPE, "limit", FROM_DT, TO_DT, STATUS, NO_INSTALL, REPAYMENT_FREQUENCY, PRODUCT_ID, REPAYMENT_DT, 
        MORATORIUM_GIVEN, NO_MORATORIUM, STATUS_BY, STATUS_DT,INITIAL_MONEY_DEPOSIT,#RENEW_DT:DATE# FROM LOANS_SANCTION_DETAILS WHERE BORROW_NO=#BORROW_NO:VARCHAR#)
        
    </mapped-statement>  
    
     <mapped-statement name="insertKCCMultipleRenewalFacilityDetails" result-class="java.util.HashMap">
        INSERT INTO LOANS_RENEWAL_FACILITY_DETAILS (
        BORROW_NO, SANCTION_NO, SL_NO, PROD_ID, SECURITY_TYPE, SECURITY_DETAILS, ACCOUNT_TYPE, INTEREST_NATURE, INTEREST_TYPE, 
        ACCOUNT_LIMIT, RISK_WEIGHT, DEMAND_PROM_DT, DEMAND_PROM_EXPDT, MULTI_DISBURSE, AOD_DT, PURPOSE_DESC, GROUP_DESC, INTEREST,
        CONTACT_PERSON, CONTACT_PHONE, REMARKS, AUTHORIZE_STATUS_1, AUTHORIZE_REMARKS_1, STATUS, ACCT_NUM, AUTHORIZE_BY_1, 
        AUTHORIZE_DT_1, CREATE_DT, STATUS_BY, STATUS_DT, AVAILABLE_BALANCE, CLEAR_BALANCE, UNCLEAR_BALANCE, SHADOW_DEBIT,
        SHADOW_CREDIT, TOTAL_BALANCE, LAST_TRANS_DT, BRANCH_ID, ACCT_STATUS, INT_GET_FROM, LOAN_BALANCE_PRINCIPAL, LOAN_PAID_INT,
        LOAN_PAID_PENALINT, EXCESS_AMT, LAST_REPAY_DT, AUTHORIZE_STATUS_2, AUTHORIZE_REMARKS_2, AUTHORIZE_BY_2, AUTHORIZE_DT_2, 
        CREATED_BY, ACCT_NAME,ACCT_OPEN_DT,RECOMMANDED_BY,LAST_INT_CALC_DT,DRAWING_POWER,POF_ATTORNEY,AUTH_SIGNATORY,DOC_DETAILS,ACCT_TRANSFER,RENEWAL_DT)

        (SELECT BORROW_NO, SANCTION_NO, SL_NO, PROD_ID, SECURITY_TYPE, SECURITY_DETAILS, ACCOUNT_TYPE, INTEREST_NATURE, INTEREST_TYPE, 
        ACCOUNT_LIMIT, RISK_WEIGHT, DEMAND_PROM_DT, DEMAND_PROM_EXPDT, MULTI_DISBURSE, AOD_DT, PURPOSE_DESC, GROUP_DESC, INTEREST,
        CONTACT_PERSON, CONTACT_PHONE, REMARKS, AUTHORIZE_STATUS_1, AUTHORIZE_REMARKS_1, STATUS, ACCT_NUM, AUTHORIZE_BY_1, 
        AUTHORIZE_DT_1, CREATE_DT, STATUS_BY, STATUS_DT, AVAILABLE_BALANCE, CLEAR_BALANCE, UNCLEAR_BALANCE, SHADOW_DEBIT,
        SHADOW_CREDIT, TOTAL_BALANCE, LAST_TRANS_DT, BRANCH_ID, ACCT_STATUS, INT_GET_FROM, LOAN_BALANCE_PRINCIPAL, LOAN_PAID_INT,
        LOAN_PAID_PENALINT, EXCESS_AMT, LAST_REPAY_DT, AUTHORIZE_STATUS_2, AUTHORIZE_REMARKS_2, AUTHORIZE_BY_2, AUTHORIZE_DT_2, 
        CREATED_BY, ACCT_NAME,ACCT_OPEN_DT,RECOMMANDED_BY,LAST_INT_CALC_DT,DRAWING_POWER,POF_ATTORNEY,AUTH_SIGNATORY,DOC_DETAILS,ACCT_TRANSFER, #RENEW_DT:DATE# FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM=#ACCT_NUM:VARCHAR# )

    </mapped-statement>  
    
    
    <mapped-statement name ="getCustomerHighPriorityShare" result-class="java.util.LinkedHashMap">
        SELECT SP.PRIORITY, SA.SHARE_ACCT_NO
        FROM SHARE_PRIORITY SP, SHARE_ACCT SA
        WHERE     SA.CUST_ID = #CUST_ID:VARCHAR#
        AND SP.SHARE_TYPE = SA.SHARE_TYPE
        AND SP.PRIORITY &lt;
        (SELECT SP.PRIORITY
        FROM SHARE_PRIORITY SP, SHARE_ACCT SA
        WHERE SA.SHARE_ACCT_NO = #SHARE_ACCT_NO:VARCHAR#
        AND SP.SHARE_TYPE = SA.SHARE_TYPE)
    </mapped-statement>
    
    <mapped-statement name="getOtherBankTransactionRequiredForLoan" result-class="java.util.HashMap" >
        SELECT INCLUDE_OTHERBANK_TRANS FROM LOANS_PRODUCT WHERE PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getValidateOtherBankAct" result-class="java.util.HashMap" >
        SELECT AB.ACT_MASTER_ID AS "Account Number",
        AB.AGENCY_NAME AS "Customer Name",
        AB.PROD_ID AS "Product Id",
        AB.BRANCH_ID AS "BRANCH_CODE",
        '' AS membership_no,
        'AB' AS PROD_TYPE
        FROM OTHER_BANKS_ACT_MASTER ab
        WHERE     AB.ACT_MASTER_ID = #ACT_NUM:VARCHAR#
        AND ab.AUTHORIZED_STATUS = 'AUTHORIZED'
        AND STATUS != 'DELETED'
        AND ACT_STATUS != 'CLOSED'    
    </mapped-statement>
    
    <mapped-statement name="getGoldLoanClosingAuctionAmount" result-class="java.util.HashMap" >
        SELECT A.TRANS_TYPE,
        CASE
        WHEN A.TRANS_TYPE = 'CREDIT' THEN A.AMOUNT
        ELSE (-1) * A.AMOUNT
        END
        AUCTION_AMOUNT
        FROM all_trans a
        WHERE     A.TRANS_DT = #CURR_DT:DATE#
        AND A.ACT_NUM = #ACCT_NUM:VARCHAR#
        AND A.AUTHORIZE_REMARKS = 'AUCTION_BAL_AMOUNT'  
    </mapped-statement>
    
    
    <mapped-statement name="getCustomerRenewedLoanNo" result-class="java.util.HashMap" >       
        SELECT LFD.ACCT_NUM,ld.* 
        FROM loans_facility_details lfd
        JOIN loans_product lp ON lp.prod_id = lfd.prod_id
        join LOAN_OD_RENEWAL_DETAILS ld on ld.CLOSING_LOAN_NO = LFD.ACCT_NUM
        WHERE     lfd.borrow_no IN (SELECT borrow_no
        FROM loans_borrower
        WHERE cust_id = #CUSTID:VARCHAR#)
        AND LFD.STATUS != 'CLOSED'
        AND LFD.ACCT_STATUS = 'CLOSED'
        AND LFD.STATUS != 'DELETED'
        AND (    LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        AND LFD.AUTHORIZE_STATUS_1 != 'REJECTED')
        AND LP.PROD_DESC = #PROD_DESC:VARCHAR#
        AND ld.DEBIT_PROD_TYPE = 'SA'
        and ld.status = 'PROGRESS'          
    </mapped-statement>
    
    <mapped-statement name="updateLoanODRenewalDetails" inline-parameters="true">
        UPDATE LOAN_OD_RENEWAL_DETAILS 
        SET NEW_LOAN_NO = #NEW_LOAN_NO:VARCHAR#
        WHERE CLOSING_LOAN_NO = #OLD_LOAN_NO:VARCHAR#
        AND STATUS = 'PROGRESS'    
    </mapped-statement>  
    
    <mapped-statement name="updateLoanODCompleteStatus" inline-parameters="true">
        UPDATE LOAN_OD_RENEWAL_DETAILS
        SET STATUS = 'COMPLETED'
        WHERE NEW_LOAN_NO = #acctNum:VARCHAR#  
    </mapped-statement>  
    
    
    <mapped-statement name="upadateActiveStatusForDeletedSchedule" inline-parameters="true">
        UPDATE LOANS_INSTALLMENT SET 
        ACTIVE_STATUS = #activeStatus:VARCHAR#
        WHERE ACCT_NUM = #acctNum:VARCHAR# AND SCHEDULE_ID = #scheduleId:NUMERIC# AND STATUS = 'DELETED'
    </mapped-statement>
    
    
    
    <mapped-statement name="getLoanDetailsForSubsidyProvision" result-class="java.util.LinkedHashMap" >
        
        SELECT ACCT_NUM,LB.CUST_ID,GET_SHARE_NO(LB.CUST_ID) AS MEMBER_NO,
        get_cust_name(c.cust_id)                           AS "Name",
        lfd.LOAN_BALANCE_PRINCIPAL,lsd.limit
        FROM LOANS_FACILITY_DETAILS LFD, LOANS_BORROWER LB, CUSTOMER C, LOANS_SANCTION ls, LOANS_SANCTION_DETAILS lsd
        WHERE     C.CUST_ID = LB.CUST_ID
        AND C.STATUS != 'DELETED'
        AND LB.BORROW_NO = LFD.BORROW_NO
        and ls.borrow_no = lsd.borrow_no
        AND LFD.STATUS != 'DELETED'
        AND LFD.ACCT_STATUS != 'CLOSED'
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        AND LFD.BORROW_NO = LS.BORROW_NO
        AND LFD.PROD_ID = #PROD_ID:VARCHAR#
        AND LFD.ACCT_NUM = #ACCT_NUM:VARCHAR#
        ORDER BY LFD.ACCT_NUM, LFD.PROD_ID
        
    </mapped-statement>
    
    <mapped-statement name="upadateLoansDayEndBalAvailableSubsidy" inline-parameters="true">
        update LOANS_DAYEND_BALANCE set AVAILABLE_SUBSIDY = #AVAILABLE_SUBSIDY:NUMERIC#
        WHERE act_num = #ACCT_NUM:VARCHAR#
        AND DAY_END_DT = (select max(DAY_END_DT) from LOANS_DAYEND_BALANCE where act_num = #ACCT_NUM:VARCHAR#)
    </mapped-statement>
    
    
    <mapped-statement name="upadateLoansRebateDetailsAfterProvision" inline-parameters="true">
        update LOANS_FACILITY_DETAILS set
        SUBSIDY_ALLOWED = 'Y',
        SUBSIDY_AMT = #AVAILABLE_SUBSIDY:NUMERIC#,
        SUBSIDY_DT = #SUBSIDY_DT:DATE#
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    
    <mapped-statement name="getAuthDetailsForSubsidyProvision" result-class="java.util.LinkedHashMap" >
         
        SELECT LAS.ACCT_NUM,
        C.CUST_ID,
        GET_SHARE_NO (C.CUST_ID)    AS MEMBER_NO,
        get_cust_name(c.cust_id)         AS "Name",
        lfd.LOAN_BALANCE_PRINCIPAL,
        lsd.LIMIT,LAS.SUBSIDY_AMT,LAS.SUBSIDY_ADJUST_DT
        FROM LOANS_FACILITY_DETAILS LFD,
        LOANS_BORROWER        LB,
        CUSTOMER              C,
        LOANS_SANCTION        ls,
        LOANS_SANCTION_DETAILS lsd,
        LOANS_ACCT_SUBSIDY_DETAILS las
        WHERE     C.CUST_ID = LB.CUST_ID
        AND C.STATUS != 'DELETED'
        AND LB.BORROW_NO = LFD.BORROW_NO
        AND ls.borrow_no = lsd.borrow_no
        AND LFD.STATUS != 'DELETED'
        AND LFD.ACCT_STATUS != 'CLOSED'
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        AND LFD.BORROW_NO = LS.BORROW_NO
        AND LAS.ACCT_NUM = LFD.ACCT_NUM
        AND LAS.SUBSIDY_ID = #SUBSIDY_ID:VARCHAR#
        ORDER BY LFD.ACCT_NUM, LFD.PROD_ID   
        
    </mapped-statement>    
    
    <mapped-statement name="getSelectLoansSubsidyCount" result-class="java.util.LinkedHashMap" >    
        select * from LOANS_ACCT_SUBSIDY_DETAILS where acct_num = #ACCT_NUM:VARCHAR#
        AND AUTHORIZE_STATUS= 'AUTHORIZED'         
    </mapped-statement>
    
    
    <mapped-statement name="getKCCAccountNoDetails" result-class="java.util.LinkedHashMap" >
        select lfd.clear_balance ,lsd.limit ,lsd.limit + lfd.clear_balance  as bal,lp.KCC_RENEWAL_TRANSACTION
        from LOANS_FACILITY_DETAILS lfd ,LOANS_SANCTION_DETAILS lsd, loans_product lp
        where lfd.BORROW_NO = lsd.borrow_no
        and lfd.prod_id = lp.prod_id
        and lfd.acct_num = #ACCT_NUM:VARCHAR#
    </mapped-statement>    
    
    <mapped-statement name="getOpeningChargeCreditCnt" result-class="java.util.LinkedHashMap" >
        Select count(*) as CR_CNT from all_trans where trans_dt = #CURR_DT:DATE# and 
        link_batch_id = ( select acct_num from loans_facility_details lfd where renewal_acct_no = #ACCT_NUM:VARCHAR#
        and authorize_status_1 is null)
        And authorize_status is null
        and trans_type = 'CREDIT'
    </mapped-statement>
    
    
       <mapped-statement name="updateLoansAuctionDetails" inline-parameters="true">
        update LOANS_FACILITY_DETAILS set
        IS_AUCTION = 'Y',
        AUCTION_DT = #AUCTION_DT:DATE#
        WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getLoanDetailsForAuctionProvision" result-class="java.util.LinkedHashMap" >
        
        SELECT ACCT_NUM,LB.CUST_ID,GET_SHARE_NO(LB.CUST_ID) AS MEMBER_NO,
        get_cust_name(c.cust_id)                           AS "Name",
        lfd.LOAN_BALANCE_PRINCIPAL,lsd.limit,lfd.auction_dt
        FROM LOANS_FACILITY_DETAILS LFD, LOANS_BORROWER LB, CUSTOMER C, LOANS_SANCTION ls, LOANS_SANCTION_DETAILS lsd
        WHERE     C.CUST_ID = LB.CUST_ID
        AND C.STATUS != 'DELETED'
        AND LB.BORROW_NO = LFD.BORROW_NO
        and ls.borrow_no = lsd.borrow_no
        AND LFD.STATUS != 'DELETED'
        AND LFD.ACCT_STATUS != 'CLOSED'
        AND LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED'
        AND LFD.BORROW_NO = LS.BORROW_NO
        AND LFD.PROD_ID = #PROD_ID:VARCHAR#
        AND LFD.ACCT_NUM = #ACCT_NUM:VARCHAR#
        ORDER BY LFD.ACCT_NUM, LFD.PROD_ID
        
    </mapped-statement>
    
    
   
</sql-map>
        
