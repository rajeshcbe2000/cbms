<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="EmployeeDetailsTOMap">

	<!-- Use EmployeeDetailsTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertEmployeeDetailsTO" inline-parameters="true">
        INSERT INTO BANK_EMPLOYEE
        (BRANCH_CODE, EMPLOYEE_CODE, TITLE, LNAME, FNAME, DESIG_ID, DOB, MARITAL_STATUS, GENDER, DOJ, DOL, DOW, DEPTT_ID, MANAGER_CODE, OFFICIAL_EMAIL, ALTERNATE_EMAIL, OFFICE_PHONE, HOME_PHONE, CELLULAR, PAN_NO, SSN, PASSPORT_NO, SKILLS, EDUCATION, EXPERIENCE, PHOTO_FILE, RESPONSIBILITY, PERFORMANCE, COMMENTS, CREATED_BY, CREATED_DT, STATUS, EMPLOYEE_TYPE, STATUS_BY, STATUS_DT, AUTHORIZE_STATUS_1, AUTHORIZE_STATUS_2, AUTHORIZE_BY_1, AUTHORIZE_BY_2, AUTHORIZE_DT_1, AUTHORIZE_DT_2
        ) VALUES (
        #branchCode:VARCHAR#, #employeeCode:VARCHAR#, #title:VARCHAR#, #lname:VARCHAR#, #fname:VARCHAR#, #desigId:VARCHAR#, #dob:DATE#, #maritalStatus:VARCHAR#, #gender:VARCHAR#, #doj:DATE#, #dol:DATE#, #dow:DATE#, #depttId:VARCHAR#, #managerCode:VARCHAR#, #officialEmail:VARCHAR#, #alternateEmail:VARCHAR#, #officePhone:VARCHAR#, #homePhone:VARCHAR#, #cellular:VARCHAR#, #panNo:VARCHAR#, #ssn:VARCHAR#, #passportNo:VARCHAR#, #skills:VARCHAR#, #education:VARCHAR#, #experience:VARCHAR#, #photoFile:VARCHAR#, #responsibility:VARCHAR#, #performance:VARCHAR#, #comments:VARCHAR#, #createdBy:VARCHAR#, #createdDt:DATE#, #status:VARCHAR#, #employeeType:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#, #authorizeStatus1:VARCHAR#, #authorizeStatus2:VARCHAR#, #authorizeBy1:VARCHAR#, #authorizeBy2:VARCHAR#, #authorizeDt1:DATE#, #authorizeDt2:DATE#)
    </mapped-statement>

	<!-- Use EmployeeDetailsTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateEmployeeDetailsTO" inline-parameters="true">
        UPDATE BANK_EMPLOYEE SET 
        BRANCH_CODE = #branchCode:VARCHAR#,
<!--		EMPLOYEE_CODE = #employeeCode:VARCHAR#,-->
        TITLE = #title:VARCHAR#,
        LNAME = #lname:VARCHAR#,
        FNAME = #fname:VARCHAR#,
        DESIG_ID = #desigId:VARCHAR#,
        DOB = #dob:DATE#,
        MARITAL_STATUS = #maritalStatus:VARCHAR#,
        GENDER = #gender:VARCHAR#,
        DOJ = #doj:DATE#,
        DOL = #dol:DATE#,
        DOW = #dow:DATE#,
        DEPTT_ID = #depttId:VARCHAR#,
        MANAGER_CODE = #managerCode:VARCHAR#,
        OFFICIAL_EMAIL = #officialEmail:VARCHAR#,
        ALTERNATE_EMAIL = #alternateEmail:VARCHAR#,
        OFFICE_PHONE = #officePhone:VARCHAR#,
        HOME_PHONE = #homePhone:VARCHAR#,
        CELLULAR = #cellular:VARCHAR#,
        PAN_NO = #panNo:VARCHAR#,
        SSN = #ssn:VARCHAR#,
        PASSPORT_NO = #passportNo:VARCHAR#,
        SKILLS = #skills:VARCHAR#,
        EDUCATION = #education:VARCHAR#,
        EXPERIENCE = #experience:VARCHAR#,
        PHOTO_FILE = #photoFile:VARCHAR#,
        RESPONSIBILITY = #responsibility:VARCHAR#,
        PERFORMANCE = #performance:VARCHAR#,
        COMMENTS = #comments:VARCHAR#,
        CREATED_BY = #createdBy:VARCHAR#,
<!--		CREATED_DT = #createdDt:DATE#,-->
        STATUS = #status:VARCHAR#,
        EMPLOYEE_TYPE = #employeeType:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        AUTHORIZE_STATUS_1 = #authorizeStatus1:VARCHAR#,
        AUTHORIZE_STATUS_2 = #authorizeStatus2:VARCHAR#,
        AUTHORIZE_BY_1 = #authorizeBy1:VARCHAR#,
		<!--AUTHORIZE_BY_2 = #authorizeBy2:VARCHAR#,-->
        AUTHORIZE_DT_1 = #authorizeDt1:DATE#,
        AUTHORIZE_DT_2 = #authorizeDt2:DATE#
        WHERE EMPLOYEE_CODE = #employeeCode:VARCHAR#
    </mapped-statement>

	<!-- Use EmployeeDetailsTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteEmployeeDetailsTO" inline-parameters="true">
<!--        	DELETE FROM BANK_EMPLOYEE -->
        UPDATE BANK_EMPLOYEE SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #USER_ID:VARCHAR#, 
        STATUS_DT = (SELECT SYS_DATE() FROM DUAL) 
        WHERE EMPLOYEE_CODE = #employeeCode:VARCHAR#
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to EmployeeDetailsTO object (JavaBean) properties -->
    <result-map name="getEmployeeDetailsTOResult" class="com.see.truetransact.transferobject.sysadmin.employee.EmployeeDetailsTO">
        <property name="branchCode" column="BRANCH_CODE"/>
        <property name="employeeCode" column="EMPLOYEE_CODE"/>
        <property name="title" column="TITLE"/>
        <property name="lname" column="LNAME"/>
        <property name="fname" column="FNAME"/>
        <property name="desigId" column="DESIG_ID"/>
        <property name="dob" column="DOB"/>
        <property name="maritalStatus" column="MARITAL_STATUS"/>
        <property name="gender" column="GENDER"/>
        <property name="doj" column="DOJ"/>
        <property name="dol" column="DOL"/>
        <property name="dow" column="DOW"/>
        <property name="depttId" column="DEPTT_ID"/>
        <property name="managerCode" column="MANAGER_CODE"/>
        <property name="officialEmail" column="OFFICIAL_EMAIL"/>
        <property name="alternateEmail" column="ALTERNATE_EMAIL"/>
        <property name="officePhone" column="OFFICE_PHONE"/>
        <property name="homePhone" column="HOME_PHONE"/>
        <property name="cellular" column="CELLULAR"/>
        <property name="panNo" column="PAN_NO"/>
        <property name="ssn" column="SSN"/>
        <property name="passportNo" column="PASSPORT_NO"/>
        <property name="skills" column="SKILLS"/>
        <property name="education" column="EDUCATION"/>
        <property name="experience" column="EXPERIENCE"/>
        <property name="photoFile" column="PHOTO_FILE"/>
        <property name="responsibility" column="RESPONSIBILITY"/>
        <property name="performance" column="PERFORMANCE"/>
        <property name="comments" column="COMMENTS"/>
        <property name="createdBy" column="CREATED_BY"/>
        <property name="createdDt" column="CREATED_DT"/>
        <property name="status" column="STATUS"/>
        <property name="employeeType" column="EMPLOYEE_TYPE"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="authorizeStatus1" column="AUTHORIZE_STATUS_1"/>
        <property name="authorizeStatus2" column="AUTHORIZE_STATUS_2"/>
        <property name="authorizeBy1" column="AUTHORIZE_BY_1"/>
        <property name="authorizeBy2" column="AUTHORIZE_BY_2"/>
        <property name="authorizeDt1" column="AUTHORIZE_DT_1"/>
        <property name="authorizeDt2" column="AUTHORIZE_DT_2"/>
    </result-map>
    <mapped-statement name="getSelectEmployeeDetailsTO" result-map="getEmployeeDetailsTOResult" >
        SELECT * FROM BANK_EMPLOYEE 
        WHERE EMPLOYEE_CODE = #value:VARCHAR#
    </mapped-statement>
        
<!--===================================================-->

<!-- Use EmployeeAddrTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertEmployeeAddrTO" inline-parameters="true">
        INSERT INTO EMPLOYEE_ADDR
        (EMPLOYEE_ID, STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE
        ) VALUES (
        #employeeId:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, #city:VARCHAR#, #state:VARCHAR#, #pinCode:VARCHAR#, #countryCode:VARCHAR#)
    </mapped-statement>

	<!-- Use EmployeeAddrTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateEmployeeAddrTO" inline-parameters="true">
        UPDATE EMPLOYEE_ADDR SET 
<!--		EMPLOYEE_ID = #employeeId:VARCHAR#,-->
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        PIN_CODE = #pinCode:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#
        WHERE EMPLOYEE_ID = #employeeId:VARCHAR#
    </mapped-statement>

	<!-- Use EmployeeAddrTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteEmployeeAddrTO" inline-parameters="true">
        DELETE FROM EMPLOYEE_ADDR 
        WHERE EMPLOYEE_ID = #employeeId:VARCHAR#
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to EmployeeAddrTO object (JavaBean) properties -->
    <result-map name="getEmployeeAddrTOResult" class="com.see.truetransact.transferobject.sysadmin.employee.EmployeeAddrTO">
        <property name="employeeId" column="EMPLOYEE_ID"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="pinCode" column="PIN_CODE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
    </result-map>
    <mapped-statement name="getSelectEmployeeAddrTO" result-map="getEmployeeAddrTOResult" >
        SELECT * FROM EMPLOYEE_ADDR 
        WHERE EMPLOYEE_ID = #value:VARCHAR#
    </mapped-statement>        
        
<!--==============================================-->
    <mapped-statement name="viewEmployee" result-class="java.util.HashMap">
        SELECT EMPLOYEE_CODE, CONCAT(CONCAT(CONCAT(CONCAT(TITLE, ' '), FNAME), ' '), LNAME) AS EMPLOYEE_NAME, BRANCH_CODE, DESIG_DESCIP
        FROM BANK_EMPLOYEE EMP, DESIG_MASTER DESIG WHERE
        EMP.DESIG_ID = DESIG.DESIG_ID AND
        (EMP.STATUS = 'CREATED' OR EMP.STATUS = 'MODIFIED' OR EMP.STATUS = 'UPDATED') 
        ORDER BY EMPLOYEE_CODE
    </mapped-statement>
        
    <dynamic-mapped-statement name="getBranchData" result-class="java.util.HashMap">
        SELECT BRANCH_CODE, BRANCH_NAME,  STREET, CITY 
        FROM BRANCH_MASTER 
        WHERE STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED'
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="BRANCH_CODE">
                    BRANCH_CODE = #BRANCH_CODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>         
        
<!-- ==============================AUTHORIZATION QUERIES===================================================== -->
         	
    <dynamic-mapped-statement name="getSelectEmployeeAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT EMPLOYEE_CODE as "Employee Code", CONCAT(CONCAT(CONCAT(CONCAT(TITLE, ' '), FNAME), ' '), LNAME) AS "Employee Name", BRANCH_CODE, AUTHORIZE_STATUS_1 as "Authorize Status", AUTHORIZE_BY_1 as "Authorized by", AUTHORIZE_DT_1 as "Authorized date"
        FROM BANK_EMPLOYEE EMP
        WHERE (STATUS NOT IN ('DELETED')) 
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                AUTHORIZE_STATUS_1 = 'EXCEPTION' 
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                AUTHORIZE_STATUS_1 IS NULL
            </isNotEqual>
        </dynamic>
        AND STATUS_BY != #USER_ID:VARCHAR# 
        ORDER BY EMPLOYEE_CODE
    </dynamic-mapped-statement>


<!-- Use authorizeOperativeAcctProduct object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="authorizeEmployee" result-class="java.util.HashMap">
        UPDATE BANK_EMPLOYEE SET 
        AUTHORIZE_STATUS_1 = #STATUS:VARCHAR#,
        AUTHORIZE_BY_1 = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT_1 = #CURR_DATE:DATE#
        WHERE EMPLOYEE_CODE = #EMPLOYEE CODE:VARCHAR#
    </mapped-statement>    
    
<!-- ==============================END OF AUTHORIZATION QUERIES===================================================== -->

   

</sql-map>