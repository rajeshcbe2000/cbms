<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="ExchangeRateTOMap">

	<!-- Use ExchangeRateTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertExchangeRateTO" inline-parameters="true">
        INSERT INTO FOREX_EXCHANGE_RATE
        (EXCHANGE_ID, VALUE_DATE, TRANS_CURRENCY, CONVERSION_CURRENCY, CUSTOMER_TYPE, MIDDLE_RATE, SELLING_PER, SELLING_PRICE, BUYING_PER, BUYING_PRICE, PREFERRED, COMMISSION, REMARKS, CREATED_BY, CREATED_DT, AUTHORIZED_BY, AUTHORIZED_DT, STATUS, AUTHORIZE_STATUS, RATE_TYPE, BILL_BUYING, BILL_SELLING, DD_BUYING, DD_SELLING, TC_BUYING, TC_SELLING, NOTIONAL_RATE, TT_BUYING, TT_SELLING, COMM_BILL_SLAB, COMM_BILL_PER, COMM_DD_SLAB, COMM_DD_PER, COMM_TC_SLAB, COMM_TC_PER, COMM_TT_SLAB, COMM_TT_PER, COMM_CURR_PER
        ) VALUES (
        #exchangeId:VARCHAR#, #valueDate:DATE#, #transCurrency:VARCHAR#, #conversionCurrency:VARCHAR#, #customerType:VARCHAR#, #middleRate:NUMERIC#, #sellingPer:NUMERIC#, #sellingPrice:NUMERIC#, #buyingPer:NUMERIC#, #buyingPrice:NUMERIC#, #preferred:VARCHAR#, #commission:NUMERIC#, #remarks:VARCHAR#, #createdBy:VARCHAR#, #createdDt:DATE#, #authorizedBy:VARCHAR#, #authorizedDt:DATE#, #status:VARCHAR#, #authorizeStatus:VARCHAR#, #rateType:VARCHAR#, #billBuying:NUMERIC#, #billSelling:NUMERIC#, #ddBuying:NUMERIC#, #ddSelling:NUMERIC#, #tcBuying:NUMERIC#, #tcSelling:NUMERIC#, #notionalRate:NUMERIC#, #ttBuying:NUMERIC#, #ttSelling:NUMERIC#, #commBillSlab:NUMERIC#, #commBillPer:NUMERIC#, #commDdSlab:NUMERIC#, #commDdPer:NUMERIC#, #commTcSlab:NUMERIC#, #commTcPer:NUMERIC#, #commTtSlab:NUMERIC#, #commTtPer:NUMERIC#, #commCurrPer:NUMERIC#)
    </mapped-statement>

	<!-- Use ExchangeRateTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateExchangeRateTO" inline-parameters="true">
        UPDATE FOREX_EXCHANGE_RATE SET 
        EXCHANGE_ID = #exchangeId:VARCHAR#,
        VALUE_DATE = #valueDate:DATE#,
        TRANS_CURRENCY = #transCurrency:VARCHAR#,
        CONVERSION_CURRENCY = #conversionCurrency:VARCHAR#,
        CUSTOMER_TYPE = #customerType:VARCHAR#,
        MIDDLE_RATE = #middleRate:NUMERIC#,
        SELLING_PER = #sellingPer:NUMERIC#,
        SELLING_PRICE = #sellingPrice:NUMERIC#,
        BUYING_PER = #buyingPer:NUMERIC#,
        BUYING_PRICE = #buyingPrice:NUMERIC#,
        PREFERRED = #preferred:VARCHAR#,
        COMMISSION = #commission:NUMERIC#,
        REMARKS = #remarks:VARCHAR#,
        CREATED_BY = #createdBy:VARCHAR#,
        CREATED_DT = #createdDt:DATE#,
        AUTHORIZED_BY = #authorizedBy:VARCHAR#,
        AUTHORIZED_DT = #authorizedDt:DATE#,
        STATUS = #status:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        RATE_TYPE = #rateType:VARCHAR#,
        BILL_BUYING = #billBuying:NUMERIC#,
        BILL_SELLING = #billSelling:NUMERIC#,
        DD_BUYING = #ddBuying:NUMERIC#,
        DD_SELLING = #ddSelling:NUMERIC#,
        TC_BUYING = #tcBuying:NUMERIC#,
        TC_SELLING = #tcSelling:NUMERIC#,
        NOTIONAL_RATE = #notionalRate:NUMERIC#,
        TT_BUYING = #ttBuying:NUMERIC#,
        TT_SELLING = #ttSelling:NUMERIC#,
        COMM_BILL_SLAB = #commBillSlab:NUMERIC#,
        COMM_BILL_PER = #commBillPer:NUMERIC#,
        COMM_DD_SLAB = #commDdSlab:NUMERIC#,
        COMM_DD_PER = #commDdPer:NUMERIC#,
        COMM_TC_SLAB = #commTcSlab:NUMERIC#,
        COMM_TC_PER = #commTcPer:NUMERIC#,
        COMM_TT_SLAB = #commTtSlab:NUMERIC#,
        COMM_TT_PER = #commTtPer:NUMERIC#,
        COMM_CURR_PER = #commCurrPer:NUMERIC#
        WHERE EXCHANGE_ID = #exchangeId:VARCHAR#
    </mapped-statement>

	<!-- Use ExchangeRateTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteExchangeRateTO" inline-parameters="true">
        UPDATE FOREX_EXCHANGE_RATE SET 
        STATUS = #status:VARCHAR#
        WHERE EXCHANGE_ID = #exchangeId:VARCHAR#
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to ExchangeRateTO object (JavaBean) properties -->
    <result-map name="getExchangeRateTOResult" class="com.see.truetransact.transferobject.forex.ExchangeRateTO">
        <property name="exchangeId" column="EXCHANGE_ID"/>
        <property name="valueDate" column="VALUE_DATE"/>
        <property name="transCurrency" column="TRANS_CURRENCY"/>
        <property name="conversionCurrency" column="CONVERSION_CURRENCY"/>
        <property name="customerType" column="CUSTOMER_TYPE"/>
        <property name="middleRate" column="MIDDLE_RATE"/>
        <property name="sellingPer" column="SELLING_PER"/>
        <property name="sellingPrice" column="SELLING_PRICE"/>
        <property name="buyingPer" column="BUYING_PER"/>
        <property name="buyingPrice" column="BUYING_PRICE"/>
        <property name="preferred" column="PREFERRED"/>
        <property name="commission" column="COMMISSION"/>
        <property name="remarks" column="REMARKS"/>
        <property name="createdBy" column="CREATED_BY"/>
        <property name="createdDt" column="CREATED_DT"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="rateType" column="RATE_TYPE"/>
        <property name="billBuying" column="BILL_BUYING"/>
        <property name="billSelling" column="BILL_SELLING"/>
        <property name="ddBuying" column="DD_BUYING"/>
        <property name="ddSelling" column="DD_SELLING"/>
        <property name="tcBuying" column="TC_BUYING"/>
        <property name="tcSelling" column="TC_SELLING"/>
        <property name="notionalRate" column="NOTIONAL_RATE"/>
        <property name="ttBuying" column="TT_BUYING"/>
        <property name="ttSelling" column="TT_SELLING"/>
        <property name="commBillSlab" column="COMM_BILL_SLAB"/>
        <property name="commBillPer" column="COMM_BILL_PER"/>
        <property name="commDdSlab" column="COMM_DD_SLAB"/>
        <property name="commDdPer" column="COMM_DD_PER"/>
        <property name="commTcSlab" column="COMM_TC_SLAB"/>
        <property name="commTcPer" column="COMM_TC_PER"/>
        <property name="commTtSlab" column="COMM_TT_SLAB"/>
        <property name="commTtPer" column="COMM_TT_PER"/>
        <property name="commCurrPer" column="COMM_CURR_PER"/>
    </result-map>
    <mapped-statement name="getSelectExchangeRateTO" result-map="getExchangeRateTOResult" >
        SELECT  * FROM FOREX_EXCHANGE_RATE
        WHERE EXCHANGE_ID = #EXCHANGE ID:VARCHAR#
        ORDER BY EXCHANGE_ID
    </mapped-statement>
        
    <dynamic-mapped-statement name="viewExchangeRate" result-class="java.util.HashMap" >
        SELECT  EXCHANGE_ID as "Exchange ID",TRANS_CURRENCY as "Transaction Currency",CUSTOMER_TYPE as "Customer Type" FROM FOREX_EXCHANGE_RATE
        WHERE STATUS NOT IN ('DELETED')  AND  (AUTHORIZE_STATUS NOT IN ('REJECTED')  OR AUTHORIZE_STATUS IS NULL)
         <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
               <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Exchange ID" >
                    UPPER(EXCHANGE_ID) LIKE UPPER('%$Exchange ID$%')
                </isNotEmpty>
            </isParameterPresent>
               <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Transaction Currency" >
                    UPPER(TRANS_CURRENCY) LIKE UPPER('%$Transaction Currency$%')
                </isNotEmpty>
            </isParameterPresent>
              <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Customer Type" >
                    UPPER(CUSTOMER_TYPE) LIKE UPPER('%$Customer Type$%')
                </isNotEmpty>
            </isParameterPresent>
            </dynamic>
        ORDER BY EXCHANGE_ID
    </dynamic-mapped-statement>
        
    <mapped-statement name="getTblCurrencyData" result-class="java.util.LinkedHashMap" >
        SELECT LOOKUP_REF_ID || ' (' || LOOKUP_DESC || ')'  AS "TRANS_CURR"
        FROM LOOKUP_MASTER
                <!--WHERE LOOKUP_ID = 'FOREX.CURRENCY'  AND LOOKUP_REF_ID NOT IN (SELECT BASE_CURRENCY FROM BANK)                                 
                ORDER BY LOOKUP_REF_ID  -->
        WHERE LOOKUP_ID = 'FOREX.CURRENCY'  AND  NOT EXISTS (SELECT BASE_CURRENCY FROM BANK WHERE LOOKUP_REF_ID=BASE_CURRENCY)                                 
        ORDER BY LOOKUP_REF_ID
    </mapped-statement>
        
    <mapped-statement name="forex.getBranchDetails" result-class="java.util.LinkedHashMap" >
        SELECT BRANCH_CODE, BRANCH_NAME, IP_ADDR FROM BRANCH_MASTER WHERE STATUS NOT IN ('DELETED')
    </mapped-statement>
        
    <mapped-statement name="forex.getTblTitle" result-class="java.util.LinkedHashMap" >
        SELECT LOOKUP_REF_ID || ' (' || LOOKUP_DESC || ') Vs Transaction Currency ' AS "TITLE"
        FROM LOOKUP_MASTER
        WHERE LOOKUP_ID = 'FOREX.CURRENCY' AND LOOKUP_REF_ID =
        (SELECT BASE_CURRENCY from BANK)
    </mapped-statement>     
           
<!-- ==============================AUTHORIZATION===================================================== -->
    <mapped-statement name="getSelectExchangeRateAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT EXCHANGE_ID as "Exchange ID", TRANS_CURRENCY as "Transaction Currency",CUSTOMER_TYPE as "Customer Type" FROM FOREX_EXCHANGE_RATE
        WHERE STATUS NOT IN ('DELETED') AND  (AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED')  OR AUTHORIZE_STATUS IS NULL)
        ORDER BY EXCHANGE_ID
    </mapped-statement>
        
    <mapped-statement name="authorizeExchangeRate" result-class="java.util.HashMap">
        UPDATE FOREX_EXCHANGE_RATE SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#, 
        AUTHORIZED_DT = #AUTHORIZEDT:DATE#
        WHERE EXCHANGE_ID = #EXCHANGE ID:VARCHAR#
    </mapped-statement>
<!-- =================================================================================== -->   

</sql-map>
