<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="DepositMasterTOMap">

	<!-- Use DepositMasterTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
        <!--
	<mapped-statement name="insertDepositMasterTO" inline-parameters="true">
		INSERT INTO DEPOSIT_ACINFO
		(OPENING_MODE, PROD_ID, CUST_TYPE, INTRO_REQUIRED, CUST_ID, DEPOSIT_NO, SETTLEMENT_MODE, POA, STANDING_INSTRUCT, CONSTITUTION, CATEGORY, FIFTEENH_DECLARE, REMARKS, PAN_NUMBER, COMM_ADDRESS, AUTHORIZED_SIGNATORY, TAX_DEDUCTIONS, NOMINEE_DETAILS, STATUS, AUTHORIZED_BY, AUTHORIZED_DT
		) VALUES (
		#openingMode:VARCHAR#, #prodId:VARCHAR#, #custType:VARCHAR#, #introRequired:VARCHAR#, #custId:VARCHAR#, #depositNo:VARCHAR#, #settlementMode:VARCHAR#, #poa:VARCHAR#, #standingInstruct:VARCHAR#, #constitution:VARCHAR#, #category:VARCHAR#, #fifteenhDeclare:VARCHAR#, #remarks:VARCHAR#, #panNumber:VARCHAR#, #commAddress:VARCHAR#, #authorizedSignatory:VARCHAR#, #taxDeductions:VARCHAR#, #nomineeDetails:VARCHAR#, #status:VARCHAR#, #authorizedBy:VARCHAR#, #authorizedDt:DATE#)
	</mapped-statement>
        -->
        
	<!-- Use DepositMasterTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
        <!--
	<mapped-statement name="updateDepositMasterTO" inline-parameters="true">
		UPDATE DEPOSIT_ACINFO SET 
		OPENING_MODE = #openingMode:VARCHAR#,
		PROD_ID = #prodId:VARCHAR#,
		CUST_TYPE = #custType:VARCHAR#,
		INTRO_REQUIRED = #introRequired:VARCHAR#,
		CUST_ID = #custId:VARCHAR#,
		DEPOSIT_NO = #depositNo:VARCHAR#,
		SETTLEMENT_MODE = #settlementMode:VARCHAR#,
		POA = #poa:VARCHAR#,
		STANDING_INSTRUCT = #standingInstruct:VARCHAR#,
		CONSTITUTION = #constitution:VARCHAR#,
		CATEGORY = #category:VARCHAR#,
		FIFTEENH_DECLARE = #fifteenhDeclare:VARCHAR#,
		REMARKS = #remarks:VARCHAR#,
		PAN_NUMBER = #panNumber:VARCHAR#,
		COMM_ADDRESS = #commAddress:VARCHAR#,
		AUTHORIZED_SIGNATORY = #authorizedSignatory:VARCHAR#,
		TAX_DEDUCTIONS = #taxDeductions:VARCHAR#,
		NOMINEE_DETAILS = #nomineeDetails:VARCHAR#,
		STATUS = #status:VARCHAR#,
		AUTHORIZED_BY = #authorizedBy:VARCHAR#,
		AUTHORIZED_DT = #authorizedDt:DATE#
		WHERE 
	</mapped-statement>
        -->
        
	<!-- Use DepositMasterTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
        <!--
	<mapped-statement name="deleteDepositMasterTO" inline-parameters="true">
		DELETE FROM DEPOSIT_ACINFO 
		WHERE 
	</mapped-statement>
        -->

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to DepositMasterTO object (JavaBean) properties -->
        <!--
	<result-map name="getDepositMasterTOResult" class="com.see.truetransact.transferobject.deposit.closing.DepositMasterTO">
		<property name="openingMode" column="OPENING_MODE"/>
		<property name="prodId" column="PROD_ID"/>
		<property name="custType" column="CUST_TYPE"/>
		<property name="introRequired" column="INTRO_REQUIRED"/>
		<property name="custId" column="CUST_ID"/>
		<property name="depositNo" column="DEPOSIT_NO"/>
		<property name="settlementMode" column="SETTLEMENT_MODE"/>
		<property name="poa" column="POA"/>
		<property name="standingInstruct" column="STANDING_INSTRUCT"/>
		<property name="constitution" column="CONSTITUTION"/>
		<property name="category" column="CATEGORY"/>
		<property name="fifteenhDeclare" column="FIFTEENH_DECLARE"/>
		<property name="remarks" column="REMARKS"/>
		<property name="panNumber" column="PAN_NUMBER"/>
		<property name="commAddress" column="COMM_ADDRESS"/>
		<property name="authorizedSignatory" column="AUTHORIZED_SIGNATORY"/>
		<property name="taxDeductions" column="TAX_DEDUCTIONS"/>
		<property name="nomineeDetails" column="NOMINEE_DETAILS"/>
		<property name="status" column="STATUS"/>
		<property name="authorizedBy" column="AUTHORIZED_BY"/>
		<property name="authorizedDt" column="AUTHORIZED_DT"/>
	</result-map>
	<mapped-statement name="getSelectDepositMasterTO" result-map="getDepositMasterTOResult" >
		SELECT * FROM DEPOSIT_ACINFO 
		WHERE 
	</mapped-statement>
        -->
        
        <!-- Use SubDepositTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
        <!--
	<mapped-statement name="insertSubDepositTO" inline-parameters="true">
		INSERT INTO DEPOSIT_SUB_ACINFO
		(DEPOSIT_NO, DEPOSIT_SUB_NO, DEPOSIT_DT, DEPOSIT_PERIOD_YY, DEPOSIT_PERIOD_MM, DEPOSIT_PERIOD_DD, DEPOSIT_AMT, INTPAY_MODE, INTPAY_FREQ, MATURITY_DT, RATE_OF_INT, MATURITY_AMT, TOT_INT_AMT, PERIODIC_INT_AMT, STATUS, CLEAR_BALANCE, UNCLEAR_BALANCE, AVAILABLE_BALANCE, CLOSE_DT, CLOSE_BY, CREATE_BY, AUTHORIZE_DT, AUTHORIZE_BY, AUTHORIZE_STATUS, SHADOW_LIEN, SHADOW_FREEZE, SUBSTATUS_BY, SUBSTATUS_DT
		) VALUES (
		#depositNo:VARCHAR#, #depositSubNo:VARCHAR#, #depositDt:DATE#, #depositPeriodYy:NUMERIC#, #depositPeriodMm:NUMERIC#, #depositPeriodDd:NUMERIC#, #depositAmt:NUMERIC#, #intpayMode:VARCHAR#, #intpayFreq:NUMERIC#, #maturityDt:DATE#, #rateOfInt:NUMERIC#, #maturityAmt:NUMERIC#, #totIntAmt:NUMERIC#, #periodicIntAmt:NUMERIC#, #status:VARCHAR#, #clearBalance:NUMERIC#, #unclearBalance:NUMERIC#, #availableBalance:NUMERIC#, #closeDt:DATE#, #closeBy:VARCHAR#, #createBy:VARCHAR#, #authorizeDt:DATE#, #authorizeBy:VARCHAR#, #authorizeStatus:VARCHAR#, #shadowLien:NUMERIC#, #shadowFreeze:NUMERIC#, #substatusBy:VARCHAR#, #substatusDt:DATE#)
	</mapped-statement>
        -->

	<!-- Use SubDepositTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
        <!--
	<mapped-statement name="updateSubDepositTO" inline-parameters="true">
		UPDATE DEPOSIT_SUB_ACINFO SET 
		DEPOSIT_NO = #depositNo:VARCHAR#,
		DEPOSIT_SUB_NO = #depositSubNo:VARCHAR#,
		DEPOSIT_DT = #depositDt:DATE#,
		DEPOSIT_PERIOD_YY = #depositPeriodYy:NUMERIC#,
		DEPOSIT_PERIOD_MM = #depositPeriodMm:NUMERIC#,
		DEPOSIT_PERIOD_DD = #depositPeriodDd:NUMERIC#,
		DEPOSIT_AMT = #depositAmt:NUMERIC#,
		INTPAY_MODE = #intpayMode:VARCHAR#,
		INTPAY_FREQ = #intpayFreq:NUMERIC#,
		MATURITY_DT = #maturityDt:DATE#,
		RATE_OF_INT = #rateOfInt:NUMERIC#,
		MATURITY_AMT = #maturityAmt:NUMERIC#,
		TOT_INT_AMT = #totIntAmt:NUMERIC#,
		PERIODIC_INT_AMT = #periodicIntAmt:NUMERIC#,
		STATUS = #status:VARCHAR#,
		CLEAR_BALANCE = #clearBalance:NUMERIC#,
		UNCLEAR_BALANCE = #unclearBalance:NUMERIC#,
		AVAILABLE_BALANCE = #availableBalance:NUMERIC#,
		CLOSE_DT = #closeDt:DATE#,
		CLOSE_BY = #closeBy:VARCHAR#,
		CREATE_BY = #createBy:VARCHAR#,
		AUTHORIZE_DT = #authorizeDt:DATE#,
		AUTHORIZE_BY = #authorizeBy:VARCHAR#,
		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
		SHADOW_LIEN = #shadowLien:NUMERIC#,
		SHADOW_FREEZE = #shadowFreeze:NUMERIC#,
		SUBSTATUS_BY = #substatusBy:VARCHAR#,
		SUBSTATUS_DT = #substatusDt:DATE#
		WHERE 
	</mapped-statement>
        -->

	<!-- Use SubDepositTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
        <!--
	<mapped-statement name="deleteSubDepositTO" inline-parameters="true">
		DELETE FROM DEPOSIT_SUB_ACINFO 
		WHERE 
	</mapped-statement>
        -->

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to SubDepositTO object (JavaBean) properties -->
    <result-map name="getSubDepositTOResult" class="com.see.truetransact.transferobject.deposit.closing.SubDepositTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="depositSubNo" column="DEPOSIT_SUB_NO"/>
        <property name="depositDt" column="DEPOSIT_DT"/>
        <property name="depositPeriodYy" column="DEPOSIT_PERIOD_YY"/>
        <property name="depositPeriodMm" column="DEPOSIT_PERIOD_MM"/>
        <property name="depositPeriodDd" column="DEPOSIT_PERIOD_DD"/>
        <property name="depositAmt" column="DEPOSIT_AMT"/>
        <property name="intpayMode" column="INTPAY_MODE"/>
        <property name="intpayFreq" column="INTPAY_FREQ"/>
        <property name="maturityDt" column="MATURITY_DT"/>
        <property name="rateOfInt" column="RATE_OF_INT"/>
        <property name="maturityAmt" column="MATURITY_AMT"/>
        <property name="totIntAmt" column="TOT_INT_AMT"/>
        <property name="periodicIntAmt" column="PERIODIC_INT_AMT"/>
        <property name="status" column="STATUS"/>
        <property name="clearBalance" column="CLEAR_BALANCE"/>
        <property name="unclearBalance" column="UNCLEAR_BALANCE"/>
        <property name="availableBalance" column="AVAILABLE_BALANCE"/>
        <property name="closeDt" column="CLOSE_DT"/>
        <property name="closeBy" column="CLOSE_BY"/>
        <property name="createBy" column="CREATE_BY"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="shadowLien" column="SHADOW_LIEN"/>
        <property name="shadowFreeze" column="SHADOW_FREEZE"/>
        <property name="substatusBy" column="SUBSTATUS_BY"/>
        <property name="substatusDt" column="SUBSTATUS_DT"/>
        <property name="acctStatus" column="ACCT_STATUS"/>
        <property name="lastIntApplDt" column="LAST_INT_APPL_DT"/>
        <property name="totalIntCredit" column="TOTAL_INT_CREDIT"/>
        <property name="totalIntDrawn" column="TOTAL_INT_DRAWN"/>
        <property name="totalIntDebit" column="TOTAL_INT_DEBIT"/>
        <property name="totalInstallments" column="TOTAL_INSTALLMENTS"/>
        <property name="totalInstallPaid" column="TOTAL_INSTALL_PAID"/>
        <property name="totalBalance" column="TOTAL_BALANCE"/>
    </result-map>
        
    <mapped-statement name="getSelectSubDepositTO" result-map="getSubDepositTOResult" >
<!--            SELECT * FROM DEPOSIT_SUB_ACINFO 
            WHERE DEPOSIT_NO=#DEPOSITNO# and
            (acct_status  !='CLOSED' or acct_status is null) and
            (status  != 'DELETED' or status is null) and 
            AUTHORIZE_STATUS='AUTHORIZED'
            AND TOTAL_BALANCE >0-->
        SELECT * FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA WHERE DSA.DEPOSIT_NO = #DEPOSITNO:VARCHAR# AND 
        DSA.DEPOSIT_NO = DA.DEPOSIT_NO AND DA.PROD_ID = #PRODUCT_ID:VARCHAR# AND DSA.AUTHORIZE_STATUS='AUTHORIZED' AND
        (ACCT_STATUS  !='CLOSED' OR ACCT_STATUS IS NULL) AND (DSA.STATUS  != 'DELETED' OR DSA.STATUS IS NULL)            
    </mapped-statement>
        
    <mapped-statement name="getClosedSubDepositTO" result-map="getSubDepositTOResult" >
        SELECT * FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO=#DEPOSITNO:VARCHAR# AND
        (ACCT_STATUS = 'CLOSED' OR ACCT_STATUS = 'MATURED') AND 
        AUTHORIZE_STATUS IS NULL AND DEPOSIT_SUB_NO=#DEPOSITSUBNO#
<!--            AND TOTAL_BALANCE >0-->
    </mapped-statement>     
        
    <result-map name="getDepositAccountsResult" class="java.util.LinkedHashMap">
        <property name="DEPOSIT_ACT_NUM" column="DEPOSIT_NO"/>
        <property name="CUST_ID" column="CUST_ID"/>		
            <!--<property name="CUST_TYPE" column="CUST_TYPE"/>	-->	
        <property name="CUSTOMER_NAME" column="CUSTOMER_NAME"/>
        <property name="HOUSE_NAME" column="HOUSE_NAME"/>
        <property name="OPENING_MODE" column="OPENING_MODE"/>
        <property name="PROD_ID" column="PROD_ID"/>	
        <property name="MATURITY_DT" column="MATURITY_DT"/>
        <property name="MATURITY_AMT" column="MATURITY_AMT"/>		
    </result-map>
        
    <dynamic-mapped-statement name="getDepositAccounts" result-map="getDepositAccountsResult" >
<!--		SELECT distinct DEPOSIT_NO,DEPOSIT_ACINFO.CUST_ID, PROD_ID, 
                FNAME || ' ' || MNAME || ' ' || LNAME  AS CUSTOMER_NAME, 
                DEPOSIT_ACINFO.CUST_TYPE,OPENING_MODE FROM DEPOSIT_ACINFO,CUSTOMER 
                WHERE PROD_ID=#PRODID# AND (DEPOSIT_STATUS != 'CLOSED' OR DEPOSIT_STATUS IS NULL)
                AND DEPOSIT_STATUS != 'CL' AND DEPOSIT_STATUS != 'CP'
                AND ( DEPOSIT_ACINFO.CUST_ID=CUSTOMER.CUST_ID) AND
                (DEPOSIT_ACINFO.status!='DELETED' or  DEPOSIT_ACINFO.status is null) AND
                (DEPOSIT_ACINFO.AUTHORIZE_STATUS='AUTHORIZED') AND
                CUSTOMER.BRANCH_CODE = #BRANCH_CODE# AND 
                (CUSTOMER.status!='DELETED' or CUSTOMER.status is null) AND
                (CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED') -->
                
        SELECT distinct DSA.DEPOSIT_NO,DEPOSIT_ACINFO.CUST_ID, PROD_ID, 
        get_cust_name(CUSTOMER.CUST_ID) AS CUSTOMER_NAME, STREET AS HOUSE_NAME,
        DEPOSIT_ACINFO.CUST_TYPE,DSA.MATURITY_DT,DSA.MATURITY_AMT,OPENING_MODE FROM DEPOSIT_ACINFO,CUSTOMER,CUST_ADDR CA,DEPOSIT_SUB_ACINFO DSA 
        WHERE PROD_ID= #PRODID:VARCHAR# AND (DEPOSIT_STATUS != 'CLOSED' OR DEPOSIT_STATUS IS NULL OR DSA.STATUS != 'MATURED')
        AND DEPOSIT_STATUS != 'CL' AND DEPOSIT_STATUS != 'CP'
        AND CA.CUST_ID=CUSTOMER.CUST_ID AND CA.ADDR_TYPE= CUSTOMER.COMM_ADDR_TYPE
        AND ( DEPOSIT_ACINFO.CUST_ID=CUSTOMER.CUST_ID) AND
        (DEPOSIT_ACINFO.DEPOSIT_STATUS !='CLOSED')AND
        (DSA.ACCT_STATUS !='CLOSED')AND
        DSA.TOTAL_BALANCE >0 AND                
        (DEPOSIT_ACINFO.status!='DELETED' or  DEPOSIT_ACINFO.status is null) AND
        (DEPOSIT_ACINFO.AUTHORIZE_STATUS='AUTHORIZED') AND
         DEPOSIT_ACINFO.BRANCH_ID =#BRANCH_CODE:VARCHAR#
        <!-- CUSTOMER.BRANCH_CODE = #BRANCH_CODE:VARCHAR# -->
         AND 
        (CUSTOMER.status!='DELETED' or CUSTOMER.status is null) AND
        (CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED') 
                <!--(CUSTOMER.STATUS = DSA.STATUS) -->
        AND (DEPOSIT_ACINFO.DEPOSIT_NO = DSA.DEPOSIT_NO)
        <dynamic>
            <isPropertyAvailable prepend = "AND" property="DEPFREEZECHECK">
                ( #DATE# BETWEEN DSA.DEPOSIT_DT AND DSA.MATURITY_DT)
            </isPropertyAvailable>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
            <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
            </isEqual>
        </isPropertyAvailable>
        <isParameterPresent>
            <isNotNull prepend="AND"      property="DEPOSIT_NO">
                    UPPER(DSA.DEPOSIT_NO) LIKE UPPER('%$DEPOSIT_NO$%')
            </isNotNull>
        </isParameterPresent>
          <isParameterPresent>
            <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(DEPOSIT_ACINFO.CUST_ID) LIKE UPPER('%$CUST_ID$%')
            </isNotNull>
        </isParameterPresent>
         <isParameterPresent>
            <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
            </isNotNull>
        </isParameterPresent>
         <isParameterPresent>
            <isNotNull prepend="AND"      property="CUSTOMER_NAME">
                    UPPER(get_cust_name(CUSTOMER.CUST_ID)) LIKE UPPER('%$CUSTOMER_NAME$%')
            </isNotNull>
        </isParameterPresent>
          <isParameterPresent>
            <isNotNull prepend="AND"      property="HOUSE_NAME">
                    UPPER(STREET) LIKE UPPER('%$HOUSE_NAME$%')
            </isNotNull>
        </isParameterPresent>
         <isParameterPresent>
            <isNotNull prepend="AND"      property="CUST_TYPE">
                    UPPER(DEPOSIT_ACINFO.CUST_TYPE) LIKE UPPER('%$CUST_TYPE$%')
            </isNotNull>
        </isParameterPresent>
         <isParameterPresent>
            <isNotNull prepend="AND"      property="MATURITY_DT">
                    UPPER(DSA.MATURITY_DT) LIKE UPPER('%$MATURITY_DT$%')
            </isNotNull>
        </isParameterPresent>
         <isParameterPresent>
            <isNotNull prepend="AND"      property="MATURITY_AMT">
                    UPPER(DSA.MATURITY_AMT) LIKE UPPER('%$MATURITY_AMT$%')
            </isNotNull>
        </isParameterPresent>
           <isParameterPresent>
            <isNotNull prepend="AND"      property="OPENING_MODE">
                    UPPER(OPENING_MODE) LIKE UPPER('%$OPENING_MODE$%')
            </isNotNull>
        </isParameterPresent>
        </dynamic>
                <!-- Commented on 15 July by Sunil, in order to display Lien Marked Accounts.
                    Complete Lien marked Deposit Accounts cannot be closed and the same is 
                    controlled in the UI -->
                <!--
                AND 
                DEPOSIT_NO IN (SELECT DEPOSIT_NO FROM DEPOSIT_SUB_ACINFO
                WHERE AVAILABLE_BALANCE &gt;= DEPOSIT_AMT) -->
    </dynamic-mapped-statement>
       
    <dynamic-mapped-statement name="getRegularDepositAccounts" result-map="getDepositAccountsResult" >                
       SELECT DISTINCT dsa.deposit_no, deposit_acinfo.cust_id, prod_id,
                get_cust_name(c.cust_id) AS customer_name,
                street AS house_name, deposit_acinfo.cust_type,
                dsa.maturity_dt, dsa.maturity_amt, opening_mode
           FROM deposit_acinfo, customer c, cust_addr ca,
                deposit_sub_acinfo dsa
          WHERE prod_id =#PRODID:VARCHAR#
            AND deposit_status != 'CL'
            AND deposit_status != 'CP'
            AND dsa.acct_status != 'CLOSED'
            AND (deposit_acinfo.cust_id = c.cust_id)
            AND ca.cust_id = c.cust_id
            AND ca.addr_type = c.comm_addr_type
            <!--AND dsa.status != 'LIEN'-->
            AND (   deposit_acinfo.status != 'DELETED'
                 OR deposit_acinfo.status IS NULL
                )
            AND (deposit_acinfo.authorize_status = 'AUTHORIZED')
            AND (deposit_acinfo.branch_id = #BRANCH_CODE:VARCHAR#)
            AND (c.status != 'DELETED' OR c.status IS NULL)
            AND (c.authorize_status = 'AUTHORIZED')
            AND (deposit_acinfo.deposit_no = dsa.deposit_no)
        <dynamic>                                        
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "DEPOSIT_ACT_NUM" >
                    UPPER(DSA.DEPOSIT_NO) LIKE UPPER('%$DEPOSIT_ACT_NUM$%')
                </isNotEmpty>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUST_ID">
                    UPPER(deposit_acinfo.cust_id) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUSTOMER_NAME">
                    UPPER(get_cust_name(c.cust_id)) LIKE UPPER('%$CUSTOMER_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="HOUSE_NAME">
                    UPPER(STREET) LIKE UPPER('%$HOUSE_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    UPPER(OPENING_MODE) LIKE UPPER('%$OPENING_MODE$%')
                </isNotNull>
            </isParameterPresent>
            <isNotPropertyAvailable prepend = "AND" property = "LIEN_EDIT">
                    dsa.status != 'LIEN'
            </isNotPropertyAvailable>
        </dynamic>
          <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="" property="FILTERED_LIST" compareValue="FILTERED_LIST_org.postgresql.Driver" >
                    LIMIT 100
                </isEqual>
            </isPropertyAvailable>
        </dynamic>    
        
    </dynamic-mapped-statement>       
       
    <result-map name="getClosedDepositAccountsResult" class="java.util.LinkedHashMap">
        <property name="DEPOSIT_ACT_NUM" column="DEPOSIT_NO"/>
        <property name="DEPOSIT_SUB_NO" column="DEPOSIT_SUB_NO"/>
        <property name="CUST_ID" column="CUST_ID"/>		
        <property name="CUST_TYPE" column="CUST_TYPE"/>		
        <property name="CUSTOMER_NAME" column="CUSTOMER_NAME"/>
        <property name="OPENING_MODE" column="OPENING_MODE"/>
        <property name="PROD_ID" column="PROD_ID"/>			
    </result-map>
        
    <mapped-statement name="getClosedDepositAccounts" result-map="getClosedDepositAccountsResult" >
        SELECT distinct DEPOSIT_ACINFO.DEPOSIT_NO, DEPOSIT_SUB_ACINFO.DEPOSIT_SUB_NO, DEPOSIT_ACINFO.CUST_ID,
        CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME)  AS CUSTOMER_NAME, PROD_ID, 
        DEPOSIT_ACINFO.CUST_TYPE,OPENING_MODE FROM
        DEPOSIT_ACINFO,CUSTOMER, DEPOSIT_SUB_ACINFO
        WHERE  DEPOSIT_ACINFO.CUST_ID=CUSTOMER.CUST_ID AND
        DEPOSIT_SUB_ACINFO.DEPOSIT_NO = DEPOSIT_ACINFO.DEPOSIT_NO
        AND (DEPOSIT_ACINFO.status!='DELETED' or  DEPOSIT_ACINFO.status is null)
        AND (CUSTOMER.status!='DELETED' or CUSTOMER.status is null) AND
        (CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED') AND
        (DEPOSIT_SUB_ACINFO.ACCT_STATUS = 'CLOSED' OR
        DEPOSIT_SUB_ACINFO.ACCT_STATUS = 'MATURED') AND
        DEPOSIT_ACINFO.AUTHORIZE_STATUS IS NULL AND
        DEPOSIT_ACINFO.INITIATED_BRANCH = #BRANCH_CODE:VARCHAR#
        AND TOTAL_BALANCE>0 ORDER BY DEPOSIT_ACINFO.DEPOSIT_NO
            <!-- AND PROD_ID=#PRODID# -->
    </mapped-statement>
       
    <mapped-statement name="getDepositAcHd" result-class="java.util.HashMap" >
        SELECT ACCT_HEAD as ACHDID, AC_HD_DESC as ACHDDESC 
        FROM DEPOSITS_PRODUCT P,AC_HD H
        WHERE PROD_ID = #PRODID:VARCHAR# 
        AND ACCT_HEAD = AC_HD_ID 
        AND (P.STATUS!='DELETED' OR P.STATUS IS NULL) 
        AND (H.STATUS!='DELETED' OR H.STATUS IS null)
    </mapped-statement>      
      
    <mapped-statement name="Closing.getDepositAcHd" result-class="java.util.HashMap" >
        SELECT ACCT_HEAD as ACHDID,AC_HD_DESC as ACHDDESC,nvl(AMT_MULTIPLES,0) as UNIT_AMT,PARTIAL_WITHDRAWAL FROM 
        DEPOSITS_PRODUCT P,AC_HD,DEPOSITS_PROD_SCHEME S
        where P.PROD_ID=#PRODID:VARCHAR# and ACCT_HEAD=AC_HD_ID and S.PROD_ID=P.PROD_ID 
        and (P.status!='DELETED' or P.status is null)
    </mapped-statement>   
      
    <result-map name="depositDetailsResult" class="java.util.HashMap">
        <property name="CATEGORY" column="CATEGORY"/>
        <property name="CONSTITUTION" column="CONSTITUTION"/>
        <property name="SETTLEMENT_MODE" column="SETTLEMENT_MODE"/>
        <property name="CUST_NAME" column="CUST_NAME"/>
        <property name="CUST_ID" column="CUST_ID"/>
    </result-map>
    
    <mapped-statement name="getDepositDetail" result-map="depositDetailsResult" >
<!--        SELECT CATEGORY AS CATEGORY,CONSTITUTION AS CONSTITUTION,SETTLEMENT_MODE,
        D.CUST_ID, get_cust_name(C.CUST_ID) AS CUST_NAME 
        FROM DEPOSIT_ACINFO D,CUSTOMER C,CUST_ADDR CA
        WHERE DEPOSIT_NO=#value# AND D.CUST_ID=C.CUST_ID AND
        D.DEPOSIT_STATUS != 'CLOSED' AND
        D.DEPOSIT_STATUS != 'CP' AND
        D.DEPOSIT_STATUS != 'CL' AND  
        C.CUST_ID=Ca.CUST_ID -->
        
        SELECT D.CATEGORY AS CATEGORY,CONSTITUTION AS CONSTITUTION,(SELECT LOOKUP_MASTER.LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        LOOKUP_MASTER.LOOKUP_ID = 'SETTLEMENT_MODE' AND LOOKUP_MASTER.LOOKUP_REF_ID = D.SETTLEMENT_MODE) AS SETTLEMENT_MODE,
        D.CUST_ID, GET_JOINT_CUST(deposit_no) AS cust_name
        FROM DEPOSIT_ACINFO D,CUSTOMER C
        WHERE DEPOSIT_NO=#value:VARCHAR# AND D.CUST_ID=C.CUST_ID            
    </mapped-statement>      
    
    <mapped-statement name="getFreezeAmount" result-class="java.util.HashMap" >
        SELECT nvl(sum(AMOUNT),0) as AMOUNT FROM DEPOSIT_FREEZE
        WHERE DEPOSIT_NO=#DEPOSITNO:VARCHAR# and DEPOSIT_SUB_NO=#SUBDEPOSIT:VARCHAR# 
        and (status not in ('DELETED','UNFREEZED') or status is null) and
        AUTHORIZE_STATUS='AUTHORIZED'
    </mapped-statement>          
    
    <mapped-statement name="getLienAmount" result-class="java.util.HashMap" >
        SELECT nvl(sum(LIEN_AMOUNT),0) as AMOUNT FROM DEPOSIT_LIEN
        WHERE DEPOSIT_NO=#DEPOSITNO:VARCHAR# and DEPOSIT_SUB_NO=#SUBDEPOSIT:VARCHAR#
        and (status not in ('DELETED','UNLIENED') or status is null) and
        AUTHORIZE_STATUS='AUTHORIZED'
    </mapped-statement>            
    
    <mapped-statement name="getTDSAmount" result-class="java.util.HashMap" >
<!--        SELECT nvl(sum(TDS_AMT),0) as AMOUNT FROM DEPOSIT_TDS_DEDUCTION
        WHERE DEPOSIT_NO=#DEPOSITNO# and DEPOSIT_SUB_NO=#SUBDEPOSIT# and 
        (status!='DELETED' or status is null)-->
        SELECT nvl(sum(TDS_AMT),0) as AMOUNT FROM TDS_COLLECTED
        WHERE ACCT_NUM=#DEPOSITNO:VARCHAR# <!--and DEPOSIT_SUB_NO=#SUBDEPOSIT# and 
        (status!='DELETED' or status is null)-->
        
    </mapped-statement>       
    
    <mapped-statement name="getWithDrawAmount" result-class="java.util.HashMap" >
        SELECT nvl(sum(WITHDRAW_AMT),0) as AMT,nvl(sum(no_of_units),0) as no_of_units FROM DEPOSIT_WITHDRAW
        WHERE DEPOSIT_NO=#DEPOSITNO:VARCHAR# and DEPOSIT_SUB_NO=#SUBDEPOSIT:VARCHAR# and (Status!='DELETED' or status is null)
    </mapped-statement>       
      
    <!--  
    <mapped-statement name="getLienFreezeTDSAmount" result-class="java.util.HashMap" >
        select nvl(sum(AMOUNT),0)+nvl(sum(LIEN_AMOUNT),0) as AMT,nvl(sum(TDS_AMT,0)) as TDSAMT 
        from DEPOSIT_LIEN L,DEPOSIT_FREEZE F,DEPOSIT_TDS_DEDUCTION T,DEPOSIT_SUB_ACINFO S 
        where (S.deposit_no=L.deposit_no(+) and S.deposit_no=F.deposit_no(+) and 
         S.deposit_no=T.deposit_no(+) and S.deposit_no=#DEPOSITNO#) and 
         (S.deposit_sub_no=L.deposit_sub_no(+) and S.deposit_sub_no=F.deposit_sub_no(+) 
          and S.deposit_sub_no=L.deposit_sub_no(+) and S.deposit_sub_no=#SUBDEPOSIT#)
          and L.status not in ('DELETED','UNLIENED') or L.status is null and
        L.AUTHORIZE_STATUS='AUTHORIZED' and 
        F.status not in ('DELETED','UNFREEZED') or F.status is null and
        F.AUTHORIZE_STATUS='AUTHORIZED'        
    </mapped-statement>       
    -->
    <!--
    <mapped-statement name="getPenalRate" result-class="java.util.HashMap" >
        select P.ROI_GROUP_ID,P.PROD_ID,ROI-R.PENAL_INT as PENAL_INT,(S.DEPOSIT_PERIOD_DD+S.DEPOSIT_PERIOD_MM*30+S.DEPOSIT_PERIOD_YY*365) as period
         from DEPOSIT_ROI_GROUP_PROD P,DEPOSIT_ACINFO A,DEPOSIT_ROI_GROUP_CAT C,
         DEPOSIT_ROI_GROUP_TYPE_RATE R,DEPOSIT_SUB_ACINFO S
         where A.DEPOSIT_NO=#DEPOSITNO# and P.PROD_ID=#PRODID# and C.CATEGORY_ID=A.CATEGORY 
         and S.DEPOSIT_AMT &gt;= R.FROM_AMOUNT and S.DEPOSIT_AMT &lt;= R.TO_AMOUNT and
         A.PROD_ID=P.PROD_ID and P.ROI_GROUP_ID=C.ROI_GROUP_ID and 
         P.ROI_GROUP_ID=R.ROI_GROUP_ID and A.DEPOSIT_NO=S.DEPOSIT_NO and 
         S.DEPOSIT_SUB_NO=#SUBDEPOSIT# and 
         (S.DEPOSIT_PERIOD_DD+S.DEPOSIT_PERIOD_MM*30+S.DEPOSIT_PERIOD_YY*365) &gt;= R.FROM_PERIOD and 
         (S.DEPOSIT_PERIOD_DD+S.DEPOSIT_PERIOD_MM*30+S.DEPOSIT_PERIOD_YY*365) &lt;= TO_PERIOD
         and (P.status!='DELETED' or P.status is null) and
         (A.status!='DELETED' or A.status is null) and (A.AUTHORIZE_STATUS='AUTHORIZED') and
         (C.status!='DELETED' or C.status is null) and
         (R.status!='DELETED' or R.status is null) and
         (S.status!='DELETED' or S.status is null) and (S.AUTHORIZE_STATUS='AUTHORIZED')         
   </mapped-statement> 
   -->
   
    <mapped-statement name="getPenalRate" result-class="java.util.HashMap" >
        select P.ROI_GROUP_ID,P.PROD_ID,ROI-R.PENAL_INT as PENAL_INT
        from DEPOSIT_ROI_GROUP_PROD P,DEPOSIT_ACINFO A,DEPOSIT_ROI_GROUP_CAT C,
        DEPOSIT_ROI_GROUP_TYPE_RATE R,DEPOSIT_SUB_ACINFO S
        where A.DEPOSIT_NO=#DEPOSITNO:VARCHAR# and P.PROD_ID=#PRODID:VARCHAR# and C.CATEGORY_ID=A.CATEGORY 
        and S.DEPOSIT_AMT &gt;= R.FROM_AMOUNT and S.DEPOSIT_AMT &lt;= R.TO_AMOUNT and
        A.PROD_ID=P.PROD_ID and P.ROI_GROUP_ID=C.ROI_GROUP_ID and 
        P.ROI_GROUP_ID=R.ROI_GROUP_ID and A.DEPOSIT_NO=S.DEPOSIT_NO and 
        S.DEPOSIT_SUB_NO=#SUBDEPOSIT:VARCHAR# and 
        #PERIOD:VARCHAR# &gt;= R.FROM_PERIOD and 
        #PERIOD:VARCHAR# &lt;= TO_PERIOD
        and (P.status!='DELETED' or P.status is null) and
        (A.status!='DELETED' or A.status is null) and (A.AUTHORIZE_STATUS='AUTHORIZED') and
        (C.status!='DELETED' or C.status is null) and
        (R.status!='DELETED' or R.status is null) and
        (S.status!='DELETED' or S.status is null) and (S.AUTHORIZE_STATUS='AUTHORIZED')         
    </mapped-statement>           
       
       
    <mapped-statement name="insertDepositWithDrawalTO" inline-parameters="true">
        INSERT INTO DEPOSIT_WITHDRAW
        (DEPOSIT_NO, WITHDRAW_DT, WITHDRAW_AMT, NO_OF_UNITS, STATUS, STATUS_BY, STATUS_DT, DEPOSIT_SUB_NO, WITHDRAW_NO
        ) VALUES (
        #depositNo:VARCHAR#, #withdrawDt:DATE#, #withdrawAmt:NUMERIC#, #noOfUnits:NUMERIC#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #depositSubNo:VARCHAR#, #withdrawNo:VARCHAR#)
    </mapped-statement>

	<!-- Use DepositWithDrawalTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateDepositWithDrawalTO" inline-parameters="true">
        UPDATE DEPOSIT_WITHDRAW SET 				
        WITHDRAW_AMT = #withdrawAmt:NUMERIC#,
        NO_OF_UNITS = #noOfUnits:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE WITHDRAW_NO = #withdrawNo:VARCHAR#		
    </mapped-statement>

	<!-- Use DepositWithDrawalTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteStatusDepositWithDrawalTO" inline-parameters="true">
        UPDATE DEPOSIT_WITHDRAW SET				
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#		
        WHERE DEPOSIT_NO = #depositNo:VARCHAR# and
        DEPOSIT_SUB_NO = #depositSubNo:VARCHAR#  
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to DepositWithDrawalTO object (JavaBean) properties -->
    <result-map name="getDepositWithDrawalTOResult" class="com.see.truetransact.transferobject.deposit.closing.DepositWithDrawalTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="withdrawDt" column="WITHDRAW_DT"/>
        <property name="withdrawAmt" column="WITHDRAW_AMT"/>
        <property name="noOfUnits" column="NO_OF_UNITS"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="depositSubNo" column="DEPOSIT_SUB_NO"/>
        <property name="withdrawNo" column="WITHDRAW_NO"/>
    </result-map>
    <mapped-statement name="getSelectDepositWithDrawalTO" result-map="getDepositWithDrawalTOResult" >
        SELECT * FROM DEPOSIT_WITHDRAW 
        WHERE  DEPOSIT_NO=#DEPOSITNO# and DEPOSIT_SUB_NO=#SUBDEPOSIT# and 
        (status!='DELETED' or status is null)
    </mapped-statement>   
    
    <mapped-statement name="getPWRows" result-class="java.util.HashMap" >
        select nvl(sum(WITHDRAW_AMT),0) as TOTALAMT,count(*) as NO_PW from DEPOSIT_WITHDRAW W 
        where W.DEPOSIT_NO=#DEPOSITNO:VARCHAR# and W.DEPOSIT_SUB_NO=#SUBNO:VARCHAR# and W.status!='DELETED'       
    </mapped-statement>  
    
    <mapped-statement name="getProdPWDetails" result-class="java.util.HashMap" >
        select nvl((DEPOSIT_AMT*(MAX_AMT_WITHDRAWAL/100)),0) as MAX_WDAMT,nvl((DEPOSIT_AMT*(MAX_NO_WITHDRAWAL_YR/100)),0) as 
        MAX_WDAMT_YEAR,nvl(NO_PARTIAL_WITHDRAWAL,0) as MAX_NOPW
        from DEPOSITS_PROD_SCHEME P,DEPOSIT_ACINFO A,DEPOSIT_SUB_ACINFO S where A.DEPOSIT_NO=#DEPOSITNO:VARCHAR# and A.DEPOSIT_NO=S.DEPOSIT_NO 
        and S.DEPOSIT_SUB_NO = #SUBNO:VARCHAR# and A.PROD_ID=P.PROD_ID and (A.STATUS!='DELETED'  or A.STATUS is null) and 
        (A.AUTHORIZE_STATUS='AUTHORIZED') and 
        (S.STATUS not in ('DELETED','CLOSED') or S.status is null) and 
        (S.AUTHORIZE_STATUS='AUTHORIZED')   
    </mapped-statement>  
    
    <mapped-statement name="getPWAmtPerYear" result-class="java.util.HashMap" >
        select nvl(sum(WITHDRAW_AMT),0) as WDAMT_YEAR from DEPOSIT_WITHDRAW W,DEPOSIT_SUB_ACINFO S where 
        W.DEPOSIT_NO=#DEPOSITNO:VARCHAR# and W.DEPOSIT_SUB_NO=#SUBNO:VARCHAR# and W.status!='DELETED' and W.DEPOSIT_NO=S.DEPOSIT_NO and 
        W.DEPOSIT_SUB_NO=S.DEPOSIT_SUB_NO and WITHDRAW_DT BETWEEN DEPOSIT_DT AND add_months(DEPOSIT_DT,12)
    </mapped-statement>        
    
    <mapped-statement name="checkDepositDateNew" result-class="java.util.HashMap" >
        select add_months(deposit_dt, (to_number(to_char(#TODAY_DT#, 'YYYY')) -
        to_number(to_char(deposit_dt, 'YYYY'))) * 12) as FromDate from
        DEPOSIT_SUB_ACINFO where DEPOSIT_NO=#DEPOSITNO# and DEPOSIT_SUB_NO=#SUBNO# and
        #WITHDRAWALDT:DATE# between add_months(deposit_dt, (to_number(to_char(#TODAY_DT#, 'YYYY')) -
        to_number(to_char(deposit_dt, 'YYYY'))) * 12) and  
        add_months(deposit_dt, ((to_number(to_char(#TODAY_DT#, 'YYYY')) -
        to_number(to_char(deposit_dt, 'YYYY'))) * 12) + 12)
    </mapped-statement>  
   
    <mapped-statement name="getDepositParams" result-class="java.util.HashMap" >
        SELECT DSAI.DEPOSIT_AMT as AMOUNT, DSAI.DEPOSIT_DT as DEPOSIT_DT, 
        DAI.CATEGORY as CATEGORY_ID, DAI.PROD_ID as PROD_ID, 
        DSAI.MATURITY_DT as MATURITY_DT FROM DEPOSIT_ACINFO DAI,
        DEPOSIT_SUB_ACINFO DSAI WHERE DAI.DEPOSIT_NO = DSAI.DEPOSIT_NO AND 
        DAI.DEPOSIT_NO = #DEPOSITNO:VARCHAR# AND DSAI.DEPOSIT_SUB_NO = #DEPOSITSUBNO:VARCHAR#
    </mapped-statement> 
   
    <mapped-statement name="getDepositClosingHeads" result-class="java.util.HashMap" >
<!--        SELECT DA.ACHD_FLOAT_AC, DA.FIXED_DEPOSIT_ACHD, DA.INT_DEBIT, DA.INT_MATURED_DEPOSIT,
        DA.INT_PAY, DA.INT_PROV_ACHD, DA.INT_PROV_MATURED, DA.MATURITY_DEPOSIT,
        DA.DELAYED_ACHD,DPT.TDS_GL_ACHD, DPT.RECALC_MATURITY_VALTDS FROM 
        DEPOSITS_PROD_ACHD DA, DEPOSITS_PROD_TAX DPT WHERE DA.PROD_ID = DPT.PROD_ID
        AND DA.PROD_ID = #PROD_ID# -->
        SELECT DA.SERVICE_CHARGE_ACHD, DP.ACCT_HEAD AS FIXED_DEPOSIT_ACHD, DA.INT_DEBIT, DA.INT_MATURED_DEPOSIT,
        DA.INT_PAY, DA.INT_PROV_ACHD, DA.INT_PROV_MATURED, DA.INT_RECOVERY_HEAD, DA.MATURITY_DEPOSIT, DA.COMMISION_HEAD,DP.BEHAVES_LIKE,
        DA.DELAYED_ACHD,DPT.TDS_GL_ACHD, DPT.RECALC_MATURITY_VALTDS,DA.TRANSFEROUT_ACHD,DPS.SERVICE_CHARGE_ALLOWED,DPS.SERVICE_CHARGE FROM 
        DEPOSITS_PROD_ACHD DA,DEPOSITS_PRODUCT DP,DEPOSITS_PROD_TAX DPT,DEPOSITS_PROD_SCHEME DPS WHERE DA.PROD_ID = DPT.PROD_ID AND
        DA.PROD_ID = DPS.PROD_ID AND DP.PROD_ID = DA.PROD_ID AND DP.PROD_ID = DPT.PROD_ID  AND DA.PROD_ID = #PROD_ID:VARCHAR# 
        
    </mapped-statement>  
   
<!--   <mapped-statement name="updateSubDepositClose">
        UPDATE DEPOSIT_SUB_ACINFO SET ACCT_STATUS = 'CLOSED', CLOSE_DT = #CLOSE_DT#, PENAL_INT = #PENALTY_INT#,
        CLOSE_BY = #USER_ID#, AUTHORIZE_STATUS = NULL, AUTHORIZE_DT = NULL, AUTHORIZE_BY = NULL
        WHERE DEPOSIT_NO = #DEPOSIT_NO# AND DEPOSIT_SUB_NO = #DEPOSIT_SUB_NO#
   </mapped-statement>-->
   
    <mapped-statement name="updateSubDepositClose" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET ACCT_STATUS = 'CLOSED', CLOSE_DT = #CLOSE_DT:DATE#, INTEREST_AMT=#INTEREST_AMT:NUMERIC#,
        PENAL_INT = #PENALTY_INT:VARCHAR#,CURR_RATE_OF_INT = cast(#CURR_RATE_OF_INT# as numeric),PENAL_RATE = #PENAL_RATE:VARCHAR#,PAYMENT_TYPE =#TYPES_OF_DEPOSIT:VARCHAR#,
        FLEXI_STATUS = #FLEXI_STATUS:VARCHAR#,AUTHORIZE_STATUS = NULL,CLOSE_BY = #USER_ID:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        <!-- AND DEPOSIT_SUB_NO = #DEPOSIT_SUB_NO# AND TOTAL_BALANCE >0 -->
    </mapped-statement>
   
    <mapped-statement name="updateDepositAcinfoClose" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO SET DEPOSIT_STATUS = 'CLOSED',
        AUTHORIZE_STATUS = NULL WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
   
    <mapped-statement name="updateDepositSubAcinfoSameNO" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO SET DEPOSIT_STATUS = #ACCT_STATUS:VARCHAR#,STATUS = #STATUS:VARCHAR#
        WHERE DEPOSIT_NO = #ACT_NUM:VARCHAR#
    </mapped-statement>
   
    <mapped-statement name="updateDepositAcinfoSameNO" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET ACCT_STATUS = #ACCT_STATUS:VARCHAR#,STATUS = #STATUS:VARCHAR#,
        CLOSE_DT = #CLOSE_DT:DATE# WHERE DEPOSIT_NO = #ACT_NUM:VARCHAR#
    </mapped-statement>
   
    <mapped-statement name="updateDepositAcinfoCloseRenewal" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO SET DEPOSIT_STATUS = #ACCT_STATUS:VARCHAR#
<!--        AUTHORIZE_STATUS = NULL --> WHERE DEPOSIT_NO = #ACT_NUM:VARCHAR#
    </mapped-statement>


<!-- two parameters EXISTING_TOTAL_INT_CREDIT and EXISTING_TOTAL_INT_DRAWN added by Ajay Sharma for mantis ID 9086 on dated 14-May-2014-->
   
    <mapped-statement name="updatePenalInt" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET PENAL_INT = NULL,
        INTEREST_AMT = NULL,PENAL_RATE = NULL,SB_INT_AMT = NULL,
        CURR_RATE_OF_INT = NULL,PAYMENT_TYPE = NULL,
        EXISTING_TOTAL_INT_CREDIT=NULL,
        EXISTING_TOTAL_INT_DRAWN=NULL
        WHERE DEPOSIT_NO = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
   
<!--   <mapped-statement name="updateDepositAcinfoClose">
        UPDATE DEPOSIT_ACINFO SET DEPOSIT_STATUS = 'CLOSED',
        AUTHORIZE_STATUS = NULL, AUTHORIZED_DT = NULL,
        AUTHORIZED_BY = NULL
        WHERE DEPOSIT_NO = #DEPOSIT_NO#
   </mapped-statement>-->
    <mapped-statement name="updateCloseLTDDEP" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET STATUS = #STATUS:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
   
<!--   <mapped-statement name="updateCloseDEPOSIT">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        INSTALL_TYPE = #ACCT_HEAD#
        WHERE DEPOSIT_NO = #DEPOSIT_NO#
        AND TOTAL_BALANCE >0 
   </mapped-statement>-->
   
    <mapped-statement name="updateSubDepositCloseNew" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET ACCT_STATUS = 'NEW',
        STATUS = 'CREATED' WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#<!-- AND DEPOSIT_SUB_NO = #DEPOSIT_SUB_NO#-->
    </mapped-statement>
    <mapped-statement name="updateDepositCloseDate">
    update DEPOSIT_SUB_ACINFO  set CLOSE_DT = null , CLOSE_BY = '' where DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>    
   
    <mapped-statement name="updateDepositAcinfoCloseNew" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO SET DEPOSIT_STATUS = 'NEW'
        
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>

    <mapped-statement name="updateDepositAcinfoMatClose" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO SET DEPOSIT_STATUS = #DEPOSIT_STATUS:VARCHAR#,
        AUTHORIZE_STATUS = NULL, AUTHORIZED_DT = NULL
        WHERE DEPOSIT_NO = #ACT_NUM:VARCHAR#
    </mapped-statement> 
   
    <mapped-statement name="updateSubDepositStatus" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET ACCT_STATUS = #ACCT_STATUS:VARCHAR#, INTEREST_AMT=#INTEREST_AMT:NUMBER#,CLOSE_DT = #CLOSE_DT:DATE#,
        CLOSE_BY = #USER_ID:VARCHAR#,PENAL_INT = #PENALTY_INT:VARCHAR#,CURR_RATE_OF_INT = #CURR_RATE_OF_INT:NUMERIC#,PAYMENT_TYPE =#TYPES_OF_DEPOSIT:VARCHAR#,
        PENAL_RATE = #PENAL_RATE:VARCHAR#,AUTHORIZE_STATUS = NULL, AUTHORIZE_DT = NULL, AUTHORIZE_BY = NULL,FLEXI_STATUS = #FLEXI_STATUS:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DEPOSIT_SUB_NO = #DEPOSIT_SUB_NO#
    </mapped-statement> 
   
    <mapped-statement name="updateStatusLienAcinfoModified" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO SET DEPOSIT_STATUS = #DEPOSIT_STATUS:VARCHAR#,
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,AUTHORIZED_BY = #USER_ID:VARCHAR#, 
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE DEPOSIT_NO = #DEPOSITNO:VARCHAR# 
    </mapped-statement>
   
    <mapped-statement name="updateStatusLienModified" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET STATUS = #STATUS:VARCHAR#,
        ACCT_STATUS = #ACCT_STATUS:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSITNO:VARCHAR# 
    </mapped-statement>
   
    <mapped-statement name="updateStatusLTDModified" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET STATUS = #NORM_STATUS:VARCHAR#,
        ACCT_STATUS = #ACCT_STATUS:VARCHAR#,AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#,AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#        
        WHERE DEPOSIT_NO = #DEPOSITNO:VARCHAR# 
    </mapped-statement>
   
<!--   <mapped-statement name="updateStatusLTDAcinfoModified">
        UPDATE DEPOSIT_ACINFO SET ACCT_STATUS = 'MATURED'
        WHERE DEPOSIT_NO = #DEPOSITNO# 
   </mapped-statement>-->

    <mapped-statement name="updateMasterDepositClose" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO DA SET DEPOSIT_STATUS = 'CLOSED' 
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND 0 = (
        SELECT COUNT(DEPOSIT_NO) FROM DEPOSIT_SUB_ACINFO WHERE ACCT_STATUS != 'CLOSED'
        AND DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#)
    </mapped-statement>
   
    <mapped-statement name="getInterestDrawn" result-class="java.util.HashMap" >
        SELECT SUM(INT_AMT) AS INT_AMT, SUM(TDS_AMT) AS TDS_AMT FROM DEPOSIT_INTEREST 
        WHERE ACT_NUM = #value:VARCHAR# <!--act_num = DEPOSIT_NO + "_" + DEPOSIT_SUB_NO -->
    </mapped-statement>
   
    <mapped-statement name="getLastInterestAppliedDate" result-class="java.lang.String" >
        SELECT INT_DT FROM DEPOSIT_INTEREST WHERE ACT_NUM = #value:VARCHAR# <!--act_num = DEPOSIT_NO + "_" + DEPOSIT_SUB_NO -->
    </mapped-statement>
   
    <dynamic-mapped-statement name="getDepositAccountCloseAuthorizeTOList" result-class="java.util.LinkedHashMap" >
         SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE MAX(AT.TRANS_ID)
         END AS TRANS_ID,DA.DEPOSIT_NO AS DEPOSIT_ACT_NUM, DSA.DEPOSIT_SUB_NO AS DEPOSIT_SUB_NO,  C.CUST_ID,
        CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) AS CUSTOMER_NAME,
        DEPOSIT_DT, DA.PROD_ID,sum(AT.AMOUNT) as amount,AT.SINGLE_TRANS_ID FROM DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE#  AND AT.TRANS_TYPE='DEBIT' 
        AND (AT.link_batch_id = da.deposit_no ||'_'|| dsa.DEPOSIT_SUB_NO  OR AT.link_batch_id = da.deposit_no) AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.CUST_ID = C.CUST_ID
        AND DSA.CLOSE_BY != #USER_ID:VARCHAR# <!--AND DSA.PAYMENT_TYPE IS NOT NULL -->
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DSA.CLOSE_BY)
        <!--AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR#-->
        AND AT.INITIATED_BRANCH= #BRANCH_CODE:VARCHAR#
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))                
            </isNotEqual>
        </dynamic>
        AND DSA.DEPOSIT_NO NOT IN (SELECT DC.DEPOSIT_NO FROM DEPOSIT_MULTI_CLOSING_TEMP DC WHERE DC.CLOSE_DT =#TRANS_DT:DATE#
            AND DC.AUTHORIZE_STATUS IS NULL AND DC.STATUS !='DELETED' )
        group by AT.trans_mode,AT.SINGLE_TRANS_ID,AT.BATCH_ID,da.deposit_no,dsa.deposit_sub_no,da.prod_id,c.cust_id,deposit_dt,fname,mname,lname  
        order by trans_id
        <!--UNION 
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,DA.DEPOSIT_NO AS DEPOSIT_ACT_NUM, DSA.DEPOSIT_SUB_NO AS DEPOSIT_SUB_NO,  C.CUST_ID,
        CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) AS CUSTOMER_NAME,
        DEPOSIT_DT, DA.PROD_ID FROM DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND AT.TRANS_TYPE='CREDIT'
        AND (AT.link_batch_id = da.deposit_no ||'_'|| dsa.DEPOSIT_SUB_NO  OR AT.link_batch_id = da.deposit_no) AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.CUST_ID = C.CUST_ID
        AND DSA.CLOSE_BY != #USER_ID:VARCHAR# AND DSA.PAYMENT_TYPE IS NOT NULL 
        AND #HIERARCHY_ID#::numeric &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DSA.CLOSE_BY)
        AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR#
        AND (DSA.ACCT_STATUS = 'CLOSED' OR DSA.ACCT_STATUS = 'MATURED') 
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        
        ORDER BY DA.DEPOSIT_NO-->
    </dynamic-mapped-statement>
   
    <dynamic-mapped-statement name="getDepositAccountCloseCashierAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE MAX(AT.TRANS_ID)
         END AS TRANS_ID,DA.DEPOSIT_NO AS DEPOSIT_ACT_NUM, DSA.DEPOSIT_SUB_NO AS DEPOSIT_SUB_NO,  C.CUST_ID,
        CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) AS CUSTOMER_NAME,
        DEPOSIT_DT, DA.PROD_ID,sum(AT.AMOUNT) as amount,AT.SINGLE_TRANS_ID FROM DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN NULL ELSE AT.PAYMENT_STATUS END IS  NULL AND AT.TRANS_TYPE='DEBIT' 
        AND (AT.link_batch_id = da.deposit_no ||'_'|| dsa.DEPOSIT_SUB_NO  OR AT.link_batch_id = da.deposit_no) AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.CUST_ID = C.CUST_ID
        AND DSA.CLOSE_BY != #USER_ID:VARCHAR# <!--AND DSA.PAYMENT_TYPE IS NOT NULL -->
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DSA.CLOSE_BY)
        <!--AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR#-->
        AND AT.INITIATED_BRANCH= #BRANCH_CODE:VARCHAR#
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        AND (DSA.ACCT_STATUS = 'CLOSED' OR DSA.ACCT_STATUS = 'MATURED') 
        AND DSA.DEPOSIT_NO NOT IN (SELECT DC.DEPOSIT_NO FROM DEPOSIT_MULTI_CLOSING_TEMP DC WHERE DC.CLOSE_DT =#TRANS_DT:DATE#
            AND DC.AUTHORIZE_STATUS IS NULL AND DC.STATUS !='DELETED' )
        group by AT.trans_mode,AT.SINGLE_TRANS_ID,AT.BATCH_ID,da.deposit_no,dsa.deposit_sub_no,da.prod_id,c.cust_id,deposit_dt,fname,mname,lname 
            order by trans_id
       <!-- UNION
          
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,DA.DEPOSIT_NO AS DEPOSIT_ACT_NUM, DSA.DEPOSIT_SUB_NO AS DEPOSIT_SUB_NO,  C.CUST_ID,
        CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) AS CUSTOMER_NAME,
        DEPOSIT_DT, DA.PROD_ID FROM DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND AT.TRANS_TYPE='CREDIT' AND CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN 'AUTHORIZED' ELSE AT.PAYMENT_STATUS END IS NOT NULL 
        AND (AT.link_batch_id = da.deposit_no ||'_'|| dsa.DEPOSIT_SUB_NO  OR AT.link_batch_id = da.deposit_no) AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.CUST_ID = C.CUST_ID
        AND DSA.CLOSE_BY != #USER_ID:VARCHAR# AND DSA.PAYMENT_TYPE IS NOT NULL 
        AND #HIERARCHY_ID#::numeric &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DSA.CLOSE_BY)
        AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR#
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        AND (DSA.ACCT_STATUS = 'CLOSED' OR DSA.ACCT_STATUS = 'MATURED')   -->       
    </dynamic-mapped-statement>
   
    <mapped-statement name="authorizeDepositClose" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#,
        AUTHORIZE_DT = #AUTHORIZEDT:DATE#
        WHERE DEPOSIT_NO || '_' || DEPOSIT_SUB_NO = #ACCOUNTNO:VARCHAR#
        AND (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS IS NULL)<!-- AND TOTAL_INT_DEBIT = '1'-->
    </mapped-statement> 
    
    <mapped-statement name="authorizeDepositSubClose" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#,
        AUTHORIZED_DT = #AUTHORIZEDT:DATE#
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        AND (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS IS NULL)        
    </mapped-statement>
    
    <mapped-statement name="authorizeSameDepositCloseNoBal" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO_SAMENO SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        ACCT_STATUS = #ACCT_STATUS:VARCHAR#,
        TOTAL_BALANCE = #TOTAL_BALANCE:NUMBER#,
        CLEAR_BALANCE = #CLEAR_BALANCE:NUMBER#,
        AVAILABLE_BALANCE = #AVAILABLE_BALANCE:NUMBER#,
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#
        WHERE DEPOSIT_NO = #ACCOUNTNO:VARCHAR#
        AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>

    <mapped-statement name="authorizeSameDepositCloseBal" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        ACCT_STATUS = #ACCT_STATUS:VARCHAR#,
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#,
        CLOSE_DT = NULL,
        CLOSE_BY = NULL,
        TOTAL_INT_DEBIT = NULL
        WHERE DEPOSIT_NO = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name="authorizeDepositAccountClose" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#,
        <dynamic>
            <isParameterPresent>
                <isNotNull property="CLOSE_DT">
                    CLOSE_DT = #CLOSE_DT:DATE#,
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull property="CLOSE_BY">
                    CLOSE_BY = #CLOSE_BY:VARCHAR#,
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ACCT_STATUS = 'CLOSED', 
        AUTHORIZE_DT = #AUTHORIZEDT:DATE#
        WHERE DEPOSIT_NO || '_' || DEPOSIT_SUB_NO = #ACCOUNTNO:VARCHAR#
<!--        AND TOTAL_BALANCE >0-->
    </dynamic-mapped-statement> 
    
    <mapped-statement name="authorizeDepositSubAccountClose" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#, 
        DEPOSIT_STATUS = 'CLOSED', 
        AUTHORIZED_DT = #AUTHORIZEDT:DATE#
        WHERE DEPOSIT_NO = #ACCOUNTNO:VARCHAR#
    </mapped-statement> 
    
    <mapped-statement name="updateMakeNullPenal" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO SET 
        PENAL_INT = NULL,
        CURR_RATE_OF_INT = NULL,
        PENAL_RATE = NULL
        WHERE DEPOSIT_NO = #DEPOSITNO:VARCHAR#
    </mapped-statement>   
     
  <mapped-statement name="getAdditionalInterestConditions" result-class="java.util.HashMap" >
      select DATE_OF_RENEWAL,DATE_OF_MATURITY,ELIGIBLE_TWO_RATE,INT_RATE_APPLIED_OVERDUE,SBRATE_PRODID,CLOSURE_INT_YN,DEATHMARKED_INT_YN
        from DEPOSITS_PROD_RENEWAL where prod_id= #PRODID:VARCHAR#
      </mapped-statement>
      
    <mapped-statement name="getDepositClosingDetails" result-class="java.util.HashMap" >
<!--        SELECT FROM_PERIOD,TO_PERIOD,ROI,PENAL_INT
        FROM DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR,
        DEPOSIT_ROI_GROUP_CAT DRGC,
        DEPOSIT_ACINFO DA,
        DEPOSIT_ROI_GROUP DRG,
        DEPOSIT_ROI_GROUP_PROD DRGP
        WHERE DA.CUST_ID =#CUSTID# AND
        DA.DEPOSIT_NO=#DEPOSITNO# AND
        DA.CATEGORY=DRGC.CATEGORY_ID AND
        DRGTR.ROI_GROUP_ID=DRGP.ROI_GROUP_ID AND
        DRGP.PROD_ID=#PRODID# AND
        DRGP.ROI_GROUP_ID=DRGC.ROI_GROUP_ID AND
        DRG.PRODUCT_TYPE = 'TD' AND
        DRGC.ROI_GROUP_ID=DRG.ROI_GROUP_ID AND
        (#DEPOSIT_DT:TIMESTAMP# BETWEEN DRGTR.ROI_DATE AND DRGTR.ROI_END_DATE OR  DRGTR.ROI_END_DATE IS NULL)       
         #DEPOSIT_DT:TIMESTAMP# BETWEEN DRGTR.ROI_DATE AND DRGTR.ROI_END_DATE-->
        SELECT FROM_PERIOD,TO_PERIOD,ROI,PENAL_INT 
        FROM DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR, DEPOSIT_ROI_GROUP_CAT DRGC, 
        DEPOSIT_ACINFO DA, DEPOSIT_ROI_GROUP DRG, DEPOSIT_ROI_GROUP_PROD DRGP 
        WHERE DA.CUST_ID =#CUSTID:VARCHAR# AND DA.DEPOSIT_NO=#DEPOSITNO:VARCHAR# AND DA.CATEGORY=DRGC.CATEGORY_ID AND 
        DRGTR.ROI_GROUP_ID=DRGP.ROI_GROUP_ID AND DRGP.PROD_ID=#PRODID:VARCHAR# AND DRGP.ROI_GROUP_ID=DRGC.ROI_GROUP_ID AND 
        DRG.PRODUCT_TYPE = 'TD' AND DRGC.ROI_GROUP_ID=DRG.ROI_GROUP_ID AND 
        ((#DEPOSIT_DT:DATE# BETWEEN DRGTR.ROI_DATE AND DRGTR.ROI_END_DATE) OR 
        (DRGTR.ROI_DATE &lt;= #DEPOSIT_DT:DATE# AND DRGTR.ROI_END_DATE IS NULL))
        AND DRG.STATUS!='DELETED' AND DRGP.STATUS!='DELETED' AND DRGC.STATUS!='DELETED' AND DRGTR.STATUS!='DELETED'
        AND #PERIOD# BETWEEN FROM_PERIOD AND TO_PERIOD
    </mapped-statement>
    <mapped-statement name="getCumRoiPenal" result-class="java.util.HashMap" >
        SELECT PENAL_INT 
        FROM DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR
        , DEPOSIT_ROI_GROUP_PROD DRGP 
        WHERE 
        DRGTR.ROI_GROUP_ID=DRGP.ROI_GROUP_ID AND DRGP.PROD_ID=#PRODID# AND 
        ((#DEPOSIT_DT:TIMESTAMP# BETWEEN DRGTR.ROI_DATE AND DRGTR.ROI_END_DATE) OR 
        (DRGTR.ROI_DATE &lt;= #DEPOSIT_DT:TIMESTAMP# AND DRGTR.ROI_END_DATE IS NULL))
        AND DRGP.STATUS!='DELETED'AND DRGTR.STATUS!='DELETED'
    </mapped-statement>
 
    <mapped-statement name="getDepositClosingDetailsForSeniorCitizen" result-class="java.util.HashMap" >

        SELECT FROM_PERIOD,TO_PERIOD,ROI,PENAL_INT 
        FROM DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR, DEPOSIT_ROI_GROUP_CAT DRGC, 
        DEPOSIT_ACINFO DA, DEPOSIT_ROI_GROUP DRG, DEPOSIT_ROI_GROUP_PROD DRGP 
        WHERE DA.CUST_ID =#CUSTID:VARCHAR# AND DA.DEPOSIT_NO=#DEPOSITNO:VARCHAR# AND 'GENERAL_CATEGORY'=DRGC.CATEGORY_ID AND 
        DRGTR.ROI_GROUP_ID=DRGP.ROI_GROUP_ID AND DRGP.PROD_ID=#PRODID:VARCHAR# AND DRGP.ROI_GROUP_ID=DRGC.ROI_GROUP_ID AND 
        DRG.PRODUCT_TYPE = 'TD' AND DRGC.ROI_GROUP_ID=DRG.ROI_GROUP_ID AND 
        ((#DEPOSIT_DT:TIMESTAMP# BETWEEN DRGTR.ROI_DATE AND DRGTR.ROI_END_DATE) OR 
        (DRGTR.ROI_DATE &lt;= #DEPOSIT_DT:TIMESTAMP# AND DRGTR.ROI_END_DATE IS NULL))
        AND DRG.STATUS!='DELETED' AND DRGP.STATUS!='DELETED' AND DRGC.STATUS!='DELETED' AND DRGTR.STATUS!='DELETED'
        AND #PERIOD# BETWEEN FROM_PERIOD AND TO_PERIOD
    </mapped-statement>
 
    <mapped-statement name="getCustDepositNoBehavesLike" result-class="java.util.HashMap" >
<!--        SELECT DEPOSIT_DT,PROD_ID,CUST_ID,CLEAR_BALANCE, TOTAL_BALANCE,INTPAY_FREQ, TOTAL_INT_CREDIT, 
        TOTAL_INT_DEBIT, MATURITY_AMT, DSA.DEPOSIT_AMT, DEPOSIT_PERIOD_YY, DEPOSIT_PERIOD_MM, 
        TOTAL_INSTALL_PAID, PENAL_INT,TOT_INT_AMT,MATURITY_DT,RATE_OF_INT,DELAYED_MONTH,DELAYED_AMOUNT,
        CATEGORY,TOTAL_INT_DRAWN, LAST_INT_APPL_DT,PENAL_RATE,CURR_RATE_OF_INT,DEATH_CLAIM,AGENT_ID
        FROM DEPOSIT_SUB_ACINFO DSA, DEPOSIT_ACINFO DA
        WHERE DA.DEPOSIT_NO = #DEPOSIT_NO# AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        AND TOTAL_BALANCE >0 -->
        <!--SELECT DEPOSIT_DT,DA.PROD_ID,CUST_ID,CLEAR_BALANCE, TOTAL_BALANCE,INTPAY_FREQ, TOTAL_INT_CREDIT,TOTAL_INT_DEBIT, 
        MATURITY_AMT, DSA.DEPOSIT_AMT, DEPOSIT_PERIOD_YY, DEPOSIT_PERIOD_MM,DISCOUNTED_RATE, TOTAL_INSTALL_PAID, 
        PENAL_INT,TOT_INT_AMT,MATURITY_DT,RATE_OF_INT,DELAYED_MONTH,DELAYED_AMOUNT,CATEGORY,TOTAL_INT_DRAWN, LAST_INT_APPL_DT,
        PENAL_RATE,CURR_RATE_OF_INT,DEATH_CLAIM,AGENT_ID,PAYINT_DEP_MATURITY,AGENT_COMMISION_PERIOD,PREMATURE_MIN_PERIOD,DAILY_INT_CALC,
        WEEKLY_BASIS,BEHAVES_LIKE,DP.ACCT_HEAD,AGENT_COMMISION_MODE,INTEREST_NOT_PAYING,INTEREST_NOT_PAYING_MODE
        FROM DEPOSITS_PROD_SCHEME DPS,DEPOSITS_PROD_RD DPR,DEPOSITS_PROD_RENEWAL DPRS,DEPOSITS_PRODUCT DP, 
        DEPOSIT_SUB_ACINFO DSA, DEPOSIT_ACINFO DA WHERE DA.DEPOSIT_NO = #DEPOSIT_NO# AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        AND DA.PROD_ID = DP.PROD_ID AND DA.PROD_ID = DPS.PROD_ID AND DA.PROD_ID = DPR.PROD_ID AND DA.PROD_ID = DPRS.PROD_ID  -->
<!--        AND TOTAL_BALANCE >0        -->

        SELECT DEPOSIT_DT,DA.PROD_ID,CUST_ID,CLEAR_BALANCE, TOTAL_BALANCE,INTPAY_FREQ, TOTAL_INT_CREDIT,TOTAL_INT_DEBIT,
        MATURITY_AMT, DSA.DEPOSIT_AMT, DEPOSIT_PERIOD_YY, DEPOSIT_PERIOD_MM,DISCOUNTED_RATE, TOTAL_INSTALL_PAID, 
        PENAL_INT,TOT_INT_AMT,MATURITY_DT,RATE_OF_INT,DELAYED_MONTH,DELAYED_AMOUNT,CATEGORY,TOTAL_INT_DRAWN, LAST_INT_APPL_DT,
        PENAL_RATE,CURR_RATE_OF_INT,DEATH_CLAIM,AGENT_ID,PAYINT_DEP_MATURITY,AGENT_COMMISION_PERIOD,PREMATURE_MIN_PERIOD,DAILY_INT_CALC,
        WEEKLY_BASIS,BEHAVES_LIKE,DP.ACCT_HEAD,AGENT_COMMISION_MODE,INTEREST_NOT_PAYING,INTEREST_NOT_PAYING_MODE ,PARTIAL_WITHDRAWAL_ALLOWED,
        DAILY_INT_CALC_METHOD,PENAL_INT_WITHDRAWAL_AMT,WEEKLY_SPEC,DEPOSIT_FREQ,dps.DEATH_CLAIM_INT,dpr.RD_CLOSING_PENAL_REQUIRED,DPR.RD_CLOSING_SB_DEPOSIT_ROI,DPR.INT_APPLY_FOR_IRREGULAR_RD,DPR.SPECIAL_RD
        FROM DEPOSITS_PROD_SCHEME DPS,DEPOSITS_PROD_RD DPR,DEPOSITS_PROD_RENEWAL DPRS,DEPOSITS_PRODUCT DP, 
        DEPOSIT_SUB_ACINFO DSA, DEPOSIT_ACINFO DA WHERE DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.PROD_ID = DP.PROD_ID AND DA.PROD_ID = DPS.PROD_ID AND DA.PROD_ID = DPR.PROD_ID AND DA.PROD_ID = DPRS.PROD_ID
    </mapped-statement>
    
    <mapped-statement name="getProdIdForOperative" result-class="java.util.HashMap" >
        SELECT PROD_ID FROM OP_AC_PRODUCT WHERE BEHAVIOR = #BEHAVIOR:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getLimitAmountForDepProd" result-class="java.util.HashMap" >
        SELECT MAX_AMT_CASH FROM DEPOSITS_PROD_SCHEME WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getClearingBalance" result-class="java.util.HashMap" >
        SELECT am.act_num,AM.PROD_ID, am.clear_balance, oaap.min_bal_w_chk, oaap.min_bal_wt_chk,AM.SHADOW_CREDIT,AM.SHADOW_DEBIT
        FROM act_master am, op_ac_account_param oaap
        WHERE am.act_num = #ACT_NUM:VARCHAR#
        AND oaap.prod_id = am.prod_id
    </mapped-statement>
    <mapped-statement name="getGLProdDescription" result-class="java.util.HashMap" >
        SELECT AC_HD_DESC FROM ac_hd  WHERE AC_HD_ID = #INT_PAY:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getStatusForDeposit" result-class="java.util.HashMap" >
<!--        SELECT PROD_ID,DSA.STATUS FROM DEPOSIT_SUB_ACINFO DSA, DEPOSIT_ACINFO DA 
        WHERE DA.DEPOSIT_NO = #DEPOSIT_NO#
        AND DSA.DEPOSIT_NO = DA.DEPOSIT_NO -->
        SELECT DA.PROD_ID,DSA.STATUS,DPA.INT_PAY,MAX_AMT_CASH FROM DEPOSIT_SUB_ACINFO DSA,DEPOSITS_PROD_SCHEME DPD,
        DEPOSIT_ACINFO DA,DEPOSITS_PROD_ACHD DPA WHERE DPD.PROD_ID = DPA.PROD_ID AND DPA.PROD_ID = DA.PROD_ID AND 
        DSA.DEPOSIT_NO = DA.DEPOSIT_NO AND DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement> 
    
<!--    <mapped-statement name="updateDepositStatus" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        STATUS = #STATUS# WHERE DEPOSIT_NO = #DEPOSIT_NO#
    </mapped-statement>  -->
    
    <mapped-statement name="getDepositLienStatusLTD" result-class="java.util.HashMap" >
        SELECT STATUS FROM DEPOSIT_LIEN WHERE LIEN_AC_NO = #LIEN_AC_NO:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name="getAccountHeadForLTD" result-class="java.util.HashMap" >
<!--        SELECT LIEN_AMOUNT,LIEN_AC_NO,BEHAVES_LIKE FROM DEPOSIT_LIEN,LOANS_PRODUCT
        WHERE DEPOSIT_NO = #DEPOSIT_NO# AND LIEN_AC_HD = ACCT_HEAD AND
        LIEN_PROD_ID = PROD_ID AND DEPOSIT_LIEN.STATUS!='UNLIENED' 
        <dynamic>
            <isNotParameterPresent>
                <isNull prepend = "AND"  property="DEPOSIT_RENEWAL" -->
                <!--/isNull>
            </isNotParameterPresent>
        </dynamic
        SELECT LIEN_AMOUNT,LIEN_AC_NO,BEHAVES_LIKE,DEPOSIT_AMT,TOTAL_BALANCE FROM DEPOSIT_LIEN DL,LOANS_PRODUCT,
        DEPOSIT_SUB_ACINFO DSA WHERE DSA.DEPOSIT_NO = DL.DEPOSIT_NO AND DSA.DEPOSIT_NO = #DEPOSIT_NO# AND 
        LIEN_AC_HD = ACCT_HEAD AND LIEN_PROD_ID = PROD_ID AND DSA.STATUS='LIEN' AND DL.STATUS != 'UNLIENED'-->
        SELECT LIEN_AMOUNT,LIEN_AC_NO,LP.BEHAVES_LIKE,DP.BEHAVES_LIKE DEPOSIT_BEHAVES_LIKE,DEPOSIT_AMT,
        TOTAL_BALANCE FROM DEPOSIT_LIEN DL,DEPOSIT_ACINFO DA,LOANS_PRODUCT LP,DEPOSITS_PRODUCT DP,
        DEPOSIT_SUB_ACINFO DSA WHERE DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.PROD_ID = DP.PROD_ID AND 
        DSA.DEPOSIT_NO = DL.DEPOSIT_NO AND DSA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND LIEN_AC_HD = LP.ACCT_HEAD AND 
        LIEN_PROD_ID = LP.PROD_ID AND DSA.STATUS='LIEN' AND DL.STATUS != 'UNLIENED' 
        AND DL.AUTHORIZE_STATUS = 'AUTHORIZED'        
    </dynamic-mapped-statement>
    <mapped-statement name="getDailyROIRate" result-class="java.util.HashMap" >
         SELECT  ROI,PREMATURE_ROI FROM DAILY_DEP_ROI_SLAB,DAILY_DEP_ROI_SLAB_DET WHERE PROD_ID=#PROD_ID:VARCHAR# AND #PERIOD# BETWEEN FROM_PERIOD_MM AND TO_PERIOD_MM
    </mapped-statement>
    <mapped-statement name="getLoanAmountForLTDDep" result-class="java.util.HashMap" >
        SELECT LOAN_BALANCE_PRINCIPAL,PROD_ID,SHADOW_CREDIT,NVL(EXCESS_AMT,0) as EXCESS_AMT FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
<!--    <mapped-statement name="getLoanAmountForLTDDep" result-class="java.util.HashMap" >
        SELECT LOAN_BALANCE_PRINCIPAL,PROD_ID FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #ACCT_NUM#
    </mapped-statement> -->

    <mapped-statement name="getAccHeadDesc" result-class="java.util.HashMap" >
        SELECT PROD_DESC FROM LOANS_PRODUCT WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getMaturedAccountHead" result-class="java.util.HashMap" >
        SELECT MATURITY_DEPOSIT,TRANS_MATURED_DEP,AFTER_NO_DAYS FROM DEPOSITS_PROD_ACHD DPA,DEPOSITS_PROD_SCHEME  DPS WHERE DPA.PROD_ID = #PROD_ID:VARCHAR# AND DPA.PROD_ID=DPS.PROD_ID
    </mapped-statement>

    <mapped-statement name="getLoansFacilityDet" result-class="java.util.HashMap" >
<!--        SELECT INT_GET_FROM FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #ACCT_NUM#-->
        SELECT MIN(DAY_END_DT) FROM LOANS_DAYEND_BALANCE WHERE ACT_NUM = #ACT_NUM:VARCHAR# AND AMT != 0
    </mapped-statement>

    <mapped-statement name="getIntMaintenanceRateForAct" result-class="java.util.HashMap" >
        SELECT INTEREST,PENAL_INTEREST FROM LOANS_INT_MAINTENANCE WHERE PROD_ID = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getLoanCustName" result-class="java.util.HashMap" >
        SELECT CONTACT_PERSON FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getDepositNOLien" result-class="java.util.HashMap" >
        SELECT DEPOSIT_NO FROM DEPOSIT_LIEN WHERE LIEN_AC_NO = #LIEN_AC_NO:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getProdIdForLienDep" result-class="java.util.HashMap" >
        SELECT PROD_ID,DEPOSIT_SUB_NO,CLEAR_BALANCE,SHADOW_LIEN FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA 
        WHERE DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DSA.STATUS = 'LIEN'
<!--        SELECT PROD_ID,DSA.DEPOSIT_SUB_NO,CLEAR_BALANCE,SHADOW_LIEN FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,DEPOSIT_LIEN DL 
        WHERE DA.DEPOSIT_NO = #DEPOSIT_NO# AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DL.DEPOSIT_NO = DSA.DEPOSIT_NO AND 
        DL.STATUS != 'UNLIENED' AND DL.AUTHORIZE_STATUS = 'AUTHORIZED'-->
    </mapped-statement>
    
    <mapped-statement name="getProdIdForRenewLienDep" result-class="java.util.HashMap" >
        SELECT PROD_ID,DEPOSIT_SUB_NO,CLEAR_BALANCE,SHADOW_LIEN FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA 
        WHERE DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DSA.STATUS = 'LIEN'
    </mapped-statement>
    
    <mapped-statement name="getAccHeadForLienDep" result-class="java.util.HashMap" >
        SELECT ACCT_HEAD,BEHAVES_LIKE FROM DEPOSITS_PRODUCT WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>  
    
    <mapped-statement name="getLoanAccNoForDep" result-class="java.util.HashMap" >
<!--        SELECT DSA.STATUS,LIEN_AC_NO FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_LIEN DL 
        WHERE DSA.DEPOSIT_NO = #DEPOSIT_NO# AND DSA.DEPOSIT_NO = DL.DEPOSIT_NO -->
        SELECT LIEN_AC_NO FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_LIEN DL 
        WHERE DSA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DSA.DEPOSIT_NO = DL.DEPOSIT_NO
        AND (DL.STATUS = 'CREATED' OR DL.STATUS = 'MODIFIED')        
    </mapped-statement>  
    
    <mapped-statement name="getLoanAccNoForDeposit" result-class="java.util.HashMap" >
        SELECT DSA.STATUS,LIEN_AC_NO FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_LIEN DL 
        WHERE DSA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DSA.DEPOSIT_NO = DL.DEPOSIT_NO
        AND DL.AUTHORIZE_STATUS IS NULL AND DL.STATUS = 'UNLIENED'
<!--        SELECT LIEN_AC_NO FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_LIEN DL 
        WHERE DSA.DEPOSIT_NO = #DEPOSIT_NO# AND DSA.DEPOSIT_NO = DL.DEPOSIT_NO
        AND (DL.STATUS = 'CREATED' OR DL.STATUS = 'MODIFIED')        -->
    </mapped-statement>  
    
    <mapped-statement name="getDepositLienDet" result-class="java.util.HashMap" >
        SELECT * FROM DEPOSIT_LIEN WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>  
    
    <mapped-statement name="getCustIdForDeposits" result-class="java.util.HashMap" >
        SELECT CUST_ID,RENEWAL_COUNT,CREATED_DT FROM DEPOSIT_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>  
        
    <mapped-statement name="getCustNameForDeposit" result-class="java.util.HashMap" >
        SELECT get_cust_name(cust_id)  AS CUSTOMER_NAME FROM CUSTOMER WHERE CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>  

    <dynamic-mapped-statement name="getCashTransAuthDetails" result-class="java.util.HashMap" >
        SELECT * FROM CASH_TRANS WHERE  
        STATUS != 'DELETED' AND
        TRANS_DT = #CURR_DT:DATE# AND TRANS_TYPE = 'DEBIT' AND (LINK_BATCH_ID = #DEPOSIT_NO:VARCHAR#      
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="OR" property="DEPOSIT_NO">
                    ACT_NUM = #DEPOSIT_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            ) AND (AUTHORIZE_STATUS IS NULL
            <isParameterPresent>
                <isNotNull prepend="OR" property="AUTHORIZE_STATUS">
                    AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ) ORDER BY TRANS_ID       
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="getTransferTransAuthDetails" result-class="java.util.HashMap" >
        SELECT T.TRANS_ID, T.BATCH_ID,AH.AC_HD_DESC AS AC_HD_ID,T.ACT_NUM,T.INP_AMOUNT,T.
        INP_CURR,T.AMOUNT,T.TRANS_DT,T.TRANS_TYPE,T.INST_TYPE,T.
        INST_DT,T.INIT_TRANS_ID,T.INIT_CHANN_TYPE,T.PARTICULARS,T.STATUS,T.
        INSTRUMENT_NO1,T.INSTRUMENT_NO2,T.PROD_ID,T.AUTHORIZE_STATUS,T.AUTHORIZE_BY,T.
        AUTHORIZE_DT,T.AUTHORIZE_REMARKS,T.STATUS_BY,T.BRANCH_ID,T.STATUS_DT,T.
        PROD_TYPE,T.LINK_BATCH_ID,T.LINK_BATCH_DT,T.TRANS_MODE,T.INITIATED_BRANCH,T.
        LOAN_HIERARCHY,T.AUTHORIZE_STATUS_2,T.NARRATION,T.SHIFT,T.
        TRANS_ALL_ID,T.REC_MODE,T.SINGLE_TRANS_ID,T.AUTHORIZE_BY_2,T.GL_TRANS_ACT_NUM,T.TRANS_MOD_TYPE FROM TRANSFER_TRANS T
        JOIN AC_HD AH ON AH.AC_HD_ID=T.AC_HD_ID        
        WHERE T.STATUS != 'DELETED' AND
        T.TRANS_DT = #CURR_DT:DATE# AND 
        T.LINK_BATCH_ID = #DEPOSIT_NO:VARCHAR# AND
        T.PARTICULARS NOT LIKE '%Pending Interest%' AND
        (T.AUTHORIZE_STATUS IS NULL
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="OR" property="AUTHORIZE_STATUS">
                    T.AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ) ORDER BY T.TRANS_ID       
    </dynamic-mapped-statement>
    
    <mapped-statement name="getRenewalDepFromNewDep" result-class="java.util.HashMap" >
        SELECT RENEWAL_FROM_DEPOSIT FROM DEPOSIT_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
          
    <mapped-statement name="getPenalWithorWithout" result-class="java.util.HashMap" >
        SELECT PENAL_RATE FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getAccountHeadForLoansLien" result-class="java.util.HashMap" >
        SELECT BEHAVES_LIKE FROM LOANS_PRODUCT WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
      
    <mapped-statement name="getLoanDepNo" result-class="java.util.HashMap" >
        SELECT LIEN_AC_NO FROM DEPOSIT_LIEN WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getLoanAmountForLoans" result-class="java.util.HashMap" >
        SELECT LOAN_BALANCE_PRINCIPAL FROM LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
        <!--AND ACCT_STATUS = 'CLOSED' -->
    </mapped-statement>
        
    <mapped-statement name="getDepositInterestDetails" result-class="java.util.HashMap" >
        SELECT DECODE(DSA.LAST_INT_APPL_DT, NULL, DSA.DEPOSIT_DT, DSA.LAST_INT_APPL_DT) AS "START",
        DA.PROD_ID,INT_PROV_ACHD,INT_TYPE FROM DEPOSIT_SUB_ACINFO DSA, 
        DEPOSIT_ACINFO DA,DEPOSITS_PROD_ACHD DPA, DEPOSITS_PROD_INTPAY DPI
        WHERE DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DA.PROD_ID = DPA.PROD_ID AND 
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DPI.PROD_ID = DPA.PROD_ID
    </mapped-statement>
    
    <mapped-statement name="getInterestAmtDepInt" result-class="java.util.HashMap" >
        SELECT TOTAL_INT_BALANCE FROM DEPOSIT_INTEREST WHERE ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getAvailableBalanceForDep" result-class="java.util.HashMap" >
<!--        SELECT STATUS,AVAILABLE_BALANCE,TOTAL_BALANCE FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO =#DEPOSIT_NO#-->
        SELECT DL.STATUS,PROD_ID,DL.DEPOSIT_SUB_NO,AVAILABLE_BALANCE,CLEAR_BALANCE,LIEN_AC_NO,TOTAL_BALANCE,
        SHADOW_LIEN FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA,DEPOSIT_LIEN DL WHERE 
        DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DL.DEPOSIT_NO = DSA.DEPOSIT_NO  AND DSA.STATUS = 'LIEN'
        AND DSA.DEPOSIT_NO = DA.DEPOSIT_NO AND DL.STATUS != 'UNLIENED'
    </mapped-statement>
    
    <mapped-statement name="getCustomeridFoeDep" result-class="java.util.HashMap" >
        SELECT CUST_ID FROM DEPOSIT_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getCustomerAccNoFoeDep" result-class="java.util.HashMap" >
        SELECT ACT_NUM,PROD_ID,ACCT_NAME FROM ACT_MASTER WHERE CUST_ID = #CUST_ID:VARCHAR#
        <!--AND ACT_STATUS_ID!='CLOSED'-->
        AND ACT_STATUS_ID NOT IN ('CLOSED','DORMANT','IN_OPERATIVE')
        AND AUTHORIZATION_STATUS = 'AUTHORIZED'
    </mapped-statement>
    
    <mapped-statement name="getOperativeProdDesc" result-class="java.util.HashMap" >
        SELECT PROD_DESC,AC_HD_ID FROM OP_AC_PRODUCT WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getMaturityDateForDep" result-class="java.util.HashMap" >
        SELECT MATURITY_DT,DEPOSIT_DT,CUST_ID FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA
        WHERE DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.DEPOSIT_NO =#DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name="getDepRecurring" result-class="java.util.HashMap" >        
        SELECT TRANS_DT,DUE_DATE,AMOUNT FROM DEPOSIT_RECURRING WHERE DEPOSIT_NO_SUB = #DEPOSIT_NO:VARCHAR# 
        AND TRANS_DT IS NOT NULL AND DUE_DATE &gt;= #START_DT:DATE#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "SL_NO">
                    SL_NO = #SL_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY TRANS_DT
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="getDepNotProperRecurring" result-class="java.util.HashMap" >        
        SELECT TRANS_DT,DUE_DATE,AMOUNT FROM DEPOSIT_RECURRING WHERE DEPOSIT_NO_SUB = #DEPOSIT_NO:VARCHAR#
        AND TRANS_DT IS NOT NULL 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "SL_NO">
                    SL_NO >= #SL_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY DUE_DATE
    </dynamic-mapped-statement>
    
    <mapped-statement name="getDepTransactionRecurring" result-class="java.util.HashMap" >        
        SELECT TRANS_DT,DUE_DATE FROM DEPOSIT_RECURRING WHERE DEPOSIT_NO_SUB = #DEPOSIT_NO:VARCHAR# 
        AND TRANS_DT IS NOT NULL ORDER BY DUE_DATE
    </mapped-statement>
    
    <mapped-statement name="getDepTransRecurr" result-class="java.util.HashMap" >        
        SELECT TRANS_DT,DUE_DATE FROM DEPOSIT_RECURRING WHERE DEPOSIT_NO_SUB = #DEPOSIT_NO:VARCHAR# 
        AND DUE_DATE BETWEEN #DEPOSIT_DT:DATE# AND #CURR_DT:DATE#
        AND TRANS_DT IS NULL AND to_number(SL_NO) &gt;= #SL_NO:VARCHAR# ORDER BY DUE_DATE
    </mapped-statement>
    
    <mapped-statement name="getDepTransRecurrWithFullMonth" result-class="java.util.HashMap" >        
        SELECT TRANS_DT,DUE_DATE FROM DEPOSIT_RECURRING WHERE DEPOSIT_NO_SUB = #DEPOSIT_NO:VARCHAR# 
        AND DUE_DATE BETWEEN LAST_DAY(#DEPOSIT_DT:DATE#) AND LAST_DAY(#CURR_DT:DATE#)
        AND TRANS_DT IS NULL AND to_number(SL_NO) &gt;= #SL_NO:VARCHAR# ORDER BY DUE_DATE
    </mapped-statement>
        
    <mapped-statement name="getPenalIntRadioButton" result-class="java.util.HashMap" >        
        SELECT PENAL_INT FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getIntCrIntDrawn" result-class="java.util.HashMap" >        
<!--        SELECT TOTAL_INT_CREDIT,TOTAL_INT_DRAWN,INTEREST_AMT FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO#-->
        SELECT PROD_ID,CUST_ID,DEPOSIT_AMT,RATE_OF_INT,TOTAL_INT_CREDIT,TOTAL_INT_DRAWN,INTEREST_AMT FROM 
        DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA WHERE DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND
        DSA.DEPOSIT_NO = DA.DEPOSIT_NO
    </mapped-statement>
    
    <mapped-statement name="getDepositCustDet" result-class="java.util.HashMap" >    
        SELECT DA.DEPOSIT_NO,CUST_ID, PROD_ID, DEPOSIT_DT FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA 
        WHERE DA.DEPOSIT_NO = #DEPOSITNO:VARCHAR# AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
    </mapped-statement>

    <mapped-statement name="getFreezeAccNoForDep" result-class="java.util.HashMap" >    
        SELECT AMOUNT FROM DEPOSIT_FREEZE WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED' AND DEPOSIT_NO =#DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getSelectDelayedRate" result-class="java.util.HashMap" >        
        SELECT ROI,PENAL_INT FROM DEPOSIT_ROI_GROUP_TYPE_RATE WHERE ROI_GROUP_ID = #PROD_ID:VARCHAR# 
        AND #DEPOSIT_AMT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT
    </mapped-statement>
    
    <mapped-statement name="getPenalYesorNoDetails" result-class="java.util.HashMap" >        
        SELECT PENAL_INT,CURR_RATE_OF_INT,PENAL_RATE,PAYMENT_TYPE FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateClosingSameTotInd" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO_SAMENO SET 
        TOTAL_INT_CREDIT = #INT_AMT:NUMBER#,
        TOTAL_INT_DRAWN = #INT_AMT:NUMBER# 
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        AND PAYMENT_DAY = #PAYMENT_DAY:DATE#
    </mapped-statement>
    
<!--     <mapped-statement name="updateClosingOldRec">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        TOTAL_INT_CREDIT = NULL,
        TOTAL_INT_DRAWN = NULL 
        WHERE DEPOSIT_NO = #DEPOSIT_NO#
    </mapped-statement> -->
    
    <mapped-statement name="updateClosingTotInd" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        TOTAL_INT_CREDIT = NULL,
        TOTAL_INT_DRAWN = NULL,
        LST_PROV_DT = NULL,
        LAST_INT_APPL_DT = NULL,
        NEXT_INT_APPL_DT = NULL
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateClosingTotIndAmount" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        TOTAL_INT_DRAWN = #INT_AMT:NUMBER# 
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        AND STATUS != 'DELETED'
<!--        AND TOTAL_BALANCE >0 -->
    </mapped-statement>
    
    <mapped-statement name="updateClosingBalIntAmount" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        TOTAL_INT_CREDIT = #INT_AMT:NUMBER# 
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        AND STATUS != 'DELETED'
<!--        AND TOTAL_BALANCE >0 -->
    </mapped-statement>
    
    <mapped-statement name="getSelectDepositInt" result-class="java.util.HashMap" >        
        SELECT ACT_NUM,INT_AMT,TRANS_LOG_ID FROM DEPOSIT_INTEREST WHERE ACT_NUM = #DEPOSIT_NO:VARCHAR# 
    </mapped-statement>
    
    <mapped-statement name="getUnlienedDeposits" result-class="java.util.HashMap" >        
<!--        SELECT STATUS,LIEN_AC_NO FROM DEPOSIT_LIEN WHERE DEPOSIT_NO = #DEPOSIT_NO# -->
        SELECT DSA.STATUS,LIEN_AC_NO FROM DEPOSIT_LIEN DL,DEPOSIT_SUB_ACINFO DSA 
        WHERE DSA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DSA.DEPOSIT_NO=DL.DEPOSIT_NO AND  DL.AUTHORIZE_STATUS IS NULL 
        AND DSA.STATUS = 'LIEN' AND DL.STATUS = 'UNLIENED'
    </mapped-statement>
    
<!--    <mapped-statement name="getLienDeposits" result-class="java.util.HashMap" >        
        SELECT STATUS FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO# 
    </mapped-statement> -->
    
    <mapped-statement name="getSelectLTDDeposits" result-map="getDepositAccountsResult" >       
        SELECT distinct DSA.DEPOSIT_NO,DA.CUST_ID, DA.PROD_ID, 
        get_cust_name(c.cust_id) AS CUSTOMER_NAME, STREET AS HOUSE_NAME,
        DSA.MATURITY_DT,DSA.MATURITY_AMT,DA.OPENING_MODE FROM DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,CUST_ADDR CA,
        DEPOSIT_ACINFO DA, DEPOSIT_LIEN DL,LOANS_FACILITY_DETAILS LFD WHERE DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        AND DA.CUST_ID = C.CUST_ID AND DSA.DEPOSIT_NO = DL.DEPOSIT_NO AND DL.LIEN_AC_NO = LFD.ACCT_NUM
        AND DEPOSIT_STATUS != 'CL' AND DEPOSIT_STATUS != 'CP' AND DSA.ACCT_STATUS != 'CLOSED' 
        AND DSA.ACCT_STATUS != 'MATURED' AND  DL.STATUS NOT IN('UNLIENED','DELETED') AND
        CA.CUST_ID=C.CUST_ID AND CA.ADDR_TYPE= C.COMM_ADDR_TYPE AND
        DL.AUTHORIZE_STATUS = 'AUTHORIZED' AND LFD.STATUS != 'CLOSED' 
        AND DSA.TOTAL_BALANCE >0 AND DA.PROD_ID = #PRODID:VARCHAR# AND (C.AUTHORIZE_STATUS='AUTHORIZED')  
        AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR# AND(C.STATUS!='DELETED' OR C.STATUS IS NULL) 
    </mapped-statement>
    
    <mapped-statement name="updateDeleteDepositActClosing" inline-parameters="true">
        UPDATE ACT_CLOSING SET STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR# WHERE ACT_NUM = #ACT_NUM:VARCHAR# 
        AND AUTHORIZE_STATUS = NULL 
    </mapped-statement>

    <mapped-statement name="getInstallTypeHead" result-class="java.util.HashMap" >        
        SELECT INSTALL_TYPE FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND ACCT_STATUS = 'MATURED'
    </mapped-statement>     

    <dynamic-mapped-statement name="getDepositCashAuthorizeStatus" result-class="java.util.HashMap" >        
        SELECT AUTHORIZE_STATUS,AUTHORIZE_BY FROM CASH_TRANS WHERE 
        (LINK_BATCH_ID = #DEPOSIT_NO:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="OR" property="DEPOSIT_NO">
                    ACT_NUM = #DEPOSIT_NO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            )
        </dynamic>
    </dynamic-mapped-statement>
    
    <mapped-statement name="getDepositAuthorizeStatus" result-class="java.util.HashMap" >        
        SELECT STATUS,AUTHORIZE_STATUS,AUTHORIZE_USER FROM ACT_CLOSING WHERE ACT_NUM = #ACCOUNTNO:VARCHAR# AND
        STATUS_DT IN (SELECT MAX(STATUS_DT) FROM ACT_CLOSING WHERE ACT_NUM = #ACCOUNTNO:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name="periodRunMap" result-class="java.util.HashMap" >        
        SELECT FLOOR(MONTHS_BETWEEN (TO_DATE(TO_CHAR(cast(#TO_DATE# as DATE),'DD-MON-YYYY')), TO_DATE(TO_CHAR(cast(#FROM_DATE# as DATE),'DD-MON-YYYY')))) AS "NO_OF_MONTHS",
        TO_DATE(TO_CHAR(cast(#TO_DATE# as DATE),'DD-MON-YYYY'))-ADD_MONTHS (TO_DATE(TO_CHAR(cast(#FROM_DATE# as DATE),'DD-MON-YYYY')),FLOOR(MONTHS_BETWEEN (TO_DATE(TO_CHAR(cast(#TO_DATE# as DATE),'DD-MON-YYYY')), TO_DATE(TO_CHAR(cast(#FROM_DATE# as DATE),'DD-MON-YYYY'))))) "DAYS", 
        TO_DATE (TO_CHAR(cast(#TO_DATE# as DATE),'DD-MON-YYYY'))-TO_DATE (TO_CHAR(cast(#FROM_DATE# as DATE),'DD-MON-YYYY')) AS "TOTAL_DIFF_DAYSAS"  FROM DUAL
    </mapped-statement>
    
    <mapped-statement name="periodRunMap11" result-class="java.util.HashMap" >        
        SELECT FLOOR(MONTHS_BETWEEN (#TO_DATE#, #FROM_DATE#)) AS NO_OF_MONTHS,
        TO_DATE(#TO_DATE#)-ADD_MONTHS (#FROM_DATE#,FLOOR(MONTHS_BETWEEN (#TO_DATE#, #FROM_DATE#))) AS DAYS FROM DUAL
    </mapped-statement>
    
    <mapped-statement name="getTransDtFromDepRecurr" result-class="java.util.HashMap" >        
        SELECT DUE_DATE,TRANS_DT FROM DEPOSIT_RECURRING WHERE 
        DEPOSIT_NO_SUB = #DEPOSIT_NO:VARCHAR# AND TRANS_DT = #TRANS_DT:DATE#
        ORDER BY DUE_DATE
    </mapped-statement>

    <mapped-statement name="getRemitIssueTransMap" result-class="java.util.HashMap" >        
        SELECT PRODUCT_TYPE FROM REMIT_ISSUE_TRANS WHERE BATCH_ID = #DEP_NO:VARCHAR#
        AND PRODUCT_TYPE = 'RM'
    </mapped-statement>
    
    <mapped-statement name="getFlexiAccountNo" result-class="java.util.HashMap" >        
        SELECT FLEXI_ACT_NUM,TOTAL_BALANCE FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA WHERE 
        DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND FLEXI_ACT_NUM IS NOT NULL
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
    </mapped-statement>
    
    <mapped-statement name="getFlexiBalanceDeposit" result-class="java.util.HashMap" >        
        SELECT ACT_NUM,NVL(MIN_BAL1_FLEXI,0) AS "MIN_BAL1", NVL(MIN_BAL2_FLEXI,0) AS "MIN_BAL2"
        FROM ACT_PARAM_DETAIL WHERE ACT_NUM = #FLEXI_ACT_NUM:VARCHAR# AND FLEXI = 'Y' 
    </mapped-statement>
    
    <mapped-statement name="updateFlexiAmountForSBAc" result-class="java.util.HashMap" >        
        UPDATE ACT_MASTER SET FLEXI_DEPOSIT_AMT = FLEXI_DEPOSIT_AMT - #TOTAL_BALANCE:NUMBER# 
        WHERE ACT_NUM = #FLEXI_ACT_NUM:VARCHAR#       
    </mapped-statement>

    <mapped-statement name="updateFlexiAmountForDeposits" result-class="java.util.HashMap" >        
        UPDATE DEPOSIT_SUB_ACINFO SET AVAILABLE_BALANCE = AVAILABLE_BALANCE + #BALANCE# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#      
    </mapped-statement>
    
    <mapped-statement name="updateTransferOutDeposits" result-class="java.util.HashMap" >        
        UPDATE DEPOSIT_TRANSFER_OUT SET AUTHORIZE_STATUS = #AUTHORIZE_STATUS#,AUTHORIZE_DT = #AUTHORIZE_DT:DATE#,
        AUTHORIZE_BY = #AUTHORIZE_BY:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO# AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>
    
    <mapped-statement name="updateTransferOutRejectionDeposits" result-class="java.util.HashMap">
        DELETE FROM DEPOSIT_TRANSFER_OUT WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>
  
    <mapped-statement name="insertTransferOutDeposits" result-class="java.util.HashMap" >        
        INSERT INTO DEPOSIT_TRANSFER_OUT (
        DEPOSIT_NO,TRANS_DT,TRANS_AMT,STATUS,STATUS_BY,STATUS_DT,
        CREATED_BY,CREATED_DT,TRANS_BRANCH_CODE,INTER_TRANS_NO,TRANS_ID,CURRENT_BRANCH,TRANS_OUT_FLAG)
        VALUES(
        #DEPOSIT_NO:VARCHAR#,#TRANS_DT:DATE#,#TRANS_AMT:NUMBER#,#STATUS:VARCHAR#,#STATUS_BY:VARCHAR#,#STATUS_DT:DATE#,#CREATED_BY:VARCHAR#,
        #CREATED_DT:DATE#,#TRANS_BRANCH_CODE:VARCHAR#,#INTER_TRANS_NO:VARCHAR#,#TRANS_ID:VARCHAR#,#CURRENT_BRANCH:VARCHAR#,#TRANS_OUT_FLAG:VARCHAR#)
    </mapped-statement>
    
    <dynamic-mapped-statement name="getTransferOutDeposit" result-class="java.util.HashMap" >        
        SELECT DEPOSIT_NO,TRANS_BRANCH_CODE,BM.BRANCH_NAME FROM DEPOSIT_TRANSFER_OUT DTO, BRANCH_MASTER BM 
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND BM.BRANCH_CODE = DTO.TRANS_BRANCH_CODE AND (AUTHORIZE_STATUS IS NULL
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "OR" property = "AUTHORIZE_STATUS">
                    AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            )
        </dynamic>
    </dynamic-mapped-statement>    
    
    <mapped-statement name="updateTransferOutFlag" result-class="java.util.HashMap" >        
        UPDATE DEPOSIT_ACINFO SET TRANS_OUT = #TRANS_OUT:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getTransferOutDepositFlag" result-class="java.util.HashMap" >        
        SELECT TRANS_OUT,PAYMENT_TYPE,PENAL_INT FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA WHERE 
        DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
    </mapped-statement>    
    
    <mapped-statement name="getTransOutDepositDetails" result-class="java.util.HashMap" >
        SELECT TRANS_ID,BATCH_ID FROM TRANSFER_TRANS WHERE LINK_BATCH_ID = #DEPOSIT_NO:VARCHAR# 
    </mapped-statement>
 	<mapped-statement name="getSelectWeeklyDepositDayEndBal" result-class="java.util.HashMap" >        
         SELECT ACT_NUM,AMT,DAB.DAY_END_DT FROM DEPOSIT_DAYEND_BALANCE  dab WHERE
         ACT_NUM =#ACT_NUM:VARCHAR# and DAB.DAY_END_DT in (select max( DAY_END_DT) from 
         DEPOSIT_DAYEND_BALANCE db where  db.DAY_END_DT &lt;= #DAY_END_DT:DATE# and db.ACT_NUM = dab.ACT_NUM)
    </mapped-statement>
    <mapped-statement name="getSelectDailyDepositDayEndBal" result-class="java.util.HashMap" >        
      SELECT ACT_NUM,AMT FROM DEPOSIT_DAYEND_BALANCE WHERE
      DAY_END_DT = #DAY_END_DT:DATE# AND ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    <dynamic-mapped-statement name="getDailyBalanceDD" result-class="java.util.HashMap">
        <!--  SELECT MIN(AMT) AS AMT FROM DEPOSIT_DAYEND_BALANCE WHERE
        PROD_ID = #PROD_ID:VARCHAR# AND ACT_NUM = #ACT_NUM:VARCHAR# AND
        <dynamic>
            (TO_CHAR(DAY_END_DT, 'YYYY-MM') &gt;= TO_CHAR(#START_DT#, 'YYYY-MM')
            AND                                                                     
            TO_CHAR(DAY_END_DT, 'YYYY-MM') &lt;= TO_CHAR(ADD_MONTHS(#TODAY_DT#,#ADD_MONTHS#), 'YYYY-MM'))
            AND TO_CHAR(DAY_END_DT, 'DD') BETWEEN 10 AND 31
            GROUP BY TO_CHAR(DAY_END_DT, 'YYYY-MM')
        </dynamic>-->
        <!--SELECT amt
        FROM (SELECT   MIN (amt) amt
        FROM (SELECT day_end_dt,
        (SELECT amt
        FROM deposit_dayend_balance ddb
        WHERE prod_id = #PROD_ID:VARCHAR#
        AND act_num = #ACT_NUM:VARCHAR#
        AND day_end_dt =
        (SELECT MAX (day_end_dt)
        FROM deposit_dayend_balance
        WHERE prod_id = ddb.prod_id
        AND act_num = ddb.act_num
        AND day_end_dt &lt;= a.day_end_dt))
        AS amt
        FROM (SELECT     TO_DATE
        (  TO_NUMBER (TO_CHAR (#START_DT:DATE#, 'J'))
        + LEVEL
        - 1,
        'J'
        ) AS day_end_dt
        FROM DUAL
        CONNECT BY LEVEL &lt;=
        TO_NUMBER (TO_CHAR (#TODAY_DT:DATE#, 'J'))
        - TO_NUMBER (TO_CHAR (#START_DT:DATE#, 'J'))
        + 1) a)
        WHERE (    TO_CHAR (day_end_dt, 'YYYY-MM') &gt; TO_CHAR (#START_DT:DATE#, 'YYYY-MM')
        AND TO_CHAR (day_end_dt, 'YYYY-MM') &lt;=
        TO_CHAR (ADD_MONTHS (#TODAY_DT:DATE#, #ADD_MONTHS#), 'YYYY-MM')
        )
        AND TO_CHAR (day_end_dt, 'DD') BETWEEN 10 AND 31
        GROUP BY TO_CHAR (day_end_dt, 'YYYY-MM'))
        WHERE amt &gt; 0     -->
        
                                    
        WITH date_range AS (
        SELECT generate_series(
        #START_DT:DATE#,
        #TODAY_DT:DATE#,
        INTERVAL '1 day'
        ) AS day_end_dt
        ),
        derived_balances AS (
        SELECT
        dr.day_end_dt,
        (
        SELECT amt
        FROM deposit_dayend_balance ddb
        WHERE prod_id = #PROD_ID:VARCHAR#
        AND act_num = #ACT_NUM:VARCHAR#
        AND day_end_dt = (
        SELECT MAX(day_end_dt)
        FROM deposit_dayend_balance
        WHERE prod_id = ddb.prod_id
        AND act_num = ddb.act_num
        AND day_end_dt &lt;= dr.day_end_dt
        )
        LIMIT 1
        ) AS amt
        FROM date_range dr
        ),
        filtered_data AS (
        SELECT
        TO_CHAR(day_end_dt, 'YYYY-MM') AS ym,
        MIN(amt) AS amt
        FROM derived_balances
        WHERE TO_CHAR(day_end_dt, 'YYYY-MM') &gt; TO_CHAR( #START_DT:DATE#, 'YYYY-MM')
        AND TO_CHAR(day_end_dt, 'YYYY-MM') &lt;= TO_CHAR((cast (#TODAY_DT# as date) - INTERVAL '1 month'), 'YYYY-MM')
        AND EXTRACT(DAY FROM day_end_dt) BETWEEN 10 AND 31
        GROUP BY TO_CHAR(day_end_dt, 'YYYY-MM')
        )
        SELECT amt
        FROM filtered_data
        WHERE amt &gt; 0                                                           
                                                                                                                                                                                                                                                                                                      
    </dynamic-mapped-statement>
    
    <mapped-statement name="getSelectDailyDepositWeekendTrans" result-class="java.util.HashMap" >        
        SELECT SUM(AMOUNT) AS AMOUNT FROM DAILY_DEPOSIT_TRANS WHERE TRN_DT BETWEEN #TRN_DT:DATE# AND #LAST_TRN_DT:DATE# AND 
        ACC_NUM = #ACC_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getRemitIssueAuthDetails" result-class="java.util.HashMap" >        
        SELECT VARIABLE_NO FROM REMIT_ISSUE WHERE REMARKS = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name ="getTotalIntBalanceForDepositSameNo" result-class = "java.util.HashMap">
        SELECT TOT_INT_AMT,TOTAL_INT_CREDIT,TOTAL_INT_DRAWN FROM DEPOSIT_SUB_ACINFO_SAMENO 
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND TOTAL_BALANCE >0 AND 
        (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS IS NULL) AND
        SL_NO IN(SELECT MAX(SL_NO) FROM DEPOSIT_SUB_ACINFO_SAMENO  WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#)
        ORDER BY TO_NUMBER(DEPOSIT_SUB_NO)                    
    </mapped-statement>     
    
    <mapped-statement name="getDayendBalanceDeposits" result-class="java.util.HashMap" >        
        SELECT * FROM DEPOSIT_DAYEND_BALANCE WHERE ACT_NUM = #ACT_NUM:VARCHAR# AND 
        DAY_END_DT = #DAY_END_DT:DATE#
    </mapped-statement>     
            
    <mapped-statement name = "getSelectOverdueInterestForRenewal" result-class="java.util.HashMap">
        SELECT SB_INT_AMT,SB_PERIOD_RUN,PAYMENT_DAY FROM DEPOSITS_PROD_RENEWAL DPR,DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO_SAMENO DSAS WHERE
        DPR.PROD_ID = DA.PROD_ID AND DA.RENEWAL_FROM_DEPOSIT = DSAS.DEPOSIT_NO AND DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND SL_NO IN(
        SELECT MAX(SL_NO) FROM DEPOSIT_SUB_ACINFO_SAMENO WHERE DA.RENEWAL_FROM_DEPOSIT = DEPOSIT_NO AND FLEXI_STATUS = 'NR')
    </mapped-statement>

    <mapped-statement name="getLockerDetails" result-class="java.util.HashMap" >        
        SELECT * FROM LOCKER_MASTER WHERE DEPOSIT_LINK_NO = #ACT_NUM:VARCHAR# AND STATUS!='DELETED' AND
        AUTHORIZATION_STATUS = 'AUTHORIZED' AND LOCKER_STATUS_ID != 'CLOSED'
    </mapped-statement>     
    
    <dynamic-mapped-statement name="getRoiDtFrFloatingWithoutPeriod" result-class="java.util.HashMap">
        select #DEPOSIT_DT:DATE# as roi_dt from deposit_sub_acinfo where deposit_no=#DEPOSITNO:VARCHAR#
        union
        SELECT DISTINCT ROI_DATE
        FROM DEPOSIT_ROI_GROUP DRG, DEPOSIT_ROI_GROUP_CAT DRGC, DEPOSIT_ROI_GROUP_PROD DRGP,
        DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR 
        WHERE DRG.ROI_GROUP_ID = DRGC.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGP.ROI_GROUP_ID AND
        DRG.ROI_GROUP_ID = DRGTR.ROI_GROUP_ID AND
        DRG.PRODUCT_TYPE = #PRODUCT_TYPE:VARCHAR# AND
        DRGP.PROD_ID = #PRODUCT_ID:VARCHAR# AND 
        DRGC.CATEGORY_ID = #CATEGORY_ID:VARCHAR# AND
        #MATURITY_AMT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT AND
        ROI_DATE BETWEEN #DEPOSIT_DT:DATE# AND #CLOSING_DT:DATE#-1
        AND DRG.STATUS != 'DELETED'   AND DRGC.STATUS != 'DELETED'  AND DRGP.STATUS != 'DELETED'  
        AND DRGTR.STATUS != 'DELETED' AND DRG.AUTHORIZE_STATUS = 'AUTHORIZED'
        and DRGTR.INT_TYPE='C'
            <!--dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "PERIOD" >
                    (#PERIOD# BETWEEN FROM_PERIOD AND TO_PERIOD)
                </isNotEmpty>
            </isParameterPresent>
            </dynamic-->
        UNION
        select #CLOSING_DT:DATE# as roi_dt from deposit_sub_acinfo where deposit_no=#DEPOSITNO:VARCHAR#
        ORDER BY 1  
    </dynamic-mapped-statement>    
        
    <mapped-statement name="getSeniorDetails" result-class="java.util.HashMap" >        
        SELECT CATEGORY,DEATH_DT FROM DEPOSIT_ACINFO DA,DEATH_MARKING DM WHERE DA.CUST_ID=DM.CUST_ID
        AND DA.CUST_ID=#CUST_ID:VARCHAR# AND DA.DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# AND
        DA.STATUS!='DELETED' AND DM.STATUS!='DELETED' AND DA.AUTHORIZE_STATUS!='REJECTED' 
        AND DM.AUTHORIZE_STATUS!='REJECTED'
    </mapped-statement>      
          
    <mapped-statement name="getIrregularRDApply" result-class="java.util.HashMap" >
        SELECT DPR.IRREGULAR_RD_APPLY,RD_IRREGULAR_INSTALLMENTS_DUE,RD_NATURE,DPR.RD_CLOSING_SB_DEPOSIT_ROI,
        DP.FULLAMT_ON_MATURE_CLOSURE
        FROM DEPOSITS_PROD_RD DPR,DEPOSITS_PRODUCT DP WHERE DPR.PROD_ID=#PROD_ID:VARCHAR# AND 
        DP.STATUS!='DELETED' AND DP.AUTHORIZE_STATUS='AUTHORIZED' AND DP.PROD_ID=DPR.PROD_ID
    </mapped-statement>
        
    <mapped-statement name="getRdPaidInstllments" result-class="java.util.HashMap" >
        select TOTAL_INSTALLMENTS,TOTAL_INSTALL_PAID,DEPOSIT_AMT,DEPOSIT_PERIOD_WK,CLEAR_BALANCE FROM DEPOSIT_SUB_ACINFO 
        WHERE DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# AND STATUS!='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED'
    </mapped-statement>   
        
    <mapped-statement name="getSBrateDetails" result-class="java.util.HashMap" >

        SELECT FROM_PERIOD,TO_PERIOD,ROI,PENAL_INT 
        FROM DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR, DEPOSIT_ROI_GROUP_CAT DRGC, 
        DEPOSIT_ACINFO DA, DEPOSIT_ROI_GROUP DRG, DEPOSIT_ROI_GROUP_PROD DRGP 
        WHERE DA.CUST_ID =#CUSTID:VARCHAR# AND DA.DEPOSIT_NO=#DEPOSITNO:VARCHAR# AND DA.CATEGORY=DRGC.CATEGORY_ID AND 
        DRGTR.ROI_GROUP_ID=DRGP.ROI_GROUP_ID AND DRGP.PROD_ID in (select PROD_ID FROM OP_AC_PRODUCT WHERE BEHAVIOR='SB'
        AND STATUS!='DELETED' AND AUTHORIZED_STATUS='AUTHORIZED') AND DRGP.ROI_GROUP_ID=DRGC.ROI_GROUP_ID AND 
        DRG.PRODUCT_TYPE = 'OA' AND DRGC.ROI_GROUP_ID=DRG.ROI_GROUP_ID AND 
        ((#DEPOSIT_DT:TIMESTAMP# BETWEEN DRGTR.ROI_DATE AND DRGTR.ROI_END_DATE) OR 
        (DRGTR.ROI_DATE &lt;= #DEPOSIT_DT:TIMESTAMP# AND DRGTR.ROI_END_DATE IS NULL))
        AND DRG.STATUS!='DELETED' AND DRGP.STATUS!='DELETED' AND DRGC.STATUS!='DELETED' AND DRGTR.STATUS!='DELETED'
        AND #PERIOD# BETWEEN FROM_PERIOD AND TO_PERIOD
    </mapped-statement> 
     
     <mapped-statement name="getPrematureCloserApply" result-class="java.util.HashMap" >
	 	SELECT DPI.PREMATURE_CLOSURE_APPLY,DPI.NORMAL_RATE_FOR_SENIOR_CITIZEN,DPI.SENIOR_BENIFIT_RATE FROM  DEPOSITS_PROD_INTPAY DPI,DEPOSITS_PRODUCT DP WHERE DPI.PROD_ID=#PROD_ID:VARCHAR# AND
	 	DP.STATUS!='DELETED' AND DP.AUTHORIZE_STATUS='AUTHORIZED' AND DP.PROD_ID=DPI.PROD_ID
    </mapped-statement>
        
    <mapped-statement name="getExtDetailsForPenalty" result-class="java.util.HashMap" >
        SELECT EXTENSION_PENALTY,DSA.MATURITY_DT FROM EXTENSION_TEMP_DETAILS ETD,DEPOSIT_SUB_ACINFO DSA WHERE ETD.OLD_DEPOSIT_NO=DSA.DEPOSIT_NO 
        AND ETD.EXTENSION_DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# AND ETD.EXTENSION_STATUS='COMPLETED' AND DSA.ACCT_STATUS='CLOSED'
    </mapped-statement>
        
    <mapped-statement name="getChangedProductId" result-class="java.util.HashMap" >
        SELECT FIXED_DEPOSIT_PRODUCT,PREMATURE_CLOSURE_APPLY FROM DEPOSITS_PROD_INTPAY DPI ,DEPOSITS_PRODUCT DP WHERE DPI.PROD_ID=DP.PROD_ID AND BEHAVES_LIKE='CUMMULATIVE' AND DP.PROD_ID=#PRODID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getPrematureRateDetails" result-class="java.util.HashMap" >
        select nvl(NORMAL_RATE_FOR_SENIOR_CITIZEN,'N') as NORMAL_RATE_FOR_SENIOR_CITIZEN,MONTHS_UPTO_NORMAL_RATE
        from DEPOSITS_PROD_INTPAY a join DEPOSITS_PRODUCT b
        on a.PROD_ID=b.PROD_ID where b.BEHAVES_LIKE='FIXED' and a.PROD_ID=#PRODID:VARCHAR#
    </mapped-statement>
          
    <mapped-statement name="creditDrawnHistory">
        UPDATE DEPOSIT_SUB_ACINFO SET EXISTING_TOTAL_INT_CREDIT = cast(#TOTAL_INT_CREDIT# as numeric), EXISTING_TOTAL_INT_DRAWN = cast(#TOTAL_INT_DRAWN# as numeric) WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="creditDrawnHistorySameNO">
        UPDATE DEPOSIT_SUB_ACINFO_SAMENO SET EXISTING_TOTAL_INT_CREDIT = cast(#TOTAL_INT_CREDIT# as numeric), EXISTING_TOTAL_INT_DRAWN = cast(#TOTAL_INT_DRAWN# as numeric) WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getExistingHistoryDetailsofCRDR" result-class="java.util.HashMap" >
        SELECT EXISTING_TOTAL_INT_CREDIT,EXISTING_TOTAL_INT_DRAWN,TEMP_CLEAR_BALANCE,TEMP_AVAILABLE_BALANCE,TEMP_TOTAL_BALANCE,TEMP_RENEWED_DT FROM DEPOSIT_SUB_ACINFO
        WHERE DEPOSIT_NO = #ACCOUNTNO:VARCHAR# AND ACCT_STATUS = 'CLOSED' AND AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
    
 <!-- three parameters CLEAR_BALANCE, AVAILABLE_BALANCE and TOTAL_BALANCE added by Ajay Sharma for mantis ID 9086 on dated 14-May-2014-->   
    <mapped-statement name="updateRollbackCRDRDetails" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET TOTAL_INT_CREDIT = #TOTAL_INT_CREDIT:NUMBER#,TOTAL_INT_DRAWN = #TOTAL_INT_DRAWN:NUMBER#, 
        CLEAR_BALANCE = #CLEAR_BALANCE:NUMBER#,AVAILABLE_BALANCE = #AVAILABLE_BALANCE:NUMBER#,TOTAL_BALANCE = #TOTAL_BALANCE:NUMBER#
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getProductDataOAForSB" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC FROM OP_AC_PRODUCT  WHERE STATUS != 'DELETED'  AND BEHAVIOR='SB'  AND AUTHORIZED_STATUS = 'AUTHORIZED' 
    </mapped-statement>
    
     <mapped-statement name="getLoanAccountDetailsForClosing" result-class="java.util.LinkedHashMap" >
       SELECT LIEN_AMOUNT,LIEN_AC_NO,LP.BEHAVES_LIKE,DP.BEHAVES_LIKE DEPOSIT_BEHAVES_LIKE,DEPOSIT_AMT,
        TOTAL_BALANCE,LIEN_PROD_ID FROM DEPOSIT_LIEN DL,DEPOSIT_ACINFO DA,LOANS_PRODUCT LP,DEPOSITS_PRODUCT DP,
        DEPOSIT_SUB_ACINFO DSA WHERE DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.PROD_ID = DP.PROD_ID AND 
        DSA.DEPOSIT_NO = DL.DEPOSIT_NO AND DSA.DEPOSIT_NO =#DEPOSIT_NO:VARCHAR# AND LIEN_AC_HD = LP.ACCT_HEAD AND 
        LIEN_PROD_ID = LP.PROD_ID AND DSA.STATUS='LIEN' AND DL.STATUS != 'UNLIENED'
    </mapped-statement>
    <mapped-statement name="getDepositClosingLoanInterestDetails" result-class="java.util.HashMap" >
        SELECT DISTINCT FROM_PERIOD,TO_PERIOD,ROI,PENAL_INT 
        FROM DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR, DEPOSIT_ROI_GROUP_CAT DRGC, 
        DEPOSIT_ACINFO DA, DEPOSIT_ROI_GROUP DRG, DEPOSIT_ROI_GROUP_PROD DRGP 
        WHERE DA.CUST_ID =#CUSTID:VARCHAR# AND DA.DEPOSIT_NO=#DEPOSITNO:VARCHAR# AND DA.CATEGORY=DRGC.CATEGORY_ID AND 
        DRGTR.ROI_GROUP_ID=DRGP.ROI_GROUP_ID AND DRGP.PROD_ID=#PRODID:VARCHAR# AND DRGP.ROI_GROUP_ID=DRGC.ROI_GROUP_ID AND 
        DRG.PRODUCT_TYPE = 'TL' AND DRGC.ROI_GROUP_ID=DRG.ROI_GROUP_ID AND 
        ((#DEPOSIT_DT:TIMESTAMP# BETWEEN DRGTR.ROI_DATE AND DRGTR.ROI_END_DATE) OR 
        (DRGTR.ROI_DATE &lt;= #DEPOSIT_DT:TIMESTAMP# AND DRGTR.ROI_END_DATE IS NULL))
        AND DRG.STATUS!='DELETED' AND DRGP.STATUS!='DELETED' AND DRGC.STATUS!='DELETED' AND DRGTR.STATUS!='DELETED'
        AND #PERIOD# BETWEEN FROM_PERIOD AND TO_PERIOD
    </mapped-statement>
    <dynamic-mapped-statement name="getMultipleAccountData" result-class="java.util.LinkedHashMap">
        SELECT   da.deposit_no  AS "ACT_NUM",
         da.cust_id AS cust_id,
         TRIM (get_cust_name(c.cust_id)) AS cname,
         branch_id,
         deposit_dt, maturity_dt, intpay_freq, rate_of_int, deposit_amt,
         DECODE (dsa.lst_prov_dt,
                 NULL, deposit_dt,
                 lst_prov_dt
                ) AS lst_prov_dt,
         DECODE (dsa.last_int_appl_dt,
                 NULL, deposit_dt,
                 last_int_appl_dt
                ) AS last_int_appl_dt,
         NVL (dsa.total_int_credit, 0) AS total_int_credit,
         NVL (dsa.total_int_debit, 0) AS total_int_debit,
         dsa.int_pay_prod_type, dsa.int_pay_prod_id, dsa.int_pay_acc_no,
         dsa.intpay_mode,dsa.status
    FROM deposit_sub_acinfo dsa, deposit_acinfo da, customer c
   WHERE   da.deposit_no = dsa.deposit_no
     AND da.cust_id = c.cust_id
     AND dsa.intpay_freq != 0 AND  (da.STATUS!='DELETED'  or da.STATUS is null) and 
        (da.AUTHORIZE_STATUS='AUTHORIZED') and 
        (dsa.STATUS not in ('DELETED','CLOSED') or dsa.status is null) and 
        (dsa.AUTHORIZE_STATUS='AUTHORIZED')   
         <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "BRANCH_CODE" >
                    DA.BRANCH_ID= #BRANCH_CODE:VARCHAR#
                </isNotEmpty>
            </isParameterPresent>

            <isParameterPresent>
                <isNotNull prepend="AND" property="ACT_FROM">
                    DA.DEPOSIT_NO &gt;= #ACT_FROM:VARCHAR#
                </isNotNull>
            </isParameterPresent>

            <isParameterPresent>
                <isNotNull prepend="AND" property="ACT_TO">
                    DA.DEPOSIT_NO &lt;= #ACT_TO:VARCHAR# 
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="ACT_NO_LIST">
                    DA.DEPOSIT_NO  IN($ACT_NO_LIST$)
                </isNotNull>
            </isParameterPresent>

            <isParameterPresent>
                <isNotNull prepend="AND" property="CUST_ID">
                    DA.CUST_ID = #CUST_ID:VARCHAR# 
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="INTPAY_MODE">
                    DSA.INTPAY_MODE= #INTPAY_MODE:VARCHAR# 
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY DA.DEPOSIT_NO
    </dynamic-mapped-statement>
 <mapped-statement name="getRDNormalClosingInterest" result-class="java.util.HashMap" >
     SELECT SUM((DR.AMOUNT*DRGTR.ROI*(#CURR_DT:DATE#-DR.TRANS_DT))/36500) AS INT_AMT 
    FROM DEPOSIT_ROI_GROUP_TYPE_RATE drgtr
         JOIN DEPOSIT_ROI_GROUP_CAT drgc ON DRGC.ROI_GROUP_ID=DRGTR.ROI_GROUP_ID
         JOIN DEPOSIT_ROI_GROUP_PROD drgp ON DRGP.ROI_GROUP_ID=DRGC.ROI_GROUP_ID
         JOIN OP_AC_PRODUCT OAP ON OAP.PROD_ID= DRGP.PROD_ID
         JOIN DEPOSIT_ROI_GROUP drg ON DRG.ROI_GROUP_ID=DRGC.ROI_GROUP_ID
         JOIN DEPOSIT_ACINFO DA ON DRGC.CATEGORY_ID=DA.CATEGORY AND DRGC.ROI_GROUP_ID=DRG.ROI_GROUP_ID
         JOIN DEPOSIT_RECURRING DR ON DR.DEPOSIT_NO_SUB = DA.DEPOSIT_NO||'_1'
    WHERE OAP.BEHAVIOR='SB' AND OAP.STATUS!='DELETED' AND OAP.AUTHORIZED_STATUS='AUTHORIZED'
          AND DRG.PRODUCT_TYPE='OA' AND DA.DEPOSIT_NO=#DEPOSIT_NO:VARCHAR#
                               AND( (#DEPOSIT_DT:DATE# BETWEEN DRGTR.ROI_DATE AND DRGTR.ROI_END_DATE
          ) OR (DRGTR.ROI_DATE &lt;=#DEPOSIT_DT:DATE# AND drgtr.roi_end_date IS NULL))
           AND DR.DEPOSIT_NO_SUB = #DEPOSITSUB_NO:VARCHAR# AND DR.TRANS_DT IS NOT NULL
           AND (#CURR_DT:DATE#-DR.TRANS_DT) BETWEEN from_period AND to_period
 </mapped-statement>
  <mapped-statement name="getRdWeeklyInstallmentSlabs" result-class="java.util.LinkedHashMap" >
      SELECT FROM_INSTALL,TO_INSTALL,INSTALLMENT_NO,PENAL from WEEKLY_INSTALLMENT_SLAB WS WHERE PROD_ID = #PROD_ID:VARCHAR#
   </mapped-statement>
     <mapped-statement name="getCurrentDateTransactionAmt" result-class="java.util.HashMap" >
        SELECT TOTAL_BALANCE  FROM DEPOSIT_SUB_ACINFO  WHERE DEPOSIT_NO=#ACT_NUM:VARCHAR# AND LAST_TRANS_DT = #TRANS_DT :DATE# 
    </mapped-statement>


    <dynamic-mapped-statement name="getMultipleDepositAccountCloseCashierAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT CASE
        WHEN AT.TRANS_MODE = 'TRANSFER'
        THEN AT.BATCH_ID
        ELSE MAX(AT.TRANS_ID)
        END AS TRANS_ID,DM.MULTI_DEP_CLOSE_ID,DA.DEPOSIT_NO AS DEPOSIT_ACT_NUM, DSA.DEPOSIT_SUB_NO AS DEPOSIT_SUB_NO,  C.CUST_ID,
        CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) AS CUSTOMER_NAME,
        DSA.DEPOSIT_DT, DA.PROD_ID,sum(AT.AMOUNT) as amount FROM DEPOSIT_ACINFO DA JOIN DEPOSIT_MULTI_CLOSING_TEMP DM ON DM.DEPOSIT_NO = DA.DEPOSIT_NO, DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE# AND CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN NULL ELSE AT.PAYMENT_STATUS END IS  NULL AND AT.TRANS_TYPE='DEBIT' 
        AND (AT.link_batch_id = da.deposit_no ||'_'|| dsa.DEPOSIT_SUB_NO  OR AT.link_batch_id = da.deposit_no) AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.CUST_ID = C.CUST_ID
        AND DSA.CLOSE_BY != #USER_ID:VARCHAR# <!--AND DSA.PAYMENT_TYPE IS NOT NULL -->
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DSA.CLOSE_BY)
        <!--AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR#-->
        AND AT.INITIATED_BRANCH= #BRANCH_CODE:VARCHAR#
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        AND (DSA.ACCT_STATUS = 'CLOSED' OR DSA.ACCT_STATUS = 'MATURED') 
        group by AT.trans_mode,AT.BATCH_ID,da.deposit_no,dsa.deposit_sub_no,da.prod_id,c.cust_id,DSA.deposit_dt,fname,mname,lname,DM.MULTI_DEP_CLOSE_ID 
        order by trans_id      
    </dynamic-mapped-statement>
   
   
    <dynamic-mapped-statement name="listAllMultipleClosing" result-class="java.util.HashMap" >  
        SELECT DA.deposit_no AS "DEPOSIT NO",
        get_cust_name(c.cust_id) AS "CUSTOMER",DA.CUST_ID,
        DSA.DEPOSIT_AMT AS "DEPOSIT AMOUNT", DA.CATEGORY AS "CATEGORY",
        DA.prod_id AS "PRODUCT_ID", opening_mode AS "OPENING MODE",DSA.DEPOSIT_DT,
        DSA.maturity_dt AS "MATURITY_DATE",DSA.DEPOSIT_SUB_NO,DA.PROD_ID,DA.CATEGORY,
        DA.CONSTITUTION,DA.TAX_DEDUCTIONS,DA.NOMINEE_DETAILS,DA.REMARKS,DA.MDS_GROUP,DA.MDS_REMARKS
        FROM DEPOSIT_ACINFO DA 
        JOIN DEPOSIT_SUB_ACINFO DSA ON DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        JOIN CUSTOMER C ON DA.CUST_ID = C.CUST_ID
        JOIN DEPOSITS_PROD_RENEWAL DPR ON DA.PROD_ID = DPR.PROD_ID
        WHERE DA.status NOT IN ('DELETED', 'REJECTED')
        AND DA.authorize_status = 'AUTHORIZED'
        AND DSA.status != 'DELETED'
        AND DSA.status != 'LIEN'
        AND (DSA.acct_status != 'CLOSED')
        AND DSA.authorize_status = 'AUTHORIZED'
        AND (DA.deposit_STATUS NOT IN ('CLOSED') OR DA.deposit_status IS NULL
        )
        AND DSA.total_balance > 0
        <!-- auto_renewal checking commented by Kannan AR for Jira: KDSA - 211 no need to check auto_renewal column closing time -->
       <!-- AND (DA.auto_renewal IS NULL OR DA.auto_renewal = 'N')-->
        AND dpr.renewal_deposit_allowed = 'Y'
        AND DA.branch_id = #BRANCH_CODE:VARCHAR# 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "CUST_ID">
                    DA.CUST_ID=#CUST_ID#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "ACT_FROM">
                    DA.DEPOSIT_NO &gt;= #ACT_FROM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "ACT_TO">
                    DA.DEPOSIT_NO &lt;= #ACT_TO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY DA.deposit_no, deposit_sub_no
    </dynamic-mapped-statement>

    <dynamic-mapped-statement name="listAllMultipleClosingAuthorize" result-class="java.util.HashMap" >  
        SELECT DA.deposit_no AS "DEPOSIT NO",
        get_cust_name(c.cust_id) AS "CUSTOMER",DA.CUST_ID,
        DSA.DEPOSIT_AMT AS "DEPOSIT AMOUNT", DA.CATEGORY AS "CATEGORY",
        DA.prod_id AS "PRODUCT_ID", opening_mode AS "OPENING MODE",DSA.DEPOSIT_DT,
        DSA.maturity_dt AS "MATURITY_DATE",DSA.DEPOSIT_SUB_NO,DA.PROD_ID,DA.CATEGORY,
        DA.CONSTITUTION,DA.TAX_DEDUCTIONS,DA.NOMINEE_DETAILS,DA.REMARKS,DA.MDS_GROUP,DA.MDS_REMARKS
        FROM DEPOSIT_ACINFO DA 
        JOIN DEPOSIT_SUB_ACINFO DSA ON DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        JOIN CUSTOMER C ON DA.CUST_ID = C.CUST_ID
        JOIN DEPOSITS_PROD_RENEWAL DPR ON DA.PROD_ID = DPR.PROD_ID
        JOIN DEPOSIT_MULTI_CLOSING_TEMP DM ON DM.DEPOSIT_NO = DA.DEPOSIT_NO
        WHERE DA.status NOT IN ('DELETED', 'REJECTED')
        AND DSA.status != 'DELETED'
        AND DSA.total_balance > 0
        <!--AND (DA.auto_renewal IS NULL OR DA.auto_renewal = 'N')-->
        AND dpr.renewal_deposit_allowed = 'Y'
<!--        AND DA.branch_id = #BRANCH_CODE:VARCHAR# -->
        AND (DM.AUTHORIZE_STATUS IS NULL OR DM.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
        AND DM.MULTI_DEP_CLOSE_ID = #MULTI_DEP_CLOSE_ID:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "CUST_ID">
                    DA.CUST_ID=#CUST_ID#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <!--
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "ACT_FROM">
                    DA.DEPOSIT_NO &gt;= #ACT_FROM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "ACT_TO">
                    DA.DEPOSIT_NO &lt;= #ACT_TO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        -->
        ORDER BY DA.deposit_no, deposit_sub_no
    </dynamic-mapped-statement>

    <mapped-statement name="insertDepositMultiClosingTemp" result-class="java.util.LinkedHashMap" >
        INSERT INTO DEPOSIT_MULTI_CLOSING_TEMP(MULTI_DEP_CLOSE_ID,DEPOSIT_NO,DEPOSIT_SUB_NO,CUST_ID,PROD_ID,DEPOSIT_DT,DEPOSIT_AMT,MATURITY_DT,RATE_OF_INT,
        PAID_INTEREST,DR_INTEREST,PAY_AMT,TOTAL_AMT,TOTAL_BALANCE,CUST_ID_UP,FROM_ACC,TO_ACC,CLOSING_MODE,PROD_TYPE,PROD_ID_TRANS,ACT_NUM,STATUS,CLOSE_DT,CLOSE_BY,CREATE_BY,TDS_AMOUNT) VALUES(#MULTI_DEP_CLOSE_ID:VARCHAR#,#DEPOSIT_NO:VARCHAR#,
        #DEPOSIT_SUB_NO:VARCHAR#,#CUST_ID:VARCHAR#,#PROD_ID:VARCHAR#,#DEPOSIT_DT:DATE#,#DEPOSIT_AMT:NUMBER#,#MATURITY_DT:DATE#,#ROI:NUMBER#,
        #PAID_INTEREST:NUMBER#,#DR_INTEREST:NUMBER#,#PAY_AMT:NUMBER#,#TOTAL_AMT:NUMBER#,#TOTAL_BALANCE:NUMBER#,#CUST_ID_UP:VARCHAR#,
        #FROM_ACC_CLOSE:VARCHAR#,#TO_ACC_CLOSE:VARCHAR#,#CLOSING_MODE:VARCHAR#,#PROD_TYPE:VARCHAR#,#PROD_ID_TRANS:VARCHAR#,#ACT_NUM:VARCHAR#,
        #STATUS:VARCHAR#,#CLOSE_DT:DATE#,
        #USER_ID:VARCHAR#,#USER_ID:VARCHAR#,#TDS_AMOUNT:NUMBER#)  
    </mapped-statement>

    <dynamic-mapped-statement name="getMultipleDepositAccountCloseAuthorizeTOList" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT CASE
        WHEN AT.TRANS_MODE = 'TRANSFER'
        THEN AT.BATCH_ID
        ELSE MAX(AT.TRANS_ID)
        END AS TRANS_ID,DM.MULTI_DEP_CLOSE_ID,DA.DEPOSIT_NO AS DEPOSIT_ACT_NUM, DSA.DEPOSIT_SUB_NO AS DEPOSIT_SUB_NO,  C.CUST_ID,
        CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME) AS CUSTOMER_NAME,
        dsa.DEPOSIT_DT, DA.PROD_ID,sum(AT.AMOUNT) as amount FROM DEPOSIT_ACINFO DA JOIN DEPOSIT_MULTI_CLOSING_TEMP DM ON DA.DEPOSIT_NO = DM.DEPOSIT_NO,
        DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT
        WHERE AT.TRANS_DT=#TRANS_DT:DATE#  AND AT.TRANS_TYPE='DEBIT' 
        AND (AT.link_batch_id = da.deposit_no ||'_'|| dsa.DEPOSIT_SUB_NO  OR AT.link_batch_id = da.deposit_no) 
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.CUST_ID = C.CUST_ID
        AND DSA.CLOSE_BY != #USER_ID:VARCHAR# <!--AND DSA.PAYMENT_TYPE IS NOT NULL -->
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DSA.CLOSE_BY)
<!--        AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR#-->
        AND AT.INITIATED_BRANCH= #BRANCH_CODE:VARCHAR#
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))                
            </isNotEqual>
        </dynamic>
         and (DM.AUTHORIZE_STATUS IS NULL OR dm.authorize_status NOT IN
                                      ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
        group by AT.trans_mode,AT.BATCH_ID,da.deposit_no,dsa.deposit_sub_no,da.prod_id,c.cust_id,dsa.deposit_dt,fname,mname,lname,DM.MULTI_DEP_CLOSE_ID  
        order by trans_id
    </dynamic-mapped-statement>
    
    <mapped-statement name="getDepositMultiClosingTemp" result-class="java.util.LinkedHashMap" >
        SELECT * FROM DEPOSIT_MULTI_CLOSING_TEMP DT WHERE DT.MULTI_DEP_CLOSE_ID = #MULTI_DEP_CLOSE_ID:varchar# AND DT.STATUS != 'DELETED' AND DT.AUTHORIZE_STATUS IS NULL
    </mapped-statement>
    
    <mapped-statement name="authorizeMultiDepositAccountCloseTemp" result-class="java.util.LinkedHashMap" >
        UPDATE DEPOSIT_MULTI_CLOSING_TEMP SET AUTHORIZE_STATUS = #STATUS:VARCHAR#, AUTHORIZE_BY = #USER_ID:VARCHAR#, AUTHORIZE_DT = #AUTHORIZEDT:DATE#
        WHERE DEPOSIT_NO = #ACCOUNTNO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="checkDepositMultiClosingTemp" result-class="java.util.LinkedHashMap" >
        SELECT * FROM DEPOSIT_MULTI_CLOSING_TEMP DM WHERE DM.DEPOSIT_NO = #ACCOUNTNO:VARCHAR# AND DM.CLOSE_DT = #AUTHORIZEDT:DATE# AND DM.AUTHORIZE_STATUS IS NULL
    </mapped-statement>
    
    <mapped-statement name="getNoOfDebitCreditCash" result-class="java.util.LinkedHashMap" >
        <!--SELECT MAX(DECODE(AT.TRANS_TYPE,'CREDIT',COUNT(*),0)) AS CREDIT,MAX(DECODE(AT.TRANS_TYPE,'DEBIT',COUNT(*),0)) AS DEBIT
        FROM ALL_TRANS AT WHERE AT.SINGLE_TRANS_ID = #SINGLE_TRANS_ID:VARCHAR#
        AND AT.TRANS_DT = #TRANS_DT:DATE#
        AND AT.status != 'DELETED'
        AND AT.AUTHORIZE_STATUS IS NULL
        GROUP BY AT.TRANS_TYPE-->
        
        SELECT
        SUM(CASE WHEN TRANS_TYPE = 'CREDIT' THEN 1 ELSE 0 END) AS CREDIT,
        SUM(CASE WHEN TRANS_TYPE = 'DEBIT' THEN 1 ELSE 0 END) AS DEBIT
        FROM
        ALL_TRANS AT
        WHERE
        AT.SINGLE_TRANS_ID = #SINGLE_TRANS_ID:VARCHAR#
        AND AT.TRANS_DT = #TRANS_DT:DATE#
        AND AT.status != 'DELETED'
        AND AT.AUTHORIZE_STATUS IS null
    </mapped-statement>

    <mapped-statement name="insertDailyCommissionMainTO" inline-parameters="true">
        INSERT INTO DAILY_DEP_COMM_SLAB (COMM_ID,EFFECT_FROM,STATUS,STATUS_BY,PROD_ID,PERIODIN,BRANCH_CODE)VALUES 
        (#commId:VARCHAR#,#effect_Date:DATE#,#status:VARCHAR#,#statusBy:VARCHAR#,#prod_id:VARCHAR#,#periodIn:VARCHAR#,#branchCode:VARCHAR#)
    </mapped-statement>

     <mapped-statement name="insertDailyCommissionDetTO" inline-parameters="true">
        INSERT INTO DAILY_DEP_COMM_SLAB_DET (FK_COMM_ID,FROM_PERIOD_MM,TO_PERIOD_MM,COMM_PERC,COMM_PENAL)VALUES (#commId:VARCHAR#,#fromPeriod:NUMBER#,
        #toperiod:NUMBER#,#amt:NUMBER#,#penal:NUMBER#)
    </mapped-statement>

    <mapped-statement name="insertDailyROIMainTO" inline-parameters="true">
        INSERT INTO DAILY_DEP_ROI_SLAB (ROI_ID,EFFECT_FROM,STATUS,STATUS_BY,PROD_ID,PERIODIN,BRANCH_CODE)VALUES 
        (#commId:VARCHAR#,#effect_Date:DATE#,#status:VARCHAR#,#statusBy:VARCHAR#,#prod_id:VARCHAR#,#periodIn:VARCHAR#,#branchCode:VARCHAR#)
    </mapped-statement>

      <mapped-statement name="insertDailyROIDetTO" inline-parameters="true">
        INSERT INTO DAILY_DEP_ROI_SLAB_DET (FK_ROI_ID,FROM_PERIOD_MM,TO_PERIOD_MM,ROI,COMM_PENAL)VALUES (#commId:VARCHAR#,#fromPeriod:NUMBER#,
        #toperiod:NUMBER#,#amt:NUMBER#,#penal:NUMBER#)
    </mapped-statement>

    <result-map name="getDailyCommissionDetTo" class="com.see.truetransact.transferobject.product.commission.CommissionTO">
        <property name="commId" column="FK_COMM_ID"/>
        <property name="fromPeriod" column="FROM_PERIOD_MM"/>
        <property name="toperiod" column="TO_PERIOD_MM"/>
        <property name="amt" column="COMM_PERC"/>
        <property name="penal" column="COMM_PENAL"/>
    </result-map>

    <mapped-statement name="getSelectDailyCommissionDetTo" result-map="getDailyCommissionDetTo" >
        SELECT DSD.* FROM DAILY_DEP_COMM_SLAB_DET DSD,DAILY_DEP_COMM_SLAB DS WHERE 
        DS.BRANCH_CODE =#BRANCH_CODE:VARCHAR# AND DS.PERIODIN=#PERIOD_IN:VARCHAR# and DS.PROD_ID = #PROD_ID:VARCHAR# AND DS.COMM_ID = DSD.FK_COMM_ID ORDER BY DSD.FROM_PERIOD_MM
    </mapped-statement>
 
    <result-map name="getDailyCommissionTo" class="com.see.truetransact.transferobject.product.commission.CommissionMainTO">
        <property name="commId" column="COMM_ID"/>
        <property name="prod_id" column="PROD_ID"/>
        <property name="effect_Date" column="EFFECT_FROM"/>
        <property name="periodIn" column="PERIODIN"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="branchCode" column="BRANCH_CODE"/>
    </result-map>

    <mapped-statement name="getSelectDailyCommissionTo" result-map="getDailyCommissionTo" >
        SELECT * FROM DAILY_DEP_COMM_SLAB DS WHERE DS.BRANCH_CODE =#BRANCH_CODE:VARCHAR# AND DS.PERIODIN=#PERIOD_IN:VARCHAR# 
        and DS.PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
 
    <result-map name="getDailyROIDetTo" class="com.see.truetransact.transferobject.product.commission.CommissionTO">
        <property name="commId" column="FK_ROI_ID"/>
        <property name="fromPeriod" column="FROM_PERIOD_MM"/>
        <property name="toperiod" column="TO_PERIOD_MM"/>
        <property name="amt" column="ROI"/>
        <property name="penal" column="COMM_PENAL"/>
    </result-map>

    <mapped-statement name="getSelectDailyROIDetTo" result-map="getDailyROIDetTo" >
        SELECT DSD.* FROM DAILY_DEP_ROI_SLAB_DET DSD,DAILY_DEP_ROI_SLAB DS WHERE  
        DS.BRANCH_CODE =#BRANCH_CODE:VARCHAR# AND DS.PERIODIN=#PERIOD_IN:VARCHAR# and DS.PROD_ID = #PROD_ID:VARCHAR# AND
        DS.ROI_ID = DSD.FK_ROI_ID ORDER BY DSD.FROM_PERIOD_MM
    </mapped-statement>
 
    <result-map name="getDailyROITo" class="com.see.truetransact.transferobject.product.commission.CommissionMainTO">
        <property name="commId" column="ROI_ID"/>
        <property name="prod_id" column="PROD_ID"/>
        <property name="effect_Date" column="EFFECT_FROM"/>
        <property name="periodIn" column="PERIODIN"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="branchCode" column="BRANCH_CODE"/>
    </result-map>

    <mapped-statement name="getSelectDailyROITo" result-map="getDailyROITo" >
       SELECT * FROM DAILY_DEP_ROI_SLAB DS WHERE DS.BRANCH_CODE =#BRANCH_CODE:VARCHAR# AND DS.PERIODIN=#PERIOD_IN:VARCHAR# 
        and DS.PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement> 
    <mapped-statement name="updateTranssferTransAuthorizedBy2" result-class="java.util.LinkedHashMap"  >
       UPDATE TRANSFER_TRANS SET AUTHORIZE_BY_2 =#AUTHORIZE_BY_2:VARCHAR# WHERE SINGLE_TRANS_ID =#SINGLE_TRANS_ID:VARCHAR# AND TRANS_DT =#TRANS_DT:DATE#
    </mapped-statement> 
    <mapped-statement name="updateCashTransAuthorizedBy2" result-class="java.util.LinkedHashMap"  >
       UPDATE CASH_TRANS SET AUTHORIZE_BY_2 =#AUTHORIZE_BY_2:VARCHAR# WHERE SINGLE_TRANS_ID =#SINGLE_TRANS_ID:VARCHAR# AND TRANS_DT =#TRANS_DT:DATE#
    </mapped-statement> 
    
    <mapped-statement name="getThriftBenovelentInterest" result-class="java.util.LinkedHashMap"  >
     SELECT Get_Thrift_IntPyble_Premat(#Deposit_No:varchar#,#curr_Dt:Date#) As INTEREST FROM DUAL 
    </mapped-statement> 
    
     <mapped-statement name="getActDetailsForDailyPrdct" result-class="java.util.LinkedHashMap" >
     <!-- SELECT DSA.DEPOSIT_DT,DSA.MATURITY_DT,DSA.CLEAR_BALANCE,DSA.DEPOSIT_AMT,DSA.DEPOSIT_PERIOD_DD,DEPOSIT_PERIOD_MM,DEPOSIT_PERIOD_YY FROM DEPOSIT_SUB_ACINFO dsa
      WHERE DSA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# -->      
      <!-- SELECT dsa.deposit_dt, dsa.maturity_dt, dsa.clear_balance, dsa.deposit_amt,
       dsa.deposit_period_dd, DSA.deposit_period_mm, DSA.deposit_period_yy,DPR.SLAB_SELECTION_METHOD
       FROM deposit_sub_acinfo dsa,DEPOSITS_PROD_RENEWAL DPR , DEPOSIT_ACINFO DA
       WHERE DA.PROD_ID = DPR.PROD_ID
       AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
       AND dsa.deposit_no = #DEPOSIT_NO:VARCHAR#     -->
       
       SELECT dsa.deposit_dt,
       dsa.maturity_dt,
       dsa.clear_balance,
       dsa.deposit_amt,
       dsa.deposit_period_dd,
       DSA.deposit_period_mm,
       DSA.deposit_period_yy,
       DPR.SLAB_SELECTION_METHOD,
       DP.BEHAVES_LIKE,
       DSA.AVAILABLE_BALANCE,
       dp.FULLAMT_ON_MATURE_CLOSURE
       FROM deposit_sub_acinfo dsa,
       DEPOSITS_PROD_RENEWAL DPR,
       DEPOSIT_ACINFO DA,
       DEPOSITS_PRODUCT dp
       WHERE DA.PROD_ID = DPR.PROD_ID
       AND DA.PROD_ID = DP.PROD_ID
       AND DPR.PROD_ID = DP.PROD_ID
       AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
       AND dsa.deposit_no = #DEPOSIT_NO:VARCHAR#      
       
     </mapped-statement>
     
     <mapped-statement name="getSumAmountDelayedForGroupDeposit" result-class="java.util.LinkedHashMap" > 
        <!--select round(sum(diff_curr_bal)) as INT_CAL_AMT from (select trunc (D.TRN_DT,'MM')as dt,sum(D.AMOUNT) AS DEP_AMOUNT ,D.ACC_NUM, gd.DEPOSIT_AMT , (gd.DEPOSIT_AMT -  sum(D.AMOUNT)) AS DIFFERECE,
        sum(sum(D.AMOUNT)) over (partition by d.acc_num order by trunc (D.TRN_DT,'MM')) as curr_bal,
        sum(gd.DEPOSIT_AMT) over (partition by d.acc_num order by trunc (D.TRN_DT,'MM')) as curr_req_bal,
        sum(gd.DEPOSIT_AMT-sum(D.AMOUNT)) over (partition by d.acc_num order by trunc (D.TRN_DT,'MM')) as diff_curr_bal
        from DAILY_DEPOSIT_TRANS d, DEPOSIT_sub_ACINFO dsa, DEPOSIT_ACINFO da , GROUP_DEPOSIT gd 
        where D.ACC_NUM =#DEPOSIT_NO:VARCHAR# || '_1'
        and DSA.DEPOSIT_NO || '_1' = D.ACC_NUM
        and DSA.DEPOSIT_NO = DA.DEPOSIT_NO
        and DA.GROUP_NO = GD.GROUP_NO
        group by trunc (D.TRN_DT,'MM'),D.ACC_NUM, gd.DEPOSIT_AMT
        ORDER BY dt)-->
        
                SELECT ROUND (SUM (diff_curr_bal)) AS int_calc_amt
  FROM (SELECT   gd.deposit_amt AS deposit_amt, SUM (amount) AS paidamount,
                 inst_start_dt, inst_end_dt, sl_no,
                 (gd.deposit_amt - SUM (amount)) AS differnce,
                 SUM (gd.deposit_amt - SUM (amount)) OVER (ORDER BY TRUNC
                                             (inst_start_dt,
                                              'MM'
                                             )) AS diff_curr_bal
            FROM daily_deposit_trans d
                 JOIN
                 (SELECT sl_no, inst_start_dt,
                         ADD_MONTHS (inst_start_dt, 1) AS inst_end_dt
                    FROM (SELECT     LEVEL sl_no,
                                     ADD_MONTHS
                                        (TO_CHAR (TO_DATE(#START_DATE#, 'dd/mm/yyyy')),
                                         LEVEL - 1
                                        ) inst_start_dt
                                FROM DUAL
                          CONNECT BY LEVEL &lt;=
                                        FLOOR
                                            (  (  
                                                        (TO_DATE (#END_DATE#,
                                                                  'dd/mm/yyyy'
                                                                 )
                                                        )
                                                -
                                                        (TO_DATE (#START_DATE#,
                                                                  'dd/mm/yyyy'
                                                                 )
                                                        )
                                               )
                                             / 30
                                            )
                            ORDER BY inst_start_dt)) c
                 ON d.trn_dt BETWEEN c.inst_start_dt AND c.inst_end_dt - 1
                 ,
                 group_deposit gd, deposit_sub_acinfo dsa, deposit_acinfo da
           WHERE d.acc_num = #DEPOSIT_NO:VARCHAR#||'_1'
             AND dsa.deposit_no || '_1' = d.acc_num
             AND dsa.deposit_no = da.deposit_no
             AND da.group_no = gd.group_no
             and DA.BRANCH_ID = GD.BRANCH_ID
        GROUP BY inst_start_dt, inst_end_dt, sl_no, gd.deposit_amt
          HAVING sl_no &lt; #SL_NO:NUMERIC#
        ORDER BY sl_no)
 WHERE diff_curr_bal &gt; 0

                
     </mapped-statement>
     
     <mapped-statement name="getPercentWiseInterestForGroupDeposit" result-class="java.util.LinkedHashMap" > 
       <!--select round(sum(intAmount)) as INTEREST_AMOUNT from (select trunc (D.TRN_DT,'MM')as dt,sum(D.AMOUNT) AS DEP_AMOUNT ,D.ACC_NUM, gd.DEPOSIT_AMT , (gd.DEPOSIT_AMT -  sum(D.AMOUNT)) AS DIFFERECE,
       sum(sum(D.AMOUNT)) over (partition by d.acc_num order by trunc (D.TRN_DT,'MM')) as curr_bal,
       (sum(sum(D.AMOUNT)) over (partition by d.acc_num order by trunc (D.TRN_DT,'MM')) * #INT_RATE:NUMBER#)/1200 as intAmount,
       sum(gd.DEPOSIT_AMT-sum(D.AMOUNT)) over (partition by d.acc_num order by trunc (D.TRN_DT,'MM')) as diff_curr_bal
       from DAILY_DEPOSIT_TRANS d, DEPOSIT_sub_ACINFO dsa, DEPOSIT_ACINFO da , GROUP_DEPOSIT gd 
       where D.ACC_NUM = #DEPOSIT_NO:VARCHAR# || '_1'
       and DSA.DEPOSIT_NO || '_1' = D.ACC_NUM
       and DSA.DEPOSIT_NO = DA.DEPOSIT_NO
       and DA.GROUP_NO = GD.GROUP_NO
       and DA.BRANCH_ID = GD.BRANCH_ID
       group by trunc (D.TRN_DT,'MM'),D.ACC_NUM, gd.DEPOSIT_AMT
       ORDER BY dt)-->
       SELECT get_group_deposit_int(#DEPOSIT_NO:VARCHAR#,cast(#INT_RATE# as numeric),CAST(#CURRDT# AS DATE)) as INTEREST_AMOUNT from dual
     </mapped-statement>
     
     <mapped-statement name="getPercentWiseIntRecoveryAmtForGroupDeposit" result-class="java.util.LinkedHashMap" > 
       select round(sum(intRec)) as RECOVERY_AMOUNT from (select trunc (D.TRN_DT,'MM')as dt,sum(D.AMOUNT) AS DEP_AMOUNT ,D.ACC_NUM, gd.DEPOSIT_AMT , (gd.DEPOSIT_AMT -  sum(D.AMOUNT)) AS DIFFERECE,
       sum(sum(D.AMOUNT)) over (partition by d.acc_num order by trunc (D.TRN_DT,'MM')) as curr_bal,
       sum(gd.DEPOSIT_AMT) over (partition by d.acc_num order by trunc (D.TRN_DT,'MM')) as curr_req_bal,
       sum(gd.DEPOSIT_AMT-sum(D.AMOUNT)) over (partition by d.acc_num order by trunc (D.TRN_DT,'MM')) as diff_curr_bal,
       (sum(gd.DEPOSIT_AMT-sum(D.AMOUNT)) over (partition by d.acc_num order by trunc (D.TRN_DT,'MM'))* #INT_RATE:NUMBER#)/1200 as intRec
       from DAILY_DEPOSIT_TRANS d, DEPOSIT_sub_ACINFO dsa, DEPOSIT_ACINFO da , GROUP_DEPOSIT gd 
       where D.ACC_NUM = #DEPOSIT_NO:VARCHAR# || '_1'
       and DSA.DEPOSIT_NO || '_1' = D.ACC_NUM
       and DSA.DEPOSIT_NO = DA.DEPOSIT_NO
       and DA.GROUP_NO = GD.GROUP_NO
       and DA.BRANCH_ID = GD.BRANCH_ID
       group by trunc (D.TRN_DT,'MM'),D.ACC_NUM, gd.DEPOSIT_AMT
       ORDER BY dt)  
     </mapped-statement>
      
      <mapped-statement name="getIsChargesTransactionByTransfer" result-class="java.util.LinkedHashMap" > 
       select dp.IS_TRANFER_CHARGES from DEPOSITS_PRODUCT dp where DP.PROD_ID = #PROD_ID:VARCHAR#
      </mapped-statement>
      
      <mapped-statement name="getSelectCommissionRecoveredHeadForGST" result-class="java.util.LinkedHashMap" > 
       select DPA.COMMISION_HEAD from DEPOSITS_PROD_ACHD dpa 
       where DPA.PROD_ID = #PROD_ID:VARCHAR#
      </mapped-statement>
      
      <mapped-statement name="getremarksForDepositClosing" result-class="java.util.LinkedHashMap" > 
       select DA.REMARKS from DEPOSIT_ACINFO da
       where DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
      </mapped-statement>
      
      <mapped-statement name = "getPendingTransactionForDeposit" result-class = "java.util.LinkedHashMap">
          SELECT DISTINCT DEPOSIT_NO FROM DEPOSIT_SUB_ACINFO WHERE  
          STATUS!='DELETED' AND (AUTHORIZE_STATUS IS NULL OR AUTHORIZE_STATUS='AUTHORIZED')
          AND (NVL(SHADOW_CREDIT,0)!=0 OR NVL(SHADOW_DEBIT,0)!=0)
          AND DEPOSIT_NO = #DEPOSIT_NO# 
          <!--IN (SELECT DEPOSIT_NO FROM DEPOSIT_ACINFO WHERE 
          CUST_ID=(SELECT CUST_ID FROM DEPOSIT_ACINFO WHERE DEPOSIT_NO =#DEPOSIT_NO#))-->
      </mapped-statement>
      
      <mapped-statement name="checkMinorDeposit" result-class="java.util.LinkedHashMap" > 
         select CHECK_MINOR_DEPOSIT(#DEPOSIT_NO:VARCHAR#,#BRANCH_CODE:VARCHAR#) as ACT_TYPE from dual
      </mapped-statement>
      
      <mapped-statement name="getRDClosingIntRate" result-class="java.util.LinkedHashMap" > 
         SELECT GET_RD_CLOSING_INT_RATE(#DEPOSIT_NO:VARCHAR#,#PROD_ID:VARCHAR#,#CLOSURE_TYPE:VARCHAR#,#BRANCH_CODE:VARCHAR#) AS RATE_OF_INT FROM DUAL
      </mapped-statement>
      
      <mapped-statement name="getRDClosingOtherRateInt" result-class="java.util.LinkedHashMap" >     
         SELECT GET_RD_CLOSING_OTHER_RATE_INT(#DEPOSIT_NO:VARCHAR#,#ROI:NUMBER#,#BRANCHCODE:VARCHAR#) AS INT_AMT FROM DUAL
      </mapped-statement>      
      
      <mapped-statement name="getRDClosingOtherRateIntProducts" result-class="java.util.HashMap">     
         SELECT AP.PROD_ID,AP.PROD_DESC FROM ALL_PRODUCTS AP WHERE AP.PROD_TYPE = #PROD_TYPE:VARCHAR#
      </mapped-statement>  
      
       <mapped-statement name="getSpecialRDCompletedStatus" result-class="java.util.HashMap" >
        select CHECK_SPECIAL_RD_COMPLETED(#DEPOSIT_NO:VARCHAR#,#PROD_ID:VARCHAR#) as COMPLETESTATUS from dual
       </mapped-statement>
       
       <mapped-statement name="getSpecialRD" result-class="java.util.HashMap" >
        <!--select D.SPECIAL_RD from deposits_prod_rd d where D.PROD_ID = #PROD_ID:VARCHAR#-->
        SELECT D.SPECIAL_RD, DP.BEHAVES_LIKE
        FROM deposits_prod_rd d, DEPOSITS_PRODUCT dp
        WHERE DP.PROD_ID = D.PROD_ID AND D.PROD_ID = #PROD_ID:VARCHAR#
       </mapped-statement>
       
       <mapped-statement name="getDeathMarkingForCust" result-class="java.util.HashMap" >
        SELECT * FROM DEATH_MARKING 
        WHERE CUST_ID = #CUSTID:VARCHAR#  AND AUTHORIZE_STATUS='AUTHORIZED'
       </mapped-statement>
       
       
       <mapped-statement name="getOperativeAccountsStatus" result-class="java.util.HashMap">
           select act_status_id from act_master where act_num = #ACT_NUM#
           and act_status_id in ('CLOSED','IN_OPERATIVE','DORMANT')
       </mapped-statement>
      
</sql-map>
