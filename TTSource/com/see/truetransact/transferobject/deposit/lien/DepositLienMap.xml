<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="DepositLienTOMap">
<!-- Use DepositLienTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertDepositLienTO" inline-parameters="true">
        INSERT INTO DEPOSIT_LIEN
        (DEPOSIT_NO, DEPOSIT_SUB_NO, LIEN_NO, LIEN_DT, LIEN_AC_HD, LIEN_AC_NO, REMARKS, CREDIT_LIEN_ACCT, STATUS, AUTHORIZE_STATUS, AUTHORIZE_DT, AUTHORIZE_BY, STATUS_BY, STATUS_DT, LIEN_AMOUNT, UNLIEN_DT, LIEN_PROD_ID, UNLIEN_REMARKS,LOANS_OTHER_SOCIETY
        ) VALUES (
        #depositNo:VARCHAR#, #depositSubNo:VARCHAR#, #lienNo:VARCHAR#, #lienDt:TIMESTAMP#, #lienAcHd:VARCHAR#, #lienAcNo:VARCHAR#, #remarks:VARCHAR#, #creditLienAcct:VARCHAR#, #status:VARCHAR#, #authorizeStatus:VARCHAR#, #authorizeDt:TIMESTAMP#, #authorizeBy:VARCHAR#, #statusBy:VARCHAR#, (SELECT SYS_DATE() FROM DUAL), #lienAmount:NUMERIC#, #unlienDt:TIMESTAMP#, #lienProdId:VARCHAR#, #unlienRemarks:VARCHAR#,#chkLos:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="insertLOSDepositLienTO" inline-parameters="true">
        INSERT INTO DEPOSIT_LIEN
        (DEPOSIT_NO,DEPOSIT_SUB_NO,LIEN_NO,LOS_LIEN_DATE,LOS_LIEN_AC_NO,LOS_LIEN_REMARKS,STATUS,AUTHORIZE_STATUS,AUTHORIZE_DT,AUTHORIZE_BY,STATUS_BY,STATUS_DT,LOS_LIEN_AMOUNT,UNLIEN_DT,UNLIEN_REMARKS,LOS_CUSTOMER_NAME,LOS_LOAN_TYPE,LOANS_OTHER_SOCIETY)
        VALUES (
        #depositNo:VARCHAR#, #depositSubNo:VARCHAR#, #lienNo:VARCHAR#,#losLienDt:DATE#, #losLienAcNo:VARCHAR#, #losLienRemarks:VARCHAR#, #status:VARCHAR#, #authorizeStatus:VARCHAR#, #authorizeDt:TIMESTAMP#, #authorizeBy:VARCHAR#, #statusBy:VARCHAR#, (SELECT SYS_DATE() FROM DUAL), #losLienAmount:NUMERIC#, #unlienDt:TIMESTAMP#,  #unlienRemarks:VARCHAR#,#losLienCustName:VARCHAR#,#losLienLoanType:VARCHAR#,#chkLos:VARCHAR#)
    </mapped-statement>

        
        
        
	<!-- Use DepositLienTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateDepositLosLienTO" inline-parameters="true">
        UPDATE DEPOSIT_LIEN SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        DEPOSIT_SUB_NO = #depositSubNo:VARCHAR#,		
        LOS_LIEN_DATE = #losLienDt:DATE#,
		
        LOS_LIEN_AC_NO = #losLienAcNo:VARCHAR#,
        LOS_LIEN_REMARKS = #losLienRemarks:VARCHAR#,
		
        STATUS = #status:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        AUTHORIZE_DT = #authorizeDt:TIMESTAMP#,
        AUTHORIZE_BY = #authorizeBy:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = (SELECT SYS_DATE() FROM DUAL),
        LOS_LIEN_AMOUNT = #losLienAmount:NUMERIC#,
        UNLIEN_DT = #unlienDt:TIMESTAMP#,
		
        UNLIEN_REMARKS = #unlienRemarks:VARCHAR#,
        LOS_CUSTOMER_NAME=#losLienCustName:VARCHAR#,
        LOS_LOAN_TYPE=#losLienLoanType:VARCHAR#,
        LOANS_OTHER_SOCIETY=#chkLos:VARCHAR#
        WHERE LIEN_NO = #lienNo:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="updateDepositLienTO" inline-parameters="true">
        UPDATE DEPOSIT_LIEN SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        DEPOSIT_SUB_NO = #depositSubNo:VARCHAR#,		
        LIEN_DT = #lienDt:TIMESTAMP#,
        LIEN_AC_HD = #lienAcHd:VARCHAR#,
        LIEN_AC_NO = #lienAcNo:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        CREDIT_LIEN_ACCT = #creditLienAcct:VARCHAR#,
        STATUS = #status:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        AUTHORIZE_DT = #authorizeDt:TIMESTAMP#,
        AUTHORIZE_BY = #authorizeBy:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = (SELECT SYS_DATE() FROM DUAL),
        LIEN_AMOUNT = #lienAmount:NUMERIC#,
        UNLIEN_DT = #unlienDt:TIMESTAMP#,
        LIEN_PROD_ID = #lienProdId:VARCHAR#,
        UNLIEN_REMARKS = #unlienRemarks:VARCHAR#,
        LOANS_OTHER_SOCIETY=#chkLos:VARCHAR#
        WHERE LIEN_NO = #lienNo:VARCHAR#
    </mapped-statement>

    <mapped-statement name="updateDepositLienTmpFileTO" inline-parameters="true">
        INSERT INTO DEPOSIT_LIEN_TMP
        (DEPOSIT_NO, DEPOSIT_SUB_NO, LIEN_NO, LIEN_DT, LIEN_AC_HD, LIEN_AC_NO, REMARKS, CREDIT_LIEN_ACCT, STATUS, AUTHORIZE_STATUS, AUTHORIZE_DT, AUTHORIZE_BY, STATUS_BY, STATUS_DT, LIEN_AMOUNT, UNLIEN_DT, LIEN_PROD_ID, UNLIEN_REMARKS
        ) VALUES (
        #depositNo:VARCHAR#, #depositSubNo:VARCHAR#, #lienNo:VARCHAR#, #lienDt:TIMESTAMP#, #lienAcHd:VARCHAR#, #lienAcNo:VARCHAR#, #remarks:VARCHAR#, #creditLienAcct:VARCHAR#, #status:VARCHAR#, #authorizeStatus:VARCHAR#, #authorizeDt:TIMESTAMP#, #authorizeBy:VARCHAR#, #statusBy:VARCHAR#,(SELECT SYS_DATE() FROM DUAL), #lienAmount:NUMERIC#, #unlienDt:TIMESTAMP#, #lienProdId:VARCHAR#, #unlienRemarks:VARCHAR#)
    </mapped-statement>

	<!-- Use DepositLienTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
        <!--
	<mapped-statement name="deleteDepositLienTO" inline-parameters="true">
		DELETE FROM DEPOSIT_LIEN 
		WHERE deposit_no=#depositNo# and deposit_sub_no=#depositSubNo# and LIEN_NO=#lienNo#
	</mapped-statement>
        -->
        
	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to DepositLienTO object (JavaBean) properties -->
    <result-map name="getDepositLienTOResult" class="com.see.truetransact.transferobject.deposit.lien.DepositLienTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="depositSubNo" column="DEPOSIT_SUB_NO"/>
        <property name="lienNo" column="LIEN_NO"/>
        <property name="lienDt" column="LIEN_DT"/>
        <property name="lienAcHd" column="LIEN_AC_HD"/>
        <property name="lienAcNo" column="LIEN_AC_NO"/>
        <property name="remarks" column="REMARKS"/>
        <property name="creditLienAcct" column="CREDIT_LIEN_ACCT"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="lienAmount" column="LIEN_AMOUNT"/>
        <property name="unlienDt" column="UNLIEN_DT"/>
        <property name="lienProdId" column="LIEN_PROD_ID"/>
        <property name="unlienRemarks" column="UNLIEN_REMARKS"/>
        <property name="losLienLoanType" column="LOS_LOAN_TYPE"/>
        <property name="losLienAcNo" column="LOS_LIEN_AC_NO"/>
        <property name="losLienCustName" column="LOS_CUSTOMER_NAME"/>
        <property name="losLienAmount" column="LOS_LIEN_AMOUNT"/>
        <property name="losLienDt" column="LOS_LIEN_DATE"/>
        <property name="losLienRemarks" column="LOS_LIEN_REMARKS"/>
        <property name="chkLos" column="LOANS_OTHER_SOCIETY"/>
                  
                  
                
                
    </result-map>
    <mapped-statement name="getSelectDepositLienTO" result-map="getDepositLienTOResult" >
		<!--SELECT * FROM DEPOSIT_LIEN 
		WHERE DEPOSIT_NO=#DEPOSITNO# and DEPOSIT_SUB_NO=#SUBDEPOSITNO# and (AUTHORIZE_STATUS  in ('REJECTED','AUTHORIZED') or authorize_status is null)
                and (status is null or status not in ('DELETED','UNLIENED')) -->
        SELECT * FROM DEPOSIT_LIEN l   WHERE DEPOSIT_NO=#DEPOSITNO:VARCHAR# and DEPOSIT_SUB_NO=#SUBDEPOSITNO:VARCHAR# 
        and (l.status != 'UNLIENED' and (AUTHORIZE_STATUS in ('AUTHORIZED') or AUTHORIZE_STATUS is null) OR l.status != 'CREATED' and (AUTHORIZE_STATUS in ('REJECTED') or AUTHORIZE_STATUS is null)) AND l.STATUS!='DELETED'
    </mapped-statement>      
       
    <result-map name="getDeleteDepositLienTOResult" class="com.see.truetransact.transferobject.deposit.lien.DepositLienTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="depositSubNo" column="DEPOSIT_SUB_NO"/>
        <property name="lienNo" column="LIEN_NO"/>
        <property name="lienDt" column="LIEN_DT"/>
        <property name="lienAcHd" column="LIEN_AC_HD"/>
        <property name="lienAcNo" column="LIEN_AC_NO"/>
        <property name="remarks" column="REMARKS"/>
        <property name="creditLienAcct" column="CREDIT_LIEN_ACCT"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="lienAmount" column="LIEN_AMOUNT"/>
        <property name="unlienDt" column="UNLIEN_DT"/>
        <property name="lienProdId" column="LIEN_PROD_ID"/>
        <property name="unlienRemarks" column="UNLIEN_REMARKS"/>
        <property name="losLienLoanType" column="LOS_LOAN_TYPE"/>
        <property name="losLienAcNo" column="LOS_LIEN_AC_NO"/>
        <property name="losLienCustName" column="LOS_CUSTOMER_NAME"/>
        <property name="losLienAmount" column="LOS_LIEN_AMOUNT"/>
        <property name="losLienDt" column="LOS_LIEN_DATE"/>
        <property name="losLienRemarks" column="LOS_LIEN_REMARKS"/>
        <property name="chkLos" column="LOANS_OTHER_SOCIETY"/>
                
    </result-map>
    <mapped-statement name="getDeleteDepositLienTO" result-map="getDeleteDepositLienTOResult" >
        SELECT * FROM DEPOSIT_LIEN 
        WHERE DEPOSIT_NO=#DEPOSITNO:VARCHAR# and DEPOSIT_SUB_NO=#SUBDEPOSITNO:VARCHAR# and (AUTHORIZE_STATUS not in ('REJECTED','AUTHORIZED') or authorize_status is null)
        and (status is null or status not in ('DELETED','UNLIENED')) 
    </mapped-statement>             
        
    <result-map name="getAuthorizeDepositLienTOResult" class="com.see.truetransact.transferobject.deposit.lien.DepositLienTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="depositSubNo" column="DEPOSIT_SUB_NO"/>
        <property name="lienNo" column="LIEN_NO"/>
        <property name="lienDt" column="LIEN_DT"/>
        <property name="lienAcHd" column="LIEN_AC_HD"/>
        <property name="lienAcNo" column="LIEN_AC_NO"/>
        <property name="remarks" column="REMARKS"/>
        <property name="creditLienAcct" column="CREDIT_LIEN_ACCT"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="lienAmount" column="LIEN_AMOUNT"/>
        <property name="unlienDt" column="UNLIEN_DT"/>
        <property name="lienProdId" column="LIEN_PROD_ID"/>
        <property name="unlienRemarks" column="UNLIEN_REMARKS"/>
        <property name="losLienLoanType" column="LOS_LOAN_TYPE"/>
        <property name="losLienAcNo" column="LOS_LIEN_AC_NO"/>
        <property name="losLienCustName" column="LOS_CUSTOMER_NAME"/>
        <property name="losLienAmount" column="LOS_LIEN_AMOUNT"/>
        <property name="losLienDt" column="LOS_LIEN_DATE"/>
        <property name="losLienRemarks" column="LOS_LIEN_REMARKS"/>
        <property name="chkLos" column="LOANS_OTHER_SOCIETY"/>
    </result-map>
    <mapped-statement name="getAuthorizeDepositLienTO" result-map="getAuthorizeDepositLienTOResult" >
        SELECT * FROM DEPOSIT_LIEN 
        WHERE DEPOSIT_NO=#DEPOSITNO:VARCHAR# and DEPOSIT_SUB_NO=#SUBDEPOSITNO:VARCHAR# and LIEN_NO=#LIENNO:VARCHAR# and (AUTHORIZE_STATUS not in ('REJECTED','AUTHORIZED') or authorize_status is null)                
    </mapped-statement>     
    <mapped-statement name="getDepositLienTO" result-map="getAuthorizeDepositLienTOResult" >
        SELECT * FROM DEPOSIT_LIEN 
        WHERE LIEN_AC_NO=#LOAN_NO:VARCHAR# and AUTHORIZE_STATUS in ('AUTHORIZED') 
        AND status not in ('DELETED','UNLIENED')
    </mapped-statement> 
    <mapped-statement name="getDepositLienUnlienTO" result-map="getAuthorizeDepositLienTOResult" >
        SELECT * FROM DEPOSIT_LIEN 
        WHERE LIEN_AC_NO=#LOAN_NO:VARCHAR# and (AUTHORIZE_STATUS NOT in ('AUTHORIZED') or AUTHORIZE_STATUS is null)
        AND status in ('UNLIENED')
    </mapped-statement> 
        
    <dynamic-mapped-statement name="getDepositLienUnlienLoanTO" result-map="getAuthorizeDepositLienTOResult" >
        SELECT * FROM DEPOSIT_LIEN 
        WHERE <!--LIEN_AC_NO=#LOAN_NO# -->
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend =" "  property ="LIEN_NO">
                    LIEN_NO=#LIEN_NO:VARCHAR# AND STATUS !='DELETED'
                </isNotNull>
            </isParameterPresent>
                    
            <isParameterPresent>
                <isNotNull prepend =" "  property ="LOAN_NO">
                    LIEN_AC_NO=#LOAN_NO:VARCHAR# AND STATUS !='DELETED'
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend =" "  property ="DEPOSIT_NO">
                    DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# AND STATUS !='DELETED'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        AND (AUTHORIZE_STATUS NOT in ('AUTHORIZED') or AUTHORIZE_STATUS is null)
                                  
    </dynamic-mapped-statement>
        
    <mapped-statement name="getLienSubDepositAmount" result-class="java.util.HashMap" >
     <!--  select DEPOSIT_DT,nvl(SHADOW_LIEN,0) as SHADOW_LIEN,nvl(DEPOSIT_AMT,0) as AMOUNT,nvl(P.Total,0) as FREEZEAMT,nvl(Q.Total,0) as LIENAMT,nvl(AVAILABLE_BALANCE,0) as CLEAR from 
        (select deposit_no,deposit_sub_no, sum(AMOUNT) as Total from DEPOSIT_FREEZE F 
        where F.deposit_no=#DEPOSITNO# and F.deposit_sub_no=#SUBDEPOSITNO# and 
        (AUTHORIZE_STATUS= 'AUTHORIZED')
             and (status is null or status not in('DELETED','UNFREEZED'))
        GROUP BY deposit_no,deposit_sub_no)  P,

        (select deposit_no,deposit_sub_no, sum(LIEN_AMOUNT) as Total from DEPOSIT_LIEN L 
        where L.deposit_no=#DEPOSITNO# and L.deposit_sub_no=#SUBDEPOSITNO# and 
        (AUTHORIZE_STATUS='AUTHORIZED')
             and (status is null or status not in('DELETED','UNLIENED'))
        GROUP BY deposit_no,deposit_sub_no)  Q,

        DEPOSIT_SUB_ACINFO S where 
        (S.deposit_no=P.deposit_no(+) and S.deposit_sub_no=P.deposit_sub_no(+) )and         	    (S.deposit_no=Q.deposit_no(+) and S.deposit_sub_no=Q.deposit_sub_no(+) ) and
        (S.deposit_no=#DEPOSITNO# and S.deposit_sub_no=#SUBDEPOSITNO#)-->
        <!-- select DEPOSIT_DT,nvl(SHADOW_LIEN,0) as SHADOW_LIEN,nvl(DEPOSIT_AMT,0) as AMOUNT,nvl(P.Total,0) as FREEZEAMT,nvl(Q.Total,0) as LIENAMT,nvl(AVAILABLE_BALANCE,0) as CLEAR from 
        (select deposit_no,deposit_sub_no, sum(AMOUNT) as Total from DEPOSIT_FREEZE F 
        where F.deposit_no=#DEPOSITNO# and F.deposit_sub_no=#SUBDEPOSITNO# and  ((F.AUTHORIZE_STATUS  = 'AUTHORIZED' and F.STATUS not in ('UNFREEZED')) OR (F.AUTHORIZE_STATUS  = 'REJECTED' and F.STATUS in('UNFREEZED','MODIFIED') ))
        GROUP BY deposit_no,deposit_sub_no)  P, 

        (select deposit_no,deposit_sub_no, sum(LIEN_AMOUNT) as Total from DEPOSIT_LIEN L 
        where L.deposit_no=#DEPOSITNO# and L.deposit_sub_no=#SUBDEPOSITNO# and ((L.AUTHORIZE_STATUS  = 'AUTHORIZED' and L.STATUS not in ('UNLIENED')) OR (L.AUTHORIZE_STATUS  = 'REJECTED' and L.STATUS in('UNLIENED','MODIFIED') )) 
        GROUP BY deposit_no,deposit_sub_no)  Q,

        DEPOSIT_SUB_ACINFO S where 
        (S.deposit_no=P.deposit_no(+) and S.deposit_sub_no=P.deposit_sub_no(+) )and         	    (S.deposit_no=Q.deposit_no(+) and S.deposit_sub_no=Q.deposit_sub_no(+) ) and
        (S.deposit_no=#DEPOSITNO# and S.deposit_sub_no=#SUBDEPOSITNO#)-->
        
        
        <!--select DEPOSIT_DT,nvl(SHADOW_LIEN,0) as SHADOW_LIEN,nvl(DEPOSIT_AMT,0) as AMOUNT,nvl(P.Total,0) as FREEZEAMT,nvl(Q.Total,0) as LIENAMT,NVL(R.Total,0) as LOSLIENAMT ,nvl(AVAILABLE_BALANCE,0) as CLEAR from 
        (select deposit_no,deposit_sub_no, sum(AMOUNT) as Total from DEPOSIT_FREEZE F 
        where F.deposit_no=#DEPOSITNO:VARCHAR# and F.deposit_sub_no=#SUBDEPOSITNO:VARCHAR# and  ((F.AUTHORIZE_STATUS  = 'AUTHORIZED' and F.STATUS not in ('UNFREEZED')) OR (F.AUTHORIZE_STATUS  = 'REJECTED' and F.STATUS in('UNFREEZED','MODIFIED') ))
        GROUP BY deposit_no,deposit_sub_no)  P, 
        (select deposit_no,deposit_sub_no, sum(LIEN_AMOUNT) as Total from DEPOSIT_LIEN L 
        where L.deposit_no=#DEPOSITNO:VARCHAR# and L.deposit_sub_no=#SUBDEPOSITNO:VARCHAR# and ((L.AUTHORIZE_STATUS  = 'AUTHORIZED' and L.STATUS not in ('UNLIENED')) OR (L.AUTHORIZE_STATUS  = 'REJECTED' and L.STATUS in('UNLIENED','MODIFIED') )) 
        GROUP BY deposit_no,deposit_sub_no)  Q,
        (select deposit_no,deposit_sub_no, sum(LOS_LIEN_AMOUNT) as Total from DEPOSIT_LIEN L 
        where L.deposit_no=#DEPOSITNO:VARCHAR# and L.deposit_sub_no=#SUBDEPOSITNO:VARCHAR# and ((L.AUTHORIZE_STATUS  = 'AUTHORIZED' and L.STATUS not in ('UNLIENED')) OR (L.AUTHORIZE_STATUS  = 'REJECTED' and L.STATUS in('UNLIENED','MODIFIED') )) 
        GROUP BY deposit_no,deposit_sub_no)  R,
        DEPOSIT_SUB_ACINFO S where 
        (S.deposit_no=P.deposit_no(+) and S.deposit_sub_no=P.deposit_sub_no(+) )and         	    (S.deposit_no=Q.deposit_no(+) and S.deposit_sub_no=Q.deposit_sub_no(+) ) and  (S.deposit_no=R.deposit_no(+) and S.deposit_sub_no=R.deposit_sub_no(+) ) AND
        (S.deposit_no=#DEPOSITNO:VARCHAR# and S.deposit_sub_no=#SUBDEPOSITNO:VARCHAR#)-->
        
        select DEPOSIT_DT,nvl(SHADOW_LIEN,0) as SHADOW_LIEN,nvl(DEPOSIT_AMT,0) as AMOUNT,nvl(P.Total,0) as FREEZEAMT,nvl(Q.Total,0) as LIENAMT,NVL(R.Total,0) as LOSLIENAMT ,nvl(AVAILABLE_BALANCE,0) as CLEAR from 
        (select deposit_no,deposit_sub_no, sum(AMOUNT) as Total from DEPOSIT_FREEZE F 
        where F.deposit_no=#DEPOSITNO:VARCHAR# and F.deposit_sub_no=#SUBDEPOSITNO:VARCHAR# and  ((F.AUTHORIZE_STATUS  = 'AUTHORIZED' and F.STATUS not in ('UNFREEZED')) OR (F.AUTHORIZE_STATUS  = 'REJECTED' and F.STATUS in('UNFREEZED','MODIFIED') ))
        GROUP BY deposit_no,deposit_sub_no)  P right join DEPOSIT_SUB_ACINFO S on 
        (S.deposit_no=P.deposit_no and S.deposit_sub_no=P.deposit_sub_no) left join 
        (select deposit_no,deposit_sub_no, sum(LIEN_AMOUNT) as Total from DEPOSIT_LIEN L 
        where L.deposit_no=#DEPOSITNO:VARCHAR# and L.deposit_sub_no=#SUBDEPOSITNO:VARCHAR# and ((L.AUTHORIZE_STATUS  = 'AUTHORIZED' and L.STATUS not in ('UNLIENED')) OR (L.AUTHORIZE_STATUS  = 'REJECTED' and L.STATUS in('UNLIENED','MODIFIED') )) 
        GROUP BY deposit_no,deposit_sub_no)Q on (S.deposit_no=Q.deposit_no and S.deposit_sub_no=Q.deposit_sub_no)
        left join (select deposit_no,deposit_sub_no, sum(LOS_LIEN_AMOUNT) as Total from DEPOSIT_LIEN L 
        where L.deposit_no=#DEPOSITNO:VARCHAR# and L.deposit_sub_no=#SUBDEPOSITNO:VARCHAR# and ((L.AUTHORIZE_STATUS  = 'AUTHORIZED' and L.STATUS not in ('UNLIENED')) OR (L.AUTHORIZE_STATUS  = 'REJECTED' and L.STATUS in('UNLIENED','MODIFIED') )) 
        GROUP BY deposit_no,deposit_sub_no)  R on (S.deposit_no=R.deposit_no and S.deposit_sub_no=R.deposit_sub_no)
         where 
        (S.deposit_no=#DEPOSITNO:VARCHAR# and S.deposit_sub_no=#SUBDEPOSITNO:VARCHAR#)
        
        
    </mapped-statement>               
     
   <dynamic-mapped-statement name="getEditLienEntries" result-class="java.util.LinkedHashMap" >
        <!--  select distinct l.deposit_no as DEPOSIT_ACT_NUM,l.deposit_sub_no as SUBNO,prod_id as PRODID,c.cust_id  
     as CUST_ID,CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME)  as CUSTOMER_NAME
      from DEPOSIT_LIEN L,DEPOSIT_ACINFO a,customer c where       
        l.deposit_no=a.deposit_no and (a.cust_id=c.cust_id) and 
        (l.status not in ('DELETED') or l.status is null) and 
        (l.authorize_status is null or l.authorize_status in ('AUTHORIZED', 'REJECTED') )-->
        <!--        select distinct l.deposit_no as DEPOSIT_ACT_NUM,l.deposit_sub_no as SUBNO,prod_id as PRODID,c.cust_id 
        as CUST_ID,get_cust_name(C.CUST_ID)  as CUSTOMER_NAME
        from DEPOSIT_LIEN L,DEPOSIT_ACINFO a,customer c where -->            
      
<!--        select distinct L.lien_no as lienNo,l.lien_dt as lienDt,prod_id as PRODID,
        l.deposit_no as DEPOSIT_ACT_NUM,l.deposit_sub_no as SUBNO,c.cust_id 
        as CUST_ID,get_cust_name(C.CUST_ID)  as CUSTOMER_NAME,
        l.LIEN_AMOUNT as Lien_amount,LOANS_OTHER_SOCIETY as Loans_other_society from DEPOSIT_LIEN L,DEPOSIT_ACINFO a,customer c where        
        l.deposit_no=a.deposit_no and (a.cust_id=c.cust_id) and L.status!= 'DELETED' AND
        (( l.status ='MODIFIED' and  l.authorize_status in ('REJECTED') or l.authorize_status is null   OR 
        (l.status !='UNLIENED' and l.authorize_status in ('AUTHORIZED') or l.authorize_status is null))) 
        and c.BRANCH_CODE= #BRANCH_CODE:VARCHAR# order by l.lien_no    -->
        select distinct L.lien_no as lienNo,l.lien_dt as lienDt,prod_id as PRODID,
        l.deposit_no as DEPOSIT_ACT_NUM,l.deposit_sub_no as SUBNO,c.cust_id 
        as CUST_ID,get_cust_name(C.CUST_ID) as CUSTOMER_NAME,
        l.LIEN_AMOUNT as Lien_amount,LOANS_OTHER_SOCIETY as Loans_other_society,'DEPOSIT' as DEPOSIT_TYPE from DEPOSIT_LIEN L,DEPOSIT_ACINFO a,customer c where        
        l.deposit_no=a.deposit_no and (a.cust_id=c.cust_id) and L.status!= 'DELETED' AND
        (( l.status ='MODIFIED' and  l.authorize_status in ('REJECTED') or l.authorize_status is null   OR 
        (l.status !='UNLIENED' and l.authorize_status in ('AUTHORIZED') or l.authorize_status is null))) 
        and a.BRANCH_ID=#BRANCH_CODE:VARCHAR#
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="lienNo">
                    UPPER(L.lien_no) LIKE UPPER('%$lienNo$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="lienDt">
                    UPPER(l.lien_dt) LIKE UPPER('%$lienDt$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PRODID">
                    UPPER(prod_id) LIKE UPPER('%$PRODID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="DEPOSIT_ACT_NUM">
                    UPPER(l.deposit_no) LIKE UPPER('%$DEPOSIT_ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="SUBNO">
                    UPPER(l.deposit_sub_no) LIKE UPPER('%$SUBNO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(c.cust_id) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER_NAME">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUSTOMER_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="Lien_amount">
                    UPPER( l.LIEN_AMOUNT) LIKE UPPER('%$Lien_amount$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="Loans_other_society">
                    UPPER(LOANS_OTHER_SOCIETY) LIKE UPPER('%$Loans_other_society$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        union all
        select distinct L.lien_no as lienNo,l.lien_dt as lienDt,prod_id as PRODID,
        l.deposit_no as DEPOSIT_ACT_NUM,l.deposit_sub_no as SUBNO,c.cust_id 
        as CUST_ID,get_cust_name(C.CUST_ID)  as CUSTOMER_NAME,
        l.LIEN_AMOUNT as Lien_amount,LOANS_OTHER_SOCIETY as Loans_other_society,'MDS' as DEPOSIT_TYPE from DEPOSIT_LIEN L,mds_application a,customer c where        
        l.deposit_no=a.chittal_no and (a.cust_id=c.cust_id) and L.status!= 'DELETED' AND
        (( l.status ='MODIFIED' and  l.authorize_status in ('REJECTED') or l.authorize_status is null   OR 
        (l.status !='UNLIENED' and l.authorize_status in ('AUTHORIZED') or l.authorize_status is null))) 
        and a.BRANCH_CODE= #BRANCH_CODE:VARCHAR#
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="lienNo">
                    UPPER(L.lien_no) LIKE UPPER('%$lienNo$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="lienDt">
                    UPPER(l.lien_dt) LIKE UPPER('%$lienDt$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PRODID">
                    UPPER(prod_id) LIKE UPPER('%$PRODID$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="DEPOSIT_ACT_NUM">
                    UPPER(l.deposit_no) LIKE UPPER('%$DEPOSIT_ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="SUBNO">
                    UPPER(l.deposit_sub_no) LIKE UPPER('%$SUBNO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(c.cust_id) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER_NAME">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUSTOMER_NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="Lien_amount">
                    UPPER( l.LIEN_AMOUNT) LIKE UPPER('%$Lien_amount$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="Loans_other_society">
                    UPPER(LOANS_OTHER_SOCIETY) LIKE UPPER('%$Loans_other_society$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        order by 1                                                                                                                                           
    </dynamic-mapped-statement>
     
    <dynamic-mapped-statement name="getDeleteLienEntries" result-class="java.util.LinkedHashMap" >
        select distinct l.deposit_no as DEPOSIT_ACT_NUM,l.deposit_sub_no as SUBNO,prod_id as PRODID,c.cust_id  as CUST_ID,CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME)  as CUSTOMER_NAME from DEPOSIT_LIEN L,DEPOSIT_ACINFO a,customer c where
        l.deposit_no=a.deposit_no and (a.cust_id=c.cust_id) and (l.status not in ('DELETED','UNLIENED') or l.status is null) and (l.authorize_status not in ('REJECTED','AUTHORIZED') or  l.authorize_status is null)
        and c.BRANCH_CODE= #BRANCH_CODE:VARCHAR# 
         <dynamic>
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="DEPOSIT_ACT_NUM">
                    UPPER(l.deposit_no) LIKE UPPER('%$DEPOSIT_ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="SUBNO">
                    UPPER(l.deposit_sub_no) LIKE UPPER('%$SUBNO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="PRODID">
                    UPPER(prod_id) LIKE UPPER('%$PRODID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CUST_ID">
                    UPPER(c.cust_id) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER_NAME">
                    UPPER(CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME)) LIKE UPPER('%$CUSTOMER_NAME$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>     
     
    <mapped-statement name="getAuthorizeLienEntries" result-class="java.util.LinkedHashMap" >
        <!--SELECT L.DEPOSIT_NO AS DEPOSIT_ACT_NUM,L.DEPOSIT_SUB_NO AS SUBNO,LIEN_NO AS LIENNO,
         NVL(LIEN_AMOUNT,0) AS AMOUNT,L.STATUS,NVL(S.AVAILABLE_BALANCE,0) AS BALANCE  FROM
         DEPOSIT_LIEN L,DEPOSIT_SUB_ACINFO S  WHERE (L.AUTHORIZE_STATUS NOT IN 
       ('REJECTED','AUTHORIZED') OR  L.AUTHORIZE_STATUS  IS NULL)  AND S.DEPOSIT_NO=L.DEPOSIT_NO  AND
        S.DEPOSIT_SUB_NO=L.DEPOSIT_SUB_NO AND L.STATUS!='DELETED'  AND (L.REMARKS !='Lien for LTD' OR 
        L.REMARKS IS NULL )  -->   
         
      <!--  SELECT L.DEPOSIT_NO AS DEPOSIT_ACT_NUM,L.DEPOSIT_SUB_NO AS SUBNO,LIEN_NO AS LIENNO,
        NVL(LIEN_AMOUNT,0) AS LIEN_AMOUNT,NVL(LOS_LIEN_AMOUNT,0) AS LOS_LIEN_AMOUNT,L.STATUS,NVL(S.AVAILABLE_BALANCE,0) AS BALANCE,LOANS_OTHER_SOCIETY   FROM
        DEPOSIT_LIEN L,DEPOSIT_SUB_ACINFO S  WHERE (L.AUTHORIZE_STATUS NOT IN 
        ('REJECTED','AUTHORIZED') OR  L.AUTHORIZE_STATUS  IS NULL)  AND S.DEPOSIT_NO=L.DEPOSIT_NO  AND
        S.DEPOSIT_SUB_NO=L.DEPOSIT_SUB_NO AND L.STATUS!='DELETED'  AND (L.REMARKS !='Lien for LTD' OR 
        L.REMARKS IS NULL ) -->
        
        SELECT L.DEPOSIT_NO AS DEPOSIT_ACT_NUM,L.DEPOSIT_SUB_NO AS SUBNO,LIEN_NO AS LIENNO,
        NVL(LIEN_AMOUNT,0) AS LIEN_AMOUNT,NVL(LOS_LIEN_AMOUNT,0) AS LOS_LIEN_AMOUNT,L.STATUS,NVL(S.AVAILABLE_BALANCE,0) AS BALANCE,LOANS_OTHER_SOCIETY,'DEPOSIT' as DEPOSIT_TYPE   FROM
        DEPOSIT_LIEN L,DEPOSIT_SUB_ACINFO S  WHERE (L.AUTHORIZE_STATUS NOT IN 
        ('REJECTED','AUTHORIZED') OR  L.AUTHORIZE_STATUS  IS NULL)  AND S.DEPOSIT_NO=L.DEPOSIT_NO  AND
        S.DEPOSIT_SUB_NO=L.DEPOSIT_SUB_NO AND L.STATUS!='DELETED'  AND (L.REMARKS !='Lien for LTD' OR 
        L.REMARKS IS NULL ) 
        union
        SELECT L.DEPOSIT_NO AS DEPOSIT_ACT_NUM,L.DEPOSIT_SUB_NO AS SUBNO,LIEN_NO AS LIENNO,
        NVL(LIEN_AMOUNT,0) AS LIEN_AMOUNT,NVL(LOS_LIEN_AMOUNT,0) AS LOS_LIEN_AMOUNT,L.STATUS,
        (select sum(NVL(inst_amt,0)) AS BALANCE from mds_receipt_entry A WHERE A.chittal_no=L.DEPOSIT_NO)
        ,LOANS_OTHER_SOCIETY,'MDS' as DEPOSIT_TYPE  FROM
        DEPOSIT_LIEN L,mds_application S  WHERE (L.AUTHORIZE_STATUS NOT IN 
        ('REJECTED','AUTHORIZED') OR  L.AUTHORIZE_STATUS  IS NULL)  AND (S.CHITTAL_NO)=(L.DEPOSIT_NO) AND
        s.sub_no=cast(L.DEPOSIT_SUB_NO as numeric) AND L.STATUS!='DELETED'  AND (L.REMARKS !='Lien for LTD' OR 
        L.REMARKS IS NULL ) 
    </mapped-statement>  
     
    <mapped-statement name="authorizeLienTO" inline-parameters="true">
        UPDATE DEPOSIT_LIEN SET 		
        AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR#,
        AUTHORIZE_DT = #AUTHORIZE_DATE:TIMESTAMP#,
        STATUS=#STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#,
        REMARKS = #REMARKS:VARCHAR#
        WHERE LIEN_NO=#LIENNO:VARCHAR#     
    </mapped-statement>    
    
    <mapped-statement name="rejectUnLienUpdate" inline-parameters="true">
        UPDATE DEPOSIT_LIEN SET 				
        UNLIEN_DT = null,
        UNLIEN_REMARKS = '',
        AUTHORIZE_STATUS = 'REJECTED'	
        WHERE LIEN_NO=#LIENNO:VARCHAR#     
    </mapped-statement>  
    
    <mapped-statement name="updateDeleteLienTO" inline-parameters="true">
        UPDATE DEPOSIT_LIEN SET 		
        STATUS = #status:VARCHAR#,
        STATUS_DT = (SELECT SYS_DATE() FROM DUAL),
        STATUS_BY = #statusBy:VARCHAR#                
        WHERE deposit_no=#depositNo:VARCHAR# and deposit_sub_no=#depositSubNo:VARCHAR# and
        (status not in ('DELETED','UNLIENED') or status is null) and
        (AUTHORIZE_STATUS not in ('REJECTED','AUTHORIZED') or AUTHORIZE_STATUS is null)                
    </mapped-statement>     
    
    <mapped-statement name="updateSubACInfoStatusToUnlien" inline-parameters="true">
        <!--update deposit_sub_acinfo set 
        status='CREATED',
        SUBSTATUS_BY=#USER_ID:VARCHAR#,
        SUBSTATUS_DT=#TODAY_DT:DATE# 
        where deposit_no=#DEPOSIT_ACT_NUM:VARCHAR#         
        and not exists (select distinct deposit_sub_no from deposit_lien 
        where deposit_no=#DEPOSIT_ACT_NUM:VARCHAR# and ((status not in ('DELETED','UNLIENED')) or status is null) and authorize_status='AUTHORIZED'and status='CREATED' and deposit_sub_no = deposit_sub_acinfo.deposit_sub_no)-->
        
        UPDATE DEPOSIT_SUB_ACINFO SET STATUS='CREATED',   
        SUBSTATUS_BY=#USER_ID:VARCHAR#,
        SUBSTATUS_DT=#TODAY_DT# 
        WHERE DEPOSIT_NO=#DEPOSIT_ACT_NUM# 
        AND NOT EXISTS (SELECT DISTINCT DEPOSIT_NO FROM DEPOSIT_LIEN WHERE DEPOSIT_NO=#DEPOSIT_ACT_NUM# AND 
        ((STATUS NOT IN ('DELETED','UNLIENED')) OR STATUS IS NULL) AND 
        AUTHORIZE_STATUS='AUTHORIZED' AND (STATUS='LIEN' OR STATUS='CREATED') AND DEPOSIT_SUB_NO = DEPOSIT_SUB_ACINFO.DEPOSIT_SUB_NO)        
    </mapped-statement>         
    
    <mapped-statement name="updateAvailableBalanceZero" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET AVAILABLE_BALANCE = TOTAL_BALANCE - #AVAILABLE_BALANCE:NUMBER#, 
        STATUS = #STATUS:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#   
    </mapped-statement>          
    
    <mapped-statement name="updateoldDepositLienStatus" inline-parameters="true">
        UPDATE DEPOSIT_LIEN SET AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR#,STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_DT = #AUTHORIZE_DT:DATE#,AUTHORIZE_BY = #AUTHORIZE_BY:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#   
    </mapped-statement>          
    
    <mapped-statement name="updateSubACInfoStatusToLien" inline-parameters="true">
        update deposit_sub_acinfo set 
        status='LIEN',
        SUBSTATUS_BY=#USER_ID:VARCHAR#,
        SUBSTATUS_DT=#TODAY_DT:DATE# 
        where deposit_no=#DEPOSIT_ACT_NUM:VARCHAR#
        and  exists (select distinct deposit_sub_no from deposit_lien 
        where deposit_no=#DEPOSIT_ACT_NUM:VARCHAR# and ((status not in ('DELETED','UNLIENED')) or status is null) and authorize_status='AUTHORIZED' AND 
        deposit_sub_no=deposit_sub_acinfo.deposit_sub_no)
    </mapped-statement>          
    
    <mapped-statement name="getDepositLienProdAcHD" result-class="java.util.HashMap" >
        select p.acct_head as AC_HEAD from LOANS_PRODUCT p 
        where prod_id=#PRODID:VARCHAR#
    </mapped-statement>          
    
    <dynamic-mapped-statement name="getDepositLienProdActNum" result-class="java.util.LinkedHashMap" >
        SELECT L.ACCT_NUM AS ACT_NUM, L.AOD_DT AS OPENING_DATE, B.CUST_ID AS CUST_ID, 
        get_cust_name(C.CUST_ID) AS CUSTOMER_NAME, 
        L.LOAN_BALANCE_PRINCIPAL  AS AMOUNT 
        FROM LOANS_FACILITY_DETAILS L, LOANS_BORROWER B, CUSTOMER C 
        WHERE L.PROD_ID = #PRODID:VARCHAR# 
        AND L.STATUS!='DELETED'
        AND (L.AUTHORIZE_STATUS_1 != 'REJECTED'
        OR L.AUTHORIZE_STATUS_1 IS NULL)   
        <!--(L.AUTHORIZE_STATUS_2 != 'REJECTED' 
        OR L.AUTHORIZE_STATUS_2 IS NULL)-->
        AND L.BORROW_NO = B.BORROW_NO 
        AND B.CUST_ID = C.CUST_ID 
        AND C.BRANCH_CODE = #BRANCH_CODE:VARCHAR# 
        AND (L.ACCT_STATUS IN ('NEW','OPERATIONAL','TRANSFER_IN') )
       <dynamic>
       <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="ACT_NUM">
                    UPPER(L.ACCT_NUM) LIKE UPPER('%$ACT_NUM$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="OPENING_DATE">
                    UPPER(L.AOD_DT) LIKE UPPER('%$OPENING_DATE$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(B.CUST_ID) LIKE UPPER('%$CUST_ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER_NAME">
                    UPPER(get_cust_name(C.CUST_ID)) LIKE UPPER('%$CUSTOMER_NAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="AMOUNT">
                    UPPER(L.LOAN_BALANCE_PRINCIPAL) LIKE UPPER('%$AMOUNT$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>    
    
    <mapped-statement name="getDepositLienAcCustomerID" result-class="java.util.HashMap" >
        select L.AOD_DT as AOD,b.cust_id as CUST_ID, DECODE( c.CUST_TYPE , 'INDIVIDUAL',CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME),COMP_NAME)  as CUSTOMER_NAME  from LOANS_FACILITY_DETAILS L,LOANS_BORROWER b,CUSTOMER c
        where L.ACCT_NUM=#ACTNUM:VARCHAR# and l.borrow_no=b.borrow_no and b.cust_id=c.cust_id
    </mapped-statement>               
    
    <mapped-statement name="getDepositActInfo" result-class="java.util.HashMap" >
        select d.prod_id as PROD_ID,d.cust_id as CUST_ID,decode(c.CUST_TYPE, 'INDIVIDUAL',CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME),comp_name)  as 
        CUSTOMER_NAME,AC_HD_DESC as HD_DESC 
        from DEPOSIT_ACINFO d,CUSTOMER c,AC_HD a,DEPOSITS_PRODUCT p 
        where deposit_no=#DEPOSITNUM:VARCHAR# and d.cust_id=c.cust_id and d.prod_id=p.prod_id 
        and p.acct_HEAD=a.ac_hd_id
    </mapped-statement> 
   
    <dynamic-mapped-statement name="updateShadowLien" inline-parameters="true">
        update deposit_sub_acinfo set 
        <dynamic>
            <isPropertyAvailable prepend=" "   property="MULTIPLE_LIEN_CLOSING">
                shadow_lien= (nvl(shadow_lien,0)+ nvl(CAST(#SHADOWLIEN# AS NUMERIC),0))
            </isPropertyAvailable>
        </dynamic>
        
        <dynamic>
            <isNotPropertyAvailable prepend=" "   property="MULTIPLE_LIEN_CLOSING">
                shadow_lien= #SHADOWLIEN:NUMERIC#
            </isNotPropertyAvailable>
        
        </dynamic>
        where deposit_no=#DEPOSITNO:VARCHAR# and deposit_sub_no=#SUBDEPOSITNO:VARCHAR#
    </dynamic-mapped-statement>    
    
    <!--     <mapped-statement name="updateSubAcInfoBal" inline-parameters="true">-->
    <mapped-statement name="updateSubAcInfoBal" result-class = "java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET 		
        AVAILABLE_BALANCE = AVAILABLE_BALANCE - #LIENAMOUNT:NUMBER#,
        SHADOW_LIEN=SHADOW_LIEN - #SHADOWLIEN:NUMBER#	
        WHERE DEPOSIT_NO=#DEPOSIT_ACT_NUM:VARCHAR#  and DEPOSIT_SUB_NO=CAST(#SUBNO# AS NUMERIC)
    </mapped-statement>     
    
    <mapped-statement name="updateSubAcInfoAvlBal" result-class = "java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET 	STATUS='CREATED',	
        AVAILABLE_BALANCE = AVAILABLE_BALANCE + #LIENAMOUNT:NUMBER#,
        SHADOW_LIEN=SHADOW_LIEN - #SHADOWLIEN:NUMBER#	
        WHERE DEPOSIT_NO=#DEPOSIT_ACT_NUM:VARCHAR#  and DEPOSIT_SUB_NO=#SUBNO:VARCHAR#
    </mapped-statement>     
    
    <mapped-statement name="getDepositLienDetInsert" result-map="getDepositLienTOResult" >
        <!--        SELECT * FROM DEPOSIT_LIEN_TMP WHERE DEPOSIT_NO = #DEPOSIT_NO# AND STATUS !='UNLIENED'-->
        SELECT * FROM DEPOSIT_LIEN WHERE STATUS_DT = (SELECT MAX(STATUS_DT) FROM DEPOSIT_LIEN WHERE DEPOSIT_NO=#DEPOSIT_NO:VARCHAR#)
        AND DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# <!--AND STATUS != 'UNLIENED' AND AUTHORIZE_STATUS = 'AUTHORIZED'-->
    </mapped-statement> 
    <dynamic-mapped-statement name="getDepositLienUnlienTOForRollBack" result-map="getAuthorizeDepositLienTOResult" >
        SELECT * FROM DEPOSIT_LIEN 
        WHERE LIEN_AC_NO=#ACCT_NUM:VARCHAR# and (AUTHORIZE_STATUS IS NOT NULL AND AUTHORIZE_STATUS  in ('AUTHORIZED') )
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="LIEN_STATUS">
                    STATUS ='UNLIENED'
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement> 
    
    <mapped-statement name="InsForTempDepositLienTable" inline-parameters="true">
        EXEC DBMS_MVIEW.REFRESH('DEPOSIT_LIEN_TMP')
    </mapped-statement> 
    
    <mapped-statement name="detailsForLfd" result-class="java.util.HashMap" >
        SELECT COUNT(*) AS CNT FROM LOANS_FACILITY_DETAILS LFD WHERE LFD.ACCT_NUM = #LACT_NUM# AND
        LFD.ACCT_STATUS !='CLOSED' AND LFD.STATUS!='DELETED' AND (AUTHORIZE_STATUS_1 ='AUTHORIZED' OR AUTHORIZE_STATUS_1 IS NULL)
    </mapped-statement> 
                               
    <mapped-statement name="getDetailsForSBLienAccount" result-class="java.util.HashMap" >
        SELECT DEPOSIT_NO,LIEN_AMOUNT,LIEN_AC_NO,LIEN_NO FROM DEPOSIT_LIEN WHERE LIEN_AC_NO = #LIEN_AC_NO:VARCHAR#
        AND LIEN_NO = #LIEN_NO:VARCHAR# AND STATUS != 'UNLIENED'  AND STATUS != 'DELETED' AND AUTHORIZE_STATUS IS NULL
    </mapped-statement> 
   
    <mapped-statement name="getDetailsForSBLienAct" result-class="java.util.HashMap" >
        SELECT SUM(LIEN_AMOUNT) FROM DEPOSIT_LIEN WHERE LIEN_AC_NO = #LIEN_AC_NO:VARCHAR#
        AND STATUS != 'UNLIENED' AND STATUS != 'DELETED'AND AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement> 
       
    <mapped-statement name="getDetForSBLienAct" result-class="java.util.HashMap" >
        SELECT SUM(LIEN_AMOUNT) AS "LIEN_AMT" FROM DEPOSIT_LIEN WHERE LIEN_AC_NO = #LIEN_AC_NO:VARCHAR#
        AND DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        <!--      AND STATUS != 'UNLIENED' AND AUTHORIZE_STATUS = 'AUTHORIZED'-->
    </mapped-statement> 
   
    <mapped-statement name="getDetailsForSBLienActDetails" result-class="java.util.HashMap" >
        SELECT SUM(LIEN_AMOUNT) FROM DEPOSIT_LIEN WHERE LIEN_AC_NO = #LIEN_AC_NO:VARCHAR# 
        AND (AUTHORIZE_STATUS IS NULL OR AUTHORIZE_STATUS = 'AUTHORIZED')
        AND LIEN_DT IS NOT NULL AND LIEN_DT = #LIEN_DT:DATE#
        <!--AND STATUS != 'UNLIENED'-->
    </mapped-statement> 
   
    <mapped-statement name="getDetailsForEditModeSBLienAct" result-class="java.util.HashMap" >
        SELECT LIEN_AMOUNT,LIEN_AMOUNT FROM DEPOSIT_LIEN WHERE LIEN_AC_NO = #LIEN_AC_NO:VARCHAR# 
        AND STATUS != 'UNLIENED' AND STATUS != 'DELETED'
    </mapped-statement> 
   
    <mapped-statement name="getDetailsForEditModeSingleSBLienAct" result-class="java.util.HashMap" >
        SELECT LIEN_AMOUNT,LIEN_AMOUNT FROM DEPOSIT_LIEN WHERE LIEN_NO = #LIEN_NO:VARCHAR# AND 
        STATUS != 'UNLIENED' AND STATUS != 'DELETED'
    </mapped-statement> 
   
    <mapped-statement name="updateForSBLienMarking" inline-parameters="true">
        UPDATE DEPOSIT_LIEN SET 		
        AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR#,
        AUTHORIZE_DT = #AUTHORIZE_DATE:TIMESTAMP#,
        STATUS=#STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#                		
        WHERE LIEN_NO=#LIENNO:VARCHAR#     
    </mapped-statement>    
    
    <mapped-statement name="updateForSBLienUnLienMarking" inline-parameters="true">
        UPDATE DEPOSIT_LIEN SET 		
        AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR#,
        AUTHORIZE_DT = #AUTHORIZE_DATE:TIMESTAMP#,
        STATUS=#STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#                		
        WHERE LIEN_AC_NO=#LIEN_AC_NO:VARCHAR#
    </mapped-statement>    
    
    <mapped-statement name = "update.FlexiDepositUnLien" inline-parameters = "true">
        UPDATE DEPOSIT_LIEN SET STATUS = 'UNLIENED', UNLIEN_DT = #UNLIEN_DT:DATE# 
        WHERE LIEN_AC_NO = #LIEN_AC_NO:VARCHAR# AND STATUS != 'DELETED' AND AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
    
    <mapped-statement name = "update.FlexiDepositClosingUnLien" inline-parameters = "true">
        UPDATE DEPOSIT_LIEN SET STATUS = 'UNLIENED' WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        AND LIEN_AC_NO = #LIEN_AC_NO:VARCHAR# AND STATUS != 'DELETED' AND AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
    
    <mapped-statement name="getDepositLienUnlienFlexiTO" result-map="getAuthorizeDepositLienTOResult" >
        SELECT * FROM DEPOSIT_LIEN 
        WHERE LIEN_NO=#LIEN_NO:VARCHAR# and (AUTHORIZE_STATUS NOT in ('AUTHORIZED') or AUTHORIZE_STATUS is null)
    </mapped-statement>
    
    <mapped-statement name="getSelectFlexiDeteails" result-class="java.util.HashMap" >
        SELECT LIEN_AC_NO FROM DEPOSIT_LIEN 
        WHERE LIEN_NO=#LIENNO:VARCHAR# and UNLIEN_REMARKS = 'FLEXI_DEPOSITS'
    </mapped-statement> 
       
    <mapped-statement name = "getSelectReducingLienAmount" result-class = "java.util.HashMap">
        SELECT SUM(LIEN_AMOUNT)AS LIEN_AMOUNT,AUTHORIZE_STATUS FROM DEPOSIT_LIEN WHERE 
        LIEN_AC_NO = #LIEN_AC_NO:VARCHAR# AND STATUS!='UNLIENED' AND STATUS!='DELETED' AND 
        (AUTHORIZE_STATUS = 'AUTHORIZED' OR AUTHORIZE_STATUS IS NULL) AND
        UNLIEN_REMARKS = 'FLEXI_DEPOSITS' GROUP BY AUTHORIZE_STATUS ORDER BY AUTHORIZE_STATUS DESC
    </mapped-statement>
    
    <mapped-statement name = "getSelectReducingLienAmountDAO" result-class = "java.util.HashMap">
        SELECT LIEN_AMOUNT,LIEN_AC_NO,LIEN_NO,DEPOSIT_NO FROM DEPOSIT_LIEN WHERE LIEN_AC_NO = #LIEN_AC_NO:VARCHAR# 
        AND STATUS!='UNLIENED' AND STATUS!='DELETED' AND (AUTHORIZE_STATUS ='AUTHORIZED' OR AUTHORIZE_STATUS IS NULL)
        AND UNLIEN_REMARKS = 'FLEXI_DEPOSITS'  
        ORDER BY LIEN_NO DESC
    </mapped-statement>
    
    <mapped-statement name ="updateReducingLienAmountDAO" inline-parameters = "true">
        UPDATE DEPOSIT_LIEN SET LIEN_AMOUNT = #LIEN_AMOUNT:NUMBER#,UNLIEN_DT = #UNLIEN_DT:DATE# WHERE 
        DEPOSIT_NO = #DEPOSIT_ACT_NUM:VARCHAR# AND LIEN_NO = #LIEN_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getSelectSumOfDepAmount" result-class = "java.util.HashMap">    
        SELECT SUM(TOTAL_BALANCE) AS TOTAL_BALANCE FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA WHERE
        DEPOSIT_STATUS!='CLOSED' AND DSA.TOTAL_BALANCE >0 AND DSA.STATUS!='DELETED' AND 
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND FLEXI_ACT_NUM = #FLEXI_ACT_NUM:VARCHAR#
    </mapped-statement>

    <mapped-statement name = "getSelectSumOfEachDepAmount" result-class = "java.util.HashMap">    
        SELECT DSA.DEPOSIT_NO,DSA.DEPOSIT_AMT,DSA.TOTAL_BALANCE FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA WHERE
        DEPOSIT_STATUS!='CLOSED' AND DSA.TOTAL_BALANCE >0 AND DSA.STATUS!='DELETED' AND 
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND FLEXI_ACT_NUM = #FLEXI_ACT_NUM:VARCHAR# ORDER BY DEPOSIT_NO DESC
    </mapped-statement>
        
    <mapped-statement name="updateAlreadyReduced" result-class = "java.util.HashMap">
        UPDATE DEPOSIT_LIEN SET REMARKS = 'ALREADY_REDUCED' WHERE LIEN_NO = #LIEN_NO:VARCHAR#
    </mapped-statement> 
        
    <mapped-statement name = "getSelectAlreadyReduced" result-class = "java.util.HashMap">    
        SELECT LIEN_AC_NO,FLEXI_DEPOSIT_AMT FROM DEPOSIT_LIEN DL,ACT_MASTER AM WHERE
        AM.ACT_NUM = LIEN_AC_NO AND LIEN_AC_NO = #FLEXI_ACT_NUM:VARCHAR# AND  
        DL.REMARKS = 'ALREADY_REDUCED'
    </mapped-statement>
    
    <mapped-statement name = "getSelectUnAuthorizedRecords" result-class = "java.util.HashMap">    
        SELECT * FROM DEPOSIT_LIEN WHERE AUTHORIZE_STATUS IS NULL AND STATUS!='UNLIENED'
        AND DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    

    
    <mapped-statement name = "checkIsMds" result-class = "java.util.HashMap">    
        select RECEIPT_HEAD from mds_acct_head where scheme_name=#SCHEME_NAME:VARCHAR# and
        (select count(*) from mds_scheme_details where scheme_name=#SCHEME_NAME:VARCHAR#)='1'
    </mapped-statement>
     
     
     
     
    <dynamic-mapped-statement name="getChits" result-class="java.util.LinkedHashMap" >
        Select ma.chittal_no as DEPOSIT_ACT_NUM,MEMBER_NAME as CUSTOMER_NAME, CUST_ID,ma.SCHEME_NAME as PROD_ID,
        nvl(HOUSE_ST,'') AS HOUSE_NAME,
        MEMBER_TYPE as CUST_TYPE,SCHEME_END_DT as MATURITY_DT,TOTAL_AMOUNT_DIVISION as MATURITY_AMT
        from mds_application ma,mds_scheme_details mc where ma.scheme_name=#PRODID:VARCHAR# 
        and mc.scheme_name=#PRODID:VARCHAR# and
        (ma.status!='DELETED' or ma.status is null) and 
        (ma.AUTHORIZE_STATUS='AUTHORIZED')
        <dynamic>
        <isPropertyAvailable prepend = "" property="FILTERED_LIST">
            <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
            </isEqual>
        </isPropertyAvailable>
        <isParameterPresent>
            <isNotNull prepend="AND"      property="DEPOSIT_ACT_NUM">
                    UPPER(ma.chittal_no) LIKE UPPER('%$DEPOSIT_ACT_NUM$%')
            </isNotNull>
        </isParameterPresent>
        <isParameterPresent>
            <isNotNull prepend="AND"      property="CUSTOMER_NAME">
                    UPPER(MEMBER_NAME) LIKE UPPER('%$CUSTOMER_NAME$%')
            </isNotNull>
        </isParameterPresent>
            <isParameterPresent>
            <isNotNull prepend="AND"      property="CUST_ID">
                    UPPER(CUST_ID) LIKE UPPER('%$CUST_ID$%')
            </isNotNull>
        </isParameterPresent>
           <isParameterPresent>
            <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(ma.SCHEME_NAME) LIKE UPPER('%$PROD_ID$%')
            </isNotNull>
        </isParameterPresent>
          <isParameterPresent>
            <isNotNull prepend="AND"      property="HOUSE_NAME">
                    UPPER(nvl(HOUSE_ST,'')) LIKE UPPER('%$HOUSE_NAME$%')
            </isNotNull>
        </isParameterPresent>
         <isParameterPresent>
            <isNotNull prepend="AND"      property="CUST_TYPE">
                    UPPER(MEMBER_TYPE) LIKE UPPER('%$CUST_TYPE$%')
            </isNotNull>
        </isParameterPresent>
         <isParameterPresent>
            <isNotNull prepend="AND"      property="MATURITY_DT">
                    UPPER(SCHEME_END_DT) LIKE UPPER('%$MATURITY_DT$%')
            </isNotNull>
        </isParameterPresent>
          <isParameterPresent>
            <isNotNull prepend="AND"      property="MATURITY_AMT">
                    UPPER(TOTAL_AMOUNT_DIVISION) LIKE UPPER('%$MATURITY_AMT$%')
            </isNotNull>
        </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
   
    <dynamic-mapped-statement name = "getSubNosChits" result-class = "java.util.HashMap">   
        select sub_no from mds_application  where chittal_no=#DEPOSIT_ACT_NUM:VARCHAR# 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="PROD_ID">
                    scheme_name=#PROD_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement> 
       
     
   
   
    <mapped-statement name = "getMdsAmountDts" result-class = "java.util.HashMap"> 
        Select mc.TOTAL_AMOUNT_DIVISION as CLEAR,nvl(CLEAR_BALANCE,0) from mds_application ma,mds_scheme_details mc where ma.scheme_name=#PROD_ID:VARCHAR#
        and mc.scheme_name=#PROD_ID:VARCHAR# and
        (ma.status!='DELETED' or ma.status is null) and 
        (ma.AUTHORIZE_STATUS='AUTHORIZED')
    </mapped-statement>
   
    <mapped-statement name = "getCurrentAmountFromMDS" result-class = "java.util.HashMap">   
        select nvl(sum(inst_amt),0) as AMOUNT from mds_receipt_entry where CHITTAL_NO=#CHIT_NO:VARCHAR# and SUB_NO=#SUB_NO# and SCHEME_NAME=#PROD_ID:VARCHAR#
    </mapped-statement>
   
   
    <mapped-statement name = "getMdsActInfo" result-class = "java.util.HashMap">   
        select d.scheme_name as PROD_ID,d.cust_id as CUST_ID,decode(c.CUST_TYPE, 'INDIVIDUAL',CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME),comp_name)  as 
        CUSTOMER_NAME,AC_HD_DESC as HD_DESC 
        from mds_application d,CUSTOMER c,AC_HD a,mds_acct_head p 
        where d.chittal_no=#CHITTAL_NO:VARCHAR# and d.cust_id=c.cust_id and d.scheme_name=p.scheme_name 
        and p.RECEIPT_HEAD=a.ac_hd_id
    </mapped-statement>
   
   
    <mapped-statement name = "getLeainMdsData" result-class = "java.util.HashMap"> 
        select 0 as SHADOW_LIEN,nvl(Q.Total,0) as LIENAMT,NVL(R.Total,0) as LOSLIENAMT  from 
        mds_application S RIGHT JOIN (select deposit_no,deposit_sub_no, sum(LIEN_AMOUNT) as Total from DEPOSIT_LIEN L 
        where L.deposit_no='CC000000001' and L.deposit_sub_no='1'and ((L.AUTHORIZE_STATUS  = 'AUTHORIZED' and L.STATUS not in ('UNLIENED')) OR (L.AUTHORIZE_STATUS  = 'REJECTED' and L.STATUS in('UNLIENED','MODIFIED') )) 
        GROUP BY deposit_no,deposit_sub_no)  Q ON (S.chittal_no=Q.deposit_no AND S.sub_no= CAST(Q.deposit_sub_no AS NUMERIC)) JOIN
        (select deposit_no,deposit_sub_no, sum(LOS_LIEN_AMOUNT) as Total from DEPOSIT_LIEN L 
        where L.deposit_no='CC000000001' and L.deposit_sub_no='1' and ((L.AUTHORIZE_STATUS  = 'AUTHORIZED' and L.STATUS not in ('UNLIENED')) OR (L.AUTHORIZE_STATUS  = 'REJECTED' and L.STATUS in('UNLIENED','MODIFIED') )) 
        GROUP BY deposit_no,deposit_sub_no)  R ON (S.chittal_no=R.deposit_no and S.sub_no= CAST(R.deposit_sub_no AS NUMERIC))
        where        
        <!--(S.chittal_no=Q.deposit_no(+) and S.sub_no=Q.deposit_sub_no(+) ) and  (S.chittal_no=R.deposit_no(+) and S.sub_no=R.deposit_sub_no(+) ) AND-->
        (S.chittal_no='CC000000001' and s.sub_no='1')
    </mapped-statement>
   
   

    
    <mapped-statement name = "getExcludeLienFrmStndng" result-class = "java.util.HashMap">    
        SELECT NVL(EXCLUDE_LIEN_FRM_STANDING,'N') AS EXCLUDE_LIEN_FRM_STANDING  FROM DEPOSITS_PROD_SCHEME WHERE PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getExcludeLienFrmIntrstAppl" result-class = "java.util.HashMap">    
        SELECT NVL(EXCLUDE_LIEN_FRM_INTRST_APPL,'N') AS EXCLUDE_LIEN_FRM_INTRST_APPL FROM DEPOSITS_PROD_SCHEME WHERE PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>
    
     <mapped-statement name="updateSubAcInfoOnlyAvlBal" result-class = "java.util.HashMap">  
        UPDATE DEPOSIT_SUB_ACINFO SET 	
        AVAILABLE_BALANCE = AVAILABLE_BALANCE + #LIENAMOUNT#,
        SHADOW_LIEN=SHADOW_LIEN - #SHADOWLIEN#	
        WHERE DEPOSIT_NO=#DEPOSIT_ACT_NUM#  and DEPOSIT_SUB_NO=cast(#SUBNO# as numeric)
    </mapped-statement> 
    
    <mapped-statement name="getDepositLienEntry" result-map="getAuthorizeDepositLienTOResult" >
        SELECT * FROM DEPOSIT_LIEN WHERE DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# AND
        STATUS IN ('UNLIENED') AND AUTHORIZE_STATUS IN ('AUTHORIZED')
    </mapped-statement>
    
    
     <mapped-statement name="updateAvlBalAsDePositAmount" result-class = "java.util.HashMap">  
        UPDATE DEPOSIT_SUB_ACINFO SET 	
        AVAILABLE_BALANCE = DEPOSIT_AMT,
        SHADOW_LIEN=SHADOW_LIEN - #SHADOWLIEN#	
        WHERE DEPOSIT_NO=#DEPOSIT_ACT_NUM#  and DEPOSIT_SUB_NO= cast(#SUBNO# as numeric)
    </mapped-statement> 
    
            
</sql-map>
