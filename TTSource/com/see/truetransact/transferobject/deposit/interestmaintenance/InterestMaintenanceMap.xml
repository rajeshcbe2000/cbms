<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="InterestMaintenanceGroupTOMap">

	<!-- Use InterestMaintenanceGroupTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertInterestMaintenanceGroupTO" inline-parameters="true">
        INSERT INTO DEPOSIT_ROI_GROUP
        (ROI_GROUP_ID, ROI_GROUP_NAME, STATUS, AUTHORIZED_BY, AUTHORIZED_DT, AUTHORIZE_STATUS, CREATED_BY, CREATED_DT, STATUS_BY, STATUS_DT, PRODUCT_TYPE
        ) VALUES (
        #roiGroupId:VARCHAR#, #roiGroupName:VARCHAR#, #status:VARCHAR#, #authorizedBy:VARCHAR#, #authorizedDt:DATE#, #authorizeStatus:VARCHAR#, #createdBy:VARCHAR#, #createdDt:TIMESTAMP#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #productType:VARCHAR#)
    </mapped-statement>

	<!-- Use InterestMaintenanceGroupTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateInterestMaintenanceGroupTO" inline-parameters="true">
        UPDATE DEPOSIT_ROI_GROUP SET 
<!--		ROI_GROUP_ID = #roiGroupId:VARCHAR#,-->
        ROI_GROUP_NAME = #roiGroupName:VARCHAR#,
        STATUS = #status:VARCHAR#,
        PRODUCT_TYPE = #productType:VARCHAR#,
<!--		AUTHORIZED_BY = #authorizedBy:VARCHAR#,
		AUTHORIZED_DT = #authorizedDt:DATE#,
		AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
		CREATED_BY = #createdBy:VARCHAR#,
		CREATED_DT = #createdDt:DATE#, -->
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE ROI_GROUP_ID = #roiGroupId:VARCHAR#
    </mapped-statement>

	<!-- Use InterestMaintenanceGroupTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteInterestMaintenanceGroupTO" inline-parameters="true">
<!--		DELETE FROM DEPOSIT_ROI_GROUP--> 
        UPDATE DEPOSIT_ROI_GROUP SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#
        WHERE ROI_GROUP_ID = #roiGroupId:VARCHAR#
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to InterestMaintenanceGroupTO object (JavaBean) properties -->
    <result-map name="getInterestMaintenanceGroupTOResult" class="com.see.truetransact.transferobject.deposit.interestmaintenance.InterestMaintenanceGroupTO">
        <property name="roiGroupId" column="ROI_GROUP_ID"/>
        <property name="roiGroupName" column="ROI_GROUP_NAME"/>
        <property name="status" column="STATUS"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="createdBy" column="CREATED_BY"/>
        <property name="createdDt" column="CREATED_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="productType" column="PRODUCT_TYPE"/>
        <property name="intType" column="INT_TYPE"/>
    </result-map>
    <mapped-statement name="getSelectInterestMaintenanceGroupTO" result-map="getInterestMaintenanceGroupTOResult" >
        SELECT * FROM DEPOSIT_ROI_GROUP 
        WHERE ROI_GROUP_ID = #value:VARCHAR#
    </mapped-statement>
        
<!--********************************************************************************************-->        

<!-- Use InterestMaintenanceCategotyTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertInterestMaintenanceCategotyTO" inline-parameters="true">
        INSERT INTO DEPOSIT_ROI_GROUP_CAT
        (ROI_GROUP_ID, CATEGORY_ID, STATUS
        ) VALUES (
        #roiGroupId:VARCHAR#, #categoryId:VARCHAR#, #status:VARCHAR#)
    </mapped-statement>

	<!-- Use InterestMaintenanceCategotyTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateInterestMaintenanceCategotyTO" inline-parameters="true">
        UPDATE DEPOSIT_ROI_GROUP_CAT SET 
<!--		ROI_GROUP_ID = #roiGroupId:VARCHAR#,-->
        CATEGORY_ID = #categoryId:VARCHAR#,
        STATUS = #status:VARCHAR#
        WHERE ROI_GROUP_ID = #roiGroupId:VARCHAR#
    </mapped-statement>

	<!-- Use InterestMaintenanceCategotyTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteInterestMaintenanceCategotyTO" inline-parameters="true">
        DELETE FROM DEPOSIT_ROI_GROUP_CAT 
<!--            UPDATE DEPOSIT_ROI_GROUP_CAT SET
                STATUS = #status:VARCHAR#-->
        WHERE ROI_GROUP_ID = #roiGroupId:VARCHAR#
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to InterestMaintenanceCategotyTO object (JavaBean) properties -->
    <result-map name="getInterestMaintenanceCategotyTOResult" class="com.see.truetransact.transferobject.deposit.interestmaintenance.InterestMaintenanceCategotyTO">
        <property name="roiGroupId" column="ROI_GROUP_ID"/>
        <property name="categoryId" column="CATEGORY_ID"/>
        <property name="status" column="STATUS"/>
    </result-map>
    <mapped-statement name="getSelectInterestMaintenanceCategotyTO" result-class="java.util.LinkedHashMap" >
        SELECT * FROM DEPOSIT_ROI_GROUP_CAT 
        WHERE ROI_GROUP_ID = #value:VARCHAR#
    </mapped-statement>
   
<!--********************************************************************************************-->        
           
	<!-- Use InterestMaintenanceProdTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertInterestMaintenanceProdTO" inline-parameters="true">
        INSERT INTO DEPOSIT_ROI_GROUP_PROD
        (ROI_GROUP_ID, PROD_ID, STATUS
        ) VALUES (
        #roiGroupId:VARCHAR#, #prodId:VARCHAR#, #status:VARCHAR#)
    </mapped-statement>

	<!-- Use InterestMaintenanceProdTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateInterestMaintenanceProdTO" inline-parameters="true">
        UPDATE DEPOSIT_ROI_GROUP_PROD SET 
<!--		ROI_GROUP_ID = #roiGroupId:VARCHAR#,-->
        PROD_ID = #prodId:VARCHAR#,
        STATUS = #status:VARCHAR#
        WHERE ROI_GROUP_ID = #roiGroupId:VARCHAR#
    </mapped-statement>

	<!-- Use InterestMaintenanceProdTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteInterestMaintenanceProdTO" inline-parameters="true">
        DELETE FROM DEPOSIT_ROI_GROUP_PROD
<!--                UPDATE DEPOSIT_ROI_GROUP_PROD SET
		STATUS = #status:VARCHAR#  -->
        WHERE ROI_GROUP_ID = #roiGroupId:VARCHAR#
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to InterestMaintenanceProdTO object (JavaBean) properties -->
    <result-map name="getInterestMaintenanceProdTOResult" class="com.see.truetransact.transferobject.deposit.interestmaintenance.InterestMaintenanceProdTO">
        <property name="roiGroupId" column="ROI_GROUP_ID"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="status" column="STATUS"/>
    </result-map>
    <mapped-statement name="getSelectInterestMaintenanceProdTO" result-class="java.util.LinkedHashMap" >
        SELECT * FROM DEPOSIT_ROI_GROUP_PROD 
        WHERE ROI_GROUP_ID = #value:VARCHAR#
    </mapped-statement>

 <!--********************************************************************************************-->        

	<!-- Use InterestMaintenanceTypeTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
	<!-- mapped-statement name="insertInterestMaintenanceTypeTO" inline-parameters="true">
		INSERT INTO DEPOSIT_ROI_GROUP_TYPE
		(ROI_GROUP_ID, RATE_TYPE_ID, STATUS
		) VALUES (
		#roiGroupId:VARCHAR#, #rateTypeId:VARCHAR#, #status:VARCHAR#)
	</mapped-statement -->

	<!-- Use InterestMaintenanceTypeTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
	<!--mapped-statement name="updateInterestMaintenanceTypeTO" inline-parameters="true">
		UPDATE DEPOSIT_ROI_GROUP_TYPE SET 
		ROI_GROUP_ID = #roiGroupId:VARCHAR#,
		RATE_TYPE_ID = #rateTypeId:VARCHAR#,
		STATUS = #status:VARCHAR#
		WHERE ROI_GROUP_ID = #roiGroupId:VARCHAR#
	</mapped-statement -->

	<!-- Use InterestMaintenanceTypeTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
	<!--mapped-statement name="deleteInterestMaintenanceTypeTO" inline-parameters="true">
		DELETE FROM DEPOSIT_ROI_GROUP_TYPE 
                UPDATE DEPOSIT_ROI_GROUP_TYPE SET
		STATUS = #status:VARCHAR#
		WHERE ROI_GROUP_ID = #roiGroupId:VARCHAR#
	</mapped-statement> -->

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to InterestMaintenanceTypeTO object (JavaBean) properties -->
	<!-- result-map name="getInterestMaintenanceTypeTOResult" class="com.see.truetransact.transferobject.deposit.interestmaintenance.InterestMaintenanceTypeTO">
		<property name="roiGroupId" column="ROI_GROUP_ID"/>
		<property name="rateTypeId" column="RATE_TYPE_ID"/>
		<property name="status" column="STATUS"/>
	</result-map -->
	<!-- mapped-statement name="getSelectInterestMaintenanceTypeTO" result-class="java.util.LinkedHashMap" >
		SELECT * FROM DEPOSIT_ROI_GROUP_TYPE 
		WHERE ROI_GROUP_ID = #value#
	</mapped-statement -->

<!--********************************************************************************************-->        

	<!-- Use InterestMaintenanceRateTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertInterestMaintenanceRateTO" inline-parameters="true">
        INSERT INTO DEPOSIT_ROI_GROUP_TYPE_RATE
        (ROI_GROUP_ID, RATE_TYPE_ID, ROI_DATE, FROM_AMOUNT, TO_AMOUNT, FROM_PERIOD, TO_PERIOD, ROI, PENAL_INT, STATUS,
        ROI_ACTIVE_STATUS, ROI_END_DATE, AGAINST_CLEARING_INT, LIMIT_AMOUNT, INT_EXPIRY_LIMIT, STATEMENT_PENEL, OD_INT_RATE,
        AUTHORIZE_BY, AUTHORIZE_DT, AUTHORIZE_STATUS, CREATE_DT, INT_TYPE, INST_TYPE
        ) VALUES (
        #roiGroupId:VARCHAR#, #rateTypeId:VARCHAR#, #roiDate:DATE#, #fromAmount:NUMERIC#, #toAmount:NUMERIC#, 
        #fromPeriod:NUMERIC#, #toPeriod:NUMERIC#, #roi:NUMERIC#, #penalInt:NUMERIC#, #status:VARCHAR#, 
        #roiActiveStatus:VARCHAR#,#roiEndDate:DATE#, #againstClearingInt:NUMERIC#, #limitAmount:NUMERIC#, 
        #intExpiryLimit:NUMERIC#, #statementPenal:NUMERIC#, #odIntRate:NUMERIC#, #authorizedBy:VARCHAR#, 
        #authorizedDt:DATE#, #authorizedStatus:VARCHAR#, #createDt:TIMESTAMP#, #intType:VARCHAR#, #instType:VARCHAR#)
    </mapped-statement>

	<!-- Use InterestMaintenanceRateTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateInterestMaintenanceRateTO" inline-parameters="true">
        UPDATE DEPOSIT_ROI_GROUP_TYPE_RATE SET 
<!--		ROI_GROUP_ID = #roiGroupId:VARCHAR#,-->
        RATE_TYPE_ID = #rateTypeId:VARCHAR#,
        ROI_DATE = #roiDate:DATE#,
        FROM_AMOUNT = #fromAmount:NUMERIC#,
        TO_AMOUNT = #toAmount:NUMERIC#,
        FROM_PERIOD = #fromPeriod:NUMERIC#,
        TO_PERIOD = #toPeriod:NUMERIC#,
        ROI = #roi:NUMERIC#,
        PENAL_INT = #penalInt:NUMERIC#,
        STATUS = #status:VARCHAR#,
        ROI_ACTIVE_STATUS=#roiActiveStatus:VARCHAR#,
        ROI_END_DATE = #roiEndDate:DATE#,
        AGAINST_CLEARING_INT = #againstClearingInt:NUMERIC#,
        LIMIT_AMOUNT = #limitAmount:NUMERIC#,
        INT_EXPIRY_LIMIT = #intExpiryLimit:NUMERIC#,
        STATEMENT_PENEL = #statementPenal:NUMERIC#,
        OD_INT_RATE = #odIntRate:NUMERIC#,
        INT_TYPE = #intType:VARCHAR#,
        INST_TYPE = #instType:VARCHAR#
        WHERE ROI_GROUP_ID = #roiGroupId:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateDepositRoiGroupTypeRate" inline-parameters="true">
        UPDATE DEPOSIT_ROI_GROUP_TYPE_RATE SET ROI_END_DATE=#roiEndDate:DATE# WHERE ROI_END_DATE=NULL AND ROI_GROUP_ID=#roiGroupId:VARCHAR#
    </mapped-statement>
	<!-- Use InterestMaintenanceRateTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteInterestMaintenanceRateTO" inline-parameters="true">
        DELETE FROM DEPOSIT_ROI_GROUP_TYPE_RATE 
<!--                UPDATE DEPOSIT_ROI_GROUP_TYPE_RATE SET
		STATUS = #status:VARCHAR#-->
        WHERE ROI_GROUP_ID = #roiGroupId:VARCHAR#
        AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED')
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to InterestMaintenanceRateTO object (JavaBean) properties -->
    <result-map name="getInterestMaintenanceRateTOResult" class="com.see.truetransact.transferobject.deposit.interestmaintenance.InterestMaintenanceRateTO">
        <property name="roiGroupId" column="ROI_GROUP_ID"/>
        <property name="rateTypeId" column="RATE_TYPE_ID"/>
        <property name="roiDate" column="ROI_DATE"/>
        <property name="fromAmount" column="FROM_AMOUNT"/>
        <property name="toAmount" column="TO_AMOUNT"/>
        <property name="fromPeriod" column="FROM_PERIOD"/>
        <property name="toPeriod" column="TO_PERIOD"/>
        <property name="roi" column="ROI"/>
        <property name="penalInt" column="PENAL_INT"/>
        <property name="status" column="STATUS"/>
        <property name="roiEndDate" column="ROI_END_DATE"/>
        <property name="againstClearingInt" column="AGAINST_CLEARING_INT"/>
        <property name="limitAmount" column="LIMIT_AMOUNT"/>
        <property name="intExpiryLimit" column="INT_EXPIRY_LIMIT"/>
        <property name="statementPenal" column="STATEMENT_PENEL"/>
        <property name="odIntRate" column="OD_INT_RATE"/>
        <property name="authorizedStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizedBy" column="AUTHORIZE_BY"/>
        <property name="authorizedDt" column="AUTHORIZE_DT"/>
        <property name="roiActiveStatus" column="ROI_ACTIVE_STATUS"/>
        <property name="createDt" column="CREATE_DT"/>
        <property name="intType" column="INT_TYPE"/>
        <property name="instType" column="INST_TYPE"/>
    </result-map>
    <dynamic-mapped-statement name="getSelectInterestMaintenanceRateTO" result-map="getInterestMaintenanceRateTOResult" >
        SELECT * FROM DEPOSIT_ROI_GROUP_TYPE_RATE 
        WHERE ROI_GROUP_ID = #ROI_GROUP_ID:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="INT_TYPE">
                    INT_TYPE=#INT_TYPE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>                
        AND (STATUS NOT IN ('DELETED') OR STATUS IS NULL)
       <!-- ORDER BY  FROM_PERIOD ,TO_PERIOD,FROM_AMOUNT,TO_AMOUNT-->
       ORDER BY  ROI_ACTIVE_STATUS,ROI_DATE, FROM_AMOUNT, FROM_PERIOD
                <!--ORDER BY ROI_DATE, FROM_PERIOD-->
    </dynamic-mapped-statement>
        
    <mapped-statement name="getSelectInterestMaintenanceRatewhere" result-map="getInterestMaintenanceRateTOResult" >
        SELECT * FROM DEPOSIT_ROI_GROUP_TYPE_RATE 
        WHERE ROI_GROUP_ID = #ROI_GROUP_ID:VARCHAR#
        AND (STATUS NOT IN ('DELETED')OR STATUS IS NULL)
    </mapped-statement>
        
    <dynamic-mapped-statement name="InterMaintenance.getProductDataOA" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC FROM OP_AC_PRODUCT
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
                <!-- AND AUTHORIZED_STATUS = 'AUTHORIZED' --> 
    <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="InterMaintenance.getProductDataTD" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC,BEHAVES_LIKE FROM DEPOSITS_PRODUCT
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
         <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="BEHAVES_LIKE">
                    UPPER(BEHAVES_LIKE) LIKE UPPER('%$BEHAVES_LIKE$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
   </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="InterMaintenance.getProductDataTL" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC FROM LOANS_PRODUCT
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        and BEHAVES_LIKE != 'OD'
        <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
    <dynamic-mapped-statement name="InterMaintenance.getProductDataTLForDepositCharge" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC FROM DEPOSITS_PRODUCT  
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        union 
        SELECT PROD_ID, PROD_DESC FROM  mds_product_general_details  
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
   </dynamic-mapped-statement>
    <dynamic-mapped-statement name="InterMaintenance.getProductDataTLForLoanCharge" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC FROM LOANS_PRODUCT  
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        union 
        SELECT PROD_ID, PROD_DESC FROM  mds_product_general_details  
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
          <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
    <dynamic-mapped-statement name="InterMaintenance.getProductDataTLAD" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC FROM LOANS_PRODUCT
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
          <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
  </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="InterMaintenance.getProductDataATL" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC FROM AGRILOANS_PRODUCT
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND BEHAVES_LIKE != 'AOD'
        <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>

    <dynamic-mapped-statement name="InterMaintenance.getProductDataAD" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC FROM LOANS_PRODUCT
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND BEHAVES_LIKE IN ('OD')
        <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
        
    <dynamic-mapped-statement name="InterMaintenance.getProductDataBILLS" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC FROM LOANS_PRODUCT
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
        AND BEHAVES_LIKE IN ('BILLS')
        <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
   </dynamic-mapped-statement>
    
   <mapped-statement name="updateIdGenerate" inline-parameters="true">
    UPDATE ID_GENERATION SET CURR_VALUE = CURR_VALUE - 1 WHERE ID_KEY= #ID_KEY:VARCHAR#
   </mapped-statement>
        
    <dynamic-mapped-statement name="InterMaintenance.getProductDataGL" result-class="java.util.LinkedHashMap" >
        SELECT AH.AC_HD_ID AS "A/C HEAD", AC_HD_DESC AS "A/C HEAD DESCRIPTION",
        CR_CASH,DR_CASH
        FROM AC_HD_PARAM AHP, AC_HD AH
        WHERE AH.AC_HD_ID=AHP.AC_HD_ID AND (AHP.STATUS  NOT IN ('DELETED')) and 
        AH.AC_HD_ID in (select ac_hd_id from ac_hd_param where cr_cash='Y' or dr_cash='Y') AND
        AHP.TRANSPOST IN ('MANUAL', 'BOTH') AND 
        AH.AC_HD_ID IN (SELECT BG.AC_HD_ID FROM BRANCH_GL BG, BRANCH_MASTER BM 
        WHERE BG.GROUP_ID = BM.GL_GROUP_ID AND BM.BRANCH_CODE = #BRANCH_CODE:VARCHAR#)
        <dynamic>
              <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="A/C HEAD">
                    UPPER(AH.AC_HD_ID) LIKE UPPER('%$A/C Head$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="A/C HEAD DESCRIPTION">
                    UPPER(AC_HD_DESC) LIKE UPPER('%$A/C Head Description$%')
                </isNotNull>
            </isParameterPresent>
                  <isParameterPresent>
                <isNotNull prepend="AND"      property="CR_CASH">
                    UPPER(CR_CASH) LIKE UPPER('%$CR_CASH$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                  <isParameterPresent>
                <isNotNull prepend="AND"      property="DR_CASH">
                    UPPER(DR_CASH) LIKE UPPER('%$DR_CASH$%')
                </isNotNull>
            </isParameterPresent>
                <isNotNull prepend="AND" property="AC_HD_ID">
                    AH.AC_HD_ID=#AC_HD_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
                
    <dynamic-mapped-statement name="InterMaintenance.getProductDataINV" result-class="java.util.LinkedHashMap" >
        SELECT INVESTMENT_PROD_ID AS PROD_ID,IINVESTMENT_PROD_DESC AS PROD_DESC FROM INVESTMENT_CONF_DETAILS WHERE  
        STATUS!='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED'
        <dynamic>
               <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_ID">
                    UPPER(INVESTMENT_PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PROD_DESC">
                    UPPER(IINVESTMENT_PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OTHER_BANK_SB/CA">
                    INVESTMENT_TYPE IN('OTHER_BANK_SB','OTHER_BANK_CA','OTHER_BANK_SPD')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
                
    <mapped-statement name="InterMaintenance.getCategoryData" result-class="java.util.LinkedHashMap" >
        SELECT LOOKUP_REF_ID, LOOKUP_DESC FROM LOOKUP_MASTER
        WHERE LOOKUP_ID = 'CATEGORY'
        AND (STATUS = 'CREATED' OR STATUS = 'MOFIFIED' OR STATUS = 'UPDATED')
    </mapped-statement>

    <mapped-statement name="InterMaintenance.getRateType" result-class="java.util.LinkedHashMap" >
        SELECT LOOKUP_REF_ID, LOOKUP_DESC FROM LOOKUP_MASTER
        WHERE LOOKUP_Id = 'DEPOSIT.RATE_TYPE'
        AND (STATUS = 'CREATED' OR STATUS = 'MOFIFIED' OR STATUS = 'UPDATED')
    </mapped-statement>
    
    <mapped-statement name="getRowCountOfRoiGroupId" result-class="java.util.HashMap">
        SELECT COUNT(*) AS COUNT FROM DEPOSIT_ROI_GROUP_TYPE_RATE where ROI_GROUP_ID=#ROI_GROUP_ID:VARCHAR#
    </mapped-statement>

    <mapped-statement name="viewInterestMaintenance" result-class="java.util.LinkedHashMap">
        SELECT  ROI_GROUP_ID AS "ROI GroupID", ROI_GROUP_NAME AS "ROI Group Name",
        PRODUCT_TYPE AS "Product Type", AUTHORIZE_STATUS as "Authorize Status"   
        FROM DEPOSIT_ROI_GROUP
        WHERE (STATUS NOT IN ('DELETED')OR STATUS IS NULL)
        AND AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
        
        <!--mapped-statement name="selectInterestMaintenanceRate" result-map="getInterestMaintenanceRateTOResult">
		SELECT * FROM DEPOSIT_ROI_GROUP_TYPE_RATE 
		WHERE ROI_GROUP_ID = #ROIGROUPID# AND  RATE_TYPE_ID = #RATETYPEID# AND (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
	</mapped-statement-->
        
<!-- ==============================AUTHORIZATION===================================================== -->
    <dynamic-mapped-statement name="getSelectInterMaintenance" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT DRG.ROI_GROUP_ID AS "ROI GROUPID", DRG.ROI_GROUP_NAME AS "ROI Group Name", DRG.PRODUCT_TYPE AS "Product Type"
        FROM DEPOSIT_ROI_GROUP DRG, DEPOSIT_ROI_GROUP_TYPE_RATE DRGTR 
        WHERE (DRG.STATUS NOT IN ('DELETED')OR DRG.STATUS IS NULL)  AND DRG.STATUS_BY != #USER_ID:VARCHAR#
        AND DRGTR.STATUS !='DELETED'
        AND cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, HIERARCHY_ID + 1)
        FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DRG.STATUS_BY and DRG.ROI_GROUP_ID=DRGTR.ROI_GROUP_ID)

        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DRGTR.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DRGTR.AUTHORIZE_STATUS IS NULL OR 
                DRGTR.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
        </dynamic>
        ORDER BY DRG.ROI_GROUP_ID                                                                        
    </dynamic-mapped-statement>
        
    <mapped-statement name="authInterMaintenance" result-class="java.util.HashMap">
        UPDATE DEPOSIT_ROI_GROUP SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#, 
        AUTHORIZED_DT = #AUTHORIZEDT:TIMESTAMP#
<!--                AUTHORIZE_REMARKS = #REMARKS:VARCHAR#-->
        WHERE ROI_GROUP_ID = #ROI GROUPID:VARCHAR# 
    </mapped-statement>        
    <mapped-statement name="authInterMaintenanceForDepositRoiGroupTypeRate" result-class="java.util.HashMap">
        UPDATE DEPOSIT_ROI_GROUP_TYPE_RATE SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #AUTHORIZEDT:TIMESTAMP#
<!--                AUTHORIZE_REMARKS = #REMARKS:VARCHAR#-->
        WHERE ROI_GROUP_ID = #ROI GROUPID:VARCHAR# 
        AND ROI_END_DATE IS NULL
        AND STATUS !='DELETED'
    </mapped-statement>        
	
 <!--============================================================================================-->        

    <dynamic-mapped-statement name="getDuplicateGroupData" result-class="java.util.LinkedHashMap" >
        select distinct grp.roi_group_name || ': ' || prod.prod_id || ' , ' || cat.category_id 
        from deposit_roi_group_cat cat, deposit_roi_group_prod prod, deposit_roi_group grp
        where cat.roi_group_id = prod.roi_group_id
        and grp.roi_group_id = prod.roi_group_id 
        and (grp.status NOT IN ('DELETED') OR grp.status is null)
        and grp.product_Type = #PRODUCT_TYPE:VARCHAR#
        <dynamic>
            <iterate prepend="AND" property="prodList" open="(" close=")" conjunction="OR">
                prod.prod_id||cat.CATEGORY_ID = #prodList[]#
                <isParameterPresent>
                    <isNotNull prepend="AND" property="ROIGROUPID">
                        prod.roi_group_id != #ROIGROUPID:VARCHAR#
                    </isNotNull>
                </isParameterPresent>
            </iterate>
                    
        </dynamic>
    </dynamic-mapped-statement>
        
    <mapped-statement name="getSelectDepositsCommision" result-map="getInterestMaintenanceRateTOResult" >
        SELECT * FROM 
        DEPOSIT_ROI_GROUP_TYPE_RATE WHERE ROI_GROUP_ID = #ROI_GROUP_ID:VARCHAR# 
        AND STATUS != 'DELETED'
    </mapped-statement>
        
    <mapped-statement name="getSelectDailyRecrringRecord" result-class="java.util.HashMap">
        SELECT ROI_GROUP_ID FROM DEPOSIT_ROI_GROUP_TYPE_RATE WHERE ROI_GROUP_ID = #ROI_GROUP_ID:VARCHAR#
    </mapped-statement>


    <mapped-statement name="getRoungOffTypeInterest" result-class="java.util.HashMap">
        select INT_ROUNDOFF_TERMS from deposits_prod_intpay where prod_id=#PROD_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getSelDelayAmtRoundOff" result-class="java.util.HashMap">
        select PENAL_ROUNDOFF_REQ,PENAL_ROUNDOFF from DEPOSITS_PROD_RD where PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>

</sql-map>