<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="DeathMarkingTOMap">

	<!-- Use DeathMarkingTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertDeathMarkingTO" inline-parameters="true">
        INSERT INTO DEATH_MARKING
        (DEATH_DT, REPORTED_ON, REPORTED_BY, RELATIONSHIP, REFERENCE_NO, REMARKS, CREATED_BY, CREATED_DT, CUST_ID, STATUS 
        ) VALUES (
        #deathDt:DATE#, #reportedOn:DATE#, #reportedBy:VARCHAR#, #relationship:VARCHAR#, #referenceNo:VARCHAR#, #remarks:VARCHAR#, #createdBy:VARCHAR#, #createdDt:DATE#, #custId:VARCHAR#,#status:VARCHAR# )
    </mapped-statement>

	<!-- Use DeathMarkingTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateDeathMarkingTO" inline-parameters="true">
        UPDATE DEATH_MARKING SET 
        DEATH_DT = #deathDt:DATE#,
        REPORTED_ON = #reportedOn:DATE#,
        REPORTED_BY = #reportedBy:VARCHAR#,
        RELATIONSHIP = #relationship:VARCHAR#,
        REFERENCE_NO = #referenceNo:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        REMARKS = #remarks:VARCHAR#
        WHERE CUST_ID = #custId:VARCHAR#
    </mapped-statement>

	<!-- Use DeathMarkingTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteDeathMarkingTO" inline-parameters="true">
        UPDATE DEATH_MARKING
        SET 
        STATUS = 'DELETED',
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE CUST_ID = #custId:VARCHAR#
    </mapped-statement>

	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to DeathMarkingTO object (JavaBean) properties -->
    <result-map name="getDeathMarkingTOResult" class="com.see.truetransact.transferobject.deposit.deathmarking.DeathMarkingTO">
        <property name="custId" column="CUST_ID"/>
        <property name="deathDt" column="DEATH_DT"/>
        <property name="reportedOn" column="REPORTED_ON"/>
        <property name="reportedBy" column="REPORTED_BY"/>
        <property name="relationship" column="RELATIONSHIP"/>
        <property name="referenceNo" column="REFERENCE_NO"/>
        <property name="remarks" column="REMARKS"/>
        <property name="status" column="STATUS"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="createdDt" column="CREATED_DT"/>
                
    </result-map>
    <mapped-statement name="getSelectDeathMarkingTO" result-map="getDeathMarkingTOResult" >
        SELECT * FROM DEATH_MARKING 
        WHERE CUST_ID = #value:VARCHAR# 
    </mapped-statement>
        
        <!-- This statement is used to execute query for populating the viewall screen -->
    <mapped-statement name="getSelectDeathMarkingMap" result-class="java.util.LinkedHashMap" >
        SELECT CUST.CUST_ID, get_cust_name(CUST.CUST_ID) AS "CUSTOMER NAME", DM.REPORTED_ON  FROM DEATH_MARKING DM, CUSTOMER CUST
        WHERE ( DM.STATUS IS NULL OR DM.STATUS IN ('CREATED', 'MODIFIED') ) AND DM.CUST_ID = CUST.CUST_ID
    </mapped-statement>
        
       
        <!--  This Statement is used to Get the Customer Infromation Both from the AccountMaster,Deposit_AcInfo,Deposit_Sub_Acinfo -->
    <mapped-statement name="selectDeathMarkInfo" result-class="java.util.LinkedHashMap">
        SELECT NULL AS "Deposit No.",  TOTAL_BALANCE AS "Total Balance",  CREATE_DT AS "Create Dt.",NULL AS "Maturity Dt.", NULL AS "Interest", AVAILABLE_BALANCE AS "Available Balance", SETTMT_MODE_ID AS "Settlement", NULL AS "Nominee" FROM ACT_MASTER 
        WHERE CUST_ID = #CUST_ID:VARCHAR# AND STATUS != 'DELETED' 
        UNION 
        SELECT DA.DEPOSIT_NO AS "Deposit No.", NULL AS "Total Balance", NULL AS "Create Dt.", DS.MATURITY_DT AS "Maturity Dt.", DS.RATE_OF_INT AS "Interest", NULL AS "Available Balance", NULL AS "Settlement", DA.NOMINEE_DETAILS AS "Nominee" FROM DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DS 
        WHERE DA.DEPOSIT_NO = DS.DEPOSIT_NO AND DA.CUST_ID = #CUST_ID:VARCHAR# AND DA.STATUS != 'DELETED' AND DS.STATUS != 'DELETED' 
    </mapped-statement>
         
        <!-- This statement is used to execute query to fill up the ui fields for updation or deletion -->
    <mapped-statement name="selectDepositDetails" result-class="java.util.LinkedHashMap">
              <!--  SELECT get_cust_name(CUST.CUST_ID) AS "CUSTOMER NAME" , DAC.DEPOSIT_NO, DAC.SETTLEMENT_MODE,  DAC.NOMINEE_DETAILS From DEPOSIT_ACINFO DAC, CUSTOMER CUST 
                WHERE DAC.CUST_ID = CUST.CUST_ID AND DAC.PROD_ID = #PROD_ID# AND DAC.DEPOSIT_NO NOT IN (SELECT DEPOSIT_NO FROM DEPOSIT_DEATH_MARKING WHERE STATUS != 'DELETED' )-->
        SELECT get_cust_name(CUST.CUST_ID) AS "CUSTOMER NAME" , DAC.DEPOSIT_NO, DAC.SETTLEMENT_MODE,  DAC.NOMINEE_DETAILS From DEPOSIT_ACINFO DAC, CUSTOMER CUST 
        WHERE DAC.CUST_ID = CUST.CUST_ID AND DAC.PROD_ID = #PROD_ID:VARCHAR# AND  NOT EXISTS (SELECT DEPOSIT_NO FROM DEPOSIT_DEATH_MARKING WHERE STATUS != 'DELETED' AND DAC.DEPOSIT_NO=DEPOSIT_NO)
    </mapped-statement>
        
         <!-- This statement is used to execuste the query to fill up a label with customername -->
    <mapped-statement name="getSelectCustomerDetails" result-class="java.util.LinkedHashMap">
             <!-- SELECT CUST_ID, get_cust_name(CUSTOMER.CUST_ID) "CUSTOMER NAME" , PROFESSION, NATIONALITY FROM CUSTOMER WHERE (STATUS NOT IN ('DELETED')) AND  CUST_ID NOT IN (SELECT CUST_ID FROM DEATH_MARKING WHERE STATUS != 'DELETED') ORDER BY CUST_ID  -->
        SELECT CUST_ID, get_cust_name(CUSTOMER.CUST_ID) "CUSTOMER NAME" , PROFESSION, NATIONALITY FROM CUSTOMER WHERE (STATUS NOT IN ('DELETED')) AND   NOT EXISTS (SELECT CUST_ID FROM DEATH_MARKING WHERE STATUS != 'DELETED' AND CUSTOMER.CUST_ID = CUST_ID) ORDER BY CUST_ID
    </mapped-statement> 
          <!-- This Statement is used to Retrieve the CustomerName Based on the customerId -->   
    <mapped-statement name="getSelectCustomerName" result-class="java.util.LinkedHashMap">
        SELECT  get_cust_name(CUSTOMER.CUST_ID) AS "CUSTOMER NAME"  FROM CUSTOMER WHERE (STATUS NOT IN ('DELETED')) AND (CUST_ID = #CUST_ID:VARCHAR#)
    </mapped-statement>     
 
  <!-- =================================================================================== -->        


    <mapped-statement name="updateCustomerMaster" inline-parameters="true">
        UPDATE CUSTOMER SET
        CUSTOMER_STATUS = 'DEATHMARKED'
        WHERE 
        CUST_ID = #CUST_ID:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getDeathMarkingAuthorizeList" result-class="java.util.LinkedHashMap">
        SELECT  CUST.CUST_ID, get_cust_name(CUST.CUST_ID) AS "CUSTOMER NAME", DM.REPORTED_ON  FROM DEATH_MARKING DM, CUSTOMER CUST
        WHERE (DM.STATUS != 'DELETED' OR DM.STATUS IS NULL)
        AND (DM.AUTHORIZE_STATUS NOT IN 
        ('AUTHORIZED', 'REJECTED') OR DM.AUTHORIZE_STATUS IS NULL) AND DM.CUST_ID = CUST.CUST_ID
    </mapped-statement>

    <mapped-statement name="authorizeDeathMarking" result-class="java.util.HashMap">
        UPDATE DEATH_MARKING SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#, 
        AUTHORIZED_DT = #CURR_DATE:DATE#
        WHERE CUST_ID = #CUST_ID:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="rejectDeathMarking" result-class="java.util.HashMap">
        UPDATE DEATH_MARKING SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#, 
        AUTHORIZED_DT = #CURR_DATE:DATE#
        WHERE CUST_ID = #CUST_ID:VARCHAR# 
    </mapped-statement>

</sql-map>