<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="DepositFreezeTOMap">

	<!-- Use DepositFreezeTO object (JavaBean) properties as parameters for insert. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertDepositFreezeTO" inline-parameters="true">
        INSERT INTO DEPOSIT_FREEZE
        (DEPOSIT_NO, DEPOSIT_SUB_NO, FSL_NO, AMOUNT, FREEZE_DT, TYPE, REMARKS, UNFREEZE_DT, STATUS, AUTHORIZE_STATUS, AUTHORIZE_DT, AUTHORIZE_BY, STATUS_BY, STATUS_DT, UNFREEZE_REMARKS
        ) VALUES (
        #depositNo:VARCHAR#, CAST(#depositSubNo# AS NUMERIC), #fslNo:VARCHAR#, #amount:NUMERIC#, #freezeDt:DATE#, #type:VARCHAR#, #remarks:VARCHAR#, #unfreezeDt:TIMESTAMP#, #status:VARCHAR#, #authorizeStatus:VARCHAR#, #authorizeDt:TIMESTAMP#, #authorizeBy:VARCHAR#, #statusBy:VARCHAR#, #statusDt:TIMESTAMP#, #unfreezeRemarks:VARCHAR#)
    </mapped-statement>

	<!-- Use DepositFreezeTO object (JavaBean) properties as parameters for update. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateDepositFreezeTO" inline-parameters="true">
        UPDATE DEPOSIT_FREEZE SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        DEPOSIT_SUB_NO = #depositSubNo:VARCHAR#,		
        AMOUNT = #amount:NUMERIC#,
        FREEZE_DT = #freezeDt:DATE#,
        TYPE = #type:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        UNFREEZE_DT = #unfreezeDt:TIMESTAMP#,
        STATUS = #status:VARCHAR#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        AUTHORIZE_DT = #authorizeDt:TIMESTAMP#,
        AUTHORIZE_BY = #authorizeBy:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        UNFREEZE_REMARKS = #unfreezeRemarks:VARCHAR#
        WHERE FSL_NO = #fslNo:VARCHAR#
    </mapped-statement>

	<!-- Use DepositFreezeTO object (JavaBean) properties as parameters for delete. 
	     Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
        <!--
	<mapped-statement name="deleteDepositFreezeTO" inline-parameters="true">
		DELETE FROM DEPOSIT_FREEZE 
		WHERE deposit_no=#depositNo# and deposit_sub_no=#depositSubNo# 
                and FSL_NO=#fslNo#
	</mapped-statement>
        -->
        
	<!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
	     be auto-mapped results to DepositFreezeTO object (JavaBean) properties -->
    <result-map name="getDepositFreezeTOResult" class="com.see.truetransact.transferobject.deposit.freeze.DepositFreezeTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="depositSubNo" column="DEPOSIT_SUB_NO"/>
        <property name="fslNo" column="FSL_NO"/>
        <property name="amount" column="AMOUNT"/>
        <property name="freezeDt" column="FREEZE_DT"/>
        <property name="type" column="TYPE"/>
        <property name="remarks" column="REMARKS"/>
        <property name="unfreezeDt" column="UNFREEZE_DT"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="unfreezeRemarks" column="UNFREEZE_REMARKS"/>
    </result-map>
    <mapped-statement name="getSelectDepositFreezeTO" result-map="getDepositFreezeTOResult" >
		<!--SELECT * FROM DEPOSIT_FREEZE 
		WHERE DEPOSIT_NO=#DEPOSITNO# and DEPOSIT_SUB_NO=#SUBDEPOSITNO#  and (AUTHORIZE_STATUS  in ('REJECTED','AUTHORIZED') or authorize_status is null)
                and (status is null or status not in ('DELETED','UNFREEZED')) -->
        SELECT * FROM DEPOSIT_FREEZE     WHERE DEPOSIT_NO=#DEPOSITNO:VARCHAR# and DEPOSIT_SUB_NO= cast(#SUBDEPOSITNO# as numeric)
        and (status != 'UNFREEZED' and (AUTHORIZE_STATUS in ('AUTHORIZED') or AUTHORIZE_STATUS is null) OR status != 'CREATED' and (AUTHORIZE_STATUS in ('REJECTED') or AUTHORIZE_STATUS is null)) and STATUS!='DELETED'
    </mapped-statement>
        
    <result-map name="getDeleteDepositFreezeTOResult" class="com.see.truetransact.transferobject.deposit.freeze.DepositFreezeTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="depositSubNo" column="DEPOSIT_SUB_NO"/>
        <property name="fslNo" column="FSL_NO"/>
        <property name="amount" column="AMOUNT"/>
        <property name="freezeDt" column="FREEZE_DT"/>
        <property name="type" column="TYPE"/>
        <property name="remarks" column="REMARKS"/>
        <property name="unfreezeDt" column="UNFREEZE_DT"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="unfreezeRemarks" column="UNFREEZE_REMARKS"/>
    </result-map>
    <mapped-statement name="getDeleteDepositFreezeTO" result-map="getDeleteDepositFreezeTOResult" >
        SELECT * FROM DEPOSIT_FREEZE 
        WHERE DEPOSIT_NO=#DEPOSITNO:VARCHAR# and DEPOSIT_SUB_NO=#SUBDEPOSITNO:VARCHAR# and (AUTHORIZE_STATUS not in ('REJECTED','AUTHORIZED') or authorize_status is null)
        and (status is null or status not in ('DELETED','UNFREEZED')) 
    </mapped-statement>     
        
        
         
    <result-map name="getAuthorizeDepositFreezeTOResult" class="com.see.truetransact.transferobject.deposit.freeze.DepositFreezeTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="depositSubNo" column="DEPOSIT_SUB_NO"/>
        <property name="fslNo" column="FSL_NO"/>
        <property name="amount" column="AMOUNT"/>
        <property name="freezeDt" column="FREEZE_DT"/>
        <property name="type" column="TYPE"/>
        <property name="remarks" column="REMARKS"/>
        <property name="unfreezeDt" column="UNFREEZE_DT"/>
        <property name="status" column="STATUS"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="unfreezeRemarks" column="UNFREEZE_REMARKS"/>
    </result-map>
    <mapped-statement name="getAuthorizeDepositFreezeTO" result-map="getAuthorizeDepositFreezeTOResult" >
        SELECT * FROM DEPOSIT_FREEZE 
        WHERE DEPOSIT_NO=#DEPOSITNO:VARCHAR# and DEPOSIT_SUB_NO=cast(#SUBDEPOSITNO# as numeric) and FSL_NO=#FREEZENO:VARCHAR#  and (AUTHORIZE_STATUS not in ('REJECTED','AUTHORIZED') or authorize_status is null)        
    </mapped-statement>      
        
        
    <mapped-statement name="getFreezeSubDepositAmount" result-class="java.util.HashMap" >
      <!--  select DEPOSIT_DT,nvl(SHADOW_FREEZE,0) as SHADOW_FREEZE,nvl(DEPOSIT_AMT,0) as AMOUNT,nvl(P.Total,0) as FREEZEAMT,nvl(Q.Total,0) as LIENAMT,nvl(AVAILABLE_BALANCE,0) as CLEAR from 
        (select deposit_no,deposit_sub_no, sum(AMOUNT) as Total from DEPOSIT_FREEZE F 
        where F.deposit_no=#DEPOSITNO# and F.deposit_sub_no=#SUBDEPOSITNO#  and 
        (AUTHORIZE_STATUS='AUTHORIZED')
             and (status is null or status not in('DELETED','UNFREEZED'))
        GROUP BY deposit_no,deposit_sub_no) P,

        (select deposit_no,deposit_sub_no, sum(LIEN_AMOUNT) as Total from DEPOSIT_LIEN L 
        where L.deposit_no=#DEPOSITNO# and L.deposit_sub_no=#SUBDEPOSITNO# and 
        (AUTHORIZE_STATUS='AUTHORIZED')
             and (status is null or status not in('DELETED','UNLIENED'))
        GROUP BY deposit_no,deposit_sub_no)  Q,
        
        DEPOSIT_SUB_ACINFO S where 
        (S.deposit_no=P.deposit_no(+) and S.deposit_sub_no=P.deposit_sub_no(+) )and         	    (S.deposit_no=Q.deposit_no(+) and S.deposit_sub_no=Q.deposit_sub_no(+) ) and
        (S.deposit_no=#DEPOSITNO# and S.deposit_sub_no=#SUBDEPOSITNO#)-->
        select DEPOSIT_DT,nvl(SHADOW_FREEZE,0) as SHADOW_FREEZE,nvl(DEPOSIT_AMT,0) as AMOUNT,nvl(P.Total,0) as FREEZEAMT,nvl(Q.Total,0) as LIENAMT,nvl(AVAILABLE_BALANCE,0) as CLEAR from 
        (select deposit_no,deposit_sub_no, sum(AMOUNT) as Total from DEPOSIT_FREEZE F 
        where F.deposit_no=#DEPOSITNO:VARCHAR# and F.deposit_sub_no=#SUBDEPOSITNO:VARCHAR#  and  ((F.AUTHORIZE_STATUS  = 'AUTHORIZED' and F.STATUS not in ('UNFREEZED')) OR (F.AUTHORIZE_STATUS  = 'REJECTED' and F.STATUS in('UNFREEZED','MODIFIED') ))
        GROUP BY deposit_no,deposit_sub_no) P right join DEPOSIT_SUB_ACINFO  S on  S.deposit_no = P.deposit_no
        and S.deposit_sub_no = P.deposit_sub_no left join 
        (select deposit_no,deposit_sub_no, sum(LIEN_AMOUNT) as Total from DEPOSIT_LIEN L 
        where L.deposit_no=#DEPOSITNO# and L.deposit_sub_no=#SUBDEPOSITNO:VARCHAR# and 
        (AUTHORIZE_STATUS='AUTHORIZED')
        and (status is null or status not in('DELETED','UNLIENED'))
        GROUP BY deposit_no,deposit_sub_no)  Q on S.deposit_no = Q.deposit_no
        AND S.deposit_sub_no = Q.deposit_sub_no
        where (S.deposit_no=#DEPOSITNO# AND S.deposit_sub_no=#SUBDEPOSITNO:VARCHAR#)
    </mapped-statement>     
     
    <mapped-statement name="getEditFreezeEntries" result-class="java.util.LinkedHashMap" >
      <!-- select distinct f.deposit_no as DEPOSIT_ACT_NUM,f.deposit_sub_no as SUBNO,prod_id as PRODID,c.cust_id  as CUST_ID,
      CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME)  as CUSTOMER_NAME from  
        DEPOSIT_FREEZE f,DEPOSIT_ACINFO a,customer c where        
         f.deposit_no=a.deposit_no and (a.cust_id=c.cust_id) and 
         (f.status not in ('DELETED') or f.status is null) and
          (f.authorize_status is null or f.authorize_status in ('AUTHORIZED', 'REJECTED') )-->
        select distinct f.deposit_no as DEPOSIT_ACT_NUM,f.deposit_sub_no as SUBNO,prod_id as PRODID,c.cust_id  as CUST_ID, 
        get_cust_name(C.CUST_ID)  as CUSTOMER_NAME from      
        DEPOSIT_FREEZE f,DEPOSIT_ACINFO a,customer c where
        f.deposit_no=a.deposit_no and (a.cust_id=c.cust_id)    and f.status!= 'DELETED' AND        
        (( f.status ='MODIFIED' and  f.authorize_status in ('REJECTED') or f.authorize_status is null   OR 
        (f.status !='UNFREEZED' and f.authorize_status in ('AUTHORIZED') or f.authorize_status is null))) 
        <!--and c.BRANCH_CODE= #BRANCH_CODE:VARCHAR#  -->
        and A.BRANCH_ID = #BRANCH_CODE:VARCHAR#
    </mapped-statement> 
     
    <mapped-statement name="getDeleteFreezeEntries" result-class="java.util.LinkedHashMap" >
        select distinct f.deposit_no as DEPOSIT_ACT_NUM,f.deposit_sub_no as SUBNO,prod_id as PRODID,c.cust_id  as CUST_ID,CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME)  as CUSTOMER_NAME from 
        DEPOSIT_FREEZE f,DEPOSIT_ACINFO a,customer c where
        f.deposit_no=a.deposit_no and (a.cust_id=c.cust_id) and (f.status not in ('DELETED','UNFREEZED') or f.status is null) and (f.authorize_status not in ('REJECTED','AUTHORIZED') or  f.authorize_status is null)
        and c.BRANCH_CODE= #BRANCH_CODE:VARCHAR# 
    </mapped-statement> 
     
    <mapped-statement name="getAuthorizeFreezeEntries" result-class="java.util.LinkedHashMap" >
        select f.deposit_no as DEPOSIT_ACT_NUM,f.deposit_sub_no as SUBNO,FSL_NO as FSLNO,nvl(AMOUNT,0) as AMOUNT,f.STATUS,nvl(S.AVAILABLE_BALANCE,0) as BALANCE from  DEPOSIT_FREEZE f,DEPOSIT_SUB_ACINFO S 
        where (f.authorize_status not in ('REJECTED','AUTHORIZED') or  f.authorize_status  is null) and
        S.deposit_no=f.deposit_no and S.deposit_sub_no=f.deposit_sub_no  AND f.STATUS !='DELETED'
    </mapped-statement> 
     
    <mapped-statement name="authorizeFreezeTO" inline-parameters="true">
        UPDATE DEPOSIT_FREEZE SET 		
        AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR#,
        STATUS=#STATUS:VARCHAR#,
        AUTHORIZE_DT = #AUTHORIZE_DATE:TIMESTAMP#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#		
        WHERE FSL_NO=#FSLNO:VARCHAR#     
    </mapped-statement>     
    
    <mapped-statement name="rejectUnFreezeUpdate" inline-parameters="true">
        UPDATE DEPOSIT_FREEZE SET 				
        UNFREEZE_DT = null,
        UNFREEZE_REMARKS = '',
        AUTHORIZE_STATUS= 'REJECTED'		
        WHERE FSL_NO=#FSLNO:VARCHAR#     
    </mapped-statement>  
    
    <mapped-statement name="updateDeleteFreezeTO" inline-parameters="true">
        UPDATE DEPOSIT_FREEZE SET 		
        STATUS = #status:VARCHAR#,
        STATUS_DT = #statusDt:TIMESTAMP#,
        STATUS_BY = #statusBy:VARCHAR#                
        WHERE deposit_no=#depositNo:VARCHAR# and deposit_sub_no=#depositSubNo:VARCHAR# and
        (status not in ('DELETED','UNFREEZED') or status is null) and
        (AUTHORIZE_STATUS not in ('REJECTED','AUTHORIZED') or AUTHORIZE_STATUS is null)                
    </mapped-statement>  
    
    <mapped-statement name="updateSubACInfoStatusToUnFreeze" inline-parameters="true">
        update deposit_sub_acinfo set 
        status='MODIFIED',
        SUBSTATUS_BY=#USER_ID:VARCHAR#,
        SUBSTATUS_DT=#TODAY_DT:DATE# 
        where deposit_no=#DEPOSIT_ACT_NUM:VARCHAR#
       <!-- and deposit_sub_no not in (select distinct deposit_sub_no from deposit_freeze 
        where deposit_no=#DEPOSIT_ACT_NUM# and ((status not in ('DELETED','UNFREEZED')) or status is null) and authorize_status='AUTHORIZED')-->
        and  not EXISTS (select distinct deposit_sub_no from deposit_freeze 
        where deposit_no=#DEPOSIT_ACT_NUM:VARCHAR# and ((status not in ('DELETED','UNFREEZED')) or status is null) and authorize_status='AUTHORIZED' AND deposit_freeze.deposit_sub_no=deposit_sub_no)
        and status='FREEZE'
    </mapped-statement>         
    
    <mapped-statement name="updateSubACInfoStatusToFreeze" inline-parameters="true">
        update deposit_sub_acinfo set 
        status='FREEZE', 
        SUBSTATUS_BY=#USER_ID:VARCHAR#,
        SUBSTATUS_DT=#TODAY_DT:DATE#      
        where deposit_no=#DEPOSIT_ACT_NUM#         
        and deposit_sub_no in (select distinct deposit_sub_no from deposit_freeze 
        where deposit_no=#DEPOSIT_ACT_NUM# and ((status not in ('DELETED','UNFREEZED')) or status is null) and authorize_status='AUTHORIZED')
    </mapped-statement>             
   
    <mapped-statement name="updateShadowFreeze" inline-parameters="true">
        update deposit_sub_acinfo 
        set shadow_freeze=#SHADOWFREEZE:NUMERIC# 
        where deposit_no=#DEPOSITNO# and deposit_sub_no=cast(#SUBDEPOSITNO# as numeric)
    </mapped-statement>    
    
    <mapped-statement name="Freeze.updateSubAcInfoBal" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET 		
        AVAILABLE_BALANCE = AVAILABLE_BALANCE - #FREEZEAMOUNT:NUMBER#,
        SHADOW_FREEZE=SHADOW_FREEZE - #SHADOWFREEZE:NUMBER#	
        WHERE DEPOSIT_NO=#DEPOSIT_ACT_NUM:VARCHAR#  and DEPOSIT_SUB_NO= cast(#SUBNO# as numeric)
    </mapped-statement>        

</sql-map>