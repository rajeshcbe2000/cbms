<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sql-map PUBLIC "-//iBATIS.com//DTD SQL Map 1.0//EN" "http://www.ibatis.com/dtd/sql-map.dtd">
<sql-map name="AccInfoTOMap">

    <!-- =================================================================================== -->
    <!-- DEPOSIT ACINFO  Queries (Begin) -->

    <!-- Use AccInfoTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertAccInfoTO" inline-parameters="true">
        INSERT INTO DEPOSIT_ACINFO
        (OPENING_MODE, PROD_ID, CUST_TYPE, CUST_ID, DEPOSIT_NO, SETTLEMENT_MODE, POA, STANDING_INSTRUCT, CONSTITUTION, ADDR_TYPE, CATEGORY, FIFTEENH_DECLARE, REMARKS, PAN_NUMBER, COMM_ADDRESS, AUTHORIZED_SIGNATORY, TAX_DEDUCTIONS, NOMINEE_DETAILS, STATUS, AUTHORIZED_BY, AUTHORIZED_DT, AUTHORIZE_STATUS, CREATED_BY, CREATED_DT, STATUS_BY, STATUS_DT, BRANCH_ID, RENEWAL_FROM_DEPOSIT, RENEWAL_COUNT, AGENT_ID, DEPOSIT_STATUS, FLEXI_ACT_NUM, INITIATED_BRANCH,DEATH_CLAIM,AUTO_RENEWAL,RENEW_WITH_INT,MAT_ALERT_REPORT,MEMBER,TRANS_OUT,PRINTING_NO,REFERENCE_NO,ACC_ZERO_BAL_YN,MULTIPLE_DEPOSIT_ID,MDS_GROUP,MDS_REMARKS
        ,INTRODUCER,GROUP_NO) VALUES (
        #openingMode:VARCHAR#, #prodId:VARCHAR#, #custType:VARCHAR#, #custId:VARCHAR#, #depositNo:VARCHAR#, #settlementMode:VARCHAR#, #poa:VARCHAR#, #standingInstruct:VARCHAR#, #constitution:VARCHAR#, #addressType:VARCHAR#, #category:VARCHAR#, #fifteenhDeclare:VARCHAR#, #remarks:VARCHAR#, #panNumber:VARCHAR#, #commAddress:VARCHAR#, #authorizedSignatory:VARCHAR#, #taxDeductions:VARCHAR#, #nomineeDetails:VARCHAR#, #status:VARCHAR#, #authorizedBy:VARCHAR#, #authorizedDt:DATE#, #authorizeStatus:VARCHAR#, #createdBy:VARCHAR#, #createdDt:DATE#, #statusBy:VARCHAR#, #statusDt:DATE#, 
        #branchId:VARCHAR#, #renewalFromDeposit:VARCHAR#, #renewalCount:NUMERIC#, #agentId:VARCHAR#, 'NEW', #flexiActNum:VARCHAR#, #initiatedBranch:VARCHAR#,#deathClaim:VARCHAR#,#autoRenewal:VARCHAR#,#renewWithInt:VARCHAR#,#matAlertRep:VARCHAR#,#member:VARCHAR#,#transOut:VARCHAR#,#printingNo:VARCHAR#,#referenceNo:VARCHAR#,#accZeroBalYN:VARCHAR#,#multipleDepositId:VARCHAR#,#mdsGroup:VARCHAR#,#mdsRemarks:VARCHAR#,#introducer:VARCHAR#,#depositGroup:VARCHAR#)
    </mapped-statement>

    <!-- Use AccInfoTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateAccInfoTO" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO SET 
        <!--    CREATED_BY = #createdBy:VARCHAR#,
        CREATED_DT = #createdDt:DATE#,
        AUTHORIZED_BY = #authorizedBy:VARCHAR#,
        AUTHORIZED_DT = #authorizedDt:DATE#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        BRANCH_ID = #branchId:VARCHAR# -->                
        OPENING_MODE = #openingMode:VARCHAR#,
        <!--PROD_ID = #prodId:VARCHAR#,-->
        CUST_TYPE = #custType:VARCHAR#,
        CUST_ID = #custId:VARCHAR#,
        DEPOSIT_NO = #depositNo:VARCHAR#,
        SETTLEMENT_MODE = #settlementMode:VARCHAR#,
        POA = #poa:VARCHAR#,
        STANDING_INSTRUCT = #standingInstruct:VARCHAR#,
        CONSTITUTION = #constitution:VARCHAR#,
        ADDR_TYPE = #addressType:VARCHAR#,
        CATEGORY = #category:VARCHAR#,
        FIFTEENH_DECLARE = #fifteenhDeclare:VARCHAR#,
        REMARKS = #remarks:VARCHAR#,
        PAN_NUMBER = #panNumber:VARCHAR#,
        COMM_ADDRESS = #commAddress:VARCHAR#,
        AUTHORIZED_SIGNATORY = #authorizedSignatory:VARCHAR#,
        TAX_DEDUCTIONS = #taxDeductions:VARCHAR#,
        NOMINEE_DETAILS = #nomineeDetails:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        AGENT_ID = #agentId#,
        FLEXI_ACT_NUM = #flexiActNum:VARCHAR#, 
        STATUS_DT = #statusDt:DATE#,
        <!--        RENEWAL_COUNT = #renewalCount:NUMERIC#,
        RENEWAL_FROM_DEPOSIT = #renewalFromDeposit:VARCHAR#,-->
        INITIATED_BRANCH = #initiatedBranch:VARCHAR#,
        DEATH_CLAIM = #deathClaim:VARCHAR#,
        AUTO_RENEWAL = #autoRenewal:VARCHAR#,
        RENEW_WITH_INT = #renewWithInt:VARCHAR#,        
        MAT_ALERT_REPORT = #matAlertRep:VARCHAR#,
        MEMBER = #member:VARCHAR#,
        TRANS_OUT = #transOut:VARCHAR#,
        <!--        AUTHORIZED_BY = #authorizedBy:VARCHAR#, -->
        AUTHORIZED_DT = #authorizedDt:DATE#,
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        PRINTING_NO = #printingNo:VARCHAR#,
        ACC_ZERO_BAL_YN=#accZeroBalYN:VARCHAR#,
        MDS_GROUP = #mdsGroup:VARCHAR#,
        MDS_REMARKS = #mdsRemarks:VARCHAR#,
        INTRODUCER=#introducer:VARCHAR#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR# 
    </mapped-statement>
    
    <!-- Use AccInfoTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteAccInfoTO" inline-parameters="true">
        UPDATE DEPOSIT_ACINFO SET 
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR# 
    </mapped-statement>

    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to AccInfoTO object (JavaBean) properties -->
    <result-map name="getAccInfoTOResult" class="com.see.truetransact.transferobject.deposit.AccInfoTO">
        <property name="openingMode" column="OPENING_MODE"/>
        <property name="prodId" column="PROD_ID"/>
        <property name="custType" column="CUST_TYPE"/>
        <property name="custId" column="CUST_ID"/>
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="settlementMode" column="SETTLEMENT_MODE"/>
        <property name="poa" column="POA"/>
        <property name="standingInstruct" column="STANDING_INSTRUCT"/>
        <property name="constitution" column="CONSTITUTION"/>
        <property name="addressType" column="ADDR_TYPE"/>
        <property name="category" column="CATEGORY"/>
        <property name="fifteenhDeclare" column="FIFTEENH_DECLARE"/>
        <property name="remarks" column="REMARKS"/>
        <property name="panNumber" column="PAN_NUMBER"/>
        <property name="commAddress" column="COMM_ADDRESS"/>
        <property name="authorizedSignatory" column="AUTHORIZED_SIGNATORY"/>
        <property name="taxDeductions" column="TAX_DEDUCTIONS"/>
        <property name="nomineeDetails" column="NOMINEE_DETAILS"/>
        <property name="status" column="STATUS"/>
        <property name="authorizedBy" column="AUTHORIZED_BY"/>
        <property name="authorizedDt" column="AUTHORIZED_DT"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="createdBy" column="CREATED_BY"/>
        <property name="createdDt" column="CREATED_DT"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="branchId" column="BRANCH_ID"/>
        <property name="renewalFromDeposit" column="RENEWAL_FROM_DEPOSIT"/>
        <property name="renewalCount" column="RENEWAL_COUNT"/>
        <property name="agentId" column="AGENT_ID"/>
        <property name="flexiActNum" column="FLEXI_ACT_NUM"/>
        <property name="initiatedBranch" column="INITIATED_BRANCH"/>
        <property name="deathClaim" column ="DEATH_CLAIM"/>
        <property name="autoRenewal" column ="AUTO_RENEWAL"/>
        <property name="renewWithInt" column ="RENEW_WITH_INT"/>
        <property name="matAlertRep" column ="MAT_ALERT_REPORT"/>
        <property name="member" column ="MEMBER"/>
        <property name="transOut" column ="TRANS_OUT"/>
        <property name="printingNo" column ="PRINTING_NO"/>  
        <property name="accZeroBalYN" column ="ACC_ZERO_BAL_YN"/>  
        <property name="introducer" column ="INTRODUCER"/>
    </result-map>
    
    <!-- View all Deposit account info Queries -->
    <dynamic-mapped-statement name="viewAllAccInfo" result-class="java.util.LinkedHashMap" >
        <!--        SELECT DEPOSIT_NO AS "Deposit No", OPENING_MODE as "Opening Mode",
        PROD_ID as "Product Id",DEPO.AUTHORIZE_STATUS as"authorized",  
        get_cust_name(CUST.CUST_ID)  as "Customer"        
        FROM DEPOSIT_ACINFO DEPO, CUSTOMER CUST WHERE
        DEPO.CUST_ID = CUST.CUST_ID AND DEPO.STATUS not in ('DELETED', 'REJECTED')
        AND(DEPO.DEPOSIT_STATUS NOT IN ('CLOSED') OR DEPO.DEPOSIT_STATUS IS NULL)
        AND BRANCH_ID = #SELECTED_BRANCH_ID#
        ORDER BY DEPOSIT_NO --> <!--COMMENTED BY SATHIYA--> 
        <!--SELECT DSA.DEPOSIT_NO AS "Deposit No",STREET AS HOUSE_NAME, OPENING_MODE as "Opening Mode", PROD_ID as "Product Id",DEPO.AUTHORIZE_STATUS as"authorized", 
        get_cust_name(CUST.CUST_ID) as "Customer", 
        DSA.DEPOSIT_DT AS "Deposit Dt",DSA.DEPOSIT_AMT "Deposit Amt", DSA.MATURITY_DT AS "Maturity Dt",DSA.MATURITY_AMT 
        AS "Maturity Amt"  ,DSA.SALARY_RECOVERY , DSA.LOCK_STATUS ,OAN.OLD_ACT_NUM,DEPO.REFERENCE_NO FROM DEPOSIT_ACINFO DEPO, CUSTOMER CUST, CUST_ADDR CA, DEPOSIT_SUB_ACINFO DSA ,OLD_AC_NOS OAN WHERE DEPO.CUST_ID = CUST.CUST_ID AND 
        CA.CUST_ID=CUST.CUST_ID AND CA.ADDR_TYPE= CUST.COMM_ADDR_TYPE AND OAN.NEW_ACT_NUM(+)= DEPO.DEPOSIT_NO  AND
        DEPO.STATUS not in ('DELETED', 'REJECTED') AND DSA.DEPOSIT_NO = DEPO.DEPOSIT_NO AND 
        (DSA.ACCT_STATUS IN ('CLOSED','NEW') OR DEPO.DEPOSIT_STATUS IS NULL AND DSA.CLOSE_DT IS NULL) AND         
        (DEPO.AUTHORIZE_STATUS IS NULL OR DEPO.AUTHORIZE_STATUS NOT  IN  ( 'REJECTED')) AND -->
        <!--        (DSA.TOTAL_INT_DEBIT IS NULL OR DSA.TOTAL_INT_DEBIT != 1) AND -->
        SELECT DSA.DEPOSIT_NO AS "Deposit No",STREET AS HOUSE_NAME,OPENING_MODE AS "Opening Mode",PROD_ID AS "Product Id",
        DEPO.AUTHORIZE_STATUS AS "authorized",get_cust_name(cust.cust_id)AS "Customer",DSA.DEPOSIT_DT AS "Deposit Dt",DSA.DEPOSIT_AMT "Deposit Amt",DSA.MATURITY_DT AS "Maturity Dt",
        DSA.MATURITY_AMT AS "Maturity Amt",DSA.SALARY_RECOVERY,DSA.LOCK_STATUS,OAN.OLD_ACT_NUM,DEPO.REFERENCE_NO FROM 
        DEPOSIT_ACINFO DEPO left join OLD_AC_NOS OAN on OAN.NEW_ACT_NUM = DEPO.DEPOSIT_NO join CUSTOMER CUST on DEPO.CUST_ID = CUST.CUST_ID
        join CUST_ADDR CA on CA.CUST_ID = CUST.CUST_ID and CA.ADDR_TYPE = CUST.COMM_ADDR_TYPE,DEPOSIT_SUB_ACINFO DSA
        WHERE DEPO.STATUS NOT IN ('DELETED', 'REJECTED')AND DSA.DEPOSIT_NO = DEPO.DEPOSIT_NO AND (   DSA.ACCT_STATUS IN ('CLOSED', 'NEW')
        OR DEPO.DEPOSIT_STATUS IS NULL AND DSA.CLOSE_DT IS NULL)AND (   DEPO.AUTHORIZE_STATUS IS NULL OR DEPO.AUTHORIZE_STATUS NOT IN ('REJECTED')) AND
        BRANCH_ID =  #SELECTED_BRANCH_ID:VARCHAR# 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "DEPOSIT_NO">
                    (DEPO.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#  OR OAN.OLD_ACT_NUM=#DEPOSIT_NO:VARCHAR#)
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY DSA.DEPOSIT_NO  
    </dynamic-mapped-statement>   
    
    <dynamic-mapped-statement name="listAllMultipleRenewal" result-class="java.util.HashMap" >  
    SELECT DA.deposit_no AS "DEPOSIT NO",
         get_cust_name(c.cust_id) AS "CUSTOMER",DA.CUST_ID,
         DSA.DEPOSIT_AMT AS "DEPOSIT AMOUNT", DA.CATEGORY AS "CATEGORY",
         DA.prod_id AS "PRODUCT ID", opening_mode AS "OPENING MODE",
         DSA.maturity_dt AS "MATURITY_DATE",DA.CONSTITUTION,DA.TAX_DEDUCTIONS,DA.NOMINEE_DETAILS,DA.REMARKS,DA.MDS_GROUP,DA.MDS_REMARKS,
         CASE WHEN DM.CUST_ID IS NULL THEN 'ALIVE'
         ELSE 'DEAD' END AS CUST_STATUS
         FROM DEPOSIT_ACINFO DA 
        JOIN DEPOSIT_SUB_ACINFO DSA ON DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        JOIN CUSTOMER C ON DA.CUST_ID = C.CUST_ID
        JOIN DEPOSITS_PROD_RENEWAL DPR ON DA.PROD_ID = DPR.PROD_ID
        LEFT JOIN DEATH_MARKING DM ON DA.CUST_ID = DM.CUST_ID
        WHERE DA.status NOT IN ('DELETED', 'REJECTED')
     AND DA.authorize_status = 'AUTHORIZED'
     AND DSA.status NOT IN ('DELETED','LIEN')
     AND (DSA.acct_status != 'CLOSED' OR DSA.acct_status != 'MATURED')
     AND DSA.authorize_status = 'AUTHORIZED'
     AND DSA.maturity_dt &lt;= #CURR_DT#
   <!--  AND dpr.auto_renewal_allowed != 'Y'-->
     AND (DA.deposit_STATUS NOT IN ('CLOSED') OR DA.deposit_status IS NULL
         )
     AND DSA.total_balance > 0
     AND (DA.auto_renewal IS NULL OR DA.auto_renewal = 'N')
     AND dpr.renewal_deposit_allowed = 'Y'
     AND DA.branch_id = #BRANCH_CODE:VARCHAR# 
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "CUST_ID">
                    DA.CUST_ID=#CUST_ID#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "ACT_FROM">
                  DA.DEPOSIT_NO &gt;= #ACT_FROM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "ACT_TO">
                 DA.DEPOSIT_NO &lt;= #ACT_TO:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
   ORDER BY DA.deposit_no, deposit_sub_no
    </dynamic-mapped-statement>
    <mapped-statement name="getReferenceId" result-class="java.util.HashMap" >
        select * FROM BRANCH_ACNO_MAINTENANCE where prod_id=#PROD_TYPE:VARCHAR# and branch_id=#BRANCH_ID:VARCHAR#
    </mapped-statement>
      
    
    <dynamic-mapped-statement name="getCountUnauthorizedTransaction" result-class="java.util.HashMap" >
        select count (*) as COUNT from ALL_TRANS
      <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "WHERE" property = "DEPOSIT_NO" >
                     link_batch_id =#DEPOSIT_NO:VARCHAR# 
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "WHERE" property = "ACCT_NUM" >
                     link_batch_id =#ACCT_NUM:VARCHAR# 
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        and ALL_TRANS.AUTHORIZE_STATUS is  null
        and ALL_TRANS.STATUS != 'DELETED'
    </dynamic-mapped-statement>
    <mapped-statement name="viewAllAccInfoForDelete" result-class="java.util.LinkedHashMap" >
        SELECT  DISTINCT DEPO.DEPOSIT_NO AS "Deposit No", OPENING_MODE as "Opening Mode", 
        PROD_ID as "Product Id", 
        get_cust_name(CUST.CUST_ID) "Customer"
        FROM DEPOSIT_ACINFO DEPO, CUSTOMER CUST, DEPOSIT_SUB_ACINFO DSA  WHERE
        DEPO.CUST_ID = CUST.CUST_ID AND DEPO.STATUS not in ('DELETED', 'REJECTED')
        AND(DEPO.DEPOSIT_STATUS NOT IN ('CLOSED') OR DEPO.DEPOSIT_STATUS IS NULL) AND DSA.DEPOSIT_NO = DEPO.DEPOSIT_NO
        AND (DSA.STATUS NOT IN ('DELETED', 'CLOSED') OR DSA.STATUS IS NULL) AND DSA.AVAILABLE_BALANCE != DSA.DEPOSIT_AMT
        AND BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR#
        ORDER BY DEPO.DEPOSIT_NO
    </mapped-statement>
    <dynamic-mapped-statement name="viewAllRenewalAccInfoMultiple" result-class="java.util.LinkedHashMap" >
        SELECT depo.deposit_no AS "Deposit No",DEPO.CATEGORY AS "CATEGORY",                  
        depo.prod_id AS "Product Id", opening_mode AS "Opening Mode",
        dsub.maturity_dt AS "MATURITY_DATE",
        get_cust_name(cust.cust_id) AS "Customer"
        FROM deposit_acinfo depo,
        customer cust,
        deposit_sub_acinfo dsub,
        deposits_prod_renewal dpr
        WHERE depo.cust_id = cust.cust_id
        AND depo.status NOT IN ('DELETED', 'REJECTED')
        AND depo.authorize_status = 'AUTHORIZED'
        AND dsub.status != 'DELETED'
        AND (dsub.acct_status != 'CLOSED' OR
        dsub.acct_status != 'MATURED') 
        AND dsub.authorize_status = 'AUTHORIZED'
        AND dsub.maturity_dt &lt;= #CURR_DATE:DATE# 
        AND dsub.deposit_no = depo.deposit_no
        AND depo.prod_id = dpr.prod_id
        <!--AND dpr.auto_renewal_allowed != 'Y'-->
        AND (depo.deposit_STATUS NOT IN ('CLOSED') OR depo.deposit_status IS NULL
        )
        AND dsub.total_balance >0  
        AND (depo.AUTO_RENEWAL is null or depo.AUTO_RENEWAL =  'N')
        AND dpr.renewal_deposit_allowed = 'Y'
        <!--             AND(total_int_debit != 1 or total_int_debit is null)-->
        AND depo.branch_id =  #BRANCH_CODE:VARCHAR# AND depo.prod_id=#PROD_ID:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend= "AND" property = "ACCT_NUM" >
                     depo.deposit_no =#ACCT_NUM:VARCHAR# 
                </isNotNull>
            </isParameterPresent>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Deposit No" >
                    UPPER(depo.deposit_no) LIKE UPPER('%$Deposit No$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "CATEGORY" >
                    UPPER(DEPO.CATEGORY) LIKE UPPER('%$CATEGORY$%')
                </isNotEmpty>
            </isParameterPresent>
              <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Product Id" >
                    UPPER(depo.prod_id) LIKE UPPER('%$Product Id$%')
                </isNotEmpty>
            </isParameterPresent>
               <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Opening Mode" >
                    UPPER( opening_mode) LIKE UPPER('%$Opening Mode$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "MATURITY_DATE" >
                    UPPER(dsub.maturity_dt) LIKE UPPER('%$MATURITY_DATE$%')
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        ORDER BY depo.deposit_no, deposit_sub_no
    </dynamic-mapped-statement>
    <!-- View Matured Deposit account info Queries -->
     <dynamic-mapped-statement name="viewAllRenewalAccInfo" result-class="java.util.LinkedHashMap" >
        <!--SELECT DEPO.DEPOSIT_NO AS "Deposit No", DEPOSIT_SUB_NO AS "Deposit Sub No",OPENING_MODE as "Opening Mode", 
        DEPO.PROD_ID as "Product Id", 
        FNAME || ' ' || MNAME || ' '|| LNAME as "Customer"
        FROM DEPOSIT_ACINFO DEPO, CUSTOMER CUST, DEPOSIT_SUB_ACINFO DSUB,  DEPOSITS_PROD_RENEWAL DPR WHERE
        DEPO.CUST_ID = CUST.CUST_ID AND DEPO.STATUS not in ('DELETED', 'REJECTED')
        AND DEPO.AUTHORIZE_STATUS = 'AUTHORIZED' AND DSUB.STATUS != 'DELETED' 
        AND  DSUB.AUTHORIZE_STATUS = 'AUTHORIZED' AND DSUB.MATURITY_DT &lt;= #CURR_DATE# 
        AND DSUB.DEPOSIT_NO = DEPO.DEPOSIT_NO 
        AND DEPO.PROD_ID = DPR.PROD_ID
        AND (#CURR_DATE# - DSUB.MATURITY_DT ) &lt;= DPR.MIN_DAYS_BKDT_DEPOSITS
        AND DPR.AUTO_RENEWAL_ALLOWED != 'Y'
        AND(DEPO.DEPOSIT_STATUS NOT IN ('CLOSED') OR DEPO.DEPOSIT_STATUS IS NULL)
        AND DPR.RENEWAL_DEPOSIT_ALLOWED = 'Y'
        AND DEPO.BRANCH_ID  = #BRANCH_CODE#         
        ORDER BY DEPO.DEPOSIT_NO, DEPOSIT_SUB_NO -->
        
        <!-- SELECT DEPOSIT_NO AS "Deposit No", OPENING_MODE as "Opening Mode",
        PROD_ID as "Product Id", 
        FNAME || ' ' || MNAME || ' '|| LNAME as "Customer"
        FROM DEPOSIT_ACINFO DEPO, CUSTOMER CUST WHERE
        DEPO.CUST_ID = CUST.CUST_ID AND DEPO.STATUS not in ('DELETED', 'REJECTED')
        AND DEPO.AUTHORIZE_STATUS = 'AUTHORIZED' -->
        SELECT depo.deposit_no AS "Deposit No",<!--deposit_sub_no AS "Deposit Sub No",-->DEPO.CATEGORY AS "CATEGORY",                  
        depo.prod_id AS "Product Id", opening_mode AS "Opening Mode",
        dsub.maturity_dt AS "MATURITY_DATE",
        get_cust_name(cust.cust_id) AS "Customer"
        FROM deposit_acinfo depo,
        customer cust,
        deposit_sub_acinfo dsub,
        deposits_prod_renewal dpr
        WHERE depo.cust_id = cust.cust_id
        AND depo.status NOT IN ('DELETED', 'REJECTED')
        AND depo.authorize_status = 'AUTHORIZED'
        AND dsub.status != 'DELETED'
        AND (dsub.acct_status != 'CLOSED' OR
        dsub.acct_status != 'MATURED') 
        AND dsub.authorize_status = 'AUTHORIZED'
        AND dsub.maturity_dt &lt;= #CURR_DATE:DATE# 
        AND dsub.deposit_no = depo.deposit_no
        AND depo.prod_id = dpr.prod_id
        <!--AND dpr.auto_renewal_allowed != 'Y'-->
        AND (depo.deposit_STATUS NOT IN ('CLOSED') OR depo.deposit_status IS NULL
        )
        AND dsub.total_balance >0  
        AND (depo.AUTO_RENEWAL is null or depo.AUTO_RENEWAL =  'N')
        AND dpr.renewal_deposit_allowed = 'Y'
        <!--             AND(total_int_debit != 1 or total_int_debit is null)-->
         AND depo.branch_id =  #BRANCH_CODE:VARCHAR#
         <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Deposit No" >
                    UPPER(depo.deposit_no) LIKE UPPER('%$Deposit No$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "CATEGORY" >
                    UPPER(DEPO.CATEGORY) LIKE UPPER('%$CATEGORY$%')
                </isNotEmpty>
            </isParameterPresent>
              <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Product Id" >
                    UPPER(depo.prod_id) LIKE UPPER('%$Product Id$%')
                </isNotEmpty>
            </isParameterPresent>
               <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Opening Mode" >
                    UPPER( opening_mode) LIKE UPPER('%$Opening Mode$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "MATURITY_DATE" >
                    UPPER(dsub.maturity_dt) LIKE UPPER('%$MATURITY_DATE$%')
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        ORDER BY depo.deposit_no, deposit_sub_no
    </dynamic-mapped-statement>
        
    <!-- View Matured Deposit account info Queries -->
    <dynamic-mapped-statement name="viewAllExtensionAccInfo" result-class="java.util.LinkedHashMap" >
        SELECT depo.deposit_no AS "Deposit No",deposit_sub_no AS "Deposit Sub No",                  
        depo.prod_id AS "Product Id", opening_mode AS "Opening Mode",
        dsub.maturity_dt AS "MATURITY_DATE",
        get_cust_name(cust.cust_id) AS "Customer"
        FROM deposit_acinfo depo,
        customer cust,
        deposit_sub_acinfo dsub,
        deposits_prod_renewal dpr
        WHERE depo.cust_id = cust.cust_id
        AND depo.status NOT IN ('DELETED', 'REJECTED')
        AND depo.authorize_status = 'AUTHORIZED'
        AND dsub.status != 'DELETED'
        AND (dsub.acct_status != 'CLOSED' OR
        dsub.acct_status != 'MATURED') 
        AND dsub.authorize_status = 'AUTHORIZED'
        AND dsub.maturity_dt &gt;= #CURR_DATE:DATE# 
        AND dsub.deposit_no = depo.deposit_no
        AND depo.prod_id = dpr.prod_id
        AND dpr.auto_renewal_allowed != 'Y'
        AND (depo.deposit_STATUS NOT IN ('CLOSED') OR depo.deposit_status IS NULL
        )
        AND dsub.total_balance >0  
        AND dpr.renewal_deposit_allowed = 'Y'
        AND depo.branch_id =  #BRANCH_CODE:VARCHAR# AND dpr.EXTENSION_DEPOSIT_BEYOND='Y'
          <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Deposit No" >
                    UPPER(depo.deposit_no) LIKE UPPER('%$Deposit No$%')
                </isNotEmpty>
            </isParameterPresent>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Deposit Sub No" >
                    UPPER(deposit_sub_no) LIKE UPPER('%$Deposit Sub No$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "CATEGORY" >
                    UPPER(DEPO.CATEGORY) LIKE UPPER('%$CATEGORY$%')
                </isNotEmpty>
            </isParameterPresent>
              <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Product Id" >
                    UPPER(depo.prod_id) LIKE UPPER('%$Product Id$%')
                </isNotEmpty>
            </isParameterPresent>
               <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "Opening Mode" >
                    UPPER( opening_mode) LIKE UPPER('%$Opening Mode$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "MATURITY_DATE" >
                    UPPER(dsub.maturity_dt) LIKE UPPER('%$MATURITY_DATE$%')
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        ORDER BY depo.deposit_no, deposit_sub_no
    </dynamic-mapped-statement> 
    
    <dynamic-mapped-statement name="getAgentId" result-class="java.util.HashMap">
        <!--SELECT AGENT_ID, BRANCH_ID, APPOINTED_DT, REMARKS FROM AGENT_MASTER 
        WHERE  AUTHORIZED_STATUS= 'AUTHORIZED' AND STATUS != 'DELETED' -->
        SELECT AM.AGENT_ID  "Agent Id", get_cust_name(cus.cust_id) as "Customer", AM.BRANCH_ID "Branch Id", AM.APPOINTED_DT "Appointed Date", AM.REMARKS  "Remarks"  
        FROM AGENT_MASTER AM , CUSTOMER CUS
        WHERE  AM.AUTHORIZED_STATUS= 'AUTHORIZED' AND  AM.STATUS != 'DELETED' 
        AND CUS.CUST_ID=AM.AGENT_ID AND CUS.STATUS!='DELETED' 
        AND CUS.AUTHORIZE_STATUS = 'AUTHORIZED'
         <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="Agent Id">
                    UPPER(AM.AGENT_ID) LIKE UPPER('%$Agent Id$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="Customer">
                    UPPER(FNAME || ' ' || MNAME || ' '|| LNAME) LIKE UPPER('%$Customer$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="Branch Id">
                    UPPER(AM.BRANCH_ID) LIKE UPPER('%$Branch Id$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="Appointed Date">
                    UPPER(AM.APPOINTED_DT) LIKE UPPER('%$Appointed Date$%')
                </isNotNull>
            </isParameterPresent>
               <isParameterPresent>
                <isNotNull prepend="AND"      property="Remarks">
                    UPPER(AM.REMARKS) LIKE UPPER('%$Remarks$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement> 

    <mapped-statement name="getAgentIdEditMode" result-class="java.util.HashMap">
        SELECT get_cust_name(CUSTOMER.CUST_ID) as "Name"
        FROM CUSTOMER WHERE CUST_ID = #AGENT_ID:VARCHAR#
    </mapped-statement>   
    <mapped-statement name="getCustDOB" result-class="java.util.HashMap">
        <!--SELECT DOB as DOB FROM CUSTOMER WHERE CUST_ID=#CUSTOMER ID:VARCHAR#-->
        SELECT get_all_cust_type_dob(#CUSTOMER ID:VARCHAR#) as DOB FROM DUAL
    </mapped-statement>
    <mapped-statement name="getRtrAge" result-class="java.util.HashMap">
        SELECT RETIREMENT_AGE FROM PARAMETERS
    </mapped-statement>
         
                   
    <!-- Get Selected Deposit account info Queries -->
    <mapped-statement name="getAccInfoDetails" result-class="java.util.HashMap" >
        SELECT * FROM DEPOSIT_ACINFO WHERE (DEPOSIT_NO =  #DEPOSIT NO:VARCHAR#) AND STATUS NOT IN ('DELETED', 'REJECTED')
    </mapped-statement>
    
    <!-- DEPOSIT ACINFO  Queries (End) -->
    <!-- =================================================================================== -->

    <!-- =================================================================================== -->        
    <!-- Authorization Queries (begin) -->

    <mapped-statement name="getAccInfoTo" result-map="getAccInfoTOResult" >
        SELECT * FROM DEPOSIT_ACINFO 
        WHERE DEPOSIT_NO = #value:VARCHAR#
    </mapped-statement>

    <dynamic-mapped-statement name="viewAllDepAccAuthorizeTOList" result-class="java.util.LinkedHashMap" >        
       SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
         CASE WHEN AT.TRANS_MODE='TRANSFER' THEN dsa.deposit_amt
                ELSE AT.AMOUNT END AS "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE# AND AT.link_batch_id= DA.DEPOSIT_NO||'_1' AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO   
        AND (AT.INSTRUMENT_NO2!='Deposit Closure' OR AT.INSTRUMENT_NO2 IS NULL)
        AND decode(DA.OPENING_MODE,'Renewal',null,DA.MULTIPLE_DEPOSIT_ID) IS NULL
        AND decode(DA.OPENING_MODE,'Renewal',null,dsa.multiple_deposit_id) IS NULL 
        AND C.CUST_ID = DA.CUST_ID AND
        DA.STATUS_BY != #USER_ID:VARCHAR# AND AT.INITIATED_BRANCH = #SELECTED_BRANCH_ID:VARCHAR# AND 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
          
        </dynamic>
          
          
        <!--UNION 
        
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DSA.DEPOSIT_AMT "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE# AND AT.link_batch_id= DA.DEPOSIT_NO||'_1' AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND decode(DA.OPENING_MODE,'Renewal',null,DA.MULTIPLE_DEPOSIT_ID) IS NULL
        AND decode(DA.OPENING_MODE,'Renewal',null,dsa.multiple_deposit_id) IS NULL
        AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND DA.BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND 
        #HIERARCHY_ID#::numeric &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
          
        </dynamic>-->
        UNION
        SELECT NULL AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DEPOSIT_AMT "Deposit Amt", DEPOSIT_DT "Deposit Date",OPENING_MODE as "Opening Mode",PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND DA.CREATED_DT &lt;= #TRANS_DT:DATE#
        AND (DA.STATUS = 'MODIFIED' OR DA.STATUS = 'CREATED')
        AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        and not exists (select * from all_trans where da.deposit_no || '_1' = link_batch_id 
        and trans_dt=#TRANS_DT:DATE# and (AUTHORIZE_STATUS not in  ('AUTHORIZED', 'REJECTED', 'EXCEPTION') or AUTHORIZE_STATUS IS NULL))
        <!--
        UNION
        SELECT NULL AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DEPOSIT_AMT "Deposit Amt", DEPOSIT_DT "Deposit Date",OPENING_MODE as "Opening Mode",PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND DA.CREATED_DT &lt;= #TRANS_DT:DATE#
        AND DA.STATUS != 'DELETED'
        AND DA.ACC_ZERO_BAL_YN = 'Y'
        AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND 
        #HIERARCHY_ID#::numeric &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>-->
        ORDER BY "DEPOSIT NO"
    </dynamic-mapped-statement>
    
    <mapped-statement name="getMulDepositAcctNo" result-class="java.util.LinkedHashMap" >
        SELECT DEPOSIT_NO FROM DEPOSIT_ACINFO WHERE MULTIPLE_DEPOSIT_ID=#MULTIPLE DEPOSIT ID:VARCHAR# 
    </mapped-statement>
    
    <dynamic-mapped-statement name="viewAllMultipleDepAccAuthorizeTOList" result-class="java.util.LinkedHashMap" >        
        SELECT CASE
            WHEN AT.trans_mode = 'TRANSFER'
                      THEN AT.BATCH_ID
                   ELSE AT.TRANS_ID
                END as TRANS_ID,DA.MULTIPLE_DEPOSIT_ID AS "Multiple Deposit ID",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DSA.DEPOSIT_AMT "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE#  AND AT.link_batch_id= DA.DEPOSIT_NO||'_1' AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND DA.MULTIPLE_DEPOSIT_ID = DSA.MULTIPLE_DEPOSIT_ID  AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID  
        AND (AT.INSTRUMENT_NO2!='Deposit Closure' OR AT.INSTRUMENT_NO2 IS NULL) 
        AND DA.STATUS_BY != #USER_ID:VARCHAR# AND DA.BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND DA.OPENING_MODE = 'Normal' AND
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)  
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
          
        </dynamic> 
<!--        UNION           
        SELECT CASE
            WHEN AT.trans_mode = 'TRANSFER'
                      THEN AT.BATCH_ID
                   ELSE AT.TRANS_ID
                END as TRANS_ID,DA.MULTIPLE_DEPOSIT_ID AS "Multiple Deposit ID",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DSA.DEPOSIT_AMT "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE# and  CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN NULL ELSE AT.PAYMENT_STATUS END IS  NULL AND AT.TRANS_TYPE='DEBIT' AND AT.link_batch_id= DA.DEPOSIT_NO||'_1' AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.MULTIPLE_DEPOSIT_ID = DSA.MULTIPLE_DEPOSIT_ID AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND DA.BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND 
        #HIERARCHY_ID#::numeric &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>          
        </dynamic>        -->
        ORDER BY "Multiple Deposit ID"
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="viewAllDepAccAuthorizeCashierTOList" result-class="java.util.LinkedHashMap" >        
        SELECT DISTINCT CASE <!--CASH ENTRY ONLY-->    
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DSA.DEPOSIT_AMT "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE# 
        and 
        <!--CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN 'AUTHORIZED' ELSE AT.PAYMENT_STATUS END IS NOT NULL-->
         AT.TRANS_MODE = 'CASH'    AND AT.PAYMENT_STATUS IS NOT NULL     
        
        AND AT.link_batch_id= DA.DEPOSIT_NO||'_1' AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND decode(DA.OPENING_MODE,'Renewal',null,DA.MULTIPLE_DEPOSIT_ID) IS NULL
        AND decode(DA.OPENING_MODE,'Renewal',null,dsa.multiple_deposit_id) IS NULL 
        AND C.CUST_ID = DA.CUST_ID
        AND (AT.INSTRUMENT_NO2!='Deposit Closure' OR AT.INSTRUMENT_NO2 IS NULL) and
        DA.STATUS_BY != #USER_ID:VARCHAR# AND AT.INITIATED_BRANCH = #SELECTED_BRANCH_ID:VARCHAR# AND 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
          
        </dynamic>
                    
        UNION 
           <!-- TRANSFER ONLY-->     
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DSA.DEPOSIT_AMT "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE# 
        and 

        <!--CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN NULL ELSE AT.PAYMENT_STATUS END IS  NULL-->
        AT.TRANS_MODE = 'TRANSFER'  AND LINK_BATCH_ID NOT IN(SELECT LINK_BATCH_ID FROM ALL_TRANS WHERE TRANS_MODE='CASH' AND TRANS_TYPE='CREDIT'
              AND TRANS_DT = #TRANS_DT:DATE#  AND INITIATED_BRANCH = #SELECTED_BRANCH_ID:VARCHAR# AND AUTHORIZE_STATUS IS NULL AND  LINK_BATCH_ID IS NOT NULL)
        
        AND AT.TRANS_TYPE='DEBIT' AND AT.link_batch_id= DA.DEPOSIT_NO||'_1' AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND decode(DA.OPENING_MODE,'Renewal',null,DA.MULTIPLE_DEPOSIT_ID) IS NULL
        AND decode(DA.OPENING_MODE,'Renewal',null,dsa.multiple_deposit_id) IS NULL
        AND (AT.INSTRUMENT_NO2!='Deposit Closure' OR AT.INSTRUMENT_NO2 IS NULL)
        AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND AT.INITIATED_BRANCH = #SELECTED_BRANCH_ID:VARCHAR# AND 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
          
        </dynamic>
        UNION
         <!--CASH AND TRANSFER ONLY-->  
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DSA.DEPOSIT_AMT "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE# 
         AND CASE
              WHEN AT.TRANS_MODE = 'TRANSFER' THEN 'AUTHORIZED'
              ELSE AT.PAYMENT_STATUS
           END
              IS not NULL                                   
                   AND                     
        CASE             
              WHEN AT.TRANS_MODE = 'CASH' THEN AT.PAYMENT_STATUS
              ELSE AT.PAYMENT_STATUS
           END
              IS not NULL     <!--CASH AND TRANSFER ONLY-->                 
        AND AT.link_batch_id= DA.DEPOSIT_NO||'_1' AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND decode(DA.OPENING_MODE,'Renewal',null,DA.MULTIPLE_DEPOSIT_ID) IS NULL
        AND decode(DA.OPENING_MODE,'Renewal',null,dsa.multiple_deposit_id) IS NULL 
        AND C.CUST_ID = DA.CUST_ID
        AND (AT.INSTRUMENT_NO2!='Deposit Closure' OR AT.INSTRUMENT_NO2 IS NULL) and
        DA.STATUS_BY != #USER_ID:VARCHAR# AND AT.INITIATED_BRANCH = #SELECTED_BRANCH_ID:VARCHAR# AND 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
          
        </dynamic>
          UNION
        SELECT NULL AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DEPOSIT_AMT "Deposit Amt", DEPOSIT_DT "Deposit Date",OPENING_MODE as "Opening Mode",PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND DA.CREATED_DT &lt;= #TRANS_DT:DATE#
        AND DA.STATUS = 'MODIFIED'
        AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        UNION
        SELECT NULL AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DEPOSIT_AMT "Deposit Amt", DEPOSIT_DT "Deposit Date",OPENING_MODE as "Opening Mode",PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND DA.CREATED_DT &lt;= #TRANS_DT:DATE#
        AND DA.STATUS != 'DELETED'
        AND DA.ACC_ZERO_BAL_YN = 'Y'
        AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY "DEPOSIT NO"
    </dynamic-mapped-statement>
     
    <dynamic-mapped-statement name="viewAllMultipleDepAccAuthorizeCashierTOList" result-class="java.util.LinkedHashMap" >        
        SELECT CASE
            WHEN AT.trans_mode = 'TRANSFER'
                      THEN AT.BATCH_ID
                   ELSE AT.TRANS_ID
                END as TRANS_ID,DA.MULTIPLE_DEPOSIT_ID AS "Multiple Deposit ID",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DSA.DEPOSIT_AMT "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE# and CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN 'AUTHORIZED' ELSE AT.PAYMENT_STATUS END IS NOT NULL   AND AT.link_batch_id= DA.DEPOSIT_NO||'_1' AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.MULTIPLE_DEPOSIT_ID = DSA.MULTIPLE_DEPOSIT_ID  AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# 
        AND DA.BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# 
        AND (AT.INSTRUMENT_NO2!='Deposit Closure' OR AT.INSTRUMENT_NO2 IS NULL)
        AND  DA.OPENING_MODE = 'Normal' AND
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)          
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
          
        </dynamic> 
<!--        UNION           
        SELECT CASE
            WHEN AT.trans_mode = 'TRANSFER'
                      THEN AT.BATCH_ID
                   ELSE AT.TRANS_ID
                END as TRANS_ID,DA.MULTIPLE_DEPOSIT_ID AS "Multiple Deposit ID",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DSA.DEPOSIT_AMT "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE# and  CASE WHEN AT.TRANS_MODE = 'TRANSFER' THEN NULL ELSE AT.PAYMENT_STATUS END IS  NULL AND AT.TRANS_TYPE='DEBIT' AND AT.link_batch_id= DA.DEPOSIT_NO||'_1' AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.MULTIPLE_DEPOSIT_ID = DSA.MULTIPLE_DEPOSIT_ID AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND DA.BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND 
        #HIERARCHY_ID#::numeric &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>          
        </dynamic>        -->
        ORDER BY "Multiple Deposit ID"
    </dynamic-mapped-statement>
    
    <mapped-statement name="updateRejectionStatusAcinfo"  result-class="java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET ACCT_STATUS = #ACCT_STATUS:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>    
    
    <mapped-statement name="updateRejectionStatusSubAcinfo"  result-class="java.util.HashMap">
        UPDATE DEPOSIT_ACINFO SET DEPOSIT_STATUS = #ACCT_STATUS:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>    
    
    <dynamic-mapped-statement name="authorizeDepositAccInfo"  result-class="java.util.HashMap">
        UPDATE DEPOSIT_ACINFO SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZED_BY = #USER_ID:VARCHAR#, 
        AUTHORIZED_DT = #CURR_DATE:DATE#
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
        AND (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS IS NULL)      
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="ACCT_STATUS">
                    DEPOSIT_STATUS = #ACCT_STATUS:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>        
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="authorizeDepositSubAccInfo"  result-class="java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        AUTHORIZE_STATUS = #STATUS:VARCHAR#,
        AUTHORIZE_BY = #USER_ID:VARCHAR#, 
        AUTHORIZE_DT = #CURR_DATE:DATE#
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
        AND (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS IS NULL)    
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="ACCT_STATUS">
                    ACCT_STATUS = #ACCT_STATUS:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>        
    </dynamic-mapped-statement>

    <mapped-statement name="authorizeDepositNewSubAccInfo"  result-class="java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        STATUS = #NORM_STATUS:VARCHAR#,
        PAYMENT_DAY = #PAYMENT_DAY:DATE#
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# AND ACCT_STATUS !='CLOSED'    
    </mapped-statement>
    
    <mapped-statement name="updateOldDepositAuthorizeAcInfo"  result-class="java.util.HashMap">
        UPDATE DEPOSIT_ACINFO SET DEPOSIT_STATUS =  #DEP_STATUS:VARCHAR#,STATUS = #STATUS:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#    
    </mapped-statement>
    
    <mapped-statement name="updateOldDepositAuthorizeSubAcinfo"  result-class="java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET CLOSE_DT = NULL,PENAL_RATE = NULL,SB_INT_AMT = NULL,CLOSE_BY = NULL,
        INTEREST_AMT = NULL,SB_PERIOD_RUN = NULL,ACCT_STATUS = #DEP_STATUS:VARCHAR#,STATUS = #STATUS:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#    
    </mapped-statement>
        
    <mapped-statement name="updateNewDepositAuthorizeAcInfo"  result-class="java.util.HashMap">
        UPDATE DEPOSIT_ACINFO SET 
        STATUS =#STATUS:VARCHAR#,
        AUTHORIZE_STATUS = #AUTHORIZE_STATUS:VARCHAR#,
        DEPOSIT_STATUS = #DEP_STATUS:VARCHAR#,
        RENEWAL_FROM_DEPOSIT = NULL,
        RENEWAL_COUNT = cast(#RENEWAL_COUNT# as NUMERIC)
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#    
    </mapped-statement>
    
    <mapped-statement name="updateNewDepositAuthorizeSubAcinfo"  result-class="java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET STATUS = #STATUS:VARCHAR#,ACCT_STATUS = #DEP_STATUS:VARCHAR#,
        CLOSE_BY = #CLOSE_BY:VARCHAR#,CLOSE_DT = #CLOSE_DT:DATE# WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#    
    </mapped-statement>
    
    <mapped-statement name="getIntfreqDetails"  result-class="java.util.HashMap">
        SELECT DEPOSIT_AMT,INTPAY_FREQ,MATURITY_DT,CUST_ID ,BEHAVES_LIKE,DSA.DEPOSIT_DT,DSA.TOTAL_INSTALLMENTS FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,ALL_PRODUCT_ACCTS APA, ALL_PRODUCTS AP 
        WHERE DA.DEPOSIT_NO=DSA.DEPOSIT_NO AND DSA.STATUS!='DELETED' AND AP.PROD_TYPE=APA.PROD_TYPE AND APA.ACT_NUM=DSA.DEPOSIT_NO and APA.PROD_ID=AP.PROD_ID
        AND DA.STATUS!='DELETED' AND DA.AUTHORIZE_STATUS='AUTHORIZED' AND DSA.AUTHORIZE_STATUS='AUTHORIZED' AND DSA.DEPOSIT_NO=#ACNO:VARCHAR#
    </mapped-statement>
    
    
    <mapped-statement name="getRDAccountDetails"  result-class="java.util.HashMap">      
        <!-- SELECT DEPOSIT_AMT, ACT_NUM,BEHAVES_LIKE,MATURITY_DT FROM ALL_PRODUCT_ACCTS APA,ALL_PRODUCTS AP,DEPOSIT_SUB_ACINFO WHERE REP_ACT_NUM=(SELECT INT_PAY_ACC_NO  FROM DEPOSIT_SUB_ACINFO   
        WHERE DEPOSIT_NO=#DEPOSIT_NO# AND STATUS!='DELETED'  AND AUTHORIZE_STATUS='AUTHORIZED')  AND APA.PROD_ID =AP.PROD_ID AND APA.ACCT_STATUS!='CLOSED' 
        AND DEPOSIT_NO=(SELECT ACT_NUM  FROM ALL_PRODUCT_ACCTS
        WHERE REP_ACT_NUM=(SELECT INT_PAY_ACC_NO  FROM DEPOSIT_SUB_ACINFO   
        WHERE DEPOSIT_NO=#DEPOSIT_NO# AND STATUS!='DELETED'  AND AUTHORIZE_STATUS='AUTHORIZED') AND ACCT_STATUS!='CLOSED')-->  
       
        <!--SELECT DEPOSIT_AMT, ACT_NUM,BEHAVES_LIKE,MATURITY_DT FROM ALL_PRODUCT_ACCTS APA,ALL_PRODUCTS AP,DEPOSIT_SUB_ACINFO WHERE REP_ACT_NUM=#LOAN_NO:VARCHAR#
        AND APA.PROD_ID =AP.PROD_ID AND APA.ACCT_STATUS!='CLOSED' 
        AND DEPOSIT_NO=ACT_NUM--> 
        
        SELECT DEPOSIT_AMT, DA.DEPOSIT_NO as ACT_NUM,BEHAVES_LIKE,MATURITY_DT FROM ALL_PRODUCTS AP,DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA
        WHERE DA.DEPOSIT_NO=DSA.DEPOSIT_NO and DA.DEPOSIT_NO= #LOAN_NO:VARCHAR#  AND DA.PROD_ID=AP.PROD_ID AND DSA.ACCT_STATUS!='CLOSED'           
    </mapped-statement> 
    
    <mapped-statement name="getLTDDetails"  result-class="java.util.HashMap">
        <!--SELECT BEHAVES_LIKE,CUST_ID , (SELECT MATURITY_DT FROM DEPOSIT_SUB_ACINFO DSA  WHERE DEPOSIT_NO= 
        (SELECT DISTINCT DEPOSIT_NO  FROM DEPOSIT_LIEN WHERE DSA.DEPOSIT_NO=DEPOSIT_NO AND LIEN_AC_NO=#ACNO# )) "MATURITY_DT" 
        FROM ALL_PRODUCT_ACCTS APA ,ALL_PRODUCTS  AP, ALL_CUSTOMER  AC WHERE AP.PROD_ID=APA.PROD_ID AND AC.ACT_NUM=APA.ACT_NUM AND
        APA.ACT_NUM=#ACNO# AND AC.ACCT_STATUS!='CLOSED' AND APA.ACCT_STATUS!='CLOSED'-->
      
        SELECT BEHAVES_LIKE,CUST_ID , (SELECT TO_DT FROM LOANS_SANCTION_DETAILS  WHERE BORROW_NO= 
        (SELECT BORROW_NO  FROM LOANS_FACILITY_DETAILS WHERE   ACCT_NUM=#ACNO:VARCHAR# AND STATUS!='DELETED') AND STATUS!='DELETED') "MATURITY_DT" 
        FROM ALL_PRODUCT_ACCTS APA ,ALL_PRODUCTS  AP, ALL_CUSTOMER  AC WHERE AP.PROD_ID=APA.PROD_ID AND AC.ACT_NUM=APA.ACT_NUM AND
        APA.ACT_NUM=#ACNO:VARCHAR# AND AC.ACCT_STATUS!='CLOSED' AND APA.ACCT_STATUS!='CLOSED'
    </mapped-statement>
    
    <mapped-statement name="getLTDAccountDetails"  result-class="java.util.HashMap">
        SELECT INT_PAY_ACC_NO FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# AND STATUS!='DELETED' AND ACCT_STATUS!='CLOSED' AND
        (AUTHORIZE_STATUS IS NULL OR(AUTHORIZE_STATUS='AUTHORIZED' AND AUTHORIZE_STATUS!='REJECTED'))
    </mapped-statement>
    
    <mapped-statement name="getLTDAccountDetailsForInterestPaying"  result-class="java.util.HashMap">
     <!--   SELECT BEHAVES_LIKE,CUST_ID ,TOTAL_BALANCE FROM ALL_PRODUCT_ACCTS APA ,ALL_PRODUCTS  AP, ALL_CUSTOMER  AC,LOANS_FACILITY_DETAILS LFD
        WHERE AP.PROD_ID=APA.PROD_ID AND AC.ACT_NUM=APA.ACT_NUM AND LFD.ACCT_NUM=APA.ACT_NUM AND
        APA.ACT_NUM=(SELECT INT_PAY_ACC_NO FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# AND STATUS!='DELETED' AND ACCT_STATUS!='CLOSED' AND
        AUTHORIZE_STATUS='AUTHORIZED')  AND AC.ACCT_STATUS!='CLOSED' AND APA.ACCT_STATUS!='CLOSED' -->
      <!--  SELECT BEHAVES_LIKE,CUST_ID ,TOTAL_BALANCE FROM ALL_PRODUCT_ACCTS_new1 APA ,ALL_PRODUCTS  AP, ALL_CUSTOMER  AC,LOANS_FACILITY_DETAILS LFD
        WHERE AP.PROD_ID=APA.PROD_ID AND AC.ACT_NUM=APA.ACT_NUM AND LFD.ACCT_NUM=APA.ACT_NUM AND
        APA.ACT_NUM= GET_SI_ACTNO_DEPOSIT(#DEPOSIT_NO:VARCHAR#) AND AC.ACCT_STATUS!='CLOSED' AND APA.ACCT_STATUS!='CLOSED' -->
        SELECT LP.BEHAVES_LIKE,LB.CUST_ID ,LFD.TOTAL_BALANCE FROM LOANS_FACILITY_DETAILS LFD 
        JOIN LOANS_PRODUCT LP  ON LP.PROD_ID  =LFD.PROD_ID
        JOIN LOANS_BORROWER LB ON LB.BORROW_NO=LFD.BORROW_NO
        JOIN (SELECT INT_PAY_ACC_NO   FROM DEPOSIT_SUB_ACINFO DSA WHERE DEPOSIT_NO =#DEPOSIT_NO:VARCHAR# AND ACCT_STATUS!='CLOSED')DS
        ON DS.INT_PAY_ACC_NO= LFD.ACCT_NUM
    </mapped-statement>
    
    <mapped-statement name="getMDSAccountDetails"  result-class="java.util.HashMap">    
        SELECT MM.MEMBER_NO,(SELECT MEMBERSHIP_NO FROM CUSTOMER WHERE CUST_ID=#CUST_ID:VARCHAR# AND STATUS!='DELETED' ) "CUST_MEMBER", CHIT_END_DT FROM MDS_MASTER_MAINTENANCE MM,MDS_APPLICATION MA WHERE MA.CHITTAL_NO=MM.CHITTAL_NO AND MA.MEMBER_NO=MM.MEMBER_NO
        AND MM.CHITTAL_NO || '_' || MM.SUB_NO=#ACNO:VARCHAR# AND MM.SCHEME_NAME=MA.SCHEME_NAME AND MA.SUB_NO=MM.SUB_NO  AND MM.STATUS!='DELETED' AND MA.STATUS!='DELETED' AND
        MM.AUTHORIZED_STATUS='AUTHORIZED' AND MA.AUTHORIZE_STATUS='AUTHORIZED'        
    </mapped-statement>
    
    <mapped-statement name="getMDSAccountDetailsForInterestPaying"  result-class="java.util.HashMap">    
        SELECT  CHIT_END_DT FROM MDS_APPLICATION WHERE CHITTAL_NO || '_' || SUB_NO =#CHITTALNO:VARCHAR# AND STATUS!='DELETED' AND
        AUTHORIZE_STATUS='AUTHORIZED'     
    </mapped-statement>
    
   
    
    <!-- Authorization Queries (End) -->    
    <!-- =================================================================================== -->   

    <!-- View all Deposit Joint account info Queries -->        
    <dynamic-mapped-statement name="getSelectAccInfoTOList" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT CUSTOMER.CUST_ID AS "CUSTOMER ID",
        get_cust_name(CUSTOMER.CUST_ID) AS "Name",
        CUSTOMER.CUST_TYPE_ID, (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS CUST_TYPE, CUSTOMER.BRANCH_CODE,
       <!-- (SELECT share_acct.share_acct_no
        FROM share_acct
        WHERE share_acct.cust_id = customer.cust_id) AS member_no,-->
        SA.share_acct_no AS member_no,
        (cust_addr.street || ',' || cust_addr.area) AS address
        FROM CUSTOMER , CUST_ADDR
        LEFT JOIN share_acct SA ON SA.cust_id = CUST_ADDR.cust_id
        WHERE ((CUSTOMER.STATUS != 'DELETED'))
        AND (CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED'
        OR CUSTOMER.AUTHORIZE_STATUS IS NULL)
        AND (CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID)
      <!--  AND CUSTOMER.BRANCH_CODE = #SELECTED_BRANCH_ID:VARCHAR# -->
        AND (CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE)
        AND  NOT EXISTS (SELECT CUST_ID FROM CUSTOMER_SUSPENDED  WHERE   STATUS='SUSPENDED'
        AND CUSTOMER.CUST_ID=CUST_ID)
        <!--AND (share_acct.cust_id = customer.cust_id)
        AND (share_acct.close_dt IS NULL)
        AND CUSTOMER.CUST_TYPE = 'INDIVIDUAL'-->
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUSTOMER.CUST_TYPE">
                    CUSTOMER.CUST_TYPE = #CUST_TYPE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND" property="CUSTOMER.CUST_TYPE">
                    CUSTOMER.CUST_TYPE != #OTHER_INDIVIDUAL:VARCHAR#
                </isNotNull>
            </isParameterPresent>
            <isNotEmpty prepend=" AND CUSTOMER.CUST_ID NOT IN ( " property="CUSTOMER_ID">
                <!--iterate  property="CUSTOMER ID" open = "(" close=")" conjunction="," >
                #CUSTOMER ID[]#
                </iterate-->
                $CUSTOMER_ID$ )
            </isNotEmpty>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "SHARE" >
                    (CUSTOMER.MINOR = 'N' or  CUSTOMER.MINOR  is null)
                </isNotEmpty>
            </isParameterPresent>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "AUTHSIGNATORYCHECK" >
                    ( CUSTOMER.MINOR = 'N' or  CUSTOMER.MINOR  is null)
                </isNotEmpty>
            </isParameterPresent>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "RESIDENTIALSTATUS" >
                    CUSTOMER.RESIDENTIALSTATUS = #RESIDENTIALSTATUS:VARCHAR#
                </isNotEmpty>
            </isParameterPresent>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "STAFF_ID" >
                    CUSTOMER.STAFF_ID = #STAFF_ID:VARCHAR#
                </isNotEmpty>
            </isParameterPresent>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMER ID">
                    UPPER(CUSTOMER.CUST_ID) LIKE UPPER('%$CUSTOMER ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="Name">
                    UPPER(get_cust_name(CUSTOMER.CUST_ID)) LIKE UPPER('%$Name$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUST_TYPE_ID">
                    UPPER(CUSTOMER.CUST_TYPE_ID) LIKE UPPER('%$CUST_TYPE_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="BRANCH_CODE">
                    UPPER(CUSTOMER.BRANCH_CODE) LIKE UPPER('%$BRANCH_CODE$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="member_no">
                    UPPER(SA.share_acct_no) LIKE UPPER('%$member_no$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="address">
                    UPPER((cust_addr.street || ',' || cust_addr.area)) LIKE UPPER('%$address$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY CUSTOMER.CUST_ID
    </dynamic-mapped-statement>
    
    <!-- Get Selected Deposit Joint account info Queries -->          
    <mapped-statement name="getSelectAccInfoTblDisplay" result-class="java.util.LinkedHashMap" >
        SELECT CUSTOMER.CUST_ID, 
        get_cust_name(CUSTOMER.CUST_ID) AS "NAME",
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS CUST_TYPE, DECODE (CUSTOMER.CUST_TYPE, 'INDIVIDUAL', CUSTOMER.MINOR, CUSTOMER.CUST_TYPE_ID) AS "MINOR" ,
        CUSTOMER_STATUS
        FROM CUSTOMER 
        WHERE (CUSTOMER.CUST_ID = #CUST_ID:VARCHAR#)
        AND (CUSTOMER.STATUS NOT IN ('DELETED'))
        AND CUSTOMER.AUTHORIZE_STATUS='AUTHORIZED'
    </mapped-statement>

    <!-- Get Product Behaves Like -->                  
    <mapped-statement name="getProductBehavesLike" result-class="java.util.HashMap" >
        SELECT DEPOSITS_PRODUCT.PROD_ID, DEPOSITS_PRODUCT.BEHAVES_LIKE, DEPOSITS_PROD_INTPAY.INT_TYPE
        FROM DEPOSITS_PRODUCT, DEPOSITS_PROD_INTPAY
        WHERE DEPOSITS_PRODUCT.PROD_ID  = DEPOSITS_PROD_INTPAY.PROD_ID AND DEPOSITS_PRODUCT.PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getBehavesLike" result-class="java.util.HashMap" >
        SELECT BEHAVES_LIKE,  MIN_DAYS_BKDT_DEPOSITS  
        FROM DEPOSITS_PRODUCT DEP, DEPOSITS_PROD_RENEWAL DER  
        WHERE DEP.PROD_ID = #PROD_ID:VARCHAR# AND
        DEP.PROD_ID = DER.PROD_ID AND STATUS != 'DELETED' AND AUTHORIZE_STATUS = 'AUTHORIZED' 
    </mapped-statement>
        
        
    <!-- Get Selected Customer Details Queries -->        
    <dynamic-mapped-statement name="getSelectAccInfoDisplayWithAddressType" result-class="java.util.HashMap" >
        SELECT CUSTOMER.CUST_ID, CUSTOMER.CUST_TYPE_ID, CUSTOMER.DESIGNATION, get_cust_name(CUSTOMER.CUST_ID) as "Name", 
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS CUST_TYPE, CREATEDDT, COMP_NAME, COMM_ADDR_TYPE, DOB, STREET, AREA, CITY,
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE LOOKUP_REF_ID= CITY AND LOOKUP_ID = 'CUSTOMER.CITY')CITY1, STATE,
        (SELECT lookup_desc FROM lookup_master WHERE LOOKUP_REF_ID= STATE AND LOOKUP_ID = 'CUSTOMER.STATE')STATE1, 
        PIN_CODE, COUNTRY_CODE, CUST_PHONE.PHONE_TYPE_ID, CUST_PHONE.AREA_CODE, CUST_PHONE.PHONE_NUMBER, CUST_PHONE.ADDR_TYPE, CUST_PHONE.PHONE_ID,
        (SELECT lookup_desc FROM lookup_master WHERE LOOKUP_REF_ID= COUNTRY_CODE AND LOOKUP_ID = 'CUSTOMER.COUNTRY')COUNTRY,
        (SELECT lookup_desc FROM lookup_master WHERE LOOKUP_REF_ID = customer.caste AND lookup_id = 'CUSTOMER.CASTE') CASTDESC, 
        MEMBERSHIP_CLASS,MEMBERSHIP_NO,CUSTOMER_STATUS,MINOR,CUSTOMER.CASTE,AGE,DESAM     
        FROM CUSTOMER , CUST_ADDR , CUST_PHONE
        WHERE (CUSTOMER.CUST_ID = #CUST_ID:VARCHAR#)
        AND (CUSTOMER.STATUS IN ('MODIFIED', 'UPDATE', 'CREATED'))
        AND (CUST_ADDR.CUST_ID  = CUSTOMER.CUST_ID)
        AND (CUST_PHONE.CUST_ID  = CUSTOMER.CUST_ID)
        <!--AND (CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE)-->
        AND CUST_ADDR.ADDR_TYPE = #ADDR_TYPE:VARCHAR#
        <!--dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "BRANCH_ID">
                    CUSTOMER.BRANCH_CODE = #BRANCH_ID#
                </isNotNull>
            </isParameterPresent>
        </dynamic-->
        <!--        AND (CUSTOMER.BRANCH_CODE = #BRANCH_ID#)-->
    </dynamic-mapped-statement>
    
       <dynamic-mapped-statement name="getSelectAccInfoDisplay" result-class="java.util.HashMap" >
        SELECT CUSTOMER.CUST_ID, CUSTOMER.CUST_TYPE_ID, CUSTOMER.DESIGNATION, get_cust_name(CUSTOMER.CUST_ID) as "NAME", 
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE 
        (LOOKUP_ID = 'CORPORATE.CUSTOMER_TYPE' OR LOOKUP_ID = 'CUSTOMER.TYPE') AND 
        LOOKUP_REF_ID = CUSTOMER.CUST_TYPE) AS CUST_TYPE, CREATEDDT, COMP_NAME, COMM_ADDR_TYPE, DOB, STREET, AREA, CITY,
        (SELECT LOOKUP_DESC FROM LOOKUP_MASTER WHERE LOOKUP_REF_ID= CITY AND LOOKUP_ID = 'CUSTOMER.CITY')CITY1, STATE,
        (SELECT lookup_desc FROM lookup_master WHERE LOOKUP_REF_ID= STATE AND LOOKUP_ID = 'CUSTOMER.STATE')STATE1, 
        PIN_CODE, COUNTRY_CODE, CUST_PHONE.PHONE_TYPE_ID, CUST_PHONE.AREA_CODE, CUST_PHONE.PHONE_NUMBER, CUST_PHONE.ADDR_TYPE, CUST_PHONE.PHONE_ID,
        (SELECT lookup_desc FROM lookup_master WHERE LOOKUP_REF_ID= COUNTRY_CODE AND LOOKUP_ID = 'CUSTOMER.COUNTRY')COUNTRY,
        (SELECT lookup_desc FROM lookup_master WHERE LOOKUP_REF_ID = customer.caste AND lookup_id = 'CUSTOMER.CASTE') CASTDESC, 
        MEMBERSHIP_CLASS,MEMBERSHIP_NO,CUSTOMER_STATUS,MINOR,CUSTOMER.CASTE,AGE,DESAM,RETIREMENT_DT,CARE_OF_NAME,POSTOFFICE 
        FROM CUSTOMER join cust_addr on customer.cust_id = cust_addr.cust_id 
        LEFT JOIN cust_phone ON (cust_phone.cust_id = cust_addr.cust_id
        AND cust_phone.status in('MODIFIED','CREATED'))
        WHERE (CUSTOMER.CUST_ID = #CUST_ID:VARCHAR# OR CUSTOMER.MEMBERSHIP_NO =#CUST_ID:VARCHAR#)
        AND (CUSTOMER.STATUS IN ('MODIFIED', 'UPDATE', 'CREATED'))
        <!--AND (CUST_ADDR.CUST_ID = CUSTOMER.CUST_ID)-->
        <!--AND (CUST_PHONE.CUST_ID = CUSTOMER.CUST_ID)-->
        AND (CUSTOMER.COMM_ADDR_TYPE = CUST_ADDR.ADDR_TYPE)
        <!--dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "BRANCH_ID">
                    CUSTOMER.BRANCH_CODE = #BRANCH_ID#
                </isNotNull>
            </isParameterPresent>
        </dynamic-->
        <!--        AND (CUSTOMER.BRANCH_CODE = #BRANCH_ID#)-->
    </dynamic-mapped-statement>
        
    <!-- Get Selected Account Head according to the Selected Product ID Queries -->  
    <dynamic-mapped-statement name="getAcctHead" result-class="java.util.HashMap">
        SELECT PROD_ID, PROD_DESC, ACCT_HEAD,BEHAVES_LIKE FROM DEPOSITS_PRODUCT WHERE PROD_ID = #PROD_ID:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "BEHAVES_LIKE">
                    BEHAVES_LIKE = #BEHAVES_LIKE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>

    <mapped-statement name="getTotalBalDep" result-class="java.util.HashMap">
        SELECT DSA.TOTAL_BALANCE,DA.RENEWAL_FROM_DEPOSIT FROM DEPOSIT_SUB_ACINFO DSA,
        DEPOSIT_ACINFO DA  WHERE DSA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND ACCT_STATUS !='CLOSED'
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO        
    </mapped-statement>
    <!-- =================================================================================== -->
    <!-- DEPOSIT TRANSFERIN  Queries (Begin) -->

    <!-- Use TransferInTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertTransferInTO" inline-parameters="true">
        INSERT INTO DEPOSIT_TRANSIN
        (DEPOSIT_NO, TRANS_BRANCH_CODE, ORIGINAL_AC_NUMBER, ORIGINAL_DEPOSIT_DT, PRINTED_FDR, INTERBRANCH_TRANS_NO, TRANS_DT, TRANS_AMT, LAST_INTCALC_DT, TDS_COLLECTED_UPTO, INT_PROV_AMT, LAST_TDS_COLLECTED, INT_PAID, TOT_NO_INSTALL, TOT_INSTALL_RECEIVED, LAST_INSTALL_RECDT, BALANCE_INT_PAYABLE
        ) VALUES (
        #depositNo:VARCHAR#, #transBranchCode:VARCHAR#, #originalAcNumber:VARCHAR#, #originalDepositDt:DATE#, #printedFdr:NUMERIC#, #interbranchTransNo:VARCHAR#, #transDt:DATE#, #transAmt:NUMERIC#, #lastIntcalcDt:DATE#, #tdsCollectedUpto:DATE#, #intProvAmt:NUMERIC#, #lastTdsCollected:NUMERIC#, #intPaid:NUMERIC#, #totNoInstall:NUMERIC#, #totInstallReceived:NUMERIC#, #lastInstallRecdt:DATE#, #balanceIntPayable:NUMERIC#)
    </mapped-statement>

    <!-- Use TransferInTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateTransferInTO" inline-parameters="true">
        UPDATE DEPOSIT_TRANSIN SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        TRANS_BRANCH_CODE = #transBranchCode:VARCHAR#,
        ORIGINAL_AC_NUMBER = #originalAcNumber:VARCHAR#,
        ORIGINAL_DEPOSIT_DT = #originalDepositDt:DATE#,
        PRINTED_FDR = #printedFdr:NUMERIC#,
        INTERBRANCH_TRANS_NO = #interbranchTransNo:VARCHAR#,
        TRANS_DT = #transDt:DATE#,
        TRANS_AMT = #transAmt:NUMERIC#,
        LAST_INTCALC_DT = #lastIntcalcDt:DATE#,
        TDS_COLLECTED_UPTO = #tdsCollectedUpto:DATE#,
        INT_PROV_AMT = #intProvAmt:NUMERIC#,
        LAST_TDS_COLLECTED = #lastTdsCollected:NUMERIC#,
        INT_PAID = #intPaid:NUMERIC#,
        TOT_NO_INSTALL = #totNoInstall:NUMERIC#,
        TOT_INSTALL_RECEIVED = #totInstallReceived:NUMERIC#,
        LAST_INSTALL_RECDT = #lastInstallRecdt:DATE#,
        BALANCE_INT_PAYABLE = #balanceIntPayable:NUMERIC#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR# 
    </mapped-statement>

    <!-- Use TransferInTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->         
    <mapped-statement name="delTransferInTO" inline-parameters="true">
        DELETE FROM DEPOSIT_TRANSIN 
        WHERE DEPOSIT_NO = #value:VARCHAR# 
    </mapped-statement>         
        
    <mapped-statement name="deleteTransferInTO" inline-parameters="true">
        UPDATE DEPOSIT_TRANSIN SET 
        <!--    DEPOSIT_NO = #depositNo:VARCHAR#, -->
        TRANS_BRANCH_CODE = #transBranchCode:VARCHAR#,
        ORIGINAL_AC_NUMBER = #originalAcNumber:VARCHAR#,
        ORIGINAL_DEPOSIT_DT = #originalDepositDt:DATE#,
        PRINTED_FDR = #printedFdr:NUMERIC#,
        INTERBRANCH_TRANS_NO = #interbranchTransNo:VARCHAR#,
        TRANS_DT = #transDt:DATE#,
        TRANS_AMT = #transAmt:NUMERIC#,
        LAST_INTCALC_DT = #lastIntcalcDt:DATE#,
        TDS_COLLECTED_UPTO = #tdsCollectedUpto:DATE#,
        INT_PROV_AMT = #intProvAmt:NUMERIC#,
        LAST_TDS_COLLECTED = #lastTdsCollected:NUMERIC#,
        INT_PAID = #intPaid:NUMERIC#,
        TOT_NO_INSTALL = #totNoInstall:NUMERIC#,
        TOT_INSTALL_RECEIVED = #totInstallReceived:NUMERIC#,
        LAST_INSTALL_RECDT = #lastInstallRecdt:DATE#,
        BALANCE_INT_PAYABLE = #balanceIntPayable:NUMERIC#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR# 
    </mapped-statement>

    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to TransferInTO object (JavaBean) properties -->
    <result-map name="getTransferInTOResult" class="com.see.truetransact.transferobject.deposit.TransferInTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="transBranchCode" column="TRANS_BRANCH_CODE"/>
        <property name="originalAcNumber" column="ORIGINAL_AC_NUMBER"/>
        <property name="originalDepositDt" column="ORIGINAL_DEPOSIT_DT"/>
        <property name="printedFdr" column="PRINTED_FDR"/>
        <property name="interbranchTransNo" column="INTERBRANCH_TRANS_NO"/>
        <property name="transDt" column="TRANS_DT"/>
        <property name="transAmt" column="TRANS_AMT"/>
        <property name="lastIntcalcDt" column="LAST_INTCALC_DT"/>
        <property name="tdsCollectedUpto" column="TDS_COLLECTED_UPTO"/>
        <property name="intProvAmt" column="INT_PROV_AMT"/>
        <property name="lastTdsCollected" column="LAST_TDS_COLLECTED"/>
        <property name="intPaid" column="INT_PAID"/>
        <property name="totNoInstall" column="TOT_NO_INSTALL"/>
        <property name="totInstallReceived" column="TOT_INSTALL_RECEIVED"/>
        <property name="lastInstallRecdt" column="LAST_INSTALL_RECDT"/>
        <property name="balanceIntPayable" column="BALANCE_INT_PAYABLE"/>
    </result-map>

    <!-- Get Selected Deposit TransferIN Queries -->
    <mapped-statement name="getTransInDetails" result-class="java.util.HashMap" >
        SELECT DEPOSIT_NO, TRANS_BRANCH_CODE, ORIGINAL_AC_NUMBER, ORIGINAL_DEPOSIT_DT, PRINTED_FDR, INTERBRANCH_TRANS_NO, TRANS_DT, TRANS_AMT, LAST_INTCALC_DT, TDS_COLLECTED_UPTO, INT_PROV_AMT, LAST_TDS_COLLECTED, INT_PAID, TOT_NO_INSTALL, TOT_INSTALL_RECEIVED, LAST_INSTALL_RECDT, BALANCE_INT_PAYABLE 
        FROM DEPOSIT_TRANSIN 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>
    
    <!-- DEPOSIT TRANSFERIN  Queries (END) -->    
    <!-- =================================================================================== -->

    
    <!-- Get Selected Branch Code and Branch Name Queries -->        
    <mapped-statement name="getSelectBranchName" result-class="java.util.HashMap" >
        SELECT BRANCH_CODE, BRANCH_NAME 
        FROM BRANCH_MASTER
        WHERE BRANCH_CODE = #BRANCH CODE:VARCHAR#
    </mapped-statement>
         
    <!-- View all Account Number for Standin Instruction Queries -->   
    <dynamic-mapped-statement name="Deposite.ViewAllAccountNumber" result-class="java.util.LinkedHashMap" >
        <!--        SELECT PROD_ID AS "Product ID", CUST_ID AS "Customer ID", DEPOSIT_NO AS "Account Number"
        FROM DEPOSIT_ACINFO WHERE STATUS != 'DELETED' AND AUTHORIZE_STATUS ='AUTHORIZED' -->
        SELECT TRANS_ID,TRANS_BRANCH_CODE,INTER_TRANS_NO,TRANS_DT,TRANS_AMT,DEPOSIT_NO,
        CURRENT_BRANCH AS "TRANSFER_OUT_BRANCH"
        FROM DEPOSIT_TRANSFER_OUT WHERE AUTHORIZE_STATUS = 'AUTHORIZED' AND 
        DEPOSIT_NO NOT IN (SELECT ORIGINAL_AC_NUMBER FROM DEPOSIT_TRANSIN)
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "DEPOSIT_NUMBER">
                    DEPOSIT_NO = #DEPOSIT_NUMBER:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "CURRENT_BRANCH">
                    CURRENT_BRANCH = #CURRENT_BRANCH:VARCHAR#
                </isNotNull>
            </isParameterPresent>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="TRANS_ID">
                    UPPER(TRANS_ID) LIKE UPPER('%$TRANS_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="TRANS_BRANCH_CODE">
                    UPPER(TRANS_BRANCH_CODE) LIKE UPPER('%$TRANS_BRANCH_CODE$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="INTER_TRANS_NO">
                    UPPER(INTER_TRANS_NO) LIKE UPPER('%$INTER_TRANS_NO$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="TRANS_AMT">
                    UPPER(TRANS_AMT) LIKE UPPER('%$TRANS_AMT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="TRANS_AMT">
                    UPPER(TRANS_AMT) LIKE UPPER('%$TRANS_AMT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="DEPOSIT_NO">
                    UPPER(DEPOSIT_NO) LIKE UPPER('%$DEPOSIT_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="TRANSFER_OUT_BRANCH">
                    UPPER(CURRENT_BRANCH) LIKE UPPER('%$TRANSFER_OUT_BRANCH$%')
                </isNotNull>
            </isParameterPresent>
        </dynamic>        
    </dynamic-mapped-statement>
    
    <mapped-statement name="DepositViewAllAccountNumber" result-class="java.util.LinkedHashMap" >
        SELECT TRANS_ID,TRANS_BRANCH_CODE,INTER_TRANS_NO,TRANS_DT,TRANS_AMT,DEPOSIT_NO,
        CURRENT_BRANCH AS "TRANSFER_OUT_BRANCH"
        FROM DEPOSIT_TRANSFER_OUT WHERE AUTHORIZE_STATUS = 'AUTHORIZED'
        AND DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    <!-- Get Selected Deposit Transfer IN Original Dt Queries -->            
    <mapped-statement name="Deposite.getSelectedAccountNumber" result-class="java.util.LinkedHashMap" >
        SELECT DEPOSIT_NO, CREATED_DT
        FROM DEPOSIT_ACINFO
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND  STATUS NOT IN ('DELETED')
    </mapped-statement>

    <!-- =================================================================================== -->
    <!-- DEPOSIT INTRO SELF Queries (Begin) -->
    
    <!--Use IntroSelfTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertIntroSelfTO" inline-parameters="true">
        INSERT INTO DEPOSIT_INTRO_SELF
        (DEPOSIT_NO, ACCT_NO, INTRO_CUST_ID
        ) VALUES (
        #depositNo:VARCHAR#, #acctNo:VARCHAR#, #introCustId:VARCHAR#)
    </mapped-statement>

    <!-- Use IntroSelfTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateIntroSelfTO" inline-parameters="true">
        UPDATE DEPOSIT_INTRO_SELF SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        ACCT_NO = #acctNo:VARCHAR#,
        INTRO_CUST_ID = #introCustId:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="delIntroSelfTO" inline-parameters="true">
        DELETE FROM DEPOSIT_INTRO_SELF 
        WHERE DEPOSIT_NO = #value:VARCHAR# 
    </mapped-statement>
        
    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to IntroSelfTO object (JavaBean) properties -->
    <result-map name="getIntroSelfTOResult" class="com.see.truetransact.transferobject.deposit.IntroSelfTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="acctNo" column="ACCT_NO"/>
        <property name="introCustId" column="INTRO_CUST_ID"/>
    </result-map>
    
    <mapped-statement name="getSelectIntroSelfTO" result-class="java.util.HashMap" >
        SELECT * FROM DEPOSIT_INTRO_SELF 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>
    
    <!-- DEPOSIT INTRO SELF Queries (End) -->    
    <!-- =================================================================================== -->

    <!-- =================================================================================== -->
    <!-- DEPOSIT INTRO DOC Queries (Begin) -->

    <!-- Use IntroDocTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertIntroDocTO" inline-parameters="true">
        INSERT INTO DEPOSIT_INTRO_DOC
        (DEPOSIT_NO, DOC_TYPE, ISSUE_DT, EXPIRY_DT, ISSUED_BY, DOC_NO
        ) VALUES (
        #depositNo:VARCHAR#, #docType:VARCHAR#, #issueDt:DATE#, #expiryDt:DATE#, #issuedBy:VARCHAR#, #docNo:VARCHAR#)
    </mapped-statement>

    <!-- Use IntroDocTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateIntroDocTO" inline-parameters="true">
        UPDATE DEPOSIT_INTRO_DOC SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        DOC_TYPE = #docType:VARCHAR#,
        ISSUE_DT = #issueDt:DATE#,
        EXPIRY_DT = #expiryDt:DATE#,
        ISSUED_BY = #issuedBy:VARCHAR#,
        DOC_NO = #docNo:VARCHAR#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR#
    </mapped-statement>

    <!-- Use IntroDocTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="delIntroDocTO" inline-parameters="true">
        DELETE FROM DEPOSIT_INTRO_DOC 
        WHERE DEPOSIT_NO = #value:VARCHAR#
    </mapped-statement>
        
    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to IntroDocTO object (JavaBean) properties -->
    <result-map name="getIntroDocTOResult" class="com.see.truetransact.transferobject.deposit.IntroDocTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="docType" column="DOC_TYPE"/>
        <property name="issueDt" column="ISSUE_DT"/>
        <property name="expiryDt" column="EXPIRY_DT"/>
        <property name="issuedBy" column="ISSUED_BY"/>
        <property name="docNo" column="DOC_NO"/>
    </result-map>
    
    <mapped-statement name="getSelectIntroDocTO" result-class="java.util.HashMap" >
        SELECT * FROM DEPOSIT_INTRO_DOC 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>
    
    <!-- DEPOSIT INTRO DOC Queries Queries (End) -->    
    <!-- =================================================================================== -->    

    <!-- =================================================================================== -->
    <!-- DEPOSIT INTRO PROOF Queries (Begin) -->

    <!-- Use IntroIdentityTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertIntroIdentityTO" inline-parameters="true">
        INSERT INTO DEPOSIT_INTRO_PROOF
        (DEPOSIT_NO, PROOF_TYPE_ID, PROOF_NUM, ISSUE_AUTH
        ) VALUES (
        #depositNo:VARCHAR#, #proofTypeId:VARCHAR#, #proofNum:VARCHAR#, #issueAuth:VARCHAR#)
    </mapped-statement>

    <!-- Use IntroIdentityTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateIntroIdentityTO" inline-parameters="true">
        UPDATE DEPOSIT_INTRO_PROOF SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        PROOF_TYPE_ID = #proofTypeId:VARCHAR#,
        PROOF_NUM = #proofNum:VARCHAR#,
        ISSUE_AUTH = #issueAuth:VARCHAR#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR#
    </mapped-statement>

    <!-- Use IntroIdentityTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="delIntroIdentityTO" inline-parameters="true">
        DELETE FROM DEPOSIT_INTRO_PROOF 
        WHERE DEPOSIT_NO = #value:VARCHAR# 
    </mapped-statement>
	
    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to IntroIdentityTO object (JavaBean) properties -->
    <result-map name="getIntroIdentityTOResult" class="com.see.truetransact.transferobject.deposit.IntroIdentityTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="proofTypeId" column="PROOF_TYPE_ID"/>
        <property name="proofNum" column="PROOF_NUM"/>
        <property name="issueAuth" column="ISSUE_AUTH"/>
    </result-map>
    
    <mapped-statement name="getSelectIntroIdentityTO" result-class="java.util.HashMap" >
        SELECT * FROM DEPOSIT_INTRO_PROOF 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>
    
    <!-- DEPOSIT INTRO PROOF  Queries (End) -->    
    <!-- =================================================================================== -->    

    <!-- =================================================================================== -->
    <!-- DEPOSIT INTRO OTHERBANK Queries (Begin) -->

    <!-- Use IntroOtherBankTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertIntroOtherBankTO" inline-parameters="true">
        INSERT INTO DEPOSIT_INTRO_OTHERBANK
        (DEPOSIT_NO, BANK_NAME, BRANCH_NAME, OTHER_ACT_NUM, OTHER_ACT_NAME
        ) VALUES (
        #depositNo:VARCHAR#, #bankName:VARCHAR#, #branchName:VARCHAR#, #otherActNum:VARCHAR#, #otherActName:VARCHAR#)
    </mapped-statement>

    <!-- Use IntroOtherBankTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateIntroOtherBankTO" inline-parameters="true">
        UPDATE DEPOSIT_INTRO_OTHERBANK SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        BANK_NAME = #bankName:VARCHAR#,
        BRANCH_NAME = #branchName:VARCHAR#,
        OTHER_ACT_NUM = #otherActNum:VARCHAR#,
        OTHER_ACT_NAME = #otherActName:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>

    <!-- Use IntroOtherBankTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteIntroOtherBankTO" inline-parameters="true">
        UPDATE DEPOSIT_INTRO_OTHERBANK SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        BANK_NAME = #bankName:VARCHAR#,
        BRANCH_NAME = #branchName:VARCHAR#,
        OTHER_ACT_NUM = #otherActNum:VARCHAR#,
        OTHER_ACT_NAME = #otherActName:VARCHAR#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="delIntroOtherBankTO" inline-parameters="true">
        DELETE FROM DEPOSIT_INTRO_OTHERBANK 
        WHERE DEPOSIT_NO = #value:VARCHAR#
    </mapped-statement>
	
    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to IntroOtherBankTO object (JavaBean) properties -->
    <result-map name="getIntroOtherBankTOResult" class="com.see.truetransact.transferobject.deposit.IntroOtherBankTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="bankName" column="BANK_NAME"/>
        <property name="branchName" column="BRANCH_NAME"/>
        <property name="otherActNum" column="OTHER_ACT_NUM"/>
        <property name="otherActName" column="OTHER_ACT_NAME"/>
    </result-map>

    <mapped-statement name="getSelectIntroOtherBankTO" result-class="java.util.HashMap" >
        SELECT * FROM DEPOSIT_INTRO_OTHERBANK 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>
    
    
    <!-- DEPOSIT INTRO OTHERBANK Queries (End) -->    
    <!-- =================================================================================== -->    

    <!-- =================================================================================== -->
    <!-- DEPOSIT INTRO OTHERS Queries (Begin) -->

    <!-- Use IntroOthersTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertIntroOthersTO" inline-parameters="true">
        INSERT INTO DEPOSIT_INTRO_OTHERS
        (DEPOSIT_NO, INTRO_NAME, INTRO_DESIG, STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE, AREA_CODE, PH_NO
        ) VALUES (
        #depositNo:VARCHAR#, #introName:VARCHAR#, #introDesig:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, #city:VARCHAR#, #state:VARCHAR#, #pinCode:VARCHAR#, #countryCode:VARCHAR#, #areaCode:VARCHAR#, #phNo:VARCHAR#)
    </mapped-statement>

    <!-- Use IntroOthersTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateIntroOthersTO" inline-parameters="true">
        UPDATE DEPOSIT_INTRO_OTHERS SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        INTRO_NAME = #introName:VARCHAR#,
        INTRO_DESIG = #introDesig:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        PIN_CODE = #pinCode:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        AREA_CODE = #areaCode:VARCHAR#,
        PH_NO = #phNo:VARCHAR#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR#
    </mapped-statement>

    <!-- Use IntroOthersTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="delIntroOthersTO" inline-parameters="true">
        DELETE FROM DEPOSIT_INTRO_OTHERS 
        WHERE DEPOSIT_NO = #value:VARCHAR# 
    </mapped-statement>


    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to IntroOthersTO object (JavaBean) properties -->
    <result-map name="getIntroOthersTOResult" class="com.see.truetransact.transferobject.deposit.IntroOthersTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="introName" column="INTRO_NAME"/>
        <property name="introDesig" column="INTRO_DESIG"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="pinCode" column="PIN_CODE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="areaCode" column="AREA_CODE"/>
        <property name="phNo" column="PH_NO"/>
    </result-map>

    <mapped-statement name="getSelectIntroOthersTO" result-class="java.util.HashMap" >
        SELECT DEPOSIT_NO, INTRO_NAME, INTRO_DESIG, STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE, AREA_CODE, PH_NO 
        FROM DEPOSIT_INTRO_OTHERS
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>
       
    <!--<dynamic-mapped-statement name="getAccNoDet" result-class="java.util.HashMap">
        SELECT ACT_NUM as "Account Number",get_cust_name(CUSTOMER.CUST_ID) AS "Customer Name",PROD_ID AS "Product Id",ACT_MASTER.BRANCH_CODE,
        CUSTOMER.MEMBERSHIP_NO AS MEMBERSHIP_NO FROM ACT_MASTER, CUSTOMER WHERE ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID AND
        ACT_MASTER.STATUS != 'DELETED' AND AUTHORIZATION_STATUS = 'AUTHORIZED' AND
        CUSTOMER.STATUS != 'DELETED' AND AUTHORIZE_STATUS = 'AUTHORIZED'
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="ACT_NUM">
                    ACT_MASTER.ACT_NUM = #ACT_NUM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>-->
    
    <dynamic-mapped-statement name="getAccNoDet" result-class="java.util.HashMap">
        SELECT act_num AS "ACCOUNT NUMBER",
        <!--fname || ' ' || mname || ' ' || lname-->
        <!--get_cust_name(C.CUST_ID) AS "CUSTOMER NAME",-->
        decode(cust_type,'INDIVIDUAL',CONCAT(CONCAT(CONCAT(CONCAT(FNAME, ' '), MNAME), ' '), LNAME),comp_name ) AS "CUSTOMER NAME",
        prod_id AS "Product Id", ALL_PRODUCT_ACCTS1.BRANCH_ID as "BRANCH_CODE", 
        customer.membership_no AS membership_no,ALL_PRODUCT_ACCTS1.PROD_TYPE as PROD_TYPE
        FROM ALL_PRODUCT_ACCTS1 ,CUSTOMER
        Where ALL_PRODUCT_ACCTS1.CUST_ID = CUSTOMER.CUST_ID
        and ALL_PRODUCT_ACCTS1.ACCT_STATUS != 'DELETED' 
        AND authorization_status = 'AUTHORIZED'
        AND customer.status != 'DELETED'
        AND authorize_status = 'AUTHORIZED'
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend="AND" property="ACT_NUM">
                    ALL_PRODUCT_ACCTS1.ACT_NUM = #ACT_NUM:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>

	<dynamic-mapped-statement name="getOtherBankAccNoDet" result-class="java.util.HashMap">
        SELECT ACT_MASTER_ID AS "Account Number",
		'' AS "Customer Name",
		prod_id AS "Product Id", OBAM.BRANCH_ID as "BRANCH_CODE", 
		'' AS membership_no
		FROM OTHER_BANKS_ACT_MASTER OBAM WHERE ACT_MASTER_ID = #ACT_NUM:VARCHAR#
		AND OBAM.status != 'DELETED' AND OBAM.authorized_status = 'AUTHORIZED'
    </dynamic-mapped-statement>
    
    <mapped-statement name="getSAAccNoProdIdDet" result-class="java.util.HashMap" >
        SELECT ALL_PRODUCT_ACCTS1.CUST_ID, ac_hd.ac_hd_id,
        '[' || ac_hd.ac_hd_desc || ']' AS "AC_HD_DESC",
        ac_hd.ac_hd_id || ' [' || ac_hd.ac_hd_desc || ']' AS "ACCT_HEAD",
        act_num, get_cust_name(customer.cust_id) AS "NAME",
        SUSPENSE_PRODUCT.PROD_ID
        FROM ALL_PRODUCT_ACCTS1, customer, ac_hd, SUSPENSE_PRODUCT
        WHERE ALL_PRODUCT_ACCTS1.cust_id = customer.cust_id
        AND ac_hd.ac_hd_id = SUSPENSE_PRODUCT.ac_hd_id
        AND ALL_PRODUCT_ACCTS1.prod_id = SUSPENSE_PRODUCT.prod_id
        AND ALL_PRODUCT_ACCTS1.act_num = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getADAccNoProdIdDet" result-class="java.util.HashMap" >
         SELECT ALL_PRODUCT_ACCTS1.CUST_ID, ac_hd.ac_hd_id,
        '[' || ac_hd.ac_hd_desc || ']' AS "AC_HD_DESC",
        ac_hd.ac_hd_id || ' [' || ac_hd.ac_hd_desc || ']' AS "ACCT_HEAD",
        act_num, get_cust_name(customer.cust_id) AS "NAME",
        LOANS_PRODUCT.PROD_ID
        FROM ALL_PRODUCT_ACCTS1, customer, ac_hd, LOANS_PRODUCT
        WHERE ALL_PRODUCT_ACCTS1.cust_id = customer.cust_id
        AND ac_hd.ac_hd_id = LOANS_PRODUCT.ACCT_HEAD
        AND ALL_PRODUCT_ACCTS1.prod_id = LOANS_PRODUCT.prod_id
        AND ALL_PRODUCT_ACCTS1.act_num =#ACT_NUM:VARCHAR#
    </mapped-statement>
       
    <mapped-statement name="getAccNoProdIdDet" result-class="java.util.HashMap" >
        SELECT ACT_MASTER.CUST_ID, AC_HD.AC_HD_ID, '['||AC_HD.AC_HD_DESC||']' as "AC_HD_DESC", AC_HD.AC_HD_ID||' ['||AC_HD.AC_HD_DESC||']' as "ACCT_HEAD", ACT_NUM, get_cust_name(CUSTOMER.CUST_ID) "NAME", OP_AC_PRODUCT.PROD_ID
        FROM ACT_MASTER, CUSTOMER, AC_HD, OP_AC_PRODUCT
        WHERE ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID AND AC_HD.AC_HD_ID = OP_AC_PRODUCT.AC_HD_ID AND ACT_MASTER.PROD_ID = OP_AC_PRODUCT.PROD_ID AND ACT_MASTER.ACT_NUM = #ACT_NUM:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getOtherAccNoHeaddDet" result-class="java.util.HashMap" >
    	select principal_ac_hd,obap.prod_id from OTHER_BANK_ACCOUNT_PRODUCTS  obap,OTHER_BANKS_ACT_MASTER obam
		where OBAP.PROD_ID =obam.PROD_ID and obam.ACT_MASTER_ID = #ACT_MASTER_ID# and 
		obap.AUTHORIZE_STATUS ='AUTHORIZED' 
    </mapped-statement>
    
    <!-- DEPOSIT INTRO OTHERS Queries (End) -->    
    <!-- =================================================================================== -->    

    <!-- =================================================================================== -->
    <!-- DEPOSIT AUTHORIZED Queries (Begin) -->        

    <!-- Use AuthSignTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertAuthSignTO" inline-parameters="true">
        INSERT INTO DEPOSIT_AUTHORIZED
        (DEPOSIT_NO, AUTHORIZED_NO, NAME, COMM_ADDR, DESIGNATION, STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE, AREA_CODE, HOME_PHONE, HOME_FAX, PAGER, EMAILID, BUSINESS_PHONE, BUSINESS_FAX, MOBILE, LIMITS, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (
        #depositNo:VARCHAR#, #authorizedNo:VARCHAR#, #name:VARCHAR#, #commAddr:VARCHAR#, #designation:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, #city:VARCHAR#, #state:VARCHAR#, #pinCode:VARCHAR#, #countryCode:VARCHAR#, #areaCode:VARCHAR#, #homePhone:VARCHAR#, #homeFax:VARCHAR#, #pager:VARCHAR#, #emailid:VARCHAR#, #businessPhone:VARCHAR#, #businessFax:VARCHAR#, #mobile:VARCHAR#, #limits:NUMERIC#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#)
    </mapped-statement>

    <!-- Use AuthSignTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateAuthSignTO" inline-parameters="true">
        UPDATE DEPOSIT_AUTHORIZED SET 
        <!--	DEPOSIT_NO = #depositNo:VARCHAR#,
        AUTHORIZED_NO = #authorizedNo:VARCHAR#, -->
        NAME = #name:VARCHAR#,
        COMM_ADDR = #commAddr:VARCHAR#,
        DESIGNATION = #designation:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        PIN_CODE = #pinCode:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        AREA_CODE = #areaCode:VARCHAR#,
        HOME_PHONE = #homePhone:VARCHAR#,
        HOME_FAX = #homeFax:VARCHAR#,
        PAGER = #pager:VARCHAR#,
        EMAILID = #emailid:VARCHAR#,
        BUSINESS_PHONE = #businessPhone:VARCHAR#,
        BUSINESS_FAX = #businessFax:VARCHAR#,
        MOBILE = #mobile:VARCHAR#,
        LIMITS = #limits:NUMERIC#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR# 
        AND AUTHORIZED_NO = #authorizedNo:VARCHAR#
    </mapped-statement>

    <!-- Use AuthSignTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteAuthSignTO" inline-parameters="true">
        UPDATE DEPOSIT_AUTHORIZED SET 
        <!--	DEPOSIT_NO = #depositNo:VARCHAR#,
        AUTHORIZED_NO = #authorizedNo:VARCHAR#, -->
        NAME = #name:VARCHAR#,
        COMM_ADDR = #commAddr:VARCHAR#,
        DESIGNATION = #designation:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        PIN_CODE = #pinCode:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        AREA_CODE = #areaCode:VARCHAR#,
        HOME_PHONE = #homePhone:VARCHAR#,
        HOME_FAX = #homeFax:VARCHAR#,
        PAGER = #pager:VARCHAR#,
        EMAILID = #emailid:VARCHAR#,
        BUSINESS_PHONE = #businessPhone:VARCHAR#,
        BUSINESS_FAX = #businessFax:VARCHAR#,
        MOBILE = #mobile:VARCHAR#,
        LIMITS = #limits:NUMERIC#
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR# 
        AND AUTHORIZED_NO = #authorizedNo:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getCountAuthSign" result-class="java.util.HashMap" >
        SELECT  COUNT(*) COUNT FROM DEPOSIT_AUTHORIZED WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>


    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to AuthSignTO object (JavaBean) properties -->
    <result-map name="getAuthSignTOResult" class="com.see.truetransact.transferobject.deposit.AuthSignTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="authorizedNo" column="AUTHORIZED_NO"/>
        <property name="name" column="NAME"/>
        <property name="commAddr" column="COMM_ADDR"/>
        <property name="designation" column="DESIGNATION"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="pinCode" column="PIN_CODE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="areaCode" column="AREA_CODE"/>
        <property name="homePhone" column="HOME_PHONE"/>
        <property name="homeFax" column="HOME_FAX"/>
        <property name="pager" column="PAGER"/>
        <property name="emailid" column="EMAILID"/>
        <property name="businessPhone" column="BUSINESS_PHONE"/>
        <property name="businessFax" column="BUSINESS_FAX"/>
        <property name="mobile" column="MOBILE"/>
        <property name="limits" column="LIMITS"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
    </result-map>

    <mapped-statement name="getSelectAuthSignTO" result-class="java.util.LinkedHashMap" >
        SELECT * FROM DEPOSIT_AUTHORIZED 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# ORDER BY TO_NUMBER(AUTHORIZED_NO)
    </mapped-statement>
    
    <mapped-statement name="getNoOfAuthSign" result-class="java.util.HashMap" >
        SELECT COUNT(*) AS COUNT FROM DEPOSIT_AUTHORIZED
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>


    
    <!-- DEPOSIT AUTHORIZED Queries (End) -->    
    <!-- =================================================================================== -->    

    <!-- =================================================================================== -->
    <!-- DEPOSIT POA Queries (Begin) -->       

    <!--Use PoATO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertPoATO" inline-parameters="true">
        INSERT INTO DEPOSIT_POA
        (DEPOSIT_NO, POA_NO, POA_HOLDER_NAME, STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE, AREA_CODE, PH_NO, PERIOD_FROM, PERIOD_TO, REMARKS, ADDR_TYPE, STATUS, STATUS_BY, STATUS_DT, CUST_ID, ON_BEHALF_OF
        ) VALUES (
        #depositNo:VARCHAR#, #poaNo:VARCHAR#, #poaHolderName:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, #city:VARCHAR#, #state:VARCHAR#, #pinCode:VARCHAR#, #countryCode:VARCHAR#, #areaCode:VARCHAR#, #phNo:VARCHAR#, #periodFrom:DATE#, #periodTo:DATE#, #remarks:VARCHAR#, #addrType:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#, #custId:VARCHAR#, #onBehalfOf:VARCHAR#)
    </mapped-statement>
    
    <!-- Use PoATO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updatePoATO" inline-parameters="true">
        UPDATE DEPOSIT_POA SET 
        <!--	DEPOSIT_NO = #depositNo:VARCHAR#,
        POA_NO = #poaNo:VARCHAR#, -->
        POA_HOLDER_NAME = #poaHolderName:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        PIN_CODE = #pinCode:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        AREA_CODE = #areaCode:VARCHAR#,
        PH_NO = #phNo:VARCHAR#,
        PERIOD_FROM = #periodFrom:DATE#,
        PERIOD_TO = #periodTo:DATE#,
        REMARKS = #remarks:VARCHAR#,
        ADDR_TYPE = #addrType:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        CUST_ID = #custId:VARCHAR#,
        ON_BEHALF_OF = #onBehalfOf:VARCHAR#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR# 
        AND POA_NO = #poaNo:VARCHAR#
    </mapped-statement>

    <!-- Use PoATO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deletePoATO" inline-parameters="true">
        UPDATE DEPOSIT_POA SET 
        <!--	DEPOSIT_NO = #depositNo:VARCHAR#,
        POA_NO = #poaNo:VARCHAR#, -->
        POA_HOLDER_NAME = #poaHolderName:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        PIN_CODE = #pinCode:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        AREA_CODE = #areaCode:VARCHAR#,
        PH_NO = #phNo:VARCHAR#,
        PERIOD_FROM = #periodFrom:DATE#,
        PERIOD_TO = #periodTo:DATE#,
        REMARKS = #remarks:VARCHAR#,
        ADDR_TYPE = #addrType:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        CUST_ID = #custId:VARCHAR#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR#
    </mapped-statement>
        
    <mapped-statement name="getCountPoa" result-class="java.util.HashMap" >
        SELECT  COUNT(*) COUNT FROM DEPOSIT_POA WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
 
    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to PoATO object (JavaBean) properties -->
    <result-map name="getPoATOResult" class="com.see.truetransact.transferobject.deposit.PoATO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="poaNo" column="POA_NO"/>
        <property name="poaHolderName" column="POA_HOLDER_NAME"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="pinCode" column="PIN_CODE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="areaCode" column="AREA_CODE"/>
        <property name="phNo" column="PH_NO"/>
        <property name="periodFrom" column="PERIOD_FROM"/>
        <property name="periodTo" column="PERIOD_TO"/>
        <property name="remarks" column="REMARKS"/>
        <property name="addrType" column="ADDR_TYPE"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="custId" column="CUST_ID"/>
    </result-map>
    
    <mapped-statement name="getSelectPoATO" result-class="java.util.LinkedHashMap" >
        SELECT  DEPOSIT_NO, POA_NO, POA_HOLDER_NAME, STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE, AREA_CODE, PH_NO, PERIOD_FROM, PERIOD_TO, REMARKS, ADDR_TYPE, CUST_ID, ON_BEHALF_OF, STATUS
        FROM DEPOSIT_POA
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# ORDER BY TO_NUMBER(POA_NO)
    </mapped-statement>
    
    <!-- DEPOSIT POA Queries (End) -->    
    <!-- =================================================================================== -->    

    <!-- =================================================================================== -->
    <!-- DEPOSIT NOMINEE Queries (Begin) -->     

    <!-- Use NomTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertNomTO" inline-parameters="true">
        INSERT INTO DEPOSIT_NOMINEE
        (DEPOSIT_NO, NOMINEE_ID, NOMINEE_NAME, RELATIONSHIP, STREET, AREA, CITY, STATE, PIN_CODE, COUNTRY_CODE, AREA_CODE, PH_NO, SHARE_PER, NOMINEE_STATUS, NOMINEE_DOB, GUARDIAN_NAME, G_STREET, G_AREA, G_CITY, G_STATE, G_PIN_CODE, G_COUNTRY_CODE, G_AREA_CODE, G_PH_NO, ADDR_TYPE, G_ADDR_TYPE, G_TYPE, STATUS, STATUS_BY, STATUS_DT, NOMINATED_BY
        ) VALUES (
        #depositNo:VARCHAR#, #nomineeId:VARCHAR#, #nomineeName:VARCHAR#, #relationship:VARCHAR#, #street:VARCHAR#, #area:VARCHAR#, #city:VARCHAR#, #state:VARCHAR#, #pinCode:VARCHAR#, #countryCode:VARCHAR#, #areaCode:VARCHAR#, #phNo:VARCHAR#, #sharePer:NUMERIC#, #nomineeStatus:VARCHAR#, #nomineeDob:DATE#, #guardianName:VARCHAR#, #gStreet:VARCHAR#, #gArea:VARCHAR#, #gCity:VARCHAR#, #gState:VARCHAR#, #gPinCode:VARCHAR#, #gCountryCode:VARCHAR#, #gAreaCode:VARCHAR#, #gPhNo:VARCHAR#, #addrType:VARCHAR#, #gAddrType:VARCHAR#, #gType:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#, #nominatedBy:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="getCountNomDet" result-class="java.util.HashMap" >
        SELECT  COUNT(*) COUNT FROM DEPOSIT_NOMINEE WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
        
    <!-- Use NomTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateNomTO" inline-parameters="true">
        UPDATE DEPOSIT_NOMINEE SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        NOMINEE_ID = #nomineeId:VARCHAR#,
        NOMINEE_NAME = #nomineeName:VARCHAR#,
        RELATIONSHIP = #relationship:VARCHAR#,
        STREET = #street:VARCHAR#,
        AREA = #area:VARCHAR#,
        CITY = #city:VARCHAR#,
        STATE = #state:VARCHAR#,
        PIN_CODE = #pinCode:VARCHAR#,
        COUNTRY_CODE = #countryCode:VARCHAR#,
        AREA_CODE = #areaCode:VARCHAR#,
        PH_NO = #phNo:VARCHAR#,
        SHARE_PER = #sharePer:NUMERIC#,
        NOMINEE_STATUS = #nomineeStatus:VARCHAR#,
        NOMINEE_DOB = #nomineeDob:DATE#,
        GUARDIAN_NAME = #guardianName:VARCHAR#,
        G_STREET = #gStreet:VARCHAR#,
        G_AREA = #gArea:VARCHAR#,
        G_CITY = #gCity:VARCHAR#,
        G_STATE = #gState:VARCHAR#,
        G_PIN_CODE = #gPinCode:VARCHAR#,
        G_COUNTRY_CODE = #gCountryCode:VARCHAR#,
        G_AREA_CODE = #gAreaCode:VARCHAR#,
        G_PH_NO = #gPhNo:VARCHAR#,
        ADDR_TYPE = #addrType:VARCHAR#,
        G_ADDR_TYPE = #gAddrType:VARCHAR#,
        G_TYPE = #gType:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#,
        NOMINATED_BY = #nominatedBy:VARCHAR#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR#  AND NOMINEE_ID = #nomineeId:VARCHAR#
    </mapped-statement>

    <!-- Use NomTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <!--mapped-statement name="deleteNomTO" inline-parameters="true">
        UPDATE DEPOSIT_NOMINEE SET 
        STATUS = #STATUS:VARCHAR#, 
        STATUS_BY = #USER_ID:VARCHAR#, 
        STATUS_DT = #CURR_DATE#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR#  AND NOMINEE_ID = #nomineeId:VARCHAR#
    </mapped-statement-->
    
    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to NomTO object (JavaBean) properties -->
    <result-map name="getNomTOResult" class="com.see.truetransact.transferobject.deposit.NomTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="nomineeId" column="NOMINEE_ID"/>
        <property name="nomineeName" column="NOMINEE_NAME"/>
        <property name="relationship" column="RELATIONSHIP"/>
        <property name="street" column="STREET"/>
        <property name="area" column="AREA"/>
        <property name="city" column="CITY"/>
        <property name="state" column="STATE"/>
        <property name="pinCode" column="PIN_CODE"/>
        <property name="countryCode" column="COUNTRY_CODE"/>
        <property name="areaCode" column="AREA_CODE"/>
        <property name="phNo" column="PH_NO"/>
        <property name="sharePer" column="SHARE_PER"/>
        <property name="nomineeStatus" column="NOMINEE_STATUS"/>
        <property name="nomineeDob" column="NOMINEE_DOB"/>
        <property name="guardianName" column="GUARDIAN_NAME"/>
        <property name="gStreet" column="G_STREET"/>
        <property name="gArea" column="G_AREA"/>
        <property name="gCity" column="G_CITY"/>
        <property name="gState" column="G_STATE"/>
        <property name="gPinCode" column="G_PIN_CODE"/>
        <property name="gCountryCode" column="G_COUNTRY_CODE"/>
        <property name="gAreaCode" column="G_AREA_CODE"/>
        <property name="gPhNo" column="G_PH_NO"/>
        <property name="addrType" column="ADDR_TYPE"/>
        <property name="gAddrType" column="G_ADDR_TYPE"/>
        <property name="gType" column="G_TYPE"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
        <property name="nominatedBy" column="NOMINATED_BY"/>
    </result-map>
    
    <mapped-statement name="getSelectNomTO" result-class="java.util.LinkedHashMap" >
        SELECT * FROM DEPOSIT_NOMINEE 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# ORDER BY TO_NUMBER(NOMINEE_ID)
    </mapped-statement>
        
    <mapped-statement name="getAccNo" result-class="java.util.HashMap" >
        SELECT  ACT_NUM as "Account Number",get_cust_name(CUSTOMER.CUST_ID) AS "Customer Name",PROD_ID AS "Product Id"
        FROM ACT_MASTER, CUSTOMER 
        WHERE (ACT_MASTER.CUST_ID = CUSTOMER.CUST_ID) AND (PROD_ID = #PROD_ID:VARCHAR#)
        AND ACT_MASTER.STATUS != 'DELETED' AND AUTHORIZATION_STATUS = 'AUTHORIZED' AND
        CUSTOMER.STATUS != 'DELETED' AND AUTHORIZE_STATUS = 'AUTHORIZED'
    </mapped-statement>
    
    <!-- DEPOSIT NOMINEE Queries (End) -->    
    <!-- =================================================================================== -->    

    <!-- =================================================================================== -->
    <!-- DEPOSIT STANDING INSTRU Queries (Begin) -->      
       
    <!--Use StandInstrDebitTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertStandInstrDebitTO" inline-parameters="true">
        INSERT INTO DEPOSIT_STANDING_INSTRU
        (DEPOSIT_NO, DEBIT_PROD_ID, DEBIT_ACHD, DEPOSIT_SUB_NO, AMOUNT, PARTICULARS
        ) VALUES (
        #depositNo:VARCHAR#, #debitProdId:VARCHAR#, #debitAchd:VARCHAR#, #depositSubNo:VARCHAR#, #amount:NUMERIC#, #particulars:VARCHAR#)
    </mapped-statement>

    <!-- Use StandInstrDebitTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateStandInstrDebitTO" inline-parameters="true">
        UPDATE DEPOSIT_STANDING_INSTRU SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        DEBIT_PROD_ID = #debitProdId:VARCHAR#,
        DEBIT_ACHD = #debitAchd:VARCHAR#,
        DEPOSIT_SUB_NO = #depositSubNo:VARCHAR#,
        AMOUNT = #amount:NUMERIC#,
        PARTICULARS = #particulars:VARCHAR#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="delStandInstrDebitTO" inline-parameters="true">
        DELETE FROM DEPOSIT_STANDING_INSTRU 
        WHERE DEPOSIT_NO = #value:VARCHAR#  
    </mapped-statement> 
    
    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to StandInstrDebitTO object (JavaBean) properties -->
    <result-map name="getStandInstrDebitTOResult" class="com.see.truetransact.transferobject.deposit.StandInstrDebitTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="debitProdId" column="DEBIT_PROD_ID"/>
        <property name="debitAchd" column="DEBIT_ACHD"/>
        <property name="depositSubNo" column="DEPOSIT_SUB_NO"/>
        <property name="amount" column="AMOUNT"/>
        <property name="particulars" column="PARTICULARS"/>
    </result-map>
    
    <mapped-statement name="getSelectStandInstrDebitTO" result-class="java.util.HashMap" >
        SELECT * FROM DEPOSIT_STANDING_INSTRU 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>
    
    <!-- DEPOSIT STANDING INSTRU Queries (End) -->    
    <!-- =================================================================================== -->    

    <!-- =================================================================================== -->
    <!-- DEPOSIT STANDING INSTRU CR Queries (Begin) -->      
           
    
    <!--Use StandInstrCreditTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertStandInstrCreditTO" inline-parameters="true">
        INSERT INTO DEPOSIT_STANDING_INSTRU_CR
        (DEPOSIT_NO, DEPOSIT_SUB_NO, CR_PROD_ID, CR_ACHD, CR_AC_NO, CR_DEPOSIT_NO, CR_AMOUNT, CR_PARTICULARS, STATUS, STATUS_BY, STATUS_DT
        ) VALUES (
        #depositNo:VARCHAR#, #depositSubNo:VARCHAR#, #crProdId:VARCHAR#, #crAchd:VARCHAR#, #crAcNo:VARCHAR#, #crDepositNo:VARCHAR#, #crAmount:NUMERIC#, #crParticulars:VARCHAR#, #status:VARCHAR#, #statusBy:VARCHAR#, #statusDt:DATE#)
    </mapped-statement>

    <!-- Use StandInstrCreditTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateStandInstrCreditTO" inline-parameters="true">
        UPDATE DEPOSIT_STANDING_INSTRU_CR SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        DEPOSIT_SUB_NO = #depositSubNo:VARCHAR#,
        CR_PROD_ID = #crProdId:VARCHAR#,
        CR_ACHD = #crAchd:VARCHAR#,
        CR_AC_NO = #crAcNo:VARCHAR#,
        CR_DEPOSIT_NO = #crDepositNo:VARCHAR#,
        CR_AMOUNT = #crAmount:NUMERIC#,
        CR_PARTICULARS = #crParticulars:VARCHAR#,
        STATUS = #status:VARCHAR#,
        STATUS_BY = #statusBy:VARCHAR#,
        STATUS_DT = #statusDt:DATE#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR#
    </mapped-statement>

    <!-- Use StandInstrCreditTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="delStandInstrCreditTO" inline-parameters="true">
        DELETE FROM DEPOSIT_STANDING_INSTRU_CR 
        WHERE DEPOSIT_NO = #value:VARCHAR#  
    </mapped-statement>
        
    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to StandInstrCreditTO object (JavaBean) properties -->
    <result-map name="getStandInstrCreditTOResult" class="com.see.truetransact.transferobject.deposit.StandInstrCreditTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="depositSubNo" column="DEPOSIT_SUB_NO"/>
        <property name="crProdId" column="CR_PROD_ID"/>
        <property name="crAchd" column="CR_ACHD"/>
        <property name="crAcNo" column="CR_AC_NO"/>
        <property name="crDepositNo" column="CR_DEPOSIT_NO"/>
        <property name="crAmount" column="CR_AMOUNT"/>
        <property name="crParticulars" column="CR_PARTICULARS"/>
        <property name="status" column="STATUS"/>
        <property name="statusBy" column="STATUS_BY"/>
        <property name="statusDt" column="STATUS_DT"/>
    </result-map>

    <mapped-statement name="getSelectStandInstrCreditTO" result-class="java.util.LinkedHashMap" >
        SELECT * FROM DEPOSIT_STANDING_INSTRU_CR 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# ORDER BY CR_AC_NO, CR_PROD_ID 
    </mapped-statement>
    
    <!-- DEPOSIT STANDING INSTRU CR Queries (End) -->    
    <!-- =================================================================================== -->    

    <!-- DEPOSIT RateOfInterst Calculation  Queries  -->    
    <dynamic-mapped-statement name="getDepProdIntPay" result-class="java.util.HashMap">
        <!--This query needs to be checked against the screen. Working for batch job... -->   
        SELECT NO_DAYS_YEAR DAYS_YEARS, INT_COMP_FREQ COMP_FREQ, INT_ROUNDOFF_TERMS ROUND_OFF, INT_TYPE, INT_APPL_FREQ 
        FROM DEPOSITS_PROD_INTPAY 
        WHERE PROD_ID = #PROD_ID:VARCHAR# 
        <dynamic>
            <isParameterPresent>
                <isNotNull  property="DATE_FROM">
                    <isNotNull prepend="AND" property="DATE_TO">
                        ((LAST_INT_APPLDT + INT_PROV_FREQ) BETWEEN #DATE_FROM:DATE# AND #DATE_TO:DATE#)
                    </isNotNull>
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
    <!-- DEPOSIT RateOfInterst Calculation  Queries  -->    
    
    <!-- =================================================================================== -->
    <!-- DEPOSIT SUB ACINFO Queries (Begin) --> 
       
    <!--Use DepSubNoAccInfoTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <!--    <mapped-statement name="insertDepSubNoAccInfoTO" inline-parameters="true">
        INSERT INTO DEPOSIT_SUB_ACINFO
        (DEPOSIT_NO, DEPOSIT_SUB_NO, DEPOSIT_DT, DEPOSIT_PERIOD_YY, DEPOSIT_PERIOD_MM, DEPOSIT_PERIOD_DD, DEPOSIT_AMT, INTPAY_MODE, INTPAY_FREQ, MATURITY_DT, RATE_OF_INT, MATURITY_AMT, TOT_INT_AMT, PERIODIC_INT_AMT, STATUS, CLEAR_BALANCE, UNCLEAR_BALANCE, AVAILABLE_BALANCE, CLOSE_DT, CLOSE_BY, CREATE_BY, AUTHORIZE_DT, AUTHORIZE_BY, AUTHORIZE_STATUS, SHADOW_LIEN, SHADOW_FREEZE, SUBSTATUS_BY, SUBSTATUS_DT, ACCT_STATUS, LAST_INT_APPL_DT, TOTAL_INT_CREDIT, TOTAL_INT_DRAWN, TOTAL_INT_DEBIT, TOTAL_INSTALLMENTS, TOTAL_INSTALL_PAID, PAYMENT_DAY, INSTALL_TYPE, PAYMENT_TYPE,TOTAL_BALANCE,LAST_TRANS_DT
        ) VALUES (
        #depositNo:VARCHAR#, #depositSubNo:VARCHAR#, #depositDt:DATE#, #depositPeriodYy:NUMERIC#, #depositPeriodMm:NUMERIC#, #depositPeriodDd:NUMERIC#, #depositAmt:NUMERIC#, #intpayMode:VARCHAR#, #intpayFreq:NUMERIC#, #maturityDt:DATE#, #rateOfInt:NUMERIC#, #maturityAmt:NUMERIC#, #totIntAmt:NUMERIC#, #periodicIntAmt:NUMERIC#, #status:VARCHAR#, #clearBalance:NUMERIC#, #unclearBalance:NUMERIC#, #availableBalance:NUMERIC#, #closeDt:DATE#, #closeBy:VARCHAR#, #createBy:VARCHAR#, #authorizeDt:DATE#, #authorizeBy:VARCHAR#, #authorizeStatus:VARCHAR#, #shadowLien:NUMERIC#, #shadowFreeze:NUMERIC#, #substatusBy:VARCHAR#, #substatusDt:DATE#, #acctStatus:VARCHAR#, #lastIntApplDt:DATE#, #totalIntCredit:NUMERIC#, #totalIntDrawn:NUMERIC#, #totalIntDebit:NUMERIC#, #totalInstallments:NUMERIC#, #totalInstallPaid:NUMERIC#, #paymentDay:DATE#, #installType:VARCHAR#, #paymentType:VARCHAR#, #totalBalance:NUMERIC#, #lastTransDt:DATE#)
    </mapped-statement> -->

    <mapped-statement name="insertDepSubNoAccInfoTO" inline-parameters="true">
        INSERT INTO DEPOSIT_SUB_ACINFO
        (DEPOSIT_NO, DEPOSIT_SUB_NO, DEPOSIT_DT, DEPOSIT_PERIOD_YY, DEPOSIT_PERIOD_MM,
        DEPOSIT_PERIOD_DD, DEPOSIT_AMT, INTPAY_MODE, INTPAY_FREQ, MATURITY_DT, RATE_OF_INT,
        MATURITY_AMT, TOT_INT_AMT, PERIODIC_INT_AMT, STATUS, CLEAR_BALANCE, UNCLEAR_BALANCE, 
        AVAILABLE_BALANCE, CLOSE_DT, CLOSE_BY, CREATE_BY, AUTHORIZE_DT, AUTHORIZE_BY, AUTHORIZE_STATUS, 
        SHADOW_LIEN, SHADOW_FREEZE, SUBSTATUS_BY, SUBSTATUS_DT, ACCT_STATUS, LAST_INT_APPL_DT, TOTAL_INT_CREDIT, 
        TOTAL_INT_DRAWN, TOTAL_INT_DEBIT, TOTAL_INSTALLMENTS, TOTAL_INSTALL_PAID, PAYMENT_DAY, INSTALL_TYPE, 
        PAYMENT_TYPE,TOTAL_BALANCE,LAST_TRANS_DT, PENAL_INT, INT_PAY_PROD_TYPE, INT_PAY_PROD_ID, INT_PAY_ACC_NO,
        CALENDER_FREQ,CALENDER_DATE,CALENDER_DAY,FLEXI_STATUS,SALARY_RECOVERY,POSTAGE_AMT,DEPOSIT_PERIOD_WK ,MULTIPLE_DEPOSIT_ID,RENEWED_DT
        ) VALUES (
        #depositNo:VARCHAR#, #depositSubNo:VARCHAR#, #depositDt:DATE#, #depositPeriodYy:NUMERIC#, #depositPeriodMm:NUMERIC#, 
        #depositPeriodDd:NUMERIC#, #depositAmt:NUMERIC#, #intpayMode:VARCHAR#, #intpayFreq:NUMERIC#, #maturityDt:DATE#, 
        #rateOfInt:NUMERIC#,#maturityAmt:NUMERIC#, #totIntAmt:NUMERIC#, #periodicIntAmt:NUMERIC#, #status:VARCHAR#,
        #clearBalance:NUMERIC#, #unclearBalance:NUMERIC#,#availableBalance:NUMERIC#, #closeDt:DATE#, #closeBy:VARCHAR#,
        #createBy:VARCHAR#, #authorizeDt:DATE#, #authorizeBy:VARCHAR#,#authorizeStatus:VARCHAR#, #shadowLien:NUMERIC#,
        #shadowFreeze:NUMERIC#, #substatusBy:VARCHAR#, #substatusDt:DATE#, #acctStatus:VARCHAR#,#lastIntApplDt:DATE#,
        #totalIntCredit:NUMERIC#, #totalIntDrawn:NUMERIC#, #totalIntDebit:NUMERIC#, #totalInstallments:NUMERIC#, 
        #totalInstallPaid:NUMERIC#, #paymentDay:DATE#, #installType:VARCHAR#, #paymentType:VARCHAR#, #totalBalance:NUMERIC#, 
        #lastTransDt:DATE#,#penalInt:VARCHAR#,#intPayProdType:VARCHAR#,#intPayProdId:VARCHAR#,#intPayAcNo:VARCHAR#,
        #calender_freq:VARCHAR#,#calender_date:DATE#,#calender_day:NUMBER#,#flexi_status:VARCHAR# , #salaryRecovery:VARCHAR#
        ,#postageAmt:NUMERIC#,#depositPeriodWk:NUMERIC#,#multipleDepositId:VARCHAR#,#renewedDt:DATE#)
    </mapped-statement>
    
    <mapped-statement name="insertDepSubNoAccInfoTOSameNo" inline-parameters="true">
        INSERT INTO DEPOSIT_SUB_ACINFO_SAMENO
        (DEPOSIT_NO, DEPOSIT_SUB_NO, DEPOSIT_DT, DEPOSIT_PERIOD_YY, DEPOSIT_PERIOD_MM,
        DEPOSIT_PERIOD_DD, DEPOSIT_AMT, INTPAY_MODE, INTPAY_FREQ, MATURITY_DT, RATE_OF_INT,
        MATURITY_AMT, TOT_INT_AMT, PERIODIC_INT_AMT, STATUS, CLEAR_BALANCE, UNCLEAR_BALANCE, 
        AVAILABLE_BALANCE, CLOSE_DT, CLOSE_BY, CREATE_BY, AUTHORIZE_DT, AUTHORIZE_BY, AUTHORIZE_STATUS, 
        SHADOW_LIEN, SHADOW_FREEZE, SUBSTATUS_BY, SUBSTATUS_DT, ACCT_STATUS, LAST_INT_APPL_DT, TOTAL_INT_CREDIT, 
        TOTAL_INT_DRAWN, TOTAL_INT_DEBIT, TOTAL_INSTALLMENTS, TOTAL_INSTALL_PAID, PAYMENT_DAY, INSTALL_TYPE, 
        PAYMENT_TYPE,TOTAL_BALANCE,LAST_TRANS_DT, PENAL_INT, INT_PAY_PROD_TYPE, INT_PAY_PROD_ID, INT_PAY_ACC_NO,
        CALENDER_FREQ,CALENDER_DATE,CALENDER_DAY,FLEXI_STATUS,CREATED_DT,RENEWAL_INTEREST_PAYABLE,RENEWAL_INTEREST_PAID,POSTAGE_AMT,RENEWED_DT
        ) VALUES (
        #depositNo:VARCHAR#, #depositSubNo:VARCHAR#, #depositDt:DATE#, #depositPeriodYy:NUMERIC#, #depositPeriodMm:NUMERIC#, 
        #depositPeriodDd:NUMERIC#, #depositAmt:NUMERIC#, #intpayMode:VARCHAR#, #intpayFreq:NUMERIC#, #maturityDt:DATE#, 
        #rateOfInt:NUMERIC#,#maturityAmt:NUMERIC#, #totIntAmt:NUMERIC#, #periodicIntAmt:NUMERIC#, #status:VARCHAR#, 
        #clearBalance:NUMERIC#, #unclearBalance:NUMERIC#,#availableBalance:NUMERIC#, #closeDt:DATE#, #closeBy:VARCHAR#, 
        #createBy:VARCHAR#, #authorizeDt:DATE#, #authorizeBy:VARCHAR#,#authorizeStatus:VARCHAR#, #shadowLien:NUMERIC#, 
        #shadowFreeze:NUMERIC#, #substatusBy:VARCHAR#, #substatusDt:DATE#, #acctStatus:VARCHAR#,#lastIntApplDt:DATE#, 
        #totalIntCredit:NUMERIC#, #totalIntDrawn:NUMERIC#, #totalIntDebit:NUMERIC#, #totalInstallments:NUMERIC#, 
        #totalInstallPaid:NUMERIC#, #paymentDay:DATE#, #installType:VARCHAR#, #paymentType:VARCHAR#, #totalBalance:NUMERIC#, 
        #lastTransDt:DATE#,#penalInt:VARCHAR#,#intPayProdType:VARCHAR#,#intPayProdId:VARCHAR#,#intPayAcNo:VARCHAR#,
        #calender_freq:VARCHAR#,#calender_date:DATE#,#calender_day:NUMBER#,#flexi_status:VARCHAR#,#createdDt:DATE#,
        #renewintpayable:NUMERIC#,#renewintpaid:NUMERIC#,#postageAmt:NUMERIC#,#renewedDt:DATE#)
    </mapped-statement>
    
    <!-- Use DepSubNoAccInfoTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateDepSubNoAccInfoTO" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET 
        <!--	DEPOSIT_NO = #depositNo:VARCHAR#,
        DEPOSIT_SUB_NO = #depositSubNo:VARCHAR#, -->
        DEPOSIT_DT = #depositDt:DATE#,
        DEPOSIT_PERIOD_YY = #depositPeriodYy:NUMERIC#,
        DEPOSIT_PERIOD_MM = #depositPeriodMm:NUMERIC#,
        DEPOSIT_PERIOD_DD = #depositPeriodDd:NUMERIC#,
        DEPOSIT_AMT = #depositAmt:NUMERIC#,
        INTPAY_MODE = #intpayMode:VARCHAR#,
        INTPAY_FREQ = #intpayFreq:NUMERIC#,
        MATURITY_DT = #maturityDt:DATE#,
        RATE_OF_INT = #rateOfInt:NUMERIC#,
        MATURITY_AMT = #maturityAmt:NUMERIC#,
        TOT_INT_AMT = #totIntAmt:NUMERIC#,
        PERIODIC_INT_AMT = #periodicIntAmt:NUMERIC#,
        POSTAGE_AMT=#postageAmt:NUMERIC#,
        <!--	STATUS = #status:VARCHAR#,
        CLEAR_BALANCE = #clearBalance:NUMERIC#,
        UNCLEAR_BALANCE = #unclearBalance:NUMERIC#,
        AVAILABLE_BALANCE = #availableBalance:NUMERIC#,-->
        CLOSE_DT = #closeDt:DATE#,
        CLOSE_BY = #closeBy:VARCHAR#,
        <!--	CREATE_BY = #createBy:VARCHAR#,-->
        AUTHORIZE_DT = #authorizeDt:DATE#,
        <!--	AUTHORIZE_BY = #authorizeBy:VARCHAR#,-->
        AUTHORIZE_STATUS = #authorizeStatus:VARCHAR#,
        <!--	SHADOW_LIEN = #shadowLien:NUMERIC#,
        SHADOW_FREEZE = #shadowFreeze:NUMERIC#,-->
        SUBSTATUS_BY = #substatusBy:VARCHAR#,
        SUBSTATUS_DT = #substatusDt:DATE#,
        NEXT_INT_APPL_DT = #nextIntAppDate:DATE#,
        <!--	ACCT_STATUS = #acctStatus:VARCHAR#,
        LAST_INT_APPL_DT = #lastIntApplDt:DATE#,
        TOTAL_INT_CREDIT = #totalIntCredit:NUMERIC#,
        TOTAL_INT_DRAWN = #totalIntDrawn:NUMERIC#,
        TOTAL_INT_DEBIT = #totalIntDebit:NUMERIC#,
        TOTAL_INSTALLMENTS = #totalInstallments:NUMERIC#,
        TOTAL_INSTALL_PAID = #totalInstallPaid:NUMERIC#,
        PAYMENT_DAY = #paymentDay:DATE#,
        INSTALL_TYPE = #installType:VARCHAR#,
        PAYMENT_TYPE = #paymentType:VARCHAR#,
        TOTAL_BALANCE = #totalBalance:NUMERIC#,
        LAST_TRANS_DT = #lastTransDt:DATE#,-->
        PENAL_INT = #penalInt:VARCHAR#,<!--FOUR COLUMNS ARE ADDED FOR DEPOSIT_SUB_ACINFO TABLE...-->
        INT_PAY_PROD_TYPE = #intPayProdType:VARCHAR#,
        INT_PAY_PROD_ID = #intPayProdId:VARCHAR#,
        INT_PAY_ACC_NO = #intPayAcNo:VARCHAR#,
        CALENDER_FREQ = #calender_freq:VARCHAR#,
        CALENDER_DATE = #calender_date:DATE#,
        CALENDER_DAY = cast(#calender_day# as numeric),
        SALARY_RECOVERY = #salaryRecovery:VARCHAR#
       
        <!--        FLEXI_STATUS = #flexi_status:VARCHAR#-->
        WHERE DEPOSIT_NO = #depositNo:VARCHAR# AND DEPOSIT_SUB_NO = #depositSubNo:VARCHAR#
    </mapped-statement>

    
    <!-- Use DepSubNoAccInfoTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteDepSubNoAccInfoTO" inline-parameters="true">
        DELETE FROM DEPOSIT_SUB_ACINFO 
        WHERE 
    </mapped-statement>
        
    <mapped-statement name="delDepSubNoAccInfoTO" inline-parameters="true">
        DELETE FROM DEPOSIT_SUB_ACINFO 
        WHERE DEPOSIT_NO = #value:VARCHAR#  
    </mapped-statement>      
        
    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to DepSubNoAccInfoTO object (JavaBean) properties -->
    <result-map name="getDepSubNoAccInfoTOResult" class="com.see.truetransact.transferobject.deposit.DepSubNoAccInfoTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="depositSubNo" column="DEPOSIT_SUB_NO"/>
        <property name="depositDt" column="DEPOSIT_DT"/>
        <property name="depositPeriodYy" column="DEPOSIT_PERIOD_YY"/>
        <property name="depositPeriodMm" column="DEPOSIT_PERIOD_MM"/>
        <property name="depositPeriodDd" column="DEPOSIT_PERIOD_DD"/>
        <property name="depositAmt" column="DEPOSIT_AMT"/>
        <property name="intpayMode" column="INTPAY_MODE"/>
        <property name="intpayFreq" column="INTPAY_FREQ"/>
        <property name="maturityDt" column="MATURITY_DT"/>
        <property name="rateOfInt" column="RATE_OF_INT"/>
        <property name="maturityAmt" column="MATURITY_AMT"/>
        <property name="totIntAmt" column="TOT_INT_AMT"/>
        <property name="periodicIntAmt" column="PERIODIC_INT_AMT"/>
        <property name="status" column="STATUS"/>
        <property name="clearBalance" column="CLEAR_BALANCE"/>
        <property name="unclearBalance" column="UNCLEAR_BALANCE"/>
        <property name="availableBalance" column="AVAILABLE_BALANCE"/>
        <property name="closeDt" column="CLOSE_DT"/>
        <property name="closeBy" column="CLOSE_BY"/>
        <property name="createBy" column="CREATE_BY"/>
        <property name="authorizeDt" column="AUTHORIZE_DT"/>
        <property name="authorizeBy" column="AUTHORIZE_BY"/>
        <property name="authorizeStatus" column="AUTHORIZE_STATUS"/>
        <property name="shadowLien" column="SHADOW_LIEN"/>
        <property name="shadowFreeze" column="SHADOW_FREEZE"/>
        <property name="substatusBy" column="SUBSTATUS_BY"/>
        <property name="substatusDt" column="SUBSTATUS_DT"/>
        <property name="acctStatus" column="ACCT_STATUS"/>
        <property name="lastIntApplDt" column="LAST_INT_APPL_DT"/>
        <property name="totalIntCredit" column="TOTAL_INT_CREDIT"/>
        <property name="totalIntDrawn" column="TOTAL_INT_DRAWN"/>
        <property name="totalIntDebit" column="TOTAL_INT_DEBIT"/>
        <property name="totalInstallments" column="TOTAL_INSTALLMENTS"/>
        <property name="totalInstallPaid" column="TOTAL_INSTALL_PAID"/>
        <property name="paymentDay" column="PAYMENT_DAY"/>
        <property name="installType" column="INSTALL_TYPE"/>
        <property name="paymentType" column="PAYMENT_TYPE"/>
        <property name="calender_freq" column="CALENDER_FREQ"/>
        <property name="calender_date" column="CALENDER_DATE"/>
        <property name="calender_day" column="CALENDER_DAY"/>
        <property name="flexi_status" column="FLEXI_STATUS"/>
        <property name="salaryRecovery" column="SALARY_RECOVERY"/>
        <property name="postageAmt" column="POSTAGE_AMT"/>
 		<property name="renewPostageAmt" column="RENEW_POSTAGE_AMT"/>
        <property name="createdDt" column="CREATED_DT"/>
    </result-map>
    <mapped-statement name="getSelectDepSubNoAccInfoTOMultiple" result-map="getDepSubNoAccInfoTOResult" >
        SELECT * FROM DEPOSIT_SUB_ACINFO 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# AND STATUS != 'DELETED' AND (AUTHORIZE_STATUS != 'REJECTED' OR AUTHORIZE_STATUS IS NULL)
        ORDER BY TO_NUMBER(DEPOSIT_SUB_NO)
    </mapped-statement>
    <mapped-statement name="getSelectDepSubNoAccInfoTO" result-class="java.util.LinkedHashMap" >
        SELECT * FROM DEPOSIT_SUB_ACINFO 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# AND STATUS != 'DELETED' AND (AUTHORIZE_STATUS != 'REJECTED' OR AUTHORIZE_STATUS IS NULL)
        ORDER BY TO_NUMBER(DEPOSIT_SUB_NO)
    </mapped-statement>
    <mapped-statement name="getSelectDepSubNoAccInfowithcategryTO" result-class="java.util.LinkedHashMap" >
        SELECT S.*,A.CATEGORY FROM DEPOSIT_SUB_ACINFO S,DEPOSIT_ACINFO A
        WHERE S.DEPOSIT_NO =#DEPOSIT NO:VARCHAR# AND S.STATUS != 'DELETED' AND (S.AUTHORIZE_STATUS != 'REJECTED' OR S.AUTHORIZE_STATUS IS NULL) AND S.DEPOSIT_NO=A.DEPOSIT_NO
        ORDER BY TO_NUMBER(S.DEPOSIT_SUB_NO)
    </mapped-statement>   
    <mapped-statement name="getSelectSameDepSubNoAccInfoTO" result-class="java.util.LinkedHashMap" >
        <!--	SELECT * FROM DEPOSIT_SUB_ACINFO_SAMENO 
        WHERE DEPOSIT_NO = #DEPOSIT NO# AND STATUS != 'DELETED' AND 
        (AUTHORIZE_STATUS != 'REJECTED' OR AUTHORIZE_STATUS IS NULL) 
        ORDER BY TO_NUMBER(DEPOSIT_SUB_NO) -->
        SELECT * FROM DEPOSIT_SUB_ACINFO_SAMENO   WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# AND STATUS != 'DELETED'
        AND (AUTHORIZE_STATUS != 'REJECTED' OR AUTHORIZE_STATUS IS NULL) AND
        SL_NO IN(SELECT MAX(SL_NO) FROM DEPOSIT_SUB_ACINFO_SAMENO  WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# AND (AUTHORIZE_STATUS != 'REJECTED' OR AUTHORIZE_STATUS IS NULL))
        ORDER BY TO_NUMBER(DEPOSIT_SUB_NO)                    
    </mapped-statement>
    
    <mapped-statement name="getCountDepSubNo" result-class="java.util.HashMap" >
        SELECT  COUNT(*) COUNT FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
      
    <mapped-statement name="getRoI" result-class="java.util.HashMap" >
        SELECT ROI FROM DEPOSIT_ROI_GROUP_TYPE_RATE DR , DEPOSIT_ROI_GROUP_PROD DRP,
        DEPOSIT_ROI_GROUP_CAT  DRC
        WHERE DRC.CATEGORY_ID = #CATEGORY_ID:VARCHAR#
        AND DRP.PROD_ID = #PROD_ID:VARCHAR#
        AND (#DEPOSIT_AMT:NUMBER# BETWEEN FROM_AMOUNT AND TO_AMOUNT)
        AND (#DEPOSIT_PERIOD:VARCHAR# BETWEEN FROM_PERIOD AND TO_PERIOD)
        AND DR.ROI_GROUP_ID = DRP.ROI_GROUP_ID
        AND DRP.ROI_GROUP_ID = DRC.ROI_GROUP_ID
        AND DR.STATUS NOT IN ('DELETED')
        AND DRP.STATUS NOT IN ('DELETED')
        AND DRC.STATUS NOT IN ('DELETED')
    </mapped-statement>
        
    <mapped-statement name="getinsertJointAccntTOSelectJointAccntHolderTO" result-class="java.util.LinkedHashMap" >
        SELECT * FROM DEPOSIT_JOINTACT 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# 
    </mapped-statement>
    
    <!-- DEPOSIT SUB ACINFO Queries Queries (End) -->    
    <!-- =================================================================================== -->    

    <!-- =================================================================================== -->
    <!-- DEPOSIT JOINTACT (Begin) --> 
    
    <!-- Use JointAccntTO object (JavaBean) properties as parameters for insert. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="insertJointAccntTO" inline-parameters="true">
        INSERT INTO DEPOSIT_JOINTACT
        (DEPOSIT_NO, CUST_ID, STATUS
        ) VALUES (
        #depositNo:VARCHAR#, #custId:VARCHAR#, #status:VARCHAR#)
    </mapped-statement>
        
    <mapped-statement name="getCountJointAccntHolders" result-class="java.util.HashMap" >
        SELECT  COUNT(*) COUNT FROM DEPOSIT_JOINTACT WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
        
    <!-- Use JointAccntTO object (JavaBean) properties as parameters for update. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. -->
    <mapped-statement name="updateJointAccntTO" inline-parameters="true">
        UPDATE DEPOSIT_JOINTACT SET 
        DEPOSIT_NO = #depositNo:VARCHAR#,
        CUST_ID = #custId:VARCHAR#,
        STATUS = #status:VARCHAR#
        WHERE DEPOSIT_NO = #depositNo:VARCHAR# 
        AND CUST_ID = #custId:VARCHAR#
    </mapped-statement>

    <!-- Use JointAccntTO object (JavaBean) properties as parameters for delete. 
    Each of the parameters in the #hash# symbols is a JavaBeans property. --> 
    <mapped-statement name="deleteJointAccntTO" inline-parameters="true">
        DELETE FROM DEPOSIT_JOINTACT 
        WHERE 
    </mapped-statement>

    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to 
    be auto-mapped results to JointAccntTO object (JavaBean) properties -->
    <result-map name="getJointAccntTOResult" class="com.see.truetransact.transferobject.deposit.JointAccntTO">
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="custId" column="CUST_ID"/>
        <property name="status" column="STATUS"/>
    </result-map>
    <mapped-statement name="getSelectJointAccntTO" result-map="getJointAccntTOResult" >
        SELECT * FROM DEPOSIT_JOINTACT 
        WHERE 
    </mapped-statement>
    
    <mapped-statement name="getSelectJointAccntHolderTO" result-class="java.util.LinkedHashMap" >
        SELECT * FROM DEPOSIT_JOINTACT 
        WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# 
    </mapped-statement>
    <!-- DEPOSIT JOINTACT Queries Queries (End) -->    
    <!-- =================================================================================== -->  
        
    <mapped-statement name="getRecurringAmtChageData" result-class="java.util.LinkedHashMap" >
        SELECT CHANGE_VALUE, DSA.DEPOSIT_AMT AS "AMOUNT", (DSA.DEPOSIT_DT + DRD.INSTALL_CHARGED) AS "DDATE"
        FROM DEPOSITS_PROD_RD DRD, DEPOSIT_ACINFO DA, DEPOSIT_SUB_ACINFO DSA
        WHERE DSA.DEPOSIT_NO || '_' || DSA.DEPOSIT_SUB_NO = #DEPOSIT_NO:VARCHAR#
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND DA.PROD_ID = DRD.PROD_ID
        AND DRD.INSTALL_RECURRING_DEPAC IN ('V', 'v')
    </mapped-statement>

    <mapped-statement name="getDepositSubNoForSub" result-class="java.util.LinkedHashMap" >
        SELECT DEPOSIT_SUB_NO,get_cust_name(c.cust_id) AS "DEPOSIT_NAME",PROD_ID
        FROM DEPOSIT_SUB_ACINFO DSA, DEPOSIT_ACINFO DA,CUSTOMER C 
        WHERE DA.CUST_ID = #CUST_ID:VARCHAR# 
        AND DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        AND DA.DEPOSIT_NO =  DSA.DEPOSIT_NO
        AND C.CUST_ID = DA.CUST_ID
    </mapped-statement>
   
    <mapped-statement name="getAccountHeadForDep" result-class="java.util.HashMap" >
        SELECT ACCT_HEAD FROM DEPOSITS_PRODUCT WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getDepAmtForOldDeposit" result-class="java.util.HashMap" >
        SELECT DEPOSIT_AMT,DEPOSIT_SUB_NO FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getDepForTransferDeposit" result-class="java.util.HashMap" >
        SELECT AUTHORIZE_STATUS FROM TRANSFER_TRANS WHERE BATCH_ID = #BATCH_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getDepForCashDeposit" result-class="java.util.HashMap" >
        SELECT AUTHORIZE_STATUS FROM CASH_TRANS WHERE TRANS_ID = #TRANS_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getRenewalCountForDep" result-class="java.util.HashMap" >
        <!--        SELECT DEPOSIT_NO,RENEWAL_COUNT,RENEWAL_FROM_DEPOSIT,PROD_ID,BRANCH_ID 
        FROM DEPOSIT_ACINFO WHERE DEPOSIT_NO = #DEPOSIT NO# -->
        SELECT BEHAVES_LIKE,DA.CUST_ID, DSA.DEPOSIT_AMT,DA.DEPOSIT_NO,NVL(RENEWAL_COUNT,1) AS "RENEWAL_COUNT",RENEWAL_FROM_DEPOSIT,
        DSA.DEPOSIT_SUB_NO,DA.PROD_ID,BRANCH_ID,DSA.STATUS,DSA.RENEWED_DT,DSA.TEMP_RENEWED_DT FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA, DEPOSITS_PRODUCT DP 
        WHERE DSA.DEPOSIT_NO = #DEPOSIT NO:VARCHAR# AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND 
        DP.PROD_ID = DA.PROD_ID AND RENEWAL_FROM_DEPOSIT IS NOT NULL <!--AND ACCT_STATUS != 'CLOSED'-->
    </mapped-statement>
    
    <mapped-statement name="getRenewalCountStartingDep" result-class="java.util.HashMap" >
        SELECT BEHAVES_LIKE,DA.CUST_ID, DSA.DEPOSIT_AMT,DA.DEPOSIT_NO,NVL(RENEWAL_COUNT,1) AS "RENEWAL_COUNT",RENEWAL_FROM_DEPOSIT,
        DSA.DEPOSIT_SUB_NO,DA.PROD_ID,BRANCH_ID FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA, DEPOSITS_PRODUCT DP 
        WHERE DSA.DEPOSIT_NO = #DEPOSIT NO:VARCHAR# AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DP.PROD_ID = DA.PROD_ID
    </mapped-statement>  
     
    <mapped-statement name="getShadowDebitAmt" result-class="java.util.HashMap" >
        <!--        SELECT TOTAL_BALANCE, TOTAL_INT_DRAWN,TOT_INT_AMT,ACCT_STATUS,
        SB_INT_AMT, DEPOSIT_SUB_NO FROM DEPOSIT_SUB_ACINFO 
        WHERE DEPOSIT_NO = #DEPOSIT NO# AND (ACCT_STATUS = 'CLOSED' OR ACCT_STATUS = 'MATURED')
        AND TOTAL_BALANCE > 0 -->
        SELECT PROD_ID,TOTAL_BALANCE,PENAL_RATE,TOTAL_INT_CREDIT,TOTAL_INT_DRAWN,TOT_INT_AMT,ACCT_STATUS,MATURITY_DT,
        SHADOW_DEBIT,SB_INT_AMT,INTEREST_AMT,DEPOSIT_SUB_NO,LAST_INT_APPL_DT,DEPOSIT_DT FROM DEPOSIT_SUB_ACINFO DSA, 
        DEPOSIT_ACINFO DA WHERE DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DSA.DEPOSIT_NO = #DEPOSIT NO:VARCHAR# 
        <!--AND TOTAL_BALANCE > 0 AND RENEWAL_FROM_DEPOSIT IS NULL-->
    </mapped-statement>        

    <mapped-statement name="getShadowDebitAmtSameNo" result-class="java.util.HashMap" >
        SELECT PROD_ID,TOTAL_BALANCE,PENAL_RATE,TOTAL_INT_CREDIT,TOTAL_INT_DRAWN,TOT_INT_AMT,ACCT_STATUS,MATURITY_DT,
        SHADOW_DEBIT,SB_INT_AMT,INTEREST_AMT,DEPOSIT_SUB_NO,LAST_INT_APPL_DT,DEPOSIT_DT FROM DEPOSIT_SUB_ACINFO_SAMENO DSA, 
        DEPOSIT_ACINFO DA WHERE DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DSA.DEPOSIT_NO = #DEPOSIT NO:VARCHAR# AND DSA.AUTHORIZE_STATUS IS NULL
        <!--AND nvl(nvl(DSA.RENEWAL_INTEREST_PAYABLE,0)-nvl(DSA.RENEWAL_INTEREST_PAID,0),0)=0-->
    </mapped-statement>    
        
    <mapped-statement name="getDepositsBackDatedDay" result-class="java.util.HashMap" >
        <!--        SELECT MAX_PDBKDT_RENEWAL FROM DEPOSITS_PROD_RENEWAL
        WHERE PROD_ID = #PROD_ID# -->
        SELECT MAX_PDBKDT_RENEWAL,MINIMUM_PERIOD_OF_RENEWAL,RENEWED_DEPOSIT_CLOSED_BEFORE,
        MINIMUM_PERIOD_FROMAT,RENEWED_DEPOSIT_FORMAT,RENEWED_DEPOSIT_INT_PAY,RENEWED_DEPOSIT_INT_RECOVERED,INT_RATE_APPLIED_OVERDUE,
        DATE_OF_RENEWAL,DATE_OF_MATURITY,ELIGIBLE_TWO_RATE,ONE_RATE_AVAIL,BOTH_RATE_NOT_AVAIL FROM DEPOSITS_PROD_RENEWAL
        WHERE PROD_ID = #PROD_ID:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getDepositDetailsForLien" result-class="java.util.HashMap" >
        SELECT AVAILABLE_BALANCE AS AVAILABLE_BALANCE,TOTAL_BALANCE AS TOTAL_BALANCE,
        DSA.STATUS AS STATUS,LIEN_AMOUNT AS LIEN_AMOUNT FROM 
        DEPOSIT_SUB_ACINFO DSA,DEPOSIT_LIEN DL WHERE 
        DSA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DSA.DEPOSIT_NO = DL.DEPOSIT_NO
        <!--        AND DL.STATUS != 'UNLIENED'-->AND DSA.STATUS = 'LIEN'
    </mapped-statement>
    
    <dynamic-mapped-statement name="getClosedDepositDetails" result-class="java.util.LinkedHashMap" >
           SELECT da.deposit_no AS "Deposit No", da.prod_id AS "PRODUCT ID",
           da.cust_id AS "CUSTOMER_ID",
           get_cust_name(customer.cust_id) AS "NAME",
           dsa.acct_status AS "DEPOSIT_STATUS", dsa.close_dt AS "CLOSED_DT"
           FROM deposit_sub_acinfo dsa, deposit_acinfo da, customer
           WHERE customer.branch_code = da.branch_id
           AND da.cust_id = customer.cust_id
           AND dsa.deposit_no = da.deposit_no
           AND dsa.acct_status = 'CLOSED'
           AND dsa.authorize_status = 'AUTHORIZED'
           AND da.branch_id = #SELECTED_BRANCH_ID:VARCHAR#
            <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="Deposit No">
                    UPPER(da.deposit_no) LIKE UPPER('%$Deposit No$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="PRODUCT ID">
                    UPPER(da.prod_id) LIKE UPPER('%$PRODUCT ID$%')
                </isNotNull>
            </isParameterPresent>
              <isParameterPresent>
                <isNotNull prepend="AND"   property="CUSTOMER_ID">
                    UPPER(da.cust_id) LIKE UPPER('%$CUSTOMER_ID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="NAME">
                    UPPER(get_cust_name(customer.cust_id)) LIKE UPPER('%$NAME$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"   property="DEPOSIT_STATUS">
                    UPPER(dsa.acct_status) LIKE UPPER('%$DEPOSIT_STATUS$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"   property="CLOSED_DT">
                    UPPER(dsa.close_dt) LIKE UPPER('%$CLOSED_DT$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
    
    <mapped-statement name="getPresentDepStatus" result-class="java.util.HashMap" >
        SELECT DEPOSIT_NO,LIEN_NO,LIEN_AMOUNT,LIEN_AC_NO,LIEN_DT,STATUS,UNLIEN_DT FROM 
        DEPOSIT_LIEN WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND STATUS !='DELETED'
        AND (AUTHORIZE_STATUS IS NULL OR AUTHORIZE_STATUS ='AUTHORIZED')
    </mapped-statement>
    
    <mapped-statement name="getTdsDeductStatus" result-class="java.util.HashMap" >
        SELECT SUM(TDS_AMT) FROM TDS_COLLECTED WHERE ACCT_NUM = #ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getPresentDepLoanDtStatus" result-class="java.util.HashMap" >
        SELECT LOAN_BALANCE_PRINCIPAL,TOTAL_BALANCE,ACCT_OPEN_DT FROM 
        LOANS_FACILITY_DETAILS WHERE ACCT_NUM = #LIEN_AC_NO:VARCHAR#
    </mapped-statement>
    
    <dynamic-mapped-statement name="getCustomerIdDeposit" result-class="java.util.HashMap" >
        SELECT CUST_ID,OPENING_MODE FROM DEPOSIT_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND" property = "CUST_ID">
                    CUST_ID = #CUST_ID:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
    
    <mapped-statement name="getDepositIntPayableDET" result-class="java.util.HashMap" >
        select dsa.*,da.*  from deposit_acinfo da,Deposit_sub_acinfo DSA where dsa.DEPOSIT_NO =da.DEPOSIT_NO and
        dsa.DEPOSIT_NO||'_'||dsa.DEPOSIT_SUB_NO=#ACCT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getauthorizeByDeposit" result-class="java.util.HashMap" >
        SELECT DEPOSIT_DT,MATURITY_DT,DEPOSIT_AMT,AUTHORIZE_BY,DEPOSIT_NO FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    <mapped-statement name="checkClosedDeposit" result-class="java.util.HashMap" >
        SELECT DEPOSIT_NO,CLOSE_DT
        FROM DEPOSIT_SUB_ACINFO
        WHERE ACCT_STATUS='CLOSED'
        AND DEPOSIT_NO =#DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getDepositProdIdCount" result-class="java.util.LinkedHashMap" >
        SELECT COUNT(*) AS NO_ID 
        FROM DEPOSITS_PRODUCT 
        WHERE PROD_ID = #prodId:VARCHAR#
        OR PROD_DESC = #prodDesc:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getTransferAcctDetails" result-class="java.util.HashMap" >
        SELECT TOT_INT_AMT,INTPAY_MODE,INT_PAY_PROD_TYPE,INT_PAY_PROD_ID,INT_PAY_ACC_NO 
        FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getDepNoFromOldDeposit" result-class="java.util.HashMap" >
        SELECT RENEWAL_FROM_DEPOSIT FROM DEPOSIT_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getTransInstrumentDetails" result-class="java.util.HashMap" >
        SELECT INSTRUMENT_NO1,AMOUNT,TRANS_ID FROM TRANSFER_TRANS WHERE 
        (LINK_BATCH_ID = #DEPOSIT_NO:VARCHAR# OR ACT_NUM = #DEPOSIT_NO:VARCHAR#)AND
        (TRANS_TYPE = 'DEBIT' OR TRANS_TYPE = 'CREDIT') 
        <!--        AND (INSTRUMENT_NO2 ='DEPOSIT_RENEWAL' OR -->
        AND INSTRUMENT_NO1 = 'INTEREST_AMT'
        AND TRANS_DT = #TRANS_DT:DATE#
        <!--        AND ACT_NUM IS NULL
        AND AUTHORIZE_STATUS IS NULL 
        AND AUTHORIZE_STATUS!='REJECTED'-->
    </mapped-statement>
    
    <mapped-statement name="getTransInstrumentCashDetails" result-class="java.util.HashMap" >
        SELECT INSTRUMENT_NO1,TRANS_ID,AMOUNT FROM CASH_TRANS WHERE 
        (LINK_BATCH_ID = #DEPOSIT_NO:VARCHAR# OR ACT_NUM = #DEPOSIT_NO:VARCHAR#)AND
        (TRANS_TYPE = 'DEBIT' OR TRANS_TYPE = 'CREDIT')
        <!--        AND (INSTRUMENT_NO2 ='DEPOSIT_RENEWAL' OR -->
        AND INSTRUMENT_NO1 = 'INTEREST_AMT'
        AND TRANS_DT = #TRANS_DT:DATE#
        <!--        AND ACT_NUM IS NULL
        AND AUTHORIZE_STATUS IS NULL 
        AND AUTHORIZE_STATUS!='REJECTED'-->
    </mapped-statement>
    
    <mapped-statement name="getRenewalOldDetails" result-class="java.util.HashMap" >
        SELECT TOTAL_BALANCE,INTEREST_AMT,SB_INT_AMT,MATURITY_DT,MATURITY_AMT FROM DEPOSIT_SUB_ACINFO 
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS IS NULL)
    </mapped-statement>
            
    <mapped-statement name="updateInstrumentNO1Cash"  result-class="java.util.HashMap">
        UPDATE CASH_TRANS SET INSTRUMENT_NO1 =  NULL,
        INSTRUMENT_NO2 = NULL WHERE LINK_BATCH_ID = #LINK_BATCH_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateInstrumentNO1Transfer"  result-class="java.util.HashMap">
        UPDATE TRANSFER_TRANS SET INSTRUMENT_NO1 =  NULL,
        INSTRUMENT_NO2 = NULL WHERE LINK_BATCH_ID = #LINK_BATCH_ID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getOldDepositAmt" result-class = "java.util.HashMap">
        SELECT DEPOSIT_AMT,PROD_ID FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA WHERE 
        DA.DEPOSIT_NO = #ACT_NUM:VARCHAR# AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO
    </mapped-statement>
    
    <mapped-statement name="getRenewalNewDetails" result-class="java.util.HashMap" >
        SELECT DEPOSIT_AMT,MATURITY_AMT,TOTAL_BALANCE,SHADOW_CREDIT
        FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <!--    <mapped-statement name="updateSameDeposit" result-class="java.util.HashMap" >
        UPDATE DEPOSIT_SUB_ACINFO_SAMENO SET PENAL_RATE =  #INT# WHERE DEPOSIT_NO = #ACT_NUM#
    </mapped-statement> -->
    
    <mapped-statement name="updateSameDepositAcinfo" result-class="java.util.HashMap" >
        UPDATE DEPOSIT_ACINFO SET RENEWAL_FROM_DEPOSIT = #RENEWAL_FROM_DEPOSIT:VARCHAR#,
        STATUS_BY = #STATUS_BY:VARCHAR#,RENEWAL_COUNT =#RENEWAL_COUNT:NUMBER#,CATEGORY =#CATEGORY:VARCHAR#,
        CONSTITUTION = #CONSTITUTION:VARCHAR#,SETTLEMENT_MODE = #SETTLEMENT_MODE:VARCHAR#,
        DEATH_CLAIM = #DEATH_CLAIM:VARCHAR#,AUTO_RENEWAL = #AUTO_RENEWAL:VARCHAR#,
        RENEW_WITH_INT = #RENEW_WITH_INT:VARCHAR#,MAT_ALERT_REPORT = #MAT_ALERT_REPORT:VARCHAR#,
        MEMBER = #MEMBER:VARCHAR#,TRANS_OUT = #TRANS_OUT:VARCHAR#,PRINTING_NO = #PRINTING_NO:VARCHAR#        
        WHERE DEPOSIT_NO = #ACT_NUM:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateDepSubNoAccInfoTOSameNo" result-class="java.util.HashMap" >
        UPDATE DEPOSIT_SUB_ACINFO_SAMENO SET <!--SL_NO = #SL_NO#,-->
        INT_PAY_ACC_NO = #INT_PAY_ACC_NO:VARCHAR#,
        INT_PAY_PROD_ID = #INT_PAY_PROD_ID:VARCHAR#,
        INT_PAY_PROD_TYPE = #INT_PAY_PROD_TYPE:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateDepSubNoAccInfoTONoProdIdSameNo" result-class="java.util.HashMap" >
        UPDATE DEPOSIT_SUB_ACINFO_SAMENO SET <!--SL_NO = #SL_NO#,-->
        INT_PAY_ACC_NO = #INT_PAY_ACC_NO:VARCHAR#,
        <!--        INT_PAY_PROD_ID = #INT_PAY_PROD_ID#,-->
        INT_PAY_PROD_TYPE = #INT_PAY_PROD_TYPE:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <!--    <mapped-statement name="updateDepSubNoAccInfoTOCashSameNo" result-class="java.util.HashMap" >
        UPDATE DEPOSIT_SUB_ACINFO_SAMENO SET SL_NO = #SL_NO#
        WHERE DEPOSIT_NO = #DEPOSIT_NO#
    </mapped-statement> -->
    
    <mapped-statement name="getRenewalSameNoDetails" result-class="java.util.HashMap" >
        SELECT TOTAL_BALANCE,INTEREST_AMT,SB_INT_AMT,MATURITY_DT,MATURITY_AMT FROM DEPOSIT_SUB_ACINFO_SAMENO
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>
    <mapped-statement name="getRenewalDepositNoDetails" result-class="java.util.HashMap" >
        SELECT TOTAL_BALANCE,INTEREST_AMT,SB_INT_AMT,MATURITY_DT,MATURITY_AMT FROM DEPOSIT_SUB_ACINFO 
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>
    <mapped-statement name="updateDepSubNoAccInfoTONoGL" result-class="java.util.HashMap" >
        UPDATE DEPOSIT_SUB_ACINFO SET 
        INT_PAY_ACC_NO = #INT_PAY_ACC_NO:VARCHAR#,
        INT_PAY_PROD_TYPE = #INT_PAY_PROD_TYPE:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateDepSubNoAccInfoTONo" result-class="java.util.HashMap" >
        UPDATE DEPOSIT_SUB_ACINFO SET 
        INT_PAY_ACC_NO = #INT_PAY_ACC_NO:VARCHAR#,
        INT_PAY_PROD_ID = #INT_PAY_PROD_ID:VARCHAR#,
        INT_PAY_PROD_TYPE = #INT_PAY_PROD_TYPE:VARCHAR#
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="updateDepSubNoAccInfoTONoInterestNull" result-class="java.util.HashMap" >
        UPDATE DEPOSIT_SUB_ACINFO SET 
        SB_INT_AMT = NULL, INTEREST_AMT = NULL,
        PENAL_RATE = NULL 
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getSelectDepSubNoIntDetails" result-class="java.util.HashMap" >
        SELECT INTEREST_AMT,SB_INT_AMT,PENAL_RATE,INT_PAY_PROD_TYPE,INT_PAY_PROD_ID,INT_PAY_ACC_NO,CURR_RATE_OF_INT,
        SB_PERIOD_RUN,NEXT_INT_APPL_DT,LST_PROV_DT,LAST_INT_APPL_DT,DEPOSIT_NO,ACCT_STATUS FROM DEPOSIT_SUB_ACINFO
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS IS NULL)
    </mapped-statement>
    
    <dynamic-mapped-statement name="getSelectDepSubNoIntDetailsSameNo" result-class="java.util.HashMap" >
        SELECT NVL(INTEREST_AMT,0) AS "INTEREST_AMT",NVL(SB_INT_AMT,0) AS "SB_INT_AMT",NVL(PENAL_RATE,0)AS "PENAL_RATE",
        INT_PAY_PROD_TYPE,INT_PAY_PROD_ID,INT_PAY_ACC_NO,NVL(CURR_RATE_OF_INT,0) AS "CURR_RATE_OF_INT",CLOSE_DT,
        MATURITY_DT,DEPOSIT_DT,NVL(SB_PERIOD_RUN,0) AS "SB_PERIOD_RUN",NEXT_INT_APPL_DT,LST_PROV_DT,LAST_INT_APPL_DT 
        FROM DEPOSIT_SUB_ACINFO_SAMENO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend = "AND"  property="CLOSE_DT">
                    CLOSE_DT = #CLOSE_DT:DATE#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement>
    
    <mapped-statement name = "getProductIdForDeposits" result-class="java.util.HashMap">
        SELECT PROD_ID,DEPOSIT_AMT,TOTAL_INSTALLMENTS,TOTAL_INSTALL_PAID,TOTAL_BALANCE,DELAYED_AMOUNT,DELAYED_MONTH
        FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_ACINFO DA WHERE DA.DEPOSIT_NO = DSA.DEPOSIT_NO
        AND DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND BRANCH_ID = #BRANCH_ID:VARCHAR#
    </mapped-statement>   
     
    <mapped-statement name="getDepositRecurringList" result-class="java.util.HashMap" >
        SELECT INSTRUMENT_NO2 FROM TRANSFER_TRANS WHERE 
        <!--        (LINK_BATCH_ID = #DEPOSIT_NO# OR ACT_NUM = #DEPOSIT_NO#)AND -->
        BATCH_ID = #BATCH_ID:VARCHAR# AND
        TRANS_TYPE = 'CREDIT' AND
        TRANS_DT = #TRANS_DT:DATE# AND
        INITIATED_BRANCH = #INITIATED_BRANCH:VARCHAR#  
    </mapped-statement>
    
    <mapped-statement name = "getCustomerStatusForDep" result-class="java.util.HashMap">
        SELECT AUTHORIZE_STATUS,CUST_ID FROM CUSTOMER WHERE CUST_ID = #CUST_ID:VARCHAR# AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>
    
    <mapped-statement name = "getRemarksForDep" result-class="java.util.HashMap">
        SELECT REMARKS FROM DEPOSIT_ACINFO WHERE DEPOSIT_NO =#DEPOSIT NO:VARCHAR# AND REMARKS IS NOT NULL        
    </mapped-statement>

    <mapped-statement name = "updateLastIntApplDtNull" result-class="java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET TOTAL_INT_CREDIT = #TOTAL_INT_CREDIT:NUMBER#,TOTAL_INT_DEBIT = #TOTAL_INT_DEBIT:NUMBER#,
        TOTAL_INT_DRAWN = #TOTAL_INT_DRAWN:NUMBER#,LAST_INT_APPL_DT = null,NEXT_INT_APPL_DT = null 
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getSelectMaxSLNo" result-class="java.util.HashMap">    
        SELECT NVL(MAX(SL_NO),0) AS MAX_NO FROM DEPOSIT_SUB_ACINFO_SAMENO WHERE 
        DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
    
    <mapped-statement name = "updateMaxSLNo" result-class="java.util.HashMap">    
        UPDATE DEPOSIT_SUB_ACINFO_SAMENO SET SL_NO = #COUNT:NUMBER# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# 
        AND STATUS != 'DELETED' AND SL_NO IS NULL
    </mapped-statement>
    
    <mapped-statement name = "updateTotalInterstAmt" result-class="java.util.HashMap">    
        UPDATE DEPOSIT_SUB_ACINFO SET TOT_INT_AMT = #TOT_INT_AMT:NUMBER#,TOTAL_INT_CREDIT = 0.0,
        TOTAL_INT_DRAWN = 0.0,TOTAL_INT_DEBIT = 0.0 WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# 
        AND STATUS!='DELETED' AND ACCT_STATUS!='CLOSED'
    </mapped-statement>
    
    <mapped-statement name = "update.FlexiDepositBalanceLien" inline-parameters = "true">
        UPDATE DEPOSIT_SUB_ACINFO SET AVAILABLE_BALANCE = AVAILABLE_BALANCE + #BALANCE:NUMBER# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#       
    </mapped-statement>    
    
    <mapped-statement name = "getSelectOriginalAcNo" result-class = "java.util.HashMap">
        SELECT ORIGINAL_AC_NUMBER FROM DEPOSIT_TRANSIN WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "updateTransferOutFlagDeposits" inline-parameters = "true">
        DELETE FROM DEPOSIT_TRANSIN WHERE ORIGINAL_AC_NUMBER = #ORIGINAL_AC_NUMBER:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getSelectOriginalAcNoTransOut" result-class = "java.util.HashMap">
        SELECT TRANS_AMT FROM DEPOSIT_TRANSFER_OUT WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="insertRenewalDetails" inline-parameters="true">
        INSERT INTO RENEWAL_TEMP_DETAILS (
        DEPOSIT_NO,RENEWAL_DEPOSIT_DT,RENEWAL_MATURITY_DT,RENEWAL_DEPOSIT_AMT,RENEWAL_MATURITY_AMT,RENEWAL_DEPOSIT_DAYS,
        RENEWAL_DEPOSIT_MONTHS,RENEWAL_DEPOSIT_YEARS,RENEWAL_RATE_OF_INT,RENEWAL_PERIODIC_INT,RENEWAL_TOT_INTAMT,
        RENEWAL_DEP_TRANS_MODE,RENEWAL_DEP_TOKEN_NO,RENEWAL_DEP_TRANS_PRODTYPE,RENEWAL_DEP_TRANS_PRODID,RENEWAL_DEP_TRANS_ACCNO,
        WITDRAWING_DEP_AMT,RENEWAL_DEP_WITHDRAWING,RENEWAL_DEP_ADDING,ADDING_DEP_AMT,RENEWAL_INT_TRANS_MODE,RENEWAL_INT_TOKEN_NO,
        RENEWAL_INT_TRANS_PRODTYPE,RENEWAL_INT_TRANS_PRODID,RENEWAL_INT_TRANS_ACCNO,RENEWAL_INT_WITHDRAWING,WITHDRAWING_INT_AMT,
        BALANCE_INT_AMT,SB_INT_AMT,SB_PERIOD_RUN,RENEWAL_PRODID,RENEWAL_CATEGORY,RENEWAL_PAY_MODE,RENEWAL_PAY_FREQ,BRANCH_CODE,
        STATUS,OLD_DEPOSIT_NO,RENEWAL_PAY_PRODTYPE,RENEWAL_PAY_PRODID,RENEWAL_PAY_ACCNO,RENEWAL_CALENDER_FREQ,RENEWAL_CALENDER_DAY,
        RENEWAL_PRINTING_NO,SL_NO,RENEW_POSTAGE_AMT,PREVIOUS_INT) 
        VALUES (
        #DEPOSIT_NO:VARCHAR#,#RENEWAL_DEPOSIT_DT:DATE#,#RENEWAL_MATURITY_DT:DATE#,cast(#RENEWAL_DEPOSIT_AMT# as numeric),cast(#RENEWAL_MATURITY_AMT# as numeric),
        cast(#RENEWAL_DEPOSIT_DAYS# as numeric),cast(#RENEWAL_DEPOSIT_MONTHS# as numeric),cast(#RENEWAL_DEPOSIT_YEARS# as numeric),cast(#RENEWAL_RATE_OF_INT# as numeric),
        cast(#RENEWAL_PERIODIC_INT# as numeric),cast(#RENEWAL_TOT_INTAMT# as numeric),#RENEWAL_DEP_TRANS_MODE:VARCHAR#,#RENEWAL_DEP_TOKEN_NO:VARCHAR#,
        #RENEWAL_DEP_TRANS_PRODTYPE:VARCHAR#,#RENEWAL_DEP_TRANS_PRODID:VARCHAR#,#RENEWAL_DEP_TRANS_ACCNO:VARCHAR#,
        cast(#WITDRAWING_DEP_AMT# as numeric),#RENEWAL_DEP_WITHDRAWING:VARCHAR#,#RENEWAL_DEP_ADDING:VARCHAR#,cast(#ADDING_DEP_AMT# as numeric),
        #RENEWAL_INT_TRANS_MODE:VARCHAR#,#RENEWAL_INT_TOKEN_NO:VARCHAR#,#RENEWAL_INT_TRANS_PRODTYPE:VARCHAR#,
        #RENEWAL_INT_TRANS_PRODID:VARCHAR#,#RENEWAL_INT_TRANS_ACCNO:VARCHAR#,#RENEWAL_INT_WITHDRAWING:VARCHAR#,
        cast(#WITHDRAWING_INT_AMT# as numeric),cast(#BALANCE_INT_AMT# as numeric),cast(#SB_INT_AMT# as numeric),#SB_PERIOD_RUN:VARCHAR#,#RENEWAL_PRODID:VARCHAR#,
        #RENEWAL_CATEGORY:VARCHAR#,#RENEWAL_PAY_MODE:VARCHAR#,#RENEWAL_PAY_FREQ:VARCHAR#,#BRANCH_CODE:VARCHAR#,#STATUS:VARCHAR#,
        #OLD_DEPOSIT_NO:VARCHAR#,#RENEWAL_PAY_PRODTYPE:VARCHAR#,#RENEWAL_PAY_PRODID:VARCHAR#,#RENEWAL_PAY_ACCNO:VARCHAR#,
        #RENEWAL_CALENDER_FREQ:VARCHAR#,cast(#RENEWAL_CALENDER_DAY# as numeric),#RENEWAL_PRINTING_NO:VARCHAR#,cast(#SL_NO# as numeric),cast(#RENEW_POSTAGE_AMT# as numeric),cast(#PREVIOUS_INT# as numeric))
    </mapped-statement>
    
    <mapped-statement name="updateRenewalDetails" inline-parameters="true">
        UPDATE RENEWAL_TEMP_DETAILS SET RENEWAL_DEPOSIT_DT = #RENEWAL_DEPOSIT_DT:DATE#,RENEWAL_MATURITY_DT = #RENEWAL_MATURITY_DT:DATE#,
        RENEWAL_MATURITY_AMT = #RENEWAL_MATURITY_AMT:NUMERIC#,RENEWAL_DEPOSIT_DAYS = #RENEWAL_DEPOSIT_DAYS:NUMERIC#,
        RENEWAL_DEPOSIT_MONTHS = #RENEWAL_DEPOSIT_MONTHS:NUMERIC#,RENEWAL_DEPOSIT_YEARS = #RENEWAL_DEPOSIT_YEARS:NUMERIC#,
        RENEWAL_RATE_OF_INT = #RENEWAL_RATE_OF_INT:NUMERIC#,RENEWAL_PERIODIC_INT = #RENEWAL_PERIODIC_INT:NUMERIC#,
        RENEWAL_TOT_INTAMT = #RENEWAL_TOT_INTAMT:NUMERIC#,RENEWAL_PAY_PRODTYPE = #RENEWAL_PAY_PRODTYPE:VARCHAR#,
        RENEWAL_PAY_PRODID = #RENEWAL_PAY_PRODID:VARCHAR#,RENEWAL_PAY_ACCNO = #RENEWAL_PAY_ACCNO:VARCHAR#,
        RENEWAL_CALENDER_FREQ = #RENEWAL_CALENDER_FREQ:VARCHAR#,RENEWAL_CALENDER_DAY = #RENEWAL_CALENDER_DAY:NUMBER#,
        RENEWAL_PRINTING_NO = #RENEWAL_PRINTING_NO:VARCHAR#,RENEWAL_PAY_MODE = #RENEWAL_PAY_MODE:VARCHAR#,
        RENEWAL_PAY_FREQ = #RENEWAL_PAY_FREQ:VARCHAR#,RENEWAL_CATEGORY = #RENEWAL_CATEGORY:VARCHAR# ,RENEW_POSTAGE_AMT=#RENEW_POSTAGE_AMT# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        AND STATUS = 'CREATED'
    </mapped-statement>
    
    <mapped-statement name="updateRenewalSubAcinfo" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET DEPOSIT_DT = #DEPOSIT_DT:DATE#,MATURITY_DT = #MATURITY_DT:DATE#,
        MATURITY_AMT = #MATURITY_AMT:NUMERIC#,DEPOSIT_PERIOD_DD = #DEPOSIT_DAYS:NUMERIC#,
        DEPOSIT_PERIOD_MM = #DEPOSIT_MONTHS:NUMERIC#,DEPOSIT_PERIOD_YY = #DEPOSIT_YEARS:NUMERIC#,
        RATE_OF_INT = #RATE_OF_INT:NUMERIC#,PERIODIC_INT_AMT = #PERIODIC_INT:NUMERIC#,
        TOT_INT_AMT = #TOT_INTAMT:NUMERIC#,INT_PAY_PROD_TYPE = #PAY_PRODTYPE:VARCHAR#,
        INT_PAY_PROD_ID = #PAY_PRODID:VARCHAR#,INT_PAY_ACC_NO = #PAY_ACCNO:VARCHAR#,
        CALENDER_FREQ = #CALENDER_FREQ:VARCHAR#,CALENDER_DAY = #CALENDER_DAY:NUMBER#, SALARY_RECOVERY = #salaryRecovery:VARCHAR#, LOCK_STATUS= #lockStatus:VARCHAR#,
        INTPAY_MODE = #INTPAY_MODE:VARCHAR#,INTPAY_FREQ = #INTPAY_FREQ:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getSelectRenewalDetails" result-class = "java.util.HashMap">
        SELECT * FROM RENEWAL_TEMP_DETAILS WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND STATUS = 'CREATED' AND SL_NO IN 
        (SELECT MAX(SL_NO) FROM RENEWAL_TEMP_DETAILS WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND status = 'CREATED')
    </mapped-statement>
    
    <mapped-statement name = "EmpRerfNewNo" result-class = "java.util.HashMap">
        SELECT EMP_REFNO_NEW  FROM SHARE_ACCT WHERE CUST_ID = #CUSTOMER ID:VARCHAR#  AND STATUS!='DELETED' AND AUTHORIZE='AUTHORIZED'
       
    </mapped-statement>
    
    <mapped-statement name = "getSelectOldDepositRenewalDetails" result-class = "java.util.HashMap">
        SELECT * FROM RENEWAL_TEMP_DETAILS WHERE OLD_DEPOSIT_NO = #OLD_DEPOSIT_NO:VARCHAR# AND STATUS = 'CREATED' AND SL_NO IN 
        (SELECT MAX(SL_NO) FROM RENEWAL_TEMP_DETAILS WHERE OLD_DEPOSIT_NO = #OLD_DEPOSIT_NO:VARCHAR# AND status = 'CREATED') 
    </mapped-statement>
    
    <mapped-statement name = "updateTempStatus" result-class = "java.util.HashMap">
        UPDATE RENEWAL_TEMP_DETAILS SET STATUS = 'COMPLETED' WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND SL_NO IN 
        (SELECT MAX(SL_NO) FROM RENEWAL_TEMP_DETAILS WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND OLD_DEPOSIT_NO = #OLD_DEPOSIT_NO:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name = "updateSettlementMode" result-class = "java.util.HashMap">
        UPDATE DEPOSIT_ACINFO SET SETTLEMENT_MODE = #SETTLEMENT_MODE:VARCHAR#,
        CONSTITUTION = #CONSTITUTION:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getSelectPeriodofRenewal" result-class = "java.util.HashMap">
        SELECT SB_PERIOD_RUN,DEPOSIT_NO,BALANCE_INT_AMT,SB_INT_AMT FROM RENEWAL_TEMP_DETAILS 
        WHERE OLD_DEPOSIT_NO = #OLD_DEPOSIT_NO:VARCHAR# AND STATUS != 'COMPLETED' AND SL_NO IN 
        (SELECT MAX(SL_NO) FROM RENEWAL_TEMP_DETAILS WHERE OLD_DEPOSIT_NO = #OLD_DEPOSIT_NO:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name = "getSelectClosedPeriodofRenewal" result-class = "java.util.HashMap">
        SELECT SB_PERIOD_RUN,DEPOSIT_NO,BALANCE_INT_AMT,SB_INT_AMT FROM RENEWAL_TEMP_DETAILS 
        WHERE OLD_DEPOSIT_NO = #OLD_DEPOSIT_NO:VARCHAR# AND STATUS = 'COMPLETED' AND SL_NO IN 
        (SELECT MAX(SL_NO) FROM RENEWAL_TEMP_DETAILS WHERE OLD_DEPOSIT_NO = #OLD_DEPOSIT_NO:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name = "updateFlexiStatus" result-class = "java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET FLEXI_STATUS = 'NR' WHERE DEPOSIT_NO = #value:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "updateExtensionFlexiStatus" result-class = "java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO SET FLEXI_STATUS = 'EX' WHERE DEPOSIT_NO = #value:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getSelectMaxTempSLNo" result-class="java.util.HashMap">    
        SELECT NVL(MAX(SL_NO),0) AS MAX_NO FROM RENEWAL_TEMP_DETAILS WHERE 
        OLD_DEPOSIT_NO = #OLD_DEPOSIT_NO:VARCHAR# AND STATUS != 'DELETED'
    </mapped-statement>
    
    <mapped-statement name="insertExtensionlDetails" inline-parameters="true">
        INSERT INTO EXTENSION_TEMP_DETAILS (
        EXTENSION_DEPOSIT_NO,EXTENSION_DEPOSIT_DT,EXTENSION_MATURITY_DT,EXTENSION_DEPOSIT_AMT,EXTENSION_MATURITY_AMT,EXTENSION_DEPOSIT_DAYS,
        EXTENSION_DEPOSIT_MONTHS,EXTENSION_DEPOSIT_YEARS,EXTENSION_RATE_OF_INT,EXTENSION_PERIODIC_INT,EXTENSION_TOT_INTAMT,EXTENSION_DEP_WITHDRAWING,
        EXTENSION_PENALTY,EXTENSION_INT_WITHDRAWING,EXTENSION_WITDRAWING_DEPAMT,EXTENSION_WITDRAWING_INTAMT,WITHDRAW_AMT_CALC,BALANCE_AMT_CALC,
        BALANCE_INTEREST_AMT,EXTENSION_TRANS_MODE,EXTENSION_TOKEN_NO,EXTENSION_TRANS_PRODTYPE,EXTENSION_TRANS_PRODID,EXTENSION_TRANS_ACCNO,
        BRANCH_CODE,EXTENSION_STATUS,OLD_DEPOSIT_NO,EXTENSION_PAY_MODE,EXTENSION_PAY_PRODTYPE,EXTENSION_PAY_PRODID,EXTENSION_PAY_ACCNO,
        EXTENSION_CALENDER_FREQ,EXTENSION_CALENDER_DAY,EXTENSION_PRINTING_NO,EXTENSION_CATEGORY,EXTENSION_PAY_FREQ,EXTENSION_PROD_ID,
        OLD_FREQUENCY,OLD_PERIOD_RUN,OLD_RATE_OF_INT,SL_NO)
        VALUES(
        #EXTENSION_DEPOSIT_NO:VARCHAR#, #EXTENSION_DEPOSIT_DT:DATE#, #EXTENSION_MATURITY_DT:DATE#,
        #EXTENSION_DEPOSIT_AMT:NUMERIC#, #EXTENSION_MATURITY_AMT:NUMERIC#, #EXTENSION_DEPOSIT_DAYS:NUMERIC#,
        #EXTENSION_DEPOSIT_MONTHS:NUMERIC#, #EXTENSION_DEPOSIT_YEARS:NUMERIC#, #EXTENSION_RATE_OF_INT:NUMERIC#,
        #EXTENSION_PERIODIC_INT:NUMERIC#, #EXTENSION_TOT_INTAMT:NUMERIC#, #EXTENSION_DEP_WITHDRAWING:VARCHAR#,
        #EXTENSION_PENALTY:VARCHAR#, #EXTENSION_INT_WITHDRAWING:VARCHAR#, #EXTENSION_WITDRAWING_DEPAMT:NUMERIC#,
        #EXTENSION_WITDRAWING_INTAMT:NUMERIC#, #WITHDRAW_AMT_CALC:NUMERIC#, #BALANCE_AMT_CALC:NUMERIC#,
        #BALANCE_INTEREST_AMT:NUMERIC#, #EXTENSION_TRANS_MODE:VARCHAR#, #EXTENSION_TOKEN_NO:VARCHAR#,
        #EXTENSION_TRANS_PRODTYPE:VARCHAR#, #EXTENSION_TRANS_PRODID:VARCHAR#, #EXTENSION_TRANS_ACCNO:VARCHAR#,
        #BRANCH_CODE:VARCHAR#, #EXTENSION_STATUS:VARCHAR#, #OLD_DEPOSIT_NO:VARCHAR#, #EXTENSION_PAY_MODE:VARCHAR#,
        #EXTENSION_PAY_PRODTYPE:VARCHAR#, #EXTENSION_PAY_PRODID:VARCHAR#, #EXTENSION_PAY_ACCNO:VARCHAR#,
        #EXTENSION_CALENDER_FREQ:VARCHAR#, #EXTENSION_CALENDER_DAY:NUMERIC#, #EXTENSION_PRINTING_NO:VARCHAR#,
        #EXTENSION_CATEGORY:VARCHAR#, #EXTENSION_PAY_FREQ:VARCHAR#, #EXTENSION_PRODID:VARCHAR#,#OLD_FREQUENCY:VARCHAR#,
        #OLD_PERIOD_RUN:VARCHAR#,#OLD_RATE_OF_INT:VARCHAR#, #SL_NO:NUMERIC#)
    </mapped-statement>

    <mapped-statement name = "getSelectExtensionDetails" result-class = "java.util.HashMap">
        SELECT * FROM EXTENSION_TEMP_DETAILS WHERE OLD_DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND EXTENSION_STATUS = 'CREATED' 
    </mapped-statement>
    
    <mapped-statement name = "getSelectOldDepositExtensionDetails" result-class = "java.util.HashMap">
        SELECT * FROM EXTENSION_TEMP_DETAILS WHERE EXTENSION_DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND EXTENSION_STATUS = 'CREATED' 
    </mapped-statement>
    
    <mapped-statement name = "updateTempStatusExtension" result-class = "java.util.HashMap">
        UPDATE EXTENSION_TEMP_DETAILS SET EXTENSION_STATUS = 'COMPLETED' WHERE EXTENSION_DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "updateSettlementModeExtension" result-class = "java.util.HashMap">
        UPDATE DEPOSIT_ACINFO SET SETTLEMENT_MODE = #SETTLEMENT_MODE:VARCHAR#,
        CONSTITUTION = #CONSTITUTION:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getSelectPeriodofExtension" result-class = "java.util.HashMap">
        SELECT SB_PERIOD_RUN,DEPOSIT_NO,BALANCE_INT_AMT,SB_INT_AMT FROM 
        EXTENSION_TEMP_DETAILS WHERE OLD_DEPOSIT_NO = #OLD_DEPOSIT_NO:VARCHAR# AND EXTENSION_STATUS = 'COMPLETED'
    </mapped-statement>
    
    <mapped-statement name = "getSelectMaxTempExtensionSLNo" result-class="java.util.HashMap">    
        SELECT NVL(MAX(SL_NO),0) AS MAX_NO FROM EXTENSION_TEMP_DETAILS WHERE 
        OLD_DEPOSIT_NO = #OLD_DEPOSIT_NO:VARCHAR# AND EXTENSION_STATUS != 'DELETED'
    </mapped-statement>
    
    <mapped-statement name = "updateExtensionStatusSubAcinfo" result-class="java.util.HashMap">    
        UPDATE DEPOSIT_SUB_ACINFO SET CLOSE_DT = #CLOSE_DT:DATE#, CLOSE_BY = #CLOSE_BY:VARCHAR#, 
        AUTHORIZE_STATUS = NULL, ACCT_STATUS = #ACCT_STATUS:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>

    <mapped-statement name = "updateExtensionStatusAcinfo" result-class="java.util.HashMap">    
        UPDATE DEPOSIT_ACINFO SET AUTHORIZE_STATUS = NULL, DEPOSIT_STATUS = #ACCT_STATUS:VARCHAR#,
        RENEWAL_FROM_DEPOSIT = NULL,RENEWAL_COUNT = NULL WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "updateExtensionDeleteSamenoRec" result-class="java.util.HashMap">    
        DELETE FROM DEPOSIT_SUB_ACINFO_SAMENO WHERE DEPOSIT_NO = #DEPOSIT NO:VARCHAR# AND AUTHORIZE_STATUS IS NULL 
    </mapped-statement>
    
    <mapped-statement name = "getSelectRemainingBalance" result-class="java.util.HashMap">    
        SELECT DEPOSIT_AMT,TOTAL_BALANCE FROM DEPOSIT_SUB_ACINFO DSA,DEPOSITS_PRODUCT DP,DEPOSIT_ACINFO DA WHERE          
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.PROD_ID = DP.PROD_ID AND DSA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND 
        DSA.STATUS != 'DELETED' AND DSA.AUTHORIZE_STATUS = 'AUTHORIZED'      
        AND DP.BEHAVES_LIKE !='RECURRING' AND DP.BEHAVES_LIKE !='DAILY'  AND  DP.BEHAVES_LIKE !='THRIFT' AND DP.BEHAVES_LIKE !='BENEVOLENT'     
        <!--SELECT DEPOSIT_AMT,TOTAL_BALANCE FROM DEPOSIT_SUB_ACINFO DSA,DEPOSITS_PRODUCT DP,DEPOSIT_ACINFO DA WHERE          
        DA.DEPOSIT_NO = DSA.DEPOSIT_NO AND DA.PROD_ID = DP.PROD_ID AND DSA.DEPOSIT_NO = #DEPOSIT_NO# AND 
        DSA.STATUS != 'DELETED' AND DSA.AUTHORIZE_STATUS = 'AUTHORIZED'   -->
    </mapped-statement>
    
    <mapped-statement name = "getSelectRenewalModeStatus" result-class="java.util.HashMap">    
        SELECT AUTO_RENEWAL,RENEW_WITH_INT,MAT_ALERT_REPORT,CUST_TYPE,TAX_DEDUCTIONS,
        FIFTEENH_DECLARE,MEMBER FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA WHERE DA.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND DSA.DEPOSIT_NO=DA.DEPOSIT_NO
        AND DA.STATUS != 'DELETED'
    </mapped-statement>
    
    <mapped-statement name = "updateRenewalStatusBefAuth" result-class="java.util.HashMap">    
        UPDATE DEPOSIT_ACINFO SET AUTO_RENEWAL = #AUTO_RENEWAL:VARCHAR#, RENEW_WITH_INT = #RENEW_WITH_INT:VARCHAR#, 
        MAT_ALERT_REPORT = #MAT_ALERT_REPORT:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "getselectTransFromDeposit" result-class = "java.util.HashMap">
        SELECT TT.ACT_NUM FROM TRANSFER_TRANS TT,OP_AC_PRODUCT OP,ACT_MASTER AM WHERE LINK_BATCH_ID = #LINK_BATCH_ID:VARCHAR# AND 
        TRANS_TYPE = 'CREDIT' AND AM.ACT_NUM = TT.ACT_NUM AND TT.AC_HD_ID = OP.AC_HD_ID AND TT.AUTHORIZE_STATUS IS NULL
    </mapped-statement>
    
    <mapped-statement name = "updateNullAsTransFromDeposit" result-class = "java.util.HashMap">
        UPDATE PASS_BOOK SET INSTRUMENT_NO1 = NULL,INSTRUMENT_NO2 = NULL WHERE ACT_NUM = #ACT_NUM:VARCHAR# AND 
        AUTHORIZE_STATUS_2 = 'ENTERED_AMOUNT' AND TRANS_DT = #TRANS_DT:DATE#
    </mapped-statement>
    
    <mapped-statement name = "getSelectStopPaymentDetails" result-class = "java.util.LinkedHashMap">
        SELECT START_CHQ_NO1 AS "CHEQUE_NO1",START_CHQ_NO2 AS "CHEQUE_NO2",
        NVL(END_CHQ_NO2,START_CHQ_NO2) AS "CHEQUE_NO3",
        CHQ_AMT,CHQ_DT,CHQ_STOP_DT FROM CHEQUE_STOP_PAYMENT WHERE ACCT_NO = #ACT_NUM:VARCHAR#
        ORDER BY START_CHQ_NO2
    </mapped-statement>
    
    <mapped-statement name="updateRemitIssueForRenewalTempdetails" result-class="java.util.HashMap">
        UPDATE RENEWAL_TEMP_DETAILS SET RENEWAL_DEP_TRANS_ACCNO = #RENEWAL_DEP_TRANS_ACCNO:VARCHAR#, RENEWAL_DEP_TOKEN_NO = #RENEWAL_DEP_TOKEN_NO:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>        

    <mapped-statement name="updateRemitIssueForRenewal" result-class="java.util.HashMap">
        UPDATE REMIT_ISSUE SET FAVOURING = #RENEWAL_DEP_TRANS_ACCNO:VARCHAR#, INSTRUMENT_NO2 = #RENEWAL_DEP_TOKEN_NO:VARCHAR# WHERE REMARKS = #DEPOSIT_NO:VARCHAR#
        AND AUTHORIZE_STATUS IS NULL
    </mapped-statement>        
    
    <mapped-statement name="updateRemitIssueForRenewalTempdetailsInt" result-class="java.util.HashMap">
        UPDATE RENEWAL_TEMP_DETAILS SET RENEWAL_INT_TRANS_ACCNO = #RENEWAL_INT_TRANS_ACCNO:VARCHAR#, RENEWAL_INT_TOKEN_NO = #RENEWAL_INT_TOKEN_NO:VARCHAR# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>        

    <mapped-statement name = "getSelectPanNoandPrintingNo" result-class="java.util.HashMap">
        SELECT PAN_NUMBER,PRINTING_NO,CUST_ID FROM DEPOSIT_ACINFO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name = "updateSBInterestSameNoTable" result-class = "java.util.HashMap">
        UPDATE DEPOSIT_SUB_ACINFO_SAMENO SET SB_INT_AMT = #SB_INT_AMT:NUMBER#,SB_PERIOD_RUN = #SB_PERIOD_RUN:NUMBER#,
        INTEREST_AMT = #INTEREST_AMT:NUMBER# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# 
        AND SL_NO IN (SELECT MAX(SL_NO) FROM DEPOSIT_SUB_ACINFO_SAMENO WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#)
    </mapped-statement>
    
    <mapped-statement name="getAccNoExitsHashMap" result-class="java.util.HashMap" >
        SELECT COUNT(*) AS COUNT FROM DEPOSIT_ACINFO dpAc INNER JOIN DEPOSITS_PRODUCT dpPr 
        ON dpAc.PROD_ID= dpPr.PROD_ID WHERE dpPr.BEHAVES_LIKE='DAILY' AND dpAc.DEPOSIT_NO =#USERID:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getDialogHashMap" result-class="java.util.HashMap" > 
        <!--SELECT DA.CUST_ID,DA.DEPOSIT_NO,CM.FNAME,DSA.DEPOSIT_DT,DSA.DEPOSIT_AMT,
        DSA.MATURITY_DT FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER CM
        WHERE DA.CUST_ID =CM.CUST_ID AND DA.DEPOSIT_NO =DSA.DEPOSIT_NO AND 
        DA.STATUS_DT =#CURR_DT# AND DSA.CLEAR_BALANCE >0 AND DA.PRINTING_NO IS NULL 
        AND DA.BRANCH_ID=#BRANCH_CODE# ORDER BY DA.DEPOSIT_NO-->
        SELECT DA.CUST_ID,DA.DEPOSIT_NO,GET_JOINT_CUST(DA.DEPOSIT_NO) as FNAME,DSA.DEPOSIT_DT,DSA.DEPOSIT_AMT,
        DSA.MATURITY_DT FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER CM, DEPOSITS_PRODUCT DP
        WHERE DA.CUST_ID =CM.CUST_ID AND DA.DEPOSIT_NO =DSA.DEPOSIT_NO AND 
        DA.STATUS_DT =#CURR_DT:DATE# AND DSA.CLEAR_BALANCE&gt;0 AND DA.PRINTING_NO IS NULL 
        AND DA.BRANCH_ID=#BRANCH_CODE:VARCHAR# AND DA.PROD_ID=DP.PROD_ID AND DP.BEHAVES_LIKE NOT IN('RECURRING','DAILY') 
        ORDER BY DA.DEPOSIT_NO
    </mapped-statement>  
    
    <dynamic-mapped-statement name="getDepositReprintData" result-class = "java.util.LinkedHashMap">  
        SELECT DA.DEPOSIT_NO,DP.BEHAVES_LIKE,GET_JOINT_CUST(DA.DEPOSIT_NO) as FNAME,DSA.DEPOSIT_AMT,DSA.DEPOSIT_DT,
        DSA.MATURITY_DT FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,DEPOSITS_PRODUCT DP
        WHERE DA.DEPOSIT_NO =DSA.DEPOSIT_NO AND 
        DA.DEPOSIT_NO BETWEEN #FROM_NO:VARCHAR# AND #TO_NO:VARCHAR# AND DSA.CLEAR_BALANCE&gt;0  
        AND DA.BRANCH_ID=#BRANCH_CODE:VARCHAR# AND DA.PROD_ID=DP.PROD_ID AND DP.BEHAVES_LIKE NOT IN
        <dynamic>
             <isParameterPresent>
                <isNotEmpty prepend= "" property = "INCLUDE_RD" >
                    ('DAILY') 
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "" property = "EXCLUDE_RD" >
                   ('RECURRING','DAILY') 
                </isNotEmpty>
            </isParameterPresent>            
        </dynamic>             
        ORDER BY DA.DEPOSIT_NO
    </dynamic-mapped-statement>  
    
   <dynamic-mapped-statement name="getDepositProductsReprint" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC FROM DEPOSITS_PRODUCT
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED' 
         <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "PROD_ID" >
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "PROD_DESC" >
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotEmpty>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
    
    <mapped-statement name="getPrintingNoHashMap" result-class="java.util.HashMap" > 
        SELECT COUNT(*) AS COUNT  FROM DEPOSIT_ACINFO WHERE PRINTING_NO=#PRINT_NO:VARCHAR#
    </mapped-statement> 
    
    <mapped-statement name="updatePrintingHashMap" result-class="java.util.HashMap" > 
        UPDATE DEPOSIT_ACINFO SET PRINTING_NO=#PRINT_NO:VARCHAR# 
        WHERE DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# 
    </mapped-statement> 
    
    <mapped-statement name="updateDepositReprint" result-class="java.util.HashMap" > 
        UPDATE DEPOSIT_ACINFO SET PRINTING_NO=NVL(PRINTING_NO,0)+1
        WHERE DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# 
    </mapped-statement>

    <mapped-statement name="getDepositCustomerName" result-class="java.util.HashMap" >
        SELECT DA.CUST_ID, FNAME, DEPOSIT_NO FROM DEPOSIT_ACINFO DA, CUSTOMER C 
        WHERE DA.CUST_ID = #CUST_ID:VARCHAR# AND DA.CUST_ID=C.CUST_ID AND BRANCH_ID=#BRANCH_CODE:VARCHAR#
    </mapped-statement>
            
    <mapped-statement name="Cash.getAccProductMDS" result-map="MDS_get-ProdId-result" >
        SELECT SCHEME_NAME AS PROD_ID, SCHEME_DESC AS PROD_DESC FROM MDS_SCHEME_DETAILS WHERE STATUS != 'DELETED' 
        AND AUTHORIZED_STATUS='AUTHORIZED' ORDER BY SCHEME_NAME
    </mapped-statement>   
        
    <result-map name="MDS_get-ProdId-result" class="com.see.truetransact.transferobject.common.lookup.LookUpTO">
        <property name="lookUpRefID" column="PROD_ID" />
        <property name="lookUpDesc" column="PROD_DESC" />
    </result-map> 
        
    <dynamic-mapped-statement name="Cash.getAccountListMDS" result-class="java.util.LinkedHashMap">            
        SELECT MA.CHITTAL_NO ||'_'||MA.SUB_NO AS ACCOUNTNO, MA.MEMBER_NO, MA.MEMBER_NAME AS CUSTOMERNAME, MA.INST_AMT, SUM(MTD.INST_AMT) AS PAID_AMOUNT, 
        MA.CHIT_START_DT AS START_DT,MA.CHIT_END_DT AS END_DT FROM MDS_TRANS_DETAILS MTD, MDS_APPLICATION MA WHERE MTD.CHITTAL_NO=MA.CHITTAL_NO 
        AND MTD.SUB_NO=MA.SUB_NO AND MTD.STATUS!='DELETED' AND MTD.AUTHORIZE_STATUS IS NOT NULL AND MTD.AUTHORIZE_STATUS='AUTHORIZED'
        AND MA.SCHEME_NAME=#PROD_ID:VARCHAR# 
    <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
          <isParameterPresent>
                <isNotNull prepend="AND"      property="ACCOUNTNO">
                    UPPER(MA.CHITTAL_NO ||'_'||MA.SUB_NO) LIKE UPPER('%$ACCOUNTNO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="MEMBER_NO">
                    UPPER(MA.MEMBER_NO) LIKE UPPER('%$MEMBER_NO$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="CUSTOMERNAME">
                    UPPER(MA.MEMBER_NAME) LIKE UPPER('%$CUSTOMERNAME$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="INST_AMT">
                    UPPER(MA.INST_AMT) LIKE UPPER('%$INST_AMT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="PAID_AMOUNT">
                    UPPER(SUM(MTD.INST_AMT)) LIKE UPPER('%$PAID_AMOUNT$%')
                </isNotNull>
            </isParameterPresent>
            <isParameterPresent>
                <isNotNull prepend="AND"      property="START_DT">
                    UPPER(MA.CHIT_START_DT) LIKE UPPER('%$START_DT$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="END_DT">
                    UPPER(MA.CHIT_END_DT) LIKE UPPER('%$END_DT$%')
                </isNotNull>
            </isParameterPresent>
            </dynamic>
            GROUP BY MA.CHITTAL_NO,MA.SUB_NO, MA.INST_AMT, MA.MEMBER_NO, MA.MEMBER_NAME,MA.CHIT_END_DT,MA.CHIT_START_DT ORDER BY MA.CHITTAL_NO 
   </dynamic-mapped-statement>
             
    <mapped-statement name="getLienAccNo" result-class="java.util.HashMap">
        SELECT DEPOSIT_NO FROM DEPOSIT_SUB_ACINFO WHERE status = 'LIEN'AND DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# AND STATUS!='DELETED' AND
        AUTHORIZE_STATUS='AUTHORIZED'
    </mapped-statement>  
         
    <mapped-statement name="getLienAccNoForDispiaying" result-class="java.util.HashMap">
        SELECT DSA.DEPOSIT_NO,LOS_LOAN_TYPE,LOS_LIEN_DATE,LOS_LIEN_AMOUNT,LOS_LIEN_REMARKS,LOS_LIEN_AC_NO,LOS_CUSTOMER_NAME,LIEN_DT,LIEN_AMOUNT,
        LIEN_AC_NO,REMARKS,LIEN_AC_HD,LOANS_OTHER_SOCIETY,LIEN_NO FROM DEPOSIT_SUB_ACINFO DSA,DEPOSIT_LIEN DL WHERE DSA.DEPOSIT_AMT&gt;DSA.AVAILABLE_BALANCE AND 
        DSA.DEPOSIT_NO=DL.DEPOSIT_NO AND DSA.DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# AND DSA.STATUS!='DELETED' AND
        DSA.AUTHORIZE_STATUS='AUTHORIZED' AND DL.STATUS!='DELETED'  AND DL.AUTHORIZE_STATUS='AUTHORIZED' and DL.STATUS!='UNLIENED'
    </mapped-statement> 
         
    <mapped-statement name="getPostageAmount" result-class="java.util.HashMap">
        SELECT  POSTAGE_AMT FROM DEPOSIT_SUB_ACINFO DSA WHERE DSA.DEPOSIT_NO||'_'|| DSA.DEPOSIT_SUB_NO=#ACT_NUM:VARCHAR# AND DSA.STATUS!='DELETED'
        AND AUTHORIZE_STATUS='AUTHORIZED'
    </mapped-statement>  
         
    <mapped-statement name="getRenewPostageAmount" result-class="java.util.HashMap">
        SELECT RENEW_POSTAGE_AMT FROM  RENEWAL_TEMP_DETAILS RT WHERE 
        RT.DEPOSIT_NO||'_'|| RT.SL_NO=#ACT_NUM:VARCHAR# AND RT.STATUS!='COMPLETED'
    </mapped-statement>
         
    <mapped-statement name="getMaturedAccounts" result-class="java.util.LinkedHashMap">
        SELECT DEPOSIT_NO,DEPOSIT_DT,DEPOSIT_AMT,MATURITY_DT,INT_PAY_ACC_NO FROM DEPOSIT_SUB_ACINFO WHERE MATURITY_DT=#TODAY_DT:DATE#
        AND STATUS!='DELETED' AND AUTHORIZE_STATUS='AUTHORIZED' AND ACCT_STATUS!='CLOSED'
    </mapped-statement>
        
    <mapped-statement name="getAuthorizeStatus" result-class="java.util.HashMap">
        SELECT AUTHORIZE_DT FROM DEPOSIT_SUB_ACINFO WHERE DEPOSIT_NO=#DEPOSIT_NO:VARCHAR#
        AND STATUS!='DELETED' AND ACCT_STATUS!='CLOSED'
    </mapped-statement>
        
    <mapped-statement name="getPendingTransAuthList" result-class="java.util.HashMap">
        SELECT AUTHORIZE_STATUS,TRANS_MODE FROM ALL_TRANS WHERE LINK_BATCH_ID=#DEPOSIT_NO:VARCHAR# AND AUTHORIZE_STATUS IS NULL AND 
        STATUS!='DELETED'
    </mapped-statement>
        
        
    <mapped-statement name="getSameNoFromRenewProd" result-class="java.util.HashMap">
        SELECT SAME_NO_ALLOWED
        FROM DEPOSITS_PROD_RENEWAL WHERE PROD_ID = #PROD_ID:VARCHAR# 
    </mapped-statement>
        
    <mapped-statement name="getFdRenewSameNoTranForPrincAmt" result-class="java.util.HashMap">
        SELECT FD_RENEW_SAMENO_TRAN_PRINC_AMT FROM DEPOSITS_PROD_SCHEME WHERE PROD_ID=#OLD_PROD_ID:VARCHAR#
    </mapped-statement>
        
        
    <mapped-statement name="updateIntpaidSameNo" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO_SAMENO SET RENEWAL_INTEREST_PAID = RENEWAL_INTEREST_PAYABLE,RENEWAL_INT_PAID_DATE=#PAID_DATE#
        WHERE DEPOSIT_NO = #ACT_NUM:VARCHAR#
        AND (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS IS NULL)         
    </mapped-statement>
        
    <mapped-statement name="getPreviousBalInt" result-class="java.util.HashMap">
        select sum(DS.RENEWAL_INTEREST_PAYABLE-DS.RENEWAL_INTEREST_PAID) as PREVIOUS_INT_PAYABLE from 
        DEPOSIT_SUB_ACINFO_SAMENO ds where DS.DEPOSIT_NO=#DEPOSIT NO:VARCHAR# AND (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS IS NULL
        OR AUTHORIZE_STATUS='AUTHORIZED')   
    </mapped-statement>
        
    <mapped-statement name="getAuthorizeStatusForDepositLien" result-class="java.util.HashMap">
        select authorize_status from deposit_sub_acinfo where deposit_no=#DEPOSIT_NO:VARCHAR#
    </mapped-statement>  
    <mapped-statement name="getAllMultileBatchIDForDeposits" result-class="java.util.HashMap">
          SELECT DISTINCT batch_id, single_trans_id
           FROM transfer_trans t
          WHERE t.link_batch_id IN ($DEP_NO$) 
            AND trans_dt = #TRANS_DT:DATE#
            AND t.authorize_status = 'AUTHORIZED'
            AND status != 'DELETED'
            AND T.SINGLE_TRANS_ID = (SELECT MAX(SINGLE_TRANS_ID) FROM TRANSFER_TRANS WHERE link_batch_id IN ($DEP_NO$) 
            AND trans_dt = #TRANS_DT:DATE#
            AND authorize_status = 'AUTHORIZED'
            AND status != 'DELETED' ) order by T.batch_id DESC
    </mapped-statement> 
    <mapped-statement name="getIntRoundAtIntApplication" result-class="java.util.HashMap">
        select INT_ROUND_AT_INTAPPL from DEPOSITS_PROD_INTPAY where PROD_ID=#PROD_ID:VARCHAR#
    </mapped-statement>   
    
    <mapped-statement name="upadateInterestDetails" inline-parameters="true">
        update deposit_sub_acinfo_sameno set
        RENEWAL_INTEREST_PAID=RENEWAL_INTEREST_PAYABLE,
        RENEWAL_INT_PAID_DATE=#PAID_DATE:DATE#
        where DEPOSIT_NO=#DEPOSIT_NO:VARCHAR#
        AND (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS IS NULL)    
    </mapped-statement>
    
    <mapped-statement name="upadateInterestApplicationDetails" inline-parameters="true">
        update deposit_sub_acinfo_sameno set
        RENEWAL_INTEREST_PAID=RENEWAL_INTEREST_PAYABLE,LAST_INT_APPL_DT=MATURITY_DT,
        RENEWAL_INT_PAID_DATE=#PAID_DATE:DATE#
        where DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# AND nvl(RENEWAL_INTEREST_PAYABLE,0)-nvl(RENEWAL_INTEREST_PAID,0) !=0
        AND (AUTHORIZE_STATUS !='REJECTED' OR AUTHORIZE_STATUS ='AUTHORIZED')    
    </mapped-statement>
    
    <mapped-statement name="getDepositProdRenewalVal" result-class="java.util.HashMap">
        SELECT IS_SPLIT_INTEREST FROM DEPOSITS_PROD_RENEWAL WHERE PROD_ID=#NEW_PROD_ID:VARCHAR#
    </mapped-statement>
    <mapped-statement name="getCummCertificatePrint" result-class="java.util.HashMap">
        select CUMM_CERTIFICATE_PRINT from deposits_prod_scheme where prod_id=#PROD_ID:VARCHAR#
    </mapped-statement>
    <dynamic-mapped-statement name="getSingTrId" result-class="java.util.LinkedHashMap" > 
        Select distinct SINGLE_TRANS_ID from 
        <dynamic>
            <isEqual prepend="" property="CASH" compareValue="CASH" >
                       CASH_TRANS  where TRANS_ID=#FROM_TRID:VARCHAR# and trans_dt = #TRANS_DT:DATE# 
            </isEqual>
        </dynamic>
        <dynamic>
            <isEqual prepend="" property="TRANSFER" compareValue="TRANSFER" >
                       TRANSFER_TRANS  where BATCH_ID=#FROM_TRID:VARCHAR# and trans_dt = #TRANS_DT:DATE# 
            </isEqual>
        </dynamic>
    </dynamic-mapped-statement> 

    <mapped-statement name="getAllSameDepSubNoAccInfo" result-class="java.util.LinkedHashMap" >
        SELECT * FROM DEPOSIT_SUB_ACINFO_SAMENO 
        WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND STATUS != 'DELETED' AND 
        (AUTHORIZE_STATUS != 'REJECTED' OR AUTHORIZE_STATUS IS NULL) 
        ORDER BY SL_NO 
    </mapped-statement>
    <dynamic-mapped-statement name="getFixedDepositProductsMultiple" result-class="java.util.LinkedHashMap" >
        SELECT PROD_ID, PROD_DESC FROM DEPOSITS_PRODUCT
        WHERE (STATUS = 'CREATED' OR STATUS = 'MODIFIED' OR STATUS = 'UPDATED')
        AND AUTHORIZE_STATUS = 'AUTHORIZED' AND (BEHAVES_LIKE = 'FIXED' OR BEHAVES_LIKE = 'CUMMULATIVE')
          <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
            <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "PROD_ID" >
                    UPPER(PROD_ID) LIKE UPPER('%$PROD_ID$%')
                </isNotEmpty>
            </isParameterPresent>
             <isParameterPresent>
                <isNotEmpty prepend= "AND" property = "PROD_DESC" >
                    UPPER(PROD_DESC) LIKE UPPER('%$PROD_DESC$%')
                </isNotEmpty>
            </isParameterPresent>
            </dynamic>
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="getMdsGroup" result-class="java.util.LinkedHashMap" >
        SELECT LOOKUP_REF_ID AS COMPANYID, LOOKUP_DESC AS DESCRIPTION FROM LOOKUP_MASTER WHERE LOOKUP_ID ='MDS.GROUP'
     <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
              <isParameterPresent>
                <isNotNull prepend="AND"      property="COMPANYID">
                    UPPER(LOOKUP_REF_ID) LIKE UPPER('%$COMPANYID$%')
                </isNotNull>
            </isParameterPresent>
             <isParameterPresent>
                <isNotNull prepend="AND"      property="DESCRIPTION">
                    UPPER(LOOKUP_DESC) LIKE UPPER('%$DESCRIPTION$%')
                </isNotNull>
            </isParameterPresent>
    </dynamic>
    </dynamic-mapped-statement>
    
    <mapped-statement name="getMdsGroupName" result-class="java.util.LinkedHashMap" >
        SELECT LOOKUP_DESC AS DESCRIPTION FROM LOOKUP_MASTER 
        WHERE LOOKUP_ID ='MDS.GROUP' and LOOKUP_REF_ID=#LOOKUP_REF_ID:VARCHAR#
    </mapped-statement>

    <mapped-statement name="getPendingAuthTransactions" result-class="java.util.LinkedHashMap" >
        SELECT DISTINCT(CT.LINK_BATCH_ID) from ALL_TRANS CT where  (CT.LINK_BATCH_ID IN($ACTSTRING$)) 
        AND (CT.AUTHORIZE_STATUS NOT IN('AUTHORIZED','REJECTED' ) OR  CT.AUTHORIZE_STATUS IS NULL) AND CT.STATUS != 'DELETED'
    </mapped-statement>
    
    <mapped-statement name="getAllMultileBatchIDForDepositClosing" result-class="java.util.HashMap">          
        SELECT DISTINCT AT.BATCH_ID, AT.TRANS_ID, AT.SINGLE_TRANS_ID, AT.TRANS_TYPE, AT.TRANS_MODE
        FROM ALL_TRANS AT
        WHERE AT.LINK_BATCH_ID IN ($DEP_NO$)
        AND AT.TRANS_DT = #TRANS_DT:DATE#
        AND AT.STATUS != 'DELETED' 
        AND AT.SCREEN_NAME = 'Deposit Multiple Closing'
        <!--AND AT.SINGLE_TRANS_ID = (SELECT MAX(SINGLE_TRANS_ID) FROM ALL_TRANS WHERE LINK_BATCH_ID IN ($DEP_NO$) 
        AND TRANS_DT = #TRANS_DT:DATE#
        AND STATUS != 'DELETED')--> ORDER BY AT.BATCH_ID DESC
    </mapped-statement> 
   
    <dynamic-mapped-statement name="getNoOfUnauthorizedTransaction" result-class="java.util.HashMap" >
        select AT.LINK_BATCH_ID from ALL_TRANS at
        <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "WHERE" property = "DEPOSIT_NO" >
                     (link_batch_id = #DEPOSIT_NO:VARCHAR# OR ACT_NUM = #DEPOSIT_NO:VARCHAR#)
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        <dynamic>
            <isParameterPresent>
                <isNotEmpty prepend= "WHERE" property = "ACCT_NUM" >
                     (link_batch_id =#ACCT_NUM:VARCHAR# OR ACT_NUM = #ACCT_NUM:VARCHAR# )
                </isNotEmpty>
            </isParameterPresent>
        </dynamic>
        and AT.AUTHORIZE_STATUS is null and
        (AT.AUTHORIZE_REMARKS is null or AT.AUTHORIZE_REMARKS !='REVERSED') 
        and AT.STATUS != 'DELETED'
        and AT.TRANS_DT = #CURR_DT:DATE#
    </dynamic-mapped-statement>
    
    <mapped-statement name="selectDepositData" result-class="java.util.LinkedHashMap">       
       select GET_TD_INTEREST_VALIDATION(#Dep_No:VARCHAR#,#INTEREST:NUMBER#) AS RESULT FROM DUAL
    </mapped-statement>
    
   <!-- Added by nithya on 08-03.2016 for 0003920-->
    
    <mapped-statement name="insertThriftBenevolentAdditionalAmountTO" inline-parameters="true">
        INSERT INTO DEPO_ACCT_THRIFTBENEVOLENT
        (PROD_ID, DEPOSIT_NO, EFFECTIVE_DATE, ADDITIONAL_AMT
        ) VALUES (
        #productId:VARCHAR#, #depositNo:VARCHAR#, #effectiveDate:DATE#, #additionalAmount:VARCHAR#)
    </mapped-statement> 
    
    <dynamic-mapped-statement name="getEffectiveDateForDepositAccount" result-class="java.util.HashMap" >
        SELECT EFFECTIVE_DATE FROM DEPO_ACCT_THRIFTBENEVOLENT WHERE PROD_ID = #PROD_ID:VARCHAR# AND DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
        <dynamic>
            <isParameterPresent>
                <isNotNull prepend='AND' property="EFFECTIVE_DATE">                   
                    EFFECTIVE_DATE = #EFFECTIVE_DATE:DATE#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
    </dynamic-mapped-statement> 
    
    <result-map name="getThriftBenevolentAdditionalAmtTOResult" class="com.see.truetransact.transferobject.deposit.ThriftBenevolentAdditionalAmtTO">
        <property name="productId" column="PROD_ID"/>
        <property name="depositNo" column="DEPOSIT_NO"/>
        <property name="additionalAmount" column="ADDITIONAL_AMT"/>
        <property name="effectiveDate" column="EFFECTIVE_DATE"/>
        
    </result-map>
    
    <mapped-statement name="getDepositAccountAdditionalAmount" result-map="getThriftBenevolentAdditionalAmtTOResult" >
        SELECT * FROM DEPO_ACCT_THRIFTBENEVOLENT WHERE PROD_ID = #PRODUCT_ID:VARCHAR# AND DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement> 

   <mapped-statement name="getDepositCategoryForCustomer" result-class="java.util.LinkedHashMap"> 
       SELECT  DISTINCT CASE WHEN FLOOR((SYS_DATE() -(C.DOB))/365)>(SELECT SENIOR_CITIZEN_AGE FROM PARAMETERS ) THEN 'SENIOR_CITIZENS'
       ELSE 'GENERAL_CATEGORY' END AS CATEGORY
       FROM DEPOSIT_ACINFO DA,CUSTOMER C
       WHERE C.CUST_ID = DA.CUST_ID
       AND DEPOSIT_NO BETWEEN #FROM_AC_NO:VARCHAR# AND #TO_AC_NO:VARCHAR#
   </mapped-statement>
   
   <mapped-statement name="updateDepositMultipleId" result-class="java.util.HashMap" > 
          call UPDATED_DEPOSIT_MULTIPLEID(#DEPOSIT_NO:varchar#)
    </mapped-statement> 
    
    <mapped-statement name="updateThriftBenevolentAdditionalAmnt" result-class="java.util.HashMap" > 
         update DEPOSIT_SUB_ACINFO d set D.ADT_AMT = #ADT_AMT:NUMBER# where D.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement> 

    <mapped-statement name="getRdAgentDetails" result-class="java.util.LinkedHashMap"> 
        SELECT DISTINCT AGENT_ID AS "KEY", GET_CUST_NAME(AGENT_ID) AS "VALUE" FROM DEPOSIT_ACINFO WHERE
        AUTHORIZE_STATUS = 'AUTHORIZED' AND STATUS !='DELETED' AND AGENT_ID IS NOT NULL AND 
        BRANCH_ID = #BRANCH_CODE:VARCHAR#
    </mapped-statement>    
    
    <mapped-statement name="getRdIntallmentDetails" result-class="java.util.LinkedHashMap"> 
        <!--SELECT PROD_DESC,PROD_ID,DEPOSIT_NO,INSTALLENTS,PENDING,INST_AMT,(PENDING* INST_AMT) AS TOTAL_AMOUNT,FIXED_DEPOSIT_ACHD
        FROM(SELECT DP.PROD_DESC,DA.PROD_ID,DA.DEPOSIT_NO ||'_'||D.DEPOSIT_SUB_NO as DEPOSIT_NO,D.TOTAL_INSTALL_PAID||'/'||D.TOTAL_INSTALLMENTS AS INSTALLENTS,FLOOR (  MONTHS_BETWEEN (#CURR_DT:DATE#,
                                  R.DUE_DATE
                                + GET_NO_OF_HOLIDAYS (#CURR_DT:DATE#, #BRANCH_CODE:VARCHAR#)
                                + (SELECT RD.GRACE_PERIOD
                                     FROM DEPOSITS_PROD_RD RD
                                    WHERE RD.PROD_ID = DA.PROD_ID)
                               )
              - 1
             ) AS PENDING,D.DEPOSIT_AMT AS INST_AMT,DPA.FIXED_DEPOSIT_ACHD
          FROM DEPOSIT_RECURRING R JOIN DEPOSIT_SUB_ACINFO D
               ON R.DEPOSIT_NO_SUB = D.DEPOSIT_NO || '_' || D.DEPOSIT_SUB_NO
             AND D.TOTAL_INSTALL_PAID = R.SL_NO
               JOIN DEPOSIT_ACINFO DA ON SUBSTR (R.DEPOSIT_NO_SUB, 0, 13) =DA.DEPOSIT_NO     
               JOIN DEPOSITS_PRODUCT DP ON DA.PROD_ID = DP.PROD_ID   
               JOIN DEPOSITS_PROD_ACHD DPA ON DA.PROD_ID = DPA.PROD_ID                                                         
         WHERE DA.AGENT_ID = #AGENT_ID:VARCHAR#
         AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR#) order by DEPOSIT_NO-->         
         SELECT   PROD_DESC, PROD_ID, DEPOSIT_NO, INSTALLENTS,  DECODE(SIGN(PENDING),-1,0,PENDING) AS PENDING, INST_AMT,
          FIXED_DEPOSIT_ACHD,0 AS DEPOSIT_PENAL_AMT,0 AS TOTAL_AMOUNT
         FROM (SELECT DP.PROD_DESC, DA.PROD_ID,
                 DA.DEPOSIT_NO || '_' || D.DEPOSIT_SUB_NO AS DEPOSIT_NO,
                    D.TOTAL_INSTALL_PAID
                 || '/'
                 || D.TOTAL_INSTALLMENTS AS INSTALLENTS,
                 CASE WHEN DRD.INCLUDE_FULL_MONTH = 'Y' THEN
                    MONTHS_BETWEEN (LAST_DAY (#CURR_DT:DATE#),
                         LAST_DAY (R.DUE_DATE + GET_NO_OF_HOLIDAYS (#CURR_DT:DATE#, #BRANCH_CODE:VARCHAR#))
                        )-1      
                 ELSE
                                  FLOOR
                      (  MONTHS_BETWEEN (#CURR_DT:DATE#,
                                           R.DUE_DATE
                                         + GET_NO_OF_HOLIDAYS (#CURR_DT:DATE#, #BRANCH_CODE:VARCHAR#)
                                         + (SELECT RD.GRACE_PERIOD
                                              FROM DEPOSITS_PROD_RD RD
                                             WHERE RD.PROD_ID = DA.PROD_ID)
                                        )
                       - 1
                      ) 
                      END AS PENDING,
                 D.DEPOSIT_AMT AS INST_AMT, DPA.FIXED_DEPOSIT_ACHD
            FROM DEPOSIT_RECURRING R JOIN DEPOSIT_SUB_ACINFO D
                 ON R.DEPOSIT_NO_SUB = D.DEPOSIT_NO || '_' || D.DEPOSIT_SUB_NO
               AND D.TOTAL_INSTALL_PAID = R.SL_NO
                 JOIN DEPOSIT_ACINFO DA
                 ON SUBSTR (R.DEPOSIT_NO_SUB, 0, 13) = DA.DEPOSIT_NO
                 JOIN DEPOSITS_PRODUCT DP ON DA.PROD_ID = DP.PROD_ID
                 JOIN DEPOSITS_PROD_ACHD DPA ON DA.PROD_ID = DPA.PROD_ID
                 JOIN DEPOSITS_PROD_RD DRD ON DA.PROD_ID = DRD.PROD_ID
            WHERE DA.AGENT_ID = #AGENT_ID:VARCHAR# AND DA.BRANCH_ID = #BRANCH_CODE:VARCHAR#)
            ORDER BY DEPOSIT_NO
    </mapped-statement>  
    
    <mapped-statement name="getRdPendingPenal" result-class="java.util.LinkedHashMap">
        SELECT NVL(GET_RD_PENDING_PENAL(#DEPOSIT_NO:VARCHAR#,#CURR_DT:DATE#,#BRANCH_CODE:VARCHAR#,#INST_PAY:NUMERIC#),0) AS PENDING_PENAL FROM DUAL
    </mapped-statement>   
    
    <mapped-statement name="getDepositDataForValidate" result-class="java.util.HashMap">
       SELECT d.deposit_dt, d.maturity_dt, d.tot_int_amt, d.total_int_credit,
       d.total_int_drawn, d.last_int_appl_dt, d.next_int_appl_dt
       FROM deposit_sub_acinfo d
       WHERE d.deposit_no = #ACT_NUM:VARCHAR#
    </mapped-statement>   
    
     <dynamic-mapped-statement name="viewAllDepAccAuthorizeTOListWithOutTransaction" result-class="java.util.LinkedHashMap" >   
     	SELECT NULL AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DEPOSIT_AMT "Deposit Amt", DEPOSIT_DT "Deposit Date",OPENING_MODE as "Opening Mode",PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND DA.CREATED_DT &lt;= #TRANS_DT:DATE#
        AND (DA.STATUS = 'MODIFIED' OR DA.STATUS = 'CREATED')
        AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <!--<isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>-->
        </dynamic>
        and not exists (select * from all_trans where da.deposit_no || '_1' = link_batch_id 
        and trans_dt=#TRANS_DT:DATE# and (AUTHORIZE_STATUS not in  ('AUTHORIZED', 'REJECTED', 'EXCEPTION') or AUTHORIZE_STATUS IS NULL))
        <!--
        UNION
        SELECT NULL AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DEPOSIT_AMT "Deposit Amt", DEPOSIT_DT "Deposit Date",OPENING_MODE as "Opening Mode",PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND DA.CREATED_DT &lt;= #TRANS_DT:DATE#
        AND DA.STATUS != 'DELETED'
        AND DA.ACC_ZERO_BAL_YN = 'Y'
        AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND 
        #HIERARCHY_ID#::numeric &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>-->
        ORDER BY "DEPOSIT NO"
     </dynamic-mapped-statement>
     
     <dynamic-mapped-statement name="viewAllDepAccAuthorizeTOListForAuthScreen" result-class="java.util.LinkedHashMap" >        
       SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
         CASE WHEN AT.TRANS_MODE='TRANSFER' THEN dsa.deposit_amt
                ELSE AT.AMOUNT END AS "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",at.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE# AND AT.link_batch_id= DA.DEPOSIT_NO||'_1' AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO   
        AND (AT.INSTRUMENT_NO2!='Deposit Closure' OR AT.INSTRUMENT_NO2 IS NULL)
        AND decode(DA.OPENING_MODE,'Renewal',null,DA.MULTIPLE_DEPOSIT_ID) IS NULL
        AND decode(DA.OPENING_MODE,'Renewal',null,dsa.multiple_deposit_id) IS NULL 
        AND C.CUST_ID = DA.CUST_ID AND
        at.STATUS_BY != #USER_ID:VARCHAR# AND AT.INITIATED_BRANCH = #SELECTED_BRANCH_ID:VARCHAR# AND 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = at.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
          
        </dynamic>
          
          
        <!--UNION 
        
        SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DSA.DEPOSIT_AMT "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE# AND AT.link_batch_id= DA.DEPOSIT_NO||'_1' AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND decode(DA.OPENING_MODE,'Renewal',null,DA.MULTIPLE_DEPOSIT_ID) IS NULL
        AND decode(DA.OPENING_MODE,'Renewal',null,dsa.multiple_deposit_id) IS NULL
        AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND DA.BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND 
        #HIERARCHY_ID#::numeric &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
          
        </dynamic>-->
        ORDER BY "DEPOSIT NO"
    </dynamic-mapped-statement>
    
    
    <mapped-statement name="getDepositGroup" result-class="java.util.LinkedHashMap" >     
 <!-- WITH GRP
  AS
  (  
  SELECT g.group_name, g.group_no,COUNT (D.group_no) AS group_count ,G.SCHEME_COUNT
  FROM group_deposit g 
  LEFT JOIN deposit_acinfo d ON d.group_no = g.group_no
  GROUP BY g.group_name ,G.SCHEME_COUNT,g.group_no
  )
  SELECT P.group_name ,p.group_no
  FROM GRP P
  WHERE group_count &lt; SCHEME_COUNT  -->
 
        WITH grp AS
        (SELECT g.group_name, g.group_no, COUNT (d.group_no) AS group_count,
        g.scheme_count AS scheme_count, g.prod_type
        FROM group_deposit g LEFT JOIN deposit_acinfo d
        ON d.group_no = g.group_no
        AND ( d.authorize_status NOT IN ('REJECTED')
        OR d.authorize_status IS NULL
        )
        AND g.branch_id = d.branch_id
        WHERE g.prod_type =#PROD_ID:VARCHAR# AND g.branch_id = #BRANCH_ID:VARCHAR#
        GROUP BY g.group_name, g.scheme_count, g.prod_type, g.group_no)
        SELECT p.group_name, p.group_no, group_count, scheme_count
        FROM grp p
        WHERE group_count &lt; scheme_count  
  
    </mapped-statement>

<mapped-statement name="getIsGroupDepositProduct" result-class="java.util.LinkedHashMap" > 
  select dp.IS_GROUP_DEPOSIT from DEPOSITS_PRODUCT dp where DP.PROD_ID = #PROD_ID:VARCHAR#
</mapped-statement>

<mapped-statement name="getInterestRateForDepositGroup" result-class="java.util.LinkedHashMap" > 
  select GD.PRIZED_PENAL,GD.NON_PRIZED_PENAL,GD.PENAL_CALCULATION_TYPE,GD.INTEREST_AMOUNT,GD.INTEREST_AMOUNT_TYPE,GD.INTEREST_RECOVERY,
  GD.INTEREST_RECOVERY_TYPE,GD.PREMATURE_INT_REC_CALC_TYPE,gd.PREMATURE_INT_REC_CALC_AMOUNT,GD.DEPOSIT_AMT,IS_INTEREST_RECOVERY,
  INT_CALC_BEFORE_FULL_PAYMENT,INT_CALC_RATE_BEFORE_PAYMENT
  from GROUP_DEPOSIT gd where GD.GROUP_NO = 
  ( select D.GROUP_NO from DEPOSIT_ACINFO d
  where D.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#)
</mapped-statement>

<mapped-statement name="getIsGroupDepositExistsForLoan" result-class="java.util.LinkedHashMap" > 
  <!--select D.DEPOSIT_NO from DEPOSIT_LIEN d where D.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#-->
  select D.DEPOSIT_NO from DEPOSIT_LIEN d where D.DEPOSIT_NO = #DEPOSIT_NO:VARCHAR# AND D.STATUS = 'CREATED' AND D.AUTHORIZE_STATUS = 'AUTHORIZED'
</mapped-statement>

<mapped-statement name="getGroupDepositAmountForAcct" result-class="java.util.LinkedHashMap" > 
   select G.DEPOSIT_AMT,nvl(MONTHS_BETWEEN(G.END_DT,G.START_DT),0) as DEPO_PERIOD from GROUP_DEPOSIT g where G.GROUP_NO =  #GROUP_NO:VARCHAR#
</mapped-statement>

 <mapped-statement name="getReferenceIdForGroupDeposit" result-class="java.util.HashMap" > 
    select count(DA.DEPOSIT_NO) + 1 as REF_NO from DEPOSIT_ACINFO da where DA.PROD_ID = #PROD_TYPE:VARCHAR#
    and DA.BRANCH_ID = #BRANCH_ID:VARCHAR#
 </mapped-statement>

    <mapped-statement name="updateRenewalDateinSubacinfo" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET RENEWED_DT = #RENEWED_DT:DATE# WHERE DEPOSIT_NO = #ACT_NUM:VARCHAR#        
    </mapped-statement>
    
    <mapped-statement name="getSelectRenewalCount" result-class="java.util.HashMap" > 
        SELECT GET_TD_RENEWCOUNT(#ACT_NUM:VARCHAR#) AS RENEWAL_COUNT FROM DUAL
    </mapped-statement>
    
    <mapped-statement name="updateTempRenewalDateinSubacinfo" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET TEMP_RENEWED_DT = #OLD_RENEWED_DT:DATE# WHERE DEPOSIT_NO = #ACT_NUM:VARCHAR#        
    </mapped-statement>
    
    <mapped-statement name="rollBackDepositRenewDate" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET RENEWED_DT =#RENEW_DATE:DATE# WHERE DEPOSIT_NO = #DEPOSIT_NO:VARCHAR#
    </mapped-statement>        
    
      <dynamic-mapped-statement name="viewAllDepAccRenewalAuthorizeTOListForAuthScreen" result-class="java.util.LinkedHashMap" >        
       SELECT DISTINCT CASE
            WHEN AT.TRANS_MODE = 'TRANSFER'
               THEN AT.BATCH_ID
            ELSE AT.TRANS_ID
         END AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",AT.LINK_BATCH_ID AS DEPOSIT_OLD_NUM,SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
         CASE WHEN AT.TRANS_MODE='TRANSFER' THEN dsa.deposit_amt
                ELSE AT.AMOUNT END AS "Deposit Amt", DSA.DEPOSIT_DT "Deposit Date",DA.OPENING_MODE as "Opening Mode",DA.PROD_ID as "Product Id",at.STATUS_BY as "Status By"
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C,ALL_TRANS AT  WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND AT.TRANS_DT=#TRANS_DT:DATE# AND 
        AT.ACT_NUM= DA.DEPOSIT_NO||'_1' 
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO   
        AND (AT.INSTRUMENT_NO2!='Deposit Closure' OR AT.INSTRUMENT_NO2 IS NULL)
        AND decode(DA.OPENING_MODE,'Renewal',null,DA.MULTIPLE_DEPOSIT_ID) IS NULL
        AND decode(DA.OPENING_MODE,'Renewal',null,dsa.multiple_deposit_id) IS NULL 
        AND C.CUST_ID = DA.CUST_ID AND
        at.STATUS_BY != #USER_ID:VARCHAR# AND AT.INITIATED_BRANCH = #SELECTED_BRANCH_ID:VARCHAR# AND 
        AT.TRANS_TYPE='CREDIT' AND
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = at.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (AT.AUTHORIZE_STATUS IS NULL OR 
                AT.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    DA.OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        ORDER BY "DEPOSIT NO"
    </dynamic-mapped-statement>
    
        <dynamic-mapped-statement name="viewAllDepACCRenewalAuthorizeTOListWithoutTransaction" result-class="java.util.LinkedHashMap" >                   
       SELECT NULL AS TRANS_ID,DA.DEPOSIT_NO AS "DEPOSIT NO",SUBSTR(get_cust_name(C.CUST_ID),1,15) as "Customer Name",
        DEPOSIT_AMT "Deposit Amt", DEPOSIT_DT "Deposit Date",OPENING_viewAllDepACCRenewalAuthorizeTOListWithoutTransactionMODE as "Opening Mode",PROD_ID as "Product Id",DA.STATUS_BY as "Status By"       
        FROM DEPOSIT_ACINFO DA,DEPOSIT_SUB_ACINFO DSA,CUSTOMER C WHERE (DSA.STATUS != 'DELETED' OR DSA.STATUS IS NULL)
        AND DA.DEPOSIT_NO = DSA.DEPOSIT_NO 
        AND DA.CREATED_DT &lt;= #TRANS_DT:DATE#
        AND (DA.STATUS = 'MODIFIED' OR DA.STATUS = 'CREATED')
        AND ACCT_STATUS = 'NEW' AND C.CUST_ID = DA.CUST_ID AND 
        DA.STATUS_BY != #USER_ID:VARCHAR# AND BRANCH_ID = #SELECTED_BRANCH_ID:VARCHAR# AND 
        cast(#HIERARCHY_ID# as numeric) &gt;= (SELECT DISTINCT DECODE(NVL(SAME_HIERARCHY_ALLOWED,'N'), 'Y', HIERARCHY_ID, 
        HIERARCHY_ID + 1) FROM USER_MASTER UM, ROLE_MASTER RM 
        WHERE RM.ROLE_ID = UM.USER_ROLE AND UM.USER_ID = DA.STATUS_BY)        
        <dynamic>
            <isEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                DSA.AUTHORIZE_STATUS = 'EXCEPTION'
            </isEqual>
            <isNotEqual prepend="AND" property="AUTHORIZESTATUS" compareValue="EXCEPTION" >
                (DSA.AUTHORIZE_STATUS IS NULL OR 
                DSA.AUTHORIZE_STATUS NOT IN ('AUTHORIZED', 'REJECTED', 'EXCEPTION'))
            </isNotEqual>
            <isParameterPresent>
                <isNotNull prepend="AND" property="OPENING_MODE">
                    OPENING_MODE = #OPENING_MODE:VARCHAR#
                </isNotNull>
            </isParameterPresent>
        </dynamic>
        and not exists (select * from all_trans where da.deposit_no || '_1' = link_batch_id 
        and trans_dt=#TRANS_DT:DATE# and (AUTHORIZE_STATUS not in  ('AUTHORIZED', 'REJECTED', 'EXCEPTION') or AUTHORIZE_STATUS IS NULL))
        ORDER BY "DEPOSIT NO"
    </dynamic-mapped-statement>
    
    <mapped-statement name="updateCalendarDayForSpecialRD" inline-parameters="true">
        UPDATE DEPOSIT_SUB_ACINFO SET CALENDER_DAY = NULL
        WHERE DEPOSIT_NO = #depositNo:VARCHAR#
    </mapped-statement>  
    
<!--  General passbook start  -->

   <result-map name="getAccountResultAD" class="java.util.LinkedHashMap">
        <property name="AccountNo" column="ACT_NUM"/>
        <property name="CustomerName" column="CUSTOMER_NAME"/>
        <property name="HouseName" column="HOUSE_NAME"/>
        <property name="Category" column="CATEGORY"/>
        <property name="MemberNo" column="MemNo"/>
        <property name="EmployeNo" column="EmpNo"/>
        <property name="Branch_Id" column="BRANCH_CODE"/>
    </result-map>
    
    <result-map name="getAccountResultOA" class="java.util.LinkedHashMap">
        <property name="AccountNo" column="ACT_NUM"/>
        <property name="CustomerName" column="CUSTOMER_NAME"/>
           <!-- <property name="CustomerType" column="CUST_TYPE_ID"/> -->
        <property name="HouseName" column="HOUSE_NAME"/>
        <property name="CustomerCat" column="CATEGORY_ID"/>
        <property name="MemberNo" column="MemNo"/>
        <property name="EmployNo" column="EmpNo"/>
        <property name="Branch_Id" column="BRANCH_CODE"/>        
    </result-map>

    <result-map name="getAccountResultTDWithMemberNo" class="java.util.LinkedHashMap">
        <property name="AccountNo" column="ACT_NUM"/>
        <property name="CustomerName" column="CUSTOMER_NAME"/>
            <!-- <property name="CustomerType" column="CUST_TYPE_ID"/> -->
        <property name="HouseName" column="HOUSE_NAME"/>
        <property name="ProductType" column="TYPE"/>
        <property name="Amount" column="AMOUNT"/>
        <property name="MemberNo" column="MemNo"/>
        <property name="EmployeNo" column="EmpNo"/>
        <property name="DEPOSIT_AMT" column="DEPOSIT_AMT"/>
            <!--<property name="ReminingAmount" column="REMINING_AMT"/> -->           
      </result-map>
      
      <result-map name="getAccountResultTL" class="java.util.LinkedHashMap">
        <property name="AccountNo" column="ACT_NUM"/>
        <property name="CustomerName" column="CUSTOMER_NAME"/>
        <property name="HouseName" column="HOUSE_NAME"/>
        <property name="Category" column="CATEGORY"/>
        <property name="MemberNo" column="memno"/>
        <property name="EmpNo" column="empno"/>
    </result-map>
    
     <dynamic-mapped-statement name="GenpassbookMDS" result-class="java.util.LinkedHashMap">            
         SELECT MA.CHITTAL_NO ,
         MA.MEMBER_NO,
         MA.MEMBER_NAME AS CUSTOMERNAME,
         MA.INST_AMT,
         MTD.PAID_AMOUNT AS PAID_AMOUNT,
         MA.CHIT_START_DT AS START_DT,
         MA.CHIT_END_DT AS END_DT FROM MDS_APPLICATION MA
         LEFT JOIN 
         (SELECT MTD.CHITTAL_NO, MTD.SUB_NO, SUM(MTD.NO_OF_INST*MTD.INST_AMT) AS PAID_AMOUNT FROM MDS_TRANS_DETAILS MTD
         WHERE MTD.AUTHORIZE_STATUS = 'AUTHORIZED' AND MTD.STATUS NOT IN ('DELETED')
         GROUP BY MTD.CHITTAL_NO, MTD.SUB_NO
         ) MTD ON MTD.CHITTAL_NO = MA.CHITTAL_NO AND MTD.SUB_NO = MA.SUB_NO 
         where MA.SCHEME_NAME =#PROD_ID:VARCHAR# 
    <dynamic>
             <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt; 100
                </isEqual>
            </isPropertyAvailable>            
      </dynamic>
            GROUP BY MA.CHITTAL_NO,MA.SUB_NO, MA.INST_AMT, MA.MEMBER_NO,  MTD.PAID_AMOUNT, MA.MEMBER_NAME,MA.CHIT_END_DT,MA.CHIT_START_DT ORDER BY MA.CHITTAL_NO 
   </dynamic-mapped-statement>
   
   <dynamic-mapped-statement name="GenpassbookAD"  result-map="getAccountResultAD" >
    SELECT   Distinct lfd.acct_num AS act_num,
    get_cust_name(cu.cust_id) AS customer_name,
         ca.street AS house_name, lb.CATEGORY AS CATEGORY,
         sa.share_acct_no AS memno, sa.emp_refno_new AS empno, lb.branch_code
    FROM loans_borrower lb 
          Join customer cu on LB.CUST_ID = CU.CUST_ID 
          Join cust_addr ca on  ca.cust_id = cu.cust_id
          Join loans_facility_details lfd on lb.borrow_no = lfd.borrow_no  
          Left Join share_acct sa on sa.cust_id = lb.cust_id 
   WHERE 
        lfd.prod_id = #PROD_ID:VARCHAR#
     AND ca.addr_type = cu.comm_addr_type
     AND lb.status NOT IN ('DELETED')
     AND lfd.status NOT IN ('DELETED')
     AND lfd.authorize_status_1 = 'AUTHORIZED'
        <dynamic> 
            <isPropertyAvailable prepend = "AND" property="SELECTED_BRANCH">
                lfd.branch_id =  #SELECTED_BRANCH:VARCHAR#
            </isPropertyAvailable>
        </dynamic>
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>            
        </dynamic>         
        ORDER BY lfd.acct_num   
              <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                 <isEqual prepend="" property="FILTERED_LIST" compareValue="FILTERED_LIST_org.postgresql.Driver" >
                    LIMIT 100
                </isEqual>
            </isPropertyAvailable>
        </dynamic> 
    </dynamic-mapped-statement>
    
   <dynamic-mapped-statement name="GenpassbookOA" result-map="getAccountResultOA" >
        SELECT   Distinct act_num,
         CASE WHEN cu.cust_type= 'INDIVIDUAL' THEN 
               DECODE (am.opt_mode_id, 'SELF', nvl(cu.fname,'') || ' ' || nvl(cu.mname,'') || ' ' || nvl(cu.lname,''),
		nvl(cu.fname,'') || ' ' || nvl(cu.mname,'') || ' ' || nvl(cu.lname,'') ||<!-- (select ' &amp; ' || max(cu.fname) from customer cu join act_joint aj on aj.cust_id=cu.cust_id
                       where aj.act_num=am.act_num)-->
                       (GET_JOINT_CUST_NAMES(am.act_num))
                       ) ELSE cu.comp_name END AS customer_name,
               ca.street AS house_name, category_id, SA.SHARE_ACCT_NO AS memno,'' AS empno,am.branch_code
        FROM act_master am
        join customer cu on am.cust_id = cu.cust_id
        Join cust_addr ca on ca.addr_type = cu.comm_addr_type and ca.cust_id = cu.cust_id 
        Left join share_acct sa on SA.CUST_ID = CU.CUST_ID
        WHERE am.prod_id = #PROD_ID:VARCHAR#
        <dynamic> 
           <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>            
        </dynamic>
     AND am.status NOT IN ('DELETED')
     AND am.authorization_status = 'AUTHORIZED'
     <dynamic> 
            <isPropertyAvailable prepend = "AND" property="SELECTED_BRANCH">
                am.branch_code= #SELECTED_BRANCH:VARCHAR#
            </isPropertyAvailable>
     </dynamic>
     ORDER BY ACT_NUM
         <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                 <isEqual prepend="" property="FILTERED_LIST" compareValue="FILTERED_LIST_org.postgresql.Driver" >
                    LIMIT 100
                </isEqual>
            </isPropertyAvailable>
        </dynamic>  
  </dynamic-mapped-statement>
  
  <dynamic-mapped-statement name="GenpassbookTD" result-map="getAccountResultTDWithMemberNo" >

        SELECT DA.DEPOSIT_NO as ACT_NUM, get_cust_name(cu.cust_id) AS CUSTOMER_NAME, CA.STREET AS HOUSE_NAME,  
        DP.BEHAVES_LIKE AS TYPE, DS.AVAILABLE_BALANCE AS AMOUNT ,SA.SHARE_ACCT_NO as MemNo,SA.EMP_REFNO_NEW as 
            EmpNo,DS.DEPOSIT_AMT  FROM DEPOSIT_ACINFO DA, 
         CUST_ADDR CA,DEPOSIT_SUB_ACINFO DS, DEPOSITS_PRODUCT DP,CUSTOMER CU LEFT OUTER JOIN SHARE_acct SA on  sa.cust_id = cu.cust_id 
         WHERE DA.CUST_ID = CU.CUST_ID AND CA.CUST_ID = CU.CUST_ID AND  CA.ADDR_TYPE= CU.COMM_ADDR_TYPE AND 
        DP.PROD_ID = DA.PROD_ID AND DA.PROD_ID = #PROD_ID:VARCHAR# AND DA.DEPOSIT_NO=DS.DEPOSIT_NO    AND 
        (DS.AVAILABLE_BALANCE >=(NVL(DS.CLEAR_BALANCE,0) + NVL(DS.SHADOW_CREDIT,0) - 
        NVL(DS.SHADOW_DEBIT,0)) OR DP.BEHAVES_LIKE = 'RECURRING' OR dp.behaves_like = 'DAILY')  AND DS.STATUS NOT IN 
        ('DELETED') AND DS.AUTHORIZE_STATUS='AUTHORIZED'
         <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
               <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>
        </dynamic>
        <dynamic> 
            <isPropertyAvailable prepend = "AND" property="SELECTED_BRANCH">
             DA.BRANCH_ID = #SELECTED_BRANCH:VARCHAR#
            </isPropertyAvailable>
        </dynamic>
        ORDER BY DA.DEPOSIT_NO  
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                 <isEqual prepend="" property="FILTERED_LIST" compareValue="FILTERED_LIST_org.postgresql.Driver" >
                    LIMIT 100
                </isEqual>
            </isPropertyAvailable>
        </dynamic> 
    </dynamic-mapped-statement>
    
    <dynamic-mapped-statement name="GenpassbookTL" result-map="getAccountResultTL" >
        SELECT
        DISTINCT(LFD.ACCT_NUM)  <!--|| '_' || LRS.SCHEDULE_NO --> as ACT_NUM, 
        get_cust_name(cu.cust_id)
        AS CUSTOMER_NAME,CA.STREET AS HOUSE_NAME,
        LB.CATEGORY as CATEGORY,SA.SHARE_ACCT_NO as MemNo, SA.EMP_REFNO_NEW as EmpNo 
        FROM LOANS_BORROWER LB
                Join customer cu on lb.cust_id = cu.cust_id
                Join cust_addr ca on ca.cust_id = cu.cust_id and ca.addr_type = cu.comm_addr_type  
                Join loans_facility_details lfd on lb.borrow_no = lfd.borrow_no 
                Join loans_repay_schedule lrs on  lrs.acct_num = lfd.acct_num
                left Join share_acct sa on  sa.cust_id = cu.cust_id
<!--                Left Join loans_acct_charge_details lacd on lfd.acct_num = lacd.act_num-->
        WHERE 
<!--        LB.CUST_ID = CU.CUST_ID   AND CA.CUST_ID = CU.CUST_ID AND
        CA.ADDR_TYPE= CU.COMM_ADDR_TYPE AND 
        LB.BORROW_NO = LFD.BORROW_NO AND -->
        LFD.PROD_ID = #PROD_ID:VARCHAR# AND
<!--        (LFD.ACCT_STATUS IN ('NEW','TRANSFER_IN', 'DECEASED', 'OPERATIONAL') or LFD.ACCT_STATUS is null) AND -->
        LB.STATUS NOT IN ('DELETED') AND 
        LFD.STATUS NOT IN ('DELETED') AND 
        LFD.AUTHORIZE_STATUS_1 = 'AUTHORIZED'
           <!-- AND LFD.AUTHORIZE_STATUS_2 = 'AUTHORIZED' -->  
       <!--AND (LFD.ACCT_STATUS !='CLOSED') -->
       AND (LRS.STATUS NOT IN ('DELETED') OR LRS.STATUS IS NULL)
        and LRS.SCHEDULE_MODE = 'REGULAR'
        AND LRS.REPAY_ACTIVE = 'Y'
        <dynamic> 
            <isPropertyAvailable prepend = "AND" property="SELECTED_BRANCH">
                LFD.BRANCH_ID = #SELECTED_BRANCH:VARCHAR#
            </isPropertyAvailable>
        </dynamic>  
        <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                <isEqual prepend="AND" property="FILTERED_LIST" compareValue="FILTERED_LIST_oracle.jdbc.driver.OracleDriver" >
                    ROWNUM &lt;= 100
                </isEqual>
            </isPropertyAvailable>  
        </dynamic>
        ORDER BY 1
           <dynamic>
            <isPropertyAvailable prepend = "" property="FILTERED_LIST">
                 <isEqual prepend="" property="FILTERED_LIST" compareValue="FILTERED_LIST_org.postgresql.Driver" >
                    LIMIT 100
                </isEqual>
            </isPropertyAvailable>
        </dynamic>    
    </dynamic-mapped-statement>    
    
   <!--  General passbook end  -->
   
    <mapped-statement name="getDepositCommunicationAddress" result-class="java.util.HashMap" >
        select nvl(DA.COMM_ADDRESS,C.COMM_ADDR_TYPE) as ADDR_TYPE from DEPOSIT_ACINFO da,customer c where 
        DA.CUST_ID = C.CUST_ID 
        and DA.DEPOSIT_NO = #DEPOSIT NO:VARCHAR#
    </mapped-statement>
    
    <mapped-statement name="getCustomerPrimaryCommunicationAddr" result-class="java.util.HashMap" >
       select c.COMM_ADDR_TYPE from customer c where C.CUST_ID = #CUST_ID:VARCHAR# 
    </mapped-statement>
    
    
     <mapped-statement name="updateCertificatePrintCount" result-class="java.util.HashMap" > 
        UPDATE DEPOSIT_ACINFO SET CERTIFICATE_PRINT_CNT= nvl(CERTIFICATE_PRINT_CNT,0) + 1 
        WHERE DEPOSIT_NO=#DEPOSIT_NO:VARCHAR# 
    </mapped-statement> 
    
    <mapped-statement name="Cash.getAccountList" result-map="getAccountResultListOA" >
        SELECT * FROM (SELECT NULL AS ACT_NUM, NULL AS CUSTOMER_NAME, NULL AS HOUSE_NAME,NULL AS CATEGORY_ID FROM DUAL)a WHERE ACT_NUM IS NOT NULL 
    </mapped-statement>
    
    
    <mapped-statement name="processDepositAutoRenewal" result-class="java.util.HashMap">
         select * from app_fun_auto_ren_process(#BRANCH_CODE#::Character varying, #CURR_DT#::date, #USER#::character varying) AS STATUS 
    </mapped-statement>
    
     <mapped-statement name="postDepositAutoRenewal" result-class="java.util.HashMap">
         select * from app_fun_auto_ren_post(#BRANCH_CODE#::Character varying, #CURR_DT#::date, #USER#::character varying) AS STATUS 
    </mapped-statement>
    
    
</sql-map>
