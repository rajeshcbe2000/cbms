/*

 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition. 
 * 
 * DepositPrintUI.java
 *
 * Created on September 28, 2011, 3:03 PM
 */
package com.see.truetransact.ui.deposit.print;

import java.io.*;
import java.sql.*;
import java.util.*;
import javax.swing.*;
import javax.print.*;
import org.w3c.dom.*;
import java.util.Date;
import java.awt.print.*;
import java.awt.event.*;
import javax.print.event.*;
import javax.swing.table.*;
import javax.print.attribute.*;
import java.text.SimpleDateFormat;
import javax.print.attribute.standard.*;
import com.see.truetransact.ui.TrueTransactMain;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.clientutil.CMandatoryDialog;

/**
 *
 * @author  user
 */
public class DepositPrintUI extends com.see.truetransact.uicomponent.CInternalFrame   {
    
    public Date currDate=null;
    DefaultTableModel model = null;
    int selectedRow = -1;
    
    public DepositPrintUI() {
        currDate = ClientUtil.getCurrentDate();
        initComponents();
        initTableData();
        this.setBounds(0,0, 700, 400);
        fillData();
        txtPrintingNo.setAllowAll(true);
    }
    
    public void fillData() {
        HashMap singleAuthorizeMap = new HashMap();
//        singleAuthorizeMap.put(CommonConstants.USER_ID, "app");
        singleAuthorizeMap.put(CommonConstants.AUTHORIZEDT, currDate.clone());
        singleAuthorizeMap.put("CURR_DT", currDate);
        singleAuthorizeMap.put(CommonConstants.BRANCH_ID,TrueTransactMain.BRANCH_ID);
        List aList= ClientUtil.executeQuery("getDialogHashMap", singleAuthorizeMap);
        //  System.out.println("aListIN PRINT++++++++:"+aList);
        model.setRowCount(0);
        
        for(int i=0;i<aList.size();i++) {
            HashMap map=(HashMap)aList.get(i);
            //  System.out.println("Data print :"+map);
            String AccNo=map.get("DEPOSIT_NO").toString();
            String Name=map.get("FNAME").toString();
//            String DpDate=getDtPrintValue(map.get("DEPOSIT_DT").toString());
            String DpDate=DateUtil.getStringDate((Date)(map.get("DEPOSIT_DT")));
            String Amount=map.get("DEPOSIT_AMT").toString();
//            String MatDate=getDtPrintValue(map.get("MATURITY_DT").toString());
            String MatDate=DateUtil.getStringDate((Date)(map.get("MATURITY_DT")));
            
            model.addRow(new String[]{AccNo,Name,DpDate,Amount,MatDate});
            //tblData.
        }
    }
    
    public void initTableData() {
        String data[][] ={{}};
        String col[] = {"Account No","Name","Deposit Date","Amount","Maturity Date"};
        DefaultTableModel dataModel = new DefaultTableModel();
        // dataModel.setDataVector(dataVector
        model = new DefaultTableModel(data,col);
        //  tblData.getCellEditor().stopCellEditing();
        tblData.setModel(model);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        scrTableScroll = new com.see.truetransact.uicomponent.CScrollPane();
        tblData = new com.see.truetransact.uicomponent.CTable();
        btnPrint = new com.see.truetransact.uicomponent.CButton();
        cLabel1 = new com.see.truetransact.uicomponent.CLabel();
        txtPrintingNo = new com.see.truetransact.uicomponent.CTextField();
        lblAccountNo = new com.see.truetransact.uicomponent.CLabel();
        cLabel3 = new com.see.truetransact.uicomponent.CLabel();
        cLabel4 = new com.see.truetransact.uicomponent.CLabel();
        txtAccNo = new com.see.truetransact.uicomponent.CTextField();
        txtName = new com.see.truetransact.uicomponent.CTextField();
        txtAmount = new com.see.truetransact.uicomponent.CTextField();
        cLabel5 = new com.see.truetransact.uicomponent.CLabel();

        getContentPane().setLayout(null);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(640, 340));
        setPreferredSize(new java.awt.Dimension(640, 340));
        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Account No", "Name", "Deposit Date", "Amount", "Maturity Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });

        scrTableScroll.setViewportView(tblData);

        getContentPane().add(scrTableScroll);
        scrTableScroll.setBounds(10, 20, 620, 170);

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        getContentPane().add(btnPrint);
        btnPrint.setBounds(270, 270, 85, 27);

        cLabel1.setText("Printing No");
        getContentPane().add(cLabel1);
        cLabel1.setBounds(350, 230, 90, 18);

        getContentPane().add(txtPrintingNo);
        txtPrintingNo.setBounds(440, 230, 80, 21);

        lblAccountNo.setText("Account No");
        getContentPane().add(lblAccountNo);
        lblAccountNo.setBounds(20, 200, 100, 18);

        cLabel3.setText("Name");
        getContentPane().add(cLabel3);
        cLabel3.setBounds(350, 200, 90, 18);

        cLabel4.setText("Amount");
        getContentPane().add(cLabel4);
        cLabel4.setBounds(20, 230, 100, 18);

        txtAccNo.setForeground(new java.awt.Color(255, 51, 51));
        txtAccNo.setEnabled(false);
        getContentPane().add(txtAccNo);
        txtAccNo.setBounds(130, 200, 180, 21);

        txtName.setForeground(new java.awt.Color(255, 51, 51));
        txtName.setEnabled(false);
        getContentPane().add(txtName);
        txtName.setBounds(440, 200, 180, 21);

        txtAmount.setForeground(new java.awt.Color(255, 51, 51));
        txtAmount.setEnabled(false);
        getContentPane().add(txtAmount);
        txtAmount.setBounds(130, 230, 180, 21);

        getContentPane().add(cLabel5);
        cLabel5.setBounds(20, 270, 220, 0);

        pack();
    }//GEN-END:initComponents
    private void displayAlert(String message){
        CMandatoryDialog cmd = new CMandatoryDialog();
        cmd.setMessage(message);
        cmd.setModal(true);
        cmd.show();
    }
    public boolean checkNumber(String value) {
        //String amtRentIn=amountRentText.getText();
        boolean incorrect = true;
        try {
            Double.parseDouble(value);
            return true;
        }
        catch(NumberFormatException nfe) {
            return false;
        }
        // return
    }
    public String getDtPrintValue(String strDate) {
        try {
            //create SimpleDateFormat object with source string date format
            SimpleDateFormat sdfSource = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            //"yyyy-MM-dd HH:mm:ss "
            //parse the string into Date object
            Date date = sdfSource.parse(strDate);
            //create SimpleDateFormat object with desired date format
            SimpleDateFormat sdfDestination = new SimpleDateFormat("MM/dd/yyyy");
            //parse the date into another format
            strDate = sdfDestination.format(date);
        }
        catch(Exception e) {
            // e.printStackTrace();
        }
        return strDate;
    }
    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
        //Validation
        
        String printNo=txtPrintingNo.getText();
        if(printNo!=null && !printNo.equalsIgnoreCase("")) {
            cLabel5.setText("Printing. Please wait...");
//            if(!checkNumber(printNo)) {
//                displayAlert("Enter Receipt Number!!!");
//                return;
//            } else {
                HashMap singleAuthorizeMap = new HashMap();
                singleAuthorizeMap.put("PRINT_NO", printNo);
                List aList= ClientUtil.executeQuery("getPrintingNoHashMap", singleAuthorizeMap);
                // System.out.println("aListIN PRINT++++++++:"+aList);
                for(int i=0;i<aList.size();i++) {
                    HashMap map=(HashMap)aList.get(i);
                    int countNo=Integer.parseInt(map.get("COUNT").toString());
                    if(countNo!=0) {
                        displayAlert("This Receipt number already printed!!!");
                        return;
                    } else {
                        HashMap countUpdateMap = new HashMap();
                        countUpdateMap.put("DEPOSIT_NO", txtAccNo.getText());//Account No
                        ClientUtil.execute("updateCertificatePrintCount", countUpdateMap);
                        com.see.truetransact.clientutil.ttrintegration.TTIntegration ttIntgration = null;
                        HashMap reportTransIdMap = new HashMap();
                        reportTransIdMap.put("Act_Num", txtAccNo.getText());
                        ttIntgration.setParam(reportTransIdMap);
                        ttIntgration.integrationForPrint("DepositReceipt", false);
                    }
                }
//            }
            //Update printing no in deposit_ac_info table
            String AccNumber=txtAccNo.getText();
            singleAuthorizeMap = new HashMap();
            singleAuthorizeMap.put("PRINT_NO", printNo);//Receipt No
            singleAuthorizeMap.put("DEPOSIT_NO", AccNumber);//Account No
            ClientUtil.execute("updatePrintingHashMap", singleAuthorizeMap);
            model.removeRow(selectedRow);
            txtAccNo.setText("");
            txtAmount.setText("");
            txtName.setText("");
            txtPrintingNo.setText("");
            cLabel5.setText("Print Completed...");
            //
        } else {
            displayAlert("Enter Receipt number!!!");
            return;
        }
    }//GEN-LAST:event_btnPrintActionPerformed
    
    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked
        // TODO add your handling code here:
        int row=tblData.rowAtPoint(evt.getPoint());
        
        int col= tblData.columnAtPoint(evt.getPoint());
        //System.out.println("R= "+row +" C="+col);
        //JOptionPane.showMessageDialog(null,tblData.getValueAt(row,col).toString());
        String AccNo=tblData.getValueAt(row,0).toString();
        String Name=tblData.getValueAt(row,1).toString();
        String Amt=tblData.getValueAt(row,3).toString();
        if(AccNo!=null && !AccNo.equalsIgnoreCase("")) {
            txtAccNo.setText(AccNo);
        }
        if(Name!=null && !Name.equalsIgnoreCase("")) {
            txtName.setText(Name);
        }
        if(Amt!=null && !Amt.equalsIgnoreCase("")) {
            txtAmount.setText(Amt);
        }
        selectedRow = tblData.getSelectedRow();
        cLabel5.setText("");
        //tblData.getCol
    }//GEN-LAST:event_tblDataMouseClicked
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new DepositPrintUI().show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnPrint;
    private com.see.truetransact.uicomponent.CLabel cLabel1;
    private com.see.truetransact.uicomponent.CLabel cLabel3;
    private com.see.truetransact.uicomponent.CLabel cLabel4;
    private com.see.truetransact.uicomponent.CLabel cLabel5;
    private com.see.truetransact.uicomponent.CLabel lblAccountNo;
    private com.see.truetransact.uicomponent.CScrollPane scrTableScroll;
    private com.see.truetransact.uicomponent.CTable tblData;
    private com.see.truetransact.uicomponent.CTextField txtAccNo;
    private com.see.truetransact.uicomponent.CTextField txtAmount;
    private com.see.truetransact.uicomponent.CTextField txtName;
    private com.see.truetransact.uicomponent.CTextField txtPrintingNo;
    // End of variables declaration//GEN-END:variables
    
}

