/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.
 * 
 *
 * TermDepositUI.java
 *
 * Created on December 24, 2003, 11:53 AM
 */
package com.see.truetransact.ui.deposit.multipledeposit;

import com.ibatis.db.sqlmap.SqlMap;
import java.util.List;
import java.util.Date;
import java.util.HashMap;
import java.util.Observer;
import java.util.ArrayList;
import java.util.Observable;
import java.util.GregorianCalendar;

import org.apache.log4j.Logger;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.ui.TrueTransactMain;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.uicomponent.COptionPane;
import com.see.truetransact.uicomponent.CButtonGroup;
import com.see.truetransact.clientutil.ComboBoxModel;
import com.see.truetransact.uimandatory.UIMandatoryField;
import com.see.truetransact.uimandatory.MandatoryCheck;
import com.see.truetransact.clientutil.ClientConstants;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.ui.common.nominee.NomineeUI;
import com.see.truetransact.clientproxy.ProxyParameters;
import com.see.truetransact.ui.deposit.lien.DepositLienUI;
import com.see.truetransact.uivalidation.NumericValidation;
import com.see.truetransact.uivalidation.EmailValidation;
import com.see.truetransact.ui.customer.CheckCustomerIdUI;
import com.see.truetransact.uivalidation.CurrencyValidation;
import com.see.truetransact.uivalidation.ToDateValidation;
import com.see.truetransact.uivalidation.PincodeValidation_IN;
import com.see.truetransact.ui.common.authorize.AuthorizeUI;
import com.see.truetransact.ui.TrueTransactMain;
import com.see.truetransact.uicomponent.COptionPane;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.ui.common.powerofattorney.PowerOfAttorneyUI;
import com.see.truetransact.ui.common.viewall.ViewAll;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.Observer;
import java.util.Observable;
import org.apache.log4j.Logger;
import java.util.HashMap;
import java.lang.Integer;
import com.see.truetransact.ui.common.authorizedsignatory.AuthorizedSignatoryUI;
import com.see.truetransact.ui.common.authorizedsignatory.AuthorizedSignatoryOB;
import com.see.truetransact.ui.supporting.standinginstruction.StandingInstructionUI;
import com.see.truetransact.ui.transaction.cash.CashTransactionUI;//renewal time interest amount give to the customer....cash
import com.see.truetransact.ui.transaction.transfer.TransferUI;//renewal time interest amount give to the customer....transfer
import com.see.truetransact.ui.termloan.customerDetailsScreen.CustomerDetailsScreenUI;
import com.see.truetransact.ui.common.viewall.AuthorizeListUI;
import com.see.truetransact.ui.common.viewall.TableDialogUI;
import com.see.truetransact.clientutil.ttrintegration.TTIntegration;
import com.see.truetransact.ui.deposit.multipledeposit.MultipleNoOfDepositsAmountUI;
import com.see.truetransact.ui.common.transaction.TransactionUI;
import com.see.truetransact.ui.common.authorize.AuthorizeUI;
import com.see.truetransact.ui.common.authorize.AuthorizeUI;
import com.see.truetransact.ui.common.viewall.TextUI;
import com.see.truetransact.transferobject.common.transaction.TransactionTO;
import com.see.truetransact.ui.customer.IndividualCustUI;
import com.see.truetransact.ui.common.nominee.NomineeOB;
import com.see.truetransact.ui.common.authorize.AuthorizeUI;
import com.see.truetransact.ui.common.viewall.NewAuthorizeListUI;
import com.see.truetransact.ui.salaryrecovery.AuthorizeListCreditUI;
import com.see.truetransact.ui.salaryrecovery.AuthorizeListDebitUI;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import com.see.truetransact.ui.deposit.CommonMethods;

/**
 * import com.see.truetransact.ui.common.authorize.AuthorizeUI;
 *
 * @author K.R.Jayakrishnan
 */
public class MultipleTermDepositUI extends com.see.truetransact.uicomponent.CInternalFrame implements com.see.truetransact.uimandatory.UIMandatoryField, java.util.Observer {

    private final static Logger _log = Logger.getLogger(MultipleTermDepositUI.class);
    //cash Transaction screen.....
    //    private CashTransactionUI cashTrans = null;
    //    TermDepositRB objTermDepositRB = new TermDepositRB();
    java.util.ResourceBundle objTermDepositRB = java.util.ResourceBundle.getBundle("com.see.truetransact.ui.deposit.multipledeposit.MultipleTermDepositRB", ProxyParameters.LANGUAGE);
    private final String SCREEN = "TD";
    //    CommonRB objCommRB = new CommonRB();
    java.util.ResourceBundle objCommRB = java.util.ResourceBundle.getBundle("com.see.truetransact.ui.deposit.CommonRB", ProxyParameters.LANGUAGE);
    AuthorizedSignatoryUI authSignUI;
    PowerOfAttorneyUI poaUI;
    //    StandingInstructionUI standingInstructionUI;
    NomineeUI nomineeUi = new NomineeUI(SCREEN);
    final int AUTHORIZE = 2;
    private MultipleTermDepositOB observable;
    HashMap mandatoryMap;
    private boolean amt = true;
    private double period = 0;
    private int ok = 0;
    private int yes = 0;
    private int no = 1;
    private int cancel = 2;
    private int totalMonths = 12;
    private int totalDays = 365;
    private int daysInMonth = 31;
    private int moreDays = 32;
    private int perHalfYear = 2;
    private int perQuarterYear = 4;
    private int perMonth = 12;
    private int flagNw = 0;
    private double yr = 0;
    private double amountDeposit = 0.0;
    private double noofAccounts = 0.0;
    private double interest = 6;
    private int yearTobeAdded = 1900;
    private int monthTobeAdded = 1;
    private int retTxtBox = 0;
    private boolean nomineeDetailsTabSelected = false;
    private int ACTIONEDITDELETE = 0;
    private int maxShare;
    private int MAXIMUMSHARE = 100;
    int amountRange = 0;
    int standingInstTabSelectedRow = 0;
    boolean standingInstTabSelected = false;
    boolean isFilled = false;
    boolean fromActionEditHash = false;
    boolean selectedDepSubNoRow = false;
    boolean selectedDepSubNoRowRenewal = false;
    //--- To check whether the Message is already in the Queue.
    boolean enteredMsgPeriodMultiples = false;
    boolean enteredMsgAmtMultiples = false;
    boolean enteredMsgMinMaxAmt = false;
    boolean enteredMsgMinMaxPeriod = false;
    boolean interestYesNo = true;
    private int option = 0;
    private HashMap depProdDetails;
    private HashMap depProdRenewalDetails;
    private HashMap intMap = new HashMap();
    String strProdId;
    String strProductIdInRenew;
    String strAccntHead;
    String viewType = ClientConstants.VIEW_TYPE_CANCEL;
    final int DELETE = 1;
    //--- To find whether the deposit is a renewed one.
    String renewdDepNo = "";
    private double sbAmount = 0.0;
    private double oldAmount = 0.0;
    String VIEW_TYPE_AGENT_ID = "AGENT_ID";
    private String authroize = "AUTHORIZED";
    private String authorizeBy = "";
    private java.util.Date befDepDt = null;
    private java.util.Date aftDepDt = null;
    private boolean enable = false;
    private String lienStatus = null;
    private boolean isClosed = false;
    DepositLienUI depositLien = null;
    private double earlierAmt = 0.0;
    private boolean amtReduce = false;
    private String transSomeAmt = "";
    private double intAmtCash = 0.0;
    private HashMap renewalTransMap = new HashMap();
    private boolean flag = false;
    private String authorizeStatus = null;
    private boolean renewal = false;
    private TransferUI[] transferUI = new TransferUI[20];
    private CashTransactionUI[] cashTransUI = new CashTransactionUI[10];
    private boolean already = false;
    private boolean exists = false;
    private boolean periodChange = false;
    private boolean withInt = false;
    private boolean withOut = false;
    private boolean renewalEdit = false;
    private boolean addingAmt = false;
    private boolean addingSomeAmt = false;
    private double befAddingAddAmt = 0.0;
    private boolean renewalSubNo = false;
    private boolean periodFlag = false;
    private boolean SomeAmt = false;
    private boolean renewSave = false;
    private boolean cboflag = false;
    private boolean beyond15 = false;
    private boolean transbeyond = false;
    private boolean fixedValue = false;
    private boolean withoutinterest = false;
    private boolean rateFlag = false;
    private Date schemeIntroDt = null;
    private Date schemeCloseDt = null;
    private boolean renewalMousePress = false;
    private boolean renewalMousePressScreen = false;
    private boolean schemeFlag = false;
    private boolean renewalProd = false;
    private boolean newModeMouseClick = false;
    //    private boolean renewalSameNo = false;
    private boolean tranferInflag = false;
    private String depositNo = "";
    private boolean renewalEnable = false;
    private boolean renewalEnableDep = false;
    private boolean renewalDays = false;
    private boolean renewalMonths = false;
    private boolean renewalYears = false;
    private boolean renewaldownSave = false;
    private boolean renewalEditMode = false;
    private boolean continueOrNot = false;
    private boolean contProdId = false;
    private boolean extensiondownSave = false;
    private boolean doContinueOrNot = false;
    private boolean withoutvisitingScreen = false;
    private boolean firstClickedRenewalScreen = false;
    private boolean renewalMouseClick = false;
    private boolean renewalWithoutvisitingScreen = false;
    //    private boolean renewalEditMode = false;
    private boolean alreadyOpenedRecords = false;
    private boolean extensionDays = false;
    private boolean extensionMonths = false;
    private boolean extensionYears = false;
    private boolean extensionContinueOrNot = false;
    private boolean extensionWithoutvisitingScreen = false;
    private boolean extensionMousePress = false;
    private boolean extensionMousePressScreen = false;
    private boolean firstTimeClickingextensionScreen = false;
    private boolean extensionMouseClick = false;
    private boolean flPtWithoutPeriod = false;
    private Date currDt = null;
    StringBuffer msgStrB = new StringBuffer();
    double depoAmount = 0.0;
    private boolean finalChecking = false;
    private boolean transNew = true;
    private boolean doublingFlag = false;
    boolean fromAuthorizeUI = false;
    boolean fromCashierAuthorizeUI = false;
    boolean fromManagerAuthorizeUI = false;
    AuthorizeListUI authorizeListUI = null;
    AuthorizeListDebitUI ManagerauthorizeListUI=null;
    AuthorizeListCreditUI CashierauthorizeListUI=null;
    IndividualCustUI individualCustUI = null;
    private String forLTDpurpose = "";
    private boolean multipleDeposits = false;
    private double noOfDeposits = 0.0;
    private double depositCount = 0.0;
    private double depositAmt = 0.0;
    private double depositedAmt = 0.0;
    private int count = 1;
    private TransactionUI transactionUI = new TransactionUI();
    String interestRounding = "";
    private int rejectFlag = 0;
    String prodId="";
    String depInt="N";
    private List multipleDepositAcctNo;
    public static String CustomerId= "";
    private int doublingCount=2;
    NewAuthorizeListUI newauthorizeListUI = null;
    boolean fromNewAuthorizeUI = false;
    
    /**
     * Creates new form TermDepositCreation
     */
    public MultipleTermDepositUI() {
        initComponents();
        initStartup();
        transactionUI.setSourceScreen("MULTIPLE_TERM_DEPOSIT");
        transactionUI.setProdType();
        tabTermDeposit.remove(panTransferInDetails);
        tabTermDeposit.remove(panPresentPositionDetails);
        tabTermDeposit.remove(panStandingInstructionDetails);
        tabTermDeposit.remove(panRenewalInformation);
        tabTermDeposit.remove(panExtensionInformation);
        tabTermDeposit.remove(panTransaction);
        panRenewalInformation.setEnabled(false);
        panExtensionInformation.setEnabled(false);
        cboCalenderFreqDay.setVisible(false);
        lblCalenderFreqDate.setVisible(false);
        cboRenewalCalenderFreqDay.setVisible(false);
        lblRenewalCalenderFreqDate.setVisible(false);
        //        panPresentPositionDetails.setVisible(false);
        //        ClientUtil.enableDisable(panPresentPositionDetails, false);
        //        tabTermDeposit.add(authSignUI, "Authorized Signatory", 1);
        //        tabTermDeposit.add(nomineeUi,"Nominee", 2);
        //        tabTermDeposit.add(poaUI, "Power of Attorney", 3);
        nomineeUi.setBtnEnableDisable(false);
        tabTermDeposit.resetVisits();
        panStandingInstruction.setVisible(false);
        lblStandingInstruction.setVisible(false);
        panWeek.setVisible(false);
        txtWeek.setText("");
        //        chkMember.setVisible(true);
        lblMemberVal.setVisible(true);
        //        chkMember.setVisible(true);
//        cboMemberType.setVisible(false);
//        lblMemberType.setVisible(false);
        lblWithIntAutoRenewal.setVisible(false);
        panWithInterest.setEnabled(false);
        panWithInterest.setVisible(false);
        tdtCalenderFreqDate.setVisible(false);
        cboCalenderFreqDay.setVisible(false);
        txtExtensionTransTokenNo.setVisible(false);
        lblExtensionDepositTransTokenNo.setVisible(false);
        panExistingCustomer.setVisible(false);
        lblExistingCustomer.setVisible(false);
        txtExistingAcctNo.setVisible(false);
        lblExistingAcctNo.setVisible(false);
        //system.out.println("IN Constructor getSelectedBranch" + getSelectedBranchID());
        currDt = ClientUtil.getCurrentDate();
        restoreEnableDisableFltPt();
        panCustomerName.setVisible(false);
        btnDisplay.setEnabled(false);
    }

    private void initStartup() {
        setFieldNames();
        internationalize();
        authSignUI = new AuthorizedSignatoryUI(SCREEN);
        poaUI = new PowerOfAttorneyUI(SCREEN);
        setObservable();
        initComponentData();
        new MandatoryCheck().putMandatoryMarks(getClass().getName(), tabTermDeposit);
        setMaximumLength();
        observable.resetForm();
        poaUI.getPowerOfAttorneyOB().resetAllFieldsInPoA();
        authSignUI.getAuthorizedSignatoryOB().resetAllFieldsInAuthTab();
        ClientUtil.enableDisable(this, false);
        setBtnForTabs();
        setButtonEnableDisable();
        setMandatoryHashMap();
        authSignUI.setLblStatus(observable.getLblStatus());
        authSignUI.setAuthTabBtnEnableDisable(false);
        poaUI.setLblStatus(observable.getLblStatus());
        authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
        poaUI.setPoAToolBtnsEnableDisable(false);
//        btnDepSubNoAccDel.setVisible(false);
        poaUI.ttNotifyObservers();
        observable.setStatus();
        setHelpMessage();
        maxShare = MAXIMUMSHARE;
        lblTdsNo.setVisible(false);
        lblTdsDate.setVisible(false);
        txtCustomerId.setAllowAll(true);
        txtRenewalPrintedOption.setAllowAll(true);
        txtPrintedOption.setAllowAll(true);
        txtCustomerIdCr.setAllowAll(true);
        btnDelete.setVisible(false);
//        rdoOpeningMode_Extension.setVisible(false);
        txtEditDepositNo.setEnabled(true);
        panSalaryRecovery1.setVisible(false);

        rdoSalaryRecovery_Yes.setEnabled(true);
        rdoSalaryRecovery_No.setEnabled(true);
        txtpostageAmt.setValidation(new CurrencyValidation());
        txtRenewPostageAmt.setValidation(new CurrencyValidation());
        panIntpayable.setVisible(false);

    }

    /**
     * To disable the Buttons in the Screen
     */
    private void setBtnForTabs() {
        setBtnDepSubNo(false);
        setBtnJointAccnt(false);
    }

    /**
     * Auto Generated Method - setHelpMessage() This method shows tooltip help
     * for all the input fields available in the UI. It needs the Mandatory
     * Resource Bundle object. Help display Label name should be lblMsg.
     */
    public void setHelpMessage() {
        MultipleTermDepositMRB objMandatoryRB = new MultipleTermDepositMRB();
        txtRateOfInterest.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRateOfInterest"));
        tdtDateOfDeposit.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDateOfDeposit"));
        txtDepositAmount.setHelpMessage(lblMsg, objMandatoryRB.getString("txtDepositAmount"));
        txtPeriodOfDeposit_Years.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPeriodOfDeposit_Years"));
        txtPeriodOfDeposit_Months.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPeriodOfDeposit_Months"));
        txtPeriodOfDeposit_Days.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPeriodOfDeposit_Days"));
        cboInterestPaymentFrequency.setHelpMessage(lblMsg, objMandatoryRB.getString("cboInterestPaymentFrequency"));
        cboInterestPaymentMode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboInterestPaymentMode"));
        txtPeriodicInterestAmount.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPeriodicInterestAmount"));
        txtTotalInterestAmount.setHelpMessage(lblMsg, objMandatoryRB.getString("txtTotalInterestAmount"));
        txtMaturityAmount.setHelpMessage(lblMsg, objMandatoryRB.getString("txtMaturityAmount"));
        //        cboInstallmentAmount.setHelpMessage(lblMsg, objMandatoryRB.getString("cboInstallmentAmount"));
        //        cboPaymentType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboPaymentType"));
        //        tdtPaymentDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtPaymentDate"));
        cboProductId.setHelpMessage(lblMsg, objMandatoryRB.getString("cboProductId"));
        //        rdoOpeningMode_Normal.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoOpeningMode_Normal"));
        txtCustomerId.setHelpMessage(lblMsg, objMandatoryRB.getString("txtCustomerId"));
        cboConstitution.setHelpMessage(lblMsg, objMandatoryRB.getString("cboConstitution"));
        cboAddressType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboAddressType"));
        cboSettlementMode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboSettlementMode"));
        cboCategory.setHelpMessage(lblMsg, objMandatoryRB.getString("cboCategory"));
//        cboMemberType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboMemberType"));
        txtDepsoitNo.setHelpMessage(lblMsg, objMandatoryRB.getString("txtDepsoitNo"));
        txtRemarks.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRemarks"));
        txtPanNumber.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPanNumber"));
        chkAuthorizedSignatory.setHelpMessage(lblMsg, objMandatoryRB.getString("chkAuthorizedSignatory"));
        chkTaxDeductions.setHelpMessage(lblMsg, objMandatoryRB.getString("chkTaxDeductions"));
        chkNomineeDetails.setHelpMessage(lblMsg, objMandatoryRB.getString("chkNomineeDetails"));
        chkPowerOfAttorney.setHelpMessage(lblMsg, objMandatoryRB.getString("chkPowerOfAttorney"));
        //        chkMember.setHelpMessage(lblMsg, objMandatoryRB.getString("chkMember"));
        chk15hDeclarations.setHelpMessage(lblMsg, objMandatoryRB.getString("chk15hDeclarations"));
        tdtOriginalDateOfDeposit.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtOriginalDateOfDeposit"));
        txtOriginalAccountNumber.setHelpMessage(lblMsg, objMandatoryRB.getString("txtOriginalAccountNumber"));
        txtTransferingBranchCode.setHelpMessage(lblMsg, objMandatoryRB.getString("txtTransferingBranchCode"));
        txtPrintedNoOfTheFdr.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPrintedNoOfTheFdr"));
        txtInterBranchTransferNo.setHelpMessage(lblMsg, objMandatoryRB.getString("txtInterBranchTransferNo"));
        txtTransferingAmount.setHelpMessage(lblMsg, objMandatoryRB.getString("txtTransferingAmount"));
        tdtDateOfTransfer.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDateOfTransfer"));
        tdtLastInterestCalculatedDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtLastInterestCalculatedDate"));
        txtInterestProvidedAmount.setHelpMessage(lblMsg, objMandatoryRB.getString("txtInterestProvidedAmount"));
        txtInterestPaid.setHelpMessage(lblMsg, objMandatoryRB.getString("txtInterestPaid"));
        txtTotalNumberOfInstallments.setHelpMessage(lblMsg, objMandatoryRB.getString("txtTotalNumberOfInstallments"));
        tdtLastInstallmentReceivedDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtLastInstallmentReceivedDate"));
        tdtTdsCollectedUpto.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtTdsCollectedUpto"));
        txtLastTdsCollected.setHelpMessage(lblMsg, objMandatoryRB.getString("txtLastTdsCollected"));
        txtTotalInstallmentReceived.setHelpMessage(lblMsg, objMandatoryRB.getString("txtTotalInstallmentReceived"));
        cboProdType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboProdType"));
        cboProdId.setHelpMessage(lblMsg, objMandatoryRB.getString("cboProdId"));
        cboRenewalDepositProdId.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalDepositProdId"));
        cboRenewalDepositCategory.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalDepositCategory"));
        txtRenewalDepTransAmtValue.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRenewalDepTransAmtValue"));
        cboRenewalDepTransMode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalDepTransMode"));
        cboRenewalDepTransProdType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalDepTransProdType"));
        cboRenewalDepTransProdId.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalDepTransProdId"));
        btnRenewalDepCustomerIdFileOpenCr.setHelpMessage(lblMsg, objMandatoryRB.getString("btnRenewalDepCustomerIdFileOpenCr"));
        txtRenewalDepTransTokenNo.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRenewalDepTransTokenNo"));
        txtRenewalIntAmtValue.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRenewalIntAmtValue"));
        //        txtExtensionTransAmtValue.setHelpMessage(lblMsg,objMandatoryRB.getString("cboExtensionDepositProdId"));
        cboRenewalInterestTransMode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalInterestTransMode"));
        cboRenewalInterestTransProdType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalInterestTransProdType"));
        cboRenewalInterestTransProdId.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalInterestTransProdId"));
        btnRenewalIntCustomerIdFileOpenCr.setHelpMessage(lblMsg, objMandatoryRB.getString("btnRenewalIntCustomerIdFileOpenCr"));
        txtRenewalIntTokenNoVal.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRenewalIntTokenNoVal"));
        txtRenewalPeriodOfDeposit_Years.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRenewalPeriodOfDeposit_Years"));
        txtRenewalPeriodOfDeposit_Months.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRenewalPeriodOfDeposit_Months"));
        txtRenewalPeriodOfDeposit_Days.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRenewalPeriodOfDeposit_Days"));
        cboRenewalInterestPaymentFrequency.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalInterestPaymentFrequency"));
        cboRenewalInterestPaymentMode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalInterestPaymentMode"));
        cboRenewalProdType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalProdType"));
        cboRenewalProdId.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalProdId"));
        btnRenewalCustomerIdFileOpenCr.setHelpMessage(lblMsg, objMandatoryRB.getString("btnRenewalCustomerIdFileOpenCr"));
        txtRenewalPrintedOption.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRenewalPrintedOption"));
        cboRenewalCalenderFreqDay.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRenewalCalenderFreqDay"));
    }

    private void setObservable() {
        try {
            observable = MultipleTermDepositOB.getInstance();
            observable.addObserver(this);
            observable.setPowerOfAttorneyOB(poaUI.getPowerOfAttorneyOB());
            observable.setAuthorizedSignatoryOB(authSignUI.getAuthorizedSignatoryOB());
            observable.setAuthorizedSignatoryInstructionOB(authSignUI.getAuthorizedSignatoryInstructionOB());
            observable.setTransactionOB(transactionUI.getTransactionOB());
        } catch (Exception E) {
            E.printStackTrace();
        }
    }

    /**
     * Sets the ComboBoxModel for all the Combos
     */
    private void initComponentData() {
        cboInterestPaymentMode.setModel(observable.getCbmInterestPaymentMode());
        cboInterestPaymentFrequency.setModel(observable.getCbmInterestPaymentFrequency());
        cboSettlementMode.setModel(observable.getCbmSettlementMode());
        cboConstitution.setModel(observable.getCbmConstitution());
        cboCategory.setModel(observable.getCbmCategory());
        cboProductId.setModel(observable.getCbmProductId());
        cboProdType.setModel(observable.getCbmProdType());
//        cboMemberType.setModel(observable.getCbmMemberType());
        cboCalenderFreqDay.setModel(observable.getCbmCalenderFreqDay());

        cboRenewalInterestPaymentFrequency.setModel(observable.getCbmRenewalInterestPaymentFrequency());
        cboRenewalInterestPaymentMode.setModel(observable.getCbmRenewalInterestPaymentMode());
        cboRenewalInterestTransMode.setModel(observable.getCbmRenewalInterestTransMode());
        cboRenewalDepTransMode.setModel(observable.getCbmRenewalDepTransMode());
        cboRenewalProdType.setModel(observable.getCbmRenewalProdType());
        cboRenewalDepTransProdType.setModel(observable.getCbmRenewalDepTransProdType());
        cboRenewalInterestTransProdType.setModel(observable.getCbmRenewalInterestTransProdType());
        cboRenewalDepositProdId.setModel(observable.getCbmRenewalDepositProdId());
        cboRenewalDepositCategory.setModel(observable.getCbmRenewalDepositCategory());
        cboRenewalCalenderFreqDay.setModel(observable.getCbmRenewalCalenderFreqDay());

        cboExtensionInterestPaymentFrequency.setModel(observable.getCbmExtensionPaymentFrequency());
        cboExtensionInterestPaymentMode.setModel(observable.getCbmExtensionPaymentMode());
        cboExtensionTransMode.setModel(observable.getCbmExtensionTransMode());
        cboExtensionProdType.setModel(observable.getCbmExtensionPaymentProdType());
        cboExtensionTransProdType.setModel(observable.getCbmExtensionTransProdType());
        cboExtensionDepositProdId.setModel(observable.getCbmExtensionDepositProdId());
        cboExtensionDepositCategory.setModel(observable.getCbmExtensionDepositCategory());
        cboExtensionCalenderFreqDay.setModel(observable.getCbmExtensionCalenderFreqDay());
        //Added By Suresh
        cboAddressType.setModel(observable.getCbmAddressType());
    }

    /**
     * To set the Maximum length for the Textfields
     */
    private void setMaximumLength() {
        txtEditDepositNo.setAllowAll(true);
        txtDepsoitNo.setAllowAll(true);
        txtDepositAmount.setMaxLength(16);
        txtDepositAmount.setValidation(new CurrencyValidation());
        txtPanNumber.setMaxLength(16);
        txtPanNumber.setAllowAll(true);
        txtRemarks.setMaxLength(256);
        txtRateOfInterest.setValidation(new NumericValidation(3, 3));
        txtMaturityAmount.setValidation(new CurrencyValidation(14, 2));
        txtTotalInterestAmount.setValidation(new CurrencyValidation(14, 2));
        txtPeriodicInterestAmount.setValidation(new CurrencyValidation(14, 2));
        txtTransferingBranchCode.setMaxLength(16);
        txtOriginalAccountNumber.setMaxLength(16);
        txtPrintedNoOfTheFdr.setMaxLength(4);
        txtPrintedNoOfTheFdr.setValidation(new NumericValidation());
        txtInterBranchTransferNo.setMaxLength(16);
        txtTransferingAmount.setMaxLength(16);
        txtTransferingAmount.setValidation(new CurrencyValidation());
        txtInterestProvidedAmount.setMaxLength(16);
        txtInterestProvidedAmount.setValidation(new CurrencyValidation());
        txtLastTdsCollected.setMaxLength(16);
        txtLastTdsCollected.setValidation(new CurrencyValidation());
        txtInterestPaid.setMaxLength(16);
        txtInterestPaid.setValidation(new CurrencyValidation());
        txtTotalNumberOfInstallments.setMaxLength(4);
        txtTotalNumberOfInstallments.setValidation(new NumericValidation());
        txtTotalInstallmentReceived.setMaxLength(16);
        txtTotalInstallmentReceived.setValidation(new NumericValidation());
        txtPeriodOfDeposit_Months.setMaxLength(3);
        txtPeriodOfDeposit_Months.setValidation(new NumericValidation());
        txtPeriodOfDeposit_Days.setMaxLength(4);
        txtPeriodOfDeposit_Days.setValidation(new NumericValidation());
        txtPeriodOfDeposit_Years.setMaxLength(2);
        txtPeriodOfDeposit_Years.setValidation(new NumericValidation());
        //renewal...
        txtRenewalDepTransAmtValue.setMaxLength(16);
        txtRenewalDepTransAmtValue.setValidation(new CurrencyValidation());
        txtRenewalIntAmtValue.setMaxLength(16);
        txtRenewalIntAmtValue.setValidation(new CurrencyValidation());
        txtRenewalDepositAmount.setMaxLength(16);
        txtRenewalDepositAmount.setValidation(new CurrencyValidation());
        txtRenewalMaturityAmount.setMaxLength(16);
        txtRenewalMaturityAmount.setValidation(new CurrencyValidation());
        txtRenewalRateOfInterest.setValidation(new NumericValidation(3, 3));
        txtRenewalMaturityAmount.setValidation(new CurrencyValidation(14, 2));
        txtRenewalTotalInterestAmount.setValidation(new CurrencyValidation(14, 2));
        txtRenewalPeriodicInterestAmount.setValidation(new CurrencyValidation(14, 2));
        txtRenewalPeriodOfDeposit_Months.setMaxLength(3);
        txtRenewalPeriodOfDeposit_Months.setValidation(new NumericValidation());
        txtRenewalPeriodOfDeposit_Days.setMaxLength(4);
        txtRenewalPeriodOfDeposit_Days.setValidation(new NumericValidation());
        txtRenewalPeriodOfDeposit_Years.setMaxLength(2);
        txtRenewalPeriodOfDeposit_Years.setValidation(new NumericValidation());

        //extension
        txtExtensionDepTransAmtValue.setMaxLength(16);
        txtExtensionDepTransAmtValue.setValidation(new CurrencyValidation());
        txtExtensionTransAmtValue.setMaxLength(16);
        txtExtensionTransAmtValue.setValidation(new CurrencyValidation());
        txtExtensionDepositAmount.setMaxLength(16);
        txtExtensionDepositAmount.setValidation(new CurrencyValidation());
        txtExtensionMaturityAmount.setMaxLength(16);
        txtExtensionMaturityAmount.setValidation(new CurrencyValidation());
        txtExtensionRateOfInterest.setValidation(new NumericValidation(3, 3));
        txtExtensionTotalInterestAmount.setValidation(new CurrencyValidation(14, 2));
        txtExtensionPeriodicInterestAmount.setValidation(new CurrencyValidation(14, 2));
        txtExtensionPeriodOfDeposit_Months.setMaxLength(3);
        txtExtensionPeriodOfDeposit_Months.setValidation(new NumericValidation());
        txtExtensionPeriodOfDeposit_Days.setMaxLength(4);
        txtExtensionPeriodOfDeposit_Days.setValidation(new NumericValidation());
        txtExtensionPeriodOfDeposit_Years.setMaxLength(2);
        txtExtensionPeriodOfDeposit_Years.setValidation(new NumericValidation());
        txtMobileNo.setValidation(new NumericValidation());
        txtMobileNo.setMaxLength(10);
    }

    /**
     * To set the Mandatory Fields
     */
    public void setMandatoryHashMap() {
        mandatoryMap = new HashMap();
        mandatoryMap.put("tdtMaturityDate", new Boolean(true));
        mandatoryMap.put("txtRateOfInterest", new Boolean(false));
        mandatoryMap.put("tdtDateOfDeposit", new Boolean(true));
        mandatoryMap.put("txtDepositAmount", new Boolean(false));
        mandatoryMap.put("txtPeriodOfDeposit_Years", new Boolean(true));
        mandatoryMap.put("txtPeriodOfDeposit_Months", new Boolean(true));
        mandatoryMap.put("txtPeriodOfDeposit_Days", new Boolean(true));
        mandatoryMap.put("cboInstallmentAmount", new Boolean(true));
        mandatoryMap.put("cboInterestPaymentFrequency", new Boolean(true));
        mandatoryMap.put("cboInterestPaymentMode", new Boolean(true));
        mandatoryMap.put("txtPeriodicInterestAmount", new Boolean(false));
        mandatoryMap.put("txtTotalInterestAmount", new Boolean(true));
        mandatoryMap.put("txtMaturityAmount", new Boolean(true));
        mandatoryMap.put("cboPaymentType", new Boolean(true));
        mandatoryMap.put("tdtPaymentDate", new Boolean(false));
        mandatoryMap.put("cboProductId", new Boolean(true));
        mandatoryMap.put("cboProdId", new Boolean(true));
        mandatoryMap.put("cboProdType", new Boolean(true));
        mandatoryMap.put("rdoOpeningMode_Multiple", new Boolean(true));
        //        mandatoryMap.put("rdoOpeningMode_Normal", new Boolean(false));
        mandatoryMap.put("txtCustomerId", new Boolean(true));
        mandatoryMap.put("cboConstitution", new Boolean(true));
        mandatoryMap.put("cboAddressType", new Boolean(true));
        mandatoryMap.put("cboSettlementMode", new Boolean(true));
        mandatoryMap.put("cboCategory", new Boolean(true));
        mandatoryMap.put("cboMemberType", new Boolean(true));
        mandatoryMap.put("txtDepsoitNo", new Boolean(true));
        mandatoryMap.put("txtRemarks", new Boolean(false));
        mandatoryMap.put("txtPanNumber", new Boolean(false));
        mandatoryMap.put("chkAuthorizedSignatory", new Boolean(true));
        mandatoryMap.put("chkTaxDeductions", new Boolean(true));
        mandatoryMap.put("chkNomineeDetails", new Boolean(true));
        mandatoryMap.put("chkPowerOfAttorney", new Boolean(true));
        //        mandatoryMap.put("chkMember", new Boolean(true));
        mandatoryMap.put("chkStandingInstructions", new Boolean(true));
        mandatoryMap.put("chk15hDeclarations", new Boolean(true));
        mandatoryMap.put("tdtOriginalDateOfDeposit", new Boolean(true));
        mandatoryMap.put("txtOriginalAccountNumber", new Boolean(true));
        mandatoryMap.put("txtTransferingBranchCode", new Boolean(true));
        mandatoryMap.put("txtPrintedNoOfTheFdr", new Boolean(false));
        mandatoryMap.put("txtInterBranchTransferNo", new Boolean(true));
        mandatoryMap.put("txtTransferingAmount", new Boolean(true));
        mandatoryMap.put("tdtDateOfTransfer", new Boolean(true));
        mandatoryMap.put("tdtLastInterestCalculatedDate", new Boolean(true));
        mandatoryMap.put("txtInterestProvidedAmount", new Boolean(true));
        mandatoryMap.put("txtInterestPaid", new Boolean(true));
        mandatoryMap.put("txtTotalNumberOfInstallments", new Boolean(true));
        mandatoryMap.put("tdtLastInstallmentReceivedDate", new Boolean(true));
        mandatoryMap.put("tdtTdsCollectedUpto", new Boolean(true));
        mandatoryMap.put("txtLastTdsCollected", new Boolean(true));
        mandatoryMap.put("txtTotalInstallmentReceived", new Boolean(true));
        //        mandatoryMap.put("cboIntroducerType", new Boolean(false));
        //        mandatoryMap.put("txtIntroducerDetailsAccountNumber", new Boolean(true));
        //        mandatoryMap.put("rdoIntroReqd_Yes", new Boolean(true));
        //        mandatoryMap.put("txtIntroName", new Boolean(true));
        mandatoryMap.put("cboDocType", new Boolean(true));
        mandatoryMap.put("txtDocNo", new Boolean(true));
        mandatoryMap.put("tdtIssDt", new Boolean(true));
        mandatoryMap.put("tdtExpDt", new Boolean(true));
        mandatoryMap.put("txtIssBy", new Boolean(true));
        mandatoryMap.put("cboIdType", new Boolean(true));
        mandatoryMap.put("txtNo", new Boolean(true));
        mandatoryMap.put("txtIssAuth", new Boolean(true));
        mandatoryMap.put("txtBankName", new Boolean(true));
        mandatoryMap.put("txtBranchName", new Boolean(true));
        mandatoryMap.put("txtAccNo", new Boolean(true));
        mandatoryMap.put("txtName", new Boolean(true));
        mandatoryMap.put("txtOtherArea", new Boolean(true));
        mandatoryMap.put("cboOtherCity", new Boolean(true));
        mandatoryMap.put("txtDesig", new Boolean(true));
        mandatoryMap.put("txtOtherStreet", new Boolean(true));
        mandatoryMap.put("cboOtherState", new Boolean(true));
        mandatoryMap.put("txtOtherPin", new Boolean(true));
        mandatoryMap.put("cboOtherCountry", new Boolean(true));
        mandatoryMap.put("txtOtherAreaCode", new Boolean(true));
        mandatoryMap.put("txtOtherPhone", new Boolean(true));
        mandatoryMap.put("txtAuthSignNoOfAuthSign", new Boolean(true));
        mandatoryMap.put("txtAuthSignName", new Boolean(true));
        mandatoryMap.put("txtAuthSignDesignation", new Boolean(true));
        mandatoryMap.put("cboAuthSignAddForComm", new Boolean(true));
        mandatoryMap.put("txtAuthSignStreet", new Boolean(true));
        mandatoryMap.put("txtAuthSignArea", new Boolean(true));
        mandatoryMap.put("cboAuthSignCity", new Boolean(true));
        mandatoryMap.put("cboAuthSignState", new Boolean(true));
        mandatoryMap.put("cboAuthSignCountry", new Boolean(true));
        mandatoryMap.put("txtAuthSignPincode", new Boolean(true));
        mandatoryMap.put("txtAuthSignHomePhone", new Boolean(true));
        mandatoryMap.put("txtAuthSignBusinessPhone", new Boolean(true));
        mandatoryMap.put("txtAuthSignHomeFax", new Boolean(true));
        mandatoryMap.put("txtAuthSignBusinessFax", new Boolean(true));
        mandatoryMap.put("txtAuthSignPager", new Boolean(true));
        mandatoryMap.put("txtAuthSignMobile", new Boolean(true));
        mandatoryMap.put("txtAuthSignEmailId", new Boolean(true));
        mandatoryMap.put("txtAuthSignLimits", new Boolean(true));
        mandatoryMap.put("txtAuthSignHomeAreaCode", new Boolean(true));
        mandatoryMap.put("txtNomDetNomSlNo", new Boolean(true));
        mandatoryMap.put("txtNomDetNomName", new Boolean(true));
        mandatoryMap.put("cboNomDetAddType", new Boolean(true));
        mandatoryMap.put("cboNomDetCity", new Boolean(true));
        mandatoryMap.put("txtNomDetArea", new Boolean(true));
        mandatoryMap.put("txtNomDetStreet", new Boolean(true));
        mandatoryMap.put("cboNomDetRelationship", new Boolean(true));
        mandatoryMap.put("cboNominatedBy", new Boolean(true));
        mandatoryMap.put("cboNomDetState", new Boolean(true));
        mandatoryMap.put("cboNomDetCountry", new Boolean(true));
        mandatoryMap.put("txtNomDetPhone", new Boolean(true));
        mandatoryMap.put("rdoNomDetStatus_Major", new Boolean(true));
        mandatoryMap.put("txtNomDetShare", new Boolean(true));
        mandatoryMap.put("txtNomDetPincode", new Boolean(true));
        mandatoryMap.put("txtNomDetAreaCode", new Boolean(true));
        mandatoryMap.put("tdtNomDetMinDOB", new Boolean(true));
        mandatoryMap.put("txtNomDetMinGdName", new Boolean(true));
        mandatoryMap.put("cboNomDetMinGdType", new Boolean(true));
        mandatoryMap.put("txtNomDetMinStreet", new Boolean(true));
        mandatoryMap.put("txtNomDetMinArea", new Boolean(true));
        mandatoryMap.put("cboNomDetMinCity", new Boolean(true));
        mandatoryMap.put("cboNomDetMinState", new Boolean(true));
        mandatoryMap.put("cboNomDetMinCountry", new Boolean(true));
        mandatoryMap.put("txtNomDetMinPhone", new Boolean(true));
        mandatoryMap.put("txtNomDetMinAreaCode", new Boolean(true));
        mandatoryMap.put("txtNomDetMinPincode", new Boolean(true));
        mandatoryMap.put("cboNomDetMinAddType", new Boolean(true));
        mandatoryMap.put("cboCredAccDetProductId", new Boolean(true));
        mandatoryMap.put("txtCredAccDetDepositNo", new Boolean(true));
        mandatoryMap.put("txtCredAccDetAmt", new Boolean(true));
        mandatoryMap.put("txtCredAccDetParticulars", new Boolean(true));
        mandatoryMap.put("txtCredAccDetAccNo", new Boolean(true));
        mandatoryMap.put("txtDebAccDetAmt", new Boolean(true));
        mandatoryMap.put("txtDebAccDetParticulars", new Boolean(true));
        mandatoryMap.put("txtPowOfAttPoAHoldName", new Boolean(true));
        mandatoryMap.put("cboPowOfAttAddType", new Boolean(true));
        mandatoryMap.put("txtPowOfAttStreet", new Boolean(true));
        mandatoryMap.put("txtPowOfAttArea", new Boolean(true));
        mandatoryMap.put("cboPowOfAttState", new Boolean(true));
        mandatoryMap.put("cboPowOfAttCity", new Boolean(true));
        mandatoryMap.put("cboPoaCustomerName", new Boolean(true));
        mandatoryMap.put("cboOnBehalfOf", new Boolean(true));
        mandatoryMap.put("tdtPowOfAttPeriodFrom", new Boolean(true));
        mandatoryMap.put("txtPowOfAttRemarks", new Boolean(true));
        mandatoryMap.put("txtPowOfAttPhone", new Boolean(true));
        mandatoryMap.put("cboPowOfAttCountry", new Boolean(true));
        mandatoryMap.put("tdtPowOfAttPeriodTo", new Boolean(true));
        mandatoryMap.put("txtPoAAreaCode", new Boolean(true));
        mandatoryMap.put("txtPowOfAttPincode", new Boolean(true));
        mandatoryMap.put("txtPowOfAttPoASlNo", new Boolean(true));
        mandatoryMap.put("txtAgentId", new Boolean(false));
        mandatoryMap.put("tdtCalenderFreqDate", new Boolean(true));
    }

    /**
     * To get the Mandatory Fields
     */
    public HashMap getMandatoryHashMap() {
        return mandatoryMap;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        rdgOpeningMode = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgDeathClaim = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgAutoRenewal = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgWithIntRenewal = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgMatAlertReport = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgStandingInstruciton = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgCalenderFreq = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgRenewalWithdrawing = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgRenewalAdding = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgRenewalInterest = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgRenewalCalenderFreq = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgExtensionCalenderFreq = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgExtensionInterest = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgExtensionAdding = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgExtensionWithdrawing = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgRenewalAutoRenewal = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgRenewalWithIntRenewal = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgRenewalMatAlertReport = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgExtensionMatAlertReport = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgExtensionWithIntRenewal = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgExtensionAutoRenewal = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgSalaryRecovery = new com.see.truetransact.uicomponent.CButtonGroup();
        rdgLock = new com.see.truetransact.uicomponent.CButtonGroup();
        panTermDeposit = new com.see.truetransact.uicomponent.CPanel();
        tabTermDeposit = new com.see.truetransact.uicomponent.CTabbedPane();
        panAccountInformation = new com.see.truetransact.uicomponent.CPanel();
        panDepositDetails = new com.see.truetransact.uicomponent.CPanel();
        panInput = new com.see.truetransact.uicomponent.CPanel();
        panMaturityDt = new com.see.truetransact.uicomponent.CPanel();
        lblMaturityDate = new com.see.truetransact.uicomponent.CLabel();
        tdtMaturityDate = new com.see.truetransact.uicomponent.CDateField();
        txtRateOfInterest = new com.see.truetransact.uicomponent.CTextField();
        lblRateOfInterest = new com.see.truetransact.uicomponent.CLabel();
        lblDepositSubNo = new com.see.truetransact.uicomponent.CLabel();
        lblValDepositSubNo = new com.see.truetransact.uicomponent.CLabel();
        lblDateOfDeposit = new com.see.truetransact.uicomponent.CLabel();
        tdtDateOfDeposit = new com.see.truetransact.uicomponent.CDateField();
        lblDepositAmount = new com.see.truetransact.uicomponent.CLabel();
        txtDepositAmount = new com.see.truetransact.uicomponent.CTextField();
        panPeriodOfDeposit = new com.see.truetransact.uicomponent.CPanel();
        txtPeriodOfDeposit_Years = new com.see.truetransact.uicomponent.CTextField();
        lblPeriod_Years = new com.see.truetransact.uicomponent.CLabel();
        txtPeriodOfDeposit_Months = new com.see.truetransact.uicomponent.CTextField();
        lblPeriod_Months = new com.see.truetransact.uicomponent.CLabel();
        txtPeriodOfDeposit_Days = new com.see.truetransact.uicomponent.CTextField();
        lblPeriod_Days = new com.see.truetransact.uicomponent.CLabel();
        lblPeriodOfDeposit = new com.see.truetransact.uicomponent.CLabel();
        cboInterestPaymentFrequency = new com.see.truetransact.uicomponent.CComboBox();
        lblInterestPaymentFrequency = new com.see.truetransact.uicomponent.CLabel();
        txtpostageAmt = new com.see.truetransact.uicomponent.CTextField();
        lblPostageAmt = new com.see.truetransact.uicomponent.CLabel();
        panWeek = new com.see.truetransact.uicomponent.CPanel();
        lblWeek = new com.see.truetransact.uicomponent.CLabel();
        txtWeek = new com.see.truetransact.uicomponent.CTextField();
        panDepositDt = new com.see.truetransact.uicomponent.CPanel();
        txtPeriodicInterestAmount = new com.see.truetransact.uicomponent.CTextField();
        lblPeriodicInterestAmount = new com.see.truetransact.uicomponent.CLabel();
        lblTotalInterestAmount = new com.see.truetransact.uicomponent.CLabel();
        txtTotalInterestAmount = new com.see.truetransact.uicomponent.CTextField();
        txtMaturityAmount = new com.see.truetransact.uicomponent.CTextField();
        lblMaturityAmount = new com.see.truetransact.uicomponent.CLabel();
        panInterestCredit = new com.see.truetransact.uicomponent.CPanel();
        lblProductType = new com.see.truetransact.uicomponent.CLabel();
        cboProdType = new com.see.truetransact.uicomponent.CComboBox();
        lblProdId = new com.see.truetransact.uicomponent.CLabel();
        cboProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblAccountNo = new com.see.truetransact.uicomponent.CLabel();
        lblCustomerNameCr = new com.see.truetransact.uicomponent.CLabel();
        panCustomerNO = new com.see.truetransact.uicomponent.CPanel();
        txtCustomerIdCr = new com.see.truetransact.uicomponent.CTextField();
        btnCustomerIdFileOpenCr = new com.see.truetransact.uicomponent.CButton();
        lblCustomerNameCrValue = new com.see.truetransact.uicomponent.CLabel();
        cboInterestPaymentMode = new com.see.truetransact.uicomponent.CComboBox();
        lblInterestPaymentMode = new com.see.truetransact.uicomponent.CLabel();
        panFreqency = new com.see.truetransact.uicomponent.CPanel();
        panCalenderFreq = new com.see.truetransact.uicomponent.CPanel();
        rdoCalender_Freq_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoCalender_Freq_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblCalenderFreq = new com.see.truetransact.uicomponent.CLabel();
        tdtCalenderFreqDate = new com.see.truetransact.uicomponent.CDateField();
        lblCalenderFreqDate = new com.see.truetransact.uicomponent.CLabel();
        txtPrintedOption = new com.see.truetransact.uicomponent.CTextField();
        lblPrintedOption = new com.see.truetransact.uicomponent.CLabel();
        cboCalenderFreqDay = new com.see.truetransact.uicomponent.CComboBox();
        txtReferenceNo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        panSalaryRecovery1 = new com.see.truetransact.uicomponent.CPanel();
        lblSalaryRecovery = new com.see.truetransact.uicomponent.CLabel();
        panSalaryRecovery = new com.see.truetransact.uicomponent.CPanel();
        rdoSalaryRecovery_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoSalaryRecovery_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblLockStatus1 = new com.see.truetransact.uicomponent.CLabel();
        lblLockStatus = new com.see.truetransact.uicomponent.CLabel();
        panAccInf = new com.see.truetransact.uicomponent.CPanel();
        panAccountInformationLeftPanel = new com.see.truetransact.uicomponent.CPanel();
        panOpenMode = new com.see.truetransact.uicomponent.CPanel();
        cboProductId = new com.see.truetransact.uicomponent.CComboBox();
        lblCustomerId = new com.see.truetransact.uicomponent.CLabel();
        lblProductId = new com.see.truetransact.uicomponent.CLabel();
        panCustomerId = new com.see.truetransact.uicomponent.CPanel();
        txtCustomerId = new com.see.truetransact.uicomponent.CTextField();
        btnCustomerIdFileOpen = new com.see.truetransact.uicomponent.CButton();
        lblDepositNo = new com.see.truetransact.uicomponent.CLabel();
        cboConstitution = new com.see.truetransact.uicomponent.CComboBox();
        lblConstitution = new com.see.truetransact.uicomponent.CLabel();
        cboSettlementMode = new com.see.truetransact.uicomponent.CComboBox();
        lblSettlementMode = new com.see.truetransact.uicomponent.CLabel();
        lblCategory = new com.see.truetransact.uicomponent.CLabel();
        cboCategory = new com.see.truetransact.uicomponent.CComboBox();
        lblProdDesc = new com.see.truetransact.uicomponent.CLabel();
        lblProductDescription = new com.see.truetransact.uicomponent.CLabel();
        lblRenewDep = new com.see.truetransact.uicomponent.CLabel();
        lblValRenewDep = new com.see.truetransact.uicomponent.CLabel();
        lblAddressType = new com.see.truetransact.uicomponent.CLabel();
        panStandingInstruction = new com.see.truetransact.uicomponent.CPanel();
        rdoStandingInstruction_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoStandingInstruction_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblStandingInstruction = new com.see.truetransact.uicomponent.CLabel();
        txtExistingAcctNo = new com.see.truetransact.uicomponent.CTextField();
        lblExistingAcctNo = new com.see.truetransact.uicomponent.CLabel();
        lblExistingCustomer = new com.see.truetransact.uicomponent.CLabel();
        panExistingCustomer = new com.see.truetransact.uicomponent.CPanel();
        rdoExistingCustomer_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoExistingCustomer_No = new com.see.truetransact.uicomponent.CRadioButton();
        cboAddressType = new com.see.truetransact.uicomponent.CComboBox();
        btnAgentIdFileOpen1 = new com.see.truetransact.uicomponent.CButton();
        cPanel1 = new com.see.truetransact.uicomponent.CPanel();
        btnDepositNo = new com.see.truetransact.uicomponent.CButton();
        txtDepsoitNo = new com.see.truetransact.uicomponent.CTextField();
        panCategory = new com.see.truetransact.uicomponent.CPanel();
        lblRemarks = new com.see.truetransact.uicomponent.CLabel();
        txtRemarks = new com.see.truetransact.uicomponent.CTextField();
        txtPanNumber = new com.see.truetransact.uicomponent.CTextField();
        lblPanNumber = new com.see.truetransact.uicomponent.CLabel();
        lblNomineeDetails = new com.see.truetransact.uicomponent.CLabel();
        chkAuthorizedSignatory = new com.see.truetransact.uicomponent.CCheckBox();
        lblTaxDeductions = new com.see.truetransact.uicomponent.CLabel();
        chkTaxDeductions = new com.see.truetransact.uicomponent.CCheckBox();
        chkNomineeDetails = new com.see.truetransact.uicomponent.CCheckBox();
        lblAuthorizedSignatory = new com.see.truetransact.uicomponent.CLabel();
        chk15hDeclarations = new com.see.truetransact.uicomponent.CCheckBox();
        lbl15hDeclarations = new com.see.truetransact.uicomponent.CLabel();
        lblAgentId = new com.see.truetransact.uicomponent.CLabel();
        panAgentId = new com.see.truetransact.uicomponent.CPanel();
        txtAgentId = new com.see.truetransact.uicomponent.CTextField();
        btnAgentIdFileOpen = new com.see.truetransact.uicomponent.CButton();
        lblAgentName = new com.see.truetransact.uicomponent.CLabel();
        lblValAgentname = new com.see.truetransact.uicomponent.CLabel();
        lblMember = new com.see.truetransact.uicomponent.CLabel();
        lblPowerOfAttorney = new com.see.truetransact.uicomponent.CLabel();
        chkPowerOfAttorney = new com.see.truetransact.uicomponent.CCheckBox();
        panAutoRenewal = new com.see.truetransact.uicomponent.CPanel();
        rdoAutoRenewal_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoAutoRenewal_No = new com.see.truetransact.uicomponent.CRadioButton();
        panWithInterest = new com.see.truetransact.uicomponent.CPanel();
        rdoWith_intRenewal_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoWith_intRenewal_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblWithIntAutoRenewal = new com.see.truetransact.uicomponent.CLabel();
        lblMemberVal = new com.see.truetransact.uicomponent.CLabel();
        lblMatAlertRep = new com.see.truetransact.uicomponent.CLabel();
        panMatAlertRep = new com.see.truetransact.uicomponent.CPanel();
        rdoMatAlert_report_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoMatAlert_report_No = new com.see.truetransact.uicomponent.CRadioButton();
        panModeOfOpening = new com.see.truetransact.uicomponent.CPanel();
        rdoOpeningMode_Multiple = new com.see.truetransact.uicomponent.CRadioButton();
        lblModeOfOpening = new com.see.truetransact.uicomponent.CLabel();
        panCustomerSide1 = new com.see.truetransact.uicomponent.CPanel();
        panCustomerSide = new com.see.truetransact.uicomponent.CPanel();
        panCustomerName = new com.see.truetransact.uicomponent.CPanel();
        lblValCustomerName = new com.see.truetransact.uicomponent.CLabel();
        lblCustomerName = new com.see.truetransact.uicomponent.CLabel();
        lblDateOfBirth = new com.see.truetransact.uicomponent.CLabel();
        lblValDateOfBirth = new com.see.truetransact.uicomponent.CLabel();
        lblValStreet = new com.see.truetransact.uicomponent.CLabel();
        lblStreet = new com.see.truetransact.uicomponent.CLabel();
        lblArea = new com.see.truetransact.uicomponent.CLabel();
        lblValArea = new com.see.truetransact.uicomponent.CLabel();
        lblValCity = new com.see.truetransact.uicomponent.CLabel();
        lblCity = new com.see.truetransact.uicomponent.CLabel();
        lblCountry = new com.see.truetransact.uicomponent.CLabel();
        lblValCountry = new com.see.truetransact.uicomponent.CLabel();
        lblValPin = new com.see.truetransact.uicomponent.CLabel();
        lblPin = new com.see.truetransact.uicomponent.CLabel();
        lblState = new com.see.truetransact.uicomponent.CLabel();
        lblValState = new com.see.truetransact.uicomponent.CLabel();
        panJointAcctHolder = new com.see.truetransact.uicomponent.CPanel();
        srpJointAcctHolder = new com.see.truetransact.uicomponent.CScrollPane();
        tblJointAcctHolder = new com.see.truetransact.uicomponent.CTable();
        panJointAcctButton = new com.see.truetransact.uicomponent.CPanel();
        btnJointAcctNew = new com.see.truetransact.uicomponent.CButton();
        btnJointAcctDel = new com.see.truetransact.uicomponent.CButton();
        btnJointAcctToMain = new com.see.truetransact.uicomponent.CButton();
        btnDisplay = new com.see.truetransact.uicomponent.CButton();
        panJointAcctButton1 = new com.see.truetransact.uicomponent.CPanel();
        lblAmount = new com.see.truetransact.uicomponent.CLabel();
        lblDepositsOpened = new com.see.truetransact.uicomponent.CLabel();
        txtAmount = new com.see.truetransact.uicomponent.CTextField();
        txtDepositsOpened = new com.see.truetransact.uicomponent.CTextField();
        jPanel2 = new com.see.truetransact.uicomponent.CPanel();
        jLabel1 = new com.see.truetransact.uicomponent.CLabel();
        txtNextAccNo = new com.see.truetransact.uicomponent.CTextField();
        panMobileBanking = new com.see.truetransact.uicomponent.CPanel();
        chkMobileNumRequired = new com.see.truetransact.uicomponent.CCheckBox();
        lblMobileNo = new com.see.truetransact.uicomponent.CLabel();
        txtMobileNo = new com.see.truetransact.uicomponent.CTextField();
        tdtMobileSubscribedFrom = new com.see.truetransact.uicomponent.CDateField();
        lblMobileSubscribedFrom = new com.see.truetransact.uicomponent.CLabel();
        panTransferInDetails = new com.see.truetransact.uicomponent.CPanel();
        panTransInDet = new com.see.truetransact.uicomponent.CPanel();
        panTransferingBranchCode = new com.see.truetransact.uicomponent.CPanel();
        panTranBranCode = new com.see.truetransact.uicomponent.CPanel();
        tdtOriginalDateOfDeposit = new com.see.truetransact.uicomponent.CDateField();
        txtOriginalAccountNumber = new com.see.truetransact.uicomponent.CTextField();
        txtTransferingBranchCode = new com.see.truetransact.uicomponent.CTextField();
        lblTransferingBranchCode = new com.see.truetransact.uicomponent.CLabel();
        lblOriginalAccountNumber = new com.see.truetransact.uicomponent.CLabel();
        lblOriginalDateOfDeposit = new com.see.truetransact.uicomponent.CLabel();
        btnOriginalAccountNumberHelp = new com.see.truetransact.uicomponent.CButton();
        btnTransBranchCodeHelp = new com.see.truetransact.uicomponent.CButton();
        panTranBrancName = new com.see.truetransact.uicomponent.CPanel();
        txtPrintedNoOfTheFdr = new com.see.truetransact.uicomponent.CTextField();
        lblPrintedNoOfTheFdr = new com.see.truetransact.uicomponent.CLabel();
        lblTransferingBranchName = new com.see.truetransact.uicomponent.CLabel();
        lblValTransferingBranchName = new com.see.truetransact.uicomponent.CLabel();
        panInterBranchFunds = new com.see.truetransact.uicomponent.CPanel();
        panIntBranchTransferNo = new com.see.truetransact.uicomponent.CPanel();
        lblInterBranchTransferNo = new com.see.truetransact.uicomponent.CLabel();
        txtInterBranchTransferNo = new com.see.truetransact.uicomponent.CTextField();
        txtTransferingAmount = new com.see.truetransact.uicomponent.CTextField();
        lblTransferingAmount = new com.see.truetransact.uicomponent.CLabel();
        panDateOfTransfer = new com.see.truetransact.uicomponent.CPanel();
        lblDateOfTransfer = new com.see.truetransact.uicomponent.CLabel();
        tdtDateOfTransfer = new com.see.truetransact.uicomponent.CDateField();
        panLastInterestCalculatedDate = new com.see.truetransact.uicomponent.CPanel();
        panLastIntCalDt = new com.see.truetransact.uicomponent.CPanel();
        lblLastInterestCalculatedDate = new com.see.truetransact.uicomponent.CLabel();
        tdtLastInterestCalculatedDate = new com.see.truetransact.uicomponent.CDateField();
        txtInterestProvidedAmount = new com.see.truetransact.uicomponent.CTextField();
        txtInterestPaid = new com.see.truetransact.uicomponent.CTextField();
        lblInterestPaid = new com.see.truetransact.uicomponent.CLabel();
        lblInterestProvidedAmount = new com.see.truetransact.uicomponent.CLabel();
        lblLastTdsCollected = new com.see.truetransact.uicomponent.CLabel();
        txtLastTdsCollected = new com.see.truetransact.uicomponent.CTextField();
        tdtTdsCollectedUpto = new com.see.truetransact.uicomponent.CDateField();
        lblTdsCollectedUpto = new com.see.truetransact.uicomponent.CLabel();
        panTDSCollUpto = new com.see.truetransact.uicomponent.CPanel();
        txtTotalInstallmentReceived = new com.see.truetransact.uicomponent.CTextField();
        lblValBalanceInterestPayable = new com.see.truetransact.uicomponent.CLabel();
        lblBalanceInterestPayable = new com.see.truetransact.uicomponent.CLabel();
        lblTotalInstallmentReceived = new com.see.truetransact.uicomponent.CLabel();
        lblTotalNumberOfInstallments = new com.see.truetransact.uicomponent.CLabel();
        txtTotalNumberOfInstallments = new com.see.truetransact.uicomponent.CTextField();
        tdtLastInstallmentReceivedDate = new com.see.truetransact.uicomponent.CDateField();
        lblLastInstallmentReceivedDate = new com.see.truetransact.uicomponent.CLabel();
        panPresentPositionDetails = new com.see.truetransact.uicomponent.CPanel();
        panPresentPosition = new com.see.truetransact.uicomponent.CPanel();
        panClosingPosition = new com.see.truetransact.uicomponent.CPanel();
        lblAvailableBalance = new com.see.truetransact.uicomponent.CLabel();
        lblAvailableBalanceValue = new com.see.truetransact.uicomponent.CLabel();
        lblClearBalance = new com.see.truetransact.uicomponent.CLabel();
        lblClearBalanceValue = new com.see.truetransact.uicomponent.CLabel();
        lblTotalBalance = new com.see.truetransact.uicomponent.CLabel();
        lblPaidnterestAmountValue = new com.see.truetransact.uicomponent.CLabel();
        lblTotalInterestValue = new com.see.truetransact.uicomponent.CLabel();
        lblTotalInterest = new com.see.truetransact.uicomponent.CLabel();
        lblLastInterestPaidDate = new com.see.truetransact.uicomponent.CLabel();
        lblBalanceInterestAmountValue = new com.see.truetransact.uicomponent.CLabel();
        lblPaidInterestAmount = new com.see.truetransact.uicomponent.CLabel();
        lblBalanceInterestAmount = new com.see.truetransact.uicomponent.CLabel();
        lblLastInterestPaidDateValue = new com.see.truetransact.uicomponent.CLabel();
        lblTotalBalanceValue = new com.see.truetransact.uicomponent.CLabel();
        lblTotalInterestPayableValue = new com.see.truetransact.uicomponent.CLabel();
        lblTotalInterestPayable = new com.see.truetransact.uicomponent.CLabel();
        lblLastInterestPaidDate1 = new com.see.truetransact.uicomponent.CLabel();
        lblLastInterestProvisionDateValue = new com.see.truetransact.uicomponent.CLabel();
        lblAccHead = new com.see.truetransact.uicomponent.CLabel();
        lblAccHeadValue = new com.see.truetransact.uicomponent.CLabel();
        lblDelayedAmount = new com.see.truetransact.uicomponent.CLabel();
        lblDelayedMonth = new com.see.truetransact.uicomponent.CLabel();
        lblDelayedMonthValue = new com.see.truetransact.uicomponent.CLabel();
        lblDelayedAmountValue = new com.see.truetransact.uicomponent.CLabel();
        panLienLoanDetails1 = new com.see.truetransact.uicomponent.CPanel();
        lblTdsNo = new com.see.truetransact.uicomponent.CLabel();
        lblTdsAmount = new com.see.truetransact.uicomponent.CLabel();
        lblTdsDate = new com.see.truetransact.uicomponent.CLabel();
        lblClTDSCollectedValue2 = new com.see.truetransact.uicomponent.CLabel();
        lblTdsValue = new com.see.truetransact.uicomponent.CLabel();
        lblTdsAmountValue = new com.see.truetransact.uicomponent.CLabel();
        lblTdsDateValue = new com.see.truetransact.uicomponent.CLabel();
        srpLien = new com.see.truetransact.uicomponent.CScrollPane();
        tblLien = new com.see.truetransact.uicomponent.CTable();
        panClosedDetails = new com.see.truetransact.uicomponent.CPanel();
        lblClosedDateValue = new com.see.truetransact.uicomponent.CLabel();
        lblClosingTypeValue = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalDateValue = new com.see.truetransact.uicomponent.CLabel();
        lblClosingRateOfInterestValue = new com.see.truetransact.uicomponent.CLabel();
        lblClosingInterestAmountValue = new com.see.truetransact.uicomponent.CLabel();
        lblSBRateOfInterestValue = new com.see.truetransact.uicomponent.CLabel();
        lblSBInterestAmountValue = new com.see.truetransact.uicomponent.CLabel();
        lblSBinterestAmount = new com.see.truetransact.uicomponent.CLabel();
        lblSBRateOfInterest = new com.see.truetransact.uicomponent.CLabel();
        lblClosingInterestAmount = new com.see.truetransact.uicomponent.CLabel();
        lblClosingRateOfInterest = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalDate = new com.see.truetransact.uicomponent.CLabel();
        lblClosingType = new com.see.truetransact.uicomponent.CLabel();
        lblClosedDate = new com.see.truetransact.uicomponent.CLabel();
        panDeathClaim = new com.see.truetransact.uicomponent.CPanel();
        rdoDeathClaim_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoDeathClaim_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblDeathClaim = new com.see.truetransact.uicomponent.CLabel();
        lbldepositPeriodRun = new com.see.truetransact.uicomponent.CLabel();
        lbldepositPeriodRunValue = new com.see.truetransact.uicomponent.CLabel();
        lblTransferOutBranch = new com.see.truetransact.uicomponent.CLabel();
        lblTransferOutBranchValue = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalDepositAc = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalDepositAcValue = new com.see.truetransact.uicomponent.CLabel();
        panStandingInstructionDetails = new com.see.truetransact.uicomponent.CPanel();
        panSISchedule2 = new com.see.truetransact.uicomponent.CPanel();
        panSIDebitDetails = new com.see.truetransact.uicomponent.CPanel();
        lblSIProductType = new com.see.truetransact.uicomponent.CLabel();
        lblSIProductTypeValue = new com.see.truetransact.uicomponent.CLabel();
        lblSIProductId = new com.see.truetransact.uicomponent.CLabel();
        lblSIProductIdValue = new com.see.truetransact.uicomponent.CLabel();
        lblSIAccountNo = new com.see.truetransact.uicomponent.CLabel();
        lblSIAmount = new com.see.truetransact.uicomponent.CLabel();
        lblSIAmountValue = new com.see.truetransact.uicomponent.CLabel();
        lblSIAccountNoValue = new com.see.truetransact.uicomponent.CLabel();
        lblSIParticulars = new com.see.truetransact.uicomponent.CLabel();
        lblSIParticularsValue = new com.see.truetransact.uicomponent.CLabel();
        panSISchedule = new com.see.truetransact.uicomponent.CPanel();
        lblSIFrequency = new com.see.truetransact.uicomponent.CLabel();
        lblSIFrequencyValue = new com.see.truetransact.uicomponent.CLabel();
        lblSIForwardCount = new com.see.truetransact.uicomponent.CLabel();
        lblSIForwardCountValue = new com.see.truetransact.uicomponent.CLabel();
        lblSIStartDate = new com.see.truetransact.uicomponent.CLabel();
        lblSIStartDateValue = new com.see.truetransact.uicomponent.CLabel();
        lblSIEndDate = new com.see.truetransact.uicomponent.CLabel();
        lblSIEndDateValue = new com.see.truetransact.uicomponent.CLabel();
        lblAcceptanceCharges = new com.see.truetransact.uicomponent.CLabel();
        lblAcceptanceChargesValue = new com.see.truetransact.uicomponent.CLabel();
        lblSIFailureCharges = new com.see.truetransact.uicomponent.CLabel();
        lblSIFailureChargesValue = new com.see.truetransact.uicomponent.CLabel();
        lblSIExecutionCharges = new com.see.truetransact.uicomponent.CLabel();
        lblSIExecutionChargesValue = new com.see.truetransact.uicomponent.CLabel();
        panSIDetails = new com.see.truetransact.uicomponent.CPanel();
        lblSICreatedDate = new com.see.truetransact.uicomponent.CLabel();
        lblSICreatedDateValue = new com.see.truetransact.uicomponent.CLabel();
        lblSINo = new com.see.truetransact.uicomponent.CLabel();
        lblSINoValue = new com.see.truetransact.uicomponent.CLabel();
        panRenewalInformation = new com.see.truetransact.uicomponent.CPanel();
        panNewDepositDetails = new com.see.truetransact.uicomponent.CPanel();
        panNewInput = new com.see.truetransact.uicomponent.CPanel();
        panRenewalMaturityDt = new com.see.truetransact.uicomponent.CPanel();
        lblRenewalMaturityDate = new com.see.truetransact.uicomponent.CLabel();
        tdtRenewalMaturityDate = new com.see.truetransact.uicomponent.CDateField();
        txtRenewalRateOfInterest = new com.see.truetransact.uicomponent.CTextField();
        lblRenewalRateOfInterest = new com.see.truetransact.uicomponent.CLabel();
        lblRenewlaDepositSubNo = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalValDepositSubNo = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalDateOfDeposit = new com.see.truetransact.uicomponent.CLabel();
        tdtRenewalDateOfDeposit = new com.see.truetransact.uicomponent.CDateField();
        lblRenewalDepositAmount = new com.see.truetransact.uicomponent.CLabel();
        txtRenewalDepositAmount = new com.see.truetransact.uicomponent.CTextField();
        panNewPeriodOfDeposit = new com.see.truetransact.uicomponent.CPanel();
        txtRenewalPeriodOfDeposit_Years = new com.see.truetransact.uicomponent.CTextField();
        lblRenewalPeriod_Years = new com.see.truetransact.uicomponent.CLabel();
        txtRenewalPeriodOfDeposit_Months = new com.see.truetransact.uicomponent.CTextField();
        lblRenewalPeriod_Months = new com.see.truetransact.uicomponent.CLabel();
        txtRenewalPeriodOfDeposit_Days = new com.see.truetransact.uicomponent.CTextField();
        lblRenewalPeriod_Days = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalPeriodOfDeposit = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalInterestPaymentFrequency = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalInterestPaymentFrequency = new com.see.truetransact.uicomponent.CLabel();
        panNewBtnDepSubNoAcc = new com.see.truetransact.uicomponent.CPanel();
        btnRenewalDepSubNoAccSave = new com.see.truetransact.uicomponent.CButton();
        lblRenewPostageAmt = new com.see.truetransact.uicomponent.CLabel();
        txtRenewPostageAmt = new com.see.truetransact.uicomponent.CTextField();
        panRenewalDepositDt = new com.see.truetransact.uicomponent.CPanel();
        txtRenewalPeriodicInterestAmount = new com.see.truetransact.uicomponent.CTextField();
        lblRenewalPeriodicInterestAmount = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalTotalInterestAmount = new com.see.truetransact.uicomponent.CLabel();
        txtRenewalTotalInterestAmount = new com.see.truetransact.uicomponent.CTextField();
        txtRenewalMaturityAmount = new com.see.truetransact.uicomponent.CTextField();
        lblRenewalMaturityAmount = new com.see.truetransact.uicomponent.CLabel();
        panRenewalInterestCredit = new com.see.truetransact.uicomponent.CPanel();
        lblRenewalProductType = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalProdType = new com.see.truetransact.uicomponent.CComboBox();
        lblNewProdId = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalAccountNo = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalCustomerNameCr = new com.see.truetransact.uicomponent.CLabel();
        panNewCustomerNO = new com.see.truetransact.uicomponent.CPanel();
        txtRenewalCustomerIdCr = new com.see.truetransact.uicomponent.CTextField();
        btnRenewalCustomerIdFileOpenCr = new com.see.truetransact.uicomponent.CButton();
        lblRenewalCustomerNameCrValue = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalInterestPaymentMode = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalInterestPaymentMode = new com.see.truetransact.uicomponent.CLabel();
        panNewTblDepSubNoAccInfo = new com.see.truetransact.uicomponent.CPanel();
        srpTblRenewalDepSubNoAccInfo = new com.see.truetransact.uicomponent.CScrollPane();
        tblRenewalDepSubNoAccInfo = new com.see.truetransact.uicomponent.CTable();
        panRenewalFreqency = new com.see.truetransact.uicomponent.CPanel();
        panRenewalCalenderFreq = new com.see.truetransact.uicomponent.CPanel();
        rdoRenewalCalender_Freq_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoRenewalCalender_Freq_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblRenewalCalenderFreq = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalCalenderFreqDate = new com.see.truetransact.uicomponent.CLabel();
        txtRenewalPrintedOption = new com.see.truetransact.uicomponent.CTextField();
        lblRenewalPrintedOption = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalCalenderFreqDay = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalNoticeNew = new com.see.truetransact.uicomponent.CLabel();
        lblAutoRenewalNew = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalWithIntNew = new com.see.truetransact.uicomponent.CLabel();
        panMatAlertRep1 = new com.see.truetransact.uicomponent.CPanel();
        rdoRenewalMatAlert_report_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoRenewalMatAlert_report_No = new com.see.truetransact.uicomponent.CRadioButton();
        panAutoRenewal1 = new com.see.truetransact.uicomponent.CPanel();
        rdoRenewalAutoRenewal_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoRenewalAutoRenewal_No = new com.see.truetransact.uicomponent.CRadioButton();
        panWithInterest1 = new com.see.truetransact.uicomponent.CPanel();
        rdoRenewalWith_intRenewal_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoRenewalWith_intRenewal_No = new com.see.truetransact.uicomponent.CRadioButton();
        panRenewalAccountInformation = new com.see.truetransact.uicomponent.CPanel();
        panRenewalDepositTransDetails = new com.see.truetransact.uicomponent.CPanel();
        lblRenewalProdId = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalDepositProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalCategory = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalDepositCategory = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalWithdrawingDeposit = new com.see.truetransact.uicomponent.CLabel();
        panRenewalwithdrawing = new com.see.truetransact.uicomponent.CPanel();
        rdoRenewalWithdrawing_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoRenewalWithdrawing_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblRenewalAddingDepTrans = new com.see.truetransact.uicomponent.CLabel();
        panRenewalAdding = new com.see.truetransact.uicomponent.CPanel();
        rdoRenewalAdding_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoRenewalAdding_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblRenewalDepTransAmt = new com.see.truetransact.uicomponent.CLabel();
        txtRenewalDepTransAmtValue = new com.see.truetransact.uicomponent.CTextField();
        lblRenewalDepositTransMode = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalDepTransMode = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalDepositTransProdType = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalDepTransProdType = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalDepositTransProdId = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalDepTransProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalDepositTransAccNo = new com.see.truetransact.uicomponent.CLabel();
        panRenewalDepTransCustomerNO = new com.see.truetransact.uicomponent.CPanel();
        txtRenewalDepCustomerIdCr = new com.see.truetransact.uicomponent.CTextField();
        btnRenewalDepCustomerIdFileOpenCr = new com.see.truetransact.uicomponent.CButton();
        lblRenewalDepositTransCustName = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalCustNameValue = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalDepositTransTokenNo = new com.see.truetransact.uicomponent.CLabel();
        txtRenewalDepTransTokenNo = new com.see.truetransact.uicomponent.CTextField();
        lblRenewSamaNo = new com.see.truetransact.uicomponent.CLabel();
        chkRenewSameNo = new com.see.truetransact.uicomponent.CCheckBox();
        lblNextAccntNo = new com.see.truetransact.uicomponent.CLabel();
        txtNextAccntNo = new com.see.truetransact.uicomponent.CTextField();
        panRenewalInterestDetails = new com.see.truetransact.uicomponent.CPanel();
        lblRenewalIntAmount = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalBalIntAmtVal = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalOldMaturityDate = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalValPeriodRun = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalSBPeriod = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalSBPeriodVal = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalSBIntAmt = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalSBIntAmtVal = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalWithdrawingIntAmt = new com.see.truetransact.uicomponent.CLabel();
        panRenewalWithdrawingInterest = new com.see.truetransact.uicomponent.CPanel();
        rdoRenewalWithdrawingInt_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoRenewalWithdrawingInt_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblRenewalIntAmt = new com.see.truetransact.uicomponent.CLabel();
        txtRenewalIntAmtValue = new com.see.truetransact.uicomponent.CTextField();
        lblRenewalInterestTransMode = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalInterestTransMode = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalInterestTransProdType = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalInterestTransProdType = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalInterestTransProdId = new com.see.truetransact.uicomponent.CLabel();
        cboRenewalInterestTransProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblRenewalInterestTransAccNo = new com.see.truetransact.uicomponent.CLabel();
        panRenewalInterestCustomerNO = new com.see.truetransact.uicomponent.CPanel();
        txtRenewalIntCustomerIdCr = new com.see.truetransact.uicomponent.CTextField();
        btnRenewalIntCustomerIdFileOpenCr = new com.see.truetransact.uicomponent.CButton();
        lblRenewalInterestCustName = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalInterestCustNameVal = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalInterestTokenNo = new com.see.truetransact.uicomponent.CLabel();
        txtRenewalIntTokenNoVal = new com.see.truetransact.uicomponent.CTextField();
        lblRenewalInterestRepayAmt = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalInterestRepayAmtVal = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalSBIntRate = new com.see.truetransact.uicomponent.CLabel();
        lblRenewalSBIntRateVal = new com.see.truetransact.uicomponent.CLabel();
        panIntpayable = new com.see.truetransact.uicomponent.CPanel();
        lblRenewinterest = new com.see.truetransact.uicomponent.CLabel();
        chkRenewinterest = new com.see.truetransact.uicomponent.CCheckBox();
        lblPrevInt = new com.see.truetransact.uicomponent.CLabel();
        lblPreBalIntVal = new com.see.truetransact.uicomponent.CLabel();
        panExtensionInformation = new com.see.truetransact.uicomponent.CPanel();
        panExtensionDepositDetails = new com.see.truetransact.uicomponent.CPanel();
        panExtensionInput = new com.see.truetransact.uicomponent.CPanel();
        panExtensionMaturityDt = new com.see.truetransact.uicomponent.CPanel();
        lblExtensionMaturityDate = new com.see.truetransact.uicomponent.CLabel();
        tdtExtensionMaturityDate = new com.see.truetransact.uicomponent.CDateField();
        txtExtensionRateOfInterest = new com.see.truetransact.uicomponent.CTextField();
        lblExtensionRateOfInterest = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionDepositSubNo = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionValDepositSubNo = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionDateOfDeposit = new com.see.truetransact.uicomponent.CLabel();
        tdtExtensionDateOfDeposit = new com.see.truetransact.uicomponent.CDateField();
        lblExtensionDepositAmount = new com.see.truetransact.uicomponent.CLabel();
        txtExtensionDepositAmount = new com.see.truetransact.uicomponent.CTextField();
        panExtensionPeriodOfDeposit = new com.see.truetransact.uicomponent.CPanel();
        txtExtensionPeriodOfDeposit_Years = new com.see.truetransact.uicomponent.CTextField();
        lblExtensionPeriod_Years = new com.see.truetransact.uicomponent.CLabel();
        txtExtensionPeriodOfDeposit_Months = new com.see.truetransact.uicomponent.CTextField();
        lblExtensionPeriod_Months = new com.see.truetransact.uicomponent.CLabel();
        txtExtensionPeriodOfDeposit_Days = new com.see.truetransact.uicomponent.CTextField();
        lblExtensionPeriod_Days = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionPeriodOfDeposit = new com.see.truetransact.uicomponent.CLabel();
        cboExtensionInterestPaymentFrequency = new com.see.truetransact.uicomponent.CComboBox();
        lblExtensionInterestPaymentFrequency = new com.see.truetransact.uicomponent.CLabel();
        panExtensionBtnDepSubNoAcc = new com.see.truetransact.uicomponent.CPanel();
        btnExtensionDepSubNoAccSave = new com.see.truetransact.uicomponent.CButton();
        panExtensionDepositDt = new com.see.truetransact.uicomponent.CPanel();
        txtExtensionPeriodicInterestAmount = new com.see.truetransact.uicomponent.CTextField();
        lblExtensionPeriodicInterestAmount = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionTotalInterestAmount = new com.see.truetransact.uicomponent.CLabel();
        txtExtensionTotalInterestAmount = new com.see.truetransact.uicomponent.CTextField();
        txtExtensionMaturityAmount = new com.see.truetransact.uicomponent.CTextField();
        lblExtensionMaturityAmount = new com.see.truetransact.uicomponent.CLabel();
        panExtensionInterestCredit = new com.see.truetransact.uicomponent.CPanel();
        lblExtensionProductType = new com.see.truetransact.uicomponent.CLabel();
        cboExtensionProdType = new com.see.truetransact.uicomponent.CComboBox();
        lblExtensionProdId = new com.see.truetransact.uicomponent.CLabel();
        cboExtensionProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblExtensionAccountNo = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionCustomerNameCr = new com.see.truetransact.uicomponent.CLabel();
        panExtensionCustomerNO = new com.see.truetransact.uicomponent.CPanel();
        txtExtensionCustomerIdCr = new com.see.truetransact.uicomponent.CTextField();
        btnExtensionCustomerIdFileOpenCr = new com.see.truetransact.uicomponent.CButton();
        lblExtensionCustomerNameCrValue = new com.see.truetransact.uicomponent.CLabel();
        cboExtensionInterestPaymentMode = new com.see.truetransact.uicomponent.CComboBox();
        lblExtensionInterestPaymentMode = new com.see.truetransact.uicomponent.CLabel();
        panExtensionTblDepSubNoAccInfo = new com.see.truetransact.uicomponent.CPanel();
        srpTblExtensionDepSubNoAccInfo = new com.see.truetransact.uicomponent.CScrollPane();
        tblExtensionDepSubNoAccInfo = new com.see.truetransact.uicomponent.CTable();
        panExtensionFreqency = new com.see.truetransact.uicomponent.CPanel();
        panExtensionCalenderFreq = new com.see.truetransact.uicomponent.CPanel();
        rdoExtensionCalender_Freq_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoExtensionCalender_Freq_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblExtensionCalenderFreq = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionCalenderFreqDate = new com.see.truetransact.uicomponent.CLabel();
        txtExtensionPrintedOption = new com.see.truetransact.uicomponent.CTextField();
        lblExtensionPrintedOption = new com.see.truetransact.uicomponent.CLabel();
        cboExtensionCalenderFreqDay = new com.see.truetransact.uicomponent.CComboBox();
        panExtensionAutoRenewal = new com.see.truetransact.uicomponent.CPanel();
        rdoExtensionAutoRenewal_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoExtensionAutoRenewal_No = new com.see.truetransact.uicomponent.CRadioButton();
        panExtensionWithInterest = new com.see.truetransact.uicomponent.CPanel();
        rdoExtensionWithIntAutoRenewal_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoExtensionWithIntAutoRenewal_No = new com.see.truetransact.uicomponent.CRadioButton();
        panExtensionMatAlertRep = new com.see.truetransact.uicomponent.CPanel();
        rdoExtensionMatAlertReport_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoExtensionMatAlertReport_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblExtensionMatAlertRep = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionWithIntAutoRenewal = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionAutoRenewal = new com.see.truetransact.uicomponent.CLabel();
        panExtensionAccountInformation = new com.see.truetransact.uicomponent.CPanel();
        panExtensionDepositTransDetails = new com.see.truetransact.uicomponent.CPanel();
        lblExtensionDepositProdId = new com.see.truetransact.uicomponent.CLabel();
        cboExtensionDepositProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblExtensionCategory = new com.see.truetransact.uicomponent.CLabel();
        cboExtensionDepositCategory = new com.see.truetransact.uicomponent.CComboBox();
        lblExtensionPaymentFreq = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionPaymentFreqValue = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionRateOfInt = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionRateOfIntVal = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionWithdrawingDeposit = new com.see.truetransact.uicomponent.CLabel();
        panExtensionwithdrawing = new com.see.truetransact.uicomponent.CPanel();
        rdoExtensionWithdrawing_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoExtensionWithdrawing_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblExtensionDepTransAmt = new com.see.truetransact.uicomponent.CLabel();
        txtExtensionDepTransAmtValue = new com.see.truetransact.uicomponent.CTextField();
        lblExtensionofPrematureClosure = new com.see.truetransact.uicomponent.CLabel();
        panExtensionAdding = new com.see.truetransact.uicomponent.CPanel();
        rdoExtensionofPrematureClosure_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoExtensionofPrematureClosure_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblExtensionWithdrawIntAmtValue = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionTotalIntAmt = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionTotalIntAmtValue = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionLeftOverIntAmtValue = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionDepositDate = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionDepositDtVal = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionPeriodRun = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionPeriodRunValue = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionBalanceInt = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionBalanceIntValue = new com.see.truetransact.uicomponent.CLabel();
        panExtensionRateOfInterest = new com.see.truetransact.uicomponent.CPanel();
        lblExtensionWithdrawIntAmt1 = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionWithdrawIntAmtValue1 = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionWithdrawIntAmt = new com.see.truetransact.uicomponent.CLabel();
        panExtensionRateOfInterest1 = new com.see.truetransact.uicomponent.CPanel();
        lblExtensionWithdrawIntAmt2 = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionWithdrawIntAmtValue2 = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionLeftOverIntAmt = new com.see.truetransact.uicomponent.CLabel();
        panExtensionInterestDetails = new com.see.truetransact.uicomponent.CPanel();
        lblExtensionInterestTransMode = new com.see.truetransact.uicomponent.CLabel();
        cboExtensionTransMode = new com.see.truetransact.uicomponent.CComboBox();
        lblExtensionInterestTransProdType = new com.see.truetransact.uicomponent.CLabel();
        cboExtensionTransProdType = new com.see.truetransact.uicomponent.CComboBox();
        lblExtensionInterestTransProdId = new com.see.truetransact.uicomponent.CLabel();
        cboExtensionTransProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblExtensionInterestTransAccNo = new com.see.truetransact.uicomponent.CLabel();
        panExtensionTransCustomerNO = new com.see.truetransact.uicomponent.CPanel();
        txtExtensionTransCustomerIdCr = new com.see.truetransact.uicomponent.CTextField();
        btnExtensionTransCustomerIdFileOpenCr = new com.see.truetransact.uicomponent.CButton();
        lblExtensionInterestCustName = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionTransCustNameVal = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionDepositTransTokenNo = new com.see.truetransact.uicomponent.CLabel();
        txtExtensionTransTokenNo = new com.see.truetransact.uicomponent.CTextField();
        panExtensionWithdrawingInterest = new com.see.truetransact.uicomponent.CPanel();
        rdoExtensionWithdrawingInt_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoExtensionWithdrawingInt_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblExtensionWithdrawingIntAmt = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionIntAmt = new com.see.truetransact.uicomponent.CLabel();
        txtExtensionTransAmtValue = new com.see.truetransact.uicomponent.CTextField();
        lblExtensionTotalRepayAmt = new com.see.truetransact.uicomponent.CLabel();
        lblExtensionTotalRepayAmtValue = new com.see.truetransact.uicomponent.CLabel();
        panTransaction = new com.see.truetransact.uicomponent.CPanel();
        tbrTermDeposit = new javax.swing.JToolBar();
        btnView = new com.see.truetransact.uicomponent.CButton();
        lblSpace4 = new com.see.truetransact.uicomponent.CLabel();
        btnNew = new com.see.truetransact.uicomponent.CButton();
        lblSpace17 = new com.see.truetransact.uicomponent.CLabel();
        btnEdit = new com.see.truetransact.uicomponent.CButton();
        lblSpace18 = new com.see.truetransact.uicomponent.CLabel();
        btnDelete = new com.see.truetransact.uicomponent.CButton();
        lblSpace2 = new com.see.truetransact.uicomponent.CLabel();
        btnSave = new com.see.truetransact.uicomponent.CButton();
        lblSpace19 = new com.see.truetransact.uicomponent.CLabel();
        btnCancel = new com.see.truetransact.uicomponent.CButton();
        lblSpace3 = new com.see.truetransact.uicomponent.CLabel();
        btnAuthorize = new com.see.truetransact.uicomponent.CButton();
        lblSpace20 = new com.see.truetransact.uicomponent.CLabel();
        btnException = new com.see.truetransact.uicomponent.CButton();
        lblSpace21 = new com.see.truetransact.uicomponent.CLabel();
        btnReject = new com.see.truetransact.uicomponent.CButton();
        lblSpace5 = new com.see.truetransact.uicomponent.CLabel();
        btnPrint = new com.see.truetransact.uicomponent.CButton();
        lblSpace22 = new com.see.truetransact.uicomponent.CLabel();
        btnClose = new com.see.truetransact.uicomponent.CButton();
        lblSpace8 = new com.see.truetransact.uicomponent.CLabel();
        btnCustomerIdFileOpen1 = new com.see.truetransact.uicomponent.CButton();
        lblSpace6 = new com.see.truetransact.uicomponent.CLabel();
        lblPanNumber1 = new com.see.truetransact.uicomponent.CLabel();
        lblSpace7 = new com.see.truetransact.uicomponent.CLabel();
        txtEditDepositNo = new com.see.truetransact.uicomponent.CTextField();
        lblSpace9 = new com.see.truetransact.uicomponent.CLabel();
        panStatus = new com.see.truetransact.uicomponent.CPanel();
        lblSpace1 = new com.see.truetransact.uicomponent.CLabel();
        lblStatus = new com.see.truetransact.uicomponent.CLabel();
        lblMsg = new com.see.truetransact.uicomponent.CLabel();
        mbrMain = new com.see.truetransact.uicomponent.CMenuBar();
        mnuProcess = new javax.swing.JMenu();
        mitNew = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        sptDelete = new javax.swing.JSeparator();
        mitSave = new javax.swing.JMenuItem();
        mitCancel = new javax.swing.JMenuItem();
        sptCancel = new javax.swing.JSeparator();
        mitAuthorize = new javax.swing.JMenuItem();
        mitReject = new javax.swing.JMenuItem();
        mitException = new javax.swing.JMenuItem();
        sptException = new javax.swing.JSeparator();
        mitClose = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Create Term Deposit");
        setMinimumSize(new java.awt.Dimension(850, 660));
        setPreferredSize(new java.awt.Dimension(850, 660));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panTermDeposit.setMinimumSize(new java.awt.Dimension(800, 650));
        panTermDeposit.setPreferredSize(new java.awt.Dimension(800, 650));
        panTermDeposit.setLayout(new java.awt.GridBagLayout());

        tabTermDeposit.setMinimumSize(new java.awt.Dimension(840, 650));
        tabTermDeposit.setName(""); // NOI18N
        tabTermDeposit.setPreferredSize(new java.awt.Dimension(840, 650));

        panAccountInformation.setToolTipText("");
        panAccountInformation.setMinimumSize(new java.awt.Dimension(840, 650));
        panAccountInformation.setPreferredSize(new java.awt.Dimension(840, 650));
        panAccountInformation.setLayout(new java.awt.GridBagLayout());

        panDepositDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Deposit Details", 0, 0, new java.awt.Font("MS Sans Serif", 0, 12))); // NOI18N
        panDepositDetails.setMinimumSize(new java.awt.Dimension(840, 215));
        panDepositDetails.setPreferredSize(new java.awt.Dimension(840, 215));
        panDepositDetails.setLayout(new java.awt.GridBagLayout());

        panInput.setMinimumSize(new java.awt.Dimension(658, 195));
        panInput.setPreferredSize(new java.awt.Dimension(658, 195));
        panInput.setLayout(new java.awt.GridBagLayout());

        panMaturityDt.setMinimumSize(new java.awt.Dimension(318, 210));
        panMaturityDt.setPreferredSize(new java.awt.Dimension(318, 210));
        panMaturityDt.setLayout(new java.awt.GridBagLayout());

        lblMaturityDate.setText("Maturity Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panMaturityDt.add(lblMaturityDate, gridBagConstraints);

        tdtMaturityDate.setEnabled(false);
        tdtMaturityDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtMaturityDate.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panMaturityDt.add(tdtMaturityDate, gridBagConstraints);

        txtRateOfInterest.setEditable(false);
        txtRateOfInterest.setMinimumSize(new java.awt.Dimension(100, 21));
        txtRateOfInterest.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRateOfInterestFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRateOfInterestFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panMaturityDt.add(txtRateOfInterest, gridBagConstraints);

        lblRateOfInterest.setText("Rate of Int.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panMaturityDt.add(lblRateOfInterest, gridBagConstraints);

        lblDepositSubNo.setText("Deposit Sub No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panMaturityDt.add(lblDepositSubNo, gridBagConstraints);

        lblValDepositSubNo.setMaximumSize(new java.awt.Dimension(100, 15));
        lblValDepositSubNo.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panMaturityDt.add(lblValDepositSubNo, gridBagConstraints);

        lblDateOfDeposit.setText("Date of Deposit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panMaturityDt.add(lblDateOfDeposit, gridBagConstraints);

        tdtDateOfDeposit.setEnabled(false);
        tdtDateOfDeposit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tdtDateOfDepositFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtDateOfDepositFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panMaturityDt.add(tdtDateOfDeposit, gridBagConstraints);

        lblDepositAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDepositAmount.setText("Deposit Amount");
        lblDepositAmount.setMaximumSize(new java.awt.Dimension(105, 18));
        lblDepositAmount.setMinimumSize(new java.awt.Dimension(105, 18));
        lblDepositAmount.setPreferredSize(new java.awt.Dimension(100, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panMaturityDt.add(lblDepositAmount, gridBagConstraints);

        txtDepositAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        txtDepositAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepositAmountActionPerformed(evt);
            }
        });
        txtDepositAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDepositAmountFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panMaturityDt.add(txtDepositAmount, gridBagConstraints);

        panPeriodOfDeposit.setLayout(new java.awt.GridBagLayout());

        txtPeriodOfDeposit_Years.setMinimumSize(new java.awt.Dimension(20, 21));
        txtPeriodOfDeposit_Years.setPreferredSize(new java.awt.Dimension(20, 21));
        txtPeriodOfDeposit_Years.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPeriodOfDeposit_YearsActionPerformed(evt);
            }
        });
        txtPeriodOfDeposit_Years.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPeriodOfDeposit_YearsFocusLost(evt);
            }
        });
        panPeriodOfDeposit.add(txtPeriodOfDeposit_Years, new java.awt.GridBagConstraints());

        lblPeriod_Years.setText("Yrs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 2);
        panPeriodOfDeposit.add(lblPeriod_Years, gridBagConstraints);

        txtPeriodOfDeposit_Months.setMinimumSize(new java.awt.Dimension(30, 21));
        txtPeriodOfDeposit_Months.setPreferredSize(new java.awt.Dimension(30, 21));
        txtPeriodOfDeposit_Months.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPeriodOfDeposit_MonthsActionPerformed(evt);
            }
        });
        txtPeriodOfDeposit_Months.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPeriodOfDeposit_MonthsFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panPeriodOfDeposit.add(txtPeriodOfDeposit_Months, gridBagConstraints);

        lblPeriod_Months.setText("Months");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panPeriodOfDeposit.add(lblPeriod_Months, gridBagConstraints);

        txtPeriodOfDeposit_Days.setAllowAll(true);
        txtPeriodOfDeposit_Days.setMinimumSize(new java.awt.Dimension(45, 21));
        txtPeriodOfDeposit_Days.setPreferredSize(new java.awt.Dimension(45, 21));
        txtPeriodOfDeposit_Days.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPeriodOfDeposit_DaysActionPerformed(evt);
            }
        });
        txtPeriodOfDeposit_Days.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPeriodOfDeposit_DaysFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panPeriodOfDeposit.add(txtPeriodOfDeposit_Days, gridBagConstraints);

        lblPeriod_Days.setText("Days");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panPeriodOfDeposit.add(lblPeriod_Days, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panMaturityDt.add(panPeriodOfDeposit, gridBagConstraints);

        lblPeriodOfDeposit.setText("Period of Deposit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panMaturityDt.add(lblPeriodOfDeposit, gridBagConstraints);

        cboInterestPaymentFrequency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboInterestPaymentFrequency.setMinimumSize(new java.awt.Dimension(100, 21));
        cboInterestPaymentFrequency.setPopupWidth(100);
        cboInterestPaymentFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboInterestPaymentFrequencyActionPerformed(evt);
            }
        });
        cboInterestPaymentFrequency.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cboInterestPaymentFrequencyFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panMaturityDt.add(cboInterestPaymentFrequency, gridBagConstraints);

        lblInterestPaymentFrequency.setText("Int Pay Freq");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panMaturityDt.add(lblInterestPaymentFrequency, gridBagConstraints);

        txtpostageAmt.setMinimumSize(new java.awt.Dimension(70, 21));
        txtpostageAmt.setName(""); // NOI18N
        txtpostageAmt.setPreferredSize(new java.awt.Dimension(70, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panMaturityDt.add(txtpostageAmt, gridBagConstraints);

        lblPostageAmt.setText("Recover Postage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panMaturityDt.add(lblPostageAmt, gridBagConstraints);

        panWeek.setLayout(new java.awt.GridBagLayout());

        lblWeek.setText("Week");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        panWeek.add(lblWeek, gridBagConstraints);

        txtWeek.setAllowNumber(true);
        txtWeek.setMinimumSize(new java.awt.Dimension(100, 21));
        txtWeek.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtWeekFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panWeek.add(txtWeek, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        panMaturityDt.add(panWeek, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        panInput.add(panMaturityDt, gridBagConstraints);

        panDepositDt.setMinimumSize(new java.awt.Dimension(235, 75));
        panDepositDt.setPreferredSize(new java.awt.Dimension(235, 70));
        panDepositDt.setLayout(new java.awt.GridBagLayout());

        txtPeriodicInterestAmount.setEditable(false);
        txtPeriodicInterestAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 7, 1, 16);
        panDepositDt.add(txtPeriodicInterestAmount, gridBagConstraints);

        lblPeriodicInterestAmount.setText("Periodic Int. Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panDepositDt.add(lblPeriodicInterestAmount, gridBagConstraints);

        lblTotalInterestAmount.setText("Total Int. Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panDepositDt.add(lblTotalInterestAmount, gridBagConstraints);

        txtTotalInterestAmount.setEditable(false);
        txtTotalInterestAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 7, 1, 16);
        panDepositDt.add(txtTotalInterestAmount, gridBagConstraints);

        txtMaturityAmount.setEditable(false);
        txtMaturityAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        txtMaturityAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMaturityAmountFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 7, 1, 16);
        panDepositDt.add(txtMaturityAmount, gridBagConstraints);

        lblMaturityAmount.setText("Maturity Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panDepositDt.add(lblMaturityAmount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        panInput.add(panDepositDt, gridBagConstraints);

        panInterestCredit.setMinimumSize(new java.awt.Dimension(235, 135));
        panInterestCredit.setPreferredSize(new java.awt.Dimension(235, 135));
        panInterestCredit.setLayout(new java.awt.GridBagLayout());

        lblProductType.setText("Product Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panInterestCredit.add(lblProductType, gridBagConstraints);

        cboProdType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboProdType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProdType.setPopupWidth(125);
        cboProdType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProdTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panInterestCredit.add(cboProdType, gridBagConstraints);

        lblProdId.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panInterestCredit.add(lblProdId, gridBagConstraints);

        cboProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProdId.setPopupWidth(200);
        cboProdId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProdIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panInterestCredit.add(cboProdId, gridBagConstraints);

        lblAccountNo.setText("Account No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panInterestCredit.add(lblAccountNo, gridBagConstraints);

        lblCustomerNameCr.setText("Customer Name");
        lblCustomerNameCr.setMinimumSize(new java.awt.Dimension(95, 18));
        lblCustomerNameCr.setPreferredSize(new java.awt.Dimension(95, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panInterestCredit.add(lblCustomerNameCr, gridBagConstraints);

        panCustomerNO.setMinimumSize(new java.awt.Dimension(100, 21));
        panCustomerNO.setPreferredSize(new java.awt.Dimension(122, 21));
        panCustomerNO.setLayout(new java.awt.GridBagLayout());

        txtCustomerIdCr.setEditable(false);
        txtCustomerIdCr.setMinimumSize(new java.awt.Dimension(97, 21));
        txtCustomerIdCr.setPreferredSize(new java.awt.Dimension(97, 21));
        txtCustomerIdCr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustomerIdCrFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panCustomerNO.add(txtCustomerIdCr, gridBagConstraints);

        btnCustomerIdFileOpenCr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnCustomerIdFileOpenCr.setMaximumSize(new java.awt.Dimension(21, 21));
        btnCustomerIdFileOpenCr.setMinimumSize(new java.awt.Dimension(21, 21));
        btnCustomerIdFileOpenCr.setPreferredSize(new java.awt.Dimension(21, 21));
        btnCustomerIdFileOpenCr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomerIdFileOpenCrActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panCustomerNO.add(btnCustomerIdFileOpenCr, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panInterestCredit.add(panCustomerNO, gridBagConstraints);

        lblCustomerNameCrValue.setForeground(new java.awt.Color(0, 51, 204));
        lblCustomerNameCrValue.setFont(new java.awt.Font("MS Sans Serif", 1, 13)); // NOI18N
        lblCustomerNameCrValue.setMinimumSize(new java.awt.Dimension(95, 18));
        lblCustomerNameCrValue.setPreferredSize(new java.awt.Dimension(95, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panInterestCredit.add(lblCustomerNameCrValue, gridBagConstraints);

        cboInterestPaymentMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboInterestPaymentMode.setMinimumSize(new java.awt.Dimension(100, 21));
        cboInterestPaymentMode.setPopupWidth(100);
        cboInterestPaymentMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboInterestPaymentModeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panInterestCredit.add(cboInterestPaymentMode, gridBagConstraints);

        lblInterestPaymentMode.setText("Int Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panInterestCredit.add(lblInterestPaymentMode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        panInput.add(panInterestCredit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        panDepositDetails.add(panInput, gridBagConstraints);

        panFreqency.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panFreqency.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        panFreqency.setMinimumSize(new java.awt.Dimension(275, 120));
        panFreqency.setPreferredSize(new java.awt.Dimension(275, 120));
        panFreqency.setLayout(new java.awt.GridBagLayout());

        panCalenderFreq.setMinimumSize(new java.awt.Dimension(100, 20));
        panCalenderFreq.setPreferredSize(new java.awt.Dimension(100, 20));
        panCalenderFreq.setLayout(new java.awt.GridBagLayout());

        rdoCalender_Freq_Yes.setText("Yes");
        rdoCalender_Freq_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoCalender_Freq_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoCalender_Freq_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoCalender_Freq_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoCalender_Freq_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panCalenderFreq.add(rdoCalender_Freq_Yes, gridBagConstraints);

        rdoCalender_Freq_No.setText("No");
        rdoCalender_Freq_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoCalender_Freq_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoCalender_Freq_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoCalender_Freq_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoCalender_Freq_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panCalenderFreq.add(rdoCalender_Freq_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panFreqency.add(panCalenderFreq, gridBagConstraints);

        lblCalenderFreq.setText("Calender Frequency");
        lblCalenderFreq.setMaximumSize(new java.awt.Dimension(115, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panFreqency.add(lblCalenderFreq, gridBagConstraints);

        tdtCalenderFreqDate.setEnabled(false);
        tdtCalenderFreqDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtCalenderFreqDate.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panFreqency.add(tdtCalenderFreqDate, gridBagConstraints);

        lblCalenderFreqDate.setText("Calender Frequency Day");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panFreqency.add(lblCalenderFreqDate, gridBagConstraints);

        txtPrintedOption.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 2);
        panFreqency.add(txtPrintedOption, gridBagConstraints);

        lblPrintedOption.setText("PrintingNo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 2);
        panFreqency.add(lblPrintedOption, gridBagConstraints);

        cboCalenderFreqDay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboCalenderFreqDay.setMinimumSize(new java.awt.Dimension(100, 21));
        cboCalenderFreqDay.setPopupWidth(100);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panFreqency.add(cboCalenderFreqDay, gridBagConstraints);

        txtReferenceNo.setEditable(false);
        txtReferenceNo.setMaximumSize(new java.awt.Dimension(100, 21));
        txtReferenceNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtReferenceNo.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panFreqency.add(txtReferenceNo, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("RefNo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panFreqency.add(jLabel2, gridBagConstraints);

        panDepositDetails.add(panFreqency, new java.awt.GridBagConstraints());

        panSalaryRecovery1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panSalaryRecovery1.setMinimumSize(new java.awt.Dimension(275, 50));
        panSalaryRecovery1.setPreferredSize(new java.awt.Dimension(275, 120));
        panSalaryRecovery1.setLayout(new java.awt.GridBagLayout());

        lblSalaryRecovery.setText("Salary Recovery");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panSalaryRecovery1.add(lblSalaryRecovery, gridBagConstraints);

        panSalaryRecovery.setMinimumSize(new java.awt.Dimension(100, 20));
        panSalaryRecovery.setPreferredSize(new java.awt.Dimension(100, 20));
        panSalaryRecovery.setLayout(new java.awt.GridBagLayout());

        rdoSalaryRecovery_Yes.setText("Yes");
        rdoSalaryRecovery_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoSalaryRecovery_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoSalaryRecovery_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panSalaryRecovery.add(rdoSalaryRecovery_Yes, gridBagConstraints);

        rdoSalaryRecovery_No.setText("No");
        rdoSalaryRecovery_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoSalaryRecovery_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoSalaryRecovery_No.setPreferredSize(new java.awt.Dimension(45, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panSalaryRecovery.add(rdoSalaryRecovery_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panSalaryRecovery1.add(panSalaryRecovery, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panSalaryRecovery1.add(lblLockStatus1, gridBagConstraints);

        lblLockStatus.setText("Lock Status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panSalaryRecovery1.add(lblLockStatus, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        panDepositDetails.add(panSalaryRecovery1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        panAccountInformation.add(panDepositDetails, gridBagConstraints);

        panAccInf.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panAccInf.setMinimumSize(new java.awt.Dimension(835, 315));
        panAccInf.setPreferredSize(new java.awt.Dimension(835, 315));
        panAccInf.setLayout(new java.awt.GridBagLayout());

        panAccountInformationLeftPanel.setMinimumSize(new java.awt.Dimension(520, 270));
        panAccountInformationLeftPanel.setPreferredSize(new java.awt.Dimension(520, 270));
        panAccountInformationLeftPanel.setLayout(new java.awt.GridBagLayout());

        panOpenMode.setMinimumSize(new java.awt.Dimension(255, 240));
        panOpenMode.setPreferredSize(new java.awt.Dimension(255, 240));
        panOpenMode.setLayout(new java.awt.GridBagLayout());

        cboProductId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboProductId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProductId.setPopupWidth(200);
        cboProductId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProductIdActionPerformed(evt);
            }
        });
        cboProductId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cboProductIdFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panOpenMode.add(cboProductId, gridBagConstraints);

        lblCustomerId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCustomerId.setText("Customer Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblCustomerId, gridBagConstraints);

        lblProductId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblProductId.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblProductId, gridBagConstraints);

        panCustomerId.setLayout(new java.awt.GridBagLayout());

        txtCustomerId.setMinimumSize(new java.awt.Dimension(100, 21));
        txtCustomerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerIdActionPerformed(evt);
            }
        });
        txtCustomerId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustomerIdFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panCustomerId.add(txtCustomerId, gridBagConstraints);

        btnCustomerIdFileOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnCustomerIdFileOpen.setEnabled(false);
        btnCustomerIdFileOpen.setMaximumSize(new java.awt.Dimension(21, 21));
        btnCustomerIdFileOpen.setMinimumSize(new java.awt.Dimension(21, 21));
        btnCustomerIdFileOpen.setPreferredSize(new java.awt.Dimension(21, 21));
        btnCustomerIdFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomerIdFileOpenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panCustomerId.add(btnCustomerIdFileOpen, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panOpenMode.add(panCustomerId, gridBagConstraints);

        lblDepositNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDepositNo.setText("Deposit No.");
        lblDepositNo.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblDepositNo, gridBagConstraints);

        cboConstitution.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboConstitution.setMinimumSize(new java.awt.Dimension(100, 21));
        cboConstitution.setPopupWidth(200);
        cboConstitution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboConstitutionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panOpenMode.add(cboConstitution, gridBagConstraints);

        lblConstitution.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblConstitution.setText("Constitution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblConstitution, gridBagConstraints);

        cboSettlementMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboSettlementMode.setMinimumSize(new java.awt.Dimension(100, 21));
        cboSettlementMode.setPopupWidth(200);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panOpenMode.add(cboSettlementMode, gridBagConstraints);

        lblSettlementMode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSettlementMode.setText("Repay Instruction");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblSettlementMode, gridBagConstraints);

        lblCategory.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCategory.setText("Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblCategory, gridBagConstraints);

        cboCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboCategory.setMinimumSize(new java.awt.Dimension(100, 21));
        cboCategory.setPopupWidth(200);
        cboCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboCategoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panOpenMode.add(cboCategory, gridBagConstraints);

        lblProdDesc.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblProdDesc.setText("Product Desc");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblProdDesc, gridBagConstraints);

        lblProductDescription.setMinimumSize(new java.awt.Dimension(120, 15));
        lblProductDescription.setPreferredSize(new java.awt.Dimension(120, 15));
        lblProductDescription.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lblProductDescriptionMouseMoved(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panOpenMode.add(lblProductDescription, gridBagConstraints);

        lblRenewDep.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRenewDep.setText("Renewed Deposit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblRenewDep, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panOpenMode.add(lblValRenewDep, gridBagConstraints);

        lblAddressType.setText("Comm. Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblAddressType, gridBagConstraints);

        panStandingInstruction.setMinimumSize(new java.awt.Dimension(100, 20));
        panStandingInstruction.setPreferredSize(new java.awt.Dimension(100, 20));
        panStandingInstruction.setLayout(new java.awt.GridBagLayout());

        rdgStandingInstruciton.add(rdoStandingInstruction_Yes);
        rdoStandingInstruction_Yes.setText("Yes");
        rdoStandingInstruction_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoStandingInstruction_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoStandingInstruction_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoStandingInstruction_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoStandingInstruction_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panStandingInstruction.add(rdoStandingInstruction_Yes, gridBagConstraints);
        rdoStandingInstruction_Yes.getAccessibleContext().setAccessibleParent(rdoStandingInstruction_Yes);

        rdgStandingInstruciton.add(rdoStandingInstruction_No);
        rdoStandingInstruction_No.setText("No");
        rdoStandingInstruction_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoStandingInstruction_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoStandingInstruction_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoStandingInstruction_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoStandingInstruction_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panStandingInstruction.add(rdoStandingInstruction_No, gridBagConstraints);
        rdoStandingInstruction_No.getAccessibleContext().setAccessibleParent(rdoStandingInstruction_No);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panOpenMode.add(panStandingInstruction, gridBagConstraints);

        lblStandingInstruction.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStandingInstruction.setText("Standing Instruction");
        lblStandingInstruction.setMaximumSize(new java.awt.Dimension(105, 18));
        lblStandingInstruction.setMinimumSize(new java.awt.Dimension(114, 18));
        lblStandingInstruction.setPreferredSize(new java.awt.Dimension(118, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblStandingInstruction, gridBagConstraints);

        txtExistingAcctNo.setAllowAll(true);
        txtExistingAcctNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtExistingAcctNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtExistingAcctNoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 1);
        panOpenMode.add(txtExistingAcctNo, gridBagConstraints);

        lblExistingAcctNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExistingAcctNo.setText("Acct No / Mem No");
        lblExistingAcctNo.setMinimumSize(new java.awt.Dimension(118, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblExistingAcctNo, gridBagConstraints);

        lblExistingCustomer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExistingCustomer.setText("Existing Customer");
        lblExistingCustomer.setMinimumSize(new java.awt.Dimension(80, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panOpenMode.add(lblExistingCustomer, gridBagConstraints);

        panExistingCustomer.setMinimumSize(new java.awt.Dimension(100, 16));
        panExistingCustomer.setPreferredSize(new java.awt.Dimension(100, 18));
        panExistingCustomer.setLayout(new java.awt.GridBagLayout());

        rdgAutoRenewal.add(rdoExistingCustomer_Yes);
        rdoExistingCustomer_Yes.setText("Yes");
        rdoExistingCustomer_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoExistingCustomer_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoExistingCustomer_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoExistingCustomer_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExistingCustomer_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExistingCustomer.add(rdoExistingCustomer_Yes, gridBagConstraints);

        rdgAutoRenewal.add(rdoExistingCustomer_No);
        rdoExistingCustomer_No.setText("No");
        rdoExistingCustomer_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoExistingCustomer_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoExistingCustomer_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoExistingCustomer_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExistingCustomer_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExistingCustomer.add(rdoExistingCustomer_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panOpenMode.add(panExistingCustomer, gridBagConstraints);

        cboAddressType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboAddressType.setName("cboAddressType"); // NOI18N
        cboAddressType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboAddressTypeItemStateChanged(evt);
            }
        });
        cboAddressType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboAddressTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 4);
        panOpenMode.add(cboAddressType, gridBagConstraints);

        btnAgentIdFileOpen1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnAgentIdFileOpen1.setEnabled(false);
        btnAgentIdFileOpen1.setMinimumSize(new java.awt.Dimension(21, 21));
        btnAgentIdFileOpen1.setPreferredSize(new java.awt.Dimension(21, 21));
        btnAgentIdFileOpen1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgentIdFileOpen1ActionPerformed(evt);
            }
        });
        panOpenMode.add(btnAgentIdFileOpen1, new java.awt.GridBagConstraints());

        cPanel1.setLayout(new java.awt.GridBagLayout());

        btnDepositNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnDepositNo.setEnabled(false);
        btnDepositNo.setMinimumSize(new java.awt.Dimension(21, 21));
        btnDepositNo.setPreferredSize(new java.awt.Dimension(21, 21));
        btnDepositNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepositNoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        cPanel1.add(btnDepositNo, gridBagConstraints);

        txtDepsoitNo.setEditable(false);
        txtDepsoitNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtDepsoitNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepsoitNoActionPerformed(evt);
            }
        });
        txtDepsoitNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDepsoitNoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        cPanel1.add(txtDepsoitNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panOpenMode.add(cPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panAccountInformationLeftPanel.add(panOpenMode, gridBagConstraints);

        panCategory.setMaximumSize(new java.awt.Dimension(250, 240));
        panCategory.setMinimumSize(new java.awt.Dimension(250, 240));
        panCategory.setPreferredSize(new java.awt.Dimension(250, 240));
        panCategory.setLayout(new java.awt.GridBagLayout());

        lblRemarks.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRemarks.setText("Remarks");
        lblRemarks.setMinimumSize(new java.awt.Dimension(52, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lblRemarks, gridBagConstraints);

        txtRemarks.setMinimumSize(new java.awt.Dimension(100, 21));
        txtRemarks.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 1, 1);
        panCategory.add(txtRemarks, gridBagConstraints);

        txtPanNumber.setMinimumSize(new java.awt.Dimension(100, 21));
        txtPanNumber.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPanNumberFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 1);
        panCategory.add(txtPanNumber, gridBagConstraints);

        lblPanNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPanNumber.setText("Pan Number");
        lblPanNumber.setMinimumSize(new java.awt.Dimension(72, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lblPanNumber, gridBagConstraints);

        lblNomineeDetails.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNomineeDetails.setText("Nominee Details");
        lblNomineeDetails.setMinimumSize(new java.awt.Dimension(95, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lblNomineeDetails, gridBagConstraints);

        chkAuthorizedSignatory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAuthorizedSignatoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panCategory.add(chkAuthorizedSignatory, gridBagConstraints);

        lblTaxDeductions.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTaxDeductions.setText("Tax Deductions");
        lblTaxDeductions.setMinimumSize(new java.awt.Dimension(90, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lblTaxDeductions, gridBagConstraints);

        chkTaxDeductions.setSelected(true);
        chkTaxDeductions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTaxDeductionsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panCategory.add(chkTaxDeductions, gridBagConstraints);

        chkNomineeDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNomineeDetailsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panCategory.add(chkNomineeDetails, gridBagConstraints);

        lblAuthorizedSignatory.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAuthorizedSignatory.setText("Authorize Signatory");
        lblAuthorizedSignatory.setMaximumSize(new java.awt.Dimension(120, 18));
        lblAuthorizedSignatory.setMinimumSize(new java.awt.Dimension(114, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lblAuthorizedSignatory, gridBagConstraints);

        chk15hDeclarations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk15hDeclarationsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panCategory.add(chk15hDeclarations, gridBagConstraints);

        lbl15hDeclarations.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl15hDeclarations.setText("15H Declarations");
        lbl15hDeclarations.setMinimumSize(new java.awt.Dimension(99, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lbl15hDeclarations, gridBagConstraints);

        lblAgentId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAgentId.setText("Agent Id");
        lblAgentId.setMaximumSize(new java.awt.Dimension(48, 16));
        lblAgentId.setMinimumSize(new java.awt.Dimension(48, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lblAgentId, gridBagConstraints);

        panAgentId.setMinimumSize(new java.awt.Dimension(118, 21));
        panAgentId.setPreferredSize(new java.awt.Dimension(120, 21));
        panAgentId.setLayout(new java.awt.GridBagLayout());

        txtAgentId.setEditable(false);
        txtAgentId.setEnabled(false);
        txtAgentId.setMinimumSize(new java.awt.Dimension(97, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panAgentId.add(txtAgentId, gridBagConstraints);

        btnAgentIdFileOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnAgentIdFileOpen.setEnabled(false);
        btnAgentIdFileOpen.setMinimumSize(new java.awt.Dimension(21, 21));
        btnAgentIdFileOpen.setPreferredSize(new java.awt.Dimension(21, 21));
        btnAgentIdFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgentIdFileOpenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        panAgentId.add(btnAgentIdFileOpen, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panCategory.add(panAgentId, gridBagConstraints);

        lblAgentName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAgentName.setText("Auto Renewal");
        lblAgentName.setMinimumSize(new java.awt.Dimension(80, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lblAgentName, gridBagConstraints);

        lblValAgentname.setMinimumSize(new java.awt.Dimension(100, 21));
        lblValAgentname.setPreferredSize(new java.awt.Dimension(100, 21));
        lblValAgentname.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lblValAgentnameMouseMoved(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panCategory.add(lblValAgentname, gridBagConstraints);

        lblMember.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMember.setText("Member Type");
        lblMember.setMaximumSize(new java.awt.Dimension(47, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lblMember, gridBagConstraints);

        lblPowerOfAttorney.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPowerOfAttorney.setText("Power Of Attorney");
        lblPowerOfAttorney.setMinimumSize(new java.awt.Dimension(106, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lblPowerOfAttorney, gridBagConstraints);

        chkPowerOfAttorney.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPowerOfAttorneyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panCategory.add(chkPowerOfAttorney, gridBagConstraints);

        panAutoRenewal.setMinimumSize(new java.awt.Dimension(100, 16));
        panAutoRenewal.setPreferredSize(new java.awt.Dimension(100, 18));
        panAutoRenewal.setLayout(new java.awt.GridBagLayout());

        rdgAutoRenewal.add(rdoAutoRenewal_Yes);
        rdoAutoRenewal_Yes.setText("Yes");
        rdoAutoRenewal_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoAutoRenewal_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoAutoRenewal_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoAutoRenewal_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoAutoRenewal_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panAutoRenewal.add(rdoAutoRenewal_Yes, gridBagConstraints);

        rdgAutoRenewal.add(rdoAutoRenewal_No);
        rdoAutoRenewal_No.setText("No");
        rdoAutoRenewal_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoAutoRenewal_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoAutoRenewal_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoAutoRenewal_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoAutoRenewal_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panAutoRenewal.add(rdoAutoRenewal_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCategory.add(panAutoRenewal, gridBagConstraints);

        panWithInterest.setMinimumSize(new java.awt.Dimension(100, 16));
        panWithInterest.setPreferredSize(new java.awt.Dimension(100, 20));
        panWithInterest.setLayout(new java.awt.GridBagLayout());

        rdgWithIntRenewal.add(rdoWith_intRenewal_Yes);
        rdoWith_intRenewal_Yes.setText("Yes");
        rdoWith_intRenewal_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoWith_intRenewal_Yes.setMinimumSize(new java.awt.Dimension(50, 17));
        rdoWith_intRenewal_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoWith_intRenewal_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoWith_intRenewal_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panWithInterest.add(rdoWith_intRenewal_Yes, gridBagConstraints);
        rdoWith_intRenewal_Yes.getAccessibleContext().setAccessibleParent(rdoWith_intRenewal_Yes);

        rdgWithIntRenewal.add(rdoWith_intRenewal_No);
        rdoWith_intRenewal_No.setText("No");
        rdoWith_intRenewal_No.setMaximumSize(new java.awt.Dimension(50, 17));
        rdoWith_intRenewal_No.setMinimumSize(new java.awt.Dimension(50, 17));
        rdoWith_intRenewal_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoWith_intRenewal_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoWith_intRenewal_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panWithInterest.add(rdoWith_intRenewal_No, gridBagConstraints);
        rdoWith_intRenewal_No.getAccessibleContext().setAccessibleParent(rdoWith_intRenewal_No);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panCategory.add(panWithInterest, gridBagConstraints);

        lblWithIntAutoRenewal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblWithIntAutoRenewal.setText("Auto Renewal with Int");
        lblWithIntAutoRenewal.setMaximumSize(new java.awt.Dimension(125, 16));
        lblWithIntAutoRenewal.setMinimumSize(new java.awt.Dimension(125, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lblWithIntAutoRenewal, gridBagConstraints);

        lblMemberVal.setText("Member");
        lblMemberVal.setMaximumSize(new java.awt.Dimension(47, 16));
        lblMemberVal.setMinimumSize(new java.awt.Dimension(100, 16));
        lblMemberVal.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panCategory.add(lblMemberVal, gridBagConstraints);

        lblMatAlertRep.setText("Renewal Notice");
        lblMatAlertRep.setMaximumSize(new java.awt.Dimension(115, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panCategory.add(lblMatAlertRep, gridBagConstraints);

        panMatAlertRep.setMinimumSize(new java.awt.Dimension(100, 20));
        panMatAlertRep.setPreferredSize(new java.awt.Dimension(100, 20));
        panMatAlertRep.setLayout(new java.awt.GridBagLayout());

        rdgMatAlertReport.add(rdoMatAlert_report_Yes);
        rdoMatAlert_report_Yes.setText("Yes");
        rdoMatAlert_report_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoMatAlert_report_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoMatAlert_report_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoMatAlert_report_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoMatAlert_report_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panMatAlertRep.add(rdoMatAlert_report_Yes, gridBagConstraints);

        rdgMatAlertReport.add(rdoMatAlert_report_No);
        rdoMatAlert_report_No.setText("No");
        rdoMatAlert_report_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoMatAlert_report_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoMatAlert_report_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoMatAlert_report_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoMatAlert_report_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panMatAlertRep.add(rdoMatAlert_report_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panCategory.add(panMatAlertRep, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panAccountInformationLeftPanel.add(panCategory, gridBagConstraints);

        panModeOfOpening.setMinimumSize(new java.awt.Dimension(550, 19));
        panModeOfOpening.setPreferredSize(new java.awt.Dimension(550, 20));
        panModeOfOpening.setLayout(new java.awt.GridBagLayout());

        rdgOpeningMode.add(rdoOpeningMode_Multiple);
        rdoOpeningMode_Multiple.setText("Multiple");
        rdoOpeningMode_Multiple.setMaximumSize(new java.awt.Dimension(100, 21));
        rdoOpeningMode_Multiple.setMinimumSize(new java.awt.Dimension(100, 21));
        rdoOpeningMode_Multiple.setPreferredSize(new java.awt.Dimension(100, 21));
        rdoOpeningMode_Multiple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoOpeningMode_MultipleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panModeOfOpening.add(rdoOpeningMode_Multiple, gridBagConstraints);

        lblModeOfOpening.setText("Mode of Opening");
        lblModeOfOpening.setMinimumSize(new java.awt.Dimension(98, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        panModeOfOpening.add(lblModeOfOpening, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panAccountInformationLeftPanel.add(panModeOfOpening, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panAccInf.add(panAccountInformationLeftPanel, gridBagConstraints);

        panCustomerSide1.setMinimumSize(new java.awt.Dimension(305, 270));
        panCustomerSide1.setPreferredSize(new java.awt.Dimension(305, 270));
        panCustomerSide1.setLayout(new java.awt.GridBagLayout());

        panCustomerSide.setBorder(javax.swing.BorderFactory.createTitledBorder("Customer Details"));
        panCustomerSide.setMinimumSize(new java.awt.Dimension(305, 240));
        panCustomerSide.setPreferredSize(new java.awt.Dimension(305, 240));
        panCustomerSide.setLayout(new java.awt.GridBagLayout());

        panCustomerName.setMinimumSize(new java.awt.Dimension(280, 2));
        panCustomerName.setPreferredSize(new java.awt.Dimension(280, 2));
        panCustomerName.setLayout(new java.awt.GridBagLayout());

        lblValCustomerName.setMinimumSize(new java.awt.Dimension(70, 10));
        lblValCustomerName.setPreferredSize(new java.awt.Dimension(70, 10));
        lblValCustomerName.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lblValCustomerNameMouseMoved(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblValCustomerName, gridBagConstraints);

        lblCustomerName.setText("Cust Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblCustomerName, gridBagConstraints);

        lblDateOfBirth.setText("Date of Birth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblDateOfBirth, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblValDateOfBirth, gridBagConstraints);

        lblValStreet.setMinimumSize(new java.awt.Dimension(70, 10));
        lblValStreet.setPreferredSize(new java.awt.Dimension(70, 10));
        lblValStreet.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lblValStreetMouseMoved(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblValStreet, gridBagConstraints);

        lblStreet.setText("Street");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblStreet, gridBagConstraints);

        lblArea.setText("Area");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblArea, gridBagConstraints);

        lblValArea.setMinimumSize(new java.awt.Dimension(70, 10));
        lblValArea.setPreferredSize(new java.awt.Dimension(70, 10));
        lblValArea.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lblValAreaMouseMoved(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblValArea, gridBagConstraints);

        lblValCity.setMinimumSize(new java.awt.Dimension(50, 10));
        lblValCity.setPreferredSize(new java.awt.Dimension(50, 10));
        lblValCity.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lblValCityMouseMoved(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblValCity, gridBagConstraints);

        lblCity.setText("City");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblCity, gridBagConstraints);

        lblCountry.setText("Country");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblCountry, gridBagConstraints);

        lblValCountry.setMinimumSize(new java.awt.Dimension(50, 10));
        lblValCountry.setPreferredSize(new java.awt.Dimension(50, 10));
        lblValCountry.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lblValCountryMouseMoved(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblValCountry, gridBagConstraints);

        lblValPin.setMinimumSize(new java.awt.Dimension(50, 10));
        lblValPin.setPreferredSize(new java.awt.Dimension(50, 10));
        lblValPin.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lblValPinMouseMoved(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblValPin, gridBagConstraints);

        lblPin.setText("Pin");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblPin, gridBagConstraints);

        lblState.setText("State");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblState, gridBagConstraints);

        lblValState.setMinimumSize(new java.awt.Dimension(50, 10));
        lblValState.setPreferredSize(new java.awt.Dimension(50, 10));
        lblValState.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lblValStateMouseMoved(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCustomerName.add(lblValState, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panCustomerSide.add(panCustomerName, gridBagConstraints);

        panJointAcctHolder.setMinimumSize(new java.awt.Dimension(290, 100));
        panJointAcctHolder.setPreferredSize(new java.awt.Dimension(290, 100));
        panJointAcctHolder.setLayout(new java.awt.GridBagLayout());

        srpJointAcctHolder.setMinimumSize(new java.awt.Dimension(290, 100));
        srpJointAcctHolder.setPreferredSize(new java.awt.Dimension(290, 100));

        tblJointAcctHolder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Cust. Id", "Type", "Main / Joint"
            }
        ));
        tblJointAcctHolder.setMinimumSize(new java.awt.Dimension(290, 100));
        tblJointAcctHolder.setPreferredSize(null);
        tblJointAcctHolder.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tblJointAcctHolderFocusLost(evt);
            }
        });
        tblJointAcctHolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblJointAcctHolderMousePressed(evt);
            }
        });
        srpJointAcctHolder.setViewportView(tblJointAcctHolder);

        panJointAcctHolder.add(srpJointAcctHolder, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panCustomerSide.add(panJointAcctHolder, gridBagConstraints);

        panJointAcctButton.setMinimumSize(new java.awt.Dimension(235, 30));
        panJointAcctButton.setPreferredSize(new java.awt.Dimension(235, 30));
        panJointAcctButton.setLayout(new java.awt.GridBagLayout());

        btnJointAcctNew.setText("New");
        btnJointAcctNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJointAcctNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panJointAcctButton.add(btnJointAcctNew, gridBagConstraints);

        btnJointAcctDel.setText("Delete");
        btnJointAcctDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJointAcctDelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panJointAcctButton.add(btnJointAcctDel, gridBagConstraints);

        btnJointAcctToMain.setText("To Main");
        btnJointAcctToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJointAcctToMainActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panJointAcctButton.add(btnJointAcctToMain, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panCustomerSide.add(panJointAcctButton, gridBagConstraints);

        btnDisplay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_AUTHORIZE.gif"))); // NOI18N
        btnDisplay.setText("Authorized Persons");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        panCustomerSide.add(btnDisplay, gridBagConstraints);

        panJointAcctButton1.setLayout(new java.awt.GridBagLayout());

        lblAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAmount.setText("Amount");
        lblAmount.setMinimumSize(new java.awt.Dimension(72, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panJointAcctButton1.add(lblAmount, gridBagConstraints);

        lblDepositsOpened.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDepositsOpened.setText("Deposits Opened");
        lblDepositsOpened.setMinimumSize(new java.awt.Dimension(72, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panJointAcctButton1.add(lblDepositsOpened, gridBagConstraints);

        txtAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 1);
        panJointAcctButton1.add(txtAmount, gridBagConstraints);

        txtDepositsOpened.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 1);
        panJointAcctButton1.add(txtDepositsOpened, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        panCustomerSide.add(panJointAcctButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        panCustomerSide1.add(panCustomerSide, gridBagConstraints);

        jPanel2.setMinimumSize(new java.awt.Dimension(290, 25));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setForeground(new java.awt.Color(51, 102, 255));
        jLabel1.setText("Next Account Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(jLabel1, gridBagConstraints);

        txtNextAccNo.setEditable(false);
        txtNextAccNo.setEnabled(false);
        txtNextAccNo.setPreferredSize(new java.awt.Dimension(150, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(txtNextAccNo, gridBagConstraints);

        panCustomerSide1.add(jPanel2, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        panAccInf.add(panCustomerSide1, gridBagConstraints);

        panMobileBanking.setBorder(javax.swing.BorderFactory.createTitledBorder("Mobile Banking"));
        panMobileBanking.setMinimumSize(new java.awt.Dimension(840, 35));
        panMobileBanking.setName(""); // NOI18N
        panMobileBanking.setOpaque(false);
        panMobileBanking.setPreferredSize(new java.awt.Dimension(840, 35));
        panMobileBanking.setLayout(new java.awt.GridBagLayout());

        chkMobileNumRequired.setText("Required");
        chkMobileNumRequired.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkMobileNumRequired.setMinimumSize(new java.awt.Dimension(80, 21));
        chkMobileNumRequired.setPreferredSize(new java.awt.Dimension(80, 21));
        chkMobileNumRequired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMobileNumRequiredActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panMobileBanking.add(chkMobileNumRequired, gridBagConstraints);

        lblMobileNo.setText("Mobile No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panMobileBanking.add(lblMobileNo, gridBagConstraints);

        txtMobileNo.setAllowAll(true);
        txtMobileNo.setMaxLength(16);
        txtMobileNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtMobileNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMobileNoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 13);
        panMobileBanking.add(txtMobileNo, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 4);
        panMobileBanking.add(tdtMobileSubscribedFrom, gridBagConstraints);

        lblMobileSubscribedFrom.setText("Subscribed From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panMobileBanking.add(lblMobileSubscribedFrom, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panAccInf.add(panMobileBanking, gridBagConstraints);

        panAccountInformation.add(panAccInf, new java.awt.GridBagConstraints());

        tabTermDeposit.addTab("Account Information", panAccountInformation);

        panTransferInDetails.setLayout(new java.awt.GridBagLayout());

        panTransInDet.setLayout(new java.awt.GridBagLayout());

        panTransferingBranchCode.setBorder(javax.swing.BorderFactory.createTitledBorder("Branch Details"));
        panTransferingBranchCode.setLayout(new java.awt.GridBagLayout());

        panTranBranCode.setLayout(new java.awt.GridBagLayout());

        tdtOriginalDateOfDeposit.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtOriginalDateOfDeposit.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtOriginalDateOfDeposit.setEnabled(false);
        tdtOriginalDateOfDeposit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtOriginalDateOfDepositFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
        panTranBranCode.add(tdtOriginalDateOfDeposit, gridBagConstraints);

        txtOriginalAccountNumber.setEditable(false);
        txtOriginalAccountNumber.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
        panTranBranCode.add(txtOriginalAccountNumber, gridBagConstraints);

        txtTransferingBranchCode.setEditable(false);
        txtTransferingBranchCode.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
        panTranBranCode.add(txtTransferingBranchCode, gridBagConstraints);

        lblTransferingBranchCode.setText("Transfering Branch Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 4, 4);
        panTranBranCode.add(lblTransferingBranchCode, gridBagConstraints);

        lblOriginalAccountNumber.setText("Original Account Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTranBranCode.add(lblOriginalAccountNumber, gridBagConstraints);

        lblOriginalDateOfDeposit.setText("Original Date of Deposit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTranBranCode.add(lblOriginalDateOfDeposit, gridBagConstraints);

        btnOriginalAccountNumberHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnOriginalAccountNumberHelp.setEnabled(false);
        btnOriginalAccountNumberHelp.setMaximumSize(new java.awt.Dimension(21, 21));
        btnOriginalAccountNumberHelp.setMinimumSize(new java.awt.Dimension(21, 21));
        btnOriginalAccountNumberHelp.setPreferredSize(new java.awt.Dimension(21, 21));
        btnOriginalAccountNumberHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOriginalAccountNumberHelpActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panTranBranCode.add(btnOriginalAccountNumberHelp, gridBagConstraints);

        btnTransBranchCodeHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnTransBranchCodeHelp.setEnabled(false);
        btnTransBranchCodeHelp.setMaximumSize(new java.awt.Dimension(21, 21));
        btnTransBranchCodeHelp.setMinimumSize(new java.awt.Dimension(21, 21));
        btnTransBranchCodeHelp.setPreferredSize(new java.awt.Dimension(21, 21));
        btnTransBranchCodeHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransBranchCodeHelpActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panTranBranCode.add(btnTransBranchCodeHelp, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panTransferingBranchCode.add(panTranBranCode, gridBagConstraints);

        panTranBrancName.setLayout(new java.awt.GridBagLayout());

        txtPrintedNoOfTheFdr.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTranBrancName.add(txtPrintedNoOfTheFdr, gridBagConstraints);

        lblPrintedNoOfTheFdr.setText("Printed No. of the FDR");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTranBrancName.add(lblPrintedNoOfTheFdr, gridBagConstraints);

        lblTransferingBranchName.setText("Transfering Branch Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 38, 4, 4);
        panTranBrancName.add(lblTransferingBranchName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTranBrancName.add(lblValTransferingBranchName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        panTransferingBranchCode.add(panTranBrancName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTransInDet.add(panTransferingBranchCode, gridBagConstraints);

        panInterBranchFunds.setBorder(javax.swing.BorderFactory.createTitledBorder("Inter Branch Funds"));
        panInterBranchFunds.setLayout(new java.awt.GridBagLayout());

        panIntBranchTransferNo.setLayout(new java.awt.GridBagLayout());

        lblInterBranchTransferNo.setText("Inter Branch Transfer No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 23, 4, 4);
        panIntBranchTransferNo.add(lblInterBranchTransferNo, gridBagConstraints);

        txtInterBranchTransferNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panIntBranchTransferNo.add(txtInterBranchTransferNo, gridBagConstraints);

        txtTransferingAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panIntBranchTransferNo.add(txtTransferingAmount, gridBagConstraints);

        lblTransferingAmount.setText("Transferred Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panIntBranchTransferNo.add(lblTransferingAmount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInterBranchFunds.add(panIntBranchTransferNo, gridBagConstraints);

        panDateOfTransfer.setLayout(new java.awt.GridBagLayout());

        lblDateOfTransfer.setText("Date of Transfer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 71, 4, 4);
        panDateOfTransfer.add(lblDateOfTransfer, gridBagConstraints);

        tdtDateOfTransfer.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtDateOfTransfer.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtDateOfTransfer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tdtDateOfTransferFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtDateOfTransferFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDateOfTransfer.add(tdtDateOfTransfer, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        panInterBranchFunds.add(panDateOfTransfer, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTransInDet.add(panInterBranchFunds, gridBagConstraints);

        panLastInterestCalculatedDate.setBorder(javax.swing.BorderFactory.createTitledBorder("Other Details"));
        panLastInterestCalculatedDate.setLayout(new java.awt.GridBagLayout());

        panLastIntCalDt.setLayout(new java.awt.GridBagLayout());

        lblLastInterestCalculatedDate.setText("Last Interest Calculated Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLastIntCalDt.add(lblLastInterestCalculatedDate, gridBagConstraints);

        tdtLastInterestCalculatedDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtLastInterestCalculatedDate.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtLastInterestCalculatedDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtLastInterestCalculatedDateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLastIntCalDt.add(tdtLastInterestCalculatedDate, gridBagConstraints);

        txtInterestProvidedAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        txtInterestProvidedAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInterestProvidedAmountFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtInterestProvidedAmountFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLastIntCalDt.add(txtInterestProvidedAmount, gridBagConstraints);

        txtInterestPaid.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLastIntCalDt.add(txtInterestPaid, gridBagConstraints);

        lblInterestPaid.setText("Interest Paid");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLastIntCalDt.add(lblInterestPaid, gridBagConstraints);

        lblInterestProvidedAmount.setText("Interest Provided Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLastIntCalDt.add(lblInterestProvidedAmount, gridBagConstraints);

        lblLastTdsCollected.setText("Last TDS Collected");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLastIntCalDt.add(lblLastTdsCollected, gridBagConstraints);

        txtLastTdsCollected.setMinimumSize(new java.awt.Dimension(100, 21));
        txtLastTdsCollected.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLastTdsCollectedFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLastIntCalDt.add(txtLastTdsCollected, gridBagConstraints);

        tdtTdsCollectedUpto.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtTdsCollectedUpto.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtTdsCollectedUpto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtTdsCollectedUptoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLastIntCalDt.add(tdtTdsCollectedUpto, gridBagConstraints);

        lblTdsCollectedUpto.setText("TDS Collected Upto");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLastIntCalDt.add(lblTdsCollectedUpto, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panLastInterestCalculatedDate.add(panLastIntCalDt, gridBagConstraints);

        panTDSCollUpto.setLayout(new java.awt.GridBagLayout());

        txtTotalInstallmentReceived.setEditable(false);
        txtTotalInstallmentReceived.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTDSCollUpto.add(txtTotalInstallmentReceived, gridBagConstraints);

        lblValBalanceInterestPayable.setMaximumSize(new java.awt.Dimension(100, 15));
        lblValBalanceInterestPayable.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTDSCollUpto.add(lblValBalanceInterestPayable, gridBagConstraints);

        lblBalanceInterestPayable.setText("Balance Interest Payable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTDSCollUpto.add(lblBalanceInterestPayable, gridBagConstraints);

        lblTotalInstallmentReceived.setText("Total Installment Received");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 30, 4, 4);
        panTDSCollUpto.add(lblTotalInstallmentReceived, gridBagConstraints);

        lblTotalNumberOfInstallments.setText("Total Number of Installments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTDSCollUpto.add(lblTotalNumberOfInstallments, gridBagConstraints);

        txtTotalNumberOfInstallments.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTDSCollUpto.add(txtTotalNumberOfInstallments, gridBagConstraints);

        tdtLastInstallmentReceivedDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtLastInstallmentReceivedDate.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtLastInstallmentReceivedDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtLastInstallmentReceivedDateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTDSCollUpto.add(tdtLastInstallmentReceivedDate, gridBagConstraints);

        lblLastInstallmentReceivedDate.setText("Last Installment Received date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTDSCollUpto.add(lblLastInstallmentReceivedDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        panLastInterestCalculatedDate.add(panTDSCollUpto, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTransInDet.add(panLastInterestCalculatedDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panTransferInDetails.add(panTransInDet, gridBagConstraints);

        tabTermDeposit.addTab("Transfer In Details", panTransferInDetails);

        panPresentPositionDetails.setMinimumSize(new java.awt.Dimension(825, 550));
        panPresentPositionDetails.setName(""); // NOI18N
        panPresentPositionDetails.setPreferredSize(new java.awt.Dimension(825, 550));
        panPresentPositionDetails.setLayout(new java.awt.GridBagLayout());

        panPresentPosition.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Present Deposit Details", 0, 0, new java.awt.Font("MS Sans Serif", 0, 12))); // NOI18N
        panPresentPosition.setToolTipText("Present Deposit Details");
        panPresentPosition.setMinimumSize(new java.awt.Dimension(825, 550));
        panPresentPosition.setName("Lien / Freeze Details"); // NOI18N
        panPresentPosition.setPreferredSize(new java.awt.Dimension(825, 550));
        panPresentPosition.setLayout(new java.awt.GridBagLayout());

        panClosingPosition.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panClosingPosition.setToolTipText("Deposit Details");
        panClosingPosition.setMinimumSize(new java.awt.Dimension(425, 325));
        panClosingPosition.setPreferredSize(new java.awt.Dimension(425, 325));
        panClosingPosition.setLayout(new java.awt.GridBagLayout());

        lblAvailableBalance.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAvailableBalance.setText("Available Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblAvailableBalance, gridBagConstraints);

        lblAvailableBalanceValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblAvailableBalanceValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblAvailableBalanceValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblAvailableBalanceValue, gridBagConstraints);

        lblClearBalance.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClearBalance.setText("Clear Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblClearBalance, gridBagConstraints);

        lblClearBalanceValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblClearBalanceValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblClearBalanceValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblClearBalanceValue, gridBagConstraints);

        lblTotalBalance.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalBalance.setText("Total Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblTotalBalance, gridBagConstraints);

        lblPaidnterestAmountValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblPaidnterestAmountValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblPaidnterestAmountValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblPaidnterestAmountValue, gridBagConstraints);

        lblTotalInterestValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblTotalInterestValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblTotalInterestValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblTotalInterestValue, gridBagConstraints);

        lblTotalInterest.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalInterest.setText("Total Interest Amount");
        lblTotalInterest.setMaximumSize(new java.awt.Dimension(125, 18));
        lblTotalInterest.setMinimumSize(new java.awt.Dimension(125, 18));
        lblTotalInterest.setPreferredSize(new java.awt.Dimension(125, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblTotalInterest, gridBagConstraints);

        lblLastInterestPaidDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLastInterestPaidDate.setText("Last Interest Paid Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblLastInterestPaidDate, gridBagConstraints);

        lblBalanceInterestAmountValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblBalanceInterestAmountValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblBalanceInterestAmountValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblBalanceInterestAmountValue, gridBagConstraints);

        lblPaidInterestAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPaidInterestAmount.setText("Interest Amount Paid");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblPaidInterestAmount, gridBagConstraints);

        lblBalanceInterestAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBalanceInterestAmount.setText("Balance Interest Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblBalanceInterestAmount, gridBagConstraints);

        lblLastInterestPaidDateValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblLastInterestPaidDateValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblLastInterestPaidDateValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblLastInterestPaidDateValue, gridBagConstraints);

        lblTotalBalanceValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblTotalBalanceValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblTotalBalanceValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblTotalBalanceValue, gridBagConstraints);

        lblTotalInterestPayableValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblTotalInterestPayableValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblTotalInterestPayableValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblTotalInterestPayableValue, gridBagConstraints);

        lblTotalInterestPayable.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalInterestPayable.setText("Total Interest Payable");
        lblTotalInterestPayable.setMaximumSize(new java.awt.Dimension(127, 18));
        lblTotalInterestPayable.setMinimumSize(new java.awt.Dimension(127, 18));
        lblTotalInterestPayable.setPreferredSize(new java.awt.Dimension(127, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblTotalInterestPayable, gridBagConstraints);

        lblLastInterestPaidDate1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLastInterestPaidDate1.setText("Last Interest Provision Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblLastInterestPaidDate1, gridBagConstraints);

        lblLastInterestProvisionDateValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblLastInterestProvisionDateValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblLastInterestProvisionDateValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblLastInterestProvisionDateValue, gridBagConstraints);

        lblAccHead.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccHead.setText("GL Head");
        lblAccHead.setMaximumSize(new java.awt.Dimension(52, 18));
        lblAccHead.setMinimumSize(new java.awt.Dimension(52, 18));
        lblAccHead.setPreferredSize(new java.awt.Dimension(52, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblAccHead, gridBagConstraints);

        lblAccHeadValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblAccHeadValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblAccHeadValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblAccHeadValue, gridBagConstraints);

        lblDelayedAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDelayedAmount.setText("Delayed Amount");
        lblDelayedAmount.setMaximumSize(new java.awt.Dimension(52, 18));
        lblDelayedAmount.setMinimumSize(new java.awt.Dimension(100, 18));
        lblDelayedAmount.setPreferredSize(new java.awt.Dimension(100, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblDelayedAmount, gridBagConstraints);

        lblDelayedMonth.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDelayedMonth.setText("Delayed Month");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosingPosition.add(lblDelayedMonth, gridBagConstraints);

        lblDelayedMonthValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblDelayedMonthValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblDelayedMonthValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblDelayedMonthValue, gridBagConstraints);

        lblDelayedAmountValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblDelayedAmountValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblDelayedAmountValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosingPosition.add(lblDelayedAmountValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weighty = 0.1;
        panPresentPosition.add(panClosingPosition, gridBagConstraints);

        panLienLoanDetails1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tax Details"));
        panLienLoanDetails1.setToolTipText("Tax Details");
        panLienLoanDetails1.setMinimumSize(new java.awt.Dimension(460, 200));
        panLienLoanDetails1.setPreferredSize(new java.awt.Dimension(460, 100));
        panLienLoanDetails1.setLayout(new java.awt.GridBagLayout());

        lblTdsNo.setText("Deposit Lien No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panLienLoanDetails1.add(lblTdsNo, gridBagConstraints);

        lblTdsAmount.setText("Tds Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panLienLoanDetails1.add(lblTdsAmount, gridBagConstraints);

        lblTdsDate.setText("Lien Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panLienLoanDetails1.add(lblTdsDate, gridBagConstraints);

        lblClTDSCollectedValue2.setMaximumSize(new java.awt.Dimension(100, 16));
        lblClTDSCollectedValue2.setMinimumSize(new java.awt.Dimension(100, 16));
        lblClTDSCollectedValue2.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panLienLoanDetails1.add(lblClTDSCollectedValue2, gridBagConstraints);

        lblTdsValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblTdsValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblTdsValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panLienLoanDetails1.add(lblTdsValue, gridBagConstraints);

        lblTdsAmountValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblTdsAmountValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblTdsAmountValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panLienLoanDetails1.add(lblTdsAmountValue, gridBagConstraints);

        lblTdsDateValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblTdsDateValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblTdsDateValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panLienLoanDetails1.add(lblTdsDateValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        panPresentPosition.add(panLienLoanDetails1, gridBagConstraints);

        srpLien.setToolTipText("Lien Details");
        srpLien.setMaximumSize(new java.awt.Dimension(300, 75));
        srpLien.setMinimumSize(new java.awt.Dimension(425, 275));
        srpLien.setPreferredSize(new java.awt.Dimension(425, 275));

        tblLien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        tblLien.setOpaque(false);
        tblLien.setPreferredSize(new java.awt.Dimension(75, 80));
        tblLien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLienMouseClicked(evt);
            }
        });
        srpLien.setViewportView(tblLien);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        panPresentPosition.add(srpLien, gridBagConstraints);
        srpLien.getAccessibleContext().setAccessibleName("Lien Details");

        panClosedDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panClosedDetails.setToolTipText("Closed Details");
        panClosedDetails.setMinimumSize(new java.awt.Dimension(425, 225));
        panClosedDetails.setPreferredSize(new java.awt.Dimension(425, 225));
        panClosedDetails.setLayout(new java.awt.GridBagLayout());

        lblClosedDateValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblClosedDateValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblClosedDateValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosedDetails.add(lblClosedDateValue, gridBagConstraints);

        lblClosingTypeValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblClosingTypeValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblClosingTypeValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosedDetails.add(lblClosingTypeValue, gridBagConstraints);

        lblRenewalDateValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblRenewalDateValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblRenewalDateValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosedDetails.add(lblRenewalDateValue, gridBagConstraints);

        lblClosingRateOfInterestValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblClosingRateOfInterestValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblClosingRateOfInterestValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosedDetails.add(lblClosingRateOfInterestValue, gridBagConstraints);

        lblClosingInterestAmountValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblClosingInterestAmountValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblClosingInterestAmountValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosedDetails.add(lblClosingInterestAmountValue, gridBagConstraints);

        lblSBRateOfInterestValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSBRateOfInterestValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSBRateOfInterestValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosedDetails.add(lblSBRateOfInterestValue, gridBagConstraints);

        lblSBInterestAmountValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSBInterestAmountValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSBInterestAmountValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosedDetails.add(lblSBInterestAmountValue, gridBagConstraints);

        lblSBinterestAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSBinterestAmount.setText("SB Interest Amount");
        lblSBinterestAmount.setMaximumSize(new java.awt.Dimension(78, 18));
        lblSBinterestAmount.setMinimumSize(new java.awt.Dimension(115, 18));
        lblSBinterestAmount.setPreferredSize(new java.awt.Dimension(115, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosedDetails.add(lblSBinterestAmount, gridBagConstraints);

        lblSBRateOfInterest.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSBRateOfInterest.setText("Period Run for SB Interest");
        lblSBRateOfInterest.setMaximumSize(new java.awt.Dimension(78, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosedDetails.add(lblSBRateOfInterest, gridBagConstraints);

        lblClosingInterestAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClosingInterestAmount.setText("Closing Interest Amount");
        lblClosingInterestAmount.setMaximumSize(new java.awt.Dimension(78, 18));
        lblClosingInterestAmount.setMinimumSize(new java.awt.Dimension(141, 18));
        lblClosingInterestAmount.setPreferredSize(new java.awt.Dimension(141, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosedDetails.add(lblClosingInterestAmount, gridBagConstraints);

        lblClosingRateOfInterest.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClosingRateOfInterest.setText("Closing Rate of Interest");
        lblClosingRateOfInterest.setMaximumSize(new java.awt.Dimension(78, 18));
        lblClosingRateOfInterest.setMinimumSize(new java.awt.Dimension(138, 18));
        lblClosingRateOfInterest.setPreferredSize(new java.awt.Dimension(138, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosedDetails.add(lblClosingRateOfInterest, gridBagConstraints);

        lblRenewalDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRenewalDate.setText("Date of Renewal");
        lblRenewalDate.setMaximumSize(new java.awt.Dimension(78, 18));
        lblRenewalDate.setMinimumSize(new java.awt.Dimension(95, 18));
        lblRenewalDate.setPreferredSize(new java.awt.Dimension(97, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosedDetails.add(lblRenewalDate, gridBagConstraints);

        lblClosingType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClosingType.setText("Closing Type");
        lblClosingType.setMaximumSize(new java.awt.Dimension(78, 18));
        lblClosingType.setMinimumSize(new java.awt.Dimension(76, 18));
        lblClosingType.setPreferredSize(new java.awt.Dimension(77, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosedDetails.add(lblClosingType, gridBagConstraints);

        lblClosedDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClosedDate.setText("Closed Date");
        lblClosedDate.setMaximumSize(new java.awt.Dimension(74, 18));
        lblClosedDate.setMinimumSize(new java.awt.Dimension(72, 18));
        lblClosedDate.setPreferredSize(new java.awt.Dimension(73, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosedDetails.add(lblClosedDate, gridBagConstraints);

        panDeathClaim.setMinimumSize(new java.awt.Dimension(90, 20));
        panDeathClaim.setPreferredSize(new java.awt.Dimension(90, 20));
        panDeathClaim.setLayout(new java.awt.GridBagLayout());

        rdgDeathClaim.add(rdoDeathClaim_Yes);
        rdoDeathClaim_Yes.setText("Yes");
        rdoDeathClaim_Yes.setMaximumSize(new java.awt.Dimension(60, 18));
        rdoDeathClaim_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoDeathClaim_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panDeathClaim.add(rdoDeathClaim_Yes, gridBagConstraints);

        rdgDeathClaim.add(rdoDeathClaim_No);
        rdoDeathClaim_No.setText("No");
        rdoDeathClaim_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoDeathClaim_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoDeathClaim_No.setPreferredSize(new java.awt.Dimension(45, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panDeathClaim.add(rdoDeathClaim_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosedDetails.add(panDeathClaim, gridBagConstraints);

        lblDeathClaim.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDeathClaim.setText("Death Claim");
        lblDeathClaim.setMaximumSize(new java.awt.Dimension(75, 18));
        lblDeathClaim.setMinimumSize(new java.awt.Dimension(72, 18));
        lblDeathClaim.setPreferredSize(new java.awt.Dimension(72, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosedDetails.add(lblDeathClaim, gridBagConstraints);

        lbldepositPeriodRun.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbldepositPeriodRun.setText("Deposit Period Run");
        lbldepositPeriodRun.setMaximumSize(new java.awt.Dimension(78, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosedDetails.add(lbldepositPeriodRun, gridBagConstraints);

        lbldepositPeriodRunValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lbldepositPeriodRunValue.setMinimumSize(new java.awt.Dimension(250, 16));
        lbldepositPeriodRunValue.setPreferredSize(new java.awt.Dimension(250, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosedDetails.add(lbldepositPeriodRunValue, gridBagConstraints);

        lblTransferOutBranch.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTransferOutBranch.setText("TransferOut Branch Name");
        lblTransferOutBranch.setMaximumSize(new java.awt.Dimension(78, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosedDetails.add(lblTransferOutBranch, gridBagConstraints);

        lblTransferOutBranchValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblTransferOutBranchValue.setMinimumSize(new java.awt.Dimension(175, 16));
        lblTransferOutBranchValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosedDetails.add(lblTransferOutBranchValue, gridBagConstraints);

        lblRenewalDepositAc.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRenewalDepositAc.setText("Renewal Deposit No");
        lblRenewalDepositAc.setMaximumSize(new java.awt.Dimension(78, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panClosedDetails.add(lblRenewalDepositAc, gridBagConstraints);

        lblRenewalDepositAcValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblRenewalDepositAcValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblRenewalDepositAcValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panClosedDetails.add(lblRenewalDepositAcValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panPresentPosition.add(panClosedDetails, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panPresentPositionDetails.add(panPresentPosition, gridBagConstraints);
        panPresentPosition.getAccessibleContext().setAccessibleName("Lien / Freeze Details");

        tabTermDeposit.addTab("Present Position Details", panPresentPositionDetails);

        panStandingInstructionDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Present Deposit Details", 0, 0, new java.awt.Font("MS Sans Serif", 0, 12))); // NOI18N
        panStandingInstructionDetails.setToolTipText("Standing Instruction Details");
        panStandingInstructionDetails.setMinimumSize(new java.awt.Dimension(825, 500));
        panStandingInstructionDetails.setName("Lien / Freeze Details"); // NOI18N
        panStandingInstructionDetails.setPreferredSize(new java.awt.Dimension(825, 550));
        panStandingInstructionDetails.setLayout(new java.awt.GridBagLayout());

        panSISchedule2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panSISchedule2.setToolTipText("Deposit Details");
        panSISchedule2.setMinimumSize(new java.awt.Dimension(800, 400));
        panSISchedule2.setPreferredSize(new java.awt.Dimension(800, 250));
        panSISchedule2.setLayout(new java.awt.GridBagLayout());

        panSIDebitDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Standing Instruction Debit Details"));
        panSIDebitDetails.setToolTipText("Standing Instruction Debit Details");
        panSIDebitDetails.setMinimumSize(new java.awt.Dimension(380, 200));
        panSIDebitDetails.setPreferredSize(new java.awt.Dimension(380, 200));
        panSIDebitDetails.setLayout(new java.awt.GridBagLayout());

        lblSIProductType.setText("Product Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSIDebitDetails.add(lblSIProductType, gridBagConstraints);

        lblSIProductTypeValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSIProductTypeValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSIProductTypeValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSIDebitDetails.add(lblSIProductTypeValue, gridBagConstraints);

        lblSIProductId.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSIDebitDetails.add(lblSIProductId, gridBagConstraints);

        lblSIProductIdValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSIProductIdValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSIProductIdValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSIDebitDetails.add(lblSIProductIdValue, gridBagConstraints);

        lblSIAccountNo.setText("Account No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSIDebitDetails.add(lblSIAccountNo, gridBagConstraints);

        lblSIAmount.setText("Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSIDebitDetails.add(lblSIAmount, gridBagConstraints);

        lblSIAmountValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSIAmountValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSIAmountValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSIDebitDetails.add(lblSIAmountValue, gridBagConstraints);

        lblSIAccountNoValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSIAccountNoValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSIAccountNoValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSIDebitDetails.add(lblSIAccountNoValue, gridBagConstraints);

        lblSIParticulars.setText("Particulars");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSIDebitDetails.add(lblSIParticulars, gridBagConstraints);

        lblSIParticularsValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSIParticularsValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSIParticularsValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSIDebitDetails.add(lblSIParticularsValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weighty = 0.1;
        panSISchedule2.add(panSIDebitDetails, gridBagConstraints);

        panSISchedule.setBorder(javax.swing.BorderFactory.createTitledBorder("Standing Instruction Schedule Details"));
        panSISchedule.setToolTipText("Standing Instruction Schedule Details");
        panSISchedule.setMinimumSize(new java.awt.Dimension(380, 200));
        panSISchedule.setPreferredSize(new java.awt.Dimension(380, 200));
        panSISchedule.setLayout(new java.awt.GridBagLayout());

        lblSIFrequency.setText("Frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIFrequency, gridBagConstraints);

        lblSIFrequencyValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSIFrequencyValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSIFrequencyValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIFrequencyValue, gridBagConstraints);

        lblSIForwardCount.setText("Forward Count");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIForwardCount, gridBagConstraints);

        lblSIForwardCountValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSIForwardCountValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSIForwardCountValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIForwardCountValue, gridBagConstraints);

        lblSIStartDate.setText("Start Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIStartDate, gridBagConstraints);

        lblSIStartDateValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSIStartDateValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSIStartDateValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIStartDateValue, gridBagConstraints);

        lblSIEndDate.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIEndDate, gridBagConstraints);

        lblSIEndDateValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSIEndDateValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSIEndDateValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIEndDateValue, gridBagConstraints);

        lblAcceptanceCharges.setText("Acceptance Charges");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblAcceptanceCharges, gridBagConstraints);

        lblAcceptanceChargesValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblAcceptanceChargesValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblAcceptanceChargesValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblAcceptanceChargesValue, gridBagConstraints);

        lblSIFailureCharges.setText("Failure Charges");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIFailureCharges, gridBagConstraints);

        lblSIFailureChargesValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSIFailureChargesValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSIFailureChargesValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIFailureChargesValue, gridBagConstraints);

        lblSIExecutionCharges.setText("Execution Charges");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIExecutionCharges, gridBagConstraints);

        lblSIExecutionChargesValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSIExecutionChargesValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSIExecutionChargesValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panSISchedule.add(lblSIExecutionChargesValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weighty = 0.1;
        panSISchedule2.add(panSISchedule, gridBagConstraints);
        panSISchedule.getAccessibleContext().setAccessibleName("Standing Instruction");

        panSIDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panSIDetails.setToolTipText("Standing Instruction Debit Details");
        panSIDetails.setMinimumSize(new java.awt.Dimension(760, 50));
        panSIDetails.setPreferredSize(new java.awt.Dimension(760, 50));
        panSIDetails.setLayout(new java.awt.GridBagLayout());

        lblSICreatedDate.setText("Created Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        panSIDetails.add(lblSICreatedDate, gridBagConstraints);

        lblSICreatedDateValue.setMaximumSize(new java.awt.Dimension(100, 16));
        lblSICreatedDateValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblSICreatedDateValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 150);
        panSIDetails.add(lblSICreatedDateValue, gridBagConstraints);

        lblSINo.setText("Standing Instruction No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        panSIDetails.add(lblSINo, gridBagConstraints);

        lblSINoValue.setMaximumSize(new java.awt.Dimension(120, 16));
        lblSINoValue.setMinimumSize(new java.awt.Dimension(120, 16));
        lblSINoValue.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 150);
        panSIDetails.add(lblSINoValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.weighty = 0.1;
        panSISchedule2.add(panSIDetails, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.weighty = 0.1;
        panStandingInstructionDetails.add(panSISchedule2, gridBagConstraints);

        tabTermDeposit.addTab("Standing Instruction Details", panStandingInstructionDetails);
        panStandingInstructionDetails.getAccessibleContext().setAccessibleName("Standing Instruction Details");
        panStandingInstructionDetails.getAccessibleContext().setAccessibleParent(panStandingInstructionDetails);

        panRenewalInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panRenewalInformation.setToolTipText("");
        panRenewalInformation.setMinimumSize(new java.awt.Dimension(840, 650));
        panRenewalInformation.setPreferredSize(new java.awt.Dimension(840, 650));
        panRenewalInformation.setLayout(new java.awt.GridBagLayout());

        panNewDepositDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Renewal Deposit Details", 0, 0, new java.awt.Font("MS Sans Serif", 0, 12))); // NOI18N
        panNewDepositDetails.setMinimumSize(new java.awt.Dimension(840, 240));
        panNewDepositDetails.setPreferredSize(new java.awt.Dimension(840, 240));
        panNewDepositDetails.setLayout(new java.awt.GridBagLayout());

        panNewInput.setMinimumSize(new java.awt.Dimension(658, 202));
        panNewInput.setPreferredSize(new java.awt.Dimension(658, 206));
        panNewInput.setLayout(new java.awt.GridBagLayout());

        panRenewalMaturityDt.setMinimumSize(new java.awt.Dimension(335, 200));
        panRenewalMaturityDt.setPreferredSize(new java.awt.Dimension(319, 197));
        panRenewalMaturityDt.setLayout(new java.awt.GridBagLayout());

        lblRenewalMaturityDate.setText("Maturity Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalMaturityDt.add(lblRenewalMaturityDate, gridBagConstraints);

        tdtRenewalMaturityDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtRenewalMaturityDate.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtRenewalMaturityDate.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalMaturityDt.add(tdtRenewalMaturityDate, gridBagConstraints);

        txtRenewalRateOfInterest.setEditable(false);
        txtRenewalRateOfInterest.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalMaturityDt.add(txtRenewalRateOfInterest, gridBagConstraints);

        lblRenewalRateOfInterest.setText("Rate of Int.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalMaturityDt.add(lblRenewalRateOfInterest, gridBagConstraints);

        lblRenewlaDepositSubNo.setText("Deposit No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalMaturityDt.add(lblRenewlaDepositSubNo, gridBagConstraints);

        lblRenewalValDepositSubNo.setMaximumSize(new java.awt.Dimension(100, 15));
        lblRenewalValDepositSubNo.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalMaturityDt.add(lblRenewalValDepositSubNo, gridBagConstraints);

        lblRenewalDateOfDeposit.setText("Date of Deposit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalMaturityDt.add(lblRenewalDateOfDeposit, gridBagConstraints);

        tdtRenewalDateOfDeposit.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalMaturityDt.add(tdtRenewalDateOfDeposit, gridBagConstraints);

        lblRenewalDepositAmount.setText("Deposit Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalMaturityDt.add(lblRenewalDepositAmount, gridBagConstraints);

        txtRenewalDepositAmount.setEnabled(false);
        txtRenewalDepositAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalMaturityDt.add(txtRenewalDepositAmount, gridBagConstraints);

        panNewPeriodOfDeposit.setLayout(new java.awt.GridBagLayout());

        txtRenewalPeriodOfDeposit_Years.setMinimumSize(new java.awt.Dimension(20, 21));
        txtRenewalPeriodOfDeposit_Years.setPreferredSize(new java.awt.Dimension(20, 21));
        txtRenewalPeriodOfDeposit_Years.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRenewalPeriodOfDeposit_YearsActionPerformed(evt);
            }
        });
        txtRenewalPeriodOfDeposit_Years.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRenewalPeriodOfDeposit_YearsFocusLost(evt);
            }
        });
        panNewPeriodOfDeposit.add(txtRenewalPeriodOfDeposit_Years, new java.awt.GridBagConstraints());

        lblRenewalPeriod_Years.setText("Yrs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 2);
        panNewPeriodOfDeposit.add(lblRenewalPeriod_Years, gridBagConstraints);

        txtRenewalPeriodOfDeposit_Months.setMinimumSize(new java.awt.Dimension(30, 21));
        txtRenewalPeriodOfDeposit_Months.setPreferredSize(new java.awt.Dimension(30, 21));
        txtRenewalPeriodOfDeposit_Months.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRenewalPeriodOfDeposit_MonthsActionPerformed(evt);
            }
        });
        txtRenewalPeriodOfDeposit_Months.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRenewalPeriodOfDeposit_MonthsFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panNewPeriodOfDeposit.add(txtRenewalPeriodOfDeposit_Months, gridBagConstraints);

        lblRenewalPeriod_Months.setText("Months");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panNewPeriodOfDeposit.add(lblRenewalPeriod_Months, gridBagConstraints);

        txtRenewalPeriodOfDeposit_Days.setAllowAll(true);
        txtRenewalPeriodOfDeposit_Days.setMinimumSize(new java.awt.Dimension(45, 21));
        txtRenewalPeriodOfDeposit_Days.setPreferredSize(new java.awt.Dimension(30, 21));
        txtRenewalPeriodOfDeposit_Days.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRenewalPeriodOfDeposit_DaysFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panNewPeriodOfDeposit.add(txtRenewalPeriodOfDeposit_Days, gridBagConstraints);

        lblRenewalPeriod_Days.setText("Days");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panNewPeriodOfDeposit.add(lblRenewalPeriod_Days, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalMaturityDt.add(panNewPeriodOfDeposit, gridBagConstraints);

        lblRenewalPeriodOfDeposit.setText("Period of Deposit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalMaturityDt.add(lblRenewalPeriodOfDeposit, gridBagConstraints);

        cboRenewalInterestPaymentFrequency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalInterestPaymentFrequency.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalInterestPaymentFrequency.setPopupWidth(100);
        cboRenewalInterestPaymentFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalInterestPaymentFrequencyActionPerformed(evt);
            }
        });
        cboRenewalInterestPaymentFrequency.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cboRenewalInterestPaymentFrequencyFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalMaturityDt.add(cboRenewalInterestPaymentFrequency, gridBagConstraints);

        lblRenewalInterestPaymentFrequency.setText("Int Pay Freq");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalMaturityDt.add(lblRenewalInterestPaymentFrequency, gridBagConstraints);

        panNewBtnDepSubNoAcc.setLayout(new java.awt.GridBagLayout());

        btnRenewalDepSubNoAccSave.setText("Save");
        btnRenewalDepSubNoAccSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenewalDepSubNoAccSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 1;
        panNewBtnDepSubNoAcc.add(btnRenewalDepSubNoAccSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalMaturityDt.add(panNewBtnDepSubNoAcc, gridBagConstraints);

        lblRenewPostageAmt.setText("Recover Postage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panRenewalMaturityDt.add(lblRenewPostageAmt, gridBagConstraints);

        txtRenewPostageAmt.setMinimumSize(new java.awt.Dimension(40, 21));
        txtRenewPostageAmt.setPreferredSize(new java.awt.Dimension(40, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 2);
        panRenewalMaturityDt.add(txtRenewPostageAmt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        panNewInput.add(panRenewalMaturityDt, gridBagConstraints);

        panRenewalDepositDt.setMinimumSize(new java.awt.Dimension(239, 75));
        panRenewalDepositDt.setPreferredSize(new java.awt.Dimension(239, 70));
        panRenewalDepositDt.setLayout(new java.awt.GridBagLayout());

        txtRenewalPeriodicInterestAmount.setEditable(false);
        txtRenewalPeriodicInterestAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 7, 1, 16);
        panRenewalDepositDt.add(txtRenewalPeriodicInterestAmount, gridBagConstraints);

        lblRenewalPeriodicInterestAmount.setText("Periodic Int. Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositDt.add(lblRenewalPeriodicInterestAmount, gridBagConstraints);

        lblRenewalTotalInterestAmount.setText("Total Int. Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositDt.add(lblRenewalTotalInterestAmount, gridBagConstraints);

        txtRenewalTotalInterestAmount.setEditable(false);
        txtRenewalTotalInterestAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 7, 1, 16);
        panRenewalDepositDt.add(txtRenewalTotalInterestAmount, gridBagConstraints);

        txtRenewalMaturityAmount.setEditable(false);
        txtRenewalMaturityAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 7, 1, 16);
        panRenewalDepositDt.add(txtRenewalMaturityAmount, gridBagConstraints);

        lblRenewalMaturityAmount.setText("Maturity Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositDt.add(lblRenewalMaturityAmount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        panNewInput.add(panRenewalDepositDt, gridBagConstraints);

        panRenewalInterestCredit.setMinimumSize(new java.awt.Dimension(239, 125));
        panRenewalInterestCredit.setPreferredSize(new java.awt.Dimension(235, 125));
        panRenewalInterestCredit.setLayout(new java.awt.GridBagLayout());

        lblRenewalProductType.setText("Product Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panRenewalInterestCredit.add(lblRenewalProductType, gridBagConstraints);

        cboRenewalProdType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalProdType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalProdType.setPopupWidth(125);
        cboRenewalProdType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalProdTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalInterestCredit.add(cboRenewalProdType, gridBagConstraints);

        lblNewProdId.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panRenewalInterestCredit.add(lblNewProdId, gridBagConstraints);

        cboRenewalProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalProdId.setPopupWidth(200);
        cboRenewalProdId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalProdIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalInterestCredit.add(cboRenewalProdId, gridBagConstraints);

        lblRenewalAccountNo.setText("Account No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panRenewalInterestCredit.add(lblRenewalAccountNo, gridBagConstraints);

        lblRenewalCustomerNameCr.setText("Customer Name");
        lblRenewalCustomerNameCr.setMinimumSize(new java.awt.Dimension(95, 18));
        lblRenewalCustomerNameCr.setPreferredSize(new java.awt.Dimension(95, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panRenewalInterestCredit.add(lblRenewalCustomerNameCr, gridBagConstraints);

        panNewCustomerNO.setMinimumSize(new java.awt.Dimension(100, 21));
        panNewCustomerNO.setLayout(new java.awt.GridBagLayout());

        txtRenewalCustomerIdCr.setEditable(false);
        txtRenewalCustomerIdCr.setMinimumSize(new java.awt.Dimension(97, 21));
        txtRenewalCustomerIdCr.setPreferredSize(new java.awt.Dimension(97, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panNewCustomerNO.add(txtRenewalCustomerIdCr, gridBagConstraints);

        btnRenewalCustomerIdFileOpenCr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnRenewalCustomerIdFileOpenCr.setMaximumSize(new java.awt.Dimension(21, 21));
        btnRenewalCustomerIdFileOpenCr.setMinimumSize(new java.awt.Dimension(21, 21));
        btnRenewalCustomerIdFileOpenCr.setPreferredSize(new java.awt.Dimension(21, 21));
        btnRenewalCustomerIdFileOpenCr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenewalCustomerIdFileOpenCrActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panNewCustomerNO.add(btnRenewalCustomerIdFileOpenCr, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalInterestCredit.add(panNewCustomerNO, gridBagConstraints);

        lblRenewalCustomerNameCrValue.setMinimumSize(new java.awt.Dimension(120, 18));
        lblRenewalCustomerNameCrValue.setPreferredSize(new java.awt.Dimension(120, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalInterestCredit.add(lblRenewalCustomerNameCrValue, gridBagConstraints);

        cboRenewalInterestPaymentMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalInterestPaymentMode.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalInterestPaymentMode.setPopupWidth(100);
        cboRenewalInterestPaymentMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalInterestPaymentModeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalInterestCredit.add(cboRenewalInterestPaymentMode, gridBagConstraints);

        lblRenewalInterestPaymentMode.setText("Int Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 1);
        panRenewalInterestCredit.add(lblRenewalInterestPaymentMode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        panNewInput.add(panRenewalInterestCredit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        panNewDepositDetails.add(panNewInput, gridBagConstraints);

        panNewTblDepSubNoAccInfo.setMinimumSize(new java.awt.Dimension(275, 25));
        panNewTblDepSubNoAccInfo.setPreferredSize(new java.awt.Dimension(275, 25));
        panNewTblDepSubNoAccInfo.setLayout(new java.awt.GridBagLayout());

        srpTblRenewalDepSubNoAccInfo.setMinimumSize(new java.awt.Dimension(275, 20));
        srpTblRenewalDepSubNoAccInfo.setPreferredSize(new java.awt.Dimension(275, 20));

        tblRenewalDepSubNoAccInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dep Sub No", "Deposit Amt", "Maturity Dt.", "Total Int Amt"
            }
        ));
        tblRenewalDepSubNoAccInfo.setMinimumSize(new java.awt.Dimension(225, 16));
        tblRenewalDepSubNoAccInfo.setOpaque(false);
        tblRenewalDepSubNoAccInfo.setPreferredSize(new java.awt.Dimension(300, 16));
        tblRenewalDepSubNoAccInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblRenewalDepSubNoAccInfoMousePressed(evt);
            }
        });
        srpTblRenewalDepSubNoAccInfo.setViewportView(tblRenewalDepSubNoAccInfo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 13, 0);
        panNewTblDepSubNoAccInfo.add(srpTblRenewalDepSubNoAccInfo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        panNewDepositDetails.add(panNewTblDepSubNoAccInfo, gridBagConstraints);

        panRenewalFreqency.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panRenewalFreqency.setMinimumSize(new java.awt.Dimension(275, 135));
        panRenewalFreqency.setPreferredSize(new java.awt.Dimension(275, 135));
        panRenewalFreqency.setLayout(new java.awt.GridBagLayout());

        panRenewalCalenderFreq.setMinimumSize(new java.awt.Dimension(90, 16));
        panRenewalCalenderFreq.setPreferredSize(new java.awt.Dimension(90, 16));
        panRenewalCalenderFreq.setLayout(new java.awt.GridBagLayout());

        rdoRenewalCalender_Freq_Yes.setText("Yes");
        rdoRenewalCalender_Freq_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoRenewalCalender_Freq_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoRenewalCalender_Freq_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoRenewalCalender_Freq_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalCalender_Freq_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panRenewalCalenderFreq.add(rdoRenewalCalender_Freq_Yes, gridBagConstraints);

        rdoRenewalCalender_Freq_No.setText("No");
        rdoRenewalCalender_Freq_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoRenewalCalender_Freq_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoRenewalCalender_Freq_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoRenewalCalender_Freq_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalCalender_Freq_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panRenewalCalenderFreq.add(rdoRenewalCalender_Freq_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 0, 1);
        panRenewalFreqency.add(panRenewalCalenderFreq, gridBagConstraints);

        lblRenewalCalenderFreq.setText("Calender Frequency");
        lblRenewalCalenderFreq.setMaximumSize(new java.awt.Dimension(115, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalFreqency.add(lblRenewalCalenderFreq, gridBagConstraints);

        lblRenewalCalenderFreqDate.setText("Calender Frequency Day");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalFreqency.add(lblRenewalCalenderFreqDate, gridBagConstraints);

        txtRenewalPrintedOption.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 0, 1);
        panRenewalFreqency.add(txtRenewalPrintedOption, gridBagConstraints);

        lblRenewalPrintedOption.setText("Printing No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalFreqency.add(lblRenewalPrintedOption, gridBagConstraints);

        cboRenewalCalenderFreqDay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalCalenderFreqDay.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalCalenderFreqDay.setPopupWidth(100);
        cboRenewalCalenderFreqDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalCalenderFreqDayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 0, 1);
        panRenewalFreqency.add(cboRenewalCalenderFreqDay, gridBagConstraints);

        lblRenewalNoticeNew.setText("Renewal Notice");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalFreqency.add(lblRenewalNoticeNew, gridBagConstraints);

        lblAutoRenewalNew.setText("Auto Renewal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalFreqency.add(lblAutoRenewalNew, gridBagConstraints);

        lblRenewalWithIntNew.setText("Auto Renewal with Int");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalFreqency.add(lblRenewalWithIntNew, gridBagConstraints);

        panMatAlertRep1.setMinimumSize(new java.awt.Dimension(90, 16));
        panMatAlertRep1.setPreferredSize(new java.awt.Dimension(90, 16));
        panMatAlertRep1.setLayout(new java.awt.GridBagLayout());

        rdgMatAlertReport.add(rdoRenewalMatAlert_report_Yes);
        rdoRenewalMatAlert_report_Yes.setText("Yes");
        rdoRenewalMatAlert_report_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoRenewalMatAlert_report_Yes.setMinimumSize(new java.awt.Dimension(48, 17));
        rdoRenewalMatAlert_report_Yes.setPreferredSize(new java.awt.Dimension(48, 17));
        rdoRenewalMatAlert_report_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalMatAlert_report_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panMatAlertRep1.add(rdoRenewalMatAlert_report_Yes, gridBagConstraints);

        rdgMatAlertReport.add(rdoRenewalMatAlert_report_No);
        rdoRenewalMatAlert_report_No.setText("No");
        rdoRenewalMatAlert_report_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoRenewalMatAlert_report_No.setMinimumSize(new java.awt.Dimension(42, 17));
        rdoRenewalMatAlert_report_No.setPreferredSize(new java.awt.Dimension(42, 17));
        rdoRenewalMatAlert_report_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalMatAlert_report_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panMatAlertRep1.add(rdoRenewalMatAlert_report_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 0, 1);
        panRenewalFreqency.add(panMatAlertRep1, gridBagConstraints);

        panAutoRenewal1.setMinimumSize(new java.awt.Dimension(90, 16));
        panAutoRenewal1.setPreferredSize(new java.awt.Dimension(90, 16));
        panAutoRenewal1.setLayout(new java.awt.GridBagLayout());

        rdgAutoRenewal.add(rdoRenewalAutoRenewal_Yes);
        rdoRenewalAutoRenewal_Yes.setText("Yes");
        rdoRenewalAutoRenewal_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoRenewalAutoRenewal_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoRenewalAutoRenewal_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoRenewalAutoRenewal_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalAutoRenewal_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panAutoRenewal1.add(rdoRenewalAutoRenewal_Yes, gridBagConstraints);

        rdgAutoRenewal.add(rdoRenewalAutoRenewal_No);
        rdoRenewalAutoRenewal_No.setText("No");
        rdoRenewalAutoRenewal_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoRenewalAutoRenewal_No.setMinimumSize(new java.awt.Dimension(42, 17));
        rdoRenewalAutoRenewal_No.setPreferredSize(new java.awt.Dimension(42, 17));
        rdoRenewalAutoRenewal_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalAutoRenewal_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panAutoRenewal1.add(rdoRenewalAutoRenewal_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 0, 1);
        panRenewalFreqency.add(panAutoRenewal1, gridBagConstraints);

        panWithInterest1.setMinimumSize(new java.awt.Dimension(90, 16));
        panWithInterest1.setPreferredSize(new java.awt.Dimension(90, 16));
        panWithInterest1.setLayout(new java.awt.GridBagLayout());

        rdgWithIntRenewal.add(rdoRenewalWith_intRenewal_Yes);
        rdoRenewalWith_intRenewal_Yes.setText("Yes");
        rdoRenewalWith_intRenewal_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoRenewalWith_intRenewal_Yes.setMinimumSize(new java.awt.Dimension(50, 17));
        rdoRenewalWith_intRenewal_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoRenewalWith_intRenewal_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalWith_intRenewal_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panWithInterest1.add(rdoRenewalWith_intRenewal_Yes, gridBagConstraints);

        rdgWithIntRenewal.add(rdoRenewalWith_intRenewal_No);
        rdoRenewalWith_intRenewal_No.setText("No");
        rdoRenewalWith_intRenewal_No.setMaximumSize(new java.awt.Dimension(50, 17));
        rdoRenewalWith_intRenewal_No.setMinimumSize(new java.awt.Dimension(42, 17));
        rdoRenewalWith_intRenewal_No.setPreferredSize(new java.awt.Dimension(42, 17));
        rdoRenewalWith_intRenewal_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalWith_intRenewal_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panWithInterest1.add(rdoRenewalWith_intRenewal_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 0, 1);
        panRenewalFreqency.add(panWithInterest1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        panNewDepositDetails.add(panRenewalFreqency, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panRenewalInformation.add(panNewDepositDetails, gridBagConstraints);

        panRenewalAccountInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panRenewalAccountInformation.setMinimumSize(new java.awt.Dimension(840, 310));
        panRenewalAccountInformation.setPreferredSize(new java.awt.Dimension(840, 310));
        panRenewalAccountInformation.setLayout(new java.awt.GridBagLayout());

        panRenewalDepositTransDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Renewal Deposit TransDetails"));
        panRenewalDepositTransDetails.setMinimumSize(new java.awt.Dimension(360, 310));
        panRenewalDepositTransDetails.setPreferredSize(new java.awt.Dimension(360, 310));
        panRenewalDepositTransDetails.setLayout(new java.awt.GridBagLayout());

        lblRenewalProdId.setText("Change the Product Id, If required");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalProdId, gridBagConstraints);

        cboRenewalDepositProdId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalDepositProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalDepositProdId.setPopupWidth(200);
        cboRenewalDepositProdId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalDepositProdIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 2);
        panRenewalDepositTransDetails.add(cboRenewalDepositProdId, gridBagConstraints);

        lblRenewalCategory.setText("Change the Category, If required");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalCategory, gridBagConstraints);

        cboRenewalDepositCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalDepositCategory.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalDepositCategory.setPopupWidth(200);
        cboRenewalDepositCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalDepositCategoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalDepositTransDetails.add(cboRenewalDepositCategory, gridBagConstraints);

        lblRenewalWithdrawingDeposit.setText("Want to withdraw from this deposit ?");
        lblRenewalWithdrawingDeposit.setMaximumSize(new java.awt.Dimension(105, 18));
        lblRenewalWithdrawingDeposit.setMinimumSize(new java.awt.Dimension(212, 18));
        lblRenewalWithdrawingDeposit.setPreferredSize(new java.awt.Dimension(212, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalWithdrawingDeposit, gridBagConstraints);

        panRenewalwithdrawing.setMinimumSize(new java.awt.Dimension(100, 20));
        panRenewalwithdrawing.setPreferredSize(new java.awt.Dimension(100, 20));
        panRenewalwithdrawing.setLayout(new java.awt.GridBagLayout());

        rdgStandingInstruciton.add(rdoRenewalWithdrawing_Yes);
        rdoRenewalWithdrawing_Yes.setText("Yes");
        rdoRenewalWithdrawing_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoRenewalWithdrawing_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoRenewalWithdrawing_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoRenewalWithdrawing_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalWithdrawing_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panRenewalwithdrawing.add(rdoRenewalWithdrawing_Yes, gridBagConstraints);

        rdgStandingInstruciton.add(rdoRenewalWithdrawing_No);
        rdoRenewalWithdrawing_No.setText("No");
        rdoRenewalWithdrawing_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoRenewalWithdrawing_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoRenewalWithdrawing_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoRenewalWithdrawing_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalWithdrawing_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panRenewalwithdrawing.add(rdoRenewalWithdrawing_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalDepositTransDetails.add(panRenewalwithdrawing, gridBagConstraints);

        lblRenewalAddingDepTrans.setText("Want to add amount to this deposit ?");
        lblRenewalAddingDepTrans.setMaximumSize(new java.awt.Dimension(115, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalAddingDepTrans, gridBagConstraints);

        panRenewalAdding.setMinimumSize(new java.awt.Dimension(100, 20));
        panRenewalAdding.setPreferredSize(new java.awt.Dimension(100, 20));
        panRenewalAdding.setLayout(new java.awt.GridBagLayout());

        rdgMatAlertReport.add(rdoRenewalAdding_Yes);
        rdoRenewalAdding_Yes.setText("Yes");
        rdoRenewalAdding_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoRenewalAdding_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoRenewalAdding_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoRenewalAdding_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalAdding_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panRenewalAdding.add(rdoRenewalAdding_Yes, gridBagConstraints);

        rdgMatAlertReport.add(rdoRenewalAdding_No);
        rdoRenewalAdding_No.setText("No");
        rdoRenewalAdding_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoRenewalAdding_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoRenewalAdding_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoRenewalAdding_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalAdding_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panRenewalAdding.add(rdoRenewalAdding_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalDepositTransDetails.add(panRenewalAdding, gridBagConstraints);

        lblRenewalDepTransAmt.setText("Amount");
        lblRenewalDepTransAmt.setMinimumSize(new java.awt.Dimension(72, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalDepTransAmt, gridBagConstraints);

        txtRenewalDepTransAmtValue.setMinimumSize(new java.awt.Dimension(100, 21));
        txtRenewalDepTransAmtValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRenewalDepTransAmtValueActionPerformed(evt);
            }
        });
        txtRenewalDepTransAmtValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRenewalDepTransAmtValueFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalDepositTransDetails.add(txtRenewalDepTransAmtValue, gridBagConstraints);

        lblRenewalDepositTransMode.setText("Mode of Withdrawal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalDepositTransMode, gridBagConstraints);

        cboRenewalDepTransMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalDepTransMode.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalDepTransMode.setPopupWidth(100);
        cboRenewalDepTransMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalDepTransModeActionPerformed(evt);
            }
        });
        cboRenewalDepTransMode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cboRenewalDepTransModeFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalDepositTransDetails.add(cboRenewalDepTransMode, gridBagConstraints);

        lblRenewalDepositTransProdType.setText("Product Type");
        lblRenewalDepositTransProdType.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalDepositTransProdType, gridBagConstraints);

        cboRenewalDepTransProdType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalDepTransProdType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalDepTransProdType.setPopupWidth(200);
        cboRenewalDepTransProdType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalDepTransProdTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalDepositTransDetails.add(cboRenewalDepTransProdType, gridBagConstraints);

        lblRenewalDepositTransProdId.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalDepositTransProdId, gridBagConstraints);

        cboRenewalDepTransProdId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalDepTransProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalDepTransProdId.setPopupWidth(200);
        cboRenewalDepTransProdId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalDepTransProdIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 2);
        panRenewalDepositTransDetails.add(cboRenewalDepTransProdId, gridBagConstraints);

        lblRenewalDepositTransAccNo.setText("Account No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalDepositTransAccNo, gridBagConstraints);

        panRenewalDepTransCustomerNO.setMinimumSize(new java.awt.Dimension(100, 21));
        panRenewalDepTransCustomerNO.setLayout(new java.awt.GridBagLayout());

        txtRenewalDepCustomerIdCr.setEditable(false);
        txtRenewalDepCustomerIdCr.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panRenewalDepTransCustomerNO.add(txtRenewalDepCustomerIdCr, gridBagConstraints);

        btnRenewalDepCustomerIdFileOpenCr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnRenewalDepCustomerIdFileOpenCr.setMaximumSize(new java.awt.Dimension(21, 21));
        btnRenewalDepCustomerIdFileOpenCr.setMinimumSize(new java.awt.Dimension(21, 21));
        btnRenewalDepCustomerIdFileOpenCr.setPreferredSize(new java.awt.Dimension(21, 21));
        btnRenewalDepCustomerIdFileOpenCr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenewalDepCustomerIdFileOpenCrActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panRenewalDepTransCustomerNO.add(btnRenewalDepCustomerIdFileOpenCr, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalDepositTransDetails.add(panRenewalDepTransCustomerNO, gridBagConstraints);

        lblRenewalDepositTransCustName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRenewalDepositTransCustName.setText("Customer Name");
        lblRenewalDepositTransCustName.setMinimumSize(new java.awt.Dimension(110, 18));
        lblRenewalDepositTransCustName.setPreferredSize(new java.awt.Dimension(110, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalDepositTransCustName, gridBagConstraints);

        lblRenewalCustNameValue.setForeground(new java.awt.Color(0, 51, 204));
        lblRenewalCustNameValue.setMinimumSize(new java.awt.Dimension(120, 18));
        lblRenewalCustNameValue.setPreferredSize(new java.awt.Dimension(120, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalCustNameValue, gridBagConstraints);

        lblRenewalDepositTransTokenNo.setText("Token No");
        lblRenewalDepositTransTokenNo.setMinimumSize(new java.awt.Dimension(72, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewalDepositTransTokenNo, gridBagConstraints);

        txtRenewalDepTransTokenNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtRenewalDepTransTokenNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRenewalDepTransTokenNoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 2);
        panRenewalDepositTransDetails.add(txtRenewalDepTransTokenNo, gridBagConstraints);

        lblRenewSamaNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRenewSamaNo.setText("Renew With Same No Allowed");
        lblRenewSamaNo.setMaximumSize(new java.awt.Dimension(207, 18));
        lblRenewSamaNo.setMinimumSize(new java.awt.Dimension(207, 18));
        lblRenewSamaNo.setPreferredSize(new java.awt.Dimension(207, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalDepositTransDetails.add(lblRenewSamaNo, gridBagConstraints);

        chkRenewSameNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRenewSameNoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panRenewalDepositTransDetails.add(chkRenewSameNo, gridBagConstraints);

        lblNextAccntNo.setForeground(new java.awt.Color(51, 102, 255));
        lblNextAccntNo.setText("Next Account Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        panRenewalDepositTransDetails.add(lblNextAccntNo, gridBagConstraints);

        txtNextAccntNo.setEditable(false);
        txtNextAccntNo.setEnabled(false);
        txtNextAccntNo.setMaximumSize(new java.awt.Dimension(130, 19));
        txtNextAccntNo.setMinimumSize(new java.awt.Dimension(130, 19));
        txtNextAccntNo.setPreferredSize(new java.awt.Dimension(130, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        panRenewalDepositTransDetails.add(txtNextAccntNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panRenewalAccountInformation.add(panRenewalDepositTransDetails, gridBagConstraints);

        panRenewalInterestDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Renewal Interest TransDetails"));
        panRenewalInterestDetails.setMaximumSize(new java.awt.Dimension(250, 305));
        panRenewalInterestDetails.setMinimumSize(new java.awt.Dimension(470, 310));
        panRenewalInterestDetails.setPreferredSize(new java.awt.Dimension(470, 310));
        panRenewalInterestDetails.setLayout(new java.awt.GridBagLayout());

        lblRenewalIntAmount.setText("Balance Interest Amount");
        lblRenewalIntAmount.setMinimumSize(new java.awt.Dimension(143, 16));
        lblRenewalIntAmount.setPreferredSize(new java.awt.Dimension(143, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalIntAmount, gridBagConstraints);

        lblRenewalBalIntAmtVal.setMinimumSize(new java.awt.Dimension(100, 18));
        lblRenewalBalIntAmtVal.setPreferredSize(new java.awt.Dimension(100, 18));
        lblRenewalBalIntAmtVal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRenewalBalIntAmtValMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        panRenewalInterestDetails.add(lblRenewalBalIntAmtVal, gridBagConstraints);

        lblRenewalOldMaturityDate.setText("Old Deposit Maturity Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalOldMaturityDate, gridBagConstraints);

        lblRenewalValPeriodRun.setMinimumSize(new java.awt.Dimension(100, 18));
        lblRenewalValPeriodRun.setPreferredSize(new java.awt.Dimension(100, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        panRenewalInterestDetails.add(lblRenewalValPeriodRun, gridBagConstraints);

        lblRenewalSBPeriod.setText("Period Run from Date of Maturity");
        lblRenewalSBPeriod.setMaximumSize(new java.awt.Dimension(80, 18));
        lblRenewalSBPeriod.setMinimumSize(new java.awt.Dimension(189, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalSBPeriod, gridBagConstraints);

        lblRenewalSBPeriodVal.setMinimumSize(new java.awt.Dimension(100, 18));
        lblRenewalSBPeriodVal.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        panRenewalInterestDetails.add(lblRenewalSBPeriodVal, gridBagConstraints);

        lblRenewalSBIntAmt.setText("Interest Amount");
        lblRenewalSBIntAmt.setMaximumSize(new java.awt.Dimension(80, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalSBIntAmt, gridBagConstraints);

        lblRenewalSBIntAmtVal.setMinimumSize(new java.awt.Dimension(100, 18));
        lblRenewalSBIntAmtVal.setPreferredSize(new java.awt.Dimension(100, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        panRenewalInterestDetails.add(lblRenewalSBIntAmtVal, gridBagConstraints);

        lblRenewalWithdrawingIntAmt.setText("Want to withdraw interest amount ?");
        lblRenewalWithdrawingIntAmt.setMaximumSize(new java.awt.Dimension(125, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalWithdrawingIntAmt, gridBagConstraints);

        panRenewalWithdrawingInterest.setMinimumSize(new java.awt.Dimension(100, 16));
        panRenewalWithdrawingInterest.setPreferredSize(new java.awt.Dimension(100, 20));
        panRenewalWithdrawingInterest.setLayout(new java.awt.GridBagLayout());

        rdgWithIntRenewal.add(rdoRenewalWithdrawingInt_Yes);
        rdoRenewalWithdrawingInt_Yes.setText("Yes");
        rdoRenewalWithdrawingInt_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoRenewalWithdrawingInt_Yes.setMinimumSize(new java.awt.Dimension(50, 17));
        rdoRenewalWithdrawingInt_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoRenewalWithdrawingInt_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalWithdrawingInt_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panRenewalWithdrawingInterest.add(rdoRenewalWithdrawingInt_Yes, gridBagConstraints);

        rdgWithIntRenewal.add(rdoRenewalWithdrawingInt_No);
        rdoRenewalWithdrawingInt_No.setText("No");
        rdoRenewalWithdrawingInt_No.setMaximumSize(new java.awt.Dimension(50, 17));
        rdoRenewalWithdrawingInt_No.setMinimumSize(new java.awt.Dimension(50, 17));
        rdoRenewalWithdrawingInt_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoRenewalWithdrawingInt_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewalWithdrawingInt_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panRenewalWithdrawingInterest.add(rdoRenewalWithdrawingInt_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panRenewalInterestDetails.add(panRenewalWithdrawingInterest, gridBagConstraints);

        lblRenewalIntAmt.setText("Amount");
        lblRenewalIntAmt.setMinimumSize(new java.awt.Dimension(45, 16));
        lblRenewalIntAmt.setPreferredSize(new java.awt.Dimension(45, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalIntAmt, gridBagConstraints);

        txtRenewalIntAmtValue.setEnabled(false);
        txtRenewalIntAmtValue.setMinimumSize(new java.awt.Dimension(100, 21));
        txtRenewalIntAmtValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRenewalIntAmtValueActionPerformed(evt);
            }
        });
        txtRenewalIntAmtValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRenewalIntAmtValueFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        panRenewalInterestDetails.add(txtRenewalIntAmtValue, gridBagConstraints);

        lblRenewalInterestTransMode.setText("Mode of Withdrawal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalInterestTransMode, gridBagConstraints);

        cboRenewalInterestTransMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalInterestTransMode.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalInterestTransMode.setPopupWidth(100);
        cboRenewalInterestTransMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalInterestTransModeActionPerformed(evt);
            }
        });
        cboRenewalInterestTransMode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cboRenewalInterestTransModeFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        panRenewalInterestDetails.add(cboRenewalInterestTransMode, gridBagConstraints);

        lblRenewalInterestTransProdType.setText("Product Type");
        lblRenewalInterestTransProdType.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalInterestTransProdType, gridBagConstraints);

        cboRenewalInterestTransProdType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalInterestTransProdType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalInterestTransProdType.setPopupWidth(200);
        cboRenewalInterestTransProdType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalInterestTransProdTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        panRenewalInterestDetails.add(cboRenewalInterestTransProdType, gridBagConstraints);

        lblRenewalInterestTransProdId.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalInterestTransProdId, gridBagConstraints);

        cboRenewalInterestTransProdId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboRenewalInterestTransProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRenewalInterestTransProdId.setPopupWidth(200);
        cboRenewalInterestTransProdId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRenewalInterestTransProdIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        panRenewalInterestDetails.add(cboRenewalInterestTransProdId, gridBagConstraints);

        lblRenewalInterestTransAccNo.setText("Account No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalInterestTransAccNo, gridBagConstraints);

        panRenewalInterestCustomerNO.setMinimumSize(new java.awt.Dimension(122, 21));
        panRenewalInterestCustomerNO.setLayout(new java.awt.GridBagLayout());

        txtRenewalIntCustomerIdCr.setEditable(false);
        txtRenewalIntCustomerIdCr.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panRenewalInterestCustomerNO.add(txtRenewalIntCustomerIdCr, gridBagConstraints);

        btnRenewalIntCustomerIdFileOpenCr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnRenewalIntCustomerIdFileOpenCr.setMaximumSize(new java.awt.Dimension(21, 21));
        btnRenewalIntCustomerIdFileOpenCr.setMinimumSize(new java.awt.Dimension(21, 21));
        btnRenewalIntCustomerIdFileOpenCr.setPreferredSize(new java.awt.Dimension(21, 21));
        btnRenewalIntCustomerIdFileOpenCr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenewalIntCustomerIdFileOpenCrActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panRenewalInterestCustomerNO.add(btnRenewalIntCustomerIdFileOpenCr, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        panRenewalInterestDetails.add(panRenewalInterestCustomerNO, gridBagConstraints);

        lblRenewalInterestCustName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRenewalInterestCustName.setText("Customer Name");
        lblRenewalInterestCustName.setMinimumSize(new java.awt.Dimension(150, 18));
        lblRenewalInterestCustName.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalInterestCustName, gridBagConstraints);

        lblRenewalInterestCustNameVal.setForeground(new java.awt.Color(0, 51, 204));
        lblRenewalInterestCustNameVal.setMinimumSize(new java.awt.Dimension(120, 18));
        lblRenewalInterestCustNameVal.setPreferredSize(new java.awt.Dimension(120, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        panRenewalInterestDetails.add(lblRenewalInterestCustNameVal, gridBagConstraints);

        lblRenewalInterestTokenNo.setText("Token No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalInterestTokenNo, gridBagConstraints);

        txtRenewalIntTokenNoVal.setMinimumSize(new java.awt.Dimension(100, 21));
        txtRenewalIntTokenNoVal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRenewalIntTokenNoValFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        panRenewalInterestDetails.add(txtRenewalIntTokenNoVal, gridBagConstraints);

        lblRenewalInterestRepayAmt.setText("Total Interest to be Repayed");
        lblRenewalInterestRepayAmt.setMaximumSize(new java.awt.Dimension(80, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalInterestRepayAmt, gridBagConstraints);

        lblRenewalInterestRepayAmtVal.setMinimumSize(new java.awt.Dimension(100, 18));
        lblRenewalInterestRepayAmtVal.setPreferredSize(new java.awt.Dimension(100, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        panRenewalInterestDetails.add(lblRenewalInterestRepayAmtVal, gridBagConstraints);

        lblRenewalSBIntRate.setText("Interest Rate");
        lblRenewalSBIntRate.setMaximumSize(new java.awt.Dimension(80, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblRenewalSBIntRate, gridBagConstraints);

        lblRenewalSBIntRateVal.setMinimumSize(new java.awt.Dimension(100, 18));
        lblRenewalSBIntRateVal.setPreferredSize(new java.awt.Dimension(100, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        panRenewalInterestDetails.add(lblRenewalSBIntRateVal, gridBagConstraints);

        lblRenewinterest.setText("Renew without Intrest ?");
        panIntpayable.add(lblRenewinterest);

        chkRenewinterest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRenewinterestActionPerformed(evt);
            }
        });
        panIntpayable.add(chkRenewinterest);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 2;
        panRenewalInterestDetails.add(panIntpayable, gridBagConstraints);

        lblPrevInt.setText("Previous Interest Payable");
        lblPrevInt.setMaximumSize(new java.awt.Dimension(150, 18));
        lblPrevInt.setMinimumSize(new java.awt.Dimension(150, 18));
        lblPrevInt.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panRenewalInterestDetails.add(lblPrevInt, gridBagConstraints);

        lblPreBalIntVal.setMaximumSize(new java.awt.Dimension(100, 18));
        lblPreBalIntVal.setMinimumSize(new java.awt.Dimension(100, 18));
        lblPreBalIntVal.setPreferredSize(new java.awt.Dimension(100, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 1);
        panRenewalInterestDetails.add(lblPreBalIntVal, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panRenewalAccountInformation.add(panRenewalInterestDetails, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panRenewalInformation.add(panRenewalAccountInformation, gridBagConstraints);

        tabTermDeposit.addTab("Deposit Renewal Information", panRenewalInformation);
        panRenewalInformation.getAccessibleContext().setAccessibleDescription("Deposit Renewal Information");

        panExtensionInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panExtensionInformation.setToolTipText("");
        panExtensionInformation.setMinimumSize(new java.awt.Dimension(840, 650));
        panExtensionInformation.setPreferredSize(new java.awt.Dimension(840, 650));
        panExtensionInformation.setLayout(new java.awt.GridBagLayout());

        panExtensionDepositDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Extension  Deposit Details", 0, 0, new java.awt.Font("MS Sans Serif", 0, 12))); // NOI18N
        panExtensionDepositDetails.setMinimumSize(new java.awt.Dimension(840, 225));
        panExtensionDepositDetails.setPreferredSize(new java.awt.Dimension(840, 225));
        panExtensionDepositDetails.setLayout(new java.awt.GridBagLayout());

        panExtensionInput.setMinimumSize(new java.awt.Dimension(658, 202));
        panExtensionInput.setPreferredSize(new java.awt.Dimension(658, 206));
        panExtensionInput.setLayout(new java.awt.GridBagLayout());

        panExtensionMaturityDt.setMinimumSize(new java.awt.Dimension(317, 200));
        panExtensionMaturityDt.setLayout(new java.awt.GridBagLayout());

        lblExtensionMaturityDate.setText("Maturity Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionMaturityDt.add(lblExtensionMaturityDate, gridBagConstraints);

        tdtExtensionMaturityDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtExtensionMaturityDate.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtExtensionMaturityDate.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionMaturityDt.add(tdtExtensionMaturityDate, gridBagConstraints);

        txtExtensionRateOfInterest.setEditable(false);
        txtExtensionRateOfInterest.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionMaturityDt.add(txtExtensionRateOfInterest, gridBagConstraints);

        lblExtensionRateOfInterest.setText("Rate of Int.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionMaturityDt.add(lblExtensionRateOfInterest, gridBagConstraints);

        lblExtensionDepositSubNo.setText("Deposit Sub No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionMaturityDt.add(lblExtensionDepositSubNo, gridBagConstraints);

        lblExtensionValDepositSubNo.setMaximumSize(new java.awt.Dimension(100, 15));
        lblExtensionValDepositSubNo.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionMaturityDt.add(lblExtensionValDepositSubNo, gridBagConstraints);

        lblExtensionDateOfDeposit.setText("Date of Deposit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionMaturityDt.add(lblExtensionDateOfDeposit, gridBagConstraints);

        tdtExtensionDateOfDeposit.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionMaturityDt.add(tdtExtensionDateOfDeposit, gridBagConstraints);

        lblExtensionDepositAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionDepositAmount.setText("Deposit Amount");
        lblExtensionDepositAmount.setMinimumSize(new java.awt.Dimension(100, 18));
        lblExtensionDepositAmount.setPreferredSize(new java.awt.Dimension(100, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionMaturityDt.add(lblExtensionDepositAmount, gridBagConstraints);

        txtExtensionDepositAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionMaturityDt.add(txtExtensionDepositAmount, gridBagConstraints);

        panExtensionPeriodOfDeposit.setLayout(new java.awt.GridBagLayout());

        txtExtensionPeriodOfDeposit_Years.setMinimumSize(new java.awt.Dimension(20, 21));
        txtExtensionPeriodOfDeposit_Years.setPreferredSize(new java.awt.Dimension(20, 21));
        txtExtensionPeriodOfDeposit_Years.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtExtensionPeriodOfDeposit_YearsFocusLost(evt);
            }
        });
        panExtensionPeriodOfDeposit.add(txtExtensionPeriodOfDeposit_Years, new java.awt.GridBagConstraints());

        lblExtensionPeriod_Years.setText("Yrs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 2);
        panExtensionPeriodOfDeposit.add(lblExtensionPeriod_Years, gridBagConstraints);

        txtExtensionPeriodOfDeposit_Months.setMinimumSize(new java.awt.Dimension(30, 21));
        txtExtensionPeriodOfDeposit_Months.setPreferredSize(new java.awt.Dimension(30, 21));
        txtExtensionPeriodOfDeposit_Months.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtExtensionPeriodOfDeposit_MonthsFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panExtensionPeriodOfDeposit.add(txtExtensionPeriodOfDeposit_Months, gridBagConstraints);

        lblExtensionPeriod_Months.setText("Months");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panExtensionPeriodOfDeposit.add(lblExtensionPeriod_Months, gridBagConstraints);

        txtExtensionPeriodOfDeposit_Days.setAllowAll(true);
        txtExtensionPeriodOfDeposit_Days.setMinimumSize(new java.awt.Dimension(45, 21));
        txtExtensionPeriodOfDeposit_Days.setPreferredSize(new java.awt.Dimension(45, 21));
        txtExtensionPeriodOfDeposit_Days.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtExtensionPeriodOfDeposit_DaysFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panExtensionPeriodOfDeposit.add(txtExtensionPeriodOfDeposit_Days, gridBagConstraints);

        lblExtensionPeriod_Days.setText("Days");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        panExtensionPeriodOfDeposit.add(lblExtensionPeriod_Days, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionMaturityDt.add(panExtensionPeriodOfDeposit, gridBagConstraints);

        lblExtensionPeriodOfDeposit.setText("Period of Deposit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionMaturityDt.add(lblExtensionPeriodOfDeposit, gridBagConstraints);

        cboExtensionInterestPaymentFrequency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboExtensionInterestPaymentFrequency.setMinimumSize(new java.awt.Dimension(100, 21));
        cboExtensionInterestPaymentFrequency.setPopupWidth(100);
        cboExtensionInterestPaymentFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboExtensionInterestPaymentFrequencyActionPerformed(evt);
            }
        });
        cboExtensionInterestPaymentFrequency.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cboExtensionInterestPaymentFrequencyFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionMaturityDt.add(cboExtensionInterestPaymentFrequency, gridBagConstraints);

        lblExtensionInterestPaymentFrequency.setText("Int Pay Freq");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionMaturityDt.add(lblExtensionInterestPaymentFrequency, gridBagConstraints);

        panExtensionBtnDepSubNoAcc.setLayout(new java.awt.GridBagLayout());

        btnExtensionDepSubNoAccSave.setText("Save");
        btnExtensionDepSubNoAccSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtensionDepSubNoAccSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 1;
        panExtensionBtnDepSubNoAcc.add(btnExtensionDepSubNoAccSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionMaturityDt.add(panExtensionBtnDepSubNoAcc, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        panExtensionInput.add(panExtensionMaturityDt, gridBagConstraints);

        panExtensionDepositDt.setMinimumSize(new java.awt.Dimension(235, 75));
        panExtensionDepositDt.setPreferredSize(new java.awt.Dimension(235, 70));
        panExtensionDepositDt.setLayout(new java.awt.GridBagLayout());

        txtExtensionPeriodicInterestAmount.setEditable(false);
        txtExtensionPeriodicInterestAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 7, 1, 20);
        panExtensionDepositDt.add(txtExtensionPeriodicInterestAmount, gridBagConstraints);

        lblExtensionPeriodicInterestAmount.setText("Periodic Int. Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionDepositDt.add(lblExtensionPeriodicInterestAmount, gridBagConstraints);

        lblExtensionTotalInterestAmount.setText("Total Int. Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionDepositDt.add(lblExtensionTotalInterestAmount, gridBagConstraints);

        txtExtensionTotalInterestAmount.setEditable(false);
        txtExtensionTotalInterestAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 7, 1, 20);
        panExtensionDepositDt.add(txtExtensionTotalInterestAmount, gridBagConstraints);

        txtExtensionMaturityAmount.setEditable(false);
        txtExtensionMaturityAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 7, 1, 20);
        panExtensionDepositDt.add(txtExtensionMaturityAmount, gridBagConstraints);

        lblExtensionMaturityAmount.setText("Maturity Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionDepositDt.add(lblExtensionMaturityAmount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        panExtensionInput.add(panExtensionDepositDt, gridBagConstraints);

        panExtensionInterestCredit.setMinimumSize(new java.awt.Dimension(235, 125));
        panExtensionInterestCredit.setPreferredSize(new java.awt.Dimension(235, 125));
        panExtensionInterestCredit.setLayout(new java.awt.GridBagLayout());

        lblExtensionProductType.setText("Product Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionInterestCredit.add(lblExtensionProductType, gridBagConstraints);

        cboExtensionProdType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboExtensionProdType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboExtensionProdType.setPopupWidth(125);
        cboExtensionProdType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboExtensionProdTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionInterestCredit.add(cboExtensionProdType, gridBagConstraints);

        lblExtensionProdId.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionInterestCredit.add(lblExtensionProdId, gridBagConstraints);

        cboExtensionProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboExtensionProdId.setPopupWidth(200);
        cboExtensionProdId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboExtensionProdIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionInterestCredit.add(cboExtensionProdId, gridBagConstraints);

        lblExtensionAccountNo.setText("Account No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionInterestCredit.add(lblExtensionAccountNo, gridBagConstraints);

        lblExtensionCustomerNameCr.setText("Customer Name");
        lblExtensionCustomerNameCr.setMinimumSize(new java.awt.Dimension(95, 18));
        lblExtensionCustomerNameCr.setPreferredSize(new java.awt.Dimension(95, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionInterestCredit.add(lblExtensionCustomerNameCr, gridBagConstraints);

        panExtensionCustomerNO.setMinimumSize(new java.awt.Dimension(100, 21));
        panExtensionCustomerNO.setLayout(new java.awt.GridBagLayout());

        txtExtensionCustomerIdCr.setEditable(false);
        txtExtensionCustomerIdCr.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panExtensionCustomerNO.add(txtExtensionCustomerIdCr, gridBagConstraints);

        btnExtensionCustomerIdFileOpenCr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnExtensionCustomerIdFileOpenCr.setPreferredSize(new java.awt.Dimension(18, 18));
        btnExtensionCustomerIdFileOpenCr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtensionCustomerIdFileOpenCrActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panExtensionCustomerNO.add(btnExtensionCustomerIdFileOpenCr, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panExtensionInterestCredit.add(panExtensionCustomerNO, gridBagConstraints);

        lblExtensionCustomerNameCrValue.setMinimumSize(new java.awt.Dimension(115, 18));
        lblExtensionCustomerNameCrValue.setPreferredSize(new java.awt.Dimension(115, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionInterestCredit.add(lblExtensionCustomerNameCrValue, gridBagConstraints);

        cboExtensionInterestPaymentMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboExtensionInterestPaymentMode.setMinimumSize(new java.awt.Dimension(100, 21));
        cboExtensionInterestPaymentMode.setPopupWidth(100);
        cboExtensionInterestPaymentMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboExtensionInterestPaymentModeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionInterestCredit.add(cboExtensionInterestPaymentMode, gridBagConstraints);

        lblExtensionInterestPaymentMode.setText("Int Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionInterestCredit.add(lblExtensionInterestPaymentMode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        panExtensionInput.add(panExtensionInterestCredit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        panExtensionDepositDetails.add(panExtensionInput, gridBagConstraints);

        panExtensionTblDepSubNoAccInfo.setMinimumSize(new java.awt.Dimension(275, 25));
        panExtensionTblDepSubNoAccInfo.setPreferredSize(new java.awt.Dimension(275, 25));
        panExtensionTblDepSubNoAccInfo.setLayout(new java.awt.GridBagLayout());

        srpTblExtensionDepSubNoAccInfo.setMinimumSize(new java.awt.Dimension(275, 20));
        srpTblExtensionDepSubNoAccInfo.setPreferredSize(new java.awt.Dimension(275, 20));

        tblExtensionDepSubNoAccInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dep Sub No", "Deposit Amt", "Maturity Dt.", "Total Int Amt"
            }
        ));
        tblExtensionDepSubNoAccInfo.setMinimumSize(new java.awt.Dimension(225, 16));
        tblExtensionDepSubNoAccInfo.setPreferredSize(new java.awt.Dimension(300, 16));
        tblExtensionDepSubNoAccInfo.setOpaque(false);
        tblExtensionDepSubNoAccInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblExtensionDepSubNoAccInfoMousePressed(evt);
            }
        });
        srpTblExtensionDepSubNoAccInfo.setViewportView(tblExtensionDepSubNoAccInfo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 13, 0);
        panExtensionTblDepSubNoAccInfo.add(srpTblExtensionDepSubNoAccInfo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        panExtensionDepositDetails.add(panExtensionTblDepSubNoAccInfo, gridBagConstraints);

        panExtensionFreqency.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panExtensionFreqency.setMinimumSize(new java.awt.Dimension(275, 135));
        panExtensionFreqency.setPreferredSize(new java.awt.Dimension(275, 135));
        panExtensionFreqency.setLayout(new java.awt.GridBagLayout());

        panExtensionCalenderFreq.setMinimumSize(new java.awt.Dimension(100, 18));
        panExtensionCalenderFreq.setPreferredSize(new java.awt.Dimension(100, 18));
        panExtensionCalenderFreq.setLayout(new java.awt.GridBagLayout());

        rdoExtensionCalender_Freq_Yes.setText("Yes");
        rdoExtensionCalender_Freq_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoExtensionCalender_Freq_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoExtensionCalender_Freq_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoExtensionCalender_Freq_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionCalender_Freq_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionCalenderFreq.add(rdoExtensionCalender_Freq_Yes, gridBagConstraints);

        rdoExtensionCalender_Freq_No.setText("No");
        rdoExtensionCalender_Freq_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoExtensionCalender_Freq_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoExtensionCalender_Freq_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoExtensionCalender_Freq_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionCalender_Freq_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionCalenderFreq.add(rdoExtensionCalender_Freq_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionFreqency.add(panExtensionCalenderFreq, gridBagConstraints);

        lblExtensionCalenderFreq.setText("Calender Frequency");
        lblExtensionCalenderFreq.setMaximumSize(new java.awt.Dimension(115, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionFreqency.add(lblExtensionCalenderFreq, gridBagConstraints);

        lblExtensionCalenderFreqDate.setText("Calender Frequency Day");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionFreqency.add(lblExtensionCalenderFreqDate, gridBagConstraints);

        txtExtensionPrintedOption.setMinimumSize(new java.awt.Dimension(100, 21));
        txtExtensionPrintedOption.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtExtensionPrintedOptionFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionFreqency.add(txtExtensionPrintedOption, gridBagConstraints);

        lblExtensionPrintedOption.setText("Printing No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionFreqency.add(lblExtensionPrintedOption, gridBagConstraints);

        cboExtensionCalenderFreqDay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboExtensionCalenderFreqDay.setMinimumSize(new java.awt.Dimension(100, 21));
        cboExtensionCalenderFreqDay.setPopupWidth(100);
        cboExtensionCalenderFreqDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboExtensionCalenderFreqDayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionFreqency.add(cboExtensionCalenderFreqDay, gridBagConstraints);

        panExtensionAutoRenewal.setMinimumSize(new java.awt.Dimension(100, 18));
        panExtensionAutoRenewal.setPreferredSize(new java.awt.Dimension(100, 18));
        panExtensionAutoRenewal.setLayout(new java.awt.GridBagLayout());

        rdgAutoRenewal.add(rdoExtensionAutoRenewal_Yes);
        rdoExtensionAutoRenewal_Yes.setText("Yes");
        rdoExtensionAutoRenewal_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoExtensionAutoRenewal_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoExtensionAutoRenewal_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoExtensionAutoRenewal_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionAutoRenewal_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionAutoRenewal.add(rdoExtensionAutoRenewal_Yes, gridBagConstraints);

        rdgAutoRenewal.add(rdoExtensionAutoRenewal_No);
        rdoExtensionAutoRenewal_No.setText("No");
        rdoExtensionAutoRenewal_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoExtensionAutoRenewal_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoExtensionAutoRenewal_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoExtensionAutoRenewal_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionAutoRenewal_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionAutoRenewal.add(rdoExtensionAutoRenewal_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionFreqency.add(panExtensionAutoRenewal, gridBagConstraints);

        panExtensionWithInterest.setMinimumSize(new java.awt.Dimension(100, 18));
        panExtensionWithInterest.setPreferredSize(new java.awt.Dimension(100, 18));
        panExtensionWithInterest.setLayout(new java.awt.GridBagLayout());

        rdgWithIntRenewal.add(rdoExtensionWithIntAutoRenewal_Yes);
        rdoExtensionWithIntAutoRenewal_Yes.setText("Yes");
        rdoExtensionWithIntAutoRenewal_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoExtensionWithIntAutoRenewal_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoExtensionWithIntAutoRenewal_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoExtensionWithIntAutoRenewal_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionWithIntAutoRenewal_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionWithInterest.add(rdoExtensionWithIntAutoRenewal_Yes, gridBagConstraints);

        rdgWithIntRenewal.add(rdoExtensionWithIntAutoRenewal_No);
        rdoExtensionWithIntAutoRenewal_No.setText("No");
        rdoExtensionWithIntAutoRenewal_No.setMaximumSize(new java.awt.Dimension(50, 17));
        rdoExtensionWithIntAutoRenewal_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoExtensionWithIntAutoRenewal_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoExtensionWithIntAutoRenewal_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionWithIntAutoRenewal_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionWithInterest.add(rdoExtensionWithIntAutoRenewal_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionFreqency.add(panExtensionWithInterest, gridBagConstraints);

        panExtensionMatAlertRep.setMinimumSize(new java.awt.Dimension(100, 18));
        panExtensionMatAlertRep.setPreferredSize(new java.awt.Dimension(100, 18));
        panExtensionMatAlertRep.setLayout(new java.awt.GridBagLayout());

        rdgMatAlertReport.add(rdoExtensionMatAlertReport_Yes);
        rdoExtensionMatAlertReport_Yes.setText("Yes");
        rdoExtensionMatAlertReport_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoExtensionMatAlertReport_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoExtensionMatAlertReport_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoExtensionMatAlertReport_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionMatAlertReport_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionMatAlertRep.add(rdoExtensionMatAlertReport_Yes, gridBagConstraints);

        rdgMatAlertReport.add(rdoExtensionMatAlertReport_No);
        rdoExtensionMatAlertReport_No.setText("No");
        rdoExtensionMatAlertReport_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoExtensionMatAlertReport_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoExtensionMatAlertReport_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoExtensionMatAlertReport_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionMatAlertReport_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionMatAlertRep.add(rdoExtensionMatAlertReport_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionFreqency.add(panExtensionMatAlertRep, gridBagConstraints);

        lblExtensionMatAlertRep.setText("Renewal Notice");
        lblExtensionMatAlertRep.setMaximumSize(new java.awt.Dimension(115, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionFreqency.add(lblExtensionMatAlertRep, gridBagConstraints);

        lblExtensionWithIntAutoRenewal.setText("Auto Renewal with Int");
        lblExtensionWithIntAutoRenewal.setMaximumSize(new java.awt.Dimension(125, 16));
        lblExtensionWithIntAutoRenewal.setMinimumSize(new java.awt.Dimension(125, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionFreqency.add(lblExtensionWithIntAutoRenewal, gridBagConstraints);

        lblExtensionAutoRenewal.setText("Auto Renewal");
        lblExtensionAutoRenewal.setMinimumSize(new java.awt.Dimension(80, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionFreqency.add(lblExtensionAutoRenewal, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        panExtensionDepositDetails.add(panExtensionFreqency, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panExtensionInformation.add(panExtensionDepositDetails, gridBagConstraints);

        panExtensionAccountInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panExtensionAccountInformation.setMinimumSize(new java.awt.Dimension(835, 305));
        panExtensionAccountInformation.setPreferredSize(new java.awt.Dimension(835, 305));
        panExtensionAccountInformation.setLayout(new java.awt.GridBagLayout());

        panExtensionDepositTransDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Extension Deposit TransDetails"));
        panExtensionDepositTransDetails.setMinimumSize(new java.awt.Dimension(450, 305));
        panExtensionDepositTransDetails.setPreferredSize(new java.awt.Dimension(450, 305));
        panExtensionDepositTransDetails.setLayout(new java.awt.GridBagLayout());

        lblExtensionDepositProdId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionDepositProdId.setText("Change the Product Id, If required");
        lblExtensionDepositProdId.setMinimumSize(new java.awt.Dimension(207, 16));
        lblExtensionDepositProdId.setPreferredSize(new java.awt.Dimension(207, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionDepositTransDetails.add(lblExtensionDepositProdId, gridBagConstraints);

        cboExtensionDepositProdId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboExtensionDepositProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboExtensionDepositProdId.setPopupWidth(200);
        cboExtensionDepositProdId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboExtensionDepositProdIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionDepositTransDetails.add(cboExtensionDepositProdId, gridBagConstraints);

        lblExtensionCategory.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionCategory.setText("Change the Category, If required");
        lblExtensionCategory.setMinimumSize(new java.awt.Dimension(200, 16));
        lblExtensionCategory.setPreferredSize(new java.awt.Dimension(200, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionDepositTransDetails.add(lblExtensionCategory, gridBagConstraints);

        cboExtensionDepositCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboExtensionDepositCategory.setMinimumSize(new java.awt.Dimension(100, 21));
        cboExtensionDepositCategory.setPopupWidth(200);
        cboExtensionDepositCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboExtensionDepositCategoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 4);
        panExtensionDepositTransDetails.add(cboExtensionDepositCategory, gridBagConstraints);

        lblExtensionPaymentFreq.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionPaymentFreq.setText("Interest Payment Frequency");
        lblExtensionPaymentFreq.setMaximumSize(new java.awt.Dimension(80, 18));
        lblExtensionPaymentFreq.setMinimumSize(new java.awt.Dimension(165, 16));
        lblExtensionPaymentFreq.setPreferredSize(new java.awt.Dimension(164, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionDepositTransDetails.add(lblExtensionPaymentFreq, gridBagConstraints);

        lblExtensionPaymentFreqValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblExtensionPaymentFreqValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionDepositTransDetails.add(lblExtensionPaymentFreqValue, gridBagConstraints);

        lblExtensionRateOfInt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionRateOfInt.setText("Rate of Interest");
        lblExtensionRateOfInt.setMaximumSize(new java.awt.Dimension(80, 18));
        lblExtensionRateOfInt.setMinimumSize(new java.awt.Dimension(88, 16));
        lblExtensionRateOfInt.setPreferredSize(new java.awt.Dimension(88, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionDepositTransDetails.add(lblExtensionRateOfInt, gridBagConstraints);

        lblExtensionRateOfIntVal.setMinimumSize(new java.awt.Dimension(100, 16));
        lblExtensionRateOfIntVal.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionDepositTransDetails.add(lblExtensionRateOfIntVal, gridBagConstraints);

        lblExtensionWithdrawingDeposit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionWithdrawingDeposit.setText("Want to withdraw from this deposit ?");
        lblExtensionWithdrawingDeposit.setMaximumSize(new java.awt.Dimension(105, 18));
        lblExtensionWithdrawingDeposit.setMinimumSize(new java.awt.Dimension(227, 16));
        lblExtensionWithdrawingDeposit.setPreferredSize(new java.awt.Dimension(227, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionDepositTransDetails.add(lblExtensionWithdrawingDeposit, gridBagConstraints);

        panExtensionwithdrawing.setMinimumSize(new java.awt.Dimension(100, 20));
        panExtensionwithdrawing.setPreferredSize(new java.awt.Dimension(100, 20));
        panExtensionwithdrawing.setLayout(new java.awt.GridBagLayout());

        rdgStandingInstruciton.add(rdoExtensionWithdrawing_Yes);
        rdoExtensionWithdrawing_Yes.setText("Yes");
        rdoExtensionWithdrawing_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoExtensionWithdrawing_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoExtensionWithdrawing_Yes.setNextFocusableComponent(lblExtensionDepTransAmt);
        rdoExtensionWithdrawing_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoExtensionWithdrawing_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionWithdrawing_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionwithdrawing.add(rdoExtensionWithdrawing_Yes, gridBagConstraints);

        rdgStandingInstruciton.add(rdoExtensionWithdrawing_No);
        rdoExtensionWithdrawing_No.setText("No");
        rdoExtensionWithdrawing_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoExtensionWithdrawing_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoExtensionWithdrawing_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoExtensionWithdrawing_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionWithdrawing_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionwithdrawing.add(rdoExtensionWithdrawing_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 4);
        panExtensionDepositTransDetails.add(panExtensionwithdrawing, gridBagConstraints);

        lblExtensionDepTransAmt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionDepTransAmt.setText("Amount");
        lblExtensionDepTransAmt.setMinimumSize(new java.awt.Dimension(45, 16));
        lblExtensionDepTransAmt.setPreferredSize(new java.awt.Dimension(45, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionDepositTransDetails.add(lblExtensionDepTransAmt, gridBagConstraints);

        txtExtensionDepTransAmtValue.setMinimumSize(new java.awt.Dimension(100, 21));
        txtExtensionDepTransAmtValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtExtensionDepTransAmtValueActionPerformed(evt);
            }
        });
        txtExtensionDepTransAmtValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtExtensionDepTransAmtValueFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 4);
        panExtensionDepositTransDetails.add(txtExtensionDepTransAmtValue, gridBagConstraints);

        lblExtensionofPrematureClosure.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionofPrematureClosure.setText("Penalty on Premature Closure for Extn");
        lblExtensionofPrematureClosure.setMaximumSize(new java.awt.Dimension(115, 18));
        lblExtensionofPrematureClosure.setMinimumSize(new java.awt.Dimension(228, 16));
        lblExtensionofPrematureClosure.setPreferredSize(new java.awt.Dimension(228, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionDepositTransDetails.add(lblExtensionofPrematureClosure, gridBagConstraints);

        panExtensionAdding.setMinimumSize(new java.awt.Dimension(100, 20));
        panExtensionAdding.setPreferredSize(new java.awt.Dimension(100, 20));
        panExtensionAdding.setLayout(new java.awt.GridBagLayout());

        rdgMatAlertReport.add(rdoExtensionofPrematureClosure_Yes);
        rdoExtensionofPrematureClosure_Yes.setText("Yes");
        rdoExtensionofPrematureClosure_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoExtensionofPrematureClosure_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoExtensionofPrematureClosure_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoExtensionofPrematureClosure_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionofPrematureClosure_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionAdding.add(rdoExtensionofPrematureClosure_Yes, gridBagConstraints);

        rdgMatAlertReport.add(rdoExtensionofPrematureClosure_No);
        rdoExtensionofPrematureClosure_No.setText("No");
        rdoExtensionofPrematureClosure_No.setMaximumSize(new java.awt.Dimension(120, 18));
        rdoExtensionofPrematureClosure_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoExtensionofPrematureClosure_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoExtensionofPrematureClosure_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionofPrematureClosure_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionAdding.add(rdoExtensionofPrematureClosure_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 4);
        panExtensionDepositTransDetails.add(panExtensionAdding, gridBagConstraints);

        lblExtensionWithdrawIntAmtValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblExtensionWithdrawIntAmtValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionDepositTransDetails.add(lblExtensionWithdrawIntAmtValue, gridBagConstraints);

        lblExtensionTotalIntAmt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionTotalIntAmt.setText("Upto date Total Interest Amt");
        lblExtensionTotalIntAmt.setMinimumSize(new java.awt.Dimension(184, 16));
        lblExtensionTotalIntAmt.setPreferredSize(new java.awt.Dimension(184, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionDepositTransDetails.add(lblExtensionTotalIntAmt, gridBagConstraints);

        lblExtensionTotalIntAmtValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblExtensionTotalIntAmtValue.setPreferredSize(new java.awt.Dimension(100, 16));
        lblExtensionTotalIntAmtValue.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                lblExtensionTotalIntAmtValueMouseWheelMoved(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionDepositTransDetails.add(lblExtensionTotalIntAmtValue, gridBagConstraints);

        lblExtensionLeftOverIntAmtValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblExtensionLeftOverIntAmtValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionDepositTransDetails.add(lblExtensionLeftOverIntAmtValue, gridBagConstraints);

        lblExtensionDepositDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionDepositDate.setText("Old Deposit Date");
        lblExtensionDepositDate.setMaximumSize(new java.awt.Dimension(99, 16));
        lblExtensionDepositDate.setMinimumSize(new java.awt.Dimension(99, 16));
        lblExtensionDepositDate.setPreferredSize(new java.awt.Dimension(99, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionDepositTransDetails.add(lblExtensionDepositDate, gridBagConstraints);

        lblExtensionDepositDtVal.setMinimumSize(new java.awt.Dimension(100, 16));
        lblExtensionDepositDtVal.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 1);
        panExtensionDepositTransDetails.add(lblExtensionDepositDtVal, gridBagConstraints);

        lblExtensionPeriodRun.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionPeriodRun.setText("Actual Period Run");
        lblExtensionPeriodRun.setMaximumSize(new java.awt.Dimension(80, 18));
        lblExtensionPeriodRun.setMinimumSize(new java.awt.Dimension(105, 16));
        lblExtensionPeriodRun.setPreferredSize(new java.awt.Dimension(105, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionDepositTransDetails.add(lblExtensionPeriodRun, gridBagConstraints);

        lblExtensionPeriodRunValue.setMinimumSize(new java.awt.Dimension(200, 16));
        lblExtensionPeriodRunValue.setPreferredSize(new java.awt.Dimension(200, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionDepositTransDetails.add(lblExtensionPeriodRunValue, gridBagConstraints);

        lblExtensionBalanceInt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionBalanceInt.setText("Balance Interest Payable");
        lblExtensionBalanceInt.setMinimumSize(new java.awt.Dimension(202, 16));
        lblExtensionBalanceInt.setPreferredSize(new java.awt.Dimension(202, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionDepositTransDetails.add(lblExtensionBalanceInt, gridBagConstraints);

        lblExtensionBalanceIntValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblExtensionBalanceIntValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionDepositTransDetails.add(lblExtensionBalanceIntValue, gridBagConstraints);

        panExtensionRateOfInterest.setMinimumSize(new java.awt.Dimension(200, 16));
        panExtensionRateOfInterest.setPreferredSize(new java.awt.Dimension(200, 16));
        panExtensionRateOfInterest.setLayout(new java.awt.GridBagLayout());

        lblExtensionWithdrawIntAmt1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionWithdrawIntAmt1.setText("Int @");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionRateOfInterest.add(lblExtensionWithdrawIntAmt1, gridBagConstraints);

        lblExtensionWithdrawIntAmtValue1.setMinimumSize(new java.awt.Dimension(25, 16));
        lblExtensionWithdrawIntAmtValue1.setPreferredSize(new java.awt.Dimension(25, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panExtensionRateOfInterest.add(lblExtensionWithdrawIntAmtValue1, gridBagConstraints);

        lblExtensionWithdrawIntAmt.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblExtensionWithdrawIntAmt.setText("on Amt being withdrawn");
        lblExtensionWithdrawIntAmt.setMinimumSize(new java.awt.Dimension(140, 16));
        lblExtensionWithdrawIntAmt.setPreferredSize(new java.awt.Dimension(140, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panExtensionRateOfInterest.add(lblExtensionWithdrawIntAmt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        panExtensionDepositTransDetails.add(panExtensionRateOfInterest, gridBagConstraints);

        panExtensionRateOfInterest1.setMinimumSize(new java.awt.Dimension(200, 16));
        panExtensionRateOfInterest1.setPreferredSize(new java.awt.Dimension(200, 16));
        panExtensionRateOfInterest1.setLayout(new java.awt.GridBagLayout());

        lblExtensionWithdrawIntAmt2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionWithdrawIntAmt2.setText("Int @");
        lblExtensionWithdrawIntAmt2.setMinimumSize(new java.awt.Dimension(35, 16));
        lblExtensionWithdrawIntAmt2.setPreferredSize(new java.awt.Dimension(35, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panExtensionRateOfInterest1.add(lblExtensionWithdrawIntAmt2, gridBagConstraints);

        lblExtensionWithdrawIntAmtValue2.setMinimumSize(new java.awt.Dimension(25, 16));
        lblExtensionWithdrawIntAmtValue2.setPreferredSize(new java.awt.Dimension(25, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panExtensionRateOfInterest1.add(lblExtensionWithdrawIntAmtValue2, gridBagConstraints);

        lblExtensionLeftOverIntAmt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionLeftOverIntAmt.setText("on balance deposit Amt");
        lblExtensionLeftOverIntAmt.setMinimumSize(new java.awt.Dimension(138, 16));
        lblExtensionLeftOverIntAmt.setPreferredSize(new java.awt.Dimension(150, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionRateOfInterest1.add(lblExtensionLeftOverIntAmt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        panExtensionDepositTransDetails.add(panExtensionRateOfInterest1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panExtensionAccountInformation.add(panExtensionDepositTransDetails, gridBagConstraints);

        panExtensionInterestDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Extension Interest TransDetails"));
        panExtensionInterestDetails.setMaximumSize(new java.awt.Dimension(250, 300));
        panExtensionInterestDetails.setMinimumSize(new java.awt.Dimension(375, 300));
        panExtensionInterestDetails.setPreferredSize(new java.awt.Dimension(375, 300));
        panExtensionInterestDetails.setLayout(new java.awt.GridBagLayout());

        lblExtensionInterestTransMode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionInterestTransMode.setText("Mode of Transaction");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionInterestDetails.add(lblExtensionInterestTransMode, gridBagConstraints);

        cboExtensionTransMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboExtensionTransMode.setMinimumSize(new java.awt.Dimension(100, 21));
        cboExtensionTransMode.setPopupWidth(100);
        cboExtensionTransMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboExtensionTransModeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionInterestDetails.add(cboExtensionTransMode, gridBagConstraints);

        lblExtensionInterestTransProdType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionInterestTransProdType.setText("Product Type");
        lblExtensionInterestTransProdType.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionInterestDetails.add(lblExtensionInterestTransProdType, gridBagConstraints);

        cboExtensionTransProdType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboExtensionTransProdType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboExtensionTransProdType.setPopupWidth(200);
        cboExtensionTransProdType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboExtensionTransProdTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionInterestDetails.add(cboExtensionTransProdType, gridBagConstraints);

        lblExtensionInterestTransProdId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionInterestTransProdId.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionInterestDetails.add(lblExtensionInterestTransProdId, gridBagConstraints);

        cboExtensionTransProdId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboExtensionTransProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboExtensionTransProdId.setPopupWidth(200);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionInterestDetails.add(cboExtensionTransProdId, gridBagConstraints);

        lblExtensionInterestTransAccNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionInterestTransAccNo.setText("Account No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionInterestDetails.add(lblExtensionInterestTransAccNo, gridBagConstraints);

        panExtensionTransCustomerNO.setMinimumSize(new java.awt.Dimension(122, 21));
        panExtensionTransCustomerNO.setLayout(new java.awt.GridBagLayout());

        txtExtensionTransCustomerIdCr.setEditable(false);
        txtExtensionTransCustomerIdCr.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        panExtensionTransCustomerNO.add(txtExtensionTransCustomerIdCr, gridBagConstraints);

        btnExtensionTransCustomerIdFileOpenCr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnExtensionTransCustomerIdFileOpenCr.setPreferredSize(new java.awt.Dimension(18, 18));
        btnExtensionTransCustomerIdFileOpenCr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtensionTransCustomerIdFileOpenCrActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panExtensionTransCustomerNO.add(btnExtensionTransCustomerIdFileOpenCr, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionInterestDetails.add(panExtensionTransCustomerNO, gridBagConstraints);

        lblExtensionInterestCustName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionInterestCustName.setText("Customer Name");
        lblExtensionInterestCustName.setMinimumSize(new java.awt.Dimension(95, 18));
        lblExtensionInterestCustName.setPreferredSize(new java.awt.Dimension(95, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionInterestDetails.add(lblExtensionInterestCustName, gridBagConstraints);

        lblExtensionTransCustNameVal.setForeground(new java.awt.Color(0, 51, 204));
        lblExtensionTransCustNameVal.setMinimumSize(new java.awt.Dimension(125, 18));
        lblExtensionTransCustNameVal.setPreferredSize(new java.awt.Dimension(125, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionInterestDetails.add(lblExtensionTransCustNameVal, gridBagConstraints);

        lblExtensionDepositTransTokenNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionDepositTransTokenNo.setText("Token No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionInterestDetails.add(lblExtensionDepositTransTokenNo, gridBagConstraints);

        txtExtensionTransTokenNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtExtensionTransTokenNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtExtensionTransTokenNoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 4);
        panExtensionInterestDetails.add(txtExtensionTransTokenNo, gridBagConstraints);

        panExtensionWithdrawingInterest.setMinimumSize(new java.awt.Dimension(100, 16));
        panExtensionWithdrawingInterest.setPreferredSize(new java.awt.Dimension(100, 20));
        panExtensionWithdrawingInterest.setLayout(new java.awt.GridBagLayout());

        rdgWithIntRenewal.add(rdoExtensionWithdrawingInt_Yes);
        rdoExtensionWithdrawingInt_Yes.setText("Yes");
        rdoExtensionWithdrawingInt_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoExtensionWithdrawingInt_Yes.setMinimumSize(new java.awt.Dimension(50, 17));
        rdoExtensionWithdrawingInt_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoExtensionWithdrawingInt_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionWithdrawingInt_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionWithdrawingInterest.add(rdoExtensionWithdrawingInt_Yes, gridBagConstraints);

        rdgWithIntRenewal.add(rdoExtensionWithdrawingInt_No);
        rdoExtensionWithdrawingInt_No.setText("No");
        rdoExtensionWithdrawingInt_No.setMaximumSize(new java.awt.Dimension(50, 17));
        rdoExtensionWithdrawingInt_No.setMinimumSize(new java.awt.Dimension(50, 17));
        rdoExtensionWithdrawingInt_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoExtensionWithdrawingInt_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExtensionWithdrawingInt_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExtensionWithdrawingInterest.add(rdoExtensionWithdrawingInt_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionInterestDetails.add(panExtensionWithdrawingInterest, gridBagConstraints);

        lblExtensionWithdrawingIntAmt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionWithdrawingIntAmt.setText("Want to withdraw interest amount ?");
        lblExtensionWithdrawingIntAmt.setMaximumSize(new java.awt.Dimension(125, 16));
        lblExtensionWithdrawingIntAmt.setMinimumSize(new java.awt.Dimension(205, 15));
        lblExtensionWithdrawingIntAmt.setPreferredSize(new java.awt.Dimension(205, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionInterestDetails.add(lblExtensionWithdrawingIntAmt, gridBagConstraints);

        lblExtensionIntAmt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionIntAmt.setText("Amount");
        lblExtensionIntAmt.setMinimumSize(new java.awt.Dimension(45, 15));
        lblExtensionIntAmt.setPreferredSize(new java.awt.Dimension(45, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionInterestDetails.add(lblExtensionIntAmt, gridBagConstraints);

        txtExtensionTransAmtValue.setMinimumSize(new java.awt.Dimension(100, 21));
        txtExtensionTransAmtValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtExtensionTransAmtValueFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionInterestDetails.add(txtExtensionTransAmtValue, gridBagConstraints);

        lblExtensionTotalRepayAmt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExtensionTotalRepayAmt.setText("Total amount to be Repayed");
        lblExtensionTotalRepayAmt.setMinimumSize(new java.awt.Dimension(165, 16));
        lblExtensionTotalRepayAmt.setPreferredSize(new java.awt.Dimension(165, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 4);
        panExtensionInterestDetails.add(lblExtensionTotalRepayAmt, gridBagConstraints);

        lblExtensionTotalRepayAmtValue.setMinimumSize(new java.awt.Dimension(100, 16));
        lblExtensionTotalRepayAmtValue.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panExtensionInterestDetails.add(lblExtensionTotalRepayAmtValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panExtensionAccountInformation.add(panExtensionInterestDetails, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panExtensionInformation.add(panExtensionAccountInformation, gridBagConstraints);

        tabTermDeposit.addTab("Extension Information", panExtensionInformation);

        panTransaction.setPreferredSize(new java.awt.Dimension(800, 380));
        panTransaction.setLayout(new java.awt.GridBagLayout());
        tabTermDeposit.addTab("Transaction", panTransaction);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panTermDeposit.add(tabTermDeposit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(panTermDeposit, gridBagConstraints);

        btnView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_Summary.gif"))); // NOI18N
        btnView.setToolTipText("Enquiry");
        btnView.setEnabled(false);
        btnView.setFocusable(false);
        btnView.setMinimumSize(new java.awt.Dimension(29, 27));
        btnView.setPreferredSize(new java.awt.Dimension(29, 27));
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnView);

        lblSpace4.setText("     ");
        tbrTermDeposit.add(lblSpace4);

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif"))); // NOI18N
        btnNew.setToolTipText("New");
        btnNew.setEnabled(false);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnNew);

        lblSpace17.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace17.setText("     ");
        lblSpace17.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace17.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace17.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermDeposit.add(lblSpace17);

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_EDIT.gif"))); // NOI18N
        btnEdit.setToolTipText("Edit");
        btnEdit.setEnabled(false);
        btnEdit.setFocusable(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnEdit);

        lblSpace18.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace18.setText("     ");
        lblSpace18.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace18.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace18.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermDeposit.add(lblSpace18);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif"))); // NOI18N
        btnDelete.setToolTipText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.setFocusable(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnDelete);

        lblSpace2.setText("     ");
        tbrTermDeposit.add(lblSpace2);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif"))); // NOI18N
        btnSave.setToolTipText("Save");
        btnSave.setFocusable(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnSave);

        lblSpace19.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace19.setText("     ");
        lblSpace19.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace19.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace19.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermDeposit.add(lblSpace19);

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CANCEL.gif"))); // NOI18N
        btnCancel.setToolTipText("Cancel");
        btnCancel.setFocusable(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnCancel);

        lblSpace3.setText("     ");
        tbrTermDeposit.add(lblSpace3);

        btnAuthorize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_AUTHORIZE.gif"))); // NOI18N
        btnAuthorize.setToolTipText("Authorize");
        btnAuthorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAuthorizeActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnAuthorize);

        lblSpace20.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace20.setText("     ");
        lblSpace20.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace20.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace20.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermDeposit.add(lblSpace20);

        btnException.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_EXCEPTION.gif"))); // NOI18N
        btnException.setToolTipText("Exception");
        btnException.setFocusable(false);
        btnException.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExceptionActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnException);

        lblSpace21.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace21.setText("     ");
        lblSpace21.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace21.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace21.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermDeposit.add(lblSpace21);

        btnReject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_REJECT.gif"))); // NOI18N
        btnReject.setToolTipText("Reject");
        btnReject.setMaximumSize(new java.awt.Dimension(29, 27));
        btnReject.setMinimumSize(new java.awt.Dimension(29, 27));
        btnReject.setPreferredSize(new java.awt.Dimension(29, 27));
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnReject);

        lblSpace5.setText("     ");
        tbrTermDeposit.add(lblSpace5);

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_PRINT.gif"))); // NOI18N
        btnPrint.setToolTipText("Print");
        btnPrint.setFocusable(false);
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnPrint);

        lblSpace22.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace22.setText("     ");
        lblSpace22.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace22.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace22.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermDeposit.add(lblSpace22);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CLOSE.gif"))); // NOI18N
        btnClose.setToolTipText("Close");
        btnClose.setFocusable(false);
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnClose);

        lblSpace8.setText("     ");
        tbrTermDeposit.add(lblSpace8);

        btnCustomerIdFileOpen1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnCustomerIdFileOpen1.setToolTipText("Closed Deposits");
        btnCustomerIdFileOpen1.setFocusable(false);
        btnCustomerIdFileOpen1.setMinimumSize(new java.awt.Dimension(29, 27));
        btnCustomerIdFileOpen1.setPreferredSize(new java.awt.Dimension(29, 27));
        btnCustomerIdFileOpen1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomerIdFileOpen1ActionPerformed(evt);
            }
        });
        tbrTermDeposit.add(btnCustomerIdFileOpen1);

        lblSpace6.setText("     ");
        lblSpace6.setMinimumSize(new java.awt.Dimension(200, 18));
        lblSpace6.setPreferredSize(new java.awt.Dimension(200, 18));
        tbrTermDeposit.add(lblSpace6);

        lblPanNumber1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPanNumber1.setText("Account No");
        lblPanNumber1.setMinimumSize(new java.awt.Dimension(72, 16));
        tbrTermDeposit.add(lblPanNumber1);

        lblSpace7.setText("     ");
        tbrTermDeposit.add(lblSpace7);

        txtEditDepositNo.setAllowAll(true);
        txtEditDepositNo.setMinimumSize(new java.awt.Dimension(100, 18));
        txtEditDepositNo.setPreferredSize(new java.awt.Dimension(100, 18));
        txtEditDepositNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEditDepositNoFocusLost(evt);
            }
        });
        tbrTermDeposit.add(txtEditDepositNo);

        lblSpace9.setText("     ");
        tbrTermDeposit.add(lblSpace9);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(tbrTermDeposit, gridBagConstraints);

        panStatus.setLayout(new java.awt.GridBagLayout());

        lblSpace1.setText(" Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblSpace1, gridBagConstraints);

        lblStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblStatus.setText("                      ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblStatus, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblMsg, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(panStatus, gridBagConstraints);

        mnuProcess.setText("Process");

        mitNew.setText("New");
        mitNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitNewActionPerformed(evt);
            }
        });
        mnuProcess.add(mitNew);

        mitEdit.setText("Edit");
        mitEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitEditActionPerformed(evt);
            }
        });
        mnuProcess.add(mitEdit);

        mitDelete.setText("Delete");
        mitDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitDeleteActionPerformed(evt);
            }
        });
        mnuProcess.add(mitDelete);
        mnuProcess.add(sptDelete);

        mitSave.setText("Save");
        mitSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitSaveActionPerformed(evt);
            }
        });
        mnuProcess.add(mitSave);

        mitCancel.setText("Cancel");
        mitCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitCancelActionPerformed(evt);
            }
        });
        mnuProcess.add(mitCancel);
        mnuProcess.add(sptCancel);

        mitAuthorize.setText("Authorize");
        mitAuthorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitAuthorizeActionPerformed(evt);
            }
        });
        mnuProcess.add(mitAuthorize);

        mitReject.setText("Reject");
        mitReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitRejectActionPerformed(evt);
            }
        });
        mnuProcess.add(mitReject);

        mitException.setText("Exception");
        mitException.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitExceptionActionPerformed(evt);
            }
        });
        mnuProcess.add(mitException);
        mnuProcess.add(sptException);

        mitClose.setText("Close");
        mitClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitCloseActionPerformed(evt);
            }
        });
        mnuProcess.add(mitClose);

        mbrMain.add(mnuProcess);

        setJMenuBar(mbrMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblExtensionTotalIntAmtValueMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_lblExtensionTotalIntAmtValueMouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_lblExtensionTotalIntAmtValueMouseWheelMoved

    private void txtExtensionDepTransAmtValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtExtensionDepTransAmtValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtExtensionDepTransAmtValueActionPerformed

    private void chkRenewSameNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRenewSameNoActionPerformed
        // TODO add your handling code here:

        HashMap hmap = new HashMap();
//        cboProdId.getModel().get
        String pid = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
        hmap.put("PROD_ID", pid);
        List lst = ClientUtil.executeQuery("getSameNoFromRenewProd", hmap);
        if (rdoRenewalWithdrawing_Yes.isSelected() == false && rdoRenewalWithdrawing_No.isSelected() == false) {
            ClientUtil.displayAlert("First Select renewal withdrawing yes or no");
            if (lst != null && lst.size() > 0) {
                HashMap hash = (HashMap) lst.get(0);
                String samenoAllowed = CommonUtil.convertObjToStr(hash.get("SAME_NO_ALLOWED"));
                if (samenoAllowed.equals("Y")) {
                    chkRenewSameNo.setSelected(true);
                } else {
                    chkRenewSameNo.setSelected(false);
                }

            }
            return;
        }


        if (lst != null && lst.size() > 0) {
            hmap = (HashMap) lst.get(0);
            String samenoAllowed = CommonUtil.convertObjToStr(hmap.get("SAME_NO_ALLOWED"));
            boolean chkRenew = chkRenewSameNo.isSelected();
            if (!chkRenew) {
                if (samenoAllowed.equals("Y")) {
                    int confirm = ClientUtil.confirmationAlert("Do You Want to Renew With New No");
                    if (confirm == 0) {
                        hmap.put("SAME_NO", "N");
                        hmap.put("PROD_ID", pid);
                        //                        ClientUtil.execute("updateProdRenewal",hmap);
                        observable.setRenewalCountWithScreen("TRUE");
                    } else {
                        chkRenewSameNo.setSelected(true);
                    }
                }
            } else {
                if (samenoAllowed.equals("N")) {
                    chkRenewSameNo.setSelected(false);
                    int confirm = ClientUtil.confirmationAlert("Do You Want to Renewal With Same No");
                    if (confirm == 0) {
                        hmap.put("SAME_NO", "Y");
                        hmap.put("PROD_ID", pid);
                        chkRenewSameNo.setSelected(true);
                        observable.setRenewalCountWithScreen("SAME_NO");
                        //                        ClientUtil.execute("updateProdRenewal",hmap);
                    } else {
                        chkRenewSameNo.setSelected(false);
                    }
                }
            }
        }

    }//GEN-LAST:event_chkRenewSameNoActionPerformed

    private void lblRenewalBalIntAmtValMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRenewalBalIntAmtValMouseClicked
        // TODO add your handling code here:
        if (CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue() != 0) {//lblRenewalInterestRepayAmtVal
            enteredAmount(CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue());
        }
    }//GEN-LAST:event_lblRenewalBalIntAmtValMouseClicked
    //Added By Suresh

    public void enteredAmount(double amt) {
        double intAmount = amt;
        HashMap amountMap = new HashMap();
        amountMap.put("TITLE", "Interest Amount");
        amountMap.put("TOLERANCE_AMT", CommonConstants.TOLERANCE_AMT);
        amountMap.put("SELECTED_AMT", String.valueOf(intAmount));
        amountMap.put("CALCULATED_AMT", String.valueOf(intAmount));
        TextUI textUI = new TextUI(this, this, amountMap);
    }

    public void modifyTransData(Object objData) {
        //system.out.println("modifyTransData");
        TextUI obj = (TextUI) objData;
        double newEnteredData = 0;
        double addDepositAmt = 0;
        double renewalInt = 0;
        String enteredData = obj.getTxtData();
        //system.out.println("enteredDataenteredDataenteredData" + enteredData);
        double renewalInterest = CommonUtil.convertObjToDouble(observable.getBalIntAmt()).doubleValue();
        //system.out.println("renewalInterestrenewalInterest" + renewalInterest);
        double depositAmt = CommonUtil.convertObjToDouble(txtRenewalDepositAmount.getText()).doubleValue();

        double newdepositAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();

        if (!txtRenewalIntAmtValue.getText().toString().equals("")) {
            renewalInt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
        }

        //system.out.println("depositAmtdepositAmt" + depositAmt);
        if (renewalInterest < 0) {
            renewalInterest *= -1;
        }
        if (enteredData.length() > 0) {
            newEnteredData = CommonUtil.convertObjToDouble(enteredData).doubleValue();

        }
//        if (rdoRenewalAdding_Yes.isSelected() == true) {
//            addDepositAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
//        } else if (rdoRenewalWithdrawing_Yes.isSelected() == true) {
//             addDepositAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
//             if(addDepositAmt>0)
//                 addDepositAmt*=-1;
//        }
        //system.out.println("depositAmt" + depositAmt);
        //system.out.println("renewalInterest" + renewalInterest);
        //system.out.println("newEnteredData" + newEnteredData);
        //system.out.println("addDepositAmt" + addDepositAmt);

        //txtRenewalDepositAmount.setText(String.valueOf(depositAmt+renewalInterest+newEnteredData+addDepositAmt));
        //txtRenewalDepositAmount.setText(String.valueOf(depositAmt+(newEnteredData-renewalInterest)+addDepositAmt));
        //added by jiby
        if (rdoRenewalWithdrawingInt_Yes.isSelected() == false && rdoExtensionWithdrawingInt_No.isSelected() == false) {
            if (rdoRenewalAdding_Yes.isSelected()) {
                Double renDepAmt = 0.0;
                renDepAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                //system.out.println("renDepAmt" + renDepAmt);
                txtRenewalDepositAmount.setText(String.valueOf(newdepositAmt + renDepAmt));
            }
        } else {
            if (rdoRenewalAdding_Yes.isSelected()) {
                Double renDepAmt = 0.0;
                renDepAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                //system.out.println("renDepAmt" + renDepAmt);
                txtRenewalDepositAmount.setText(String.valueOf(newdepositAmt + (newEnteredData - renewalInt) + addDepositAmt + renDepAmt));
            }
        }
        ///////////////
        //system.out.println("txtRenewalDepositAmount" + txtRenewalDepositAmount.getText().toString());
        observable.matAmount = observable.matAmount + renewalInterest + newEnteredData;
        //  lblRenewalBalIntAmtVal
        //system.out.println("enteredData" + enteredData);
        lblRenewalBalIntAmtVal.setText(String.valueOf(enteredData));
        observable.setRenewalBalIntAmtVal(lblRenewalBalIntAmtVal.getText());
        lblRenewalInterestRepayAmtVal.setText(String.valueOf(CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue()
                + CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue()));
        observable.setRenewalInterestRepayAmtVal(lblRenewalInterestRepayAmtVal.getText());
        /////uncom by jiby  
        if (rdoRenewalWithdrawingInt_Yes.isSelected()) {
            // //system.out.println("jiby");
            rdoRenewalWithdrawingInt_YesActionPerformed(null);
            renew();

        } else {
            rdoRenewalWithdrawingInt_NoActionPerformed(null);
        }
        /////////////////////////////////////////////
        //system.out.println("txtRenewalDepositAmount" + txtRenewalDepositAmount.getText().toString());
        txtRenewalMaturityAmount.setText(txtRenewalDepositAmount.getText().toString());
    }

    private void txtMaturityAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaturityAmountFocusLost
        // TODO add your handling code here:
        if (observable.productBehavesLike.equals("RECURRING") && txtMaturityAmount.getText().length() > 0 && txtDepositAmount.getText().length() > 0) {
            if (CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue() > 0 || CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue() > 0) {
                double period = 0;
                if (CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue() > 0) {
                    period = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue() * 12;
                }
                if (CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue() > 0) {
                    period += CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue();
                }
                double pricipalAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                double maturityAmt = period * pricipalAmt;
                if (maturityAmt > CommonUtil.convertObjToDouble(txtMaturityAmount.getText()).doubleValue()) {
                    ClientUtil.showMessageWindow("Maturity Amount Should be equal or Greater Than Rs. " + maturityAmt);
                    txtMaturityAmount.setText("");
                    txtTotalInterestAmount.setText("");
                    return;
                } else {
                    double totInt = 0.0;
                    totInt = CommonUtil.convertObjToDouble(txtMaturityAmount.getText()).doubleValue() - maturityAmt;
                    observable.setTxtMaturityAmount(CommonUtil.convertObjToStr(txtMaturityAmount.getText()));
                    observable.setTxtTotalInterestAmount(String.valueOf(totInt));
                    txtTotalInterestAmount.setText(String.valueOf(totInt));
                    if (totInt == 0) {
                        int yesNo = 0;
                        String[] options = {"Yes", "No"};
                        yesNo = COptionPane.showOptionDialog(null, " Principal Amount Equal to Maturity Amount, "
                                + "Do you want to Continue? ", CommonConstants.WARNINGTITLE,
                                COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                null, options, options[0]);
                        //system.out.println("#$#$$ yesNo : " + yesNo);
                        if (yesNo == 1) {
                            txtMaturityAmount.setText("");
                            txtTotalInterestAmount.setText("");
                        }
                    }
                }
            } else {
                ClientUtil.showMessageWindow("Enter Period Of Deposits !!! ");
            }
        }
    }//GEN-LAST:event_txtMaturityAmountFocusLost

    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
        // TODO add your handling code here:
        if (txtCustomerId.getText().length() > 0) {
            HashMap whereMap = new HashMap();
            whereMap.put("CUST_ID", txtCustomerId.getText());
            whereMap.put("RESIZE", "RESIZE");
            TableDialogUI tableData = new TableDialogUI("getCorporateCustDetails", whereMap);
            tableData.setTitle("Authorized Persons Details");
            tableData.show();
        }
    }//GEN-LAST:event_btnDisplayActionPerformed

    private void cboRenewalInterestTransModeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cboRenewalInterestTransModeFocusLost
        // TODO add your handling code here:
        //Added BY Suresh
        setRenewalDetails();
    }//GEN-LAST:event_cboRenewalInterestTransModeFocusLost

    private void cboRenewalDepTransModeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cboRenewalDepTransModeFocusLost
        // TODO add your handling code here:
        //Added BY Suresh
        setRenewalDetails();
    }//GEN-LAST:event_cboRenewalDepTransModeFocusLost

    private void cboRenewalInterestPaymentFrequencyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cboRenewalInterestPaymentFrequencyFocusLost
        // TODO add your handling code here:
        //Added BY Suresh
        setRenewalDetails();
    }//GEN-LAST:event_cboRenewalInterestPaymentFrequencyFocusLost

    private void lblValCustomerNameMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblValCustomerNameMouseMoved
        lblValCustomerName.setToolTipText(lblValCustomerName.getText());
    }//GEN-LAST:event_lblValCustomerNameMouseMoved

    private void lblValStreetMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblValStreetMouseMoved
        lblValStreet.setToolTipText(lblValStreet.getText());
    }//GEN-LAST:event_lblValStreetMouseMoved

    private void lblValAreaMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblValAreaMouseMoved
        lblValArea.setToolTipText(lblValArea.getText());
    }//GEN-LAST:event_lblValAreaMouseMoved

    private void lblValCityMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblValCityMouseMoved
        lblValCity.setToolTipText(lblValCity.getText());
    }//GEN-LAST:event_lblValCityMouseMoved

    private void lblValCountryMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblValCountryMouseMoved
        lblValCountry.setToolTipText(lblValCountry.getText());
    }//GEN-LAST:event_lblValCountryMouseMoved

    private void lblValPinMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblValPinMouseMoved
        lblValPin.setToolTipText(lblValPin.getText());
    }//GEN-LAST:event_lblValPinMouseMoved

    private void lblValStateMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblValStateMouseMoved
        lblValState.setToolTipText(lblValState.getText());
    }//GEN-LAST:event_lblValStateMouseMoved

    private void txtCustomerIdCrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCustomerIdCrFocusLost
        // TODO add your handling code here:
        if (txtCustomerIdCr.getText().length() > 0) {
            txtAccNoActionPerformed();
        }

    }//GEN-LAST:event_txtCustomerIdCrFocusLost

    private void txtAccNoActionPerformed() {
        HashMap hash = new HashMap();
        String ACCOUNTNO = (String) txtCustomerIdCr.getText();
        String custid = txtCustomerId.getText();
        HashMap hashmap = new HashMap();
//        observable.setProdType("");
        if (/*(!(observable.getProdType().length()>0)) && */ACCOUNTNO.length() > 0) {
            if (observable.checkAcNoWithoutProdType(ACCOUNTNO)) {
                txtCustomerIdCr.setText(observable.getCustomerIdCr());
                ACCOUNTNO = (String) txtCustomerIdCr.getText();
                cboProdId.setModel(observable.getCbmProdId());
                cboProdIdActionPerformed(null);
                String pid = ((ComboBoxModel) cboProdId.getModel()).getKeyForSelected().toString();
                String prodid = CommonUtil.convertObjToStr(observable.getCbmProdId().getDataForKey(pid));
//                txtCustomerIdCr.setText(ACCOUNTNO);
                String prodType = ((ComboBoxModel) cboProdType.getModel()).getKeyForSelected().toString();

                double periodicAmt = CommonUtil.convertObjToDouble(txtPeriodicInterestAmount.getText()).doubleValue();

                Date d = DateUtil.getDateMMDDYYYY(tdtMaturityDate.getDateValue());
                Date FdMeturDt = (Date) currDt.clone();
                FdMeturDt.setDate(d.getDate());
                FdMeturDt.setMonth(d.getMonth());
                FdMeturDt.setYear(d.getYear());
                String feq = ((ComboBoxModel) cboInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
                observable.setAccountName(ACCOUNTNO, prodType);
                lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
                if (prodType.equals("MDS")) {
                    hashmap.put("ACNO", ACCOUNTNO + "_1");
                } else {
                    hashmap.put("ACNO", ACCOUNTNO);
                }
                hashmap.put("CUST_ID", custid);

                if (prodType != null && !prodType.equals("GL")) {
                    List LTDList = ClientUtil.executeQuery("getLTDDetails", hashmap);
                    List MDSList = ClientUtil.executeQuery("getMDSAccountDetails", hashmap);
                    List feqList = ClientUtil.executeQuery("getIntfreqDetails", hashmap);
                    if (prodType.equals("MDS")) {
                        hashmap = (HashMap) MDSList.get(0);
                        String memNo = CommonUtil.convertObjToStr(hashmap.get("MEMBER_NO"));
                        String custMem = CommonUtil.convertObjToStr(hashmap.get("CUST_MEMBER"));
                        Date endDT = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(hashmap.get("CHIT_END_DT")));
                        Date chitEndDT = (Date) currDt.clone();
                        chitEndDT.setDate(endDT.getDate());
                        chitEndDT.setMonth(endDT.getMonth());
                        chitEndDT.setYear(endDT.getYear());
                        if (memNo.equals(custMem)) {
                            if (DateUtil.dateDiff(chitEndDT, currDt) > 0) {
                                ClientUtil.displayAlert(" This Chit scheme has already ended on" + chitEndDT);
                                return;
                            } else {
                                txtCustomerIdCr.setText(ACCOUNTNO + "_1");
                                lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
                            }
                        } else {
                            int yesNo = 0;
                            String[] options = {"Yes", "No"};
                            yesNo = COptionPane.showOptionDialog(null, "MDS account belongs to different customer. Do you want to continue?", CommonConstants.WARNINGTITLE,
                                    COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                    null, options, options[0]);
                            if (yesNo == 0) {
                                if (DateUtil.dateDiff(chitEndDT, currDt) > 0) {
                                    ClientUtil.displayAlert(" This Chit scheme has already ended on" + chitEndDT);
                                    txtCustomerIdCr.setText("");
                                    lblCustomerNameCrValue.setText("");
                                    return;
                                } else {
                                    txtCustomerIdCr.setText(ACCOUNTNO + "_1");
                                    lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
                                }
                            } else {
                                txtCustomerIdCr.setText("");
                                lblCustomerNameCrValue.setText("");
                                return;
                            }
                        }

                    } else if (feqList.size() > 0 && feqList != null) {


                        hashmap = (HashMap) feqList.get(0);
                        String intPayferq = CommonUtil.convertObjToStr(hashmap.get("INTPAY_FREQ"));
                        double Rdamt = CommonUtil.convertObjToDouble(hashmap.get("DEPOSIT_AMT")).doubleValue();
                        Date date = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(hashmap.get("MATURITY_DT")));
                        String behaves = CommonUtil.convertObjToStr(hashmap.get("BEHAVES_LIKE"));

                        String cid = CommonUtil.convertObjToStr(hashmap.get("CUST_ID"));
                        Date RDMatureDt = (Date) currDt.clone();
                        RDMatureDt.setDate(date.getDate());
                        RDMatureDt.setMonth(date.getMonth());
                        RDMatureDt.setYear(date.getYear());
                        if (behaves.equals("RECURRING")) {
                            if (feq.equals(intPayferq)) {

                                if (periodicAmt >= Rdamt) {
                                    if (FdMeturDt.before(RDMatureDt)) {


                                        int yesNo = 0;
                                        String[] options = {"Yes", "No"};
                                        yesNo = COptionPane.showOptionDialog(null, "FD Meturity date is less than the RD meturity date. Do you want to continue?", CommonConstants.WARNINGTITLE,
                                                COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                                null, options, options[0]);
                                        if (yesNo == 0) {
                                            if (DateUtil.dateDiff(RDMatureDt, currDt) > 0) {
                                                ClientUtil.displayAlert("RD has Matured");
                                                return;
                                            } else {
                                                if (cid.equals(custid)) {
                                                    txtCustomerIdCr.setText(ACCOUNTNO + "_1");
                                                    observable.setAccountName(ACCOUNTNO + "_1", prodType);
                                                    lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
                                                } else {
                                                    yesNo = COptionPane.showOptionDialog(null, "RD account belongs to different customer. Do you want to continue?", CommonConstants.WARNINGTITLE,
                                                            COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                                            null, options, options[0]);
                                                    if (yesNo == 0) {
                                                        txtCustomerIdCr.setText(ACCOUNTNO + "_1");
                                                        observable.setAccountName(ACCOUNTNO + "_1", prodType);
                                                        lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
                                                    } else {
                                                        txtCustomerIdCr.setText("");
                                                        lblCustomerNameCrValue.setText("");
                                                        return;
                                                    }
                                                }
                                            }
                                        } else {
                                            return;
                                        }
                                    } else {
                                        int yesNo = 0;
                                        String[] options = {"Yes", "No"};
                                        if (DateUtil.dateDiff(RDMatureDt, currDt) > 0) {
                                            ClientUtil.displayAlert("RD has Matured");
                                            return;
                                        } else {
                                            if (cid.equals(custid)) {
                                                txtCustomerIdCr.setText(ACCOUNTNO + "_1");
                                                observable.setAccountName(ACCOUNTNO + "_1", prodType);
                                                lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
                                            } else {
                                                yesNo = COptionPane.showOptionDialog(null, "RD account belongs to different customer. Do you want to continue?", CommonConstants.WARNINGTITLE,
                                                        COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                                        null, options, options[0]);
                                                if (yesNo == 0) {
                                                    txtCustomerIdCr.setText(ACCOUNTNO + "_1");
                                                    observable.setAccountName(ACCOUNTNO + "_1", prodType);
                                                    lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
                                                } else {
                                                    txtCustomerIdCr.setText("");
                                                    lblCustomerNameCrValue.setText("");
                                                    return;
                                                }
                                            }
                                        }

                                    }
                                } else {
                                    ClientUtil.displayAlert("FD Interest amount lesser than RD instalment amount");
                                    txtCustomerIdCr.setText("");
                                    lblCustomerNameCrValue.setText("");
                                    return;
                                }

                            } else {
                                ClientUtil.displayAlert("FD Interest payment frequency and RD instalment frequency not same");
                                txtCustomerIdCr.setText("");
                                lblCustomerNameCrValue.setText("");
                                return;
                            }
                        } else {
                            ClientUtil.displayAlert("Please Select only RD type account");
                            cboProdId.setSelectedItem(null);
                            txtCustomerIdCr.setText("");
                            lblCustomerNameCrValue.setText("");
                            return;
                        }

                    } else if (LTDList.size() > 0 && LTDList != null && prodType.equals("TL")) {
                        hashmap = (HashMap) LTDList.get(0);
                        String LTDPurp = "true";
                        String behaves = CommonUtil.convertObjToStr(hashmap.get("BEHAVES_LIKE"));
                        String ltdcust = CommonUtil.convertObjToStr(hashmap.get("CUST_ID"));

                        String cid = txtCustomerId.getText();

                        Date matdt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(hashmap.get("MATURITY_DT")));
                        Date maturitydt = (Date) currDt.clone();
                        if (matdt != null) {
                            maturitydt.setDate(matdt.getDate());
                            maturitydt.setMonth(matdt.getMonth());
                            maturitydt.setYear(matdt.getYear());
                        }
                        if (cid.equals(ltdcust)) {
                            if (DateUtil.dateDiff(maturitydt, currDt) > 0) {
                                ClientUtil.displayAlert("Loan Repayment date should be greater than the current date");
                                return;
                            } else {
                                txtCustomerIdCr.setText(ACCOUNTNO);
                                lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
                            }
                        } else {
                            int yesNo = 0;
                            String[] options = {"Yes", "No"};
                            yesNo = COptionPane.showOptionDialog(null, "Loan account belongs to different customer. Do you want to continue?", CommonConstants.WARNINGTITLE,
                                    COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                    null, options, options[0]);
                            if (yesNo == 0) {
                                if (DateUtil.dateDiff(maturitydt, currDt) > 0) {
                                    ClientUtil.displayAlert("Loan Repayment date should be greater than the current date");
                                    txtCustomerIdCr.setText("");
                                    lblCustomerNameCrValue.setText("");
                                    return;
                                } else {
                                    txtCustomerIdCr.setText(ACCOUNTNO);
                                    lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
                                }
                            } else {
                                txtCustomerIdCr.setText("");
                                lblCustomerNameCrValue.setText("");
                                return;
                            }
                        }

                    } else {
                        txtCustomerIdCr.setText(ACCOUNTNO);
                        lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
                    }

                }

            } else {
                ClientUtil.showAlertWindow("Invalid Account No.");
                txtCustomerIdCr.setText("");
                return;
            }
        }


    }

    private void txtDepsoitNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDepsoitNoFocusLost
        // TODO add your handling code here:
        if (txtDepsoitNo.getText().length() > 0) {
            HashMap existingMap = new HashMap();
            existingMap.put("DEPOSIT_NO", txtDepsoitNo.getText());
            existingMap.put("SELECTED_BRANCH_ID", getSelectedBranchID());
            List lst = ClientUtil.executeQuery("viewAllAccInfo", existingMap);
            if (lst != null && lst.size() > 0) {
                existingMap = (HashMap) lst.get(0);
                existingMap.put("DEPOSIT_NO", txtDepsoitNo.getText());
                existingMap.put("DEPOSIT NO", txtDepsoitNo.getText());
                existingMap.put("SELECTED_BRANCH_ID", getSelectedBranchID());
                observable.setActionType(ClientConstants.ACTIONTYPE_EDIT);
                observable.setTxtDepsoitNo(txtDepsoitNo.getText());
                viewType = "EDIT";
                fillData(existingMap);
                txtReferenceNo.setEditable(false);
                txtDepsoitNo.setEditable(false);
                txtDepsoitNo.setEnabled(false);
                btnView.setEnabled(false);
                btnNew.setEnabled(false);
                btnEdit.setEnabled(false);
                btnDelete.setEnabled(false);
//                btnSave.setEnabled(false);
                btnCancel.setEnabled(true);
                btnAuthorize.setEnabled(false);
                btnReject.setEnabled(false);
                btnException.setEnabled(false);
                btnPrint.setEnabled(false);
                btnCustomerIdFileOpen1.setEnabled(false);
                panExistingCustomer.setVisible(false);
                lblExistingCustomer.setVisible(false);
                txtExistingAcctNo.setVisible(false);
                lblExistingAcctNo.setVisible(false);
                if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
                    double payableAmt = CommonUtil.convertObjToDouble(lblTotalInterestPayableValue.getText()).doubleValue();
                    double paidAmt = CommonUtil.convertObjToDouble(lblPaidnterestAmountValue.getText()).doubleValue();
                    if (payableAmt > 0 || paidAmt > 0) {
                        cboInterestPaymentFrequency.setEnabled(false);
                    } else {
                        cboInterestPaymentFrequency.setEnabled(true);
                    }
                }
            } else {
                ClientUtil.showAlertWindow("Invalid Account No");
                btnCancelActionPerformed(null);
                txtEditDepositNo.setText("");
                return;
            }

            HashMap hmap = new HashMap();
            Date authDt = null;
            hmap.put("DEPOSIT_NO", txtDepsoitNo.getText());
            List authList = ClientUtil.executeQuery("getAuthorizeStatus", hmap);
            if (authList != null && authList.size() > 0) {
                hmap = (HashMap) authList.get(0);
                authDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(hmap.get("AUTHORIZE_DT")));
                if (authDt == null && transactionUI.getOutputTO() != null && transactionUI.getOutputTO().size() > 0) {
                    panTransaction.add(transactionUI);

                    tabTermDeposit.addTab("Transaction", panTransaction);
                    tabTermDeposit.resetVisits();
                }
            }
        }
    }//GEN-LAST:event_txtDepsoitNoFocusLost

    private void txtEditDepositNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEditDepositNoFocusLost
        // TODO add your handling code here:
        if (txtEditDepositNo.getText().length() > 0) {
            HashMap existingMap = new HashMap();
            existingMap.put("DEPOSIT_NO", txtEditDepositNo.getText());
            existingMap.put("SELECTED_BRANCH_ID", getSelectedBranchID());
            List lst = ClientUtil.executeQuery("viewAllAccInfo", existingMap);
            if (lst != null && lst.size() > 0) {
                existingMap = (HashMap) lst.get(0);
                existingMap.put("DEPOSIT_NO", txtEditDepositNo.getText());
                existingMap.put("DEPOSIT NO", txtEditDepositNo.getText());
                existingMap.put("SELECTED_BRANCH_ID", getSelectedBranchID());
                observable.setActionType(ClientConstants.ACTIONTYPE_EDIT);
                observable.setTxtDepsoitNo(txtEditDepositNo.getText());
                viewType = "EDIT";
                fillData(existingMap);
                txtEditDepositNo.setEditable(true);
                txtEditDepositNo.setEnabled(true);
                btnView.setEnabled(false);
                btnNew.setEnabled(false);
                btnEdit.setEnabled(true);
                btnDelete.setEnabled(false);
                btnSave.setEnabled(false);
                btnCancel.setEnabled(true);
                btnAuthorize.setEnabled(false);
                btnReject.setEnabled(false);
                btnException.setEnabled(false);
                btnPrint.setEnabled(false);
                btnCustomerIdFileOpen1.setEnabled(false);
                panExistingCustomer.setVisible(false);
                lblExistingCustomer.setVisible(false);
                txtExistingAcctNo.setVisible(false);
                lblExistingAcctNo.setVisible(false);
                cboConstitution.setEnabled(false);
                cboAddressType.setEnabled(false);
                cboSettlementMode.setEnabled(false);
                cboInterestPaymentMode.setEnabled(false);                
            } else {
                ClientUtil.showAlertWindow("Invalid Account No");
                btnCancelActionPerformed(null);
                txtEditDepositNo.setText("");
                return;
            }
        }

    }//GEN-LAST:event_txtEditDepositNoFocusLost

    private void txtExistingAcctNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExistingAcctNoFocusLost
        // TODO add your handling code here:
        if (cboConstitution.getSelectedItem().equals("")) {
            ClientUtil.showAlertWindow("Choose Constitution");
            txtExistingAcctNo.setText("");
            return;
        } else {
            callView("EXISTING_CUSTOMER");
            changeCustomerCategory(); // Added by Nithya on 06May2025 for KD-3923
        }
    }//GEN-LAST:event_txtExistingAcctNoFocusLost

    private void rdoExistingCustomer_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExistingCustomer_NoActionPerformed
        // TODO add your handling code here:
        txtExistingAcctNo.setVisible(false);
        lblExistingAcctNo.setVisible(false);
        if (rdoExistingCustomer_No.isSelected() == true) {
            txtExistingAcctNo.setText("");
            txtCustomerId.setText("");
            nomineeUi.setMainCustomerId(txtCustomerId.getText());
            lblExistingAcctNo.setVisible(false);
            txtExistingAcctNo.setVisible(false);
            txtCustomerId.setEnabled(true);
            individualCustUI = new IndividualCustUI();
            com.see.truetransact.ui.TrueTransactMain.showScreen(individualCustUI);
            individualCustUI.loanCreationCustId(this);
        }
    }//GEN-LAST:event_rdoExistingCustomer_NoActionPerformed

    private void rdoExistingCustomer_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExistingCustomer_YesActionPerformed
        // TODO add your handling code here:
        txtExistingAcctNo.setVisible(true);
        lblExistingAcctNo.setVisible(true);
    }//GEN-LAST:event_rdoExistingCustomer_YesActionPerformed

    private void cboExtensionInterestPaymentFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExtensionInterestPaymentFrequencyActionPerformed
        // TODO add your handling code here:

        if ((observable.getActionType() == ClientConstants.ACTIONTYPE_EXTENSION && newModeMouseClick == false)){
            double newModePeriod = 0.0;
            String freqency = ((ComboBoxModel) cboExtensionInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
            String prodId = ((ComboBoxModel) cboExtensionDepositProdId.getModel()).getKeyForSelected().toString();
            String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(prodId));
            int freq = CommonUtil.convertObjToInt(freqency);
            newModePeriod = CommonUtil.convertObjToDouble(txtExtensionPeriodOfDeposit_Years.getText()).doubleValue() * 360;
            newModePeriod = newModePeriod + CommonUtil.convertObjToDouble(txtExtensionPeriodOfDeposit_Months.getText()).doubleValue() * 30;
            newModePeriod = newModePeriod + CommonUtil.convertObjToDouble(txtExtensionPeriodOfDeposit_Days.getText()).doubleValue();
            //            if(strBehavesLike.equals("FIXED") && freq == 30 && newModePeriod <360){
            if (newModePeriod > 0) {
                if (strBehavesLike.equals("FIXED") && freq == 60 && newModePeriod < 60) {
                    ClientUtil.showAlertWindow("Select a lesser interest payment frequency ");
                    cboExtensionInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else if (strBehavesLike.equals("FIXED") && freq == 120 && newModePeriod < 120) {
                    ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                    cboExtensionInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else if (strBehavesLike.equals("FIXED") && freq == 150 && newModePeriod < 150) {
                    ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                    cboExtensionInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else if (strBehavesLike.equals("FIXED") && freq == 210 && newModePeriod < 210) {
                    ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                    cboExtensionInterestPaymentFrequency.setSelectedItem("");
                    return;
                }
                if (strBehavesLike.equals("FIXED") && freq == 240 && newModePeriod < 240) {
                    ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                    cboExtensionInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else if (strBehavesLike.equals("FIXED") && freq == 270 && newModePeriod < 270) {
                    ClientUtil.showAlertWindow("Not able to give  Interest for this Period ");
                    cboExtensionInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else if (strBehavesLike.equals("FIXED") && freq == 300 && newModePeriod < 300) {
                    ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                    cboExtensionInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else if (strBehavesLike.equals("FIXED") && freq == 330 && newModePeriod < 330) {
                    ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                    cboExtensionInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else if (strBehavesLike.equals("FIXED") && freq == 30 && newModePeriod < 30) {
                    ClientUtil.showAlertWindow("Not able to give Monthly Interest for this Period ");
                    cboExtensionInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else if (strBehavesLike.equals("FIXED") && newModePeriod < 90 && freq == 90) {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");
                    cboExtensionInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else if (strBehavesLike.equals("FIXED") && newModePeriod < 180 && freq == 180) {
                    if (newModePeriod < 90) {
                        ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");
                        cboExtensionInterestPaymentFrequency.setSelectedItem("");
                        return;
                    } else {
                        ClientUtil.showAlertWindow("Int Pay Freqency can be monthly or Quarterly ... ");
                        cboExtensionInterestPaymentFrequency.setSelectedItem("");
                        return;
                    }
                } else if (strBehavesLike.equals("FIXED") && newModePeriod < 360 && freq == 360) {
                    if (newModePeriod < 90) {
                        ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");
                        cboExtensionInterestPaymentFrequency.setSelectedItem("");
                        return;
                    } else if (newModePeriod < 180) {
                        ClientUtil.showAlertWindow("Int Pay Freqency can be monthly or  Quarterly ... ");
                        cboExtensionInterestPaymentFrequency.setSelectedItem("");
                        return;
                    } else {
                        ClientUtil.showAlertWindow("Int Pay Freqency can be monthly,quarterly or HalfYearly...");
                        cboExtensionInterestPaymentFrequency.setSelectedItem("");
                        return;
                    }
                }
            }
        }
    }//GEN-LAST:event_cboExtensionInterestPaymentFrequencyActionPerformed

    private void rdoExtensionMatAlertReport_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionMatAlertReport_YesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoExtensionMatAlertReport_YesActionPerformed

    private void cboExtensionCalenderFreqDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExtensionCalenderFreqDayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboExtensionCalenderFreqDayActionPerformed

    private void cboExtensionInterestPaymentFrequencyFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
    }
    private void rdoExtensionWithIntAutoRenewal_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionWithIntAutoRenewal_YesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoExtensionWithIntAutoRenewal_YesActionPerformed

    private void txtExtensionPrintedOptionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExtensionPrintedOptionFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtExtensionPrintedOptionFocusLost

    private void rdoExtensionAutoRenewal_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionAutoRenewal_NoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoExtensionAutoRenewal_NoActionPerformed

    private void cboExtensionProdIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExtensionProdIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboExtensionProdIdActionPerformed

    private void rdoExtensionWithIntAutoRenewal_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionWithIntAutoRenewal_NoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoExtensionWithIntAutoRenewal_NoActionPerformed

//GEN-FIRST:event_cboExtensionInterestPaymentFrequencyFocusLost
    
//GEN-LAST:event_cboExtensionInterestPaymentFrequencyFocusLost
    
    private void rdoExtensionAutoRenewal_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionAutoRenewal_YesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoExtensionAutoRenewal_YesActionPerformed

    private void rdoExtensionMatAlertReport_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionMatAlertReport_NoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoExtensionMatAlertReport_NoActionPerformed

    private void rdoRenewalWith_intRenewal_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalWith_intRenewal_NoActionPerformed
        // TODO add your handling code here:
        rdoRenewalWith_intRenewal_No.setSelected(true);
        if (rdoRenewalAutoRenewal_Yes.isSelected() == true && rdoRenewalWith_intRenewal_No.isSelected() == true
                && observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
            ClientUtil.showAlertWindow("Cummulative Deposit always with interest only");
            rdoRenewalWith_intRenewal_Yes.setSelected(true);
        }
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
    }//GEN-LAST:event_rdoRenewalWith_intRenewal_NoActionPerformed

    private void rdoRenewalWith_intRenewal_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalWith_intRenewal_YesActionPerformed
        // TODO add your handling code here:
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
        rdoRenewalWith_intRenewal_Yes.setSelected(true);
    }//GEN-LAST:event_rdoRenewalWith_intRenewal_YesActionPerformed

    private void rdoRenewalMatAlert_report_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalMatAlert_report_NoActionPerformed
        // TODO add your handling code here:
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;

    }//GEN-LAST:event_rdoRenewalMatAlert_report_NoActionPerformed

    private void rdoRenewalAutoRenewal_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalAutoRenewal_NoActionPerformed
        // TODO add your handling code here:
        rdoRenewalWith_intRenewal_No.setSelected(true);
        lblRenewalWithIntNew.setVisible(false);
        rdoRenewalWith_intRenewal_Yes.setVisible(false);
        rdoRenewalWith_intRenewal_No.setVisible(false);
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
    }//GEN-LAST:event_rdoRenewalAutoRenewal_NoActionPerformed

    private void rdoRenewalAutoRenewal_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalAutoRenewal_YesActionPerformed
        // TODO add your handling code here:
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
            rdoRenewalWith_intRenewal_Yes.setSelected(true);
        }
        lblRenewalWithIntNew.setVisible(true);
        rdoRenewalWith_intRenewal_Yes.setVisible(true);
        rdoRenewalWith_intRenewal_No.setVisible(true);
        rdoRenewalWith_intRenewal_Yes.setEnabled(true);
        rdoRenewalWith_intRenewal_No.setEnabled(true);
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
    }//GEN-LAST:event_rdoRenewalAutoRenewal_YesActionPerformed

    private void rdoRenewalMatAlert_report_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalMatAlert_report_YesActionPerformed
        // TODO add your handling code here:
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
    }//GEN-LAST:event_rdoRenewalMatAlert_report_YesActionPerformed

    private void txtPanNumberFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPanNumberFocusLost
        // TODO add your handling code here:
        if (txtPanNumber.getText().length() > 0 && !ClientUtil.validatePAN(txtPanNumber)) {
            ClientUtil.showMessageWindow("Invalid Pan Number...Enter Proper Pan No (Format :ABCDE1234F)");
            txtPanNumber.setText("");
        }
        chkTaxDeductions.setEnabled(true);
    }//GEN-LAST:event_txtPanNumberFocusLost
    private void lockScreenDeposits() {
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW) {
            if (txtDepsoitNo.getText() != null && txtDepsoitNo.getText().equalsIgnoreCase("Renewal")) {
                removeEditLockScreen(lblValRenewDep.getText());
            } else {
                removeEditLockScreen(txtDepsoitNo.getText());
            }
        } else if (observable.getActionType() == ClientConstants.ACTIONTYPE_EXTENSION) {
            if (txtDepsoitNo.getText() != null && txtDepsoitNo.getText().equalsIgnoreCase("Extension")) {
                removeEditLockScreen(lblValRenewDep.getText());
            } else {
                removeEditLockScreen(txtDepsoitNo.getText());
            }
        } else if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
            if (observable.getRenewalValDepositSubNo().length() > 0) {
                removeEditLockScreen(observable.getRenewalValDepositSubNo());
            } else if (lblExtensionValDepositSubNo.getText().length() > 0) {
                removeEditLockScreen(lblExtensionValDepositSubNo.getText());
            } else {
                removeEditLockScreen(txtDepsoitNo.getText());
            }
        } else if (observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE
                || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT
                || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) {
            if (observable.getRenewalValDepositSubNo().length() > 0) {
                removeEditLockScreen(observable.getRenewalValDepositSubNo());
            } else if (lblExtensionValDepositSubNo.getText().length() > 0) {
                removeEditLockScreen(lblExtensionValDepositSubNo.getText());
            } else {
                removeEditLockScreen(txtDepsoitNo.getText());
            }
        }
    }
    private void cboRenewalCalenderFreqDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalCalenderFreqDayActionPerformed
        // TODO add your handling code here:
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
        //Added BY Suresh
        setRenewalDetails();
    }//GEN-LAST:event_cboRenewalCalenderFreqDayActionPerformed
    private boolean whenTableRowSelected(HashMap paramMap) {
        boolean lock = false;
        String lockedBy = "";
        HashMap map = new HashMap();
        map.put("SCREEN_ID", getScreenID());
        map.put("RECORD_KEY", paramMap.get("DEPOSIT_NO"));
        map.put(CommonConstants.USER_ID, ProxyParameters.USER_ID);
        map.put("BRANCH_ID", TrueTransactMain.BRANCH_ID);
        map.put("CUR_DATE", currDt);
        //system.out.println("Record Key Map : " + map);
        List lstLock = ClientUtil.executeQuery("selectEditLock", map);
        if (lstLock != null && lstLock.size() > 0) {
            lockedBy = CommonUtil.convertObjToStr(lstLock.get(0));
            if (!lockedBy.equals(ProxyParameters.USER_ID)) {
                btnSave.setEnabled(false);
            } else {
                btnSave.setEnabled(true);
            }
        } else {
            btnSave.setEnabled(true);
        }
        setOpenForEditBy(lockedBy);
        if (lockedBy.equals("")) {
            ClientUtil.execute("insertEditLock", map);
        }
        if (lockedBy.length() > 0 && !lockedBy.equals(ProxyParameters.USER_ID)) {
            String data = getLockDetails(lockedBy, getScreenID());
            ClientUtil.showMessageWindow("Selected Record is Opened/Modified by " + lockedBy + data.toString());
            alreadyOpenedRecords = true;
            btnSave.setEnabled(false);
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT) {
                lock = true;
            } else {
                lock = false;
            }
        }
        return lock;
    }
    private void cboExtensionDepositCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExtensionDepositCategoryActionPerformed
        // TODO add your handling code here:
        extensionDays = false;
        extensionMonths = false;
        extensionYears = false;
    }//GEN-LAST:event_cboExtensionDepositCategoryActionPerformed
    private String getLockDetails(String lockedBy, String screenId) {
        HashMap map = new HashMap();
        StringBuffer data = new StringBuffer();
        map.put("LOCKED_BY", lockedBy);
        map.put("SCREEN_ID", screenId);
        java.util.List lstLock = ClientUtil.executeQuery("getLockedDetails", map);
        map.clear();
        if (lstLock != null && lstLock.size() > 0) {
            map = (HashMap) (lstLock.get(0));
            data.append("\nLog in Time : ").append(map.get("LOCKED_TIME"));
            data.append("\nIP Address : ").append(map.get("IP_ADDR"));
            data.append("\nBranch : ").append(map.get("BRANCH_ID"));
        }
        lstLock = null;
        map = null;
        return data.toString();
    }
    private void cboExtensionDepositProdIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExtensionDepositProdIdActionPerformed
        // TODO add your handling code here:
        extensionDays = false;
        extensionMonths = false;
        extensionYears = false;
    }//GEN-LAST:event_cboExtensionDepositProdIdActionPerformed
    public void removeEditLockScreen(String recordKey) {
        if (recordKey.length() > 0) {
            HashMap map = new HashMap();
            map.put("SCREEN_ID", getScreenID());
            map.put("RECORD_KEY", recordKey);
            map.put(CommonConstants.USER_ID, ProxyParameters.USER_ID);
            map.put("BRANCH_ID", TrueTransactMain.BRANCH_ID);
            map.put("CUR_DATE", currDt);
            //system.out.println("deleteEditLock : " + map);
            ClientUtil.execute("deleteEditLock", map);
        }
        setMode(ClientConstants.ACTIONTYPE_CANCEL);
    }
    private void cboExtensionProdTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExtensionProdTypeActionPerformed
        // TODO add your handling code here:
        if (cboExtensionProdType.getSelectedIndex() > 0) {
            String prodType = ((ComboBoxModel) cboExtensionProdType.getModel()).getKeyForSelected().toString();
            observable.setCbmExtensionPaymentProdId(prodType);
            if (prodType.equals("GL")) {
                cboExtensionProdId.setSelectedItem("");
                cboExtensionProdId.setEnabled(false);
                txtExtensionCustomerIdCr.setText("");
                lblExtensionAccountNo.setText("Account Head Id");
                lblExtensionCustomerNameCr.setText("A/c Hd Description");
                lblExtensionCustomerNameCrValue.setText("");
                btnExtensionTransCustomerIdFileOpenCr.setEnabled(true);
            } else if (prodType.equals("TD") || prodType.equals("TL") || prodType.equals("AD") || prodType.equals("RM")) {
                ClientUtil.showAlertWindow("Not Possible to credit");
                cboExtensionProdId.setSelectedItem("");
                cboExtensionProdId.setEnabled(false);
                txtExtensionCustomerIdCr.setText("");
                lblExtensionCustomerNameCrValue.setText("");
                btnExtensionTransCustomerIdFileOpenCr.setEnabled(false);
                return;
            } else {
                cboExtensionProdId.setSelectedItem("");
                cboExtensionProdId.setEnabled(true);
                lblExtensionAccountNo.setText("Account No");
                lblExtensionCustomerNameCr.setText("Customer Name");
                btnExtensionTransCustomerIdFileOpenCr.setEnabled(true);
                txtExtensionCustomerIdCr.setEnabled(false);
                txtExtensionCustomerIdCr.setText("");
                lblExtensionCustomerNameCrValue.setText("");
            }
            cboExtensionProdId.setModel(observable.getCbmExtensionPaymentProdId());
            if (!prodType.equals("GL") && cboExtensionProdId.getSelectedItem().equals("")) {
                cboExtensionProdId.setSelectedItem(observable.getCbmExtensionPaymentProdId());
            }
        }
    }//GEN-LAST:event_cboExtensionProdTypeActionPerformed

    private void btnExtensionCustomerIdFileOpenCrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtensionCustomerIdFileOpenCrActionPerformed
        // TODO add your handling code here:
        callView("EXTENSION_PAYMODE");
    }//GEN-LAST:event_btnExtensionCustomerIdFileOpenCrActionPerformed

    private void btnExtensionTransCustomerIdFileOpenCrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtensionTransCustomerIdFileOpenCrActionPerformed
        // TODO add your handling code here:
        callView("EXTENSION_TRANS");
    }//GEN-LAST:event_btnExtensionTransCustomerIdFileOpenCrActionPerformed

    private void cboExtensionTransProdTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExtensionTransProdTypeActionPerformed
        // TODO add your handling code here:
        if (cboExtensionTransProdType.getSelectedIndex() > 0) {
            String prodType = ((ComboBoxModel) cboExtensionTransProdType.getModel()).getKeyForSelected().toString();
            observable.setCbmExtensionTransProdId(prodType);
            if (prodType.equals("GL")) {
                cboExtensionTransProdId.setSelectedItem("");
                cboExtensionTransProdId.setEnabled(false);
                txtExtensionTransCustomerIdCr.setText("");
                txtExtensionTransCustomerIdCr.setEnabled(false);
                lblAccountNo.setText("Account Head Id");
                lblExtensionInterestCustName.setText("A/c Hd Description");
                //                lblExtensionTransCustNameVal.setText("");
                btnExtensionTransCustomerIdFileOpenCr.setEnabled(true);
            } else if (prodType.equals("TD") || prodType.equals("TL") || prodType.equals("AD") || prodType.equals("RM")) {
                ClientUtil.showAlertWindow("Not Possible to credit");
                cboExtensionTransProdId.setSelectedItem("");
                cboExtensionTransProdId.setEnabled(false);
                txtExtensionTransCustomerIdCr.setText("");
                txtExtensionTransCustomerIdCr.setEnabled(false);
                lblExtensionTransCustNameVal.setText("");
                btnExtensionTransCustomerIdFileOpenCr.setEnabled(false);
                return;
            } else {
                //                cboExtensionTransProdId.setSelectedItem("");
                cboExtensionTransProdId.setEnabled(true);
                lblAccountNo.setText("Account No");
                lblExtensionInterestCustName.setText("Customer Name");
                btnExtensionTransCustomerIdFileOpenCr.setEnabled(true);
                txtExtensionTransCustomerIdCr.setText("");
                txtExtensionTransCustomerIdCr.setEnabled(false);
                //                lblExtensionTransCustNameVal.setText("");
            }
            if (observable.getCbmExtensionTransProdId() != null && !observable.getCbmExtensionTransProdId().equals("")) {
                cboExtensionTransProdId.setModel(observable.getCbmExtensionTransProdId());
            }
            if (!prodType.equals("GL") && cboExtensionTransProdId.getSelectedItem().equals("")) {
                cboExtensionTransProdId.setSelectedItem(observable.getCbmExtensionTransProdId());
            }
        }
    }//GEN-LAST:event_cboExtensionTransProdTypeActionPerformed

    private void txtExtensionTransTokenNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExtensionTransTokenNoFocusLost
        // TODO add your handling code here:
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_EXTENSION) {
            String tokenNo = CommonUtil.convertObjToStr(txtExtensionTransTokenNo.getText());
            if (!tokenNo.equals("")) {
                HashMap tokenWhereMap = new HashMap();
                // Separating Serias No and Token No
                char[] chrs = tokenNo.toCharArray();
                StringBuffer seriesNo = new StringBuffer();
                int i = 0;
                for (int j = chrs.length; i < j; i++) {
                    if (Character.isDigit(chrs[i])) {
                        break;
                    } else {
                        seriesNo.append(chrs[i]);
                    }
                }
                tokenWhereMap.put("SERIES_NO", seriesNo.toString());
                tokenWhereMap.put("TOKEN_NO", CommonUtil.convertObjToInt(tokenNo.substring(i)));
                tokenWhereMap.put("USER_ID", ProxyParameters.USER_ID);
                tokenWhereMap.put("BRANCH_ID", ProxyParameters.BRANCH_ID);
                tokenWhereMap.put("CURRENT_DT", currDt);
                List lst = ClientUtil.executeQuery("validateTokenNo", tokenWhereMap);
                if (((Integer) lst.get(0)).intValue() == 0) {
                    txtExtensionTransTokenNo.setText("");
                    ClientUtil.showMessageWindow("Token is invalid or not issued for you. Please verify.");
                }
            }
        }
    }//GEN-LAST:event_txtExtensionTransTokenNoFocusLost

    private void cboExtensionInterestPaymentModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExtensionInterestPaymentModeActionPerformed
        // TODO add your handling code here:
        if (cboExtensionInterestPaymentMode.getSelectedIndex() > 0) {
            String installType = ((ComboBoxModel) cboExtensionInterestPaymentMode.getModel()).getKeyForSelected().toString();
            txtExtensionCustomerIdCr.setEnabled(false);
            if (installType != null && installType.equals("TRANSFER")) {
                String prodType = ((ComboBoxModel) cboExtensionProdType.getModel()).getKeyForSelected().toString();
                if (prodType.equals("RM")) {
                    btnExtensionCustomerIdFileOpenCr.setEnabled(false);
                } else {
                    btnExtensionCustomerIdFileOpenCr.setVisible(true);
                    btnExtensionCustomerIdFileOpenCr.setEnabled(true);
                }
                cboExtensionProdType.setEnabled(true);
                cboExtensionProdId.setEnabled(true);
            } else if (installType != null && installType.equals("CASH")) {
                cboExtensionProdType.setSelectedItem("");
                cboExtensionProdId.setSelectedItem("");
                txtExtensionCustomerIdCr.setText("");
                lblExtensionCustomerNameCrValue.setText("");
                cboExtensionProdType.setEnabled(false);
                cboExtensionProdId.setEnabled(false);
                txtExtensionCustomerIdCr.setEnabled(false);
                btnExtensionCustomerIdFileOpenCr.setEnabled(false);
            } else {
                cboExtensionInterestPaymentMode.setSelectedItem("");
            }
        } else {
            cboExtensionProdType.setEnabled(false);
            cboExtensionProdId.setEnabled(false);
            txtExtensionCustomerIdCr.setEnabled(false);
            btnExtensionCustomerIdFileOpenCr.setEnabled(false);
        }
    }//GEN-LAST:event_cboExtensionInterestPaymentModeActionPerformed
    private void extensionTxtMonthsLostFocus() {
        int YrsToDay = 0;
        int MonToDay = 0;
        int chkDy = 0;
        if ((txtExtensionPeriodOfDeposit_Years.getText() != null) && (!txtExtensionPeriodOfDeposit_Years.getText().equals(""))) {
            YrsToDay = (Integer.parseInt(txtExtensionPeriodOfDeposit_Years.getText())) * 365;
        }
        if (!txtExtensionPeriodOfDeposit_Months.getText().equals("")) {
            MonToDay = ((Integer.parseInt(txtExtensionPeriodOfDeposit_Months.getText())) * 30);
        }
        chkDy = YrsToDay + MonToDay;
        calculateExtensionMatDate();
    }
    private void txtExtensionPeriodOfDeposit_DaysFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExtensionPeriodOfDeposit_DaysFocusLost
        // TODO add your handling code here:
        String oldValue = observable.getExtensiontxtPeriodOfDeposit_Days();
        String newValue = txtExtensionPeriodOfDeposit_Days.getText();
        String ExtensionprodId = ((ComboBoxModel) cboExtensionDepositProdId.getModel()).getKeyForSelected().toString();
        String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(ExtensionprodId));
        //--- If oldValue is not equal to newValue, then reset the calculated fields for//--- recalculating the values
        //--- If it is not filled, thn assign "0" to it.
        extensionDays = true;
    }//GEN-LAST:event_txtExtensionPeriodOfDeposit_DaysFocusLost
    private int chkExtensionPeriodMultiples() {
        int YearsChk = 0;
        int MonthsChk = 0;
        int DaysChk = 0;
        int totalDays;
        int multDays = 0;
        int retVal = -1;
        if ((txtExtensionPeriodOfDeposit_Years.getText() != null) && (!txtExtensionPeriodOfDeposit_Years.getText().equals(""))) {
            YearsChk = (Integer.parseInt(CommonUtil.convertObjToStr(txtExtensionPeriodOfDeposit_Years.getText()))) * 365;
        }
        if ((txtExtensionPeriodOfDeposit_Months.getText() != null) && (!txtExtensionPeriodOfDeposit_Months.getText().equals(""))) {
            MonthsChk = (Integer.parseInt(CommonUtil.convertObjToStr(txtExtensionPeriodOfDeposit_Months.getText()))) * 30;
        }
        if ((txtExtensionPeriodOfDeposit_Days.getText() != null) && (!txtExtensionPeriodOfDeposit_Days.getText().equals(""))) {
            DaysChk = Integer.parseInt(CommonUtil.convertObjToStr(txtExtensionPeriodOfDeposit_Days.getText()));
        }
        totalDays = YearsChk + MonthsChk + DaysChk;
        multDays = Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
        if (totalDays != 0) {
            retVal = (totalDays % multDays);
        } else {
            retVal = -1;
        }
        return retVal;
    }
    private void txtExtensionPeriodOfDeposit_MonthsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExtensionPeriodOfDeposit_MonthsFocusLost
        // TODO add your handling code here:
        String oldValue = observable.getExtensiontxtPeriodOfDeposit_Months();
        String newValue = txtExtensionPeriodOfDeposit_Months.getText();
        double multperiod = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
        String ExtensionprodId = ((ComboBoxModel) cboExtensionDepositProdId.getModel()).getKeyForSelected().toString();
        String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(ExtensionprodId));
        extensionMonths = true;

    }//GEN-LAST:event_txtExtensionPeriodOfDeposit_MonthsFocusLost
    private int chkPeriodOfMultiplesForExtensionMonths() {
        int retVal = -1;
        int yearsInMonths = 0;
        int monthsEntered = 0;
        int periodOfMultiplesInMonths = (Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")))) / 30;
        if ((txtExtensionPeriodOfDeposit_Years.getText() != null) && (!txtExtensionPeriodOfDeposit_Years.getText().equals(""))) {
            yearsInMonths = (Integer.parseInt(CommonUtil.convertObjToStr(txtExtensionPeriodOfDeposit_Years.getText()))) * 12;
        }
        if ((txtExtensionPeriodOfDeposit_Months.getText() != null) && (!txtExtensionPeriodOfDeposit_Months.getText().equals(""))) {
            monthsEntered = Integer.parseInt(CommonUtil.convertObjToStr(txtExtensionPeriodOfDeposit_Months.getText()));
        }
        totalMonths = yearsInMonths + monthsEntered;
        retVal = (totalMonths % periodOfMultiplesInMonths);
        return retVal;
    }
    private void txtExtensionPeriodOfDeposit_YearsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExtensionPeriodOfDeposit_YearsFocusLost
        // TODO add your handling code here:
        String oldValue = observable.getExtensiontxtPeriodOfDeposit_Years();
        //system.out.println("oldValue : " + oldValue);
        String newValue = txtExtensionPeriodOfDeposit_Years.getText();
        //system.out.println("newValue : " + newValue);
        String extensionprodId = ((ComboBoxModel) cboExtensionDepositProdId.getModel()).getKeyForSelected().toString();
        String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(extensionprodId));
        //--- If oldValue is not equal to newValue, then reset the calculated fields for //--- recalculating the values
        extensionYears = true;
    }//GEN-LAST:event_txtExtensionPeriodOfDeposit_YearsFocusLost
    private void calculateExtensionMatDate() {
        java.util.Date depDate = (java.util.Date) DateUtil.getDateMMDDYYYY(tdtExtensionDateOfDeposit.getDateValue());
        //system.out.println("####calculateMatDate : " + depDate);
        if (depDate != null) {
            GregorianCalendar cal = new GregorianCalendar((depDate.getYear() + yearTobeAdded), depDate.getMonth(), depDate.getDate());
            if ((txtExtensionPeriodOfDeposit_Years.getText() != null) && (!txtExtensionPeriodOfDeposit_Years.getText().equals(""))) {
                cal.add(GregorianCalendar.YEAR, Integer.parseInt(txtExtensionPeriodOfDeposit_Years.getText()));
            } else {
                cal.add(GregorianCalendar.YEAR, 0);
            }
            if ((txtExtensionPeriodOfDeposit_Months.getText() != null) && (!txtExtensionPeriodOfDeposit_Months.getText().equals(""))) {
                cal.add(GregorianCalendar.MONTH, Integer.parseInt(txtExtensionPeriodOfDeposit_Months.getText()));
            } else {
                cal.add(GregorianCalendar.MONTH, 0);
            }
            if ((txtExtensionPeriodOfDeposit_Days.getText() != null) && (!txtExtensionPeriodOfDeposit_Days.getText().equals(""))) {
                cal.add(GregorianCalendar.DAY_OF_MONTH, Integer.parseInt(txtExtensionPeriodOfDeposit_Days.getText()));
            } else {
                cal.add(GregorianCalendar.DAY_OF_MONTH, 0);
            }
            observable.setExtensiontdtMaturityDate(DateUtil.getStringDate(cal.getTime()));
            tdtExtensionMaturityDate.setDateValue(observable.getExtensiontdtMaturityDate());
        }
    }
    private void txtExtensionDepTransAmtValueFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExtensionDepTransAmtValueFocusLost
        // TODO add your handling code here:
        double withdrawAmount = observable.depAmt;
        txtExtensionDepositAmount.setText(String.valueOf(withdrawAmount));
        double depAmount = CommonUtil.convertObjToDouble(txtExtensionDepTransAmtValue.getText()).doubleValue();
        double extamt = withdrawAmount - depAmount;
        if (withdrawAmount > depAmount) {
            double totalMonths = 0.0;
            double diffDay = 0.0;
            Date depositDate = DateUtil.getDateMMDDYYYY(lblExtensionDepositDtVal.getText());
            HashMap prematureDateMap = new HashMap();
            prematureDateMap.put("FROM_DATE", depositDate);
            prematureDateMap.put("TO_DATE", currDt);
            List lst = ClientUtil.executeQuery("periodRunMap", prematureDateMap);
            if (lst != null && lst.size() > 0) {
                prematureDateMap = (HashMap) lst.get(0);
                totalMonths = CommonUtil.convertObjToDouble(prematureDateMap.get("NO_OF_MONTHS")).doubleValue();
                diffDay = CommonUtil.convertObjToLong(prematureDateMap.get("DAYS"));
                double interestAmtNoPenal = 0.0;
                double interestAmtPenal = 0.0;
                HashMap custMap = new HashMap();
                double alreadyDrawn = 0.0;
                double balanceAmt = 0.0;
                custMap.put("DEPOSIT_NO", lblValRenewDep.getText());
                double rateOfInt = CommonUtil.convertObjToDouble(lblExtensionRateOfIntVal.getText()).doubleValue();
                if (rateOfInt > 0) {
                    panExtensionRateOfInterest.setVisible(true);
                    panExtensionRateOfInterest1.setVisible(true);
                    lblExtensionWithdrawIntAmt2.setVisible(true);
                    lblExtensionLeftOverIntAmt.setVisible(true);
                    lblExtensionTotalIntAmt.setVisible(true);
                    lblExtensionBalanceInt.setVisible(true);
//                    double totalMonths = 0.0;
//                    double diffDay = 0.0;
//                    Date depositDate = DateUtil.getDateMMDDYYYY(lblExtensionDepositDtVal.getText());
//                    HashMap prematureDateMap = new HashMap();
                    prematureDateMap.put("FROM_DATE", depositDate);
                    prematureDateMap.put("TO_DATE", currDt);
                    lst = ClientUtil.executeQuery("periodRunMap", prematureDateMap);
                    if (lst != null && lst.size() > 0) {
                        prematureDateMap = (HashMap) lst.get(0);
                        totalMonths = CommonUtil.convertObjToDouble(prematureDateMap.get("NO_OF_MONTHS")).doubleValue();
                        diffDay = CommonUtil.convertObjToLong(prematureDateMap.get("DAYS"));
//                        double interestAmtNoPenal = 0.0;
//                        double interestAmtPenal = 0.0;
                        double penalRateOfInt = 0.0;
//                        HashMap custMap = new HashMap();
                        custMap.put("DEPOSIT_NO", observable.getValExtensionDep());
                        List list = ClientUtil.executeQuery("getCustDepositNoBehavesLike", custMap);
                        if (list != null && list.size() > 0) {
                            custMap = (HashMap) list.get(0);
                            double interestgreater = 0.0;
                            alreadyDrawn = CommonUtil.convertObjToDouble(custMap.get("TOTAL_INT_DRAWN")).doubleValue();
                            String discounted = CommonUtil.convertObjToStr(custMap.get("DISCOUNTED_RATE"));
                            ClientUtil.enableDisable(panExtensionRateOfInterest, true);
                            panExtensionRateOfInterest.setVisible(true);
                            panExtensionRateOfInterest1.setVisible(true);
                            lblExtensionWithdrawIntAmt1.setVisible(true);
                            lblExtensionWithdrawIntAmt1.setEnabled(true);
                            lblExtensionWithdrawIntAmtValue1.setVisible(true);
                            lblExtensionWithdrawIntAmtValue1.setEnabled(true);
                            lblExtensionWithdrawIntAmtValue2.setVisible(true);
                            lblExtensionWithdrawIntAmtValue2.setEnabled(true);
                            lblExtensionWithdrawIntAmt.setVisible(true);
                            if (custMap.containsKey("BEHAVES_LIKE") && custMap.get("BEHAVES_LIKE").equals("FIXED") && rateOfInt > 0 && depAmount > 0) {
                                lblExtensionWithdrawIntAmt.setVisible(true);
                                lblExtensionLeftOverIntAmt.setVisible(true);
                                lblExtensionTotalIntAmt.setVisible(true);
                                lblExtensionWithdrawIntAmtValue.setText("");
                                lblExtensionLeftOverIntAmtValue.setText("");
                                lblExtensionTotalIntAmtValue.setText("");
                                lblExtensionWithdrawIntAmtValue.setVisible(true);
                                lblExtensionLeftOverIntAmtValue.setVisible(true);
                                lblExtensionTotalIntAmtValue.setVisible(true);
                                double intAmt = 0.0;
                                if (lblExtensionPaymentFreqValue.getText().equals("Monthly")) { //&& discounted != null && discounted.equals("Y")){
                                    if (custMap.containsKey("PENAL_INT_WITHDRAWAL_AMT") && custMap.get("PENAL_INT_WITHDRAWAL_AMT").equals("Y")) {
                                        penalRateOfInt = rateOfInt - 1;
                                        lblExtensionWithdrawIntAmt1.setVisible(true);
                                        lblExtensionWithdrawIntAmtValue1.setVisible(true);
                                        lblExtensionWithdrawIntAmt.setVisible(true);
                                        lblExtensionWithdrawIntAmtValue.setVisible(true);
                                        lblExtensionWithdrawIntAmt2.setVisible(true);
                                        lblExtensionWithdrawIntAmtValue2.setVisible(true);
                                        lblExtensionLeftOverIntAmt.setVisible(true);
                                        lblExtensionLeftOverIntAmtValue.setVisible(true);
                                        lblExtensionTotalIntAmt.setVisible(true);
                                        lblExtensionTotalIntAmtValue.setVisible(true);
                                    } else if (custMap.containsKey("PENAL_INT_WITHDRAWAL_AMT") && custMap.get("PENAL_INT_WITHDRAWAL_AMT").equals("N")) {
                                        penalRateOfInt = rateOfInt;
                                        lblExtensionWithdrawIntAmt1.setVisible(false);
                                        lblExtensionWithdrawIntAmtValue1.setVisible(false);
                                        lblExtensionWithdrawIntAmt.setVisible(false);
                                        lblExtensionWithdrawIntAmtValue.setVisible(false);
                                        lblExtensionWithdrawIntAmt2.setVisible(false);
                                        lblExtensionWithdrawIntAmtValue2.setVisible(false);
                                        lblExtensionLeftOverIntAmt.setVisible(false);
                                        lblExtensionLeftOverIntAmtValue.setVisible(false);
                                        lblExtensionTotalIntAmt.setVisible(false);
                                        lblExtensionTotalIntAmtValue.setVisible(false);
                                    }
                                    lblExtensionWithdrawIntAmtValue1.setText(String.valueOf(penalRateOfInt));
                                    lblExtensionWithdrawIntAmtValue2.setText(String.valueOf(rateOfInt));
                                    if (discounted != null && discounted.equals("Y")) {
                                        if (totalMonths > 0) {
                                            intAmt = (penalRateOfInt) / 4 / (Math.pow((1 + ((penalRateOfInt) / 1200)), 2) + (1 + ((penalRateOfInt) / 1200)) + 1);
                                            double calcAmt = depAmount / 100;
                                            intAmt = intAmt * calcAmt;
                                            intAmt = (double) getNearest((long) (intAmt * 100), 100) / 100;
                                            intAmt = intAmt * totalMonths;
                                        }
                                        if (diffDay > 0) {
                                            depAmount = depAmount;// + intAmt;
                                            double amount = depAmount + (depAmount * (penalRateOfInt) * diffDay) / (36500);
                                            interestgreater = amount - depAmount;
                                        }
                                        interest = intAmt + interestgreater;
                                        interestAmtPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                                        lblExtensionWithdrawIntAmtValue.setText(String.valueOf(interestAmtPenal));
                                        if (totalMonths > 0) {
                                            intAmt = rateOfInt / 4 / (Math.pow((1 + (rateOfInt / 1200)), 2) + (1 + (rateOfInt / 1200)) + 1);
                                            double calcAmt = (withdrawAmount - depAmount) / 100;
                                            intAmt = intAmt * calcAmt;
                                            intAmt = (double) getNearest((long) (intAmt * 100), 100) / 100;
                                            intAmt = intAmt * totalMonths;
                                        }
                                        if (diffDay > 0) {
                                            depAmount = withdrawAmount - depAmount;// + intAmt;
                                            double amount = depAmount + (depAmount * rateOfInt * diffDay) / (36500);
                                            interestgreater = amount - depAmount;
                                        }
                                        interest = intAmt + interestgreater;
                                        interestAmtNoPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                                    } else {
                                        if (totalMonths > 0) {
                                            intAmt = (totalMonths * penalRateOfInt * depAmount) / 1200;
                                        }
                                        if (diffDay > 0) {
                                            interestgreater = (depAmount * penalRateOfInt * diffDay) / 36500;
                                        }
                                        interest = intAmt + interestgreater;
                                        interestAmtPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                                        lblExtensionWithdrawIntAmtValue.setText(String.valueOf(interestAmtPenal));

                                        if (totalMonths > 0) {
                                            double calcAmt = withdrawAmount - depAmount;
                                            intAmt = (calcAmt * totalMonths * rateOfInt) / 1200;
                                        }
                                        if (diffDay > 0) {
                                            depAmount = withdrawAmount - depAmount;
                                            interestgreater = (depAmount * rateOfInt * diffDay) / 36500;
                                        }
                                        interest = intAmt + interestgreater;
                                        interestAmtNoPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                                    }
                                    lblExtensionLeftOverIntAmtValue.setText(String.valueOf(interestAmtNoPenal));
                                    lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtNoPenal + interestAmtPenal));
                                    lblExtensionBalanceIntValue.setText(String.valueOf((interestAmtNoPenal + interestAmtPenal) - alreadyDrawn));
                                    observable.setExtensionOriginalIntValue(CommonUtil.convertObjToStr(lblExtensionBalanceIntValue.getText()));
                                    if (CommonUtil.convertObjToDouble(lblExtensionBalanceIntValue.getText()).doubleValue() > 0) {
                                        lblExtensionBalanceInt.setText("Balance Interest to be pay");
                                        lblExtensionTotalRepayAmtValue.setText(String.valueOf(txtExtensionDepTransAmtValue.getText()));
                                    } else {
                                        lblExtensionTotalRepayAmtValue.setText(String.valueOf(txtExtensionDepTransAmtValue.getText()));
                                        lblExtensionBalanceInt.setText("Excess amount to be recovered");
                                        lblExtensionBalanceIntValue.setText(String.valueOf(CommonUtil.convertObjToDouble(lblExtensionBalanceIntValue.getText()).doubleValue() * -1));
                                    }
                                    observable.setLblExtensionTotalRepayAmtValue(lblExtensionTotalRepayAmtValue.getText());
                                    observable.setExtensionBalanceIntValue(lblExtensionBalanceIntValue.getText());
                                    double amt = CommonUtil.convertObjToDouble(lblExtensionBalanceIntValue.getText()).doubleValue();
                                    txtExtensionDepositAmount.setText(String.valueOf(extamt + amt));
                                } else if (lblExtensionPaymentFreqValue.getText().equals("Date of Maturity") && diffDay > 0 && discounted != null && discounted.equals("Y")) {
                                    if (custMap.containsKey("PENAL_INT_WITHDRAWAL_AMT") && custMap.get("PENAL_INT_WITHDRAWAL_AMT").equals("Y")) {
                                        penalRateOfInt = rateOfInt - 1;
                                    } else if (custMap.containsKey("PENAL_INT_WITHDRAWAL_AMT") && custMap.get("PENAL_INT_WITHDRAWAL_AMT").equals("N")) {
                                        penalRateOfInt = rateOfInt;
                                    }
                                    depositDate = DateUtil.getDateMMDDYYYY(lblExtensionDepositDtVal.getText());
                                    Date curr_Dt = (Date) currDt.clone();
                                    diffDay = DateUtil.dateDiff(depositDate, curr_Dt);
                                    lblExtensionWithdrawIntAmtValue1.setText(String.valueOf(penalRateOfInt));
                                    lblExtensionWithdrawIntAmtValue2.setText(String.valueOf(rateOfInt));
                                    double lessamount = depAmount + (depAmount * penalRateOfInt * diffDay) / (36500);
                                    interest = lessamount - depAmount;
                                    interestAmtPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                                    lblExtensionWithdrawIntAmtValue.setText(String.valueOf(interestAmtPenal));

                                    depAmount = withdrawAmount - depAmount;
                                    lessamount = depAmount + (depAmount * penalRateOfInt * diffDay) / (36500);
                                    interest = lessamount - depAmount;
                                    interestAmtNoPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                                    lblExtensionLeftOverIntAmtValue.setText(String.valueOf(interestAmtNoPenal));
                                    lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtNoPenal + interestAmtPenal));
                                    lblExtensionBalanceIntValue.setText(String.valueOf((interestAmtNoPenal + interestAmtPenal) - alreadyDrawn));
                                    observable.setExtensionOriginalIntValue(CommonUtil.convertObjToStr(lblExtensionBalanceIntValue.getText()));
                                    if (CommonUtil.convertObjToDouble(lblExtensionBalanceIntValue.getText()).doubleValue() > 0) {
                                        lblExtensionBalanceInt.setText("Balance Interest to be pay");
                                        lblExtensionTotalRepayAmtValue.setText(String.valueOf(txtExtensionDepTransAmtValue.getText()));
                                    } else {
                                        lblExtensionTotalRepayAmtValue.setText(String.valueOf(txtExtensionDepTransAmtValue.getText()));
                                        lblExtensionBalanceInt.setText("Excess amount to be recovered");
                                        lblExtensionBalanceIntValue.setText(String.valueOf(CommonUtil.convertObjToDouble(lblExtensionBalanceIntValue.getText()).doubleValue() * -1));
                                    }
                                    observable.setLblExtensionTotalRepayAmtValue(lblExtensionTotalRepayAmtValue.getText());
                                    observable.setExtensionBalanceIntValue(lblExtensionBalanceIntValue.getText());
//                                }else{
//                                    double intAmt = 0.0;
                                    if (custMap.containsKey("PENAL_INT_WITHDRAWAL_AMT") && custMap.get("PENAL_INT_WITHDRAWAL_AMT").equals("Y")) {
                                        penalRateOfInt = rateOfInt - 1;
                                    } else if (custMap.containsKey("PENAL_INT_WITHDRAWAL_AMT") && custMap.get("PENAL_INT_WITHDRAWAL_AMT").equals("N")) {
                                        penalRateOfInt = rateOfInt;
                                    }
                                    lblExtensionWithdrawIntAmtValue1.setText(String.valueOf(penalRateOfInt));
                                    lblExtensionWithdrawIntAmtValue2.setText(String.valueOf(rateOfInt));
                                    if (totalMonths > 0) {
                                        double greateramount = depAmount + (depAmount * (penalRateOfInt) * totalMonths) / 1200;
                                        intAmt = greateramount - depAmount;
                                    }
                                    if (diffDay > 0) {
                                        depAmount = depAmount;// + intAmt;
                                        double amount = depAmount + (depAmount * (penalRateOfInt) * diffDay) / (36500);
                                        interestgreater = amount - depAmount;
                                    }
                                    interest = intAmt + interestgreater;
                                    interestAmtPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                                    lblExtensionWithdrawIntAmtValue.setText(String.valueOf(interestAmtPenal));
                                    if (totalMonths > 0) {
                                        double greateramount = (withdrawAmount - depAmount) + ((withdrawAmount - depAmount) * rateOfInt * totalMonths) / 1200;
                                        intAmt = greateramount - (withdrawAmount - depAmount);
                                    }
                                    if (diffDay > 0) {
                                        depAmount = withdrawAmount - depAmount;// + intAmt;
                                        double amount = (depAmount) + ((depAmount) * rateOfInt * diffDay) / (36500);
                                        interestgreater = amount - (depAmount);
                                    }
                                    interest = intAmt + interestgreater;
                                    interestAmtNoPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                                    lblExtensionLeftOverIntAmtValue.setText(String.valueOf(interestAmtNoPenal));
                                    lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtNoPenal + interestAmtPenal));
                                    lblExtensionBalanceIntValue.setText(String.valueOf((interestAmtNoPenal + interestAmtPenal) - alreadyDrawn));
                                    observable.setExtensionOriginalIntValue(CommonUtil.convertObjToStr(lblExtensionBalanceIntValue.getText()));
                                    if (CommonUtil.convertObjToDouble(lblExtensionBalanceIntValue.getText()).doubleValue() > 0) {
                                        lblExtensionBalanceInt.setText("Balance Interest to be pay");
                                        lblExtensionTotalRepayAmtValue.setText(String.valueOf(txtExtensionDepTransAmtValue.getText()));
                                    } else {
                                        lblExtensionTotalRepayAmtValue.setText(String.valueOf(txtExtensionDepTransAmtValue.getText()));
                                        lblExtensionBalanceInt.setText("Excess amount to be recovered");
                                        lblExtensionBalanceIntValue.setText(String.valueOf(CommonUtil.convertObjToDouble(lblExtensionBalanceIntValue.getText()).doubleValue() * -1));
                                    }
                                    observable.setLblExtensionTotalRepayAmtValue(lblExtensionTotalRepayAmtValue.getText());
                                    observable.setExtensionBalanceIntValue(lblExtensionBalanceIntValue.getText());

//                                }
                                }
                            } else if (custMap.containsKey("BEHAVES_LIKE") && custMap.get("BEHAVES_LIKE").equals("CUMMULATIVE") && rateOfInt > 0 && depAmount > 0) {
                                double amount = 0.0;
                                double amount1 = 0.0;
                                double intAmt = 0.0;
                                double completedInterest = 0.0;
                                double uncompletedInterest = 0.0;
                                double quaterlyPeriod = 0;
                                if (custMap.containsKey("PENAL_INT_WITHDRAWAL_AMT") && custMap.get("PENAL_INT_WITHDRAWAL_AMT").equals("Y")) {
                                    penalRateOfInt = rateOfInt - 1;
                                } else if (custMap.containsKey("PENAL_INT_WITHDRAWAL_AMT") && custMap.get("PENAL_INT_WITHDRAWAL_AMT").equals("N")) {
                                    penalRateOfInt = rateOfInt;
                                }
                                lblExtensionWithdrawIntAmtValue1.setText(String.valueOf(penalRateOfInt));
                                lblExtensionWithdrawIntAmtValue2.setText(String.valueOf(rateOfInt));
                                quaterlyPeriod = totalMonths / 3;
                                quaterlyPeriod = (long) roundOffLower((long) (quaterlyPeriod * 100), 100) / 100;
                                if (quaterlyPeriod > 0) {
                                    double completedQuarter = quaterlyPeriod * 3;
                                    Date cummDepDate = null;
                                    cummDepDate = DateUtil.getDateMMDDYYYY(lblExtensionDepositDtVal.getText());

                                    cummDepDate = DateUtil.addDays(cummDepDate, 30);
                                    diffDay = DateUtil.dateDiff(cummDepDate, (Date) currDt.clone());
                                    amount = depAmount * (Math.pow((1 + penalRateOfInt / 400), quaterlyPeriod));// Completed quarters
                                    completedInterest = amount - depAmount;
                                    amount1 = amount;
                                }
                                if (diffDay > 0) {
                                    amount = amount + (amount * penalRateOfInt * diffDay) / (36500);// unCompleted quarters
                                    uncompletedInterest = amount - amount1;
                                }
                                interest = completedInterest + uncompletedInterest;
                                interestAmtPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                                lblExtensionWithdrawIntAmtValue.setText(String.valueOf(interestAmtPenal));
                                if (quaterlyPeriod > 0) {
                                    amount = (withdrawAmount - depAmount) * (Math.pow((1 + rateOfInt / 400), quaterlyPeriod));// Completed quarters
                                    completedInterest = amount - (withdrawAmount - depAmount);
                                    amount1 = amount;
                                }
                                if (diffDay > 0) {
                                    amount = amount + (amount * rateOfInt * diffDay) / (36500);// unCompleted quarters
                                    uncompletedInterest = amount - amount1;
                                }
                                interest = completedInterest + uncompletedInterest;
                                interestAmtNoPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                                lblExtensionLeftOverIntAmtValue.setText(String.valueOf(interestAmtNoPenal));
                                lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtNoPenal + interestAmtPenal));
                                lblExtensionBalanceIntValue.setText(String.valueOf((interestAmtNoPenal + interestAmtPenal) - alreadyDrawn));
                                observable.setExtensionOriginalIntValue(CommonUtil.convertObjToStr(lblExtensionBalanceIntValue.getText()));
                                if (CommonUtil.convertObjToDouble(lblExtensionBalanceIntValue.getText()).doubleValue() > 0) {
                                    lblExtensionBalanceInt.setText("Balance Interest to be pay");
                                    lblExtensionTotalRepayAmtValue.setText(String.valueOf(lblExtensionBalanceIntValue.getText()));
                                } else {
                                    lblExtensionTotalRepayAmtValue.setText(String.valueOf(lblExtensionBalanceIntValue.getText()));
                                    lblExtensionBalanceInt.setText("Excess amount to be recovered");
                                    lblExtensionBalanceIntValue.setText(String.valueOf(CommonUtil.convertObjToDouble(lblExtensionBalanceIntValue.getText()).doubleValue() * -1));
                                }
                                observable.setLblExtensionTotalRepayAmtValue(lblExtensionTotalRepayAmtValue.getText());
                                observable.setExtensionBalanceIntValue(lblExtensionBalanceIntValue.getText());
                                if ((rateOfInt == 0) && depAmount > 0) {
                                    extensionCalculationenableDisable(false);
                                }
////                                interest = intAmt + interestgreater;
//                                interestAmtNoPenal = (double)getNearest((long)(interest *100),100)/100;
//                                lblExtensionLeftOverIntAmtValue.setText(String.valueOf(interestAmtNoPenal));
//                                lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtNoPenal + interestAmtPenal));


                                //                            else if (lblExtensionPaymentFreqValue.getText().equals("Date of Maturity") && diffDay>0 && discounted!= null && discounted.equals("Y")){
                                //                                double lessamount = depAmount+(depAmount * rateOfInt * diffDay) /(36500);
                                //                                interest = lessamount - depAmount;
                                //                            }
                                //                            else{
                                //                                double intAmt = 0.0;
                                //                                if(totalMonths>0){
                                //                                    double greateramount = depAmount+(depAmount * (rateOfInt-1) * totalMonths) /1200;
                                //                                    intAmt = greateramount - depAmount;
                                //                                }
                                //                                if(diffDay>0){
                                //                                    depAmount = depAmount;// + intAmt;
                                //                                    double amount = depAmount + (depAmount * (rateOfInt-1) * diffDay) /(36500);
                                //                                    interestgreater = amount - depAmount;
                                //                                }
                                //                                interest = intAmt + interestgreater;
                                //                                interestAmtPenal = (double)getNearest((long)(interest *100),100)/100;
                                //                                lblExtensionWithdrawIntAmtValue.setText(String.valueOf(interestAmtPenal));
                                //                                if(totalMonths>0){
                                //                                    double greateramount = depAmount+(depAmount * rateOfInt * totalMonths) /1200;
                                //                                    intAmt = greateramount - depAmount;
                                //                                }
                                //                                if(diffDay>0){
                                //                                    depAmount = withdrawAmount - depAmount;// + intAmt;
                                //                                    double amount = depAmount+(depAmount * rateOfInt * diffDay) /(36500);
                                //                                    interestgreater = amount - depAmount;
                                //                                }
                                //                                interest = intAmt + interestgreater;
                                //                                interestAmtNoPenal = (double)getNearest((long)(interest *100),100)/100;
                                //                                lblExtensionLeftOverIntAmtValue.setText(String.valueOf(interestAmtNoPenal));
                                //                                lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtNoPenal + interestAmtPenal));
                                //                            }
                                //                        }else if(custMap.containsKey("BEHAVES_LIKE") && custMap.get("BEHAVES_LIKE").equals("CUMMULATIVE") && rateOfInt>0 && depAmount>0){
                                //                            lblExtensionWithdrawIntAmt.setVisible(true);
                                //                            lblExtensionLeftOverIntAmt.setVisible(true);
                                //                            lblExtensionTotalIntAmt.setVisible(true);
                                //                            lblExtensionWithdrawIntAmtValue.setVisible(true);
                                //                            lblExtensionLeftOverIntAmtValue.setVisible(true);
                                //                            lblExtensionTotalIntAmtValue.setVisible(true);
                                //                            lblExtensionWithdrawIntAmtValue.setText("");
                                //                            lblExtensionLeftOverIntAmtValue.setText("");
                                //                            lblExtensionTotalIntAmtValue.setText("");
                                //                        }else if((rateOfInt == 0) && depAmount>0){
                                //                            lblExtensionWithdrawIntAmt.setVisible(false);
                                //                            lblExtensionLeftOverIntAmt.setVisible(false);
                                //                            lblExtensionTotalIntAmt.setVisible(false);
                                //                            lblExtensionWithdrawIntAmtValue.setText("");
                                //                            lblExtensionLeftOverIntAmtValue.setText("");
                                //                            lblExtensionTotalIntAmtValue.setText("");
                                //                            lblExtensionWithdrawIntAmtValue.setVisible(false);
                                //                            lblExtensionLeftOverIntAmtValue.setVisible(false);
                                //                            lblExtensionTotalIntAmtValue.setVisible(false);
                                //                        }
//                    double balanceAmt = 0.0;
                                double withdrawAmt = CommonUtil.convertObjToDouble(txtExtensionDepTransAmtValue.getText()).doubleValue();
                                if (rdoExtensionWithdrawing_Yes.isSelected() == true && (rdoExtensionWithdrawingInt_Yes.isSelected() == false
                                        || rdoExtensionWithdrawingInt_Yes.isSelected() == false)) {
                                    balanceAmt = observable.depAmt - withdrawAmt;
                                } else if (rdoExtensionWithdrawing_Yes.isSelected() == true && rdoExtensionWithdrawingInt_Yes.isSelected() == true) {
                                    double interestAmt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
                                    double withdrawIntAmt = CommonUtil.convertObjToDouble(txtExtensionTransAmtValue.getText()).doubleValue();
                                    balanceAmt = observable.depAmt + interestAmt - (withdrawIntAmt + withdrawAmt);
                                } else if (rdoExtensionWithdrawing_Yes.isSelected() == true && rdoExtensionWithdrawingInt_No.isSelected() == true) {
                                    double interestAmt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
                                    double withdrawIntAmt = CommonUtil.convertObjToDouble(txtExtensionTransAmtValue.getText()).doubleValue();
                                    balanceAmt = observable.depAmt + interestAmt - withdrawAmt;
                                }
                                alreadyDrawn = CommonUtil.convertObjToDouble(observable.getExtensionAlreadyWithdrawn()).doubleValue();
                                balanceAmt = (balanceAmt + CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue()) - alreadyDrawn;
                                lblExtensionTotalRepayAmtValue.setText(String.valueOf(depAmount));
                                lblExtensionTotalRepayAmtValue.setText(String.valueOf(lblExtensionBalanceIntValue.getText()));
                                txtExtensionDepositAmount.setText(String.valueOf(balanceAmt));
                                lblExtensionInterestTransMode.setVisible(true);
                                cboExtensionTransMode.setVisible(true);
                                double minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
                                double leftOverAmt = CommonUtil.convertObjToDouble(txtExtensionDepositAmount.getText()).doubleValue();
                                if (leftOverAmt < minAmt) {
                                    ClientUtil.showAlertWindow("deposit to be open minimun amount is " + minAmt);
                                    //                        txtExtensionDepTransAmtValue.setText("");
                                }
                            } else if ((rateOfInt == 0) && depAmount > 0) {
                                extensionCalculationenableDisable(false);
                            }
                        }
                    } else {
                        ClientUtil.showAlertWindow("Withdrawal of amount is exceeding the deposit amt");
                        txtExtensionDepTransAmtValue.setText("");
                        txtExtensionDepTransAmtValue.requestFocus();
                    }
                    extensionYears = false;
                    extensionMonths = false;
                    extensionDays = false;
                }
            }
        }
    }//GEN-LAST:event_txtExtensionDepTransAmtValueFocusLost

    private void cboExtensionTransModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExtensionTransModeActionPerformed
        // TODO add your handling code here:
        cboCreditExtensionIntDetails();
    }//GEN-LAST:event_cboExtensionTransModeActionPerformed

    private void cboCreditExtensionIntDetails() {
        if (cboExtensionTransMode.getSelectedIndex() > 0) {
            String installType = ((ComboBoxModel) cboExtensionTransMode.getModel()).getKeyForSelected().toString();
            if (installType.equals("TRANSFER")) {
                btnExtensionTransCustomerIdFileOpenCr.setVisible(true);
                panExtensionTransCustomerNO.setVisible(true);
                lblExtensionInterestTransProdType.setVisible(true);
                lblExtensionInterestTransProdId.setVisible(true);
                lblExtensionInterestTransAccNo.setVisible(true);
                lblExtensionInterestCustName.setVisible(true);
                lblExtensionInterestTransProdType.setVisible(true);
                lblExtensionInterestTransProdId.setVisible(true);
                lblExtensionInterestTransAccNo.setVisible(true);
                lblExtensionInterestCustName.setVisible(true);
                cboExtensionTransProdType.setVisible(true);
                cboExtensionTransProdId.setVisible(true);
                txtExtensionTransCustomerIdCr.setVisible(true);
                txtExtensionTransCustomerIdCr.setEnabled(false);
                btnCustomerIdFileOpenCr.setVisible(true);
                txtExtensionTransTokenNo.setVisible(false);
                lblExtensionDepositTransTokenNo.setVisible(false);
                lblExtensionTransCustNameVal.setVisible(true);
                cboExtensionTransProdType.setSelectedItem(observable.getCboExtensionTransProdType());
                cboExtensionTransProdId.setSelectedItem(observable.getCboExtensionTransProdId());
                txtExtensionTransCustomerIdCr.setText(observable.getExtensioncustomerIdCrDep());
                lblExtensionTransCustNameVal.setText(observable.getExtensioncustomerNameCrValueDep());
            } else if (installType.equals("CASH")) {
                panExtensionTransCustomerNO.setVisible(false);
                lblExtensionInterestTransProdType.setVisible(false);
                lblExtensionInterestTransProdId.setVisible(false);
                lblExtensionInterestTransAccNo.setVisible(false);
                lblExtensionInterestCustName.setVisible(false);
                lblExtensionDepositTransTokenNo.setVisible(false);
                cboExtensionTransProdType.setSelectedItem("");
                cboExtensionTransProdType.setVisible(false);
                cboExtensionTransProdId.setSelectedItem("");
                cboExtensionTransProdId.setVisible(false);
                txtExtensionTransCustomerIdCr.setText("");
                txtExtensionTransCustomerIdCr.setVisible(false);
                btnExtensionTransCustomerIdFileOpenCr.setVisible(false);
                lblExtensionTransCustNameVal.setText("");
                lblExtensionTransCustNameVal.setVisible(false);
                txtExtensionTransTokenNo.setVisible(true);
                lblExtensionDepositTransTokenNo.setVisible(true);
            }
        }
    }
    private void txtExtensionTransAmtValueFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExtensionTransAmtValueFocusLost
        // TODO add your handling code here:
        double totIntAmt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
        double intAmt = CommonUtil.convertObjToDouble(txtExtensionTransAmtValue.getText()).doubleValue();
        double alreadyDrawn = CommonUtil.convertObjToDouble(observable.getExtensionAlreadyWithdrawn()).doubleValue();
        double remainAmt = totIntAmt - alreadyDrawn;
        if (remainAmt < 0) {
            txtExtensionTransAmtValue.setText("");
            cboExtensionTransMode.requestFocus();
            ClientUtil.showAlertWindow("entered amount is exceeding interest amount ");
        }
        double balanceAmt = 0.0;
        if (remainAmt >= intAmt) {
            cboExtensionTransMode.setSelectedItem("");
            cboExtensionTransMode.setVisible(true);
            lblExtensionInterestTransMode.setVisible(true);
            double interestAmt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
            double withdrawIntAmt = CommonUtil.convertObjToDouble(txtExtensionTransAmtValue.getText()).doubleValue();
            double withdrawAmt = CommonUtil.convertObjToDouble(txtExtensionDepTransAmtValue.getText()).doubleValue();
            balanceAmt = ((observable.depAmt + remainAmt) - (withdrawAmt + withdrawIntAmt));
            txtExtensionDepositAmount.setText(String.valueOf(balanceAmt));
            double minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
            double leftOverAmt = CommonUtil.convertObjToDouble(txtExtensionDepositAmount.getText()).doubleValue();
            lblExtensionTotalRepayAmtValue.setText(String.valueOf(intAmt + withdrawAmt));
            if (leftOverAmt < minAmt) {
                ClientUtil.showAlertWindow("deposit to be open minimun amount is " + minAmt);
                //                txtExtensionDepTransAmtValue.setText("");
            }
        } else if (intAmt > 0) {
            txtExtensionTransAmtValue.setText("");
            cboExtensionTransMode.requestFocus();
            ClientUtil.showAlertWindow("entered amount is exceeding interest amount ");
        }
    }//GEN-LAST:event_txtExtensionTransAmtValueFocusLost
    private void extensionCalculationenableDisable(boolean value) {
        lblExtensionTotalIntAmt.setVisible(value);
        lblExtensionTotalIntAmtValue.setVisible(value);
        lblExtensionTotalIntAmtValue.setText("");
        lblExtensionWithdrawIntAmt.setVisible(value);
        lblExtensionWithdrawIntAmtValue.setVisible(value);
        lblExtensionWithdrawIntAmtValue.setText("");
        lblExtensionLeftOverIntAmt.setVisible(value);
        lblExtensionLeftOverIntAmtValue.setVisible(value);
        lblExtensionLeftOverIntAmtValue.setText("");
        lblExtensionBalanceInt.setVisible(value);
        lblExtensionBalanceIntValue.setVisible(value);
        lblExtensionBalanceIntValue.setText("");
    }
    private void cboProdIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProdIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboProdIdActionPerformed

    private void rdoExtensionCalender_Freq_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionCalender_Freq_NoActionPerformed
        // TODO add your handling code here:
        observable.setRdoExtensionCalenderFreq_No(rdoExtensionCalender_Freq_No.isSelected());
        lblExtensionCalenderFreqDate.setVisible(false);
        cboExtensionCalenderFreqDay.setVisible(false);
        extensionYears = false;
        extensionMonths = false;
        extensionDays = false;

    }//GEN-LAST:event_rdoExtensionCalender_Freq_NoActionPerformed

    private void rdoExtensionCalender_Freq_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionCalender_Freq_YesActionPerformed
        // TODO add your handling code here:
        observable.setRdoExtensionCalenderFreq_Yes(rdoExtensionCalender_Freq_Yes.isSelected());
        lblExtensionCalenderFreqDate.setVisible(true);
        cboExtensionCalenderFreqDay.setVisible(true);
        extensionYears = false;
        extensionMonths = false;
        extensionDays = false;
    }//GEN-LAST:event_rdoExtensionCalender_Freq_YesActionPerformed

    private void rdoExtensionWithdrawingInt_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionWithdrawingInt_NoActionPerformed
        // TODO add your handling code here:

        observable.setRdoExtensionWithdrawingInt_No(rdoExtensionWithdrawingInt_No.isSelected());
        double withdrawAmt = CommonUtil.convertObjToDouble(txtExtensionDepTransAmtValue.getText()).doubleValue();
        if (withdrawAmt == 0) {
            cboExtensionTransMode.setVisible(false);
            lblExtensionInterestTransMode.setVisible(false);
        } else {
            cboExtensionTransMode.setVisible(true);
            lblExtensionInterestTransMode.setVisible(true);
        }
        double rateOfInt = CommonUtil.convertObjToDouble(lblExtensionRateOfIntVal.getText()).doubleValue();
        if (rateOfInt > 0) {
            lblExtensionIntAmt.setVisible(false);
            txtExtensionTransAmtValue.setVisible(false);
            double interestAmt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
            double balanceAmt = ((observable.depAmt + interestAmt) - withdrawAmt);
            double alreadyDrawn = CommonUtil.convertObjToDouble(observable.getExtensionAlreadyWithdrawn()).doubleValue();
            balanceAmt = balanceAmt - alreadyDrawn;
            txtExtensionDepositAmount.setText(String.valueOf(balanceAmt));
        } else {
            ClientUtil.showMessageWindow("Rate of interest is not for this period...");
        }
        double repayAmt = CommonUtil.convertObjToDouble(lblExtensionTotalRepayAmtValue.getText()).doubleValue();
        double intTranAmt = CommonUtil.convertObjToDouble(txtExtensionTransAmtValue.getText()).doubleValue();
        lblExtensionTotalRepayAmtValue.setText(String.valueOf(repayAmt - intTranAmt));

        extensionYears = false;
        extensionMonths = false;
        extensionDays = false;
    }//GEN-LAST:event_rdoExtensionWithdrawingInt_NoActionPerformed

    private void rdoExtensionWithdrawingInt_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionWithdrawingInt_YesActionPerformed
        // TODO add your handling code here:


        observable.setRdoExtensionWithdrawingInt_Yes(rdoExtensionWithdrawingInt_Yes.isSelected());
        double rateOfInt = CommonUtil.convertObjToDouble(lblExtensionRateOfIntVal.getText()).doubleValue();
        double alreadyDrawn = CommonUtil.convertObjToDouble(observable.getExtensionAlreadyWithdrawn()).doubleValue();
        double extensionCalcInt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
        //        balanceAmt = balanceAmt - alreadyDrawn;
        if (extensionCalcInt > alreadyDrawn) {
            cboExtensionTransMode.setVisible(true);
            cboExtensionTransProdType.setVisible(true);
            lblExtensionInterestTransMode.setVisible(true);
            lblExtensionInterestTransProdType.setVisible(true);
            cboExtensionTransProdId.setVisible(true);
            lblExtensionInterestTransProdId.setVisible(true);
            lblExtensionInterestTransAccNo.setVisible(true);
            panExtensionTransCustomerNO.setVisible(true);
            lblExtensionInterestCustName.setVisible(true);
            lblExtensionTransCustNameVal.setVisible(true);
            lblExtensionDepositTransTokenNo.setVisible(true);
            txtExtensionTransTokenNo.setVisible(true);
        } else {
            ClientUtil.showMessageWindow(" ...");
            rdoExtensionWithdrawingInt_No.setSelected(true);
            return;
        }
        if (rateOfInt > 0) {
            lblExtensionIntAmt.setVisible(true);
            txtExtensionTransAmtValue.setVisible(true);
        } else {
            ClientUtil.showMessageWindow("Rate of interest is not for this period...");
            rdoExtensionWithdrawingInt_No.setSelected(true);
        }
        extensionYears = false;
        extensionMonths = false;
        extensionDays = false;
    }//GEN-LAST:event_rdoExtensionWithdrawingInt_YesActionPerformed

    private void rdoExtensionofPrematureClosure_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionofPrematureClosure_NoActionPerformed
        // TODO add your handling code here:
        observable.setRdoExtensionAdding_No(rdoExtensionofPrematureClosure_No.isSelected());
        double totalMonths = 0.0;
        double diffDay = 0.0;
        Date depositDate = DateUtil.getDateMMDDYYYY(lblExtensionDepositDtVal.getText());
        HashMap prematureDateMap = new HashMap();
        prematureDateMap.put("FROM_DATE", depositDate);
        prematureDateMap.put("TO_DATE", currDt);
        List lst = ClientUtil.executeQuery("periodRunMap", prematureDateMap);
        if (lst != null && lst.size() > 0) {
            prematureDateMap = (HashMap) lst.get(0);
            totalMonths = CommonUtil.convertObjToDouble(prematureDateMap.get("NO_OF_MONTHS")).doubleValue();
            diffDay = CommonUtil.convertObjToLong(prematureDateMap.get("DAYS"));
            double interestAmtPenal = 0.0;
            double interestAmtNoPenal = 0.0;
            HashMap custMap = new HashMap();
            custMap.put("DEPOSIT_NO", lblValRenewDep.getText());
            double withdrawAmount = observable.depAmt;
            double rateOfInt = CommonUtil.convertObjToDouble(lblExtensionRateOfIntVal.getText()).doubleValue();
            List list = ClientUtil.executeQuery("getCustDepositNoBehavesLike", custMap);
            if (list != null && list.size() > 0) {
                custMap = (HashMap) list.get(0);
                double interestgreater = 0.0;
                String discounted = CommonUtil.convertObjToStr(custMap.get("DISCOUNTED_RATE"));
                if (custMap.containsKey("BEHAVES_LIKE") && custMap.get("BEHAVES_LIKE").equals("FIXED")) {
                    if (lblExtensionPaymentFreqValue.getText().equals("Monthly") && discounted != null && discounted.equals("Y")) {
                        double intAmt = 0.0;
                        if (totalMonths > 0) {
                            intAmt = rateOfInt / 4 / (Math.pow((1 + (rateOfInt / 1200)), 2) + (1 + (rateOfInt / 1200)) + 1);
                            double calcAmt = withdrawAmount / 100;
                            intAmt = intAmt * calcAmt;
                            intAmt = (double) getNearest((long) (intAmt * 100), 100) / 100;
                            intAmt = intAmt * totalMonths;
                        }
                        if (diffDay > 0) {
                            withdrawAmount = withdrawAmount;// + intAmt;
                            double amount = withdrawAmount + (withdrawAmount * rateOfInt * diffDay) / (36500);
                            interestgreater = amount - withdrawAmount;
                        }
                        interest = intAmt + interestgreater;
                        interestAmtNoPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                        lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtNoPenal));
                    } else if (lblExtensionPaymentFreqValue.getText().equals("Date of Maturity") && diffDay > 0 && discounted != null && discounted.equals("Y")) {
                        double lessamount = withdrawAmount + (withdrawAmount * rateOfInt * diffDay) / (36500);
                        interest = lessamount - withdrawAmount;
                    } else {
                        if (totalMonths > 0) {
                            double greateramount = withdrawAmount + (withdrawAmount * rateOfInt * totalMonths) / 1200;
                            interestgreater = greateramount - withdrawAmount;
                        }
                        double interestless = 0.0;
                        if (diffDay > 0) {
                            double lessamount = withdrawAmount + (withdrawAmount * rateOfInt * diffDay) / (36500);
                            interestless = lessamount - withdrawAmount;
                        }
                        interest = interestgreater + interestless;
                        interestAmtNoPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                        lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtNoPenal));
                    }
                } else if (custMap.containsKey("BEHAVES_LIKE") && custMap.get("BEHAVES_LIKE").equals("CUMMULATIVE")) {

                    double period = totalMonths / 3;
                    double completedInterest = 0.0;
                    double uncompletedInterest = 0.0;
                    double amount1 = 0.0;
                    double amount = 0.0;
                    if (period > 0 && rateOfInt > 0) {
                        amount = withdrawAmount * (Math.pow((1 + rateOfInt / 400), period));// Completed quarters.....
                        completedInterest = amount - withdrawAmount;
                        amount1 = amount;

                        if (diffDay > 0) {
                            amount = amount + (amount * rateOfInt * diffDay) / (36500);
                            uncompletedInterest = amount - amount1;
                        }
                    } else if (diffDay > 0 && rateOfInt > 0) {
                        //                                principal = CommonUtil.convertObjToDouble(custMap.get("DEPOSIT_AMT")).doubleValue();
                        amount = withdrawAmount + (withdrawAmount * rateOfInt * diffDay) / (36500);
                        uncompletedInterest = amount - withdrawAmount;
                    }
                    interest = completedInterest + uncompletedInterest + interestgreater;
                    //system.out.println("####CUMMULATIVE interest : " + interest);
                    interestAmtNoPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                    lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtNoPenal));



                }
            }
            double balanceAmt = 0.0;
            if (rdoExtensionWithdrawing_No.isSelected() == true && (rdoExtensionWithdrawingInt_Yes.isSelected() == false
                    || rdoExtensionWithdrawingInt_Yes.isSelected() == false)) {
                double interestAmt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
                balanceAmt = observable.depAmt + interestAmt;
            } else if (rdoExtensionWithdrawing_No.isSelected() == true && rdoExtensionWithdrawingInt_Yes.isSelected() == true) {
                double interestAmt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
                double withdrawIntAmt = CommonUtil.convertObjToDouble(txtExtensionTransAmtValue.getText()).doubleValue();
                balanceAmt = ((observable.depAmt + interestAmt) - withdrawIntAmt);
            } else if (rdoExtensionWithdrawing_No.isSelected() == true && rdoExtensionWithdrawingInt_No.isSelected() == true) {
                double interestAmt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
                double withdrawIntAmt = CommonUtil.convertObjToDouble(txtExtensionTransAmtValue.getText()).doubleValue();
                double withdrawAmt = CommonUtil.convertObjToDouble(txtExtensionDepTransAmtValue.getText()).doubleValue();
                balanceAmt = observable.depAmt + interestAmt;
            }
            double alreadyDrawn = CommonUtil.convertObjToDouble(observable.getExtensionAlreadyWithdrawn()).doubleValue();
            lblExtensionBalanceIntValue.setText(String.valueOf(interestAmtNoPenal - alreadyDrawn));
            lblExtensionTotalRepayAmtValue.setText(lblExtensionBalanceIntValue.getText());
            balanceAmt = balanceAmt - alreadyDrawn;
            txtExtensionDepositAmount.setText(String.valueOf(balanceAmt));
            observable.setExtensionOriginalIntValue(lblExtensionBalanceIntValue.getText());
        }
        extensionYears = false;
        extensionMonths = false;
        extensionDays = false;
    }//GEN-LAST:event_rdoExtensionofPrematureClosure_NoActionPerformed

    private void rdoExtensionofPrematureClosure_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionofPrematureClosure_YesActionPerformed
        // TODO add your handling code here:
        observable.setRdoExtensionAdding_Yes(rdoExtensionofPrematureClosure_Yes.isSelected());
        double totalMonths = 0.0;
        double diffDay = 0.0;
        Date depositDate = DateUtil.getDateMMDDYYYY(lblExtensionDepositDtVal.getText());
        HashMap prematureDateMap = new HashMap();
        prematureDateMap.put("FROM_DATE", depositDate);
        prematureDateMap.put("TO_DATE", currDt);
        List lst = ClientUtil.executeQuery("periodRunMap", prematureDateMap);
        if (lst != null && lst.size() > 0) {
            prematureDateMap = (HashMap) lst.get(0);
            totalMonths = CommonUtil.convertObjToDouble(prematureDateMap.get("NO_OF_MONTHS")).doubleValue();
            diffDay = CommonUtil.convertObjToLong(prematureDateMap.get("DAYS"));
            HashMap custMap = new HashMap();
            custMap.put("DEPOSIT_NO", lblValRenewDep.getText());
            double withdrawAmount = observable.depAmt;
            double depAmount = CommonUtil.convertObjToDouble(txtExtensionDepTransAmtValue.getText()).doubleValue();
            double rateOfInt = CommonUtil.convertObjToDouble(lblExtensionRateOfIntVal.getText()).doubleValue();
            double drawnAmt = CommonUtil.convertObjToDouble(lblPaidnterestAmountValue.getText()).doubleValue();
            rateOfInt = rateOfInt - 1;
            double interestAmtPenal = 0.0;
            double interestAmtNoPenal = 0.0;
            List list = ClientUtil.executeQuery("getCustDepositNoBehavesLike", custMap);
            if (list != null && list.size() > 0) {
                custMap = (HashMap) list.get(0);
                double interestgreater = 0.0;
                String discounted = CommonUtil.convertObjToStr(custMap.get("DISCOUNTED_RATE"));
                if (custMap.containsKey("BEHAVES_LIKE") && custMap.get("BEHAVES_LIKE").equals("FIXED")) {
                    if (lblExtensionPaymentFreqValue.getText().equals("Monthly") && discounted != null && discounted.equals("Y")) {
                        double intAmt = 0.0;
                        if (totalMonths > 0) {
                            intAmt = rateOfInt / 4 / (Math.pow((1 + (rateOfInt / 1200)), 2) + (1 + (rateOfInt / 1200)) + 1);
                            double calcAmt = withdrawAmount / 100;
                            intAmt = intAmt * calcAmt;
                            intAmt = (double) getNearest((long) (intAmt * 100), 100) / 100;
                            intAmt = intAmt * totalMonths;
                        }
                        if (diffDay > 0) {
                            withdrawAmount = withdrawAmount;// + intAmt;
                            double amount = withdrawAmount + (withdrawAmount * rateOfInt * diffDay) / (36500);
                            interestgreater = amount - withdrawAmount;
                        }
                        interest = intAmt + interestgreater;
                        interestAmtPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                        lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtPenal));
                        observable.setExtensionBalIntAmtVal(String.valueOf(interestAmtPenal));

                    } else if (lblExtensionPaymentFreqValue.getText().equals("Date of Maturity") && diffDay > 0 && discounted != null && discounted.equals("Y")) {
                        double lessamount = withdrawAmount + (withdrawAmount * rateOfInt * diffDay) / (36500);
                        interest = lessamount - withdrawAmount;
                    } else {
                        if (totalMonths > 0) {
                            double greateramount = withdrawAmount + (withdrawAmount * rateOfInt * totalMonths) / 1200;
                            interestgreater = greateramount - withdrawAmount;
                        }
                        double interestless = 0.0;
                        if (diffDay > 0) {
                            double lessamount = withdrawAmount + (withdrawAmount * rateOfInt * diffDay) / (36500);
                            interestless = lessamount - withdrawAmount;
                        }
                        interest = interestgreater + interestless;
                        interestAmtNoPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                        lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtNoPenal));


                        observable.setExtensionBalIntAmtVal(String.valueOf(interestAmtPenal));
                    }
                } else if (custMap.containsKey("BEHAVES_LIKE") && custMap.get("BEHAVES_LIKE").equals("CUMMULATIVE")) {
                    double amount = 0.0;
                    double amount1 = 0.0;
                    double intAmt = 0.0;
                    double completedInterest = 0.0;
                    double uncompletedInterest = 0.0;
                    double quaterlyPeriod = 0;

                    quaterlyPeriod = totalMonths / 3;
                    quaterlyPeriod = (long) roundOffLower((long) (quaterlyPeriod * 100), 100) / 100;


                    if (quaterlyPeriod > 0 && rateOfInt > 0) {
                        amount = withdrawAmount * (Math.pow((1 + rateOfInt / 400), quaterlyPeriod));// Completed quarters.....
                        completedInterest = amount - withdrawAmount;
                        amount1 = amount;

                        if (diffDay > 0) {
                            amount = amount + (amount * rateOfInt * diffDay) / (36500);// unCompleted quarters.....
                            uncompletedInterest = amount - amount1;
                        }
                    } else if (diffDay > 0 && rateOfInt > 0) {
                        //                                withdrawAmount = CommonUtil.convertObjToDouble(custMap.get("DEPOSIT_AMT")).doubleValue();
                        amount = withdrawAmount + (withdrawAmount * rateOfInt * diffDay) / (36500);// unCompleted quarters.....
                        uncompletedInterest = amount - rateOfInt;
                    }
                    interest = completedInterest + uncompletedInterest + interestgreater;
                    interestAmtNoPenal = (double) getNearest((long) (interest * 100), 100) / 100;
                    lblExtensionTotalIntAmtValue.setText(String.valueOf(interestAmtNoPenal));


                    observable.setExtensionBalIntAmtVal(String.valueOf(interestAmtPenal));

                }

                double balanceAmt = 0.0;
                if (rdoExtensionWithdrawing_No.isSelected() == true && (rdoExtensionWithdrawingInt_Yes.isSelected() == false
                        || rdoExtensionWithdrawingInt_Yes.isSelected() == false)) {
                    double interestAmt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
                    balanceAmt = observable.depAmt + interestAmt;
                } else if (rdoExtensionWithdrawing_No.isSelected() == true && rdoExtensionWithdrawingInt_Yes.isSelected() == true) {
                    double interestAmt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
                    double withdrawIntAmt = CommonUtil.convertObjToDouble(txtExtensionTransAmtValue.getText()).doubleValue();
                    //                    double withdrawAmt = CommonUtil.convertObjToDouble(txtExtensionDepTransAmtValue.getText()).doubleValue();
                    balanceAmt = ((observable.depAmt + interestAmt) - withdrawIntAmt);
                } else if (rdoExtensionWithdrawing_No.isSelected() == true && rdoExtensionWithdrawingInt_No.isSelected() == true) {
                    double interestAmt = CommonUtil.convertObjToDouble(lblExtensionTotalIntAmtValue.getText()).doubleValue();
                    double withdrawIntAmt = CommonUtil.convertObjToDouble(txtExtensionTransAmtValue.getText()).doubleValue();
                    double withdrawAmt = CommonUtil.convertObjToDouble(txtExtensionDepTransAmtValue.getText()).doubleValue();
                    balanceAmt = observable.depAmt + interestAmt;
                }
                double alreadyDrawn = CommonUtil.convertObjToDouble(observable.getExtensionAlreadyWithdrawn()).doubleValue();
                balanceAmt = balanceAmt - alreadyDrawn;
                lblExtensionBalanceIntValue.setText(String.valueOf(interestAmtNoPenal - alreadyDrawn));

                lblExtensionTotalRepayAmtValue.setText(lblExtensionBalanceIntValue.getText());
                txtExtensionDepositAmount.setText(String.valueOf(balanceAmt));
                if (interestAmtNoPenal - alreadyDrawn < 0.0) {
                    lblExtensionBalanceIntValue.setText(String.valueOf((interestAmtNoPenal - alreadyDrawn) * -1));
                    lblExtensionBalanceInt.setText("Balance Interest Recievable");
                    lblExtensionTotalRepayAmtValue.setText("0");
                }
                observable.setExtensionOriginalIntValue(lblExtensionBalanceIntValue.getText());
            }
        }
        extensionYears = false;
        extensionMonths = false;
        extensionDays = false;
    }//GEN-LAST:event_rdoExtensionofPrematureClosure_YesActionPerformed

    private void rdoExtensionWithdrawing_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionWithdrawing_NoActionPerformed
        // TODO add your handling code here:
        observable.setRdoExtensionWithdrawing_No(rdoExtensionWithdrawing_No.isSelected());
        lblExtensionWithdrawIntAmt.setVisible(false);
        lblExtensionWithdrawIntAmtValue.setText("");
        lblExtensionLeftOverIntAmt.setVisible(false);
        lblExtensionLeftOverIntAmtValue.setText("");
        lblExtensionWithdrawIntAmt1.setVisible(false);
        lblExtensionWithdrawIntAmt2.setVisible(false);
        lblExtensionWithdrawIntAmtValue1.setText("");
        lblExtensionWithdrawIntAmtValue2.setText("");
        double rateOfInt = CommonUtil.convertObjToDouble(lblExtensionRateOfIntVal.getText()).doubleValue();
        if (rateOfInt > 0) {
            txtExtensionDepTransAmtValue.setText("");
            txtExtensionDepTransAmtValue.setVisible(false);
            txtExtensionDepositAmount.setText(String.valueOf(observable.depAmt));
            lblExtensionTotalIntAmtValue.setText("");
            lblExtensionDepTransAmt.setVisible(false);
            lblExtensionofPrematureClosure.setVisible(true);
            rdoExtensionofPrematureClosure_Yes.setVisible(true);
            rdoExtensionofPrematureClosure_No.setVisible(true);
        } else {
            txtExtensionDepTransAmtValue.setText("");
            txtExtensionDepTransAmtValue.setVisible(false);
            lblExtensionDepTransAmt.setVisible(false);
            txtExtensionDepositAmount.setText(String.valueOf(observable.depAmt));
            ClientUtil.showMessageWindow("Rate of interest is not for this period...");
        }
        double repayAmt = CommonUtil.convertObjToDouble(lblExtensionTotalRepayAmtValue.getText()).doubleValue();
        double depTranAmt = CommonUtil.convertObjToDouble(txtExtensionDepTransAmtValue.getText()).doubleValue();
        lblExtensionTotalRepayAmtValue.setText(String.valueOf(repayAmt - depTranAmt));
        lblExtensionInterestTransMode.setVisible(false);
        cboExtensionTransMode.setVisible(false);
        extensionYears = false;
        extensionMonths = false;
        extensionDays = false;
    }//GEN-LAST:event_rdoExtensionWithdrawing_NoActionPerformed

    private void rdoExtensionWithdrawing_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExtensionWithdrawing_YesActionPerformed
        // TODO add your handling code here:
        String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
        HashMap hmap = new HashMap();


        observable.setRdoExtensionWithdrawing_Yes(rdoExtensionWithdrawing_Yes.isSelected());
        lblExtensionTotalIntAmtValue.setText("");
        lblExtensionDepTransAmt.setVisible(true);
        txtExtensionDepTransAmtValue.setVisible(true);
        lblExtensionofPrematureClosure.setVisible(false);
        lblExtensionWithdrawIntAmt.setVisible(true);
        lblExtensionLeftOverIntAmt.setVisible(true);
        lblExtensionLeftOverIntAmtValue.setVisible(true);
        lblExtensionLeftOverIntAmtValue.setVisible(true);
        rdoExtensionofPrematureClosure_Yes.setVisible(false);
        rdoExtensionofPrematureClosure_No.setVisible(false);
        txtExtensionDepositAmount.setText(String.valueOf(observable.depAmt));
        cboExtensionTransMode.setVisible(true);
        lblExtensionInterestTransMode.setVisible(true);
        extensionYears = false;
        extensionMonths = false;
        extensionDays = false;
    }//GEN-LAST:event_rdoExtensionWithdrawing_YesActionPerformed
    private void extensiondepSubNoSave() {
        updateOBFields();
        observable.populateExtensionDepSubNoTbl();
        if (observable.depSubNoK == ok || observable.depSubNoK == cancel) {
            observable.resetExtensionDepSubNo();
            setDepSubNoFields(false);
            setBtnDepSubNo(false);
            observable.ttNotifyObservers();
        } else {
            observable.ttNotifyObservers();
        }
    }
    private void btnExtensionDepSubNoAccSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtensionDepSubNoAccSaveActionPerformed
        // TODO add your handling code here:
        updateOBFields();
        observable.intWarnMsg = "";
        validationForExtensionDepSubAccinfo();
        final String depSubNoMandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(), panNewInput);
        if (!txtExtensionPeriodOfDeposit_Months.getText().equals("") || !txtExtensionPeriodOfDeposit_Years.getText().equals("")
                || !txtExtensionPeriodOfDeposit_Days.getText().equals("")) {
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_EXTENSION) {
                String extensionprodId = ((ComboBoxModel) cboExtensionDepositProdId.getModel()).getKeyForSelected().toString();
                String extensionCategory = ((ComboBoxModel) cboExtensionDepositCategory.getModel()).getKeyForSelected().toString();
                String installType = ((ComboBoxModel) cboExtensionInterestPaymentMode.getModel()).getKeyForSelected().toString();
                String prodType = ((ComboBoxModel) cboExtensionProdType.getModel()).getKeyForSelected().toString();
                String prodId = "";
                if (prodType != null && !prodType.equals("") && !prodType.equals("GL")) {
                    prodId = ((ComboBoxModel) cboExtensionProdId.getModel()).getKeyForSelected().toString();
                }
                String extensionDepProdType = ((ComboBoxModel) cboExtensionTransProdType.getModel()).getKeyForSelected().toString();
                String extensionDepProdId = "";
                if (extensionDepProdType != null && !extensionDepProdType.equals("") && !extensionDepProdType.equals("GL")) {
                    extensionDepProdId = ((ComboBoxModel) cboExtensionTransProdId.getModel()).getKeyForSelected().toString();
                }

                String extensionIntMode = ((ComboBoxModel) cboExtensionTransMode.getModel()).getKeyForSelected().toString();
                String extensionIntProdType = ((ComboBoxModel) cboExtensionTransProdType.getModel()).getKeyForSelected().toString();
                String extensionIntProdId = "";
                if (extensionIntProdType != null && !extensionIntProdType.equals("") && !extensionIntProdType.equals("GL")) {
                    extensionIntProdId = ((ComboBoxModel) cboExtensionTransProdId.getModel()).getKeyForSelected().toString();
                }
                HashMap schemeMap = new HashMap();
                schemeMap.put("PROD_ID", ((ComboBoxModel) cboExtensionDepositProdId.getModel()).getKeyForSelected());
                List lstScheme = ClientUtil.executeQuery("getSchemeIntroDate", schemeMap);
                if (lstScheme != null && lstScheme.size() > 0) {
                    schemeMap = (HashMap) lstScheme.get(0);
                    Date schemeDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(schemeMap.get("SCHEME_INTRO_DT")));
                    Date closedDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(schemeMap.get("SCHEME_CLOSING_DT")));
                    schemeIntroDt = (Date) currDt.clone();
                    schemeCloseDt = (Date) currDt.clone();
                    if (closedDt != null && closedDt.getDate() > 0) {
                        schemeCloseDt.setDate(closedDt.getDate());
                        schemeCloseDt.setMonth(closedDt.getMonth());
                        schemeCloseDt.setYear(closedDt.getYear());
                        Date curr_Dt = (Date) currDt.clone();
                        if ((viewType.equals(ClientConstants.VIEW_TYPE_RENEW) || viewType.equals(ClientConstants.VIEW_TYPE_NEW)
                                || viewType.equals("CUSTOMER ID")) && (DateUtil.dateDiff(schemeCloseDt, currDt) > 0)) {
                            if (viewType.equals(ClientConstants.VIEW_TYPE_RENEW)) {
                            } else if (viewType.equals(ClientConstants.VIEW_TYPE_NEW) || viewType.equals("CUSTOMER ID")) {
                                ClientUtil.showAlertWindow("This Product is already Closed on " + " "
                                        + DateUtil.getStringDate(schemeCloseDt) + " " + " Please Change the ProductId...");
                                return;
                            }
                        }
                    }
                    if (schemeDt != null && schemeDt.getDate() > 0) {
                        schemeIntroDt.setDate(schemeDt.getDate());
                        schemeIntroDt.setMonth(schemeDt.getMonth());
                        schemeIntroDt.setYear(schemeDt.getYear());
                    }
                }
                Date curr_Dt = (Date) currDt.clone();//--- Adds the "Interst Rate Not Set Message" if it is not set.
                if (observable.intWarnMsg != null) {
                    if (observable.intWarnMsg.length() > 0) {
                        msgStrB.append(observable.intWarnMsg);
                        msgStrB.append("\n");
                        observable.intWarnMsg = null;
                    }
                }
                double year = CommonUtil.convertObjToDouble(txtExtensionPeriodOfDeposit_Years.getText()).doubleValue();
                double month = CommonUtil.convertObjToDouble(txtExtensionPeriodOfDeposit_Months.getText()).doubleValue();
                double days = CommonUtil.convertObjToDouble(txtExtensionPeriodOfDeposit_Days.getText()).doubleValue();
                double per = year * 360 + month * 30 + days;
                if (per == 0) {
                    ClientUtil.showAlertWindow("Period of Deposit Should be Proper Value... ");
                    return;
                }
                String strBehavesLikeNowSelected = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD());
                HashMap calcMap = new HashMap();
                java.util.Date depDt = DateUtil.getDateMMDDYYYY(tdtExtensionDateOfDeposit.getDateValue());
                calcMap.put("DEPOSIT_PERIOD_YY", txtExtensionPeriodOfDeposit_Years.getText());
                calcMap.put("DEPOSIT_PERIOD_MM", txtExtensionPeriodOfDeposit_Months.getText());
                calcMap.put("DEPOSIT_PERIOD_DD", txtExtensionPeriodOfDeposit_Days.getText());
                calcMap.put("DEPOSIT_DT", depDt);
                calcMap = observable.calculateMaturityDate(calcMap);
                Date matDate = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
//                java.util.Date currDate = currDt.clone();
                java.util.Date currDate = (Date) currDt.clone();
                Date matDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tdtExtensionMaturityDate.getDateValue()));
                String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(extensionprodId));
                double minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
                double leftOverAmt = CommonUtil.convertObjToDouble(txtExtensionDepositAmount.getText()).doubleValue();
                if (strBehavesLike.equals("RECURRING")) {
                    selectedDepSubNoRow = true;
                    ClientUtil.showAlertWindow("Product cannot be renewed as Recurring...");
                    return;
                } else if (CommonUtil.convertObjToDouble(txtExtensionDepositAmount.getText()).doubleValue() == 0) {
                    ClientUtil.showAlertWindow("Deposit Amount Should not be empty");
                    return;
                } else if (extensionprodId.equals("")) {
                    ClientUtil.showAlertWindow("Select Product Id...");
                    return;
                } else if (extensionCategory.equals("")) {
                    ClientUtil.showAlertWindow("Select Customer Category...");
                    return;
                } else if (strBehavesLike.equals("FIXED")
                        && rdoAutoRenewal_Yes.isSelected() == true && rdoWith_intRenewal_No.isSelected() == true
                        && (installType == null || installType.equals("CASH") || prodType == null || txtExtensionCustomerIdCr.getText().length() == 0)) {
                    ClientUtil.showAlertWindow("you have chosen Auto Renewal With out interest, Hence please Choose Intpay Mode as Transfer");
                    return;
                } else if (rdoExtensionWithdrawing_Yes.isSelected() == false && rdoExtensionWithdrawing_No.isSelected() == false) {
                    ClientUtil.showAlertWindow("Want to withdraw from this deposit? Select either Yes or No.");
                    return;
                } else if (rdoExtensionWithdrawing_Yes.isSelected() == true && CommonUtil.convertObjToDouble(txtExtensionDepTransAmtValue.getText()).doubleValue() == 0) {
                    ClientUtil.showAlertWindow("Amount should not be Zero...");
                    return;
                } else if (rdoExtensionWithdrawingInt_Yes.isSelected() == true && CommonUtil.convertObjToDouble(txtExtensionTransAmtValue.getText()).doubleValue() == 0) {
                    ClientUtil.showAlertWindow("Amount should not be Zero...");
                    return;
                } else if (rdoExtensionWithdrawingInt_Yes.isSelected() == false && rdoExtensionWithdrawingInt_No.isSelected() == false) {
                    ClientUtil.showAlertWindow("Want to withdraw interest amount? Select either Yes or No.");
                    return;
                } else if (rdoExtensionWithdrawingInt_Yes.isSelected() == true && txtExtensionTransAmtValue.getText().length() == 0) {
                    ClientUtil.showAlertWindow("Amount should not be empty...");
                    return;
                } else if (rdoExtensionWithdrawing_Yes.isSelected() == true && extensionIntMode.equals("")) {
                    ClientUtil.showAlertWindow("Select the mode of withdrawal");
                    return;
                } else if (TrueTransactMain.TOKEN_NO_REQ.equals("Y") && rdoExtensionWithdrawing_Yes.isSelected() == true && extensionIntMode.equals("CASH") && txtExtensionTransTokenNo.getText().length() == 0) {
                    ClientUtil.showAlertWindow("Enter Token no...");
                    return;
                } else if (rdoExtensionWithdrawing_Yes.isSelected() == true && extensionIntMode.equals("TRANSFER") && extensionIntProdType.equals("")) {
                    ClientUtil.showAlertWindow("Select ProductType...");
                    return;
                } else if (rdoExtensionWithdrawing_Yes.isSelected() == true && extensionIntMode.equals("TRANSFER") && !extensionIntProdType.equals("GL") && extensionDepProdId.equals("")) {
                    ClientUtil.showAlertWindow("Select ProductId...");
                    return;
                } else if (rdoExtensionWithdrawing_Yes.isSelected() == true && extensionIntMode.equals("TRANSFER") && txtExtensionTransCustomerIdCr.getText().length() == 0) {
                    ClientUtil.showAlertWindow("Select Account Number...");
                    return;
                } else if (rdoExtensionWithdrawing_No.isSelected() == true && rdoExtensionofPrematureClosure_Yes.isSelected() == false && rdoExtensionofPrematureClosure_No.isSelected() == false) {
                    ClientUtil.showAlertWindow("Rate applicable deposit? Select either Yes or No.");
                    return;
                } else if (leftOverAmt < minAmt) {
                    ClientUtil.showAlertWindow("deposit to be open minimun amount is " + minAmt);
                    return;
                } else if (strBehavesLike.equals("FIXED") && installType.equals("")) {
                    ClientUtil.showAlertWindow("Select Payment Mode...");
                    return;
                } else if (strBehavesLike.equals("FIXED") && installType.equals("TRANSFER") && prodType.equals("")) {
                    ClientUtil.showAlertWindow("Select Product Type...");
                    return;
                } else if (strBehavesLike.equals("FIXED") && installType.equals("TRANSFER") && !prodType.equals("GL") && prodId.equals("")) {
                    ClientUtil.showAlertWindow("Select Product Id...");
                    return;
                } else if (strBehavesLike.equals("FIXED") && installType.equals("TRANSFER") && (txtExtensionCustomerIdCr.getText().length() == 0)) {
                    ClientUtil.showAlertWindow("Select Account Number...");
                    return;
                } else if (strBehavesLike.equals("FIXED") && cboExtensionInterestPaymentFrequency.getSelectedItem().equals("")) {
                    ClientUtil.showAlertWindow("Select Interest Payment Frequency...");
                    return;
                } else if (DateUtil.dateDiff(schemeIntroDt, curr_Dt) < 0) {
                    ClientUtil.showAlertWindow("This Product is Launched on " + " "
                            + DateUtil.getStringDate(schemeCloseDt) + " " + "Plz Change the ProductId...");
                    return;
                } else if (renewalProd == true) {
                    ClientUtil.showAlertWindow("This Product is already Closed on " + " "
                            + DateUtil.getStringDate(schemeCloseDt) + " " + "Please Change the ProductId...");
                    cboProductId.setEnabled(true);
                    return;
                } else if (strBehavesLike.equals("FIXED") && rdoExtensionCalender_Freq_Yes.isSelected() == false && rdoExtensionCalender_Freq_No.isSelected() == false) {
                    ClientUtil.showAlertWindow("Select Calender frequency...");
                    return;
                } else if (strBehavesLike.equals("FIXED") && rdoExtensionCalender_Freq_Yes.isSelected() == true
                        && (cboExtensionCalenderFreqDay.getSelectedIndex() == -1 || cboExtensionCalenderFreqDay.getSelectedIndex() == 0)) {
                    ClientUtil.showAlertWindow("Select Calender Frequency Day...");
                    return;
                } else if (extensionDays == false && extensionMonths == false && extensionYears == false) {
                    ClientUtil.showAlertWindow("Visit Period of Deposit Column...");
                    return;
                } else if (txtExtensionPeriodOfDeposit_Years.getText().length() > 0 && txtExtensionPeriodOfDeposit_Months.getText().length() > 0 && year > 0 && month > 11) {
                    //                    txtExtensionPeriodOfDeposit_Months.setText("0");
                    txtExtensionPeriodOfDeposit_Years.requestFocus();
                    ClientUtil.showAlertWindow("Enter values less than 12 months...");
                    return;
                }
                if (txtExtensionPeriodOfDeposit_Months.getText().length() > 0 && txtExtensionPeriodOfDeposit_Days.getText().length() > 0
                        && ((year > 0 && month == 0 && days > 29) || (year > 0 && month > 0 && days > 29) || (year == 0 && month > 11 && days > 29))) {
                    txtExtensionPeriodOfDeposit_Months.requestFocus();
                    ClientUtil.showAlertWindow("Days period should be less than month...");
                    return;
                } else if (extensionPeriod()) {
                    showMsg();
                    msgStrB = new StringBuffer();
                    observable.intWarnMsg = new String();
                    schemeFlag = true;
                } else {
                    if (strBehavesLike.equals("CUMMULATIVE")) {
                        cboExtensionInterestPaymentFrequency.setSelectedItem("Date of Maturity");
                        cboExtensionInterestPaymentFrequency.setEnabled(false);
                    }
                    extensiondepSubNoSave(); //--- Save the Data
                    selectedDepSubNoRowRenewal = false;
                    renewalMousePressScreen = false;
                    extensiondownSave = true;
                    renewalEnableDep = true;
                    renewalProd = false;
                    ClientUtil.enableDisable(panDepositDetails, false);
                    ClientUtil.enableDisable(panNewDepositDetails, false);
                    ClientUtil.enableDisable(panExtensionDepositTransDetails, false);
                    ClientUtil.enableDisable(panExtensionInterestDetails, false);
                    ClientUtil.enableDisable(panRenewalInterestCredit, false);
                    txtExtensionPeriodOfDeposit_Years.setEnabled(false);
                    txtExtensionPeriodOfDeposit_Months.setEnabled(false);
                    txtExtensionPeriodOfDeposit_Days.setEnabled(false);
                    cboExtensionInterestPaymentFrequency.setEnabled(false);
                    cboExtensionInterestPaymentMode.setEnabled(false);
                }
            } else {
                extensiondepSubNoSave(); //--- Save the Data
                selectedDepSubNoRowRenewal = false;
                renewalMousePressScreen = false;
                extensiondownSave = true;
                renewalEnableDep = true;
                renewalProd = false;
                ClientUtil.enableDisable(panDepositDetails, false);
                ClientUtil.enableDisable(panNewDepositDetails, false);
                ClientUtil.enableDisable(panExtensionDepositTransDetails, false);
                ClientUtil.enableDisable(panExtensionInterestDetails, false);
                ClientUtil.enableDisable(panRenewalInterestCredit, false);
                txtExtensionPeriodOfDeposit_Years.setEnabled(false);
                txtExtensionPeriodOfDeposit_Months.setEnabled(false);
                txtExtensionPeriodOfDeposit_Days.setEnabled(false);
                cboExtensionInterestPaymentFrequency.setEnabled(false);
                cboExtensionInterestPaymentMode.setEnabled(false);
            }
        } else {
            ClientUtil.showAlertWindow("Enter the Period of Deposit");
        }
    }//GEN-LAST:event_btnExtensionDepSubNoAccSaveActionPerformed

    private void tblExtensionDepSubNoAccInfoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblExtensionDepSubNoAccInfoMousePressed
        // TODO add your handling code here:
        selectedDepSubNoRowRenewal = true;
        updateOBFields();
        updateAccountInfo();
        btnExtensionDepSubNoAccSave.setEnabled(true);
        if (renewalMousePressScreen == false) {
            txtExtensionDepositAmount.setEnabled(false);
//            btnDepSubNoAccSave.setEnabled(false);
            //            btnExtensionDepSubNoAccNew.setEnabled(false);
            ClientUtil.enableDisable(panExtensionDepositTransDetails, true);
            ClientUtil.enableDisable(panExtensionInterestDetails, true);
            ClientUtil.enableDisable(panExtensionMaturityDt, true);
            ClientUtil.enableDisable(panExtensionFreqency, false);
            ClientUtil.enableDisable(panExtensionInterestCredit, false);
            tdtExtensionDateOfDeposit.setEnabled(false);
            tdtExtensionMaturityDate.setEnabled(false);
            txtExtensionDepositAmount.setEnabled(false);
            txtExtensionRateOfInterest.setEnabled(true);
            txtExtensionRateOfInterest.setEnabled(true);
            cboExtensionDepositCategory.setEnabled(true);
            cboExtensionInterestPaymentFrequency.setEnabled(true);
            rdoExtensionCalender_Freq_Yes.setEnabled(true);
            rdoExtensionCalender_Freq_No.setEnabled(true);
            txtExtensionPrintedOption.setEnabled(true);
            cboExtensionCalenderFreqDay.setEnabled(true);
            btnCustomerIdFileOpenCr.setEnabled(false);
            cboExtensionInterestPaymentMode.setEnabled(true);
            if (extensiondownSave == false) {
                cboExtensionDepositProdId.setSelectedItem(cboProductId.getSelectedItem());
                cboExtensionDepositCategory.setSelectedItem(cboCategory.getSelectedItem());
                cboExtensionInterestPaymentFrequency.setSelectedItem(cboInterestPaymentFrequency.getSelectedItem());
                cboExtensionInterestPaymentMode.setSelectedItem(cboInterestPaymentMode.getSelectedItem());
            }
            int rowRenewcount = (int) (Integer.parseInt(CommonUtil.convertObjToStr(tblExtensionDepSubNoAccInfo.getValueAt(0, 0))));
            tblExtensionDepSubNoRowSelected((rowRenewcount - 1));
            renewalEnable = true;
            renewalMousePressScreen = true;
            txtExtensionRateOfInterest.setEnabled(false);
        } else if (!viewType.equals("AUTHORIZE")) {
            ClientUtil.showAlertWindow("Cancel...");
            return;
        }
        if (extensiondownSave == true) {
            ClientUtil.enableDisable(panExtensionDepositTransDetails, true);
            ClientUtil.enableDisable(panExtensionInterestDetails, true);
            ClientUtil.enableDisable(panExtensionMaturityDt, true);
            //            ClientUtil.enableDisable(panExtensionFreqency,false);
            ClientUtil.enableDisable(panExtensionInterestCredit, false);
            tdtExtensionDateOfDeposit.setEnabled(false);
            tdtExtensionMaturityDate.setEnabled(false);
            txtExtensionDepositAmount.setEnabled(false);
            cboExtensionDepositCategory.setEnabled(true);
            cboExtensionInterestPaymentFrequency.setEnabled(true);
            txtExtensionRateOfInterest.setEnabled(false);
            cboExtensionInterestPaymentMode.setEnabled(true);
        }
        if (viewType.equals("AUTHORIZE")) {
            extensionAuthorization();
            ClientUtil.enableDisable(panExtensionMaturityDt, false);
            ClientUtil.enableDisable(panExtensionInterestCredit, false);
            ClientUtil.enableDisable(panExtensionFreqency, false);
        }
        if (viewType.equals("EDIT")) {
            ClientUtil.enableDisable(panExtensionInterestDetails, false);
            ClientUtil.enableDisable(panExtensionDepositTransDetails, false);
            cboExtensionDepositCategory.setEnabled(true);
            ClientUtil.enableDisable(panRenewalMaturityDt, true);
            tdtExtensionDateOfDeposit.setEnabled(false);
            tdtExtensionMaturityDate.setEnabled(false);
            txtExtensionDepositAmount.setEnabled(false);
            cboExtensionDepositCategory.setEnabled(true);
            btnExtensionDepSubNoAccSave.setEnabled(true);
            rdoExtensionCalender_Freq_Yes.setEnabled(true);
            rdoExtensionCalender_Freq_No.setEnabled(true);
            cboExtensionCalenderFreqDay.setEnabled(true);
            //            btnExtensionDepCustomerIdFileOpenCr.setEnabled(false);
            btnExtensionCustomerIdFileOpenCr.setEnabled(false);
            btnExtensionCustomerIdFileOpenCr.setEnabled(false);
        }
        String ExtensionprodId = ((ComboBoxModel) cboExtensionDepositProdId.getModel()).getKeyForSelected().toString();
        String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(ExtensionprodId));
        if (!strBehavesLike.equals("FIXED")) {
            cboExtensionInterestPaymentFrequency.setSelectedItem("Date of Maturity");
            cboExtensionInterestPaymentFrequency.setEnabled(false);
        } else {
            cboExtensionInterestPaymentFrequency.setEnabled(true);
        }
        if (strBehavesLike.equals("FIXED") && rdoExtensionCalender_Freq_Yes.isSelected() == true) {
            lblExtensionCalenderFreqDate.setVisible(true);
            cboExtensionCalenderFreqDay.setVisible(true);
        } else {
            lblExtensionCalenderFreqDate.setVisible(false);
            cboExtensionCalenderFreqDay.setVisible(false);
        }
        ClientUtil.enableDisable(panMaturityDt, false);
        ClientUtil.enableDisable(panInterestCredit, false);
        btnCustomerIdFileOpenCr.setEnabled(false);
    }//GEN-LAST:event_tblExtensionDepSubNoAccInfoMousePressed

    private void txtPeriodOfDeposit_MonthsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPeriodOfDeposit_MonthsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPeriodOfDeposit_MonthsActionPerformed

    private void cboRenewalInterestPaymentFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalInterestPaymentFrequencyActionPerformed
        // TODO add your handling code here:
        renewalInterestPaymentFrequency();
        renewalRecalculation();
    }//GEN-LAST:event_cboRenewalInterestPaymentFrequencyActionPerformed
    private void renewalInterestPaymentFrequency() {
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW && renewalMouseClick == false) {
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            double renewalPeriod = 0.0;
            String prodId = ((ComboBoxModel) cboRenewalInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
            String renewalprodId = ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected().toString();
            String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(renewalprodId));
            int freq = CommonUtil.convertObjToInt(prodId);
            renewalPeriod = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Years.getText()).doubleValue() * 360;
            renewalPeriod = renewalPeriod + CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Months.getText()).doubleValue() * 30;
            renewalPeriod = renewalPeriod + CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Days.getText()).doubleValue();
//            if(strBehavesLike.equals("FIXED") && freq == 30 && renewalPeriod <360){
//                ClientUtil.showAlertWindow("Not able to give Monthly Interest for this Period ");
//                return;
//            }else if(strBehavesLike.equals("FIXED") && renewalPeriod<180 && (freq  == 90 || freq == 360 || freq == 180)){
//                ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity... ");
//                return;
//            }else if(strBehavesLike.equals("FIXED") && renewalPeriod!=360 && renewalPeriod>=180 && renewalPeriod<=360 && freq == 360){
//                ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity or Quaterly or Half Yearly... ");
//                return;
//            }else if(strBehavesLike.equals("FIXED") && renewalPeriod == 360 && freq  == 360){
//                ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity or Monthly or Quaterly or Half Yearly... ");
//                return;
//            }

            if (strBehavesLike.equals("FIXED") && freq == 60 && renewalPeriod < 60) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 120 && renewalPeriod < 120) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 150 && renewalPeriod < 150) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 210 && renewalPeriod < 210) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            }
            if (strBehavesLike.equals("FIXED") && freq == 240 && renewalPeriod < 240) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 270 && renewalPeriod < 270) {
                ClientUtil.showAlertWindow("Not able to give  Interest for this Period ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 300 && renewalPeriod < 300) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 330 && renewalPeriod < 330) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 30 && renewalPeriod < 30) {
                ClientUtil.showAlertWindow("Not able to give Monthly Interest for this Period ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && renewalPeriod < 90 && freq == 90) {
                ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && renewalPeriod < 180 && freq == 180) {
                if (renewalPeriod < 90) {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");
                    cboRenewalInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be monthly or Quarterly ... ");
                    cboRenewalInterestPaymentFrequency.setSelectedItem("");
                    return;
                }
            } else if (strBehavesLike.equals("FIXED") && renewalPeriod < 360 && freq == 360) {
                if (renewalPeriod < 90) {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");
                    cboRenewalInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else if (renewalPeriod < 180) {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be monthly or  Quarterly ... ");
                    cboRenewalInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be monthly,quarterly or HalfYearly...");
                    cboRenewalInterestPaymentFrequency.setSelectedItem("");
                    return;
                }
            }



            //             if(strBehavesLike.equals("FIXED") && freq == 30 && renewalPeriod <360){
            //                ClientUtil.showAlertWindow("Not able to give Monthly Interest for this Period ");
            //                return;
            //            }else if(strBehavesLike.equals("FIXED") && renewalPeriod<=90 && (freq  == 90 || freq == 360 || freq == 180)){
            //                ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity... ");
            //                return;
            //            }else if(strBehavesLike.equals("FIXED") && renewalPeriod>=90 && renewalPeriod<=180 && (freq == 360 || freq == 180)){
            //                ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity or Quaterly...");
            //                return;
            //            }else if(strBehavesLike.equals("FIXED") && renewalPeriod>180 && renewalPeriod<=360 && freq  == 360){
            //                ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity Monthly or Quaterly or Half Yearly... ");
            //                return;
            //            }
            if (strBehavesLike.equals("FIXED") && freq == 0) {
                rdoRenewalCalender_Freq_No.setSelected(true);
                lblRenewalCalenderFreq.setVisible(false);
                rdoRenewalCalender_Freq_No.setVisible(false);
                rdoRenewalCalender_Freq_Yes.setVisible(false);
                cboRenewalCalenderFreqDay.setVisible(false);
                lblRenewalCalenderFreqDate.setVisible(false);
            } else if (strBehavesLike.equals("FIXED") && freq != 0) {
                lblRenewalCalenderFreq.setVisible(true);
                rdoRenewalCalender_Freq_No.setVisible(true);
                rdoRenewalCalender_Freq_Yes.setVisible(true);
                if (rdoRenewalCalender_Freq_Yes.isSelected() == true) {
                    cboRenewalCalenderFreqDay.setSelectedItem("");
                    cboRenewalCalenderFreqDay.setVisible(true);
                    lblRenewalCalenderFreqDate.setVisible(true);
                }
            }
        }
    }
    private void txtRenewalPeriodOfDeposit_MonthsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRenewalPeriodOfDeposit_MonthsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRenewalPeriodOfDeposit_MonthsActionPerformed

    private void txtRenewalPeriodOfDeposit_YearsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRenewalPeriodOfDeposit_YearsActionPerformed
        // TODO add your handling code here:
        //        renewalRecalculation();
    }//GEN-LAST:event_txtRenewalPeriodOfDeposit_YearsActionPerformed

    private void cboRenewalProdIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalProdIdActionPerformed
        // TODO add your handling code here:
        if (cboRenewalProdType.getSelectedIndex() > 0) {
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            String prodType = ((ComboBoxModel) cboRenewalProdType.getModel()).getKeyForSelected().toString();
            if (prodType != null && !prodType.equals("RM")) {
                btnRenewalCustomerIdFileOpenCr.setEnabled(true);
                txtRenewalCustomerIdCr.setText("");
                lblRenewalCustomerNameCrValue.setText("");
            }
        }
    }//GEN-LAST:event_cboRenewalProdIdActionPerformed

    private void cboRenewalInterestTransProdIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalInterestTransProdIdActionPerformed
        // TODO add your handling code here:
        txtRenewalIntCustomerIdCr.setText("");
        lblRenewalInterestCustNameVal.setText("");
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;

    }//GEN-LAST:event_cboRenewalInterestTransProdIdActionPerformed

    private void cboRenewalDepTransProdIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalDepTransProdIdActionPerformed
        // TODO add your handling code here:
        //        if(cboRenewalDepTransProdType.getSelectedIndex()>0){
        txtRenewalDepCustomerIdCr.setText("");
        lblRenewalCustNameValue.setText("");
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
        //        }else{
        //            ClientUtil.showAlertWindow("First Choose Product Type");
        //            return;
        //        }
    }//GEN-LAST:event_cboRenewalDepTransProdIdActionPerformed

    private void cboRenewalDepositCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalDepositCategoryActionPerformed
        // TODO add your handling code here:
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
    }//GEN-LAST:event_cboRenewalDepositCategoryActionPerformed

    private void rdoRenewalCalender_Freq_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalCalender_Freq_NoActionPerformed
        // TODO add your handling code here:
        lblRenewalCalenderFreqDate.setVisible(false);
        cboRenewalCalenderFreqDay.setVisible(false);
        cboRenewalCalenderFreqDay.setSelectedItem("");
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
        //Added BY Suresh
        setRenewalDetails();
    }//GEN-LAST:event_rdoRenewalCalender_Freq_NoActionPerformed

    private void rdoRenewalCalender_Freq_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalCalender_Freq_YesActionPerformed
        // TODO add your handling code here:
        renewalCalenderFreqency();
        //Added BY Suresh
        setRenewalDetails();
    }//GEN-LAST:event_rdoRenewalCalender_Freq_YesActionPerformed
    private void renewalCalenderFreqency() {
        if (rdoRenewalCalender_Freq_Yes.isSelected() == true && !cboRenewalInterestPaymentFrequency.getSelectedItem().equals("Date of Maturity")) {
            cboRenewalCalenderFreqDay.setSelectedItem("");
            lblRenewalCalenderFreq.setVisible(true);
            lblRenewalCalenderFreqDate.setVisible(true);
            cboRenewalCalenderFreqDay.setVisible(true);
            rdoRenewalCalender_Freq_Yes.setSelected(true);
        } else {
            ClientUtil.showMessageWindow("IntPay Frequency is On Maturity, you can not choose calender Frequency...");
            lblRenewalCalenderFreq.setVisible(false);
            lblRenewalCalenderFreqDate.setVisible(false);
            cboRenewalCalenderFreqDay.setVisible(false);
            rdoRenewalCalender_Freq_No.setSelected(true);
            return;
        }
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
    }
    private void cboRenewalDepositProdIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalDepositProdIdActionPerformed
        // TODO add your handling code here:
        renewalProdChange();
        if (cboRenewalDepositProdId != null) {
            HashMap sameMap = new HashMap();
            String oldBehaves = "";
            String oldProdId = CommonUtil.convertObjToStr(observable.getCboRenewalDepositProdId());
            sameMap.put("PROD_ID", oldProdId);
            List lstProd = ClientUtil.executeQuery("getBehavesLikeForDeposit", sameMap);
            if (lstProd != null && lstProd.size() > 0) {
                sameMap = (HashMap) lstProd.get(0);
                //system.out.println("****** getBehavesLikeForDeposit : " + sameMap);
                oldBehaves = CommonUtil.convertObjToStr(sameMap.get("BEHAVES_LIKE"));
            }
            String newProdId = null;
            String newBehaves = "";
            HashMap oldMap = new HashMap();
            String renewalprodId = ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected().toString();
            oldMap.put("PROD_ID", renewalprodId);
            lstProd = ClientUtil.executeQuery("getBehavesLikeForDeposit", oldMap);
            if (lstProd != null && lstProd.size() > 0) {
                oldMap = (HashMap) lstProd.get(0);
                //system.out.println("****** getBehavesLikeForDeposit : " + sameMap);
                newBehaves = CommonUtil.convertObjToStr(oldMap.get("BEHAVES_LIKE"));
                newProdId = ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected().toString();
            }
            if (!oldBehaves.equals(newBehaves)) {
                chkRenewSameNo.setEnabled(false);
                chkRenewSameNo.setSelected(false);
            }
        }
         List chargeList = null;
        HashMap whereMap = new HashMap();
        whereMap.put("BRANCH_ID", TrueTransactMain.BRANCH_ID);
        whereMap.put("PRODUCT_ID", (String) ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected());
        chargeList = (List) (ClientUtil.executeQuery("getSelectNextAccNo", whereMap));
        if (chargeList != null && chargeList.size() > 0) {
            String accountClosingCharge = CommonUtil.convertObjToStr((chargeList.get(0)));
            txtNextAccntNo.setText(String.valueOf(accountClosingCharge));
        }
        chargeList = null;
        cboProdIdChanged();
        txtNextAccntNo.setEditable(false);
    }//GEN-LAST:event_cboRenewalDepositProdIdActionPerformed
    private void renewalRecalculation() {
        double year = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Years.getText()).doubleValue();
        double month = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Months.getText()).doubleValue();
        double days = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Days.getText()).doubleValue();
        String prodType = ((ComboBoxModel) cboRenewalInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
        double per = year * 360 + month * 30 + days;
        if (per == 0 || prodType.length() <= 0) {
            return;
        } else {
            txtRenewalDepositAmtFocusLost();
        }
    }

    private void extensionRecalculation() {
        double year = CommonUtil.convertObjToDouble(txtExtensionPeriodOfDeposit_Years.getText()).doubleValue();
        double month = CommonUtil.convertObjToDouble(txtExtensionPeriodOfDeposit_Months.getText()).doubleValue();
        double days = CommonUtil.convertObjToDouble(txtExtensionPeriodOfDeposit_Days.getText()).doubleValue();
        String prodType = ((ComboBoxModel) cboExtensionInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
        double per = year * 360 + month * 30 + days;
        if (per == 0 || prodType.length() <= 0) {
            return;
        } else {
            txtRenewalDepositAmtFocusLost();
        }
    }
    private void cboRenewalInterestPaymentModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalInterestPaymentModeActionPerformed
        // TODO add your handling code here:
        renewalInterestPaymentMode();
    }//GEN-LAST:event_cboRenewalInterestPaymentModeActionPerformed
    private void renewalInterestPaymentMode() {
        if (cboRenewalInterestPaymentMode.getSelectedIndex() > 0) {
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            String installType = ((ComboBoxModel) cboRenewalInterestPaymentMode.getModel()).getKeyForSelected().toString();
            txtRenewalCustomerIdCr.setEnabled(false);
            if (installType != null && installType.equals("TRANSFER")) {
                String prodType = ((ComboBoxModel) cboRenewalProdType.getModel()).getKeyForSelected().toString();
                if (prodType.equals("RM")) {
                    btnRenewalCustomerIdFileOpenCr.setEnabled(false);
                } else {
                    btnRenewalCustomerIdFileOpenCr.setEnabled(true);
                }
                cboRenewalProdType.setEnabled(true);
                cboRenewalProdId.setEnabled(true);
            } else if (installType != null && installType.equals("CASH")) {
                cboRenewalProdType.setSelectedItem("");
                cboRenewalProdId.setSelectedItem("");
                txtRenewalCustomerIdCr.setText("");
                lblRenewalCustomerNameCrValue.setText("");
                cboRenewalProdType.setEnabled(false);
                cboRenewalProdId.setEnabled(false);
                txtRenewalCustomerIdCr.setEnabled(false);
                btnRenewalCustomerIdFileOpenCr.setEnabled(false);
            } else {
                cboRenewalInterestPaymentMode.setSelectedItem("");
            }
        } else {
            cboRenewalProdType.setEnabled(false);
            cboRenewalProdId.setEnabled(false);
            txtRenewalCustomerIdCr.setEnabled(false);
            btnRenewalCustomerIdFileOpenCr.setEnabled(false);
        }
    }
    private void txtRenewalPeriodOfDeposit_DaysFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRenewalPeriodOfDeposit_DaysFocusLost
        // TODO add your handling code here:
        String oldValue = observable.getRenewaltxtPeriodOfDeposit_Days();
        String newValue = txtRenewalPeriodOfDeposit_Days.getText();
        String renewalprodId = ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected().toString();
        String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(renewalprodId));
        //--- If oldValue is not equal to newValue, then reset the calculated fields for//--- recalculating the values
        //--- If it is not filled, thn assign "0" to it.
        renewalDays = true;
    }//GEN-LAST:event_txtRenewalPeriodOfDeposit_DaysFocusLost
    private int chkRenewalPeriodMultiples() {
        int YearsChk = 0;
        int MonthsChk = 0;
        int DaysChk = 0;
        int totalDays;
        int multDays = 0;
        int retVal = -1;
        if ((txtRenewalPeriodOfDeposit_Years.getText() != null) && (!txtRenewalPeriodOfDeposit_Years.getText().equals(""))) {
            YearsChk = (Integer.parseInt(CommonUtil.convertObjToStr(txtRenewalPeriodOfDeposit_Years.getText()))) * 365;
        }
        if ((txtRenewalPeriodOfDeposit_Months.getText() != null) && (!txtRenewalPeriodOfDeposit_Months.getText().equals(""))) {
            MonthsChk = (Integer.parseInt(CommonUtil.convertObjToStr(txtRenewalPeriodOfDeposit_Months.getText()))) * 30;
        }
        if ((txtRenewalPeriodOfDeposit_Days.getText() != null) && (!txtRenewalPeriodOfDeposit_Days.getText().equals(""))) {
            DaysChk = Integer.parseInt(CommonUtil.convertObjToStr(txtRenewalPeriodOfDeposit_Days.getText()));
        }
        totalDays = YearsChk + MonthsChk + DaysChk;
        multDays = Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
        if (totalDays != 0) {
            retVal = (totalDays % multDays);
        } else {
            retVal = -1;
        }
        return retVal;
    }
    private void txtRenewalPeriodOfDeposit_MonthsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRenewalPeriodOfDeposit_MonthsFocusLost
        // TODO add your handling code here:
        String oldValue = observable.getRenewaltxtPeriodOfDeposit_Months();
        String newValue = txtRenewalPeriodOfDeposit_Months.getText();
        double multperiod = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
        String renewalprodId = ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected().toString();
        String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(renewalprodId));
        renewalMonths = true;
    }//GEN-LAST:event_txtRenewalPeriodOfDeposit_MonthsFocusLost
    private int chkPeriodOfMultiplesForRenewalMonths() {
        int retVal = -1;
        int yearsInMonths = 0;
        int monthsEntered = 0;
        int periodOfMultiplesInMonths = (Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")))) / 30;
        if ((txtRenewalPeriodOfDeposit_Years.getText() != null) && (!txtRenewalPeriodOfDeposit_Years.getText().equals(""))) {
            yearsInMonths = (Integer.parseInt(CommonUtil.convertObjToStr(txtRenewalPeriodOfDeposit_Years.getText()))) * 12;
        }
        if ((txtRenewalPeriodOfDeposit_Months.getText() != null) && (!txtRenewalPeriodOfDeposit_Months.getText().equals(""))) {
            monthsEntered = Integer.parseInt(CommonUtil.convertObjToStr(txtRenewalPeriodOfDeposit_Months.getText()));
        }
        totalMonths = yearsInMonths + monthsEntered;
        retVal = (totalMonths % periodOfMultiplesInMonths);
        return retVal;
    }
    private void txtRenewalPeriodOfDeposit_YearsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRenewalPeriodOfDeposit_YearsFocusLost
        // TODO add your handling code here:
        String oldValue = observable.getRenewaltxtPeriodOfDeposit_Years();
        //system.out.println("oldValue : " + oldValue);
        String newValue = txtRenewalPeriodOfDeposit_Years.getText();
        //system.out.println("newValue : " + newValue);
        String renewalprodId = ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected().toString();
        String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(renewalprodId));
        //--- If oldValue is not equal to newValue, then reset the calculated fields for //--- recalculating the values
        renewalDays = true;
    }//GEN-LAST:event_txtRenewalPeriodOfDeposit_YearsFocusLost
    private void extensionAuthorization() {
        if (observable.getRdoExtensionWithdrawing_Yes() == true) {
            lblExtensionDepTransAmt.setVisible(true);
            txtExtensionDepTransAmtValue.setVisible(true);
            txtExtensionDepTransAmtValue.setText(observable.getTxtExtensionTransAmtValue());
            lblExtensionInterestTransMode.setVisible(true);
            cboExtensionTransMode.setVisible(true);
            cboExtensionTransMode.setVisible(false);
            rdoExtensionofPrematureClosure_Yes.setVisible(false);
            rdoExtensionofPrematureClosure_No.setVisible(false);
        } else if (observable.getRdoExtensionWithdrawing_No() == true) {
            cboExtensionTransMode.setVisible(true);
            rdoExtensionofPrematureClosure_Yes.setVisible(true);
            rdoExtensionofPrematureClosure_No.setVisible(true);
            lblExtensionInterestTransMode.setVisible(false);
            cboExtensionTransMode.setVisible(false);
            if (observable.getRdoExtensionAdding_Yes() == true) {
                lblExtensionWithdrawIntAmtValue.setVisible(true);
                lblExtensionLeftOverIntAmtValue.setVisible(true);
                lblExtensionWithdrawIntAmt.setVisible(true);
                lblExtensionLeftOverIntAmt.setVisible(true);
                lblExtensionDepTransAmt.setVisible(true);
                txtExtensionDepTransAmtValue.setVisible(true);
                txtExtensionDepTransAmtValue.setText(observable.getTxtExtensionTransAmtValue());
            } else if (observable.getRdoExtensionAdding_No() == true) {
                lblExtensionWithdrawIntAmtValue.setVisible(false);
                lblExtensionLeftOverIntAmtValue.setVisible(false);
                lblExtensionWithdrawIntAmt.setVisible(false);
                lblExtensionLeftOverIntAmt.setVisible(false);
                lblExtensionDepTransAmt.setVisible(false);
                txtExtensionDepTransAmtValue.setVisible(false);
            }
        }
        if (observable.getRdoExtensionWithdrawingInt_Yes() == true || observable.getRdoExtensionWithdrawing_Yes() == true) {
            lblExtensionInterestTransMode.setVisible(true);
            cboExtensionTransMode.setVisible(true);
            if (observable.getRdoExtensionWithdrawingInt_Yes() == true) {
                lblExtensionIntAmt.setVisible(true);
                txtExtensionTransAmtValue.setVisible(true);
                txtExtensionTransAmtValue.setText(observable.getTxtExtensionIntAmtValue());
            } else if (observable.getRdoExtensionWithdrawingInt_No() == true) {
                lblExtensionIntAmt.setVisible(false);
                txtExtensionTransAmtValue.setVisible(false);
            }
        } else if (observable.getRdoExtensionWithdrawingInt_No() == true) {
            lblExtensionInterestTransMode.setVisible(false);
            cboExtensionTransMode.setVisible(false);
            lblExtensionIntAmt.setVisible(false);
            txtExtensionTransAmtValue.setVisible(false);
        }
        if (observable.getCboExtensionTransMode() != null && observable.getCboExtensionTransMode().length() > 0) {
            cboExtensionTransMode.setSelectedItem(CommonUtil.convertObjToStr(observable.getCboExtensionTransMode()));
        }
        String installType = (CommonUtil.convertObjToStr(observable.getCboExtensionTransProdType()));
        if (installType.equals("")) {
            cboExtensionTransProdType.setVisible(false);
            cboExtensionTransProdId.setVisible(false);
            txtExtensionTransCustomerIdCr.setVisible(false);
            txtExtensionTransCustomerIdCr.setVisible(false);
            lblExtensionTransCustNameVal.setVisible(false);
            lblExtensionDepositTransTokenNo.setVisible(false);
            txtExtensionTransTokenNo.setVisible(false);
            lblExtensionInterestTransProdType.setVisible(false);
            lblExtensionInterestTransProdId.setVisible(false);
            lblExtensionInterestTransAccNo.setVisible(false);
            lblExtensionInterestCustName.setVisible(false);
            btnExtensionTransCustomerIdFileOpenCr.setVisible(false);
        } else if (installType.equals("CASH")) {
            lblExtensionInterestTransProdType.setVisible(false);
            lblExtensionInterestTransProdId.setVisible(false);
            lblExtensionInterestTransAccNo.setVisible(false);
            lblExtensionInterestCustName.setVisible(false);
            cboExtensionTransProdType.setVisible(false);
            cboExtensionTransProdId.setVisible(false);
            txtExtensionTransCustomerIdCr.setVisible(false);
            txtExtensionTransTokenNo.setVisible(true);
            lblExtensionDepositTransTokenNo.setVisible(true);
        } else if (installType.equals("TRANSFER")) {
            cboExtensionTransProdType.setVisible(true);
            cboExtensionTransProdId.setVisible(true);
            //            cboExtensionTransProdId.setSelectedItem(observable.getCbmExtensionTransProdId().getDataForKey(observable.getCboExtensionTransProdId()));
            txtExtensionTransCustomerIdCr.setVisible(true);
            txtExtensionTransCustomerIdCr.setEnabled(false);
            lblExtensionTransCustNameVal.setVisible(true);
            lblExtensionDepositTransTokenNo.setVisible(false);
            txtExtensionTransTokenNo.setVisible(false);
            lblExtensionInterestTransProdType.setVisible(true);
            lblExtensionInterestTransProdId.setVisible(true);
            lblExtensionInterestTransAccNo.setVisible(true);
            lblExtensionInterestCustName.setVisible(true);
            btnExtensionTransCustomerIdFileOpenCr.setVisible(true);
            btnExtensionTransCustomerIdFileOpenCr.setEnabled(false);
        }
        rdoExtensionWithdrawing_No.setVisible(true);
        rdoExtensionWithdrawing_Yes.setVisible(true);
        rdoExtensionWithdrawingInt_Yes.setVisible(true);
        rdoExtensionWithdrawingInt_No.setVisible(true);
        cboExtensionDepositProdId.setVisible(true);
        lblExtensionCategory.setVisible(true);
        lblExtensionWithdrawingDeposit.setVisible(true);
        //        lblWithdrawingIntAmt.setVisible(true);
        lblExtensionProdId.setVisible(true);
        cboExtensionDepositCategory.setVisible(true);
        ClientUtil.enableDisable(panRenewalInterestCredit, false);
        ClientUtil.enableDisable(panExtensionDepositTransDetails, false);
        ClientUtil.enableDisable(panExtensionInterestDetails, false);
        ClientUtil.enableDisable(panRenewalMaturityDt, false);
        btnExtensionDepSubNoAccSave.setEnabled(false);
        btnExtensionCustomerIdFileOpenCr.setEnabled(false);
        //        btnExtensionIntCustomerIdFileOpenCr.setEnabled(false);
//        cboMemberType.setVisible(false);
//        lblMemberType.setVisible(false);
        cboInterestPaymentFrequency.setEnabled(false);
        cboInterestPaymentMode.setEnabled(true);
        cboExtensionInterestPaymentFrequency.setEnabled(false);
        rdoExtensionCalender_Freq_No.setEnabled(false);
        rdoExtensionCalender_Freq_Yes.setEnabled(false);
        cboExtensionCalenderFreqDay.setEnabled(false);
        btnExtensionCustomerIdFileOpenCr.setEnabled(false);
    }
    private void btnRenewalDepCustomerIdFileOpenCrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenewalDepCustomerIdFileOpenCrActionPerformed
        // TODO add your handling code here:
        if (cboRenewalDepTransProdType.getSelectedIndex() > 0) {
            callView("RENEWAL_DEP_TRANS_ACC_NO");
        } else {
            ClientUtil.showAlertWindow("Product Type should not be empty...");
            return;
        }
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
        //Added BY Suresh
        setRenewalDetails();
    }//GEN-LAST:event_btnRenewalDepCustomerIdFileOpenCrActionPerformed
    private void renewalAuthorization() {
        if (observable.getRdoRenewalWithdrawing_Yes() == true) {
            lblRenewalDepTransAmt.setVisible(true);
            txtRenewalDepTransAmtValue.setVisible(true);
            txtRenewalDepTransAmtValue.setText(observable.getTxtRenewalDepTransAmtValue());
            lblRenewalDepositTransMode.setVisible(true);
            cboRenewalDepTransMode.setVisible(true);
            lblRenewalAddingDepTrans.setVisible(false);
            rdoRenewalAdding_Yes.setVisible(false);
            rdoRenewalAdding_No.setVisible(false);
        } else if (observable.getRdoRenewalWithdrawing_No() == true) {
            lblRenewalAddingDepTrans.setVisible(true);
            rdoRenewalAdding_Yes.setVisible(true);
            rdoRenewalAdding_No.setVisible(true);
            lblRenewalDepositTransMode.setVisible(false);
            cboRenewalDepTransMode.setVisible(false);
            if (observable.getRdoRenewalAdding_Yes() == true) {
                lblRenewalDepTransAmt.setVisible(true);
                txtRenewalDepTransAmtValue.setVisible(true);
                txtRenewalDepTransAmtValue.setText(observable.getTxtRenewalDepTransAmtValue());
            } else if (observable.getRdoRenewalAdding_No() == true) {
                lblRenewalDepTransAmt.setVisible(false);
                txtRenewalDepTransAmtValue.setVisible(false);
            }
        }
        if (observable.getRdoRenewalWithdrawingInt_Yes() == true) {
            lblRenewalInterestTransMode.setVisible(true);
            cboRenewalInterestTransMode.setVisible(true);
            lblRenewalIntAmt.setVisible(true);
            txtRenewalIntAmtValue.setVisible(true);
            txtRenewalIntAmtValue.setText(observable.getTxtRenewalIntAmtValue());
        } else if (observable.getRdoRenewalWithdrawingInt_No() == true) {
            lblRenewalInterestTransMode.setVisible(false);
            cboRenewalInterestTransMode.setVisible(false);
            lblRenewalIntAmt.setVisible(false);
            txtRenewalIntAmtValue.setVisible(false);
        }
        String installType = ((ComboBoxModel) cboRenewalDepTransMode.getModel()).getKeyForSelected().toString();
        if (installType.equals("")) {
            cboRenewalDepTransProdType.setVisible(false);
            cboRenewalDepTransProdId.setVisible(false);
            txtRenewalDepCustomerIdCr.setVisible(false);
            txtRenewalDepTransTokenNo.setVisible(false);
            btnRenewalDepCustomerIdFileOpenCr.setVisible(false);
            lblRenewalDepositTransProdType.setVisible(false);
            lblRenewalDepositTransProdId.setVisible(false);
            lblRenewalDepositTransAccNo.setVisible(false);
            lblRenewalDepositTransCustName.setVisible(false);
            lblRenewalDepositTransTokenNo.setVisible(false);
            txtRenewalDepTransTokenNo.setVisible(false);
        } else if (installType.equals("CASH")) {
            cboRenewalDepTransProdType.setVisible(false);
            cboRenewalDepTransProdId.setVisible(false);
            txtRenewalDepCustomerIdCr.setVisible(false);
            btnRenewalDepCustomerIdFileOpenCr.setVisible(false);
            txtRenewalDepTransTokenNo.setVisible(true);
            lblRenewalDepositTransTokenNo.setVisible(true);
            lblRenewalDepositTransTokenNo.setEnabled(true);
        } else if (installType.equals("TRANSFER")) {
            cboRenewalDepTransProdType.setEnabled(false);
            cboRenewalDepTransProdId.setEnabled(false);
            txtRenewalDepCustomerIdCr.setEnabled(false);
            txtRenewalDepTransTokenNo.setEnabled(false);
            btnRenewalDepCustomerIdFileOpenCr.setEnabled(false);
            lblRenewalDepositTransTokenNo.setEnabled(false);
            txtRenewalDepTransTokenNo.setEnabled(false);
        }
        String installIntType = ((ComboBoxModel) cboRenewalInterestTransMode.getModel()).getKeyForSelected().toString();
        if (installIntType.equals("")) {
            cboRenewalInterestTransProdType.setVisible(false);
            cboRenewalInterestTransProdId.setVisible(false);
            txtRenewalIntCustomerIdCr.setVisible(false);
            txtRenewalIntTokenNoVal.setVisible(false);
            btnRenewalIntCustomerIdFileOpenCr.setVisible(false);
            lblRenewalInterestTransProdType.setVisible(false);
            lblRenewalInterestTransProdId.setVisible(false);
            lblRenewalInterestTransAccNo.setVisible(false);
            lblRenewalInterestCustName.setVisible(false);
            lblRenewalInterestTokenNo.setVisible(false);
            txtRenewalIntTokenNoVal.setVisible(false);
        } else if (installIntType.equals("CASH")) {
            cboRenewalInterestTransProdType.setVisible(false);
            cboRenewalInterestTransProdId.setVisible(false);
            txtRenewalIntCustomerIdCr.setVisible(false);
            btnRenewalIntCustomerIdFileOpenCr.setVisible(false);
            lblRenewalInterestTokenNo.setVisible(true);
            lblRenewalInterestTokenNo.setEnabled(true);
            txtRenewalIntTokenNoVal.setVisible(true);
        } else if (installIntType.equals("TRANSFER")) {
            cboRenewalInterestTransProdType.setEnabled(true);
            cboRenewalInterestTransProdId.setEnabled(true);
            txtRenewalIntCustomerIdCr.setEnabled(true);
            btnRenewalIntCustomerIdFileOpenCr.setEnabled(false);
            lblRenewalInterestTokenNo.setEnabled(false);
            txtRenewalIntTokenNoVal.setEnabled(false);
        }
        rdoRenewalWithdrawing_No.setVisible(true);
        rdoRenewalWithdrawing_Yes.setVisible(true);
        rdoRenewalWithdrawingInt_Yes.setVisible(true);
        rdoRenewalWithdrawingInt_No.setVisible(true);
        cboRenewalDepositProdId.setVisible(true);
        lblRenewalCategory.setVisible(true);
        lblRenewalWithdrawingDeposit.setVisible(true);
        //        lblWithdrawingIntAmt.setVisible(true);
        lblRenewalProdId.setVisible(true);
        cboRenewalDepositCategory.setVisible(true);
        ClientUtil.enableDisable(panRenewalInterestCredit, false);
        ClientUtil.enableDisable(panRenewalDepositTransDetails, false);
        ClientUtil.enableDisable(panRenewalInterestDetails, false);
        ClientUtil.enableDisable(panRenewalMaturityDt, false);
        btnRenewalDepSubNoAccSave.setEnabled(false);
        btnRenewalDepCustomerIdFileOpenCr.setEnabled(false);
        btnRenewalCustomerIdFileOpenCr.setEnabled(false);
        btnRenewalIntCustomerIdFileOpenCr.setEnabled(false);
//        cboMemberType.setVisible(false);
//        lblMemberType.setVisible(false);
        cboInterestPaymentFrequency.setEnabled(false);
        cboInterestPaymentMode.setEnabled(true);
        cboRenewalInterestPaymentFrequency.setEnabled(false);
        rdoRenewalCalender_Freq_No.setEnabled(false);
        rdoRenewalCalender_Freq_Yes.setEnabled(false);
        cboRenewalCalenderFreqDay.setEnabled(false);
        btnRenewalCustomerIdFileOpenCr.setEnabled(false);
        String prodType = ((ComboBoxModel) cboRenewalDepTransProdType.getModel()).getKeyForSelected().toString();
        String intprodType = ((ComboBoxModel) cboRenewalInterestTransProdType.getModel()).getKeyForSelected().toString();
        if (cboRenewalDepTransProdType.getSelectedIndex() > 0 && prodType.equals("RM") && rdoRenewalWithdrawing_Yes.isSelected() == true) {
            cboRenewalInterestTransMode.setVisible(false);
            lblRenewalInterestTransMode.setVisible(false);
            lblRenewalInterestCustName.setVisible(true);
            lblRenewalInterestCustNameVal.setVisible(true);
            lblRenewalInterestCustName.setText("Total Amount withdrawn ");
            lblRenewalInterestCustNameVal.setText("" + (CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue()
                    + CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue()));
        } else if (cboRenewalDepTransMode.getSelectedIndex() > 0 && cboRenewalDepTransMode.getSelectedItem().equals("Cash")) {
            lblRenewalDepositTransTokenNo.setVisible(true);
            txtRenewalDepTransTokenNo.setVisible(true);
        }
        if (cboRenewalInterestTransProdType.getSelectedIndex() > 0 && intprodType.equals("RM") && rdoRenewalWithdrawingInt_Yes.isSelected() == true) {
            cboRenewalInterestTransMode.setVisible(false);
            lblRenewalInterestTransMode.setVisible(false);
            lblRenewalInterestCustName.setVisible(true);
            lblRenewalInterestCustNameVal.setVisible(true);
            lblRenewalInterestCustName.setText("Total Amount withdrawn ");
            if (rdoRenewalWithdrawing_Yes.isSelected() == false && rdoRenewalWithdrawingInt_Yes.isSelected() == true) {
                lblRenewalInterestCustNameVal.setText("" + CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue());
            }
        } else if (cboRenewalInterestTransProdType.getSelectedIndex() > 0 && cboRenewalInterestTransProdType.getSelectedItem().equals("Cash")) {
            lblRenewalInterestTokenNo.setVisible(true);
            txtRenewalIntTokenNoVal.setVisible(true);
        }
    }
    private void btnRenewalIntCustomerIdFileOpenCrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenewalIntCustomerIdFileOpenCrActionPerformed
        // TODO add your handling code here:
        if (cboRenewalInterestTransProdType.getSelectedIndex() > 0) {
            callView("RENEWAL_INT_TRANS_ACC_NO");
        } else {
            ClientUtil.showAlertWindow("Product Type should not be empty...");
            return;
        }
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
        //Added BY Suresh
        setRenewalDetails();
    }//GEN-LAST:event_btnRenewalIntCustomerIdFileOpenCrActionPerformed

    private void btnRenewalCustomerIdFileOpenCrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenewalCustomerIdFileOpenCrActionPerformed
        // TODO add your handling code here:
        if (cboRenewalProdType.getSelectedIndex() > 0) {
            callView("RENEWAL_CREDIT_ACC_NO");
        } else {
            ClientUtil.showAlertWindow("Product Type should not be empty...");
            return;
        }
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
    }//GEN-LAST:event_btnRenewalCustomerIdFileOpenCrActionPerformed

    private void cboRenewalProdTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalProdTypeActionPerformed
        // TODO add your handling code here:
        if (cboRenewalProdType.getSelectedIndex() > 0) {
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            String prodType = ((ComboBoxModel) cboRenewalProdType.getModel()).getKeyForSelected().toString();
            observable.setCbmRenewalProdId(prodType);
            if (prodType.equals("GL")) {
                cboRenewalProdId.setSelectedItem("");
                cboRenewalProdId.setEnabled(false);
                txtRenewalCustomerIdCr.setText("");
                txtRenewalCustomerIdCr.setEnabled(false);
                btnRenewalCustomerIdFileOpenCr.setEnabled(true);
                lblRenewalCustomerNameCr.setVisible(true);
                lblRenewalAccountNo.setText("Account Head Id");
                lblRenewalCustomerNameCr.setText("A/c Hd Description");
                lblRenewalCustomerNameCrValue.setText("");
                lblRenewalCustomerNameCrValue.setVisible(true);
            } else if (prodType.equals("TD") || prodType.equals("TL") || prodType.equals("AD")) {
                ClientUtil.showAlertWindow("Not Possible to credit");
                cboRenewalProdId.setSelectedItem("");
                cboRenewalProdId.setEnabled(false);
                btnRenewalCustomerIdFileOpenCr.setEnabled(false);
                txtRenewalCustomerIdCr.setText("");
                txtRenewalCustomerIdCr.setEnabled(false);
                lblRenewalCustomerNameCrValue.setText("");
                lblRenewalCustomerNameCr.setVisible(true);
                return;
            } else if (prodType.equals("RM")) {
                cboRenewalProdId.setSelectedItem("");
                cboRenewalProdId.setEnabled(true);
                panNewCustomerNO.setEnabled(true);
                txtRenewalCustomerIdCr.setText("");
                txtRenewalCustomerIdCr.setEnabled(true);
                btnRenewalCustomerIdFileOpenCr.setEnabled(false);
                lblRenewalAccountNo.setText("Favouring Name");
                lblRenewalCustomerNameCr.setText("Favouring Name");
                lblRenewalCustomerNameCr.setVisible(false);
                lblRenewalCustomerNameCrValue.setVisible(false);
            } else {
                cboRenewalProdId.setSelectedItem("");
                cboRenewalProdId.setEnabled(true);
                lblRenewalAccountNo.setText("Account No");
                btnRenewalCustomerIdFileOpenCr.setEnabled(true);
                lblRenewalCustomerNameCr.setText("Customer Name");
                lblRenewalCustomerNameCr.setVisible(true);
                lblRenewalCustomerNameCrValue.setVisible(true);
                lblRenewalCustomerNameCrValue.setText("");
                txtRenewalCustomerIdCr.setText("");
                txtRenewalCustomerIdCr.setEnabled(false);
            }
            //            if(!prodType.equals("RM")){
            cboRenewalProdId.setModel(observable.getCbmRenewalProdId());
            if (!prodType.equals("GL") && cboRenewalProdId.getSelectedItem().equals("")) {
                cboRenewalProdId.setSelectedItem(observable.getCboRenewalProdId());
            }
            //            }else
            //                cboRenewalProdId.setSelectedItem("PAY ORDR");
        }
    }//GEN-LAST:event_cboRenewalProdTypeActionPerformed
    private StringBuffer msgPeriodMultiples() {
        StringBuffer strBMsg = new StringBuffer();
        strBMsg.append(" The Deposit period should be in Multiples of ");
        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdDetails.get("PERIOD_MULTIPLES"))));
        return strBMsg;
    }
    private void cboRenewalInterestTransProdTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalInterestTransProdTypeActionPerformed
        // TODO add your handling code here:
        if (cboRenewalInterestTransProdType.getSelectedIndex() > 0) {
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            String prodType = ((ComboBoxModel) cboRenewalInterestTransProdType.getModel()).getKeyForSelected().toString();
            observable.setCbmRenewalInterestTransProdId(prodType);
            if (prodType.equals("GL")) {
                cboRenewalInterestTransProdId.setSelectedItem("");
                cboRenewalInterestTransProdId.setEnabled(false);
                txtRenewalIntCustomerIdCr.setText("");
                lblAccountNo.setText("Account Head Id");
                lblRenewalInterestCustName.setText("A/c Hd Description");
                lblRenewalInterestCustNameVal.setText("");
                btnRenewalIntCustomerIdFileOpenCr.setEnabled(true);
            } else if (prodType.equals("TD") || prodType.equals("TL") || prodType.equals("AD") || prodType.equals("RM")) {
                ClientUtil.showAlertWindow("Not Possible to credit");
                cboRenewalInterestTransProdId.setSelectedItem("");
                cboRenewalInterestTransProdId.setEnabled(false);
                txtRenewalIntCustomerIdCr.setText("");
                lblRenewalInterestCustNameVal.setText("");
                btnRenewalIntCustomerIdFileOpenCr.setEnabled(false);
                return;
            } else {
                cboRenewalInterestTransProdId.setSelectedItem("");
                cboRenewalInterestTransProdId.setEnabled(true);
                lblAccountNo.setText("Account No");
                lblRenewalInterestCustName.setText("Customer Name");
                btnRenewalIntCustomerIdFileOpenCr.setEnabled(true);
                txtRenewalIntCustomerIdCr.setEnabled(false);
                txtRenewalIntCustomerIdCr.setText("");
                lblRenewalInterestCustNameVal.setText("");
            }
            //            if(!prodType.equals("RM")){
            cboRenewalInterestTransProdId.setModel(observable.getCbmRenewalInterestTransProdId());
            if (!prodType.equals("GL") && cboRenewalInterestTransProdId.getSelectedItem().equals("")) {
                cboRenewalInterestTransProdId.setSelectedItem(observable.getCboRenewalInterestTransProdId());
            }
            //            }else
            //                cboRenewalInterestTransProdId.setSelectedItem("PAY ORDR");
        }
    }//GEN-LAST:event_cboRenewalInterestTransProdTypeActionPerformed

    private void validationForExtensionDepSubAccinfo() {
        //---If it is not in Renewal mode , check for all the validations , else don't validate
        if (viewType != ClientConstants.VIEW_TYPE_EXTENSION && CommonUtil.convertObjToStr(renewdDepNo).length() == 0) {
            //--- Check for the period whether it is in expected Period of multiples.
            int retPerMul = chkPeriodMultiplesofExtension();
            //--- If it is not the expected Period of multiples, then add the message
            if (retPerMul == -1) {
                msgStrB.append(msgPeriodMultiples());
                msgStrB.append("\n");
            }
            //--- Check for the period whether it is betweeen the max and min period.
            getExtensionPeriod();
            //--- If it is not between the period specified, then add the message
            if (!observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                if (!((period <= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD")))) && period >= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD"))))) {
                    msgStrB.append(msgMinMaxPeriod());
                    msgStrB.append("\n");
                }
            }
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                if (!((period <= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD"))))
                        && period >= (Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD"))) - 5))) {
                    msgStrB.append(msgMinMaxPeriod());
                    msgStrB.append("\n");
                }
            }
            //--- Check for the amount whether it is betweeen the max and min dep amt. //--- and to find whether it is in the accpeted multiples.
            double amt = 0.0;
            double maxAmt = 0.0;
            double minAmt = 0.0;
            double multAmt = 0.0;
            if (txtExtensionDepositAmount.getText().length() > 0) {
                amt = Double.parseDouble(txtExtensionDepositAmount.getText());
                maxAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_AMT")));
                minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
                multAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("AMT_MULTIPLES")));
            }
            //--- If it is not between the amount specified, then add the message
            if (!(amt >= minAmt && amt <= maxAmt)) {
                if (!observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                    msgStrB.append(msgMinMaxAmt());
                    msgStrB.append("\n");
                }
            }
        }
        //--- To check whether the Rate of Interst is set or not
        double retInt = 0;
        //        retInt = observable.setExtensionRenewalRateOfInterset(null);
    }
    private void cboRenewalDepTransProdTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalDepTransProdTypeActionPerformed
        // TODO add your handling code here:
        if (cboRenewalDepTransProdType.getSelectedIndex() > 0) {
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            String prodType = ((ComboBoxModel) cboRenewalDepTransProdType.getModel()).getKeyForSelected().toString();
            observable.setCbmRenewalDepTransProdId(prodType);
            if (prodType.equals("GL")) {
                cboRenewalDepTransProdId.setSelectedItem("");
                cboRenewalDepTransProdId.setEnabled(false);
                txtRenewalDepCustomerIdCr.setText("");
                lblAccountNo.setText("Account Head Id");
                lblRenewalDepositTransCustName.setText("A/c Hd Description");
                btnRenewalDepCustomerIdFileOpenCr.setEnabled(true);
                txtRenewalDepCustomerIdCr.setText("");
                lblRenewalCustNameValue.setText("");
            } else if (prodType.equals("TD") || prodType.equals("TL") || prodType.equals("AD") || prodType.equals("RM")) {
                ClientUtil.showAlertWindow("Not Possible to credit");
                cboRenewalDepTransProdId.setSelectedItem("");
                cboRenewalDepTransProdId.setEnabled(false);
                txtRenewalDepCustomerIdCr.setText("");
                lblRenewalCustNameValue.setText("");
                btnRenewalDepCustomerIdFileOpenCr.setEnabled(false);
                return;
            } else {
                cboRenewalDepTransProdId.setSelectedItem("");
                cboRenewalDepTransProdId.setEnabled(true);
                lblAccountNo.setText("Account No");
                lblRenewalDepositTransCustName.setText("Customer Name");
                txtRenewalDepCustomerIdCr.setText("");
                lblRenewalCustNameValue.setText("");
                btnRenewalDepCustomerIdFileOpenCr.setEnabled(true);
                txtRenewalDepCustomerIdCr.setEnabled(false);
            }
            //            if(!prodType.equals("RM")){
            cboRenewalDepTransProdId.setModel(observable.getCbmRenewalDepTransProdId());
            if (!prodType.equals("GL") && cboRenewalDepTransProdId.getSelectedItem().equals("")) {
                cboRenewalDepTransProdId.setSelectedItem(observable.getCboRenewalDepTransProdId());
            }
            //            }else
            //                cboRenewalDepTransProdId.setSelectedItem("PAY ORDR");
        }
    }//GEN-LAST:event_cboRenewalDepTransProdTypeActionPerformed
    private void validationForRenewalDepSubAccinfo() {
        //---If it is not in Renewal mode , check for all the validations , else don't validate
        if (viewType != ClientConstants.VIEW_TYPE_RENEW && CommonUtil.convertObjToStr(renewdDepNo).length() == 0) {
            //--- Check for the period whether it is in expected Period of multiples.
            int retPerMul = chkPeriodMultiplesofRenewal();
            //--- If it is not the expected Period of multiples, then add the message
            if (retPerMul == -1) {
                msgStrB.append(msgPeriodMultiples());
                msgStrB.append("\n");
            }
            //--- Check for the period whether it is betweeen the max and min period.
            getRnewalPeriod();
            //--- If it is not between the period specified, then add the message
            if (!observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                validationOfMaxMinPeriodRenewal();
                //                if(!((period<=Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD")))) && period>=Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD"))))){
                //                    msgStrB.append(msgMinPeriodRenewal());
                //                    msgStrB.append("\n");
                //                }
            }
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                if (!((period <= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD"))))
                        && period >= (Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD"))) - 5))) {
                    msgStrB.append(msgMinPeriodRenewal());
                    msgStrB.append("\n");
                }
            }
            //--- Check for the amount whether it is betweeen the max and min dep amt.
            //--- and to find whether it is in the accpeted multiples.
            double amt = 0.0;
            double maxAmt = 0.0;
            double minAmt = 0.0;
            double multAmt = 0.0;
            if (txtDepositAmount.getText().length() > 0) {
                amt = Double.parseDouble(txtRenewalDepositAmount.getText());
                maxAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_AMT")));
                minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
                multAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("AMT_MULTIPLES")));
            }
            //--- If it is not between the amount specified, then add the message
            if (!(amt >= minAmt && amt <= maxAmt)) {
                if (!observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                    msgStrB.append(msgMinMaxAmt());
                    msgStrB.append("\n");
                }
            }
        }
        //--- To check whether the Rate of Interst is set or not
        double retInt = 0;
        retInt = observable.setRenewalRateOfInterset(null);
    }
    private void btnRenewalDepSubNoAccSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenewalDepSubNoAccSaveActionPerformed
        // TODO add your handling code here:
        updateOBFields();
        observable.intWarnMsg = "";
        if (!flPtWithoutPeriod) {
            validationForRenewalDepSubAccinfo();
        }
        final String depSubNoMandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(), panNewInput);
        if (!txtRenewalPeriodOfDeposit_Months.getText().equals("") || !txtRenewalPeriodOfDeposit_Years.getText().equals("")
                || !txtRenewalPeriodOfDeposit_Days.getText().equals("")) {
            withoutvisitingScreen = true;
            String renewalprodId = ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected().toString();
            String renewalCategory = ((ComboBoxModel) cboRenewalDepositCategory.getModel()).getKeyForSelected().toString();
            String installType = ((ComboBoxModel) cboRenewalInterestPaymentMode.getModel()).getKeyForSelected().toString();
            String prodType = ((ComboBoxModel) cboRenewalProdType.getModel()).getKeyForSelected().toString();
            String prodId = "";
            if (prodType != null && !prodType.equals("") && !prodType.equals("GL")) {
                prodId = ((ComboBoxModel) cboRenewalProdId.getModel()).getKeyForSelected().toString();
            }
            String renewalDepMode = ((ComboBoxModel) cboRenewalDepTransMode.getModel()).getKeyForSelected().toString();
            String renewalDepProdType = ((ComboBoxModel) cboRenewalDepTransProdType.getModel()).getKeyForSelected().toString();
            String renewalDepProdId = "";
            if (renewalDepProdType != null && !renewalDepProdType.equals("") && !renewalDepProdType.equals("GL")) {
                renewalDepProdId = ((ComboBoxModel) cboRenewalDepTransProdId.getModel()).getKeyForSelected().toString();
            }

            String renewalIntMode = ((ComboBoxModel) cboRenewalInterestTransMode.getModel()).getKeyForSelected().toString();
            String renewalIntProdType = ((ComboBoxModel) cboRenewalInterestTransProdType.getModel()).getKeyForSelected().toString();
            String renewalIntProdId = "";
            if (renewalIntProdType != null && !renewalIntProdType.equals("") && !renewalIntProdType.equals("GL")) {
                renewalIntProdId = ((ComboBoxModel) cboRenewalInterestTransProdId.getModel()).getKeyForSelected().toString();
            }
            HashMap schemeMap = new HashMap();
            //            renewalProd = false;
            schemeMap.put("PROD_ID", ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected());
            List lstScheme = ClientUtil.executeQuery("getSchemeIntroDate", schemeMap);
            if (lstScheme != null && lstScheme.size() > 0) {
                schemeMap = (HashMap) lstScheme.get(0);
                Date schemeDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(schemeMap.get("SCHEME_INTRO_DT")));
                Date closedDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(schemeMap.get("SCHEME_CLOSING_DT")));
                schemeIntroDt = (Date) currDt.clone();
                schemeCloseDt = (Date) currDt.clone();
                if (closedDt != null && closedDt.getDate() > 0) {
                    schemeCloseDt.setDate(closedDt.getDate());
                    schemeCloseDt.setMonth(closedDt.getMonth());
                    schemeCloseDt.setYear(closedDt.getYear());
                    Date curr_Dt = (Date) currDt.clone();
                    if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW && (DateUtil.dateDiff(schemeCloseDt, curr_Dt) > 0)) {
                        ClientUtil.showAlertWindow("This Product is already Closed on " + " "
                                + DateUtil.getStringDate(schemeCloseDt) + " " + "Please Change the ProductId...");
                        return;
                    }
                }
                if (schemeDt != null && schemeDt.getDate() > 0) {
                    schemeIntroDt.setDate(schemeDt.getDate());
                    schemeIntroDt.setMonth(schemeDt.getMonth());
                    schemeIntroDt.setYear(schemeDt.getYear());
                }
            }
            Date curr_Dt = (Date) currDt.clone();//--- Adds the "Interst Rate Not Set Message" if it is not set.
            if (observable.intWarnMsg != null) {
                if (observable.intWarnMsg.length() > 0) {
                    msgStrB.append(observable.intWarnMsg);
                    msgStrB.append("\n");
                    observable.intWarnMsg = null;
                }
            }
            double renewalPeriod = 0.0;
            renewalPeriod = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Years.getText()).doubleValue() * 360;
            renewalPeriod = renewalPeriod + CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Months.getText()).doubleValue() * 30;
            renewalPeriod = renewalPeriod + CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Days.getText()).doubleValue();
            double year = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Years.getText()).doubleValue();
            double month = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Months.getText()).doubleValue();
            double days = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Days.getText()).doubleValue();
            double per = year * 360 + month * 30 + days;
            double amt = Double.parseDouble(CommonUtil.convertObjToStr(txtRenewalDepositAmount.getText()));
            double maxAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_AMT")));
            double minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
            double multAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("AMT_MULTIPLES")));
            double multPeriod = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
            double balIntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
            double sbIntAmt = CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue();
            double totAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
            String strBehavesLikeNowSelected = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD());
            HashMap calcMap = new HashMap();
            java.util.Date depDt = DateUtil.getDateMMDDYYYY(tdtRenewalDateOfDeposit.getDateValue());
            calcMap.put("DEPOSIT_PERIOD_YY", txtRenewalPeriodOfDeposit_Years.getText());
            calcMap.put("DEPOSIT_PERIOD_MM", txtRenewalPeriodOfDeposit_Months.getText());
            calcMap.put("DEPOSIT_PERIOD_DD", txtRenewalPeriodOfDeposit_Days.getText());
            calcMap.put("DEPOSIT_DT", depDt);
            calcMap = observable.calculateMaturityDate(calcMap);
            Date matDate = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
//            java.util.Date currDate = currDt.clone();
            java.util.Date currDate = (Date) currDt.clone();
            Date matDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tdtRenewalMaturityDate.getDateValue()));
            String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(renewalprodId));
            String payFreq = ((ComboBoxModel) cboRenewalInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
            int freq = CommonUtil.convertObjToInt(payFreq);
            if (rdoRenewalCalender_Freq_No.isSelected() == false && rdoRenewalCalender_Freq_Yes.isSelected() == false
                    && freq == 0 && strBehavesLike.equals("FIXED")) {
                rdoRenewalCalender_Freq_No.setSelected(true);
            }
            if (renewalPeriod == 0) {
                ClientUtil.showAlertWindow("Period of Deposit Should be Proper Value... ");
                return;
            } else if (CommonUtil.convertObjToDouble(txtRenewalDepositAmount.getText()).doubleValue() == 0) {
                ClientUtil.showAlertWindow("Deposit Amount Should not be empty");
                return;
            } else if (strBehavesLike.equals("RECURRING")) {
                selectedDepSubNoRow = true;
                ClientUtil.showAlertWindow("Product cannot be renewed as Recurring...");
                return;
            } else if (strBehavesLike.equals("DAILY")) {
                selectedDepSubNoRow = true;
                ClientUtil.showAlertWindow("Product cannot be renewed as Daily...");
                return;
            } else //                if(strBehavesLike.equals("FIXED") && freq == 30 && renewalPeriod <360){
            if (strBehavesLike.equals("FIXED") && freq == 30 && renewalPeriod < 30) {
                ClientUtil.showAlertWindow("Not able to give Monthly Interest for this Period ");
                return;
            } //                 else if(strBehavesLike.equals("FIXED") && renewalPeriod<180 && (freq  == 90 || freq == 360 || freq == 180)){
            //                ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity... ");
            //                return;
            ////            }
            //                 else if(strBehavesLike.equals("FIXED") && renewalPeriod!=360 && renewalPeriod>=180 && renewalPeriod<=360 && freq == 360){
            //                ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity or Quaterly or Half Yearly... ");
            //                return;
            //            }else if(strBehavesLike.equals("FIXED") && renewalPeriod == 360 && freq  == 360){
            //                ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity or Monthly or Quaterly or Half Yearly... ");
            //                return;
            //            }else if(strBehavesLike.equals("FIXED") && days>0 && cboRenewalInterestPaymentFrequency.getSelectedItem().equals("Monthly")){
            //                ClientUtil.showAlertWindow("Enter Years and Months only.....");
            //                return;
            //            }
            //
            //
            else if (strBehavesLike.equals("FIXED") && renewalPeriod < 90 && freq == 90) {
                ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");

                return;
            } else if (strBehavesLike.equals("FIXED") && renewalPeriod < 180 && freq == 180) {
                if (renewalPeriod < 90) {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");

                    return;
                } else {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be monthly or  Quarterly ... ");

                    return;
                }
            } else if (strBehavesLike.equals("FIXED") && renewalPeriod < 360 && freq == 360) {
                if (renewalPeriod < 90) {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");

                    return;
                } else if (renewalPeriod < 180) {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly or Quarterly ... ");

                    return;
                } else {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly , Quarterly or HalfYearly...");

                    return;
                }
            } else if (strBehavesLike.equals("FIXED") && freq == 60 && renewalPeriod < 60) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 120 && renewalPeriod < 120) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 150 && renewalPeriod < 150) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 210 && renewalPeriod < 210) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            }
            if (strBehavesLike.equals("FIXED") && freq == 240 && renewalPeriod < 240) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 270 && renewalPeriod < 270) {
                ClientUtil.showAlertWindow("Not able to give  Interest for this Period ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 300 && renewalPeriod < 300) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 330 && renewalPeriod < 330) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboRenewalInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (renewalprodId.equals("")) {
                ClientUtil.showAlertWindow("Select Product Id...");
                return;
            } else if (renewalCategory.equals("")) {
                ClientUtil.showAlertWindow("Select Customer Category...");
                return;
            } else if (strBehavesLike.equals("FIXED")
                    && rdoRenewalAutoRenewal_Yes.isSelected() == true && rdoRenewalWith_intRenewal_No.isSelected() == true
                    && (installType == null || installType.equals("CASH") || prodType == null || txtRenewalCustomerIdCr.getText().length() == 0)) {
                ClientUtil.showAlertWindow("you have chosen Auto Renewal With out interest, Hence please Choose Intpay Mode as Transfer");
                return;
            } else if (rdoRenewalWithdrawing_Yes.isSelected() == false && rdoRenewalWithdrawing_No.isSelected() == false) {
                ClientUtil.showAlertWindow("Want to withdraw from this deposit? Select either Yes or No.");
                return;
            } else if (rdoRenewalWithdrawing_No.isSelected() == true && rdoRenewalAdding_Yes.isSelected() == false && rdoRenewalAdding_No.isSelected() == false) {
                ClientUtil.showAlertWindow("Want to add some amount to the deposit? Select either Yes or No.");
                return;
            } else if (rdoRenewalWithdrawing_Yes.isSelected() == true && CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue() == 0) {
                ClientUtil.showAlertWindow("Amount should not be Zero...");
                return;
            } else if (rdoRenewalWithdrawing_Yes.isSelected() == true && renewalDepMode.equals("")) {
                ClientUtil.showAlertWindow("Select the mode of withdrawal");
                return;
            } else if (TrueTransactMain.TOKEN_NO_REQ.equals("Y") && rdoRenewalWithdrawing_Yes.isSelected() == true && renewalDepMode.equals("CASH") && txtRenewalDepTransTokenNo.getText().length() == 0) {
                ClientUtil.showAlertWindow("Enter Token no...");
                return;
            } else if (rdoRenewalWithdrawing_Yes.isSelected() == true && renewalDepMode.equals("TRANSFER") && renewalDepProdType.equals("")) {
                ClientUtil.showAlertWindow("Select ProductType...");
                return;
            } else if (rdoRenewalWithdrawing_Yes.isSelected() == true && renewalDepMode.equals("TRANSFER") && !renewalDepProdType.equals("GL") && renewalDepProdId.equals("")) {
                ClientUtil.showAlertWindow("Select ProductId...");
                return;
            } else if (rdoRenewalWithdrawing_Yes.isSelected() == true && renewalDepMode.equals("TRANSFER") && txtRenewalDepCustomerIdCr.getText().length() == 0) {
                ClientUtil.showAlertWindow("Select Account Number...");
                return;
            } else if (rdoRenewalWithdrawing_No.isSelected() == true && rdoRenewalAdding_Yes.isSelected() == true && txtRenewalDepTransAmtValue.getText().length() == 0) {
                ClientUtil.showAlertWindow("Amount should not be empty...");
                return;
            } else if (rdoRenewalWithdrawingInt_Yes.isSelected() == false && rdoRenewalWithdrawingInt_No.isSelected() == false) {
                ClientUtil.showAlertWindow("Want to withdraw interest amount? Select either Yes or No.");
                return;
            } else if (rdoRenewalWithdrawingInt_Yes.isSelected() == true && CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue() == 0) {
                ClientUtil.showAlertWindow("Amount should not be Zero...");
                return;
            } else if (rdoRenewalAdding_Yes.isSelected() == true && CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue() == 0) {
                ClientUtil.showAlertWindow("Amount should not be Zero...");
                return;
                //            }else if(rdoRenewalWithdrawingInt_Yes.isSelected() == true && txtRenewalIntAmtValue.getText().length() == 0){
                //                ClientUtil.showAlertWindow("Amount should not be empty...");
                //                return;
            } else if (rdoRenewalWithdrawingInt_Yes.isSelected() == true && renewalIntMode.equals("")) {
                ClientUtil.showAlertWindow("Select the mode of withdrawal");
                return;
            } else if (TrueTransactMain.TOKEN_NO_REQ.equals("Y") && rdoRenewalWithdrawingInt_Yes.isSelected() == true && renewalIntMode.equals("CASH") && txtRenewalIntTokenNoVal.getText().length() == 0) {
                ClientUtil.showAlertWindow("Enter Token no...");
                return;
            } else if (rdoRenewalWithdrawingInt_Yes.isSelected() == true && renewalIntMode.equals("TRANSFER") && renewalIntProdType.equals("")) {
                ClientUtil.showAlertWindow("Select ProductType...");
                return;
            } else if (rdoRenewalWithdrawingInt_Yes.isSelected() == true && renewalIntMode.equals("TRANSFER") && !renewalIntProdType.equals("GL") && renewalIntProdId.equals("")) {
                ClientUtil.showAlertWindow("Select ProductId...");
                return;
            } else if (rdoRenewalWithdrawingInt_Yes.isSelected() == true && renewalIntMode.equals("TRANSFER") && txtRenewalIntCustomerIdCr.getText().length() == 0) {
                ClientUtil.showAlertWindow("Select Account Number...");
                return;
            } else if (strBehavesLike.equals("FIXED") && installType.equals("")) {
                ClientUtil.showAlertWindow("Select Payment Mode...");
                return;
            } else if (strBehavesLike.equals("FIXED") && installType.equals("TRANSFER") && prodType.equals("")) {
                ClientUtil.showAlertWindow("Select Product Type...");
                return;
            } else if (strBehavesLike.equals("FIXED") && installType.equals("TRANSFER") && !prodType.equals("GL") && prodId.equals("")) {
                ClientUtil.showAlertWindow("Select Product Id...");
                return;
            } else if (strBehavesLike.equals("FIXED") && installType.equals("TRANSFER") && (txtRenewalCustomerIdCr.getText().length() == 0)) {
                ClientUtil.showAlertWindow("Select Account Number...");
                return;
            } else if (strBehavesLike.equals("FIXED") && cboRenewalInterestPaymentFrequency.getSelectedItem().equals("")) {
                ClientUtil.showAlertWindow("Select Interest Payment Frequency...");
                return;
            } else if (DateUtil.dateDiff(schemeIntroDt, curr_Dt) < 0) {
                ClientUtil.showAlertWindow("This Product is Launched on " + " "
                        + DateUtil.getStringDate(schemeCloseDt) + " " + "Plz Change the ProductId...");
                return;
                //            }else if(renewalProd == true){
                //                ClientUtil.showAlertWindow("This Product is already Closed on "+" "+
                //                DateUtil.getStringDate(schemeCloseDt)+" "+"Please Change the ProductId...");
                //                cboProductId.setEnabled(true);
                //                return;
            } else if (strBehavesLike.equals("FIXED") && rdoRenewalCalender_Freq_Yes.isSelected() == false && rdoRenewalCalender_Freq_No.isSelected() == false) {
                ClientUtil.showAlertWindow("Select Calender frequency...");
                return;
            } else if (strBehavesLike.equals("FIXED") && rdoRenewalCalender_Freq_Yes.isSelected() == true
                    && (cboRenewalCalenderFreqDay.getSelectedIndex() == -1 || cboRenewalCalenderFreqDay.getSelectedIndex() == 0)) {
                ClientUtil.showAlertWindow("Select Calender Frequency Day...");
                return;
                //            }else if(strBehavesLike.equals("FIXED") && totAmt >=(balIntAmt+sbIntAmt)){
                //                ClientUtil.showAlertWindow("Withdrawing interest amount is exceeding total Interest amount...");
                //                return;
            } else if (txtRenewalPeriodOfDeposit_Years.getText().length() > 0 && txtRenewalPeriodOfDeposit_Months.getText().length() > 0
                    && year > 0 && month > 11) {
                txtRenewalPeriodOfDeposit_Months.requestFocus();
                ClientUtil.showAlertWindow("Month period should be less than 12 months...");
                return;
            } else if (txtRenewalPeriodOfDeposit_Months.getText().length() > 0 && txtRenewalPeriodOfDeposit_Days.getText().length() > 0
                    && (year == 0 && month > 0 && days > 29)) {
                txtRenewalPeriodOfDeposit_Days.requestFocus();
                ClientUtil.showAlertWindow("Days period should be less than 30 days...");
                return;
            } else if (txtRenewalPeriodOfDeposit_Months.getText().length() > 0 && txtRenewalPeriodOfDeposit_Days.getText().length() > 0
                    && (year > 0 && days > 29)) {
                txtRenewalPeriodOfDeposit_Days.requestFocus();
                ClientUtil.showAlertWindow("Days period should be less than 30 days...");
                return;
            } else if (amt <= minAmt) {
                ClientUtil.showAlertWindow("Amount is less than the minimum Deposit Amount"
                        + "\nMinimum Deposit Amount is Rs : " + minAmt);
                return;
            } else if (amt >= maxAmt) {
                ClientUtil.showAlertWindow("Amount is exceeding the maximum Deposit Amount"
                        + "\nMaximum Deposit Amount is Rs : " + CurrencyValidation.formatCrore(String.valueOf(maxAmt)));
                return;
            } else if (validationOfMaxMinPeriodRenewal()) {
                showMsg();
                msgStrB = new StringBuffer();
                observable.intWarnMsg = new String();
                schemeFlag = true;
                //            }else if(renewalChangePeriod()){
                //                cboRenewalDepositProdId.requestFocus();
                //            }else if(renewalCategory()){
                //                cboRenewalDepositCategory.requestFocus();
            } else if (renewalDays == false && renewalMonths == false && renewalYears == false) {
                ClientUtil.showAlertWindow("Visit Period of Deposit Column...");
                return;
            } else {
                if (strBehavesLike.equals("CUMMULATIVE")) {
                    cboRenewalInterestPaymentFrequency.setSelectedItem("Date of Maturity");
                    cboRenewalInterestPaymentFrequency.setEnabled(false);
                }
                renewaldepSubNoSave(); //--- Save the Data
                selectedDepSubNoRowRenewal = false;
                renewalMousePressScreen = false;
                renewaldownSave = true;
                renewalEnableDep = true;
                //                renewalProd = false;
                ClientUtil.enableDisable(panDepositDetails, false);
                ClientUtil.enableDisable(panNewDepositDetails, false);
                ClientUtil.enableDisable(panRenewalDepositTransDetails, false);
                ClientUtil.enableDisable(panRenewalInterestDetails, false);
                ClientUtil.enableDisable(panRenewalInterestCredit, false);
                if (rdoRenewalWithdrawing_No.isSelected() == true && rdoRenewalAdding_No.isSelected() == true) {
                    disableRenewalDeposit();
                    lblRenewalCustNameValue.setText("");
                    lblRenewalCustNameValue.setVisible(false);
                } else if (rdoRenewalWithdrawing_No.isSelected() == true && rdoRenewalAdding_Yes.isSelected() == true) {
//                    disableRenewalDeposit();
//                    lblRenewalCustNameValue.setText("");
//                    lblRenewalCustNameValue.setVisible(false);
                }
                if (rdoRenewalWithdrawingInt_No.isSelected() == true) {
                    disableRenewalInt();
                }
                btnRenewalDepCustomerIdFileOpenCr.setEnabled(false);
                btnRenewalIntCustomerIdFileOpenCr.setEnabled(false);
                btnRenewalDepSubNoAccSave.setEnabled(false);
            }
        } else {
            ClientUtil.showAlertWindow("Enter the Period of Deposit");
        }
    }//GEN-LAST:event_btnRenewalDepSubNoAccSaveActionPerformed

    private void tblRenewalDepSubNoAccInfoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRenewalDepSubNoAccInfoMousePressed
        // TODO add your handling code here:
        tblRenewalMousePressed();
        renewalDays = true;
    }//GEN-LAST:event_tblRenewalDepSubNoAccInfoMousePressed
    private void tblRenewalMousePressed() {
        if (!viewType.equals(ClientConstants.VIEW_TYPE_DELETE) && renewalMousePressScreen == false) {
            renewalMouseClick = true;
            selectedDepSubNoRowRenewal = true;
            firstClickedRenewalScreen = true;
            btnRenewalDepSubNoAccSave.setEnabled(true);
            updateOBFields();
            updateAccountInfo();
            btnRenewalDepSubNoAccSave.setEnabled(true);
            txtRenewalDepositAmount.setEnabled(false);
            //            btnDepSubNoAccSave.setEnabled(false);
            //            btnRenewalDepSubNoAccNew.setEnabled(false);
            ClientUtil.enableDisable(panRenewalInterestCredit, true);
            ClientUtil.enableDisable(panRenewalDepositTransDetails, true);
            ClientUtil.enableDisable(panRenewalInterestDetails, true);
            ClientUtil.enableDisable(panRenewalDepositDt, false);
            ClientUtil.enableDisable(panRenewalMaturityDt, true);
            ClientUtil.enableDisable(panFreqency, false);
            ClientUtil.enableDisable(panInterestCredit, false);
            tdtRenewalDateOfDeposit.setEnabled(false);
            tdtRenewalMaturityDate.setEnabled(false);
            txtRenewalRateOfInterest.setEnabled(false);
            txtRenewalDepositAmount.setEnabled(false);
            cboRenewalDepositCategory.setEnabled(true);
            cboRenewalInterestPaymentFrequency.setEnabled(true);
            rdoRenewalCalender_Freq_Yes.setEnabled(true);
            rdoRenewalCalender_Freq_No.setEnabled(true);
            txtRenewalPrintedOption.setEnabled(true);
            cboRenewalCalenderFreqDay.setEnabled(true);
            btnCustomerIdFileOpenCr.setEnabled(false);
            rdoRenewalMatAlert_report_Yes.setEnabled(true);
            rdoRenewalMatAlert_report_No.setEnabled(true);
            rdoRenewalAutoRenewal_Yes.setEnabled(true);
            rdoRenewalAutoRenewal_No.setEnabled(true);
            if (renewaldownSave == false) {
                cboRenewalDepositProdId.setSelectedItem(cboProductId.getSelectedItem());
                cboRenewalDepositCategory.setSelectedItem(cboCategory.getSelectedItem());
                cboRenewalInterestPaymentFrequency.setSelectedItem(cboInterestPaymentFrequency.getSelectedItem());
                cboRenewalInterestPaymentMode.setSelectedItem(cboInterestPaymentMode.getSelectedItem());
            }
//            int rowRenewcount = (int)(Integer.parseInt(CommonUtil.convertObjToStr(tblRenewalDepSubNoAccInfo.getValueAt(tblRenewalDepSubNoAccInfo.getSelectedRow(),0))));
            //Changed By Suresh
            int rowRenewcount = (int) (Integer.parseInt(CommonUtil.convertObjToStr(tblRenewalDepSubNoAccInfo.getValueAt(0, 0))));
            tblRenewalDepSubNoRowSelected((rowRenewcount - 1));
            cboProdType.setEnabled(false);
            cboProdId.setEnabled(false);
            btnCustomerIdFileOpenCr.setEnabled(false);
            ClientUtil.enableDisable(panMaturityDt, false);
            txtPeriodOfDeposit_Years.setEnabled(false);
            txtPeriodOfDeposit_Months.setEnabled(false);
            txtPeriodOfDeposit_Days.setEnabled(false);
            cboInterestPaymentFrequency.setEnabled(false);
            renewalEnable = true;
            renewalMousePressScreen = true;
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            double balIntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
            double SBintAmt = CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue();
            if ((balIntAmt + SBintAmt) == 0) {
                rdoRenewalWithdrawingInt_No.setSelected(true);
            }
            if (renewalEnableDep == true) {
                ClientUtil.enableDisable(panRenewalInterestCredit, true);
                ClientUtil.enableDisable(panRenewalDepositTransDetails, true);
                ClientUtil.enableDisable(panRenewalInterestDetails, true);
                ClientUtil.enableDisable(panRenewalMaturityDt, true);
                ClientUtil.enableDisable(panRenewalDepositDt, false);
                ClientUtil.enableDisable(panRenewalFreqency, true);
                txtRenewalRateOfInterest.setEnabled(false);
                tdtRenewalDateOfDeposit.setEnabled(false);
                tdtRenewalMaturityDate.setEnabled(false);
                txtRenewalDepositAmount.setEnabled(false);
                cboRenewalDepositCategory.setEnabled(true);
                cboRenewalInterestPaymentFrequency.setEnabled(true);
                btnCustomerIdFileOpenCr.setEnabled(false);
                ClientUtil.enableDisable(panMaturityDt, false);
                txtPeriodOfDeposit_Years.setEnabled(false);
                txtPeriodOfDeposit_Months.setEnabled(false);
                txtPeriodOfDeposit_Days.setEnabled(false);
                cboInterestPaymentFrequency.setEnabled(false);
                cboRenewalInterestPaymentModeActionPerformed(null);
                cboRenewalInterestTransModeActionPerformed(null);
                cboRenewalDepTransModeActionPerformed(null);
                double cashLimit = 0.0;
                HashMap limitMap = new HashMap();
                limitMap.put("DEPOSIT_NO", lblValRenewDep.getText());
                List lst = ClientUtil.executeQuery("getStatusForDeposit", limitMap);
                if (lst != null && lst.size() > 0) {
                    limitMap = (HashMap) lst.get(0);
                    lst = ClientUtil.executeQuery("getLimitAmountForDepProd", limitMap);
                    if (lst != null && lst.size() > 0) {
                        limitMap = (HashMap) lst.get(0);
                        cashLimit = CommonUtil.convertObjToDouble(limitMap.get("MAX_AMT_CASH")).doubleValue();
                    }
                }
                if (rdoRenewalWithdrawing_Yes.isSelected() == true) {
                    double enteredAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                    lblRenewalDepositTransMode.setVisible(true);
                    cboRenewalDepTransMode.setVisible(true);
                    if (enteredAmt > cashLimit) {
                        cboRenewalDepTransMode.setSelectedItem("Transfer");
                        cboRenewalDepTransMode.setEnabled(false);
                    } else {
                        //                     cboRenewalDepTransMode.setSelectedItem("");
                        cboRenewalDepTransMode.setEnabled(true);
                    }
                }
                //                if(rdoRenewalAdding_Yes.isSelected() == true){
                //                    long diff = DateUtil.dateDiff((Date)DateUtil.getDateMMDDYYYY(lblRenewalValPeriodRun.getText()), (Date)currDt.clone());
                //                    Date unLienDt = null;
                //                    if(diff >=observable.backDateFreq){
                //                        tdtRenewalDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(currDt.clone()));
                //                        unLienDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(currDt.clone()));
                //                    }else{
                //                        tdtRenewalDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(lblRenewalValPeriodRun.getText()));
                //                        unLienDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(lblRenewalValPeriodRun.getText()));
                //                    }
                //                    HashMap calcMap = new HashMap();
                //                    calcMap.put("DEPOSIT_DT",unLienDt);
                //                    calcMap.put("DEPOSIT_PERIOD_YY",txtRenewalPeriodOfDeposit_Years.getText());
                //                    calcMap.put("DEPOSIT_PERIOD_MM",txtRenewalPeriodOfDeposit_Months.getText());
                //                    calcMap.put("DEPOSIT_PERIOD_DD",txtRenewalPeriodOfDeposit_Days.getText());
                //                    calcMap = observable.calculateMaturityDate(calcMap);
                //                    tdtRenewalMaturityDate.setDateValue(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
                //                    observable.setRenewaltdtDateOfDeposit(CommonUtil.convertObjToStr(unLienDt));
                //                    observable.setRenewaltdtMaturityDate(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
                //                }
            }
            if (rdoRenewalWithdrawingInt_No.isSelected() == true) {
                cboRenewalInterestTransProdType.setVisible(false);
                cboRenewalInterestTransProdId.setVisible(false);
                txtRenewalIntCustomerIdCr.setVisible(false);
                btnRenewalIntCustomerIdFileOpenCr.setVisible(false);
                lblRenewalInterestTransProdType.setVisible(false);
                lblRenewalInterestTransProdId.setVisible(false);
                lblRenewalInterestTransAccNo.setVisible(false);
                lblRenewalInterestCustName.setVisible(false);
            }
            if (rdoRenewalWithdrawing_No.isSelected() == true && rdoRenewalAdding_No.isSelected() == true) {
                disableRenewalDeposit();
                lblRenewalCustNameValue.setText("");
                lblRenewalCustNameValue.setVisible(false);
            } else if (rdoRenewalWithdrawing_No.isSelected() == true && rdoRenewalAdding_Yes.isSelected() == true) {
//                disableRenewalDeposit();
//                lblRenewalCustNameValue.setText("");
//                lblRenewalCustNameValue.setVisible(false);
            }

            if (observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT) {
                renewalAuthorization();
            } else if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
                ClientUtil.enableDisable(panRenewalInterestDetails, false);
                ClientUtil.enableDisable(panRenewalDepositTransDetails, false);
                cboRenewalDepositCategory.setEnabled(true);
                ClientUtil.enableDisable(panRenewalMaturityDt, true);
                ClientUtil.enableDisable(panInterestCredit, true);
                txtRenewalRateOfInterest.setEnabled(false);
                tdtRenewalDateOfDeposit.setEnabled(false);
                tdtRenewalMaturityDate.setEnabled(false);
                txtRenewalDepositAmount.setEnabled(false);
                cboRenewalDepositCategory.setEnabled(true);
                btnRenewalDepSubNoAccSave.setEnabled(true);
                rdoRenewalCalender_Freq_Yes.setEnabled(true);
                rdoRenewalCalender_Freq_No.setEnabled(true);
                cboRenewalCalenderFreqDay.setEnabled(true);
                btnRenewalDepCustomerIdFileOpenCr.setEnabled(false);
                btnRenewalIntCustomerIdFileOpenCr.setEnabled(false);
                btnRenewalCustomerIdFileOpenCr.setEnabled(false);
                rdoRenewalMatAlert_report_Yes.setEnabled(true);
                rdoRenewalMatAlert_report_No.setEnabled(true);
                rdoRenewalAutoRenewal_Yes.setEnabled(true);
                rdoRenewalAutoRenewal_No.setEnabled(true);
                rdoRenewalWith_intRenewal_Yes.setEnabled(true);
                rdoRenewalWith_intRenewal_No.setEnabled(true);
                txtPanNumber.setEnabled(true);
                if (cboRenewalDepTransMode.getSelectedIndex() > 0 && cboRenewalDepTransProdType.getSelectedIndex() > 0 && cboRenewalDepTransProdType.getSelectedItem().equals("Remittance")) {
                    txtRenewalDepCustomerIdCr.setEnabled(true);
                    txtRenewalDepTransTokenNo.setEnabled(true);
                }
                if (cboRenewalInterestTransMode.getSelectedIndex() > 0 && cboRenewalInterestTransProdType.getSelectedIndex() > 0 && cboRenewalInterestTransProdType.getSelectedItem().equals("Remittance")) {
                    txtRenewalIntCustomerIdCr.setEnabled(true);
                    txtRenewalIntTokenNoVal.setEnabled(true);
                }
                String prodType = ((ComboBoxModel) cboRenewalDepTransProdType.getModel()).getKeyForSelected().toString();
                String intprodType = ((ComboBoxModel) cboRenewalInterestTransProdType.getModel()).getKeyForSelected().toString();
                if (cboRenewalDepTransProdType.getSelectedIndex() > 0 && prodType.equals("RM") && rdoRenewalWithdrawing_Yes.isSelected() == true) {
                    cboRenewalInterestTransMode.setVisible(false);
                    lblRenewalInterestTransMode.setVisible(false);
                    lblRenewalInterestCustName.setVisible(true);
                    lblRenewalInterestCustNameVal.setVisible(true);
                    lblRenewalInterestCustName.setText("Total Amount withdrawn ");
                    lblRenewalInterestCustNameVal.setText("" + (CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue()
                            + CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue()));
                } else if (cboRenewalDepTransMode.getSelectedIndex() > 0 && cboRenewalDepTransMode.getSelectedItem().equals("Cash")) {
                    lblRenewalDepositTransTokenNo.setVisible(true);
                    txtRenewalDepTransTokenNo.setVisible(true);
                }
                if (cboRenewalInterestTransProdType.getSelectedIndex() > 0 && intprodType.equals("RM") && rdoRenewalWithdrawingInt_Yes.isSelected() == true) {
                    cboRenewalInterestTransMode.setVisible(false);
                    lblRenewalInterestTransMode.setVisible(false);
                    lblRenewalInterestCustName.setVisible(true);
                    lblRenewalInterestCustNameVal.setVisible(true);
                    lblRenewalInterestCustName.setText("Total Amount withdrawn ");
                    if (rdoRenewalWithdrawing_Yes.isSelected() == false && rdoRenewalWithdrawingInt_Yes.isSelected() == true) {
                        lblRenewalInterestCustNameVal.setText("" + CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue());
                    }
                } else if (cboRenewalInterestTransProdType.getSelectedIndex() > 0 && cboRenewalInterestTransProdType.getSelectedItem().equals("Cash")) {
                    lblRenewalInterestTokenNo.setVisible(true);
                    txtRenewalIntTokenNoVal.setVisible(true);
                }
            }
            if (observable.getActionType() != ClientConstants.ACTIONTYPE_AUTHORIZE
                    || observable.getActionType() != ClientConstants.ACTIONTYPE_REJECT) {
                String renewalprodId = ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected().toString();
                String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(renewalprodId));
                if (!strBehavesLike.equals("FIXED")) {
                    cboRenewalInterestPaymentFrequency.setSelectedItem("Date of Maturity");
                    cboRenewalInterestPaymentFrequency.setEnabled(false);
                    lblRenewalCalenderFreqDate.setVisible(false);
                    cboRenewalCalenderFreqDay.setVisible(false);
                } else {
                    cboRenewalInterestPaymentFrequency.setEnabled(true);
                    String prodId = ((ComboBoxModel) cboRenewalInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
                    int freq = CommonUtil.convertObjToInt(prodId);
                    if (strBehavesLike.equals("FIXED") && freq == 0) {
                        rdoRenewalCalender_Freq_No.setSelected(true);
                        lblRenewalCalenderFreq.setVisible(false);
                        rdoRenewalCalender_Freq_No.setVisible(false);
                        rdoRenewalCalender_Freq_Yes.setVisible(false);
                        cboRenewalCalenderFreqDay.setVisible(false);
                        lblRenewalCalenderFreqDate.setVisible(false);
                    } else if (strBehavesLike.equals("FIXED") && freq != 0) {
                        lblRenewalCalenderFreq.setVisible(true);
                        rdoRenewalCalender_Freq_No.setVisible(true);
                        rdoRenewalCalender_Freq_Yes.setVisible(true);
                        if (rdoRenewalCalender_Freq_Yes.isSelected() == true) {
                            cboRenewalCalenderFreqDay.setVisible(true);
                            lblRenewalCalenderFreqDate.setVisible(true);
                        } else if (rdoRenewalCalender_Freq_No.isSelected() == true) {
                            lblRenewalCalenderFreq.setVisible(true);
                            rdoRenewalCalender_Freq_Yes.setVisible(true);
                            rdoRenewalCalender_Freq_No.setVisible(true);
                        }
                    }
                }
            }
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW_MODE
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT) {
                ClientUtil.enableDisable(panAccountInformationLeftPanel, false);
                ClientUtil.enableDisable(panInput, false);
                ClientUtil.enableDisable(panFreqency, false);
                ClientUtil.enableDisable(panRenewalDepositTransDetails, false);
                ClientUtil.enableDisable(panRenewalMaturityDt, false);
                ClientUtil.enableDisable(panRenewalInterestCredit, false);
                ClientUtil.enableDisable(panRenewalFreqency, false);
                cboRenewalInterestPaymentFrequency.setEnabled(false);
            }
            renewalMouseClick = false;
        } else {
//            ClientUtil.showAlertWindow("Cancel...");
            return;
        }
    }

    private void renewalSbInterestCalculations() {
        HashMap calculationMap = new HashMap();
        long diff = DateUtil.dateDiff((Date) DateUtil.getDateMMDDYYYY(lblRenewalValPeriodRun.getText()), (Date) currDt.clone());
        if (diff >= observable.backDateFreq) {
            calculationMap.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(lblRenewalValPeriodRun.getText()));
            calculationMap.put("TO_DAY_DT", currDt.clone());
            calculationMap.put("DEPOSIT_AMT", String.valueOf(observable.matAmount));
            calculationMap.put("PERIOD", new Double(diff));
            calculationMap.put("DEPOSIT_PERIOD_DD", txtRenewalPeriodOfDeposit_Days.getText());
            calculationMap.put("DEPOSIT_PERIOD_MM", txtRenewalPeriodOfDeposit_Months.getText());
            calculationMap.put("DEPOSIT_PERIOD_YY", txtRenewalPeriodOfDeposit_Years.getText());
            calculationMap = observable.simpleInterestCalculation(calculationMap);
            sbAmount = CommonUtil.convertObjToDouble(calculationMap.get("CALC_AMT")).doubleValue();
        } else {
            sbAmount = 0.0;
        }
        lblRenewalSBIntAmtVal.setText(String.valueOf(sbAmount));
        observable.setRenewalSBIntAmtVal(CommonUtil.convertObjToStr(lblRenewalSBIntAmtVal.getText()));
        double sbIntAmt = CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue();
        double IntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
            if (IntAmt != 0) {
                sbIntAmt = sbIntAmt;
            }
        } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
            if (IntAmt < 0) {
                sbIntAmt = sbIntAmt;
            } else {
                sbIntAmt = sbIntAmt + IntAmt;
            }
        }
        lblRenewalInterestRepayAmtVal.setText(String.valueOf(sbIntAmt));
    }
    private void txtRenewalDepTransAmtValueFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRenewalDepTransAmtValueFocusLost
        // TODO add your handling code here:
        disableRenewalDeposit();
        lblRenewalDepositTransTokenNo.setVisible(false);
        txtRenewalDepTransTokenNo.setVisible(false);
        //        cboRenewalDepTransMode.setSelectedItem("");
        double enteredAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
        if (enteredAmt > 0) {
            double enteredIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
            double sbIntAmt = CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue();
            double IntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
            double totIntAmt = 0.0;
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                if (IntAmt != 0) {
                    sbIntAmt = sbIntAmt;
                }
            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                if (IntAmt < 0) {
                    sbIntAmt = sbIntAmt;
                } else {
                    sbIntAmt = sbIntAmt + IntAmt;
                }
            }
            if (rdoRenewalWithdrawing_Yes.isSelected() == true) {
                HashMap calculationMap = new HashMap();
                lblRenewalDepositTransMode.setText("Mode of Withdrawal");
                long diff = DateUtil.dateDiff((Date) DateUtil.getDateMMDDYYYY(lblRenewalValPeriodRun.getText()), (Date) currDt);
                if (diff >= observable.backDateFreq) {
                    calculationMap.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(lblRenewalValPeriodRun.getText()));
                    calculationMap.put("TO_DAY_DT", currDt.clone());
                    calculationMap.put("DEPOSIT_AMT", String.valueOf(observable.matAmount - enteredAmt));
                    calculationMap.put("PERIOD", new Double(diff));
                    calculationMap.put("DEPOSIT_PERIOD_DD", txtRenewalPeriodOfDeposit_Days.getText());
                    calculationMap.put("DEPOSIT_PERIOD_MM", txtRenewalPeriodOfDeposit_Months.getText());
                    calculationMap.put("DEPOSIT_PERIOD_YY", txtRenewalPeriodOfDeposit_Years.getText());
                    String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
                    String basedOnRate = "";
                    HashMap renewMap = new HashMap();
                    renewMap.put("PROD_ID", prodId);
                    List lst = ClientUtil.executeQuery("getDepositsBackDatedDay", renewMap);
                    if (lst != null && lst.size() > 0) {
                        renewMap = (HashMap) lst.get(0);
                        basedOnRate = CommonUtil.convertObjToStr(renewMap.get("INT_RATE_APPLIED_OVERDUE"));
                    }
                    HashMap calcMap = new HashMap();
                    if (basedOnRate.equals("") || basedOnRate.equals("Y")) {
                        calcMap = observable.simpleInterestCalculation(calculationMap);
                    } else if (!basedOnRate.equals("") && basedOnRate.equals("N")) {
                        calculationMap.put("RENEWAL_CALCULATION", renewMap);
                        calcMap = observable.depositRateInterestCalculation(calculationMap, prodId);
                    }
                    sbAmount = CommonUtil.convertObjToDouble(calcMap.get("CALC_AMT")).doubleValue();
                    lblRenewalSBIntAmtVal.setText(String.valueOf(sbAmount));
                    observable.setRenewalSBIntAmtVal(CommonUtil.convertObjToStr(lblRenewalSBIntAmtVal.getText()));
                }
                lblRenewalInterestRepayAmtVal.setText(String.valueOf(sbAmount + IntAmt));
                txtRenewalIntAmtValue.setText("0");
                //                if(enteredAmt>=observable.matAmount && rdoRenewalWithdrawing_Yes.isSelected() == true){
                //                    ClientUtil.showAlertWindow("Entered amount is Exceeds the Deposit amount");
                //                    lblRenewalDepositTransMode.setVisible(false);
                //                    cboRenewalDepTransMode.setVisible(false);
                //                    enteredAmt = 0;
                //                    txtRenewalDepTransAmtValue.setText(String.valueOf(enteredAmt));
                //                    return;
                //                }else if(enteredAmt>=observable.matAmount && rdoRenewalWithdrawing_Yes.isSelected() == true &&
                //                rdoRenewalWithdrawingInt_No.isSelected() == true){
                //                    ClientUtil.showAlertWindow("Entered amount is Exceeds the Deposit amount");
                //                    lblRenewalDepositTransMode.setVisible(false);
                //                    cboRenewalDepTransMode.setVisible(false);
                //                    enteredAmt = 0;
                //                    //                    if(rdoRenewalWithdrawing_Yes.isSelected() == true && rdoRenewalWithdrawingInt_No.isSelected() == true){
                //                    //                        double balance = observable.matAmount + enteredAmt + sbIntAmt;
                //                    //                        txtRenewalDepositAmount.setText(String.valueOf(balance));
                //                    //                    }else if(rdoRenewalWithdrawing_Yes.isSelected() == true && rdoRenewalWithdrawingInt_Yes.isSelected() == true){
                //                    //                        double balance = observable.matAmount + sbIntAmt - enteredAmt - enteredIntAmt;
                //                    //                        txtRenewalDepositAmount.setText(String.valueOf(balance));
                //                    //                    }
                //                    txtRenewalDepTransAmtValue.setText(String.valueOf(enteredAmt));
                //                    return;
                //                }else if(enteredAmt>=(observable.matAmount + sbIntAmt) && rdoRenewalWithdrawing_Yes.isSelected() == true &&
                //                rdoRenewalWithdrawingInt_No.isSelected() == true){
                //                    ClientUtil.showAlertWindow("Entered amount is Exceeds the Deposit amount");
                //                    lblRenewalDepositTransMode.setVisible(false);
                //                    cboRenewalDepTransMode.setVisible(false);
                //                    txtRenewalDepTransAmtValue.setText(String.valueOf(enteredAmt));
                //                    return;
                //                }else if(enteredAmt>=((observable.matAmount + sbIntAmt) - enteredIntAmt) && rdoRenewalWithdrawing_Yes.isSelected() == true &&
                //                rdoRenewalWithdrawingInt_Yes.isSelected() == true){
                //                    ClientUtil.showAlertWindow("Entered amount is Exceeds the Deposit amount");
                //                    lblRenewalDepositTransMode.setVisible(false);
                //                    cboRenewalDepTransMode.setVisible(false);
                //                }else{
                renewalWithdrawingDetails();
                lblRenewalCustNameValue.setText("");
                lblRenewalCustNameValue.setVisible(true);
                //added by jiby
                if (rdoRenewalWithdrawingInt_Yes.isSelected() == true) {

                    Double depAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                    Double renDepWithdrwAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                    Double renBalIntAmtVal = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
                    Double renIntAmtVal = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
                    // //system.out.println("CommonUtil.convertObjToStrdepAmt+renDepTransAmtrenBalIntAmtVarenIntAmtVal"+CommonUtil.convertObjToStr(depAmt+renDepTransAmt+(renBalIntAmtVal-renIntAmtVal)));
                    txtRenewalDepositAmount.setText(CommonUtil.convertObjToStr((depAmt - renDepWithdrwAmt) + (renBalIntAmtVal - renIntAmtVal)));

                } else if (rdoRenewalWithdrawingInt_No.isSelected() == true) {
                    Double depAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                    Double renDepWithdrwAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                    Double renBalIntAmtVal = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
                    // Double renIntAmtVal= CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
                    //  //system.out.println("CommonUtil.convertObjToStrdepAmt+renDepTransAmtrenBalIntAmtVarenIntAmtVal"+CommonUtil.convertObjToStr(depAmt+renDepTransAmt+renBalIntAmtVal));
                    txtRenewalDepositAmount.setText(CommonUtil.convertObjToStr((depAmt - renDepWithdrwAmt) + renBalIntAmtVal));

                }
                //////////////////////////////////////////////////////////////////////////////
            } else if (rdoRenewalAdding_Yes.isSelected() == true) {
                lblRenewalDepositTransMode.setVisible(true);
                lblRenewalDepositTransMode.setText("Mode of Add Amount");
                cboRenewalDepTransMode.setVisible(true);
                double transIntAmt = 0.0;
                double withdrawingIntAmt = 0.0;
                if (rdoRenewalWithdrawing_No.isSelected() == true) {
                    if (rdoRenewalAdding_Yes.isSelected()) {
                        if (rdoRenewalWithdrawingInt_Yes.isSelected() == true) {

                            //comm by jiby
//                            withdrawingIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
//                            totIntAmt = sbIntAmt;
//                            sbIntAmt = 0.0;
//                            double balance = observable.matAmount + enteredAmt + totIntAmt - withdrawingIntAmt;
//                            txtRenewalDepositAmount.setText(String.valueOf(balance));
                            //////////
                            //added by jiby
                            Double depAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                            Double renDepTransAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                            Double renBalIntAmtVal = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
                            Double renIntAmtVal = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
                            //system.out.println("CommonUtil.convertObjToStrdepAmt+renDepTransAmtrenBalIntAmtVarenIntAmtVal" + CommonUtil.convertObjToStr(depAmt + renDepTransAmt + (renBalIntAmtVal - renIntAmtVal)));
                            txtRenewalDepositAmount.setText(CommonUtil.convertObjToStr(depAmt + renDepTransAmt + (renBalIntAmtVal - renIntAmtVal)));
                            ////////////////////////////////////
                        } else if (rdoRenewalWithdrawingInt_No.isSelected() == true) {
                            //comm by jiby
//                            totIntAmt = withdrawingIntAmt + sbIntAmt;
//                            double balance = observable.matAmount + enteredAmt + totIntAmt;
//                            txtRenewalDepositAmount.setText(String.valueOf(balance));
                            ///////////////////////////////////////////////
                            //added by jiby
                            Double depAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                            Double renDepTransAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                            Double renBalIntAmtVal = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
                            // Double renIntAmtVal= CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
                            //system.out.println("CommonUtil.convertObjToStrdepAmt+renDepTransAmtrenBalIntAmtVarenIntAmtVal" + CommonUtil.convertObjToStr(depAmt + renDepTransAmt + renBalIntAmtVal));
                            txtRenewalDepositAmount.setText(CommonUtil.convertObjToStr(depAmt + renDepTransAmt + renBalIntAmtVal));
                            //////////////////////////////////////////////
                        } else if (rdoRenewalWithdrawingInt_Yes.isSelected() == false && rdoRenewalWithdrawingInt_No.isSelected() == false) {
                            totIntAmt = 0.0;
                            sbIntAmt = 0.0;
                            double balance = observable.matAmount + enteredAmt - totIntAmt - withdrawingIntAmt;
                            txtRenewalDepositAmount.setText(String.valueOf(balance));
                        }
                        lblRenewalCustNameValue.setText("");
                        lblRenewalCustNameValue.setVisible(true);
                    }
                }
            }
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            //Added BY Suresh
            setRenewalDetails();
        } else {
            ClientUtil.showAlertWindow("Amount Should not be empty...");
            return;
        }
    }//GEN-LAST:event_txtRenewalDepTransAmtValueFocusLost
    private void renewalWithdrawingDetails() {
        double cashLimit = 0.0;
        HashMap limitMap = new HashMap();
        limitMap.put("DEPOSIT_NO", lblValRenewDep.getText());
        List lst = ClientUtil.executeQuery("getStatusForDeposit", limitMap);
        if (lst != null && lst.size() > 0) {
            limitMap = (HashMap) lst.get(0);
            lst = ClientUtil.executeQuery("getLimitAmountForDepProd", limitMap);
            if (lst != null && lst.size() > 0) {
                limitMap = (HashMap) lst.get(0);
                cashLimit = CommonUtil.convertObjToDouble(limitMap.get("MAX_AMT_CASH")).doubleValue();
            }
        }
        HashMap depProdRenewalDetails = observable.getAcctHeadForProdRenewal();
        double enteredIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
        double enteredAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
        double sbIntAmt = CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue();
        double minAmt = CommonUtil.convertObjToDouble(depProdRenewalDetails.get("MIN_DEPOSIT_AMT")).doubleValue();
        double IntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
        if (rdoRenewalWithdrawing_Yes.isSelected() == true && rdoRenewalWithdrawingInt_No.isSelected() == true) {
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                if (IntAmt != 0) {
                    sbIntAmt = sbIntAmt;
                }
            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                if (IntAmt < 0) {
                    sbIntAmt = sbIntAmt;
                } else {
                    sbIntAmt = sbIntAmt + IntAmt;
                }
            }
            lblRenewalInterestRepayAmtVal.setText(String.valueOf(sbIntAmt));
            double balance = observable.matAmount - enteredAmt + sbIntAmt;
            if (balance <= 0) {
                ClientUtil.showAlertWindow("Entered amount is Exceeding the Deposit amount");
                txtRenewalDepTransAmtValue.setText(String.valueOf("0"));
                renewalSbInterestCalculations();
                return;
            } else {
                if (minAmt > balance) {
                    ClientUtil.showAlertWindow("Entered amount is Exceeding the Minimum Deposit amount," + " \n"
                            + "Leave Minimum Deposit Amount of Rs :" + minAmt);
                    renewalSbInterestCalculations();
                    txtRenewalDepTransAmtValue.setText(String.valueOf("0"));
                    lblRenewalDepositTransMode.setVisible(false);
                    cboRenewalDepTransMode.setVisible(false);
                } else {
                    lblRenewalDepositTransMode.setVisible(true);
                    cboRenewalDepTransMode.setVisible(true);
                    if (enteredAmt > cashLimit) {
                        cboRenewalDepTransMode.setSelectedItem("Transfer");
                        cboRenewalDepTransMode.setEnabled(false);
                    } else {
                        cboRenewalDepTransMode.setSelectedItem("");
                        cboRenewalDepTransMode.setEnabled(true);
                    }
                    txtRenewalDepositAmount.setText(String.valueOf(balance));
                }
            }
        } else if (rdoRenewalWithdrawing_Yes.isSelected() == true && rdoRenewalWithdrawingInt_Yes.isSelected() == true) {
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                if (IntAmt != 0) {
                    sbIntAmt = sbIntAmt;
                }
            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                if (IntAmt < 0) {
                    sbIntAmt = sbIntAmt;
                } else {
                    sbIntAmt = sbIntAmt + IntAmt;
                }
            }
            lblRenewalInterestRepayAmtVal.setText(String.valueOf(sbIntAmt));
            double balance = observable.matAmount + sbIntAmt - enteredAmt - enteredIntAmt;
            if (balance <= 0) {
                ClientUtil.showAlertWindow("Entered amount is Exceeding the Deposit amount");
                txtRenewalDepTransAmtValue.setText(String.valueOf("0"));
                renewalSbInterestCalculations();
                return;
            } else {
                if (minAmt > balance) {
                    ClientUtil.showAlertWindow("Entered amount is Exceeding the Minimum Deposit amount," + " \n"
                            + "Leave Minimum Deposit Amount of Rs :" + minAmt);
                    renewalSbInterestCalculations();
                    txtRenewalDepTransAmtValue.setText(String.valueOf("0"));
                    lblRenewalDepositTransMode.setVisible(false);
                    cboRenewalDepTransMode.setVisible(false);
                } else {
                    lblRenewalDepositTransMode.setVisible(true);
                    cboRenewalDepTransMode.setVisible(true);
                    if (enteredAmt > cashLimit) {
                        cboRenewalDepTransMode.setSelectedItem("Transfer");
                        cboRenewalDepTransMode.setEnabled(false);
                    } else {
                        cboRenewalDepTransMode.setSelectedItem("");
                        cboRenewalDepTransMode.setEnabled(true);
                    }
                    txtRenewalDepositAmount.setText(String.valueOf(balance));
                }
            }
        } else if (rdoRenewalWithdrawing_Yes.isSelected() == true && rdoRenewalWithdrawingInt_Yes.isSelected() == false
                && rdoRenewalWithdrawingInt_No.isSelected() == false) {
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                if (IntAmt != 0) {
                    sbIntAmt = sbIntAmt;
                }
            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                if (IntAmt < 0) {
                    sbIntAmt = sbIntAmt;
                } else {
                    sbIntAmt = sbIntAmt + IntAmt;
                }
            }
            lblRenewalInterestRepayAmtVal.setText(String.valueOf(sbIntAmt));
            double balance = observable.matAmount - enteredAmt - enteredIntAmt;
            if (balance <= 0) {
                ClientUtil.showAlertWindow("Entered amount is Exceeding the Deposit amount");
                txtRenewalDepTransAmtValue.setText(String.valueOf("0"));
                renewalSbInterestCalculations();
                return;
            } else {
                if (minAmt > balance) {
                    ClientUtil.showAlertWindow("Entered amount is Exceeding the Minimum Deposit amount," + " \n"
                            + "Leave Minimum Deposit Amount of Rs :" + minAmt);
                    renewalSbInterestCalculations();
                    txtRenewalDepTransAmtValue.setText(String.valueOf("0"));
                    lblRenewalDepositTransMode.setVisible(false);
                    cboRenewalDepTransMode.setVisible(false);
                } else {
                    lblRenewalDepositTransMode.setVisible(true);
                    cboRenewalDepTransMode.setVisible(true);
                    if (enteredAmt > cashLimit) {
                        cboRenewalDepTransMode.setSelectedItem("Transfer");
                        cboRenewalDepTransMode.setEnabled(false);
                    } else {
                        cboRenewalDepTransMode.setSelectedItem("");
                        cboRenewalDepTransMode.setEnabled(true);
                    }
                    txtRenewalDepositAmount.setText(String.valueOf(balance));
                }
            }
        }
    }
    private void txtRenewalDepTransTokenNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRenewalDepTransTokenNoFocusLost
        // TODO add your handling code here:
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW) {
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            String tokenNo = CommonUtil.convertObjToStr(txtRenewalDepTransTokenNo.getText());
            if (!tokenNo.equals("")) {
                HashMap tokenWhereMap = new HashMap();

                // Separating Serias No and Token No
                char[] chrs = tokenNo.toCharArray();
                StringBuffer seriesNo = new StringBuffer();
                int i = 0;
                for (int j = chrs.length; i < j; i++) {
                    if (Character.isDigit(chrs[i])) {
                        break;
                    } else {
                        seriesNo.append(chrs[i]);
                    }
                }

                tokenWhereMap.put("SERIES_NO", seriesNo.toString());
                tokenWhereMap.put("TOKEN_NO", CommonUtil.convertObjToInt(tokenNo.substring(i)));
                tokenWhereMap.put("USER_ID", ProxyParameters.USER_ID);
                tokenWhereMap.put("BRANCH_ID", ProxyParameters.BRANCH_ID);
                tokenWhereMap.put("CURRENT_DT", currDt.clone());

                List lst = ClientUtil.executeQuery("validateTokenNo", tokenWhereMap);

                if (((Integer) lst.get(0)).intValue() == 0) {
                    txtRenewalDepTransTokenNo.setText("");
                    ClientUtil.showMessageWindow("Token is invalid or not issued for you. Please verify.");
                }
            }
            //Added BY Suresh
            setRenewalDetails();
        }
    }//GEN-LAST:event_txtRenewalDepTransTokenNoFocusLost

    private void txtRenewalIntTokenNoValFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRenewalIntTokenNoValFocusLost
        // TODO add your handling code here:
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW) {
            String tokenNo = CommonUtil.convertObjToStr(txtRenewalIntTokenNoVal.getText());
            if (!tokenNo.equals("")) {
                HashMap tokenWhereMap = new HashMap();

                // Separating Serias No and Token No
                char[] chrs = tokenNo.toCharArray();
                StringBuffer seriesNo = new StringBuffer();
                int i = 0;
                for (int j = chrs.length; i < j; i++) {
                    if (Character.isDigit(chrs[i])) {
                        break;
                    } else {
                        seriesNo.append(chrs[i]);
                    }
                }

                tokenWhereMap.put("SERIES_NO", seriesNo.toString());
                tokenWhereMap.put("TOKEN_NO", CommonUtil.convertObjToInt(tokenNo.substring(i)));
                tokenWhereMap.put("USER_ID", ProxyParameters.USER_ID);
                tokenWhereMap.put("BRANCH_ID", ProxyParameters.BRANCH_ID);
                tokenWhereMap.put("CURRENT_DT", currDt.clone());

                List lst = ClientUtil.executeQuery("validateTokenNo", tokenWhereMap);

                if (((Integer) lst.get(0)).intValue() == 0) {
                    txtRenewalIntTokenNoVal.setText("");
                    ClientUtil.showMessageWindow("Token is invalid or not issued for you. Please verify.");
                }
            }
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            //Added BY Suresh
            setRenewalDetails();

        }
    }//GEN-LAST:event_txtRenewalIntTokenNoValFocusLost

    public void renew() {
        double newEnteredData = 0;
        double newdepositAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
        double balInt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
        double addDepositAmt = 0;
        double renDepWithDrwAmt = 0;
        double renewalInt = 0;
        if (rdoRenewalAdding_Yes.isSelected() && txtRenewalDepTransAmtValue.getText().length() > 0) {
            addDepositAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
        }
        if (rdoRenewalWithdrawing_Yes.isSelected() && txtRenewalDepTransAmtValue.getText().length() > 0) {
            renDepWithDrwAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
            //system.out.println("renDepWithDrwAmt" + renDepWithDrwAmt);
        }
        double renewalInterest = CommonUtil.convertObjToDouble(observable.getBalIntAmt()).doubleValue();
        //system.out.println("renewalInterestrenewalInterest" + renewalInterest);
        double depositAmt = CommonUtil.convertObjToDouble(txtRenewalDepositAmount.getText()).doubleValue();

        //double newdepositAmt=CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();

        if (!txtRenewalIntAmtValue.getText().toString().equals("")) {
            renewalInt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
        }

        //system.out.println("depositAmtdepositAmt" + depositAmt);
        if (renewalInterest < 0) {
            renewalInterest *= -1;
        }
        //system.out.println("newdepositAmt#" + newdepositAmt);
        //system.out.println("balInt#" + balInt);
        //system.out.println("renewalInt#" + renewalInt);

        txtRenewalDepositAmount.setText(String.valueOf((newdepositAmt - renDepWithDrwAmt) + (balInt - renewalInt) + addDepositAmt));
    }
    private void cboRenewalDepTransModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalDepTransModeActionPerformed
        // TODO add your handling code here:
        cboCreditRenewalDepDetails();
    }//GEN-LAST:event_cboRenewalDepTransModeActionPerformed

    private void cboRenewalInterestTransModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRenewalInterestTransModeActionPerformed
        // TODO add your handling code here:
        cboCreditRenewalIntDetails();
    }//GEN-LAST:event_cboRenewalInterestTransModeActionPerformed

    private void txtRenewalIntAmtValueFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRenewalIntAmtValueFocusLost
        // TODO add your handling code here:
        disableRenewalInt();
        cboRenewalInterestTransMode.setVisible(false);
        lblRenewalInterestTransMode.setVisible(false);
        //        cboRenewalInterestTransMode.setSelectedItem("");
        double enteredAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
        double enteredIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
        if (enteredIntAmt > 0) {
            double cashLimit = 0.0;
            HashMap limitMap = new HashMap();
            limitMap.put("DEPOSIT_NO", lblValRenewDep.getText());
            List lst = ClientUtil.executeQuery("getStatusForDeposit", limitMap);
            if (lst != null && lst.size() > 0) {
                limitMap = (HashMap) lst.get(0);
                lst = ClientUtil.executeQuery("getLimitAmountForDepProd", limitMap);
                if (lst != null && lst.size() > 0) {
                    limitMap = (HashMap) lst.get(0);
                    cashLimit = CommonUtil.convertObjToDouble(limitMap.get("MAX_AMT_CASH")).doubleValue();
                }
            }
            double sbIntAmt = CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue();
            double IntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
            //            if(observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative))
            //                sbIntAmt = sbIntAmt;
            //            else
            //                sbIntAmt = IntAmt + sbIntAmt;
            if (IntAmt < 0) {
                sbIntAmt = sbIntAmt;
            } else {
                sbIntAmt = sbIntAmt + IntAmt;
            }
            if (rdoRenewalWithdrawingInt_Yes.isSelected() == true) {
                if (enteredIntAmt > sbIntAmt) {
                    ClientUtil.showAlertWindow("Amount should not exceeds the total balance interest");
                    flagNw = 1;
                    txtRenewalIntAmtValue.setText(String.valueOf("0"));
                    if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative) && IntAmt > 0) {
                        sbIntAmt = sbIntAmt + IntAmt;
                    }
                    if (rdoRenewalWithdrawing_No.isSelected() == true) {
                        if (rdoRenewalAdding_Yes.isSelected() == true) {
                            double transAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                            double balance = observable.matAmount + transAmt + sbIntAmt;
                            txtRenewalDepositAmount.setText(String.valueOf(balance));
                        } else if (rdoRenewalAdding_No.isSelected()) {
                            double balance = observable.matAmount + sbIntAmt;
                            txtRenewalDepositAmount.setText(String.valueOf(balance));
                        }
                    } else if (rdoRenewalWithdrawing_Yes.isSelected() == true) {
                        double transAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                        if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative) && IntAmt > 0) {
                            sbIntAmt = sbIntAmt + IntAmt;
                        }
                        double balance = 0.0;
                        if (transAmt == 0) {
                            balance = observable.matAmount + sbIntAmt - enteredIntAmt;
                        } else {
                            balance = observable.matAmount - transAmt + sbIntAmt;
                        }
                        txtRenewalDepositAmount.setText(String.valueOf(balance));
                    }
                    return;
                } else {
                    cboRenewalInterestTransMode.setVisible(true);
                    lblRenewalInterestTransMode.setVisible(true);
                    if (rdoRenewalWithdrawing_No.isSelected() == true) {
                        if (rdoRenewalAdding_Yes.isSelected() == true) {
                            if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative) && IntAmt > 0) {
                                sbIntAmt = sbIntAmt + IntAmt;
                            }
                            double transAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                            double balance = observable.matAmount + transAmt + sbIntAmt - enteredIntAmt;
                            txtRenewalDepositAmount.setText(String.valueOf(balance));
                        } else if (rdoRenewalAdding_No.isSelected()) {
                            if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative) && IntAmt > 0) {
                                sbIntAmt = sbIntAmt + IntAmt;
                            }
                            double balance = observable.matAmount + sbIntAmt - enteredIntAmt;
                            txtRenewalDepositAmount.setText(String.valueOf(balance));
                        }
                    } else if (rdoRenewalWithdrawing_Yes.isSelected() == true) {
                        double transAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                        if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative) && IntAmt > 0) {
                            sbIntAmt = sbIntAmt + IntAmt;
                        }
                        double balance = 0.0;
                        if (transAmt == 0) {
                            balance = observable.matAmount + sbIntAmt - enteredIntAmt - transAmt;
                        } else {
                            balance = observable.matAmount - transAmt + sbIntAmt - enteredIntAmt;
                        }
                        txtRenewalDepositAmount.setText(String.valueOf(balance));
                        enteredAmt = enteredAmt + enteredIntAmt;
                        if (enteredAmt > cashLimit) {
                            if (cboRenewalDepTransMode.getSelectedItem().equals("Cash")) {
                                cboRenewalDepTransMode.setSelectedItem("Transfer");
                            }
                            cboRenewalInterestTransMode.setSelectedItem("Transfer");
                            cboRenewalDepTransMode.setEnabled(false);
                            cboRenewalInterestTransMode.setEnabled(false);
                        } else {
                            if (cboRenewalDepTransMode.getSelectedIndex() == 0) {
                                lblRenewalDepositTransProdType.setVisible(false);
                                cboRenewalDepTransProdType.setVisible(false);
                                lblRenewalDepositTransProdId.setVisible(false);
                                cboRenewalDepTransProdId.setVisible(false);
                                lblRenewalDepositTransAccNo.setVisible(false);
                                txtRenewalDepCustomerIdCr.setVisible(false);
                                btnRenewalDepCustomerIdFileOpenCr.setVisible(false);
                                lblRenewalDepositTransCustName.setVisible(false);
                                lblRenewalCustNameValue.setVisible(false);
                            }
                            cboRenewalInterestTransMode.setSelectedItem("");
                            cboRenewalInterestTransMode.setEnabled(true);
                            cboRenewalDepTransMode.setEnabled(true);
                        }
                    }
                }
            } else {
                cboRenewalInterestTransMode.setVisible(false);
                lblRenewalInterestTransMode.setVisible(false);
            }
            //            cboRenewalInterestTransMode.setSelectedItem("");
            //Added BY Suresh
            setRenewalDetails();
            //added by jiby

            if (rdoRenewalWithdrawingInt_Yes.isSelected()) {
                //system.out.println("working fine");
                if (flagNw != 1) {
                    renew();
                }
            }
            ////////////////////////////////////
        } else {
            ClientUtil.showAlertWindow("Amount Should not be empty...");
            return;
        }
    }//GEN-LAST:event_txtRenewalIntAmtValueFocusLost

    private void rdoRenewalWithdrawingInt_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalWithdrawingInt_NoActionPerformed
        // TODO add your handling code here:
        if (rdoRenewalWithdrawing_Yes.isSelected() == false && rdoRenewalWithdrawing_No.isSelected() == false) {
            ClientUtil.showAlertWindow("First Fill Renewal Deposit TransDetails...");
            rdgRenewalInterest.remove(rdoRenewalWithdrawingInt_Yes);
            rdgRenewalInterest.remove(rdoRenewalWithdrawingInt_No);
            rdoRenewalWithdrawingInt_No.setSelected(false);
            rdgRenewalInterest = new CButtonGroup();
            rdgRenewalInterest.add(rdoRenewalWithdrawingInt_Yes);
            rdgRenewalInterest.add(rdoRenewalWithdrawingInt_No);
            return;
        } else {
            panIntpayable.setVisible(true);
            observable.setRdoRenewalWithdrawingInt_No(rdoRenewalWithdrawingInt_No.isSelected());
            observable.setRdoRenewalWithdrawingInt_Yes(false);
            if (rdoRenewalWithdrawingInt_No.isSelected() == true && txtRenewalDepositAmount.getText().length() > 0) {
                txtRenewalIntTokenNoVal.setVisible(false);
                lblRenewalInterestTokenNo.setVisible(false);
                lblRenewalIntAmt.setVisible(false);
                txtRenewalIntAmtValue.setVisible(false);
                cboRenewalInterestTransMode.setVisible(false);
                lblRenewalInterestTransMode.setVisible(false);
                cboRenewalInterestTransProdType.setVisible(false);
                cboRenewalInterestTransProdId.setVisible(false);
                txtRenewalIntCustomerIdCr.setVisible(false);
                btnRenewalIntCustomerIdFileOpenCr.setVisible(false);
                lblRenewalInterestCustNameVal.setVisible(false);
                lblRenewalInterestCustName.setVisible(false);
                lblRenewalInterestTransAccNo.setVisible(false);
                lblRenewalInterestTransProdId.setVisible(false);
                lblRenewalInterestTransProdType.setVisible(false);
                double sbIntAmt = CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue();
                double IntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
                if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                    if (IntAmt != 0) {
                        sbIntAmt = sbIntAmt;
                    }
                } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                    if (IntAmt < 0) {
                        sbIntAmt = sbIntAmt;
                    } else {
                        sbIntAmt = sbIntAmt + IntAmt;
                    }
                }
                //Added By Suresh
                if (observable.productBehavesLike.equals("FLOATING_RATE")) {
                    sbIntAmt = sbIntAmt + IntAmt;
                }
                if (rdoRenewalWithdrawing_No.isSelected() == true) {
                    if (rdoRenewalAdding_Yes.isSelected() == true) {
                        double transAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                        double balance = observable.matAmount + transAmt + sbIntAmt; //commented by abi
//                         double balance = observable.matAmount +  sbIntAmt;
                        txtRenewalDepositAmount.setText(String.valueOf(balance));
                    } else if (rdoRenewalAdding_No.isSelected()) {
                        double transAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                        double balance = observable.matAmount + sbIntAmt;
                        txtRenewalDepositAmount.setText(String.valueOf(balance));
                    }
                } else if (rdoRenewalWithdrawing_Yes.isSelected() == true) {
                    double transAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                    double balance = 0.0;
                    if (transAmt == 0) {
                        balance = observable.matAmount + transAmt + sbIntAmt;
                    } else {
                        balance = observable.matAmount - transAmt + sbIntAmt;
                    }
                    txtRenewalDepositAmount.setText(String.valueOf(balance));
                }
                txtRenewalIntAmtValue.setText(String.valueOf("0"));
                renewalDays = false;
                renewalMonths = false;
                renewalYears = false;
                //Added BY Suresh

                //added by jiby
                Double renDepAdd = 0.0;
                Double renDepWithDraw = 0.0;
                double newdepositAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                double balIntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
                Double prevInt = CommonUtil.convertObjToDouble(lblPreBalIntVal.getText()).doubleValue();
                if (rdoRenewalAdding_Yes.isSelected() == true && txtRenewalDepTransAmtValue.getText().length() > 0) {

                    renDepAdd = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                    //system.out.println("renDepAdd" + renDepAdd);
                }
                if (rdoRenewalWithdrawing_Yes.isSelected() == true && txtRenewalDepTransAmtValue.getText().length() > 0) {
                    renDepWithDraw = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
                    //system.out.println("renDepWithDraw" + renDepWithDraw);
                }
                if (chkRenewinterest.isSelected()) {
                    balIntAmt = 0.0;
                    prevInt = 0.0;
                    observable.setPreBalIntVal("0");
                }
                txtRenewalDepositAmount.setText(CommonUtil.convertObjToStr((newdepositAmt - renDepWithDraw) + balIntAmt + prevInt + renDepAdd));
                setRenewalDetails();
                ///////////////
            } else {
                // ClientUtil.showAlertWindow("Press ");
                return;
            }
        }
    }//GEN-LAST:event_rdoRenewalWithdrawingInt_NoActionPerformed

    private void rdoRenewalWithdrawingInt_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalWithdrawingInt_YesActionPerformed
        // TODO add your handling code here:
        if (rdoRenewalWithdrawing_Yes.isSelected() == false && rdoRenewalWithdrawing_No.isSelected() == false) {
            ClientUtil.showAlertWindow("First fill Renewal Deposit TransDetails...");
            rdgRenewalInterest.remove(rdoRenewalWithdrawingInt_Yes);
            rdgRenewalInterest.remove(rdoRenewalWithdrawingInt_No);
            rdoRenewalWithdrawingInt_Yes.setSelected(false);
            rdgRenewalInterest = new CButtonGroup();
            rdgRenewalInterest.add(rdoRenewalWithdrawingInt_Yes);
            rdgRenewalInterest.add(rdoRenewalWithdrawingInt_No);
            return;
        } else {
            panIntpayable.setVisible(false);
            observable.setRdoRenewalWithdrawingInt_No(false);
            observable.setRdoRenewalWithdrawingInt_Yes(rdoRenewalWithdrawingInt_Yes.isSelected());
            if (rdoRenewalWithdrawingInt_Yes.isSelected() == true && txtRenewalDepositAmount.getText().length() > 0) {
                double sbIntAmt = CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue();
                double IntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
                if (sbIntAmt + IntAmt == 0) {
                    ClientUtil.showAlertWindow("No interest to withdrawing...");
                    rdoRenewalWithdrawingInt_No.setSelected(true);
                    return;
                } 
          // else if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative) && sbIntAmt == 0) {
            //        ClientUtil.showAlertWindow("Cummulative deposit, No interest available for withdrawal...");
            //        rdoRenewalWithdrawingInt_No.setSelected(true);
            //        return;
            else {
                    if (rdoRenewalWithdrawingInt_Yes.isSelected() == true) {
                        lblRenewalIntAmt.setVisible(true);
                        txtRenewalIntAmtValue.setVisible(true);
                    }
                }
                renewalDays = false;
                renewalMonths = false;
                renewalYears = false;
                //Added BY Suresh
                setRenewalDetails();
            } else {
                // ClientUtil.showAlertWindow("Press ");
                return;
            }
        }
    }//GEN-LAST:event_rdoRenewalWithdrawingInt_YesActionPerformed

    private void rdoRenewalAdding_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalAdding_NoActionPerformed
        // TODO add your handling code here:
        rdoRenewalWithdrawing_Yes.setVisible(true);
        rdoRenewalWithdrawing_No.setVisible(true);
        lblRenewalWithdrawingDeposit.setVisible(true);
        if (rdoRenewalAdding_No.isSelected() == true) {
            HashMap hmap = new HashMap();
            String pid = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
            hmap.put("PROD_ID", pid);
            List lst = ClientUtil.executeQuery("getSameNoFromRenewProd", hmap);
            if (lst != null && lst.size() > 0) {
                hmap = (HashMap) lst.get(0);
                String sameNo = CommonUtil.convertObjToStr(hmap.get("SAME_NO_ALLOWED"));
                if (sameNo.equals("Y")) {
                    chkRenewSameNo.setSelected(true);
                    chkRenewSameNo.setEnabled(true);
                } else {
                    chkRenewSameNo.setSelected(false);
                    chkRenewSameNo.setEnabled(true);
                }
            }
        }
        observable.setRdoRenewalAdding_No(rdoRenewalAdding_No.isSelected());
        if (rdoRenewalAdding_No.isSelected() == true && txtRenewalDepositAmount.getText().length() > 0) {
            lblRenewalAddingDepTrans.setVisible(true);
            rdoRenewalAdding_Yes.setVisible(true);
            rdoRenewalAdding_No.setVisible(true);
            lblRenewalDepTransAmt.setVisible(false);
            txtRenewalDepTransAmtValue.setVisible(false);
            lblRenewalDepositTransMode.setVisible(false);
            cboRenewalDepTransMode.setVisible(false);
            disableRenewalDeposit();
            //            lblRenewalCustNameValue.setText("");
            lblRenewalCustNameValue.setVisible(false);
            double enteredIntAmt = 0.0;
            double sbIntAmt = CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue();
            double IntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                if (IntAmt != 0) {
                    sbIntAmt = sbIntAmt;
                }
            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                if (IntAmt < 0) {
                    sbIntAmt = sbIntAmt;
                } else {
                    sbIntAmt = sbIntAmt + IntAmt;
                }
            }
            double balance = 0.0;
            double withdrawingIntAmt = 0.0;
            double totIntAmt = 0.0;
            double transAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
            if (rdoRenewalWithdrawing_No.isSelected() == true) {
                if (rdoRenewalAdding_No.isSelected()) {
                    if (rdoRenewalWithdrawingInt_Yes.isSelected() == true) {
                        withdrawingIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
                        balance = observable.matAmount + sbIntAmt - withdrawingIntAmt;
                    } else if (rdoRenewalWithdrawingInt_No.isSelected() == true) {
                        balance = observable.matAmount + sbIntAmt;
                    } else if (rdoRenewalWithdrawingInt_Yes.isSelected() == false && rdoRenewalWithdrawingInt_No.isSelected() == false) {
                        totIntAmt = 0.0;
                        balance = observable.matAmount;
                    }
                    txtRenewalDepositAmount.setText(String.valueOf(balance));
                }
            } else if (rdoRenewalWithdrawing_Yes.isSelected() == true) {
                if (rdoRenewalWithdrawingInt_Yes.isSelected() == true) {
                    withdrawingIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
                    totIntAmt = withdrawingIntAmt + sbIntAmt;
                } else if (rdoRenewalWithdrawingInt_No.isSelected() == true) {
                    withdrawingIntAmt = 0.0;
                    totIntAmt = withdrawingIntAmt + sbIntAmt;
                } else if (rdoRenewalWithdrawingInt_Yes.isSelected() == false && rdoRenewalWithdrawingInt_No.isSelected() == false) {
                    totIntAmt = 0.0;
                }
                balance = observable.matAmount - transAmt - totIntAmt;
                txtRenewalDepositAmount.setText(String.valueOf(balance));
            }
            txtRenewalDepositAmount.setText(String.valueOf(balance));
            txtRenewalDepTransAmtValue.setText(String.valueOf("0"));
            long diff = DateUtil.dateDiff((Date) DateUtil.getDateMMDDYYYY(lblRenewalValPeriodRun.getText()), (Date) currDt.clone());
            Date unLienDt = null;
            if (diff >= observable.backDateFreq) {
                tdtRenewalDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(currDt.clone()));
                unLienDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(currDt.clone()));
            } else {
                tdtRenewalDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(lblRenewalValPeriodRun.getText()));
                unLienDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(lblRenewalValPeriodRun.getText()));
            }
            //            int selectedRow = tblRenewalDepSubNoAccInfo.getSelectedRow();
            //            Date unLienDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tblRenewalDepSubNoAccInfo.getValueAt(selectedRow, 2)));
            //            tdtRenewalDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(unLienDt));
            HashMap calcMap = new HashMap();
            calcMap.put("DEPOSIT_DT", unLienDt);
            calcMap.put("DEPOSIT_PERIOD_YY", txtRenewalPeriodOfDeposit_Years.getText());
            calcMap.put("DEPOSIT_PERIOD_MM", txtRenewalPeriodOfDeposit_Months.getText());
            calcMap.put("DEPOSIT_PERIOD_DD", txtRenewalPeriodOfDeposit_Days.getText());
            calcMap = observable.calculateMaturityDate(calcMap);
            tdtRenewalMaturityDate.setDateValue(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            //Added BY Suresh
            setRenewalDetails();
            addToDepNoClk();
        } else {
            //  ClientUtil.showAlertWindow("Press ");
            return;
        }
    }//GEN-LAST:event_rdoRenewalAdding_NoActionPerformed

    private void rdoRenewalAdding_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalAdding_YesActionPerformed
        // TODO add your handling code here:
        observable.setRdoRenewalAdding_Yes(rdoRenewalAdding_Yes.isSelected());
        rdoRenewalWithdrawing_Yes.setVisible(false);
        rdoRenewalWithdrawing_No.setVisible(false);
        lblRenewalWithdrawingDeposit.setVisible(false);
        if (rdoRenewalAdding_Yes.isSelected() == true) {
            chkRenewSameNo.setEnabled(false);
            chkRenewSameNo.setSelected(false);
        }
        if (rdoRenewalAdding_Yes.isSelected() == true && txtRenewalDepositAmount.getText().length() > 0) {
            lblRenewalDepTransAmt.setVisible(true);
            txtRenewalDepTransAmtValue.setVisible(true);
            Date startDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tdtRenewalDateOfDeposit.getDateValue()));
            Date endDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(currDt));
            if (!startDt.equals(endDt) && DateUtil.dateDiff(endDt, startDt) <= observable.backDateFreq) {
                ClientUtil.showMessageWindow("If Additional Amount is added... Deposit will be Renewed From Today....\n"
                        + "Deposit Date is :" + currDt.clone());
                tdtRenewalDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(currDt.clone()));
            }
            double balance = 0.0;
            double withdrawingIntAmt = 0.0;
            double transAmt = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
            double sbIntAmt = CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue();
            double IntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                if (IntAmt != 0) {
                    sbIntAmt = sbIntAmt;
                }
            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                if (IntAmt < 0) {
                    sbIntAmt = sbIntAmt;
                } else {
                    sbIntAmt = sbIntAmt + IntAmt;
                }
            }
            double totIntAmt = 0.0;
            if (rdoRenewalWithdrawing_No.isSelected() == true) {
                if (rdoRenewalAdding_Yes.isSelected()) {
                    if (rdoRenewalWithdrawingInt_Yes.isSelected() == true) {
                        withdrawingIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
                        totIntAmt = transAmt + sbIntAmt;
                    } else if (rdoRenewalWithdrawingInt_No.isSelected() == true) {
                        totIntAmt = transAmt + sbIntAmt;
                    } else if (rdoRenewalWithdrawingInt_Yes.isSelected() == false && rdoRenewalWithdrawingInt_No.isSelected() == false) {
                        totIntAmt = 0.0;
                        sbIntAmt = 0.0;
                    }
                    balance = observable.matAmount + totIntAmt - withdrawingIntAmt;
                    txtRenewalDepositAmount.setText(String.valueOf(balance));
                }
            }
            HashMap calcMap = new HashMap();
            calcMap.put("DEPOSIT_DT", currDt.clone());
            calcMap.put("DEPOSIT_PERIOD_YY", txtRenewalPeriodOfDeposit_Years.getText());
            calcMap.put("DEPOSIT_PERIOD_MM", txtRenewalPeriodOfDeposit_Months.getText());
            calcMap.put("DEPOSIT_PERIOD_DD", txtRenewalPeriodOfDeposit_Days.getText());
            calcMap = observable.calculateMaturityDate(calcMap);
            tdtRenewalMaturityDate.setDateValue(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            //Added BY Suresh
            setRenewalDetails();
            addToDepYesClk();
        } else {
            // ClientUtil.showAlertWindow("Press ");
            return;
        }
    }//GEN-LAST:event_rdoRenewalAdding_YesActionPerformed

    private void rdoRenewalWithdrawing_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalWithdrawing_NoActionPerformed
        // TODO add your handling code here:
        observable.setRdoRenewalWithdrawing_No(rdoRenewalWithdrawing_No.isSelected());
        if (rdoRenewalWithdrawing_No.isSelected() == true) {
            HashMap hmap = new HashMap();
            String pid = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
            hmap.put("PROD_ID", pid);
            List lst = ClientUtil.executeQuery("getSameNoFromRenewProd", hmap);
            if (lst != null && lst.size() > 0) {
                hmap = (HashMap) lst.get(0);
                String sameNo = CommonUtil.convertObjToStr(hmap.get("SAME_NO_ALLOWED"));
                if (sameNo.equals("Y")) {
                    chkRenewSameNo.setSelected(true);
                    chkRenewSameNo.setEnabled(true);
                } else {
                    chkRenewSameNo.setSelected(false);
                    chkRenewSameNo.setEnabled(true);
                }
            }
        }
        if (rdoRenewalWithdrawing_No.isSelected() == true && txtRenewalDepositAmount.getText().length() > 0) {
            lblRenewalAddingDepTrans.setVisible(true);
            rdoRenewalAdding_Yes.setVisible(true);
            rdoRenewalAdding_No.setVisible(true);
            lblRenewalDepTransAmt.setVisible(false);
            txtRenewalDepTransAmtValue.setVisible(false);
            lblRenewalDepositTransMode.setVisible(false);
            cboRenewalDepTransProdType.setVisible(false);
            cboRenewalDepTransProdId.setVisible(false);
            txtRenewalDepCustomerIdCr.setVisible(false);
            btnRenewalDepCustomerIdFileOpenCr.setVisible(false);
            lblRenewalDepositTransProdType.setVisible(false);
            lblRenewalDepositTransProdId.setVisible(false);
            lblRenewalDepositTransAccNo.setVisible(false);
            lblRenewalDepositTransCustName.setVisible(false);
            cboRenewalDepTransMode.setVisible(false);
            txtRenewalDepTransTokenNo.setVisible(false);
            lblRenewalDepositTransTokenNo.setVisible(false);
            //            lblRenewalCustNameValue.setText("");
            lblRenewalCustNameValue.setVisible(false);
            double sbIntAmt = 0.0;
            HashMap calculationMap = new HashMap();
            long diff = DateUtil.dateDiff((Date) DateUtil.getDateMMDDYYYY(lblRenewalValPeriodRun.getText()), (Date) currDt.clone());
            if (diff >= observable.backDateFreq) {
                calculationMap.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(lblRenewalValPeriodRun.getText()));
                calculationMap.put("TO_DAY_DT", currDt.clone());
                calculationMap.put("DEPOSIT_AMT", String.valueOf(observable.matAmount));
                calculationMap.put("PERIOD", new Double(diff));
                calculationMap.put("DEPOSIT_PERIOD_DD", txtRenewalPeriodOfDeposit_Days.getText());
                calculationMap.put("DEPOSIT_PERIOD_MM", txtRenewalPeriodOfDeposit_Months.getText());
                calculationMap.put("DEPOSIT_PERIOD_YY", txtRenewalPeriodOfDeposit_Years.getText());
                String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
                String basedOnRate = "";
                HashMap renewMap = new HashMap();
                renewMap.put("PROD_ID", prodId);
                List lst = ClientUtil.executeQuery("getDepositsBackDatedDay", renewMap);
                if (lst != null && lst.size() > 0) {
                    renewMap = (HashMap) lst.get(0);
                    basedOnRate = CommonUtil.convertObjToStr(renewMap.get("INT_RATE_APPLIED_OVERDUE"));
                }
                HashMap calcMap = new HashMap();
                if (basedOnRate.equals("") || basedOnRate.equals("Y")) {
                    calcMap = observable.simpleInterestCalculation(calculationMap);
                } else if (!basedOnRate.equals("") && basedOnRate.equals("N")) {
                    calculationMap.put("RENEWAL_CALCULATION", renewMap);
                    calcMap = observable.depositRateInterestCalculation(calculationMap, prodId);
                }
                sbAmount = CommonUtil.convertObjToDouble(calculationMap.get("CALC_AMT")).doubleValue();
                lblRenewalSBIntAmtVal.setText(String.valueOf(sbAmount));
                observable.setRenewalSBIntAmtVal(CommonUtil.convertObjToStr(lblRenewalSBIntAmtVal.getText()));
                sbIntAmt = CommonUtil.convertObjToDouble(lblRenewalSBIntAmtVal.getText()).doubleValue();
            }
            double IntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                if (IntAmt != 0) {
                    sbIntAmt = sbIntAmt;
                }
            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                if (IntAmt < 0) {

                    sbIntAmt = sbIntAmt;
                } else {
                    sbIntAmt = sbIntAmt + IntAmt;
                }
            }
            lblRenewalInterestRepayAmtVal.setText(String.valueOf(sbIntAmt));
            //Added By Suresh
            if (observable.productBehavesLike.equals("FLOATING_RATE")) {
                lblRenewalInterestRepayAmtVal.setText(String.valueOf(IntAmt));
            }
            double enteredIntAmt = 0.0;
            if (rdoRenewalWithdrawingInt_Yes.isSelected() == true) {
                enteredIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
            } else if (rdoRenewalWithdrawingInt_No.isSelected() == true) {
                enteredIntAmt = 0;
            } else if (rdoRenewalWithdrawingInt_Yes.isSelected() == false && rdoRenewalWithdrawingInt_No.isSelected() == false) {
                enteredIntAmt = 0;
                sbIntAmt = 0;
            }
            double balance = observable.matAmount + sbIntAmt - enteredIntAmt;
            txtRenewalDepositAmount.setText(String.valueOf(balance));
            txtRenewalDepTransAmtValue.setText(String.valueOf("0"));
            rdoRenewalWithdrawing_Yes.setSelected(false);
            rdoRenewalWithdrawing_No.setSelected(true);
            int selectedRow = 0;// tblRenewalDepSubNoAccInfo.getSelectedRow();
            Date unLienDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tblRenewalDepSubNoAccInfo.getValueAt(selectedRow, 2)));
            tdtRenewalDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(unLienDt));
            HashMap calcMap = new HashMap();
            calcMap.put("DEPOSIT_DT", unLienDt);
            calcMap.put("DEPOSIT_PERIOD_YY", txtRenewalPeriodOfDeposit_Years.getText());
            calcMap.put("DEPOSIT_PERIOD_MM", txtRenewalPeriodOfDeposit_Months.getText());
            calcMap.put("DEPOSIT_PERIOD_DD", txtRenewalPeriodOfDeposit_Days.getText());
            calcMap = observable.calculateMaturityDate(calcMap);
            tdtRenewalMaturityDate.setDateValue(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            //Added BY Suresh
            setRenewalDetails();
            withDrwNoClk();
        } else {
            // ClientUtil.showAlertWindow("Press ");
            return;
        }
    }//GEN-LAST:event_rdoRenewalWithdrawing_NoActionPerformed

    public void withDrwNoClk() {
        Double depAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
        Double balIntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
        Double withDrwIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
        Double addToDet = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
        Double prevInt = CommonUtil.convertObjToDouble(lblPreBalIntVal.getText()).doubleValue();
        Double Amount = 0.0;
//        if(withDrwIntAmt<=0)
//        {
//             ClientUtil.showAlertWindow("Withdraw Interest Amount should be greater than zero ");
//                     return;
//        }
        if (rdoRenewalAdding_No.isSelected() && rdoRenewalWithdrawingInt_Yes.isSelected()) {
            Amount = depAmt + (balIntAmt + prevInt - withDrwIntAmt);
        }
        if (rdoRenewalAdding_No.isSelected() && rdoRenewalWithdrawingInt_No.isSelected()) {
            Amount = depAmt + balIntAmt + prevInt;
        }
        if (rdoRenewalAdding_Yes.isSelected() && rdoRenewalWithdrawingInt_Yes.isSelected()) {
            Amount = (depAmt + addToDet) + (balIntAmt + prevInt - withDrwIntAmt);
        }
        if (rdoRenewalAdding_Yes.isSelected() && rdoRenewalWithdrawingInt_No.isSelected()) {
            Amount = depAmt + addToDet + balIntAmt + prevInt;
        }
        txtRenewalDepositAmount.setText(CommonUtil.convertObjToStr(Amount));
    }

    public void withDrwYesClk() {
        Double depAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
        Double balIntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
        Double withDrwIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
        Double withDrwFrmDet = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
        Double prevInt = CommonUtil.convertObjToDouble(lblPreBalIntVal.getText()).doubleValue();
        Double Amount = 0.0;
//        if(withDrwIntAmt<=0)
//        {
//             ClientUtil.showAlertWindow("Withdraw Interest Amount should be greater than zero ");
//                     return;
//        }
//        if(withDrwFrmDet<=0)
//        {
//             ClientUtil.showAlertWindow("Withdraw From Deposit Amount should be greater than zero ");
//                     return;
//        }
        if (rdoRenewalWithdrawingInt_Yes.isSelected()) {
            Amount = (depAmt - withDrwFrmDet) + (balIntAmt + prevInt - withDrwIntAmt);
        }
        if (rdoRenewalWithdrawingInt_No.isSelected()) {
            Amount = (depAmt - withDrwFrmDet) + balIntAmt + prevInt;
        }
        txtRenewalDepositAmount.setText(CommonUtil.convertObjToStr(Amount));
    }

    public void addToDepYesClk() {
        Double depAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
        Double balIntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
        Double withDrwIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
        //Double withDrwFrmDet=CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
        Double addToDet = CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
        Double prevInt = CommonUtil.convertObjToDouble(lblPreBalIntVal.getText()).doubleValue();
        Double Amount = 0.0;
//        if(withDrwIntAmt<=0)
//        {
//             ClientUtil.showAlertWindow("Withdraw Interest Amount should be greater than zero ");
//                     return;
//        }
//        if(addToDet<=0)
//        {
//             ClientUtil.showAlertWindow("Withdraw From Deposit Amount should be greater than zero ");
//                     return;
//        }
        if (rdoRenewalWithdrawingInt_Yes.isSelected()) {
            Amount = (depAmt + addToDet) + (balIntAmt + prevInt - withDrwIntAmt);
        }
        if (rdoRenewalWithdrawingInt_No.isSelected()) {
            Amount = depAmt + addToDet + balIntAmt + prevInt;
        }
        txtRenewalDepositAmount.setText(CommonUtil.convertObjToStr(Amount));
    }

    public void addToDepNoClk() {
        Double depAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
        Double balIntAmt = CommonUtil.convertObjToDouble(lblRenewalBalIntAmtVal.getText()).doubleValue();
        Double withDrwIntAmt = CommonUtil.convertObjToDouble(txtRenewalIntAmtValue.getText()).doubleValue();
        Double prevInt = CommonUtil.convertObjToDouble(lblPreBalIntVal.getText()).doubleValue();
        //Double withDrwFrmDet=CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
        // Double addToDet=CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue();
        Double Amount = 0.0;
//        if(withDrwIntAmt<=0)
//        {
//             ClientUtil.showAlertWindow("Withdraw Interest Amount should be greater than zero ");
//                     return;
//        }
//        if(addToDet<=0)
//        {
//             ClientUtil.showAlertWindow("Withdraw From Deposit Amount should be greater than zero ");
//                     return;
//        }
        if (rdoRenewalWithdrawingInt_Yes.isSelected()) {
            Amount = depAmt + (balIntAmt + prevInt - withDrwIntAmt);
        }
        if (rdoRenewalWithdrawingInt_No.isSelected()) {
            Amount = depAmt + balIntAmt + prevInt;
        }
        txtRenewalDepositAmount.setText(CommonUtil.convertObjToStr(Amount));
    }
    private void rdoRenewalWithdrawing_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewalWithdrawing_YesActionPerformed
        // TODO add your handling code here:
        observable.setRdoRenewalWithdrawing_Yes(rdoRenewalWithdrawing_Yes.isSelected());
        rdoRenewalAdding_No.setSelected(true);
        observable.setRdoRenewalAdding_No(rdoRenewalAdding_No.isSelected());
        if (rdoRenewalWithdrawing_Yes.isSelected() == true) {
            chkRenewSameNo.setEnabled(false);
            chkRenewSameNo.setSelected(false);
        }
        if (rdoRenewalWithdrawing_Yes.isSelected() == true && txtRenewalDepositAmount.getText().length() > 0) {
            rdoRenewalWithdrawing_Yes.setSelected(true);
            rdoRenewalWithdrawing_No.setSelected(false);
            lblRenewalDepTransAmt.setVisible(true);
            txtRenewalDepTransAmtValue.setVisible(true);
            lblRenewalAddingDepTrans.setVisible(false);
            rdoRenewalAdding_Yes.setVisible(false);
            rdoRenewalAdding_No.setVisible(false);
            rdoRenewalAdding_No.setSelected(true);
            int selectedRow = tblRenewalDepSubNoAccInfo.getSelectedRow();
            Date unLienDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tblRenewalDepSubNoAccInfo.getValueAt(selectedRow, 2)));
            tdtRenewalDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(unLienDt));
            HashMap calcMap = new HashMap();
            calcMap.put("DEPOSIT_DT", unLienDt);
            calcMap.put("DEPOSIT_PERIOD_YY", txtRenewalPeriodOfDeposit_Years.getText());
            calcMap.put("DEPOSIT_PERIOD_MM", txtRenewalPeriodOfDeposit_Months.getText());
            calcMap.put("DEPOSIT_PERIOD_DD", txtRenewalPeriodOfDeposit_Days.getText());
            calcMap = observable.calculateMaturityDate(calcMap);
            tdtRenewalMaturityDate.setDateValue(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            //Added BY Suresh
            setRenewalDetails();
            withDrwYesClk();
        } else {
            //  ClientUtil.showAlertWindow("Press ");
            return;
        }
    }//GEN-LAST:event_rdoRenewalWithdrawing_YesActionPerformed

    private void setRenewalDetails() {
        txtRenewalPeriodOfDeposit_DaysFocusLost(null);
    }
    private void txtRenewalDepTransAmtValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRenewalDepTransAmtValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRenewalDepTransAmtValueActionPerformed
    //        if(rdoOpeningMode_Extension.isSelected() == true){
    //            viewType = ClientConstants.VIEW_TYPE_EXTENSION;
    //            ACTIONEDITDELETE = 1;
    //            observable.setActionType(ClientConstants.ACTIONTYPE_EXTENSION);
    //            observable.setStatus();
    //            callView("EXTENSION_OF_DEPOSIT");
    //        }
    private void tdtCalenderFreqDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtCalenderFreqDateFocusLost
        // TODO add your handling code here:
        //        Date calenderDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tdtCalenderFreqDate.getDateValue()));
        //        Date depositDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tdtDateOfDeposit.getDateValue()));
        //        Date maturityDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tdtMaturityDate.getDateValue()));
        //        if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW){
        //            if(calenderDt!=null && DateUtil.dateDiff(depositDt,calenderDt)<0){
        //                ClientUtil.showAlertWindow("Deposit Date is less than the Calender Freqency \n"+
        //                "Deposit Date is "+tdtDateOfDeposit.getDateValue());
        //                tdtCalenderFreqDate.setDateValue("");
        //                return;
        //            }else if(calenderDt!=null && DateUtil.dateDiff(maturityDt,calenderDt)>0){
        //                ClientUtil.showAlertWindow("Maturity Date is greater than the Calender Freqency \n"+
        //                "Maturity Date is "+tdtMaturityDate.getDateValue());
        //                tdtCalenderFreqDate.setDateValue("");
        //                return;
        //            }
        //        }
        //        if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT){
        //            Date lastIntApplDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(observable.getLastInterestPaidDateValue()));
        //            if(lastIntApplDt!=null && calenderDt!=null && DateUtil.dateDiff(lastIntApplDt,calenderDt)<0){
        //                ClientUtil.showAlertWindow("LastInterest Applied Date is less than the Calender Freqency \n"+
        //                "LastInterest Applied Date is "+observable.getLastInterestPaidDateValue());
        //                tdtCalenderFreqDate.setDateValue("");
        //                return;
        //            }else if(calenderDt!=null && DateUtil.dateDiff(maturityDt,calenderDt)>0){
        //                ClientUtil.showAlertWindow("Maturity Date is greater than the Calender Freqency \n"+
        //                "Maturity Date is "+tdtMaturityDate.getDateValue());
        //                tdtCalenderFreqDate.setDateValue("");
        //                return;
        //            }
        //        }
    }//GEN-LAST:event_tdtCalenderFreqDateFocusLost

    private void rdoCalender_Freq_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoCalender_Freq_YesActionPerformed
        // TODO add your handling code here:
        if (rdoCalender_Freq_Yes.isSelected() == true && !cboInterestPaymentFrequency.getSelectedItem().equals("Date of Maturity")) {
            lblCalenderFreqDate.setVisible(true);
            tdtCalenderFreqDate.setVisible(false);
            cboCalenderFreqDay.setVisible(true);
            cboCalenderFreqDay.setEnabled(true);
            rdoCalender_Freq_Yes.setSelected(true);
        } else {
            ClientUtil.showMessageWindow("IntPay Frequency is On Maturity, you can not choose calender Frequency...");
            lblCalenderFreqDate.setVisible(false);
            tdtCalenderFreqDate.setVisible(false);
            cboCalenderFreqDay.setVisible(false);
            rdoCalender_Freq_No.setSelected(true);
            return;
        }
    }//GEN-LAST:event_rdoCalender_Freq_YesActionPerformed

    private void rdoCalender_Freq_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoCalender_Freq_NoActionPerformed
        // TODO add your handling code here:
        if (rdoCalender_Freq_No.isSelected() == true) {
            lblCalenderFreqDate.setVisible(false);
            tdtCalenderFreqDate.setVisible(false);
            cboCalenderFreqDay.setVisible(false);
            cboCalenderFreqDay.setSelectedItem("");
            tdtCalenderFreqDate.setDateValue("");
        }
    }//GEN-LAST:event_rdoCalender_Freq_NoActionPerformed

    private void tblLienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLienMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblLien.getSelectedRow();
        Date unLienDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tblLien.getValueAt(selectedRow, 2)));
        observable.flexiDepositDetails(CommonUtil.convertObjToStr(txtDepsoitNo.getText()), unLienDt);
        updateOBFlexiDep();
    }//GEN-LAST:event_tblLienMouseClicked
    private void updateOBFlexiDep() {
        lblClosedDateValue.setText(observable.getClosedDateValue());
        lblRenewalDepositAcValue.setText(observable.getRenewalClosedDepNo());
        lblClosingTypeValue.setText(observable.getClosingTypeValue());
        lblTransferOutBranchValue.setText(observable.getTransferOutBranchValue());
        lblRenewalDateValue.setText(observable.getRenewalDateValue());
        lblClosingInterestAmountValue.setText(observable.getClosingInterestAmountValue());
        lblClosingRateOfInterestValue.setText(observable.getClosingRateOfInterestValue());
        lblSBInterestAmountValue.setText(observable.getSBInterestAmountValue());
        lblSBRateOfInterestValue.setText(observable.getSBRateOfInterestValue());
        lbldepositPeriodRunValue.setText(observable.getDepositPeriodRunValue());
    }
    private void rdoWith_intRenewal_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoWith_intRenewal_NoActionPerformed
        // TODO add your handling code here:
        if (rdoAutoRenewal_Yes.isSelected() == true && rdoWith_intRenewal_No.isSelected() == true
                && observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
            ClientUtil.showAlertWindow("Cummulative Deposit always with interest only");
            rdoWith_intRenewal_Yes.setSelected(true);
        }
    }//GEN-LAST:event_rdoWith_intRenewal_NoActionPerformed

    private void rdoWith_intRenewal_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoWith_intRenewal_YesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoWith_intRenewal_YesActionPerformed

    private void rdoMatAlert_report_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoMatAlert_report_NoActionPerformed

        if (rdoMatAlert_report_No.isSelected() == true) // TODO add your handling code here:
        {
            rdoMatAlert_report_No.setSelected(true);
        } else {
            rdoMatAlert_report_Yes.setSelected(true);
        }

    }//GEN-LAST:event_rdoMatAlert_report_NoActionPerformed

    private void rdoStandingInstruction_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoStandingInstruction_NoActionPerformed
        // TODO add your handling code here:
        observable.setRdoStandingInstruction_No(rdoStandingInstruction_No.isSelected());
        observable.setRdoStandingInstruction_Yes(rdoStandingInstruction_Yes.isSelected());
    }//GEN-LAST:event_rdoStandingInstruction_NoActionPerformed

    private void rdoStandingInstruction_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoStandingInstruction_YesActionPerformed
        observable.setRdoStandingInstruction_No(rdoStandingInstruction_No.isSelected());
        observable.setRdoStandingInstruction_Yes(rdoStandingInstruction_Yes.isSelected());
    }//GEN-LAST:event_rdoStandingInstruction_YesActionPerformed

    private void chkPowerOfAttorneyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPowerOfAttorneyActionPerformed
        // TODO add your handling code here:
        if (chkPowerOfAttorney.isSelected() == true) {
            //            tabTermDeposit.add(poaUI);
            tabTermDeposit.add(poaUI, "Power of Attorney");
            tabTermDeposit.resetVisits();
            ClientUtil.enableDisable(poaUI, true);
            poaUI.getPowerOfAttorneyOB().resetAllFieldsInPoA();
            poaUI.setAllPoAEnableDisable(false);
            poaUI.setPoANewOnlyEnable();
            String strCustID = "";
            String strCustDetails = "";
            for (int i = tblJointAcctHolder.getRowCount() - 1, j = 0; i >= 0; --i, ++j) {
                strCustID = CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(j, 1));
                strCustDetails = poaUI.getPowerOfAttorneyOB().getCustName(strCustID);
                poaUI.getPowerOfAttorneyOB().getCbmPoACust().addKeyAndElement(strCustID, strCustDetails);
                strCustID = null;
                strCustDetails = null;
            }
        } else if (chkPowerOfAttorney.isSelected() == false) {
            tabTermDeposit.remove(poaUI);
            tabTermDeposit.resetVisits();
        } else if ((chkPowerOfAttorney.isSelected() == false) && (poaUI.getTblRowCount() > 0)) {
            //--- If PoA is unchecked, show the warning message
            int reset = CommonMethods.showDialogYesNo(objTermDepositRB.getString("dialogForPowOfAtt"));
            //--- If YES, reset the PoA data
            if (reset == yes) {
                resetPoA();
            } else if (reset == no) {
                //--- If NO, don't reset the data
                observable.setChkPowerOfAttorney(true);
                chkPowerOfAttorney.setSelected(observable.getChkPowerOfAttorney());
            }
        } else if ((chkPowerOfAttorney.isSelected() == false) && (poaUI.getTblRowCount() == 0)) {
            resetPoA();
        }
//GEN-LAST:event_chkPowerOfAttorneyActionPerformed
    }

    private void resetPoA() {
        poaUI.getPowerOfAttorneyOB().resetAllFieldsInPoA();
        poaUI.setPoAToolBtnsEnableDisable(false);
        observable.setChkPowerOfAttorney(false);
        chkPowerOfAttorney.setSelected(false);
        ClientUtil.enableDisable(poaUI, false);
    }

    private void rdoAutoRenewal_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoAutoRenewal_NoActionPerformed
        // TODO add your handling code here:
        if (rdoAutoRenewal_No.isSelected() == true) {
            lblWithIntAutoRenewal.setVisible(false);
            panWithInterest.setEnabled(false);
            panWithInterest.setVisible(false);
        }

    }//GEN-LAST:event_rdoAutoRenewal_NoActionPerformed

    private void rdoAutoRenewal_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoAutoRenewal_YesActionPerformed
        // TODO add your handling code here:
        if (rdoAutoRenewal_Yes.isSelected() == true && observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
            lblWithIntAutoRenewal.setVisible(true);
            panWithInterest.setEnabled(true);
            panWithInterest.setVisible(true);
            rdoWith_intRenewal_Yes.setSelected(true);
        } else {
            lblWithIntAutoRenewal.setVisible(true);
            panWithInterest.setEnabled(true);
            panWithInterest.setVisible(true);
            rdoWith_intRenewal_No.setSelected(true);
        }
    }//GEN-LAST:event_rdoAutoRenewal_YesActionPerformed
    private void cboCreditRenewalDepDetails() {
        if (cboRenewalDepTransMode.getSelectedIndex() > 0) {
            //            cboRenewalDepTransProdType.setSelectedItem("");
            //            cboRenewalDepTransProdId.setSelectedItem("");
            //            txtRenewalDepCustomerIdCr.setText("");
            //            lblRenewalCustNameValue.setText("");
            //            observable.setCboRenewalDepTransProdType("");
            //            observable.setCboRenewalDepTransProdId("");
            //            observable.setRenewalcustomerIdCrDep("");
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            String installType = ((ComboBoxModel) cboRenewalDepTransMode.getModel()).getKeyForSelected().toString();
            if (installType != null && installType.equals("TRANSFER")) {
                panRenewalDepTransCustomerNO.setVisible(true);
                lblRenewalDepositTransProdType.setVisible(true);
                lblRenewalDepositTransProdId.setVisible(true);
                lblRenewalDepositTransAccNo.setVisible(true);
                lblRenewalDepositTransCustName.setVisible(true);
                cboRenewalDepTransProdType.setVisible(true);
                cboRenewalDepTransProdId.setVisible(true);
                txtRenewalDepCustomerIdCr.setVisible(true);
                txtRenewalDepCustomerIdCr.setEnabled(false);
                btnRenewalDepCustomerIdFileOpenCr.setVisible(true);
                lblRenewalDepositTransTokenNo.setVisible(false);
                cboRenewalDepTransProdType.setSelectedItem(observable.getCboRenewalDepTransProdType());
                if (observable.getCboRenewalDepTransProdId() != null) {
                    cboRenewalDepTransProdId.setSelectedItem(observable.getCboRenewalDepTransProdId());
                }
                txtRenewalDepCustomerIdCr.setText(observable.getRenewalcustomerIdCrDep());
                lblRenewalCustNameValue.setText(observable.getRenewalcustomerNameCrValueDep());
                lblRenewalDepositTransTokenNo.setVisible(false);
                txtRenewalDepTransTokenNo.setVisible(false);
            } else if (installType != null && installType.equals("CASH")) {
                disableRenewalDeposit();
                lblRenewalCustNameValue.setText("");
                lblRenewalCustNameValue.setVisible(false);
                if (rdoRenewalAdding_Yes.isSelected()) {
                    txtRenewalDepTransTokenNo.setVisible(false);
                    lblRenewalDepositTransTokenNo.setVisible(false);
                } else {
                    txtRenewalDepTransTokenNo.setVisible(true);
                    lblRenewalDepositTransTokenNo.setVisible(true);
                }
            } else {
                txtRenewalDepTransTokenNo.setVisible(false);
                lblRenewalDepositTransTokenNo.setVisible(false);
            }
        }
    }
    private void rdoMatAlert_report_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoMatAlert_report_YesActionPerformed
        // TODO add your handling code here:
        if (rdoMatAlert_report_Yes.isSelected() == true) {
            rdoMatAlert_report_Yes.setSelected(true);
        } else {
            rdoMatAlert_report_No.setSelected(true);
        }
    }//GEN-LAST:event_rdoMatAlert_report_YesActionPerformed
    private void disableRenewalDeposit() {
        //        cboRenewalDepTransProdType.setSelectedItem("");
        //        cboRenewalDepTransProdId.setSelectedItem("");
        //        txtRenewalDepCustomerIdCr.setText("");
        panRenewalDepTransCustomerNO.setVisible(false);
        lblRenewalDepositTransProdType.setVisible(false);
        lblRenewalDepositTransProdId.setVisible(false);
        lblRenewalDepositTransAccNo.setVisible(false);
        lblRenewalDepositTransCustName.setVisible(false);
        cboRenewalDepTransProdType.setVisible(false);
        cboRenewalDepTransProdId.setVisible(false);
        txtRenewalDepCustomerIdCr.setVisible(false);
        txtRenewalDepCustomerIdCr.setEnabled(false);
        btnRenewalDepCustomerIdFileOpenCr.setVisible(false);
    }
    private void txtPeriodOfDeposit_DaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPeriodOfDeposit_DaysActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPeriodOfDeposit_DaysActionPerformed
    private void disableRenewalInt() {
        //        cboRenewalInterestTransProdType.setSelectedItem("");
        //        cboRenewalInterestTransProdType.setSelectedItem("");
        //        txtRenewalIntCustomerIdCr.setText("");
        lblRenewalInterestCustNameVal.setText("");
        lblRenewalInterestCustNameVal.setVisible(false);
        panRenewalInterestCustomerNO.setVisible(false);
        lblRenewalInterestTransProdType.setVisible(false);
        lblRenewalInterestTransProdId.setVisible(false);
        lblRenewalInterestTransAccNo.setVisible(false);
        lblRenewalInterestCustName.setVisible(false);
        lblRenewalInterestTransProdType.setVisible(false);
        lblRenewalInterestTransProdId.setVisible(false);
        lblRenewalInterestTransAccNo.setVisible(false);
        lblRenewalInterestCustName.setVisible(false);
        cboRenewalInterestTransProdType.setVisible(false);
        cboRenewalInterestTransProdId.setVisible(false);
        txtRenewalIntCustomerIdCr.setVisible(false);
        txtRenewalIntCustomerIdCr.setEnabled(false);
        btnRenewalIntCustomerIdFileOpenCr.setVisible(false);
    }
    private void txtCustomerIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCustomerIdFocusLost
        if (txtCustomerId.getText().length() > 0) {
            if ((cboProductId.getSelectedItem() != null) && (cboConstitution.getSelectedItem() != null)
                    && (!cboProductId.getSelectedItem().equals("") && !cboConstitution.getSelectedItem().equals(""))) {
                String txtCustomer = txtCustomerId.getText();
                HashMap mapDOB = new HashMap();
                HashMap cust = new HashMap();
                cust.put("CUSTOMER ID", txtCustomer);
                int age = 0;
                int rtrAge = 0;
                List lstDOB = ClientUtil.executeQuery("getCustDOB", cust);
                if (lstDOB != null && lstDOB.size() > 0) {
                    mapDOB = (HashMap) lstDOB.get(0);
                    if (mapDOB.get("DOB") != null) {
                        Date dob = (Date) mapDOB.get("DOB");
                        age = calAge1(dob);
                    } else {
                        ClientUtil.showAlertWindow("DOB is not set for this customer");
                    }
                }
//                HashMap mapRtrAge = new HashMap();
//                List lstRtrAge = ClientUtil.executeQuery("getRtrAge", mapRtrAge);
//                if (!lstRtrAge.isEmpty()) {
//                    mapRtrAge = (HashMap) lstRtrAge.get(0);
//                }
//                String strRtrAge = mapRtrAge.get("RETIREMENT_AGE").toString();
//                rtrAge = Integer.parseInt(strRtrAge);
                 rtrAge = TrueTransactMain.SENIOR_CITIZEN_AGE;
                //system.out.println("rtrAge" + rtrAge);
                //system.out.println("age" + age);


                viewType = "CUSTOMER ID";
                fillData(cust);
                newDepositDetails();
                if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                    enableDisableForCummulative();
                }
                if (age >= rtrAge) {
                    observable.setCboCategory("Senior Citizens");
                    cboCategory.setSelectedItem(observable.getCboCategory());
                }
            } else if (cboProductId.getSelectedItem().equals("")) {
                ClientUtil.showAlertWindow("Choose Product Id First...");
                return;
            } else if (cboConstitution.getSelectedItem().equals("")) {
                ClientUtil.showAlertWindow("Choose Constitution...");
                return;
            }        // TODO add your handling code here:
        }
    }//GEN-LAST:event_txtCustomerIdFocusLost
    // TODO add your handling code here:

    public int calAge(String DOB) {
        int age = 0;
        //system.out.println("DOB" + DOB);
        try {
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            java.util.Date dt = df.parse(DOB);
            //system.out.println("dtdtdtdtdtdtdtdt" + dt);
            //Date dt = DateUtil.getDateMMDDYYYY(DOB);
            Date curr_dt = (Date) currDt.clone();
            //system.out.println("curr_dtcurr_dtcurr_dt" + curr_dt);
            long a = DateUtil.dateDiff(dt, curr_dt);
            long b = a / 365;
            String ages = String.valueOf(b);
            age = Integer.parseInt(ages);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return age;
    }

    public int calAge1(Date DOB) {
        int age = 0;
        //system.out.println("DOB" + DOB);
        try {
//                SimpleDateFormat df= new SimpleDateFormat("dd-MON-yy");
//               java.util.Date dt=df.parse(DOB);
//                //system.out.println("dtdtdtdtdtdtdtdt"+dt);
            //Date dt = DateUtil.getDateMMDDYYYY(DOB);
            Date curr_dt = (Date) currDt.clone();
            //system.out.println("curr_dtcurr_dtcurr_dt" + curr_dt);
            long a = DateUtil.dateDiff(DOB, curr_dt);
            long b = a / 365;
            String ages = String.valueOf(b);
            age = Integer.parseInt(ages);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return age;
    }

    private void cboCreditRenewalIntDetails() {
        if (cboRenewalInterestTransMode.getSelectedIndex() > 0) {
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
            String installType = ((ComboBoxModel) cboRenewalInterestTransMode.getModel()).getKeyForSelected().toString();
            cboRenewalInterestTransProdId.setSelectedItem("");
            if (installType.equals("TRANSFER")) {
                btnRenewalIntCustomerIdFileOpenCr.setVisible(true);
                panRenewalInterestCustomerNO.setVisible(true);
                lblRenewalInterestTransProdType.setVisible(true);
                lblRenewalInterestTransProdId.setVisible(true);
                lblRenewalInterestTransAccNo.setVisible(true);
                lblRenewalInterestCustName.setVisible(true);
                lblRenewalInterestTransProdType.setVisible(true);
                lblRenewalInterestTransProdId.setVisible(true);
                lblRenewalInterestTransAccNo.setVisible(true);
                lblRenewalInterestCustName.setVisible(true);
                cboRenewalInterestTransProdType.setVisible(true);
                cboRenewalInterestTransProdId.setVisible(true);
                txtRenewalIntCustomerIdCr.setVisible(true);
                txtRenewalIntCustomerIdCr.setEnabled(false);
                btnCustomerIdFileOpenCr.setVisible(true);
                txtRenewalIntTokenNoVal.setVisible(false);
                lblRenewalInterestTokenNo.setVisible(false);
                lblRenewalInterestCustNameVal.setVisible(true);
                cboRenewalInterestTransProdType.setSelectedItem("");
                cboRenewalInterestTransProdType.setSelectedItem("");
                txtRenewalIntCustomerIdCr.setText("");
                lblRenewalInterestCustNameVal.setText("");
                cboRenewalInterestTransProdType.setSelectedItem(observable.getCboRenewalInterestTransProdType());
                cboRenewalInterestTransProdId.setSelectedItem(observable.getCboRenewalInterestTransProdId());
                txtRenewalIntCustomerIdCr.setText(observable.getRenewalcustomerIdCrInt());
                lblRenewalInterestCustNameVal.setText(observable.getRenewalcustomerNameCrValueInt());
            } else if (installType.equals("CASH")) {
                disableRenewalInt();
                txtRenewalIntTokenNoVal.setVisible(true);
                lblRenewalInterestTokenNo.setVisible(true);
            }
        }
    }
    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_VIEW);
        observable.setStatus();
        lblStatus.setText(observable.getLblStatus());
        popUp();
        btnCheck();
        btnCustomerIdFileOpen1.setEnabled(false);
        rdoDeathClaim_Yes.setEnabled(false);
        rdoDeathClaim_No.setEnabled(false);
        btnPrint.setEnabled(false);
    }//GEN-LAST:event_btnViewActionPerformed

    private void cboInterestPaymentModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboInterestPaymentModeActionPerformed
        cboCreditAccDetails();
    }//GEN-LAST:event_cboInterestPaymentModeActionPerformed
    private void cboCreditAccDetails() {
        String installType = ((ComboBoxModel) cboInterestPaymentMode.getModel()).getKeyForSelected().toString();        // TODO add your handling code here:
        if (installType.equals("TRANSFER")) {
            cboProdType.setEnabled(true);
            cboProdId.setEnabled(true);
            txtCustomerIdCr.setEnabled(true);
            cboInterestPaymentMode.setEnabled(true);
            btnCustomerIdFileOpenCr.setEnabled(true);
            cboProdType.setSelectedItem(observable.getCboProdType());
            cboProdId.setSelectedItem(observable.getCboProdId());
            txtCustomerIdCr.setText(observable.getCustomerIdCr());
            lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
        } else {
            cboProdType.setSelectedItem("");
            cboProdId.setSelectedItem("");
            txtCustomerIdCr.setText("");
            lblCustomerNameCrValue.setText("");
            cboProdType.setEnabled(false);
            cboInterestPaymentMode.setEnabled(true);
            cboProdId.setEnabled(false);
            txtCustomerIdCr.setEnabled(false);
            btnCustomerIdFileOpenCr.setEnabled(false);
        }
        if ((observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW)
                || (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW_MODE)) {
            cboInterestPaymentMode.setEnabled(true);
            cboProdType.setEnabled(false);
            cboProdId.setEnabled(false);
            txtCustomerIdCr.setEnabled(false);
            btnCustomerIdFileOpenCr.setEnabled(false);
            cboInterestPaymentFrequency.setEnabled(false);
        }
    }
    private void btnCustomerIdFileOpenCrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomerIdFileOpenCrActionPerformed
        callView("CREDIT_ACC_NO");// TODO add your handling code here:
        poaUI.ttNotifyObservers();
    }//GEN-LAST:event_btnCustomerIdFileOpenCrActionPerformed

    private void cboProdTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProdTypeActionPerformed
        if (cboProdType.getSelectedIndex() > 0) {        // TODO add your handling code here:
            String prodType = ((ComboBoxModel) cboProdType.getModel()).getKeyForSelected().toString();
            observable.setCbmProdId(prodType);
            //            if(prodType.equals("TD")){
            //                ClientUtil.displayAlert("Not allowing for crediting this Account No...");
            //                cboProdType.setSelectedItem("");
            //                cboProdId.setSelectedItem("");
            //            }
            if (prodType.equals("GL")) {
                cboProdId.setSelectedItem("");
                cboProdId.setEnabled(false);
                txtCustomerIdCr.setText("");
                lblAccountNo.setText("Account Head Id");
                lblCustomerNameCr.setText("A/c Hd Description");
                lblCustomerNameCrValue.setText("");
                btnCustomerIdFileOpenCr.setEnabled(true);
            } else if (prodType.equals("RM")) {
                lblAccountNo.setText("Favouring Name");
                lblCustomerNameCr.setText("Favouring Name");
                btnCustomerIdFileOpenCr.setEnabled(false);
                txtCustomerIdCr.setText("");
                lblCustomerNameCrValue.setText("");
                //                cboProdId.setEnabled(false);
                txtCustomerIdCr.setEnabled(true);
            } else {
                cboProdId.setEnabled(true);
                if (prodType.equals("MDS")) {
                    lblAccountNo.setText("Chittal No");
                } else {
                    lblAccountNo.setText("Account No");
                }
                lblCustomerNameCr.setText("Customer Name");
                txtCustomerIdCr.setText("");
                lblCustomerNameCrValue.setText("");
                btnCustomerIdFileOpenCr.setEnabled(true);
//                Commented by nikhil
//                txtCustomerIdCr.setEnabled(false);
            }
            if (!prodType.equals("GL")) {
                cboProdId.setModel(observable.getCbmProdId());
            }
            //            }else
            //                cboProdId.setSelectedItem("PAY ORDR");
            if ((observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW)
                    || (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW_MODE)) {
                cboInterestPaymentMode.setEnabled(false);
                cboProdType.setEnabled(false);
                cboProdId.setEnabled(false);
                txtCustomerIdCr.setEnabled(false);
                btnCustomerIdFileOpenCr.setEnabled(false);
                cboInterestPaymentFrequency.setEnabled(false);
            }
        }
    }//GEN-LAST:event_cboProdTypeActionPerformed

    private void btnCustomerIdFileOpen1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomerIdFileOpen1ActionPerformed
        observable.setActionType(ClientConstants.ACTIONTYPE_VIEW_MODE);
        btnSave.setEnabled(false);
        callView("CLOSED_DEPOSIT");
        //system.out.println("getSelectedBranch" + getSelectedBranchID());
        poaUI.ttNotifyObservers();
        btnSave.setEnabled(false);// TODO add your handling code here:
        btnCancel.setEnabled(true);
        btnNew.setEnabled(false);
        btnEdit.setEnabled(false);
        btnView.setEnabled(false);
        btnPrint.setEnabled(false);
        rdoDeathClaim_Yes.setEnabled(false);
        rdoDeathClaim_No.setEnabled(false);
    }//GEN-LAST:event_btnCustomerIdFileOpen1ActionPerformed

    private void txtPeriodOfDeposit_YearsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPeriodOfDeposit_YearsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPeriodOfDeposit_YearsActionPerformed

    private void chk15hDeclarationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk15hDeclarationsActionPerformed
        //        if(chkMember.isSelected() == true){
        //            chkTaxDeductions.setSelected(false);        // TODO add your handling code here:
        chk15hDeclarations.setSelected(true);
        //            chkTaxDeductions.setEnabled(false);
        //            chk15hDeclarations.setEnabled(false);
        //        }else{
        //            chkTaxDeductions.setSelected(false);        // TODO add your handling code here:
        //            chk15hDeclarations.setSelected(true);
        //            chkTaxDeductions.setEnabled(false);
        //            chk15hDeclarations.setEnabled(false);
        //        }
    }//GEN-LAST:event_chk15hDeclarationsActionPerformed

    private void chkTaxDeductionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTaxDeductionsActionPerformed
        //        if(chkMember.isSelected() == true){
        chkTaxDeductions.setSelected(true);        // TODO add your handling code here:
        //            chk15hDeclarations.setSelected(false);
        //            chkTaxDeductions.setEnabled(false);
        //            chk15hDeclarations.setEnabled(false);
        //        }else{
        //            chk15hDeclarations.setSelected(false);
        //            chkTaxDeductions.setSelected(true);
        //            chkTaxDeductions.setEnabled(false);
        //            chk15hDeclarations.setEnabled(false);
        //        }
    }//GEN-LAST:event_chkTaxDeductionsActionPerformed

    private void mitExceptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitExceptionActionPerformed
        btnExceptionActionPerformed(evt);
    }//GEN-LAST:event_mitExceptionActionPerformed

    private void mitRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitRejectActionPerformed
        btnRejectActionPerformed(evt);
    }//GEN-LAST:event_mitRejectActionPerformed

    private void mitAuthorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitAuthorizeActionPerformed
        btnAuthorizeActionPerformed(evt);
    }//GEN-LAST:event_mitAuthorizeActionPerformed

    private void cboInterestPaymentFrequencyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cboInterestPaymentFrequencyFocusLost
        //        validatePaymentFreq();
        //        txtDepositAmtFocusLost();
        if (txtDepositAmount.getText().length() > 0
                && CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue() > 0) {
            periodCalculationMethod();
        }
    }//GEN-LAST:event_cboInterestPaymentFrequencyFocusLost
    private void btnCheck() {
        btnCancel.setEnabled(true);
        btnSave.setEnabled(false);
        btnNew.setEnabled(false);
        btnDelete.setEnabled(false);
        btnAuthorize.setEnabled(false);
        btnReject.setEnabled(false);
        btnException.setEnabled(false);
        btnEdit.setEnabled(false);
    }

    private void validatePaymentFreq() {
        getPeriod();
        periodCalculationMethod();
        if (period <= totalDays) {
            if (cboInterestPaymentFrequency.getSelectedItem().equals("Yearly")) {
                cboInterestPaymentFrequency.setSelectedItem("");
                txtPeriodOfDeposit_Years.requestFocus();
            }
        }
        if (period <= totalDays / 2) {
            if (cboInterestPaymentFrequency.getSelectedItem().equals("Half Yearly")) {
                cboInterestPaymentFrequency.setSelectedItem("");
                txtPeriodOfDeposit_Years.requestFocus();
            }
        }
        if (period <= totalDays / 4) {
            if (cboInterestPaymentFrequency.getSelectedItem().equals("Quaterly")) {
                cboInterestPaymentFrequency.setSelectedItem("");
                txtPeriodOfDeposit_Years.requestFocus();
            }
        }
        if (period <= daysInMonth) {
            if (cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")) {
                cboInterestPaymentFrequency.setSelectedItem("");
                txtPeriodOfDeposit_Days.setText("");
                txtPeriodOfDeposit_Years.requestFocus();
            }
        }
        if (period <= daysInMonth) {
            if (cboInterestPaymentFrequency.getSelectedItem().equals("Date of Maturity")) {
                //                cboInterestPaymentFrequency.setSelectedItem("");
                //                txtPeriodOfDeposit_Years.requestFocus();
            }
        }
        //        if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) &&
        //        cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")){
        //            int days = CommonUtil.convertObjToInt(txtPeriodOfDeposit_Days.getText());
        //            if(days >0){
        //                ClientUtil.displayAlert("Enter Years and Months only.....");
        ////                txtPeriodOfDeposit_Days.setText("");
        //                //                txtPeriodOfDeposit_Days.setEnabled(false);
        //                cboInterestPaymentFrequency.setSelectedItem("Monthly");
        //            }else{
        //                txtPeriodOfDeposit_Days.setText("");
        //                txtPeriodOfDeposit_Days.setEnabled(true);
        //            }
        //        }
        //        if(viewType == ClientConstants.VIEW_TYPE_RENEW){
        //            if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
        //                if(cboInterestPaymentFrequency.getSelectedItem().equals("Date of Maturity")||
        //                cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")||
        //                cboInterestPaymentFrequency.getSelectedItem().equals("Quaterly")||
        //                cboInterestPaymentFrequency.getSelectedItem().equals("Half Yearly")||
        //                cboInterestPaymentFrequency.getSelectedItem().equals("Yearly")||
        //                cboInterestPaymentFrequency.getSelectedItem().equals("")){
        //                    if(cboInterestPaymentFrequency.getSelectedItem().equals("")){
        //                        cboInterestPaymentFrequency.requestFocus();
        //                        return;
        //                    }else if(cboInterestPaymentFrequency.getSelectedItem().equals("Date of Maturity")||
        //                    cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")||
        //                    cboInterestPaymentFrequency.getSelectedItem().equals("Quaterly")||
        //                    cboInterestPaymentFrequency.getSelectedItem().equals("Half Yearly")||
        //                    cboInterestPaymentFrequency.getSelectedItem().equals("Yearly")){
        //                        double days = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Days.getText()).doubleValue();
        //                        if(days>0)
        //                            btnDepSubNoAccSave.requestFocus();
        //                        else
        //                            btnDepSubNoAccSave.requestFocus();
        //                        txtDepositAmtFocusLost();
        //                        cboInterestPaymentFreqActionPerformed();
        //                        settingMaturityValues();
        //                    }
        //                }
        //            }
        //        }
        if (viewType == ClientConstants.VIEW_TYPE_EDIT && observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && observable.totalIntCredit == 0) {
            txtDepositAmtFocusLost();
        }
        if ((observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW)
                || (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW_MODE)) {
            cboInterestPaymentMode.setEnabled(false);
            cboProdType.setEnabled(false);
            cboProdId.setEnabled(false);
            txtCustomerIdCr.setEnabled(false);
            btnCustomerIdFileOpenCr.setEnabled(false);
            cboInterestPaymentFrequency.setEnabled(false);
        }
    }

    private void getRenewalPeriod() {
        int YrsToDay = 0;
        int MonthsToDay = 0;
        int daysEntered = 0;
        period = 0;
        if ((txtRenewalPeriodOfDeposit_Years.getText() != null) && (!txtRenewalPeriodOfDeposit_Years.getText().equals(""))) {
            YrsToDay = (Integer.parseInt(txtRenewalPeriodOfDeposit_Years.getText())) * 365;
        }
        if ((txtRenewalPeriodOfDeposit_Months.getText() != null) && (!txtRenewalPeriodOfDeposit_Months.getText().equals(""))) {
            //            MonthsToDay = ((Integer.parseInt(txtRenewalPeriodOfDeposit_Months.getText()))*30);
            double txtBoxPeriod = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Months.getText()).doubleValue();
            String totMonths = String.valueOf(txtBoxPeriod / 12);
            long totyears = new Long(totMonths.substring(0, totMonths.indexOf("."))).longValue();
            double leftOverMth = new Double(totMonths.substring(totMonths.indexOf("."))).doubleValue();
            java.text.DecimalFormat df = new java.text.DecimalFormat("#####");
            leftOverMth = new Double(df.format(leftOverMth * 12)).doubleValue();
            MonthsToDay = (int) ((totyears * 365) + (int) (leftOverMth * 30));
        }
        if ((txtRenewalPeriodOfDeposit_Days.getText() != null) && (!txtRenewalPeriodOfDeposit_Days.getText().equals(""))) {
            daysEntered = Integer.parseInt(txtRenewalPeriodOfDeposit_Days.getText());
        }
        period = (YrsToDay + MonthsToDay + daysEntered);
    }

    private void getPeriod() {
        int YrsToDay = 0;
        int MonthsToDay = 0;
        int daysEntered = 0;
        period = 0;
        if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
            YrsToDay = (Integer.parseInt(txtPeriodOfDeposit_Years.getText())) * 365;
        }
        if ((txtPeriodOfDeposit_Months.getText() != null) && (!txtPeriodOfDeposit_Months.getText().equals(""))) {
            MonthsToDay = ((Integer.parseInt(txtPeriodOfDeposit_Months.getText())) * 30);
        }
        if ((txtPeriodOfDeposit_Days.getText() != null) && (!txtPeriodOfDeposit_Days.getText().equals(""))) {
            daysEntered = Integer.parseInt(txtPeriodOfDeposit_Days.getText());
        }
        period = (YrsToDay + MonthsToDay + daysEntered);
    }
    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        HashMap reportParamMap = new HashMap();        // TODO add your handling code here:
        com.see.truetransact.clientutil.ttrintegration.LinkReport.getReports(getScreenID(), reportParamMap);
    }//GEN-LAST:event_btnPrintActionPerformed

    private void lblValAgentnameMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblValAgentnameMouseMoved
        lblValAgentname.setToolTipText(lblValAgentname.getText());
    }//GEN-LAST:event_lblValAgentnameMouseMoved

    private void lblProductDescriptionMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblProductDescriptionMouseMoved
        lblProductDescription.setToolTipText(observable.getLblProductDescription());
    }//GEN-LAST:event_lblProductDescriptionMouseMoved

    private void btnAgentIdFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgentIdFileOpenActionPerformed
        callView(VIEW_TYPE_AGENT_ID);
    }//GEN-LAST:event_btnAgentIdFileOpenActionPerformed

    private void cboCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboCategoryActionPerformed
        if (rdoOpeningMode_Multiple.isSelected() == true && viewType != ClientConstants.VIEW_TYPE_RENEW
                && txtDepositAmount.getText().length() > 0) {
            txtDepositAmount.requestFocus();
        } else if (txtDepositAmount.getText().length() > 0) {
            String strBehavesLikeNowSelected = CommonUtil.convertObjToStr(((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
            String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(strProductIdInRenew));
            //            if(observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)){
            //                cboInterestPaymentFrequency.setSelectedItem("Date of Maturity");
            cboInterestPaymentFrequency.setEnabled(true);
            //            }else
            //                cboInterestPaymentFrequency.setEnabled(true);
            txtPeriodOfDeposit_Years.setEnabled(true);
            txtPeriodOfDeposit_Months.setEnabled(true);
            txtPeriodOfDeposit_Days.setEnabled(true);
            txtPeriodOfDeposit_Years.requestFocus();
        }   
             
        
                                            }//GEN-LAST:event_cboCategoryActionPerformed

    private void txtInterestProvidedAmountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInterestProvidedAmountFocusGained
//        if(tblDepSubNoAccInfo.getRowCount() == 0 ){
        if (txtDepositAmount.getText().length() == 0) {
            CommonMethods.showDialogOk("Please enter the deposit sub account info");
            tabTermDeposit.setSelectedComponent(panAccountInformation);
//                btnDepSubNoAccNew.requestFocus(true);
        }
    }//GEN-LAST:event_txtInterestProvidedAmountFocusGained

    private void tdtDateOfTransferFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtDateOfTransferFocusGained
        // TODO add your handling code here:
//        if(tblDepSubNoAccInfo.getRowCount() == 0 ){
        if (txtDepositAmount.getText().length() == 0) {
            CommonMethods.showDialogOk("Please enter the deposit sub account info");
            tabTermDeposit.setSelectedComponent(panAccountInformation);
//                btnDepSubNoAccNew.requestFocus(true);
        }
    }//GEN-LAST:event_tdtDateOfTransferFocusGained
    private boolean renewalCategory() {
        boolean category;
        String[] obj4 = {"Yes", "No"};
        int option3 = COptionPane.showOptionDialog(null, ("Do you want to Change the Category?"), ("Deposit Renewal Option"),
                COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj4, obj4[0]);
        if (option3 == 0) {
            category = true;
        } else {
            category = false;
        }
        return category;
    }

    private double setExtensionRateOfInterset() {
        //        updateOBDepSubNo();
        observable.extension = true;
        double retInt = observable.setExtensionRateOfInterset(DateUtil.getDateMMDDYYYY(tdtExtensionMaturityDate.getDateValue()),
                CommonUtil.convertObjToDouble(txtExtensionDepositAmount.getText()).doubleValue(), observable.extension);
        //        updateDepSubNo();
        return retInt;
    }

    private void setExtensionYr() {
        if ((txtExtensionPeriodOfDeposit_Years.getText() != null) && (!txtExtensionPeriodOfDeposit_Years.getText().equals(""))) {
            yr = Double.parseDouble(txtExtensionPeriodOfDeposit_Years.getText());
        }

        if ((txtExtensionPeriodOfDeposit_Months.getText() != null) && (!txtExtensionPeriodOfDeposit_Months.getText().equals(""))) {
            yr = yr + (Double.parseDouble(txtExtensionPeriodOfDeposit_Months.getText()) / totalMonths);
        }

        if ((txtExtensionPeriodOfDeposit_Days.getText() != null) && (!txtExtensionPeriodOfDeposit_Days.getText().equals(""))) {
            yr = yr + (Double.parseDouble(txtExtensionPeriodOfDeposit_Days.getText()) / totalDays);
        }
    }

    private void txtLastTdsCollectedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLastTdsCollectedFocusLost
        // TODO add your handling code here:
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr)) {
            if (txtTotalNumberOfInstallments.getText().length() > 0) {
//                int tblDepSubNoAccInfoRowCount = tblDepSubNoAccInfo.getRowCount();

                int totalNumberOfInstallments = Integer.parseInt(txtTotalNumberOfInstallments.getText());
                double depositAmount = 0;
                double totalDepositAmount = 0;
//                for(int i=0; i<tblDepSubNoAccInfoRowCount;i++){
                if (txtDepositAmount.getText().length() > 0) {
//                    depositAmount = Double.parseDouble(CommonUtil.convertObjToStr(tblDepSubNoAccInfo.getValueAt(i, 1)));
                    depositAmount = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                    totalDepositAmount = totalDepositAmount + depositAmount;

                }
                totalDepositAmount = totalDepositAmount * totalNumberOfInstallments;
                txtTotalInstallmentReceived.setText(String.valueOf(totalDepositAmount));
            } else {
                CommonMethods.showDialogOk("please enter the total number of installments");
                txtLastTdsCollected.setText("");
            }
        }
    }//GEN-LAST:event_txtLastTdsCollectedFocusLost
    public boolean renewalChangePeriod() {
        boolean period = false;
        String[] obj3 = {"Yes ", "No"};
        int option2 = COptionPane.showOptionDialog(null, ("Do you want to Change Product Id?"), ("Deposit Renewal Option"),
                COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj3, obj3[0]);
        if (option2 == 0) {
            period = true;
        } else {
            period = false;
        }
        return period;
    }
    private void btnTransBranchCodeHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransBranchCodeHelpActionPerformed
        // TODO add your handling code here:
        callView("BRANCH CODE");
    }//GEN-LAST:event_btnTransBranchCodeHelpActionPerformed
    private void setMatDtAccordingToPaymentTypeForRD() {
    }
    private void txtInterestProvidedAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInterestProvidedAmountFocusLost
        // TODO add your handling code here:
        if ((txtInterestProvidedAmount.getText() != null) && (!txtInterestProvidedAmount.getText().equalsIgnoreCase(""))) {
//            int tblDepSubNoAccInfoRowCount = tblDepSubNoAccInfo.getRowCount();
            double interestProvidedAmount = Double.parseDouble(txtInterestProvidedAmount.getText());
            StringBuffer intProvAmtWarning = new StringBuffer();
//            if(tblDepSubNoAccInfoRowCount == 0){
            if (txtDepositAmount.getText().length() == 0) {
                CommonMethods.showDialogOk("Please enter the Deposite sub account Info..");
                txtInterestProvidedAmount.setText("");
            } else {
                double totalInterestAmount = 0;
//                for(int i=0;i<tblDepSubNoAccInfoRowCount;i++){
                if (txtDepositAmount.getText().length() > 0) {
//                    totalInterestAmount = totalInterestAmount + Double.parseDouble(CommonUtil.convertObjToStr(tblDepSubNoAccInfo.getValueAt(i, 3)));
                    totalInterestAmount = totalInterestAmount + CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                }
                if (interestProvidedAmount >= totalInterestAmount) {
                    intProvAmtWarning.append("Please enter the amount less than ");
                    intProvAmtWarning.append(totalInterestAmount);
                    CommonMethods.showDialogOk(CommonUtil.convertObjToStr(intProvAmtWarning));
                    txtInterestProvidedAmount.setText("");
                    txtInterestProvidedAmount.requestFocus(true);
                } else {
                    totalInterestAmount = totalInterestAmount - interestProvidedAmount;
                    lblValBalanceInterestPayable.setText(String.valueOf(totalInterestAmount));
                }
            }
        }
    }//GEN-LAST:event_txtInterestProvidedAmountFocusLost
    private void cboExtensionInterestPaymentFreqActionPerformed() {
        if ((!cboExtensionInterestPaymentFrequency.getSelectedItem().equals("")) && (cboExtensionInterestPaymentFrequency.getSelectedItem() != null)) {
            if ((txtExtensionTotalInterestAmount.getText() != null) && (!txtExtensionTotalInterestAmount.getText().equals(""))) {
                double perIntAmt = 0;
                setExtensionYr();
                double totalIntAmtPerYear = (Double.parseDouble(txtExtensionTotalInterestAmount.getText()) / yr);
                if (cboExtensionInterestPaymentFrequency.getSelectedItem().equals(observable.HALFYEARLY)) {
                    perIntAmt = totalIntAmtPerYear / perHalfYear;
                } else if (cboExtensionInterestPaymentFrequency.getSelectedItem().equals(observable.MONTHLY)) {
                    perIntAmt = totalIntAmtPerYear / perMonth;

                    double depositAmt = Double.parseDouble(txtExtensionDepositAmount.getText());

                    //--- Calculation for Period as No.Of Days
                    int YrsToDay = 0;
                    int MonToDay = 0;
                    int daysEntered = 0;
                    int periodInDays = 0;
                    if ((txtExtensionPeriodOfDeposit_Years.getText() != null) && (!txtExtensionPeriodOfDeposit_Years.getText().equals(""))) {
                        YrsToDay = (Integer.parseInt(txtExtensionPeriodOfDeposit_Years.getText())) * 365;
                    }
                    if ((txtExtensionPeriodOfDeposit_Months.getText() != null) && (!txtExtensionPeriodOfDeposit_Months.getText().equals(""))) {
                        MonToDay = ((Integer.parseInt(txtExtensionPeriodOfDeposit_Months.getText())) * 30);
                    }
                    if ((txtExtensionPeriodOfDeposit_Days.getText() != null) && (!txtExtensionPeriodOfDeposit_Days.getText().equals(""))) {
                        daysEntered = Integer.parseInt(txtExtensionPeriodOfDeposit_Days.getText());
                    }
                    periodInDays = (YrsToDay + MonToDay + daysEntered);
                } else if (cboExtensionInterestPaymentFrequency.getSelectedItem().equals(observable.YEARLY)) {
                    perIntAmt = totalIntAmtPerYear;
                } else if (cboExtensionInterestPaymentFrequency.getSelectedItem().equals(observable.QUARTERLY)) {
                    perIntAmt = totalIntAmtPerYear / perQuarterYear;
                } else if (cboExtensionInterestPaymentFrequency.getSelectedItem().equals(observable.DATEOFMATURITY)) {
                    perIntAmt = 0;
                }
                //system.out.println("perIntAmt" + perIntAmt);
                try {
                    if(depInt!=null && depInt.equals("N")){
                    	perIntAmt = (double) getNearest((long) (perIntAmt * 100), 100) / 100;
                    }else{
                        DecimalFormat df= new DecimalFormat("#.##");
                        perIntAmt=CommonUtil.convertObjToDouble(df.format(perIntAmt));
                    }
                    //system.out.println("#### cboInterestPaymentFreqActionPerformed " + perIntAmt);
                } catch (Exception e) {
                    //system.out.println(e);
                }
                observable.setExtensiontxtPeriodicInterestAmount(String.valueOf(perIntAmt));
                txtExtensionPeriodicInterestAmount.setText(observable.getExtensiontxtPeriodicInterestAmount());
            }
        } else if ((cboExtensionInterestPaymentFrequency.getSelectedItem().equals(""))
                || (cboExtensionInterestPaymentFrequency.getSelectedItem() == null)) {
            observable.setTxtPeriodicInterestAmount("");
            txtExtensionPeriodicInterestAmount.setText(observable.getExtensiontxtPeriodicInterestAmount());
        }
    }
    private void periodExtensionCalculationMethod() {
        if (txtExtensionPeriodOfDeposit_Years.getText().length() >= 0 && txtExtensionPeriodOfDeposit_Months.getText().length() >= 0 && txtExtensionPeriodOfDeposit_Days.getText().length() >= 0) {
            txtExtensionDepositAmtFocusLost();
            cboExtensionInterestPaymentFreqActionPerformed();
        }
    }
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        //        closeOperation();
        //        btnCancelActionPerformed(null);
        cifClosingAlert();
    }//GEN-LAST:event_formInternalFrameClosing
    private void txtExtensionDepositAmtFocusLost() {
        if ((txtExtensionDepositAmount.getText() != null) && (!txtExtensionDepositAmount.getText().equals(""))) {
            HashMap detailsHash = new HashMap();
            rateFlag = false;
            double amt = Double.parseDouble(CommonUtil.convertObjToStr(txtExtensionDepositAmount.getText()));
            double maxAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_AMT")));
            double minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
            double multAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("AMT_MULTIPLES")));
            detailsHash.put("AMT_MULTIPLES", new Double(multAmt));
            String intType = (String) ((ComboBoxModel) this.cboExtensionInterestPaymentFrequency.getModel()).getKeyForSelected();
            double secTerm = 0;//--- If Year is not filled, then assign "0" to it.
            if (txtExtensionPeriodOfDeposit_Years.getText().length() == 0) {
                observable.setTxtPeriodOfDeposit_Years("0");
                txtPeriodOfDeposit_Years.setText(observable.getTxtPeriodOfDeposit_Years());
            }
            if (txtExtensionPeriodOfDeposit_Months.getText().length() == 0) {
                observable.setTxtPeriodOfDeposit_Months("0");
                txtPeriodOfDeposit_Months.setText(observable.getTxtPeriodOfDeposit_Months());
            }
            if (txtExtensionPeriodOfDeposit_Days.getText().length() == 0) {
                observable.setTxtPeriodOfDeposit_Days("0");
                txtPeriodOfDeposit_Days.setText(observable.getTxtPeriodOfDeposit_Days());
            }
            String ExtensionprodId = ((ComboBoxModel) cboExtensionDepositProdId.getModel()).getKeyForSelected().toString();
            String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(ExtensionprodId));
            if (strBehavesLike.equals("FIXED")) {
                String prodType = ((ComboBoxModel) cboExtensionInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
                int freq = CommonUtil.convertObjToInt(prodType);
                if (freq == 0 && cboExtensionInterestPaymentFrequency.getSelectedItem().equals("")) {
                    ClientUtil.showAlertWindow("Choose Int Pay Frequency...");
                    cboInterestPaymentFrequency.setEnabled(true);
                    return;
                }
                if (freq == 30) {
                    detailsHash.put("INTEREST_TYPE", "MONTHLY");
                } else if (freq == 90) {
                    detailsHash.put("INTEREST_TYPE", "QUATERLY");
                } else if (freq == 180) {
                    detailsHash.put("INTEREST_TYPE", "HALF YEARLY");
                } else if (freq == 0) {
                    detailsHash.put("INTEREST_TYPE", "DATE OF MATURITY");
                } else if (freq == 360) {
                    detailsHash.put("INTEREST_TYPE", "YEARLY");
                } else if (freq == 60) {
                    detailsHash.put("INTEREST_TYPE", "2MONTHS");
                } else if (freq == 120) {
                    detailsHash.put("INTEREST_TYPE", "4MONTHS");
                } else if (freq == 150) {
                    detailsHash.put("INTEREST_TYPE", "5MONTHS");
                } else if (freq == 210) {
                    detailsHash.put("INTEREST_TYPE", "7MONTHS");
                } else if (freq == 240) {
                    detailsHash.put("INTEREST_TYPE", "8MONTHS");
                } else if (freq == 270) {
                    detailsHash.put("INTEREST_TYPE", "9MONTHS");
                } else if (freq == 300) {
                    detailsHash.put("INTEREST_TYPE", "10MONTHS");
                } else if (freq == 330) {
                    detailsHash.put("INTEREST_TYPE", "11MONTHS");
                }

//                if(detailsHash.get("INTEREST_TYPE").equals("MONTHLY")){
//                    period = CommonUtil.convertObjToDouble(txtExtensionPeriodOfDeposit_Years.getText()).doubleValue() *360;
//                    period = period + CommonUtil.convertObjToDouble(txtExtensionPeriodOfDeposit_Months.getText()).doubleValue() *30;
//                    if(period <360){
//                        ClientUtil.showAlertWindow("Not able to give Monthly Interest for this Period ");
//                        return;
//                    }
//                }
                int days = CommonUtil.convertObjToInt(txtExtensionPeriodOfDeposit_Days.getText());
                if (days > 0) {
                    cboInterestPaymentFreqActionPerformed();
                }
            }
            if (!strBehavesLike.equals("DAILY")) {
                if (amt >= minAmt && amt <= maxAmt) { // Checks the Amount entered to be between the Acccpeted Range
                    //                    observable.setExtensionRateOfInterset("");
                    if (amt % multAmt == 0) {          // and is Multiples of predefined value
                        double retInt = 0.0;
                        retInt = setExtensionRateOfInterset();
                        if ((viewType == ClientConstants.VIEW_TYPE_EXTENSION || viewType.equals("CUSTOMER ID")
                                || viewType.equals("EXTENSION_PAYMODE") || viewType.equals("EXTENSION_TRANS")
                                || viewType.equals("EDIT") || viewType.equals("EXTENSION_OF_DEPOSIT"))
                                && retInt != 0 && retInt != -1) {
                            double maturityAmt = 0.0;
                            double depositAmt = 0;
                            double interestAmt = 0;
                            txtExtensionRateOfInterest.setText(String.valueOf(retInt));
                            detailsHash.put("AMOUNT", txtExtensionDepositAmount.getText());
                            detailsHash.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(tdtExtensionDateOfDeposit.getDateValue()));
                            observable.setExtensiontxtPeriodOfDeposit_Days(txtExtensionPeriodOfDeposit_Days.getText());
                            observable.setExtensiontxtPeriodOfDeposit_Months(txtExtensionPeriodOfDeposit_Months.getText());
                            observable.setExtensiontxtPeriodOfDeposit_Years(txtExtensionPeriodOfDeposit_Years.getText());
                            detailsHash.put("PERIOD_DAYS", txtExtensionPeriodOfDeposit_Days.getText());
                            detailsHash.put("PERIOD_MONTHS", txtExtensionPeriodOfDeposit_Months.getText());
                            detailsHash.put("PERIOD_YEARS", txtExtensionPeriodOfDeposit_Years.getText());
                            detailsHash.put("MATURITY_DT", DateUtil.getDateMMDDYYYY(tdtExtensionMaturityDate.getDateValue()));
                            detailsHash.put("ROI", txtExtensionRateOfInterest.getText());
                            detailsHash.put("DISCOUNTED_RATE", depProdDetails.get("DISCOUNTED_RATE"));
                            detailsHash.put("BEHAVES_LIKE", strBehavesLike);
                            detailsHash = observable.setExtensionAmountsAccROI(detailsHash, null);
                            //system.out.println("$$$$$detailshash :4444" + detailsHash);
                            HashMap roundMap1 = new HashMap();
                            // String a=CommonUtil.convertObjToStr(((ComboBoxModel)cboProdId.getModel()).getKeyForSelected());
                            //String a=CommonUtil.convertObjToStr(cboProdId.getSelectedItem());
                            String a1 = (String) ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected();
                            //system.out.println("Prodidddddd42444 " + a1);
                            roundMap1.put("PROD_ID", a1);
                            List roundgList1 = ClientUtil.executeQuery("getRoungOffTypeInterest", roundMap1);
                            if (!roundgList1.isEmpty()) {
                                roundMap1 = (HashMap) roundgList1.get(0);
                            }
                            //system.out.println("roundingList44444 = " + roundgList1 + "   Map12212 " + roundMap1);
                            if (strBehavesLike.equals("FIXED")) {
                                maturityAmt = CommonUtil.convertObjToDouble(txtExtensionDepositAmount.getText()).doubleValue();
                                interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("NEAREST_VALUE")) {
                                    interestAmt = (double) getNearest((long) (interestAmt * 100), 100) / 100;
                                } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                    interestAmt = (double) roundOffLower((long) (interestAmt * 100), 100) / 100;
                                } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("HIGHER_VALUE")) {
                                    interestAmt = (double) higher((long) (interestAmt * 100), 100) / 100;
                                } else {
                                    //system.out.println(" in no round44444");
                                    interestAmt = new Double(interestAmt);
                                    //system.out.println("interestAmt 44444" + interestAmt);
                                }
                            } else if (strBehavesLike.equals("CUMMULATIVE")) {
                                maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("NEAREST_VALUE")) {
                                    maturityAmt = (double) getNearest((long) (maturityAmt * 100), 100) / 100;
                                } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                    maturityAmt = (double) roundOffLower((long) (maturityAmt * 100), 100) / 100;
                                } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("HIGHER_VALUE")) {
                                    maturityAmt = (double) higher((long) (maturityAmt * 100), 100) / 100;
                                } else {
                                    //system.out.println(" in no round5555");
                                    maturityAmt = new Double(maturityAmt);
                                    //system.out.println("maturityAmt 5555" + maturityAmt);
                                }
                                interestAmt = maturityAmt - CommonUtil.convertObjToDouble(txtExtensionDepositAmount.getText()).doubleValue();
                            } else {
                                if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("NEAREST_VALUE")) {
                                    maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                    maturityAmt = (double) getNearest((long) (maturityAmt * 100), 100) / 100;
                                    interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                    interestAmt = (double) getNearest((long) (interestAmt * 100), 100) / 100;
                                } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                    maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                    maturityAmt = (double) roundOffLower((long) (maturityAmt * 100), 100) / 100;
                                    interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                    interestAmt = (double) roundOffLower((long) (interestAmt * 100), 100) / 100;
                                } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("HIGHER_VALUE")) {
                                    maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                    maturityAmt = (double) higher((long) (maturityAmt * 100), 100) / 100;
                                    interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                    interestAmt = (double) higher((long) (interestAmt * 100), 100) / 100;
                                } else {
                                    //system.out.println(" in no round4444@@@1111");
                                    maturityAmt = new Double(maturityAmt);
                                    interestAmt = new Double(interestAmt);
                                    //system.out.println("maturityAmt 4444@@@@1111" + maturityAmt + "nbdhad@@@@111" + interestAmt);
                                }
                            }
                            observable.setExtensiontxtMaturityAmount(String.valueOf(maturityAmt));
                            txtExtensionMaturityAmount.setText(observable.getExtensiontxtMaturityAmount());
                            observable.setExtensiontxtTotalInterestAmount(String.valueOf(interestAmt));
                            txtExtensionTotalInterestAmount.setText(observable.getExtensiontxtTotalInterestAmount());

                            if (!interestYesNo) {
                                observable.setExtensiontxtMaturityAmount(txtExtensionDepositAmount.getText());
                            }
                            txtExtensionMaturityAmount.setText(observable.getExtensiontxtMaturityAmount());
                            //system.out.println("#### Second time txtPeriodOfDeposit_Days " + txtMaturityAmount.getText());
                        } else {
                            rateFlag = true;
                            observable.msgIntWarn();
                        }
                    } else {
                        if (!viewType.equals(ClientConstants.VIEW_TYPE_EXTENSION)){
                            CommonMethods.displayAlert("Amount Should Be Multiples Of : " + multAmt);
                            observable.resetAmount();
                        } else if (viewType.equals(ClientConstants.VIEW_TYPE_EXTENSION)) {
                            CommonMethods.displayAlert("Amount Should Be Multiples Of : " + multAmt);
                        }
                    }
                } else {
                    CommonMethods.showDialogOk("Amount is Less than the Minimum Deposit Amount");
                    txtExtensionDepositAmount.requestFocus();
                    return;
                }
            }
        }
        cboInterestPaymentFreqActionPerformed();
    }
    private void tblJointAcctHolderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblJointAcctHolderFocusLost
    }//GEN-LAST:event_tblJointAcctHolderFocusLost
    private int chkPeriodMultiplesofExtension() {
        int YearsChk = 0;
        int MonthsChk = 0;
        int DaysChk = 0;
        int totalDays;
        int multDays = 0;
        int retVal = -1;
        if ((txtExtensionPeriodOfDeposit_Years.getText() != null) && (!txtExtensionPeriodOfDeposit_Years.getText().equals(""))) {
            YearsChk = (Integer.parseInt(CommonUtil.convertObjToStr(txtExtensionPeriodOfDeposit_Years.getText()))) * 365;
        }
        if ((txtExtensionPeriodOfDeposit_Months.getText() != null) && (!txtExtensionPeriodOfDeposit_Months.getText().equals(""))) {
            MonthsChk = (Integer.parseInt(CommonUtil.convertObjToStr(txtExtensionPeriodOfDeposit_Months.getText()))) * 30;
        }
        if ((txtExtensionPeriodOfDeposit_Days.getText() != null) && (!txtExtensionPeriodOfDeposit_Days.getText().equals(""))) {
            DaysChk = Integer.parseInt(CommonUtil.convertObjToStr(txtExtensionPeriodOfDeposit_Days.getText()));
        }
        totalDays = YearsChk + MonthsChk + DaysChk;
        multDays = Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
        if (totalDays != 0) {
            retVal = (totalDays % multDays);
        } else {
            retVal = -1;
        }
        return retVal;
    }
    private void tdtLastInstallmentReceivedDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtLastInstallmentReceivedDateFocusLost
        if ((tdtLastInstallmentReceivedDate.getDateValue() != null) && (!tdtLastInstallmentReceivedDate.getDateValue().equals(""))) {
            ClientUtil.validateToDate(tdtLastInstallmentReceivedDate, DateUtil.getStringDate(DateUtil.getDateMMDDYYYY(tdtOriginalDateOfDeposit.getDateValue())));
            ClientUtil.validateFromDate(tdtLastInstallmentReceivedDate, DateUtil.getStringDate(DateUtil.getDateMMDDYYYY(tdtDateOfTransfer.getDateValue())));
            ClientUtil.validateLTDate(tdtLastInstallmentReceivedDate);
        }
    }//GEN-LAST:event_tdtLastInstallmentReceivedDateFocusLost
    private void setRenewalYr() {
        if ((txtRenewalPeriodOfDeposit_Years.getText() != null) && (!txtRenewalPeriodOfDeposit_Years.getText().equals(""))) {
            yr = Double.parseDouble(txtRenewalPeriodOfDeposit_Years.getText());
        }

        if ((txtRenewalPeriodOfDeposit_Months.getText() != null) && (!txtRenewalPeriodOfDeposit_Months.getText().equals(""))) {
            yr = yr + (Double.parseDouble(txtRenewalPeriodOfDeposit_Months.getText()) / totalMonths);
        }

        if ((txtRenewalPeriodOfDeposit_Days.getText() != null) && (!txtRenewalPeriodOfDeposit_Days.getText().equals(""))) {
            yr = yr + (Double.parseDouble(txtRenewalPeriodOfDeposit_Days.getText()) / totalDays);
        }
    }

    private void tdtTdsCollectedUptoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtTdsCollectedUptoFocusLost
        if ((tdtTdsCollectedUpto.getDateValue() != null) && (!tdtTdsCollectedUpto.getDateValue().equals(""))) {
            if (DateUtil.getDateMMDDYYYY(tdtTdsCollectedUpto.getDateValue()).after(DateUtil.getDateMMDDYYYY(DateUtil.getStringDate((Date) currDt.clone()))) == true) {
                observable.setTdtTdsCollectedUpto("");
                tdtTdsCollectedUpto.setDateValue(observable.getTdtTdsCollectedUpto());
            }
        }
    }//GEN-LAST:event_tdtTdsCollectedUptoFocusLost
    private int chkPeriodMultiplesofRenewal() {
        int YearsChk = 0;
        int MonthsChk = 0;
        int DaysChk = 0;
        int totalDays;
        int multDays = 0;
        int retVal = -1;
        if ((txtRenewalPeriodOfDeposit_Years.getText() != null) && (!txtRenewalPeriodOfDeposit_Years.getText().equals(""))) {
            YearsChk = (Integer.parseInt(CommonUtil.convertObjToStr(txtRenewalPeriodOfDeposit_Years.getText()))) * 365;
        }
        if ((txtRenewalPeriodOfDeposit_Months.getText() != null) && (!txtRenewalPeriodOfDeposit_Months.getText().equals(""))) {
            MonthsChk = (Integer.parseInt(CommonUtil.convertObjToStr(txtRenewalPeriodOfDeposit_Months.getText()))) * 30;
        }
        if ((txtRenewalPeriodOfDeposit_Days.getText() != null) && (!txtRenewalPeriodOfDeposit_Days.getText().equals(""))) {
            DaysChk = Integer.parseInt(CommonUtil.convertObjToStr(txtRenewalPeriodOfDeposit_Days.getText()));
        }
        totalDays = YearsChk + MonthsChk + DaysChk;
        multDays = Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
        if (totalDays != 0) {
            retVal = (totalDays % multDays);
        } else {
            retVal = -1;
        }
        return retVal;
    }

    private StringBuffer msgPeriodMultiplesOfRenewal() {
        HashMap depProdRenewalDetails = observable.getAcctHeadForProdRenewal();
        StringBuffer strBMsg = new StringBuffer();
        strBMsg.append(" The Deposit period should be in Multiples of ");
        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdRenewalDetails.get("PERIOD_MULTIPLES"))));
        return strBMsg;
    }

    private void getRnewalPeriod() {
        int YrsToDay = 0;
        int MonthsToDay = 0;
        int daysEntered = 0;
        period = 0;
        if ((txtRenewalPeriodOfDeposit_Years.getText() != null) && (!txtRenewalPeriodOfDeposit_Years.getText().equals(""))) {
            YrsToDay = (Integer.parseInt(txtRenewalPeriodOfDeposit_Years.getText())) * 365;
        }
        if ((txtRenewalPeriodOfDeposit_Months.getText() != null) && (!txtRenewalPeriodOfDeposit_Months.getText().equals(""))) {
            MonthsToDay = ((Integer.parseInt(txtRenewalPeriodOfDeposit_Months.getText())) * 30);
        }
        if ((txtRenewalPeriodOfDeposit_Days.getText() != null) && (!txtRenewalPeriodOfDeposit_Days.getText().equals(""))) {
            daysEntered = Integer.parseInt(txtRenewalPeriodOfDeposit_Days.getText());
        }
        period = (YrsToDay + MonthsToDay + daysEntered);
    }

    private StringBuffer msgMinPeriodRenewal() {
        StringBuffer strBMsg = new StringBuffer();
        HashMap depProdRenewalDetails = observable.getAcctHeadForProdRenewal();
        strBMsg.append(" Deposit can be Opened/Renewed for a Minimum period of ");
        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdRenewalDetails.get("MINIMUM_PERIOD_OF_RENEWAL"))));
        return strBMsg;
    }

    private StringBuffer msgMaxPeriodRenewal() {
        StringBuffer strBMsg = new StringBuffer();
        HashMap depProdRenewalDetails = observable.getAcctHeadForProdRenewal();
        strBMsg.append(" Deposit can be Opened/Renewed for a Maximum period of ");
        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdRenewalDetails.get("MAX_DEPOSIT_PERIOD"))));
        return strBMsg;
    }

    private StringBuffer msgMinMaxAmtRenewal() {
        HashMap depProdRenewalDetails = observable.getAcctHeadForProdRenewal();
        StringBuffer strBMsg = new StringBuffer();
        strBMsg.append(" The Amount should be between ");
        strBMsg.append(CommonUtil.convertObjToStr(depProdRenewalDetails.get("MIN_DEPOSIT_AMT")));
        strBMsg.append(" and ");
        strBMsg.append(CommonUtil.convertObjToStr(depProdRenewalDetails.get("MAX_DEPOSIT_AMT")));
        return strBMsg;
    }

    private void tdtLastInterestCalculatedDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtLastInterestCalculatedDateFocusLost
        if ((tdtLastInterestCalculatedDate.getDateValue() != null) && (!tdtLastInterestCalculatedDate.getDateValue().equals(""))) {
            if (DateUtil.getDateMMDDYYYY(tdtLastInterestCalculatedDate.getDateValue()).after(DateUtil.getDateMMDDYYYY(DateUtil.getStringDate((Date) currDt.clone()))) == true) {
                observable.setTdtLastInterestCalculatedDate("");
                tdtLastInterestCalculatedDate.setDateValue(observable.getTdtLastInterestCalculatedDate());
            }
        }
    }//GEN-LAST:event_tdtLastInterestCalculatedDateFocusLost
    private void cboRenewalInterestPaymentFreqActionPerformed() {
        if ((!cboRenewalInterestPaymentFrequency.getSelectedItem().equals("")) && (cboRenewalInterestPaymentFrequency.getSelectedItem() != null)) {
            if ((txtRenewalTotalInterestAmount.getText() != null) && (!txtRenewalTotalInterestAmount.getText().equals(""))) {
                double perIntAmt = 0;
                setRenewalYr();
                double totalIntAmtPerYear = (Double.parseDouble(txtRenewalTotalInterestAmount.getText()) / yr);
                if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals(observable.HALFYEARLY)) {
                    perIntAmt = totalIntAmtPerYear / perHalfYear;
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals(observable.MONTHLY)) {
                    perIntAmt = totalIntAmtPerYear / perMonth;

                    double depositAmt = Double.parseDouble(txtRenewalDepositAmount.getText());

                    //--- Calculation for Period as No.Of Days
                    int YrsToDay = 0;
                    int MonToDay = 0;
                    int daysEntered = 0;
                    int periodInDays = 0;
                    if ((txtRenewalPeriodOfDeposit_Years.getText() != null) && (!txtRenewalPeriodOfDeposit_Years.getText().equals(""))) {
                        YrsToDay = (Integer.parseInt(txtRenewalPeriodOfDeposit_Years.getText())) * 365;
                    }
                    if ((txtRenewalPeriodOfDeposit_Months.getText() != null) && (!txtRenewalPeriodOfDeposit_Months.getText().equals(""))) {
                        MonToDay = ((Integer.parseInt(txtRenewalPeriodOfDeposit_Months.getText())) * 30);
                    }
                    if ((txtRenewalPeriodOfDeposit_Days.getText() != null) && (!txtRenewalPeriodOfDeposit_Days.getText().equals(""))) {
                        daysEntered = Integer.parseInt(txtRenewalPeriodOfDeposit_Days.getText());
                    }
                    periodInDays = (YrsToDay + MonToDay + daysEntered);
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals(observable.YEARLY)) {
                    perIntAmt = totalIntAmtPerYear;
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals(observable.QUARTERLY)) {
                    perIntAmt = totalIntAmtPerYear / perQuarterYear;
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals(observable.DATEOFMATURITY)) {
                    perIntAmt = 0;
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals("2 Months")) {
                    perIntAmt = totalIntAmtPerYear / 6;
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals("4 Months")) {
                    perIntAmt = totalIntAmtPerYear / 3;
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals("5 Months")) {
                    perIntAmt = totalIntAmtPerYear / 2.4;
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals("7 Months")) {
                    perIntAmt = totalIntAmtPerYear / 1.7;
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals("8 Months")) {
                    perIntAmt = totalIntAmtPerYear / 1.5;
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals("9 Months")) {
                    perIntAmt = totalIntAmtPerYear / 1.33;
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals("10 Months")) {
                    perIntAmt = totalIntAmtPerYear / 1.2;
                } else if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals("11 Months")) {
                    perIntAmt = totalIntAmtPerYear / 1.09;
                }
                //system.out.println("perIntAmt" + perIntAmt);
                try {
                    if(depInt!=null && depInt.equals("N")){
                    	perIntAmt = (double) getNearest((long) (perIntAmt * 100), 100) / 100;
                    }else{
                      	DecimalFormat df= new DecimalFormat("#.##");
                        perIntAmt=CommonUtil.convertObjToDouble(df.format(perIntAmt));
                    }
                    //system.out.println("#### cboInterestPaymentFreqActionPerformed " + perIntAmt);
                } catch (Exception e) {
                    //system.out.println(e);
                }
                observable.setRenewaltxtPeriodicInterestAmount(String.valueOf(perIntAmt));
                txtRenewalPeriodicInterestAmount.setText(observable.getRenewaltxtPeriodicInterestAmount());
            }
        } else if ((cboRenewalInterestPaymentFrequency.getSelectedItem().equals(""))
                || (cboRenewalInterestPaymentFrequency.getSelectedItem() == null)) {
            observable.setTxtPeriodicInterestAmount("");
            txtRenewalPeriodicInterestAmount.setText(observable.getRenewaltxtPeriodicInterestAmount());
        }
    }
    private void tdtDateOfTransferFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtDateOfTransferFocusLost
        if (txtDepositAmount.getText().length() > 0) {
            String maturityDate = observable.getMaturityDateArrayList();
            ClientUtil.validateFromDate(tdtDateOfTransfer, DateUtil.getStringDate(DateUtil.getDateMMDDYYYY(maturityDate)));
            ClientUtil.validateLTDate(tdtDateOfTransfer);
        } else {
            tdtDateOfTransfer.setDateValue("");
        }
    }//GEN-LAST:event_tdtDateOfTransferFocusLost
    private double setrenewRateOfInterset() {
        //        updateOBDepSubNo();
        double retInt = observable.setRenewalRateOfInterset(null);
        //        updateDepSubNo();
        return retInt;
    }

    private void tdtOriginalDateOfDepositFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtOriginalDateOfDepositFocusLost
        if ((tdtOriginalDateOfDeposit.getDateValue() != null) && (!tdtOriginalDateOfDeposit.getDateValue().equals(""))) {
            int compareDate = DateUtil.getDateMMDDYYYY(tdtOriginalDateOfDeposit.getDateValue()).compareTo(DateUtil.getDateMMDDYYYY(DateUtil.getStringDate((Date) currDt.clone())));
            if (compareDate >= 0) {
                observable.setTdtOriginalDateOfDeposit("");
                tdtOriginalDateOfDeposit.setDateValue(observable.getTdtOriginalDateOfDeposit());
            }
        }
    }//GEN-LAST:event_tdtOriginalDateOfDepositFocusLost
    private void txtRenewalDepositAmtFocusLost() {
        if ((txtRenewalDepositAmount.getText() != null) && (!txtRenewalDepositAmount.getText().equals(""))) {
            HashMap detailsHash = new HashMap();
            rateFlag = false;
            double amt = Double.parseDouble(CommonUtil.convertObjToStr(txtRenewalDepositAmount.getText()));
            double maxAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_AMT")));
            double minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
            double multAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("AMT_MULTIPLES")));
            double multPeriod = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
            double multFreq = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
            detailsHash.put("AMT_MULTIPLES", new Double(multAmt));
            String intType = (String) ((ComboBoxModel) this.cboRenewalInterestPaymentFrequency.getModel()).getKeyForSelected();
            double secTerm = 0;//--- If Year is not filled, then assign "0" to it.
            double years = 0.0;
            double months = 0.0;
            double days = 0.0;
            double totalPeriod = 0.0;
            if (txtRenewalPeriodOfDeposit_Years.getText().length() == 0) {
                observable.setRenewaltxtPeriodOfDeposit_Years("0");
                txtRenewalPeriodOfDeposit_Years.setText(observable.getRenewaltxtPeriodOfDeposit_Years());
            } else {
                years = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Years.getText()).doubleValue();
                totalPeriod = years * 365;
            }
            if (txtRenewalPeriodOfDeposit_Months.getText().length() == 0) {
                observable.setRenewaltxtPeriodOfDeposit_Months("0");
                txtRenewalPeriodOfDeposit_Months.setText(observable.getRenewaltxtPeriodOfDeposit_Months());
            } else {
                months = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Months.getText()).doubleValue();
                totalPeriod += months * 30;
            }
            if (txtRenewalPeriodOfDeposit_Days.getText().length() == 0) {
                observable.setRenewaltxtPeriodOfDeposit_Days("0");
                txtRenewalPeriodOfDeposit_Days.setText(observable.getRenewaltxtPeriodOfDeposit_Days());
            } else {
                days = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Days.getText()).doubleValue();
                totalPeriod += days;
            }
            String renewalprodId = ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected().toString();
            String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(renewalprodId));
            if (strBehavesLike.equals("FIXED")) {
                String prodType = ((ComboBoxModel) cboRenewalInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
                int freq = CommonUtil.convertObjToInt(prodType);
                if (freq == 30) {
                    detailsHash.put("INTEREST_TYPE", "MONTHLY");
                } else if (freq == 90) {
                    detailsHash.put("INTEREST_TYPE", "QUATERLY");
                } else if (freq == 180) {
                    detailsHash.put("INTEREST_TYPE", "HALF YEARLY");
                } else if (freq == 0) {
                    detailsHash.put("INTEREST_TYPE", "DATE OF MATURITY");
                } else if (freq == 360) {
                    detailsHash.put("INTEREST_TYPE", "YEARLY");
                } else if (freq == 60) {
                    detailsHash.put("INTEREST_TYPE", "2MONTHS");
                } else if (freq == 120) {
                    detailsHash.put("INTEREST_TYPE", "4MONTHS");
                } else if (freq == 150) {
                    detailsHash.put("INTEREST_TYPE", "5MONTHS");
                } else if (freq == 210) {
                    detailsHash.put("INTEREST_TYPE", "7MONTHS");
                } else if (freq == 240) {
                    detailsHash.put("INTEREST_TYPE", "8MONTHS");
                } else if (freq == 270) {
                    detailsHash.put("INTEREST_TYPE", "9MONTHS");
                } else if (freq == 300) {
                    detailsHash.put("INTEREST_TYPE", "10MONTHS");
                } else if (freq == 330) {
                    detailsHash.put("INTEREST_TYPE", "11MONTHS");
                }
            }
            if (!strBehavesLike.equals("DAILY")) {
                if (amt >= minAmt && amt <= maxAmt) { // Checks the Amount entered to be between the Acccpeted Range
                    //                    if(multPeriod%totalPeriod == 0){
                    observable.setRenewaltxtRateOfInterest("");
                    //                    if( amt%multAmt == 0){          // and is Multiples of predefined value
                    double retInt = 0.0;
                    retInt = setrenewRateOfInterset();
                    if ((viewType == ClientConstants.VIEW_TYPE_RENEW || viewType.equals("CUSTOMER ID")
                            || viewType.equals("RENEWAL_DEP_TRANS_ACC_NO") || viewType.equals("RENEWAL_INT_TRANS_ACC_NO")
                            || viewType.equals("RENEWAL_CREDIT_ACC_NO") || viewType.equals("EDIT")) && retInt != 0 && retInt != -1) {
                        double maturityAmt = 0.0;
                        double depositAmt = 0;
                        double interestAmt = 0;
                        txtRenewalRateOfInterest.setText(String.valueOf(retInt));
                        detailsHash.put("AMOUNT", txtRenewalDepositAmount.getText());
                        detailsHash.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(tdtRenewalDateOfDeposit.getDateValue()));
                        observable.setRenewaltxtPeriodOfDeposit_Days(txtRenewalPeriodOfDeposit_Days.getText());
                        observable.setRenewaltxtPeriodOfDeposit_Months(txtRenewalPeriodOfDeposit_Months.getText());
                        observable.setRenewaltxtPeriodOfDeposit_Years(txtRenewalPeriodOfDeposit_Years.getText());
                        detailsHash.put("PERIOD_DAYS", txtRenewalPeriodOfDeposit_Days.getText());
                        detailsHash.put("PERIOD_MONTHS", txtRenewalPeriodOfDeposit_Months.getText());
                        detailsHash.put("PERIOD_YEARS", txtRenewalPeriodOfDeposit_Years.getText());
                        detailsHash.put("MATURITY_DT", DateUtil.getDateMMDDYYYY(tdtRenewalMaturityDate.getDateValue()));
                        detailsHash.put("ROI", txtRenewalRateOfInterest.getText());
                        detailsHash.put("DISCOUNTED_RATE", depProdDetails.get("DISCOUNTED_RATE"));
                        detailsHash.put("BEHAVES_LIKE", strBehavesLike);
                        detailsHash = observable.setRenewalAmountsAccROI(detailsHash, null);
                        //system.out.println("$$$$$detailshash :1111" + detailsHash);
                        HashMap roundMap1 = new HashMap();
                        // String a=CommonUtil.convertObjToStr(((ComboBoxModel)cboProdId.getModel()).getKeyForSelected());
                        //String a=CommonUtil.convertObjToStr(cboProdId.getSelectedItem());
                        String a1 = (String) ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected();
                        //system.out.println("Prodidddddd121212 " + a1);
                        roundMap1.put("PROD_ID", a1);
                        List roundgList1 = ClientUtil.executeQuery("getRoungOffTypeInterest", roundMap1);
                        if (!roundgList1.isEmpty()) {
                            roundMap1 = (HashMap) roundgList1.get(0);
                        }
                        //system.out.println("roundingList121212 = " + roundgList1 + "   Map12212 " + roundMap1);
                        if (strBehavesLike.equals("FIXED")) {
                            maturityAmt = CommonUtil.convertObjToDouble(txtRenewalDepositAmount.getText()).doubleValue();
                            interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                            if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("NEAREST_VALUE")) {
                                interestAmt = (double) getNearest((long) (interestAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                interestAmt = (double) roundOffLower((long) (interestAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("HIGHER_VALUE")) {
                                interestAmt = (double) higher((long) (interestAmt * 100), 100) / 100;
                            } else {
                                //system.out.println(" in no round12122");
                                interestAmt = new Double(interestAmt);
                                //system.out.println("interestAmt 1221212" + interestAmt);
                            }


                        } else if (strBehavesLike.equals("CUMMULATIVE")) {
                            maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                            if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("NEAREST_VALUE")) {
                                maturityAmt = (double) getNearest((long) (maturityAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                maturityAmt = (double) roundOffLower((long) (maturityAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("HIGHER_VALUE")) {
                                maturityAmt = (double) higher((long) (maturityAmt * 100), 100) / 100;
                            } else {
                                //system.out.println(" in no round33333");
                                maturityAmt = new Double(maturityAmt);
                                //system.out.println("maturityAmt 3333" + maturityAmt);
                            }
                            interestAmt = maturityAmt - CommonUtil.convertObjToDouble(txtRenewalDepositAmount.getText()).doubleValue();
                        } else {
                            if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("NEAREST_VALUE")) {
                                maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                maturityAmt = (double) getNearest((long) (maturityAmt * 100), 100) / 100;
                                interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                interestAmt = (double) getNearest((long) (interestAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                maturityAmt = (double) roundOffLower((long) (maturityAmt * 100), 100) / 100;
                                interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                interestAmt = (double) roundOffLower((long) (interestAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("HIGHER_VALUE")) {
                                maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                maturityAmt = (double) higher((long) (maturityAmt * 100), 100) / 100;
                                interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                interestAmt = (double) higher((long) (interestAmt * 100), 100) / 100;
                            } else {
                                //system.out.println(" in no round4444");
                                maturityAmt = new Double(maturityAmt);
                                interestAmt = new Double(interestAmt);
                                //system.out.println("maturityAmt 4444" + maturityAmt + "nbdhad" + interestAmt);
                            }
                        }
                        observable.setRenewaltxtMaturityAmount(String.valueOf(maturityAmt));
                        txtRenewalMaturityAmount.setText(observable.getRenewaltxtMaturityAmount());
                        observable.setRenewaltxtTotalInterestAmount(String.valueOf(interestAmt));
                        txtRenewalTotalInterestAmount.setText(observable.getRenewaltxtTotalInterestAmount());

                        if (!interestYesNo) {
                            observable.setRenewaltxtMaturityAmount(txtRenewalDepositAmount.getText());
                        }
                        txtRenewalMaturityAmount.setText(observable.getRenewaltxtMaturityAmount());
                        //system.out.println("#### Second time txtPeriodOfDeposit_Days " + txtMaturityAmount.getText());
                    } else {
                        rateFlag = true;
                        observable.msgIntWarn();
                    }
                    //                    }else {
                    //                        if(!viewType.equals(ClientConstants.VIEW_TYPE_RENEW) && rdoOpeningMode_Normal.isSelected() == true){
                    //                            CommonMethods.displayAlert("Amount Should Be Multiples Of : " +multAmt);
                    //                            observable.resetAmount();
                    //                        }else if(viewType.equals(ClientConstants.VIEW_TYPE_RENEW) && rdoOpeningMode_Renewal.isSelected() == true){
                    //                            CommonMethods.displayAlert("Amount Should Be Multiples Of : " +multAmt);
                    //                        }
                    //                    }
                    //                    }else{
                    //                        CommonMethods.showDialogOk("Deposit Period should be multiples of " +multPeriod);
                    ////                        txtRenewalDepositAmount.requestFocus();
                    //                        return;
                    //                    }
                    //                } else {
                    //                    CommonMethods.showDialogOk("Amount is Less than the Minimum Deposit Amount" );
                    //                    txtRenewalDepositAmount.requestFocus();
                    //                    return;
                }
            }
        }
        cboRenewalInterestPaymentFreqActionPerformed();
    }
    private void txtDepositAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDepositAmountFocusLost
//    if (multipleDeposits == true) {
//            if (((CommonUtil.convertObjToDouble(txtDepositAmount.getText())).doubleValue()) > (getDepositAmount() - depositedAmt)) {
//                ClientUtil.displayAlert("Entered Amount exceeds available balance" + depositAmt);
//                txtDepositAmount.setText("");
//                return;
//                //                int yesNo = 0;
//                //                String []option = {"Yes", "No"};
//                //                yesNo = COptionPane.showOptionDialog(null,"Entered Amount exceeds available balance "+"("+depositAmt+")"+"do you want to continue ?", CommonConstants.WARNINGTITLE,
//                //                COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
//                //                null, option, option[0]);
//                //                if (yesNo!=0 && (getDepositAmount()-depositedAmt)>0.0) {
//                //
//                //                    txtDepositAmount.setText("");
//                //                    return;
//                //                }else if(yesNo!=0 && (getDepositAmount()-depositedAmt)==0.0){
//                //                    this.btnCancelActionPerformed(null);
//                //                    multipleDeposits=false;
//                //                    txtDepositsOpened.setText("");
//                //                    txtDepositAmount.setText("");
//                //                }
//            }
//        }
        if (viewType == ClientConstants.VIEW_TYPE_RENEW) {
            //            renewalDepositAmtChange();
        } else {
            //Added BY Suresh
            if (txtDepositAmount.getText().length() > 0) {
                if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
                    transactionUI.cancelAction(false);
                    transactionUI.setButtonEnableDisable(true);
                    transactionUI.resetObjects();
                    transactionUI.setCallingTransType("CASH");
                }
                txtDepositAmtFocusLost();
                if (tblJointAcctHolder.getRowCount() > 0) {
                    transactionUI.setCallingApplicantName(CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(0, 0)));
                }
                transactionUI.setCallingAmount(txtDepositAmount.getText());
            }
        }
        observable.setTxtDepositAmount(txtDepositAmount.getText());
        amountDeposit = CommonUtil.convertObjToDouble(txtDepositAmount.getText());
    }//GEN-LAST:event_txtDepositAmountFocusLost
    /**
     * Checks whether the Amount entered is Valid and if Valid it sets ROI,
     * Maturity Amount and Total Interest Amount, otherwise it prompts the user
     * to enter the Valid Amount
     */
    private void txtDepositAmtFocusLost() {
        if ((txtDepositAmount.getText() != null) && (!txtDepositAmount.getText().equals(""))) {
            HashMap detailsHash = new HashMap();
            rateFlag = false;
            //system.out.println("##### depProdDetails" + depProdDetails);
            double amt = Double.parseDouble(CommonUtil.convertObjToStr(txtDepositAmount.getText()));
            double maxAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_AMT")));
            double minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
            double multAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("AMT_MULTIPLES")));
            detailsHash.put("AMT_MULTIPLES", new Double(multAmt));
            String intType = (String) ((ComboBoxModel) this.cboInterestPaymentFrequency.getModel()).getKeyForSelected();
            //system.out.println("txtDepositAmtFocusLost intType :" + intType);
            double secTerm = 0;
            //--- If Year is not filled, then assign "0" to it.
            if (txtPeriodOfDeposit_Years.getText().length() == 0) {
                observable.setTxtPeriodOfDeposit_Years("0");
                txtPeriodOfDeposit_Years.setText(observable.getTxtPeriodOfDeposit_Years());
            }
            if (txtPeriodOfDeposit_Months.getText().length() == 0) {
                observable.setTxtPeriodOfDeposit_Months("0");
                txtPeriodOfDeposit_Months.setText(observable.getTxtPeriodOfDeposit_Months());
            }
            if (txtPeriodOfDeposit_Days.getText().length() == 0) {
                observable.setTxtPeriodOfDeposit_Days("0");
                txtPeriodOfDeposit_Days.setText(observable.getTxtPeriodOfDeposit_Days());
            }
            if (txtWeek.getText().length() == 0) {
                observable.setTxtPeriodOfDeposit_Weeks("0");
                txtWeek.setText(observable.getTxtPeriodOfDeposit_Weeks());
            }
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) || viewType == ClientConstants.VIEW_TYPE_RENEW) {
                String prodType = ((ComboBoxModel) cboInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
                int freq = CommonUtil.convertObjToInt(prodType);
                //system.out.println("#############  txtPeriodOfDeposit_Days " + prodType);
                if (freq == 30 && cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")) {
                    detailsHash.put("INTEREST_TYPE", "MONTHLY");
                } else if (freq == 90) {
                    detailsHash.put("INTEREST_TYPE", "QUATERLY");
                } else if (freq == 180) {
                    detailsHash.put("INTEREST_TYPE", "HALF YEARLY");
                } else if (freq == 0) {
                    detailsHash.put("INTEREST_TYPE", "DATE OF MATURITY");
                } else if (freq == 360) {
                    detailsHash.put("INTEREST_TYPE", "YEARLY");
                } else if (freq == 60) {
                    detailsHash.put("INTEREST_TYPE", "2MONTHS");
                } else if (freq == 120) {
                    detailsHash.put("INTEREST_TYPE", "4MONTHS");
                } else if (freq == 150) {
                    detailsHash.put("INTEREST_TYPE", "5MONTHS");
                } else if (freq == 210) {
                    detailsHash.put("INTEREST_TYPE", "7MONTHS");
                } else if (freq == 240) {
                    detailsHash.put("INTEREST_TYPE", "8MONTHS");
                } else if (freq == 270) {
                    detailsHash.put("INTEREST_TYPE", "9MONTHS");
                } else if (freq == 300) {
                    detailsHash.put("INTEREST_TYPE", "10MONTHS");
                } else if (freq == 330) {
                    detailsHash.put("INTEREST_TYPE", "11MONTHS");
                }

                int days = CommonUtil.convertObjToInt(txtPeriodOfDeposit_Days.getText());
                if (days > 0) {
                    cboInterestPaymentFreqActionPerformed();
                }
            }
            if (!observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                if (amt >= minAmt && amt <= maxAmt) { // Checks the Amount entered to be between the Acccpeted Range
                    observable.setTxtRateOfInterest("");
                    if (amt % multAmt == 0 || viewType == ClientConstants.VIEW_TYPE_RENEW) {          // and is Multiples of predefined value
                        double retInt = 0.0;
                        if (authorizeBy.equals("") || (viewType == ClientConstants.VIEW_TYPE_RENEW
                                || viewType == ClientConstants.VIEW_TYPE_NEW || viewType.equals("CUSTOMER ID")
                                || viewType.equals("JOINT ACCOUNT") || viewType.equals("EDIT"))) {
                            retInt = setRateOfInterset(); // Sets the Interest rate
                        }
                        if ((retInt != 0 && retInt != -1) || flPtWithoutPeriod) {
                            double maturityAmt = 0.0;
                            double depositAmt = 0;
                            double interestAmt = 0;
                            observable.setTxtRateOfInterest(String.valueOf(retInt));
                            //system.out.println("txtDepositAmtFocusLost set Rate of Interest :" + observable.getTxtRateOfInterest());
                            txtRateOfInterest.setText(observable.getTxtRateOfInterest());
                            detailsHash.put("AMOUNT", txtDepositAmount.getText());
                            detailsHash.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue()));
                            detailsHash.put("PERIOD_DAYS", txtPeriodOfDeposit_Days.getText());
                            detailsHash.put("PERIOD_MONTHS", txtPeriodOfDeposit_Months.getText());
                            detailsHash.put("PERIOD_YEARS", txtPeriodOfDeposit_Years.getText());
                            detailsHash.put("MATURITY_DT", DateUtil.getDateMMDDYYYY(tdtMaturityDate.getDateValue()));
                            detailsHash.put("ROI", txtRateOfInterest.getText());
                            detailsHash.put("DISCOUNTED_RATE", depProdDetails.get("DISCOUNTED_RATE"));
                            detailsHash.put("BEHAVES_LIKE", observable.productBehavesLike);
                            HashMap roundMap = new HashMap();
                            String a = (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected();
                            //system.out.println("Prodidddddd " + a);
                            roundMap.put("PROD_ID", a);
                            List roundgList = ClientUtil.executeQuery("getRoungOffTypeInterest", roundMap);
                            if (!roundgList.isEmpty()) {
                                roundMap = (HashMap) roundgList.get(0);
                            }
                            //system.out.println("roundingList@@@1111 = " + roundgList + "   Map@@@@111 " + roundMap);
                            if (roundMap.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) { //added by vivek
                                detailsHash.put("LOWER_VALUE", "LOWER_VALUE");
                            } else if (roundMap.get("INT_ROUNDOFF_TERMS").equals("NEAREST_VALUE")) {
                                detailsHash.put("NEAREST_VALUE", "NEAREST_VALUE");
                            } else if (roundMap.get("INT_ROUNDOFF_TERMS").equals("HIGHER_VALUE")) {
                                detailsHash.put("HIGHER_VALUE", "HIGHER_VALUE");
                            } else if (roundMap.get("INT_ROUNDOFF_TERMS").equals("NO_ROUND_OFF")) {
                                detailsHash.put("NO_ROUND_OFF", "NO_ROUND_OFF");
                            }
                            if (!flPtWithoutPeriod) {
                                detailsHash = observable.setAmountsAccROI(detailsHash, null);
                            }
                            //system.out.println("$$$$$detailshash :2222" + detailsHash);
                            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                                observable.setTxtMaturityAmount(txtDepositAmount.getText());
                                interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                roundMap = new HashMap();
                                // String a=CommonUtil.convertObjToStr(((ComboBoxModel)cboProdId.getModel()).getKeyForSelected());
                                //String a=CommonUtil.convertObjToStr(cboProdId.getSelectedItem());
                                a = (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected();
                                //system.out.println("Prodidddddd " + a);
                                roundMap.put("PROD_ID", a);
                                roundgList = ClientUtil.executeQuery("getRoungOffTypeInterest", roundMap);
                                if (!roundgList.isEmpty()) {
                                    roundMap = (HashMap) roundgList.get(0);
                                }
                                //system.out.println("roundingList = " + roundgList + "   Map " + roundMap + "      " + interestAmt);
                                interestRounding = roundMap.get("INT_ROUNDOFF_TERMS").toString();
                                if (roundMap.get("INT_ROUNDOFF_TERMS").equals("NO_ROUND_OFF")) {
                                    //system.out.println(" in no round");
                                    interestAmt = new Double(interestAmt);
                                    //system.out.println("interestAmt " + interestAmt);
                                } else if (roundMap.get("INT_ROUNDOFF_TERMS").equals("NEAREST_VALUE")) {
                                    //system.out.println(" in nearest roundingg");
                                    interestAmt = (double) getNearest((long) (interestAmt * 100), 100) / 100;
                                } else if (roundMap.get("INT_ROUNDOFF_TERMS").equals("HIGHER_VALUE")) {
                                    //system.out.println("in higher valueee");
                                    double d = interestAmt;
                                    if (d % 1.0 > 0) {
                                        //system.out.println("mode valuee  " + d % 1.0);
                                        double c = d % 1.0;
                                        d = d - c;
                                        d = d + 1;
                                        //system.out.println("Higher valuuuee " + d);
                                    } else {
                                        //system.out.println("dsf  " + d % 1.0);
                                        //system.out.println("ggggg " + d);
                                    }
                                    interestAmt = d;
                                    //system.out.println("Higher valuuuee reall " + d);

                                    //interestAmt = (double)getNearest((long)(interestAmt *100),100)/100;
                                } else if (roundMap.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                    //system.out.println("in lower round valueee");
                                    double d = interestAmt;
                                    if (d % 1.0 > 0) {
                                        //system.out.println("mode valuee  " + d % 1.0);
                                        double c = d % 1.0;
                                        d = d - c;

                                        //system.out.println("Higher valuuuee " + d);
                                    } else {
                                        //system.out.println("dsf  " + d % 1.0);
                                        //system.out.println("ggggg " + d);
                                    }
                                    interestAmt = d;
                                    //system.out.println("Higher valuuuee reall " + d);

                                } else {
                                    //system.out.println(" in no round");
                                    interestAmt = new Double(interestAmt);
                                    //system.out.println("interestAmt " + interestAmt);
                                }

                            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                                depositAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                                maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                roundMap = new HashMap();
                                // String a=CommonUtil.convertObjToStr(((ComboBoxModel)cboProdId.getModel()).getKeyForSelected());
                                //String a=CommonUtil.convertObjToStr(cboProdId.getSelectedItem());
                                a = (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected();
                                //system.out.println("Prodidddddd " + a);
                                roundMap.put("PROD_ID", a);
                                roundgList = ClientUtil.executeQuery("getRoungOffTypeInterest", roundMap);
                                if (!roundgList.isEmpty()) {
                                    roundMap = (HashMap) roundgList.get(0);
                                }
                                //system.out.println("roundingList = " + roundgList + "   Map " + roundMap + "  maturityAmt1111>>>    " + maturityAmt);
//                                if(roundMap.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")){
//                                    //system.out.println("vivi@@@@");
//                                maturityAmt = (double) lower((long) (maturityAmt * 100), 100) / 100;
//                                    //system.out.println("maturityAmt1223"+maturityAmt);
//                                }

                                if (roundMap.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                    //system.out.println("in lower round valueee");
                                    double d = maturityAmt;
                                    if (d % 1.0 > 0) {
                                        //system.out.println("mode valuee  " + d % 1.0);
                                        double c = d % 1.0;
                                        d = d - c;

                                        //system.out.println("low valuuuee maturityyamt1111>>>>>" + d);
                                    } else {
                                        //system.out.println("dsf  " + d % 1.0);
                                        //system.out.println("ggggg " + d);
                                    }
                                    maturityAmt = d;
                                    //system.out.println("low valuuuee maturityyamt22222>>>>> " + d);

                                } else {
                                    maturityAmt = (double) getNearest((long) (maturityAmt * 100), 100) / 100;
                                    //system.out.println("maturityAmt1223" + maturityAmt);
                                }


                                interestAmt = maturityAmt - depositAmt;
                                if (roundMap.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                    //system.out.println("in lower round valueee");
                                    double d = interestAmt;
                                    if (d % 1.0 > 0) {
                                        //system.out.println("mode valuee  " + d % 1.0);
                                        double c = d % 1.0;
                                        d = d - c;

                                        //system.out.println("lowerrrr valuuuee cummilative interestamt11111>>> " + d);
                                    } else {
                                        //system.out.println("dsf  " + d % 1.0);
                                        //system.out.println("ggggg " + d);
                                    }
                                    interestAmt = d;
                                    //system.out.println("lowerrrr valuuuee reall cummilative interestamt22222>>>>" + d);

                                }
                                observable.setTxtMaturityAmount(String.valueOf(maturityAmt));
                                if (doublingFlag) {
                                    if (depositAmt > interestAmt) {
                                        ClientUtil.showAlertWindow("Interest amount should be greater or equal to Deposit amount" + "\n" + "         " + "Please change the Period in product level.");
                                    } else {
                                        interestAmt = depositAmt*doublingCount;
                                        maturityAmt = interestAmt + depositAmt;
                                        maturityAmt = (double) getNearest((long) (maturityAmt * 100), 100) / 100;
                                        observable.setTxtMaturityAmount(String.valueOf(maturityAmt));
                                    }

                                }
                            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFloating)) {
                                maturityAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                                interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                interestAmt = (double) getNearest((long) (interestAmt * 100), 100) / 100;
                                observable.setTxtMaturityAmount(String.valueOf(maturityAmt));
                            } else {
                                //Added By Suresh
                                if (observable.productBehavesLike.equals("RECURRING") && observable.getActionType() != ClientConstants.ACTIONTYPE_NEW
                                        && CommonUtil.convertObjToStr(depProdDetails.get("CALC_MATURITY_VALUE")).equals("N")) {
                                    txtRateOfInterest.setText("0");
                                    observable.setTxtRateOfInterest("0");
                                    interestAmt = CommonUtil.convertObjToDouble(observable.getTxtTotalInterestAmount()).doubleValue();
                                } else {
                                    maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                    maturityAmt = (double) getNearest((long) (maturityAmt * 100), 100) / 100;
                                    if (detailsHash.containsKey("INTEREST") && CommonUtil.convertObjToStr(detailsHash.get("INTEREST")).length() > 0) {
                                        interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                        interestAmt = (double) getNearest((long) (interestAmt * 100), 100) / 100;
                                    }
                                    observable.setTxtMaturityAmount(String.valueOf(maturityAmt));
                                }
                                if (observable.productBehavesLike.equals("RECURRING") && observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
                                    if (CommonUtil.convertObjToStr(depProdDetails.get("CALC_MATURITY_VALUE")).equals("Y")) {
                                        txtMaturityAmount.setEnabled(false);
                                    } else {
                                        txtRateOfInterest.setText("");
                                        observable.setTxtRateOfInterest("");
                                        observable.setTxtMaturityAmount("");
                                        txtMaturityAmount.setEnabled(true);
                                        interestAmt = 0.0;
                                    }
                                }
                            }
                            txtMaturityAmount.setText(observable.getTxtMaturityAmount());
                            observable.setTxtTotalInterestAmount(String.valueOf(interestAmt));
                            txtTotalInterestAmount.setText(observable.getTxtTotalInterestAmount());

                            if (!interestYesNo) {
                                observable.setTxtMaturityAmount(txtDepositAmount.getText());
                            }
                            txtMaturityAmount.setText(observable.getTxtMaturityAmount());
                            //system.out.println("#### Second time txtPeriodOfDeposit_Days " + txtMaturityAmount.getText());
                        } else {
                            rateFlag = true;
                            observable.msgIntWarn();
                        }
                    } else {
                        if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW && rdoOpeningMode_Multiple.isSelected() == true) {
                            CommonMethods.displayAlert("Amount Should Be Multiples Of : " + multAmt);
                            observable.resetAmount();
                        }
                    }
                }
            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                if (amt >= minAmt && amt <= maxAmt) {
                    if (amt % multAmt == 0) {
                        observable.setTxtRateOfInterest("");
                        double retInt = 0.0;
                        if (authorizeBy.equals("") || observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)
                                || viewType == ClientConstants.VIEW_TYPE_NEW || viewType.equals("CUSTOMER ID")) {
                            retInt = setRateOfInterset(); // Sets the Interest rate
                        }
                        if (retInt != 0 && retInt != -1) {
                            double maturityAmt = 0.0;
                            double depositAmt = 0;
                            double interestAmt = 0;
                            observable.setTxtRateOfInterest(String.valueOf(retInt));
                            //system.out.println("txtDepositAmtFocusLost set Rate of Interest :" + observable.getTxtRateOfInterest());
                            txtRateOfInterest.setText(observable.getTxtRateOfInterest());
                            detailsHash.put("AMOUNT", txtDepositAmount.getText());
                            detailsHash.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue()));
                            detailsHash.put("PERIOD_DAYS", txtPeriodOfDeposit_Days.getText());
                            detailsHash.put("PERIOD_MONTHS", txtPeriodOfDeposit_Months.getText());
                            detailsHash.put("PERIOD_YEARS", txtPeriodOfDeposit_Years.getText());
                            detailsHash.put("MATURITY_DT", DateUtil.getDateMMDDYYYY(tdtMaturityDate.getDateValue()));
                            detailsHash.put("ROI", txtRateOfInterest.getText());
                            detailsHash.put("DISCOUNTED_RATE", depProdDetails.get("DISCOUNTED_RATE"));
                            detailsHash.put("BEHAVES_LIKE", observable.productBehavesLike);
                            txtRateOfInterest.setText(String.valueOf(retInt));
                        }
                    } else {
                        CommonMethods.displayAlert("Amount Should Be Multiples Of : " + multAmt);
                        observable.resetAmount();
                    }
                }
            }
        }
        cboInterestPaymentFreqActionPerformed();
    }

    private void calculateInterestAmount() {
        String[] obj = {"With Interest", "Without Interest"};
        String[] obj1 = {"Cash", "Transfer"};
        try {
            double transAmt = 0.0;
            double totalAmt = 0.0;
            double depAmt = 0.0;
            double intAmt = 0.0;
            double txtAmt = 0.0;
            HashMap transMap = new HashMap();
            if (amt) {
                if (oldAmount == 0 || oldAmount != txtAmt) {
                    int option = COptionPane.showOptionDialog(null, ("Select The Desired Option"), ("Deposit Renewal Option"),
                            COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj, obj[0]);
                    if (option == 0) {
                        withInt = true;
                        intAmt = observable.balIntAmt;
                        if (beyond15 == true) {
                            beyond15 = false;
                            totalAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                            sbAmount = observable.getSbIntAmount();
                            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                                if (fixedValue == true) {
                                    HashMap calcMap = new HashMap();
                                    double depAmtBefRen = Double.parseDouble(txtDepositAmount.getText());
                                    if (observable.withDrawFlag == false) {
                                        java.util.Date dtDurRen = DateUtil.getDateMMDDYYYY(tdtMaturityDate.getDateValue());
                                        Date curr_Dt = (Date) currDt.clone();
                                        java.util.Date intDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
                                        java.util.Date startDt = null;
                                        java.util.Date date = (Date) currDt.clone();
                                        java.util.Date dtBefRen = null;
                                        startDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
                                        String depDt = DateUtil.getStringDate(date);
                                        calcMap.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(depDt));
                                        calcMap.put("DEPOSIT_PERIOD_YY", txtPeriodOfDeposit_Years.getText());
                                        calcMap.put("DEPOSIT_PERIOD_MM", txtPeriodOfDeposit_Months.getText());
                                        calcMap.put("DEPOSIT_PERIOD_DD", txtPeriodOfDeposit_Days.getText());
                                        calcMap = observable.calculateMaturityDate(calcMap);
                                        calcMap.put("DEPOSIT_DT", intDt);
                                        calcMap.put("TO_DAY_DT", currDt.clone());
                                        if (observable.balIntAmt > 0) {
                                            depAmtBefRen = depAmtBefRen + observable.balIntAmt;// + sbAmount;
                                        } else {
                                            depAmtBefRen = depAmtBefRen;
                                        }
                                        calcMap.put("DEPOSIT_AMT", new Double(depAmtBefRen));
                                        calcMap = observable.simpleInterestCalculation(calcMap);
                                        sbAmount = CommonUtil.convertObjToDouble(calcMap.get("CALC_AMT")).doubleValue();
                                        //                                        observable.setSbIntAmount(sbAmount);
                                    }
                                    if (sbAmount > 0) {
                                        if (observable.balIntAmt > 0) {
                                            intAmt = observable.balIntAmt + sbAmount;
                                            txtDepositAmount.setText(String.valueOf(depAmtBefRen + sbAmount));
                                        } else {
                                            intAmt = sbAmount;
                                            depAmtBefRen = depAmtBefRen;
                                            txtDepositAmount.setText(String.valueOf(depAmtBefRen + intAmt));
                                        }
                                        tdtDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(currDt.clone()));
                                        tdtMaturityDate.setDateValue(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
                                    }
                                } else {
                                    intAmt = observable.balIntAmt + sbAmount;
                                    txtDepositAmount.setText(String.valueOf(totalAmt + intAmt));
                                    observable.setTxtTotalInterestAmount(String.valueOf(intAmt));
                                }
                                observable.setTxtTotalInterestAmount(String.valueOf(intAmt));
                            } else {
                                intAmt = sbAmount;
                                txtDepositAmount.setText(String.valueOf(totalAmt + intAmt));
                                observable.setTxtTotalInterestAmount(String.valueOf(intAmt));
                            }
                            if (transbeyond == true) {
                                transbeyond = false;
                                amt();
                            }
                        } else {
                            intAmt = observable.balIntAmt;
                            double sbAmount = observable.getSbIntAmount();
                            totalAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                            txtAmt = CommonUtil.convertObjToDouble(observable.getTotalBalanceValue()).doubleValue();
                            txtAmt = intAmt + totalAmt;// + sbAmount;
                            txtDepositAmount.setText(String.valueOf(txtAmt));
                        }
                        observable.setAmtReduce("WIT");
                        //system.out.println("#### First time oldAmount " + oldAmount);
                        //system.out.println("#### First time sbAmount " + sbAmount);
                        txtDepositAmtFocusLost();
                        cboInterestPaymentFreqActionPerformed();
                        //system.out.println("#### First time txtPeriodOfDeposit_Days " + txtMaturityAmount.getText());
                        sbAmount = 0.0;
                    } else if (option == 1) {
                        SomeAmt = true;
                        btnCancel.setEnabled(true);
                        addingSomeAmt = true;
                        HashMap intMap = new HashMap();
                        HashMap limitMap = new HashMap();
                        withInt = false;
                        double sbAmount = 0.0;
                        double interAmt = 0.0;
                        double cashLimit = 0.0;
                        if (beyond15 == true) {
                            totalAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                            sbAmount = observable.getSbIntAmount();
                            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                                if (fixedValue == true) {
                                    double depAmtBefRen = Double.parseDouble(txtDepositAmount.getText());
                                    HashMap calcMap = new HashMap();
                                    if (observable.withDrawFlag == false) {
                                        java.util.Date dtDurRen = DateUtil.getDateMMDDYYYY(tdtMaturityDate.getDateValue());
                                        Date curr_Dt = (Date) currDt.clone();
                                        java.util.Date intDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
                                        java.util.Date startDt = null;
                                        java.util.Date date = (Date) currDt.clone();
                                        java.util.Date dtBefRen = null;
                                        startDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
                                        String depDt = DateUtil.getStringDate(date);
                                        calcMap.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(depDt));
                                        calcMap.put("DEPOSIT_PERIOD_YY", txtPeriodOfDeposit_Years.getText());
                                        calcMap.put("DEPOSIT_PERIOD_MM", txtPeriodOfDeposit_Months.getText());
                                        calcMap.put("DEPOSIT_PERIOD_DD", txtPeriodOfDeposit_Days.getText());
                                        calcMap = observable.calculateMaturityDate(calcMap);
                                        calcMap.put("DEPOSIT_DT", intDt);
                                        calcMap.put("TO_DAY_DT", currDt.clone());
                                        if (observable.balIntAmt > 0) {
                                            depAmtBefRen = depAmtBefRen;//+observable.balIntAmt;// + sbAmount;
                                        } else {
                                            depAmtBefRen = depAmtBefRen;
                                        }
                                        calcMap.put("DEPOSIT_AMT", new Double(depAmtBefRen));
                                        calcMap = observable.simpleInterestCalculation(calcMap);
                                        sbAmount = CommonUtil.convertObjToDouble(calcMap.get("CALC_AMT")).doubleValue();
                                        //                                        observable.setSbIntAmount(sbAmount);
                                    }
                                    if (sbAmount > 0 || observable.balIntAmt > 0) {
                                        if (observable.balIntAmt > 0) {
                                            intAmt = observable.balIntAmt + sbAmount;
                                        } else {
                                            intAmt = sbAmount;
                                            depAmtBefRen = depAmtBefRen;
                                        }
                                        txtDepositAmount.setText(String.valueOf(depAmtBefRen + intAmt));
                                        tdtDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(currDt.clone()));
                                        tdtMaturityDate.setDateValue(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
                                    }
                                } else {
                                    intAmt = observable.balIntAmt + sbAmount;
                                    txtDepositAmount.setText(String.valueOf(totalAmt + intAmt));
                                    observable.setTxtTotalInterestAmount(String.valueOf(intAmt));
                                }
                            } else {
                                intAmt = sbAmount;
                                txtDepositAmount.setText(String.valueOf(totalAmt + intAmt));
                                observable.setTxtTotalInterestAmount(String.valueOf(intAmt));
                            }
                        } else {
                            intAmt = observable.balIntAmt;
                            observable.setAmtReduce("OUT");
                            sbAmount = observable.getSbIntAmount();
                            totalAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                                intAmt = observable.balIntAmt + sbAmount;
                                txtDepositAmount.setText(String.valueOf(totalAmt + intAmt));
                                observable.setTxtTotalInterestAmount(String.valueOf(intAmt));
                            } else {
                                intAmt = sbAmount;
                                txtDepositAmount.setText(String.valueOf(totalAmt + intAmt));
                                observable.setTxtTotalInterestAmount(String.valueOf(intAmt));
                            }
                        }
                        intMap.put("INT_AMT", new Double(intAmt));
                        limitMap.put("DEPOSIT_NO", lblValRenewDep.getText());
                        List lst = ClientUtil.executeQuery("getStatusForDeposit", limitMap);
                        if (lst != null && lst.size() > 0) {
                            limitMap = (HashMap) lst.get(0);
                            lst = ClientUtil.executeQuery("getLimitAmountForDepProd", limitMap);
                            if (lst != null && lst.size() > 0) {
                                limitMap = (HashMap) lst.get(0);
                                cashLimit = CommonUtil.convertObjToDouble(limitMap.get("MAX_AMT_CASH")).doubleValue();
                            }
                        }
                        intMap.put("PROD_DESC", lblProductDescription.getText());
                        //system.out.println("#### intMap ... " + intMap.get("PROD_DESC"));
                        //system.out.println("#### intMap ... " + lblProductDescription.getText());
                        //                        intMap.put("ACCT_HEAD",lblValAccountHead.getText());
                        intMap.put("PRODUCT_TYPE", "Deposits");
                        intMap.put("SELECTED_BRANCH", ProxyParameters.BRANCH_ID);
                        intMap.put("ACCOUNTNO", lblValRenewDep.getText());
                        intMap.put("CUST_ID", txtCustomerId.getText());
                        intMap.put("INST_TYPE", "Withdrawal Slip");
                        intMap.put("DEPOSITS_RENEWAL", "DEPOSITS_RENEWAL");
                        setTransSomeAmt("DEP_INTEREST_AMT");
                        if (intAmt > 0) {
                            if (intAmt <= cashLimit) {
                                int options = COptionPane.showOptionDialog(null, ("Select Desired Option For Repayment Of Interest Amount"), ("Repayment Of Excess Amount"),
                                        COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj1, obj1[0]);
                                if (options == 0) {
                                    btnCancel.setEnabled(false);
                                    observable.setTransMode("CASH");//cash Transaction.....
                                    //system.out.println("#### intAmt cash... " + intAmt);
                                    txtMaturityAmount.setText(observable.getTxtDepositAmount());
                                    CashTransactionUI cashTrans = new CashTransactionUI();
                                    com.see.truetransact.ui.TrueTransactMain.showScreen(cashTrans);
                                    if (transbeyond == false) {
                                        renewalTransMap.put("INTEREST_AMT_CASH", "");
                                    } else {
                                        renewalTransMap.put("INT_AMT", "");
                                        renewalTransMap.put("INTEREST_AMT_CASH", "");
                                    }
                                    //transMap = cashTrans.transferingIntAmt(txtDepositAmount, intMap, this);//Jeffin
                                    //system.out.println("#### cash intAmtCash :" + intAmtCash);
                                    double intAmtCash = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                                } else if (options == 1) {
                                    btnCancel.setEnabled(false);
                                    observable.setTransMode("TRANSFER"); //transfer Transaction.....
                                    TransferUI transfer = new TransferUI();
                                    transfer.setViewType(200);
                                    transfer.fillData(intMap);
                                    //system.out.println("#### :" + intMap);
                                    com.see.truetransact.ui.TrueTransactMain.showScreen(transfer);
                                    intMap.put("MODULE", "Transaction");
                                    intMap.put("SCREEN", "Transfer");
                                    if (transbeyond == false) {
                                        renewalTransMap.put("INTEREST_AMT_TRANSFER", "");
                                        renewalTransMap.remove("DEPOSIT_AMT_TRANSFER");
                                    } else {
                                        renewalTransMap.remove("DEPOSIT_AMT_TRANSFER");
                                        renewalTransMap.put("INT_AMT", "");
                                        renewalTransMap.put("INTEREST_AMT_TRANSFER", "");
                                    }
                                    //transMap = transfer.transferingIntAmt(txtDepositAmount, intMap, this);//Jeffin
                                    observable.setTransactionId(CommonUtil.convertObjToStr(transMap.get("TRANS_ID")));
                                }
                            } else {
                                btnCancel.setEnabled(false);
                                observable.setTransMode("TRANSFER"); //transfer Transaction.....
                                TransferUI transfer = new TransferUI();
                                transfer.setViewType(200);
                                transfer.fillData(intMap);
                                //system.out.println("#### :" + intMap);
                                com.see.truetransact.ui.TrueTransactMain.showScreen(transfer);
                                intMap.put("MODULE", "Transaction");
                                intMap.put("SCREEN", "Transfer");
                                if (transbeyond == false) {
                                    renewalTransMap.put("INTEREST_AMT_TRANSFER", "");
                                } else {
                                    renewalTransMap.put("INT_AMT", "");
                                    renewalTransMap.put("INTEREST_AMT_TRANSFER", "");
                                }
                                //transMap = transfer.transferingIntAmt(txtDepositAmount, intMap, this);//Jeffin
                                observable.setTransactionId(CommonUtil.convertObjToStr(transMap.get("TRANS_ID")));
                            }
                            txtDepositAmtFocusLost();
                            cboInterestPaymentFreqActionPerformed();
                            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                                txtMaturityAmount.setText(observable.getTxtMaturityAmount());
                            } else {
                                double matAmt = CommonUtil.convertObjToDouble(observable.getTxtDepositAmount()).doubleValue();
                                double total = matAmt + intAmt;
                                txtMaturityAmount.setText(String.valueOf(total));
                            }
                            exists = true;
                        } else {
                            ClientUtil.showMessageWindow("No is interest Pending...");
                            amt();
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void transferScreen(HashMap intMap) {
        btnCancel.setEnabled(false);
        HashMap transMap = new HashMap();
        observable.setTransMode("TRANSFER"); //transfer Transaction.....
        TransferUI transfer = new TransferUI();
        transfer.setViewType(200);
        renewalTransMap = new HashMap();
        renewalTransMap.put("DEPOSIT_AMT_TRANSFER", "");
        transfer.fillData(intMap);
        //system.out.println("#### :" + intMap);
        com.see.truetransact.ui.TrueTransactMain.showScreen(transfer);
        intMap.put("MODULE", "Transaction");
        intMap.put("SCREEN", "Transfer");
        //transMap = transfer.transferingDepAmt(txtDepositAmount, intMap, this);//Jeffin
        observable.setTransactionId(CommonUtil.convertObjToStr(transMap.get("TRANS_ID")));
        exists = true;
    }

    private void withDrawAmount() {
        String[] obj = {"Cash", "Transfer"};
        try {
            double transAmt = 0.0;
            double totalAmt = 0.0;
            double depAmt = 0.0;
            double intAmt = 0.0;
            double txtAmt = 0.0;
            HashMap transMap = new HashMap();
            if (amt) {
                intAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                HashMap intMap = new HashMap();
                HashMap limitMap = new HashMap();
                double cashLimit = 0.0;
                intMap.put("INT_AMT", new Double(0.0));
                limitMap.put("DEPOSIT_NO", lblValRenewDep.getText());
                List lst = ClientUtil.executeQuery("getStatusForDeposit", limitMap);
                if (lst != null && lst.size() > 0) {
                    limitMap = (HashMap) lst.get(0);
                    lst = ClientUtil.executeQuery("getLimitAmountForDepProd", limitMap);
                    if (lst != null && lst.size() > 0) {
                        limitMap = (HashMap) lst.get(0);
                        cashLimit = CommonUtil.convertObjToDouble(limitMap.get("MAX_AMT_CASH")).doubleValue();
                    }
                }
                intMap.put("PROD_DESC", lblProductDescription.getText());
                //                intMap.put("ACCT_HEAD",lblValAccountHead.getText());
                intMap.put("PRODUCT_TYPE", "Deposits");
                intMap.put("SELECTED_BRANCH", ProxyParameters.BRANCH_ID);
                intMap.put("ACCOUNTNO", lblValRenewDep.getText());
                intMap.put("CUST_ID", txtCustomerId.getText());
                intMap.put("INST_TYPE", "Withdrawal Slip");
                setTransSomeAmt("DEP_AMT");
                if (intAmt <= cashLimit) {
                    int options = COptionPane.showOptionDialog(null, ("Select Desired Option For Withdrawal Of Deposit Amount"), ("Repayment Of Excess Amount"),
                            COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj, obj[0]);
                    if (options == 0) {
                        renewalTransMap = new HashMap();
                        btnCancel.setEnabled(false);
                        renewalTransMap.put("DEPOSIT_AMT_CASH", "");
                        observable.setTransMode("CASH");//cash Transaction.....
                        //system.out.println("#### intAmt cash... " + intAmt);
                        txtMaturityAmount.setText(observable.getTxtDepositAmount());
                        CashTransactionUI cashTrans = new CashTransactionUI();
                        com.see.truetransact.ui.TrueTransactMain.showScreen(cashTrans);
                        //transMap = cashTrans.transferingDepAmt(txtDepositAmount, intMap, this);//Jeffin
                        //system.out.println("#### cash intAmtCash :" + intAmtCash);
                        double intAmtCash = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                    } else if (options == 1) {
                        transferScreen(intMap);
                    }
                } else {
                    transferScreen(intMap);
                }
                txtDepositAmtFocusLost();
                cboInterestPaymentFreqActionPerformed();
                if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                    txtMaturityAmount.setText(observable.getTxtMaturityAmount());
                } else {
                    double matAmt = CommonUtil.convertObjToDouble(observable.getTxtDepositAmount()).doubleValue();
                    double total = matAmt + intAmt;
                    txtMaturityAmount.setText(String.valueOf(total));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void disableSaveButton() {
        btnSave.setEnabled(false);
        ClientUtil.showAlertWindow("Restart the Renewal Process Again...");
        btnCancelActionPerformed(null);
    }

    public void transactionCalling() {
        //system.out.println("#### cash intAmtCash :" + intAmtCash);
        btnSave.setEnabled(true);
        if (beyond15 == true) {
            btnCancel.setEnabled(false);
            transbeyond = true;
            beyond15 = true;
            double depAmtDurRen = Double.parseDouble(txtDepositAmount.getText());
            double depAmtBefRen = observable.depAmt;
            //system.out.println("depAmtDurRen" + depAmtDurRen);
            //system.out.println("depAmtBefRen" + depAmtBefRen);
            HashMap calcMap = new HashMap();
            HashMap transMap = new HashMap();
            java.util.Date dtDurRen = DateUtil.getDateMMDDYYYY(tdtMaturityDate.getDateValue());
            Date curr_Dt = (Date) currDt.clone();
            java.util.Date intDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
            java.util.Date startDt = null;
            java.util.Date addDate = null;
            java.util.Date dtBefRen = null;
            startDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
            dtBefRen = startDt;
            java.util.Date date = (Date) currDt.clone();
            String depDt = DateUtil.getStringDate(date);
            calcMap.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(depDt));
            calcMap.put("DEPOSIT_PERIOD_YY", txtPeriodOfDeposit_Years.getText());
            calcMap.put("DEPOSIT_PERIOD_MM", txtPeriodOfDeposit_Months.getText());
            calcMap.put("DEPOSIT_PERIOD_DD", txtPeriodOfDeposit_Days.getText());
            txtDepositAmount.setText(String.valueOf(depAmtDurRen));
            observable.setTxtDepositAmount(observable.getTotalBalanceValue());
            calcMap = observable.calculateMaturityDate(calcMap);
            calcMap.put("DEPOSIT_DT", intDt);
            calcMap.put("TO_DAY_DT", currDt.clone());
            calcMap.put("DEPOSIT_AMT", new Double(depAmtDurRen));
            calcMap = observable.simpleInterestCalculation(calcMap);
            sbAmount = CommonUtil.convertObjToDouble(calcMap.get("CALC_AMT")).doubleValue();
            //            observable.setSbIntAmount(sbAmount);
            if (sbAmount > 0) {
                depAmtBefRen = depAmtDurRen;
                txtDepositAmount.setText(String.valueOf(depAmtBefRen));
                tdtDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(currDt.clone()));
                calculateInterestAmount();
                calcMap.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(depDt));
                calcMap.put("DEPOSIT_PERIOD_YY", txtPeriodOfDeposit_Years.getText());
                calcMap.put("DEPOSIT_PERIOD_MM", txtPeriodOfDeposit_Months.getText());
                calcMap.put("DEPOSIT_PERIOD_DD", txtPeriodOfDeposit_Days.getText());
                //                txtDepositAmount.setText(String.valueOf(depAmtDurRen));
                calcMap = observable.calculateMaturityDate(calcMap);
                tdtMaturityDate.setDateValue(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
                if (DateUtil.dateDiff(dtBefRen, curr_Dt) <= observable.backDateFreq && DateUtil.dateDiff(dtBefRen, curr_Dt) != 0) {
                    observable.setTdtDateOfDeposit(CommonUtil.convertObjToStr(intDt));
                    tdtDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(observable.getTdtDateOfDeposit()));
                    calcMap.put("DEPOSIT_DT", intDt);
                    calcMap = observable.calculateMaturityDate(calcMap);
                    java.util.Date maturDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
                    tdtMaturityDate.setDateValue(CommonUtil.convertObjToStr(maturDt));
                } else {
                    observable.setTdtDateOfDeposit(CommonUtil.convertObjToStr(currDt.clone()));
                    tdtDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(observable.getTdtDateOfDeposit()));
                    calcMap = observable.calculateMaturityDate(calcMap);
                    java.util.Date maturDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
                    tdtMaturityDate.setDateValue(CommonUtil.convertObjToStr(maturDt));
                }
            } else {
                //system.out.println("0 changePeriod() :");
                changePeriod();
            }
        } else {
            already = true;
            btnCancel.setEnabled(false);
            //system.out.println("1 changePeriod() :");
            changePeriod();
        }
        //system.out.println("#### cash intAmtCash :" + intAmtCash);
    }

    //---txtDepositAmountFocusLost in renewal mode
    private void renewaltxtDepositAmtFocusLost() {
        double secTerm = 0;
        double retInt = setRateOfInterset(); // Sets the Interest rate
        if (retInt != 0) {
            float depAmt = Float.parseFloat(txtDepositAmount.getText());
            setYr();
            if ((txtRateOfInterest.getText() != null) && (!txtRateOfInterest.getText().equals(""))) {
                if (observable.productInterestType.equals(observable.prodInterestType)) {
                    secTerm = (1 + ((Double.parseDouble(txtRateOfInterest.getText()) / 100) * yr));
                    //system.out.println("#### Third time txtPeriodOfDeposit_Days " + txtMaturityAmount.getText());
                } else {
                    secTerm = java.lang.Math.pow(1 + (Double.parseDouble(txtRateOfInterest.getText()) / 100), yr);
                }
            }
            float matAmt = depAmt * (float) secTerm;
            //--- If Product Behaves Like Fixed, then Maturity Amount = Deposit Amount
            if (!observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                if (interestYesNo) {
                    observable.setTxtMaturityAmount(String.valueOf(matAmt));
                } else {
                    observable.setTxtMaturityAmount(String.valueOf(txtDepositAmount.getText()));
                }
                //                txtMaturityAmount.setText(observable.getTxtMaturityAmount());
            } else {
                observable.setTxtMaturityAmount(String.valueOf(txtDepositAmount.getText()));
                //                observable.setTxtMaturityAmount(String.valueOf(matAmt));
                //txtMaturityAmount.setText(observable.getTxtMaturityAmount());
                //system.out.println("#### Fourth time txtPeriodOfDeposit_Days " + txtMaturityAmount.getText());
            }
            double totalIntAmt = matAmt - depAmt;
            totalIntAmt = (double) getNearest((long) (totalIntAmt * 100), 100) / 100;
            observable.setTxtTotalInterestAmount(String.valueOf(totalIntAmt));
            //system.out.println(" renewaltxtDepositAmtFocusLost totalIntAmt" + totalIntAmt);
            //txtTotalInterestAmount.setText(observable.getTxtTotalInterestAmount());
            //system.out.println("#### Fifth time txtPeriodOfDeposit_Days " + txtMaturityAmount.getText());
        }
        ////system.out.println("#### Sixth time txtPeriodOfDeposit_Days "+txtMaturityAmount.getText());
    }

    private void settingMaturityValues() {
        if (!observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
            double matAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
            double interAmt = CommonUtil.convertObjToDouble(observable.getTxtTotalInterestAmount()).doubleValue();
            double tot = matAmt + interAmt;
            txtMaturityAmount.setText(String.valueOf(tot));
            txtTotalInterestAmount.setText(observable.getTxtTotalInterestAmount());
            observable.setTxtPeriodicInterestAmount(CommonUtil.convertObjToStr(""));
            txtPeriodicInterestAmount.setText(observable.getTxtPeriodicInterestAmount());
        } else {
            txtTotalInterestAmount.setText(observable.getTxtTotalInterestAmount());
            txtMaturityAmount.setText(txtDepositAmount.getText());
        }
    }

    public void changePeriod() {
        renewalSubNo = true;
        txtDepositAmount.setEnabled(false);
        renewalTransMap.remove("DEPOSIT_AMT_TRANSFER");
        //        cboCategory.setEnabled(false);
        String[] obj3 = {"Yes ", "No"};
        int option2 = COptionPane.showOptionDialog(null, ("Do you want to Change Product Id?"), ("Deposit Renewal Option"),
                COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj3, obj3[0]);
        if (option2 == 0) {
            txtPeriodOfDeposit_Years.setEnabled(true);
            txtPeriodOfDeposit_Months.setEnabled(true);
            txtPeriodOfDeposit_Days.setEnabled(true);
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                cboInterestPaymentFrequency.setEnabled(true);
            }
            cboInterestPaymentMode.setEnabled(true);
            exists = true;
            //            periodChange = true;
            cboProductId.requestFocus();
            cboProductId.setEnabled(true);
        } else {
            periodFlag = true;
            exists = true;
            already = false;
            periodChange = false;
            cboProductId.setEnabled(false);
            String[] obj4 = {"Yes", "No"};
            int option3 = COptionPane.showOptionDialog(null, ("Do you want to Change the Period of Deposit?"), ("Deposit Renewal Option"),
                    COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj4, obj4[0]);
            if (option3 == 0) {
                cboInterestPaymentFrequency.requestFocus();
                txtPeriodOfDeposit_Years.setEnabled(true);
                txtPeriodOfDeposit_Months.setEnabled(true);
                txtPeriodOfDeposit_Days.setEnabled(true);
                if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                    cboInterestPaymentFrequency.setEnabled(true);
                }
                cboInterestPaymentMode.setEnabled(true);
            } else {
                cboflag = false;
                txtPeriodOfDeposit_Days.setEnabled(true);
            }
            //            btnSave.setEnabled(true);
            //            if(periodFlag == true)
            //                depSubNoSave(); //--- Save the Data

        }
        txtDepositAmtFocusLost();
        settingMaturityValues();
        cboInterestPaymentFreqActionPerformed();
        cboInterestPaymentMode.setEnabled(true);
        cboSettlementMode.setEnabled(true);
    }

    private void amt() {
        HashMap calcMap = new HashMap();
        java.util.Date dtDurRen = DateUtil.getDateMMDDYYYY(tdtMaturityDate.getDateValue());
        Date curr_Dt = (Date) currDt.clone();
        java.util.Date intDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
        java.util.Date startDt = null;
        java.util.Date date = (Date) currDt.clone();
        java.util.Date dtBefRen = null;
        startDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
        dtBefRen = startDt;
        String[] obj1 = {"Yes ", "No"};
        String depDt = DateUtil.getStringDate(date);
        calcMap.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(depDt));
        calcMap.put("DEPOSIT_PERIOD_YY", txtPeriodOfDeposit_Years.getText());
        calcMap.put("DEPOSIT_PERIOD_MM", txtPeriodOfDeposit_Months.getText());
        calcMap.put("DEPOSIT_PERIOD_DD", txtPeriodOfDeposit_Days.getText());
        int option1 = COptionPane.showOptionDialog(null, ("Do you want to add Some Amount To this Deposit?"), ("Deposit Renewal Option"),
                COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj1, obj1[0]);
        if (option1 == 0) {
            //            exists = true;
            if (DateUtil.dateDiff(dtBefRen, curr_Dt) <= observable.backDateFreq && DateUtil.dateDiff(dtBefRen, curr_Dt) != 0) {
                calcMap = observable.calculateMaturityDate(calcMap);
                calcMap.put("DEPOSIT_DT", intDt);
                calcMap.put("TO_DAY_DT", currDt.clone());
                ClientUtil.showMessageWindow("If Additional Amount is added... Deposit will be Renewed From Today....\n"
                        + "Deposit Date is :" + currDt.clone());
                tdtMaturityDate.setDateValue(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
            } else {
            }
            //            txtDepositAmount.setEnabled(true);
            continueOrNot = false;
            txtDepositAmount.requestFocus();
            observable.setTdtDateOfDeposit(CommonUtil.convertObjToStr(currDt.clone()));
            tdtDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(observable.getTdtDateOfDeposit()));
            settingMaturityValues();
            addingAmt = true;
            already = true;
            addingSomeAmt = true;
        } else if (option1 == 1) {
            if (DateUtil.dateDiff(dtBefRen, curr_Dt) <= observable.backDateFreq && DateUtil.dateDiff(dtBefRen, curr_Dt) != 0) {
                observable.setTdtDateOfDeposit(CommonUtil.convertObjToStr(intDt));
                tdtDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(observable.getTdtDateOfDeposit()));
                calcMap.put("DEPOSIT_DT", intDt);
                calcMap = observable.calculateMaturityDate(calcMap);
                java.util.Date maturDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
                tdtMaturityDate.setDateValue(CommonUtil.convertObjToStr(maturDt));
            } else {
                observable.setTdtDateOfDeposit(CommonUtil.convertObjToStr(currDt.clone()));
                tdtDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(observable.getTdtDateOfDeposit()));
                calcMap = observable.calculateMaturityDate(calcMap);
                java.util.Date maturDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
                tdtMaturityDate.setDateValue(CommonUtil.convertObjToStr(maturDt));
            }
            if (transbeyond == true) {
                //system.out.println("2 changePeriod() :");
                changePeriod();
                already = true;
            } else {
                //system.out.println("3 changePeriod() :");
                changePeriod();
            }
            settingMaturityValues();
        } else {
            already = true;
        }
    }

    public void addingSomeAmt() {
        HashMap calcMap = new HashMap();
        java.util.Date dtDurRen = DateUtil.getDateMMDDYYYY(tdtMaturityDate.getDateValue());
        Date curr_Dt = (Date) currDt.clone();
        java.util.Date intDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
        java.util.Date startDt = null;
        java.util.Date date = (Date) currDt.clone();
        java.util.Date dtBefRen = null;
        startDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
        String depDt = DateUtil.getStringDate(date);
        calcMap.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(depDt));
        calcMap.put("DEPOSIT_PERIOD_YY", txtPeriodOfDeposit_Years.getText());
        calcMap.put("DEPOSIT_PERIOD_MM", txtPeriodOfDeposit_Months.getText());
        calcMap.put("DEPOSIT_PERIOD_DD", txtPeriodOfDeposit_Days.getText());
        observable.withDrawFlag = false;
        dtBefRen = startDt;
        String[] obj = {"Yes ", "No"};
        int option = COptionPane.showOptionDialog(null, ("Do you want to Withdraw Some Amount From this Deposit?"), ("Deposit Renewal Option"),
                COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj, obj[0]);
        if (option == 0) {
            observable.withDrawFlag = true;
            if ((DateUtil.dateDiff(dtBefRen, curr_Dt) + 1) >= observable.backDateFreq) {
                beyond15 = true;
            }
            observable.setAmtReduce("OUT");
            withDrawAmount();
            txtDepositAmtFocusLost();
            settingMaturityValues();
            cboInterestPaymentFreqActionPerformed();
            txtTotalInterestAmount.setText(observable.getTxtTotalInterestAmount());
        } else if (option == 1) {
            observable.setAmtReduce("WIT");
            if (beyond15 == false && transbeyond == false && withInt == false) {
                transbeyond = true;
                beyond15 = true;
                double depAmtBefRen = Double.parseDouble(txtDepositAmount.getText());
                calcMap = observable.calculateMaturityDate(calcMap);
                calcMap.put("DEPOSIT_DT", intDt);
                calcMap.put("TO_DAY_DT", currDt.clone());
                calcMap.put("DEPOSIT_AMT", new Double(depAmtBefRen));
                double intAmt = CommonUtil.convertObjToDouble(txtTotalInterestAmount.getText()).doubleValue();
                txtDepositAmount.setText(String.valueOf(depAmtBefRen));
                if (fixedValue == true && observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                    calculateInterestAmount();
                } else {
                    calcMap = observable.simpleInterestCalculation(calcMap);
                    sbAmount = CommonUtil.convertObjToDouble(calcMap.get("CALC_AMT")).doubleValue();
                    //                    observable.setSbIntAmount(sbAmount);
                    if (sbAmount > 0) {
                        txtDepositAmount.setText(String.valueOf(depAmtBefRen));
                        tdtDateOfDeposit.setDateValue(CommonUtil.convertObjToStr(currDt.clone()));
                        tdtMaturityDate.setDateValue(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
                        calculateInterestAmount();
                    } else {
                        amt();
                    }
                }
            } else {
                amt();
            }
        } else {
            already = true;
        }
    }

    private void renewalDepositAmtChange() {
        amt = true;
        renewalMousePress = true;
        selectedDepSubNoRow = true;
        double depAmtDurRen = Double.parseDouble(txtDepositAmount.getText());
        double depAmtBefRen = observable.depAmt;
        //system.out.println("depAmtDurRen" + depAmtDurRen);
        //system.out.println("depAmtBefRen" + depAmtBefRen);
        HashMap calcMap = new HashMap();
        HashMap transMap = new HashMap();
        java.util.Date dtDurRen = DateUtil.getDateMMDDYYYY(tdtMaturityDate.getDateValue());
        Date curr_Dt = (Date) currDt.clone();
        java.util.Date intDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
        java.util.Date startDt = null;
        java.util.Date addDate = null;
        java.util.Date dtBefRen = null;
        startDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
        dtBefRen = startDt;
        java.util.Date date = (Date) currDt.clone();
        String depDt = DateUtil.getStringDate(date);
        calcMap.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(depDt));
        calcMap.put("DEPOSIT_PERIOD_YY", txtPeriodOfDeposit_Years.getText());
        calcMap.put("DEPOSIT_PERIOD_MM", txtPeriodOfDeposit_Months.getText());
        calcMap.put("DEPOSIT_PERIOD_DD", txtPeriodOfDeposit_Days.getText());
        double intAmt = CommonUtil.convertObjToDouble(txtTotalInterestAmount.getText()).doubleValue();
        HashMap totalBalMap = new HashMap();
        totalBalMap.put("DEPOSIT_NO", lblValRenewDep.getText());
        List lst = ClientUtil.executeQuery("getTotalBalDep", totalBalMap);
        if (lst != null && lst.size() > 0) {
            totalBalMap = (HashMap) lst.get(0);
            observable.setTotalBalanceValue(CommonUtil.convertObjToStr(totalBalMap.get("TOTAL_BALANCE")));
        }
        double earlierAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
        if ((DateUtil.dateDiff(dtBefRen, curr_Dt) + 1) <= observable.backDateFreq) {//if that deposit is renewing with in 15 days it will come in side this condition
            if (periodChange == false) {
                if (exists == false) {
                    renewSave = true;
                    if (already == false) {
                        depAmtBefRen = CommonUtil.convertObjToDouble(observable.getTotalBalanceValue()).doubleValue();
                        observable.setTxtDepositAmount(observable.getTotalBalanceValue());
                        txtDepositAmount.setText(String.valueOf(depAmtBefRen));
                        txtTotalInterestAmount.setText(String.valueOf(intAmt));
                        if (observable.balIntAmt > 0) {//any interest is pending means it will come inside
                            ClientUtil.showMessageWindow("Balance Interest Amount is : " + observable.balIntAmt);
                            if (!observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                                depAmtBefRen = depAmtBefRen + observable.balIntAmt;
                            } else {
                                depAmtBefRen = depAmtBefRen;
                            }
                            txtDepositAmount.setText(String.valueOf(depAmtBefRen));
                            sbAmount = 0;
                            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {//incase interest amt is want withdraw means
                                calculateInterestAmount();// it will come inside this condition (incase of FD deposits.
                                if (withInt == true) {
                                    addingSomeAmt();
                                }
                            } else {//other than FD deposits it will come inside this condition.
                                withInt = false;
                                addingSomeAmt();
                            }
                        } else {//nothing is pending means it will come here
                            if (observable.balIntAmt < 0) {
                                ClientUtil.showMessageWindow("Credited More Interest Amount is : " + observable.balIntAmt * -1);
                                txtDepositAmount.setText(String.valueOf(depAmtBefRen + observable.balIntAmt));
                            } else {
                                txtDepositAmount.setText(String.valueOf(depAmtBefRen));
                            }
                            withInt = true;
                            addingSomeAmt();
                        }
                    } else {
                        if (continueOrNot) {
                            befAddingAddAmt = Double.parseDouble(observable.getTxtDepositAmount());
                            depAmtDurRen = Double.parseDouble(observable.getTxtDepositAmount());
                            depAmtBefRen = observable.depAmt;
                            depAmtBefRen = depAmtBefRen + observable.balIntAmt;
                            if (depAmtBefRen < depAmtDurRen) {
                                depAmtDurRen = depAmtDurRen;
                            } else {
                                depAmtDurRen = depAmtBefRen;
                            }
                            double addedAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                            //system.out.println(" depAmtDurRen within15days:" + depAmtDurRen + "depAmtBefRen within15days" + depAmtBefRen + "addedAmt within15days" + addedAmt);
                            if (depAmtDurRen > addedAmt) {
                                ClientUtil.showAlertWindow("Amount is lesser than the Deposit Amount..."
                                        + "Enter Amount greater than Deposit Amount");
                                txtDepositAmount.setText(String.valueOf(depAmtDurRen));
                                txtDepositAmtFocusLost();
                                settingMaturityValues();
                                cboInterestPaymentFreqActionPerformed();
                                already = true;
                                contProdId = true;
                                txtDepositAmount.requestFocus();
                            } else {
                                exists = true;
                                //system.out.println("4 changePeriod() :");
                                changePeriod();
                            }
                        }
                        continueOrNot = true;
                    }
                }
            }
        } else if ((DateUtil.dateDiff(dtBefRen, curr_Dt) + 1) >= observable.backDateFreq) {
            if (periodChange == false) {
                if (exists == false) {
                    renewSave = true;
                    if (already == false) {
                        if (!observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                            txtMaturityAmount.setText(String.valueOf(observable.matAmount));
                        }
                        if (observable.balIntAmt > 0) {
                            earlierAmt = CommonUtil.convertObjToDouble(observable.getTotalBalanceValue()).doubleValue();
                            ClientUtil.showMessageWindow("Balance Interest Amount is : " + observable.balIntAmt);
                        } else if (observable.balIntAmt < 0) {
                            ClientUtil.showMessageWindow("Credited More Interest Amount is : " + observable.balIntAmt * -1);
                        }
                        if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                            fixedValue = true;
                            if (observable.balIntAmt < 0) {
                                depAmtBefRen = depAmtBefRen + observable.balIntAmt;
                            } else {
                                depAmtBefRen = depAmtBefRen;
                            }
                        } else {
                            depAmtBefRen = depAmtBefRen + observable.balIntAmt;
                        }
                        txtDepositAmtFocusLost();
                        settingMaturityValues();
                        cboInterestPaymentFreqActionPerformed();
                        txtDepositAmount.setText(String.valueOf(depAmtBefRen));
                        addingSomeAmt();
                    } else {
                        //system.out.println("already true : ");
                        befAddingAddAmt = Double.parseDouble(observable.getTxtDepositAmount());
                        depAmtDurRen = Double.parseDouble(observable.getTxtDepositAmount()) + sbAmount + observable.balIntAmt;
                        depAmtBefRen = observable.depAmt;
                        depAmtBefRen = depAmtBefRen + observable.balIntAmt;
                        double addedAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                        //system.out.println("depAmtDurRen:" + depAmtDurRen + "depAmtBefRen:" + depAmtBefRen + "addedAmt:" + addedAmt);
                        if (depAmtDurRen > addedAmt) {
                            ClientUtil.showAlertWindow("Amount is lesser than the Deposit Amount..."
                                    + "Enter Amount greater than Deposit Amount");
                            txtDepositAmount.setText(String.valueOf(depAmtDurRen));
                            already = true;
                            txtDepositAmtFocusLost();
                            settingMaturityValues();
                            cboInterestPaymentFreqActionPerformed();
                            txtDepositAmount.requestFocus();
                        }
                    }
                }
            }
            settingMaturityValues();
        }
    }

    private void btnJointAcctToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJointAcctToMainActionPerformed
        updateOBFields();
        setBtnJointAccnt(false);
        btnJointAcctNew.setEnabled(true);
        observable.moveToMain(CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(0, 1)), CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(tblJointAcctHolder.getSelectedRow(), 1)), tblJointAcctHolder.getSelectedRow());
        observable.ttNotifyObservers();
    }//GEN-LAST:event_btnJointAcctToMainActionPerformed
//    private void  getRnewalPeriod(){
//        int YrsToDay = 0;
//        int MonthsToDay = 0;
//        int daysEntered = 0;
//        period = 0;
//        if((txtRenewalPeriodOfDeposit_Years.getText() != null) && (!txtRenewalPeriodOfDeposit_Years.getText().equals(""))){
//            YrsToDay =  (Integer.parseInt(txtRenewalPeriodOfDeposit_Years.getText()))*365 ;
//        }
//        if((txtRenewalPeriodOfDeposit_Months.getText() != null) && (!txtRenewalPeriodOfDeposit_Months.getText().equals(""))){
//            MonthsToDay = ((Integer.parseInt(txtRenewalPeriodOfDeposit_Months.getText()))*30);
//        }
//        if((txtRenewalPeriodOfDeposit_Days.getText() != null) && (!txtRenewalPeriodOfDeposit_Days.getText().equals(""))){
//            daysEntered = Integer.parseInt(txtRenewalPeriodOfDeposit_Days.getText());
//        }
//        period = (YrsToDay + MonthsToDay +daysEntered);
//    }

    private void btnJointAcctDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJointAcctDelActionPerformed
        updateOBFields();

        if (poaUI.checkCustIDExistInJointAcctAndPoA(CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(tblJointAcctHolder.getSelectedRow(), 1)))) {
            setBtnJointAccnt(false);
            btnJointAcctNew.setEnabled(true);
            String strCustIDToDel = CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(tblJointAcctHolder.getSelectedRow(), 1));
            observable.delJointAccntHolder(CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(tblJointAcctHolder.getSelectedRow(), 1)), tblJointAcctHolder.getSelectedRow());
            authSignUI.removeAcctLevelCustomer(strCustIDToDel);
            observable.resetCustDetails();
            poaUI.getPowerOfAttorneyOB().ttNotifyObservers();
            observable.ttNotifyObservers();
        }
    }//GEN-LAST:event_btnJointAcctDelActionPerformed
    private void getExtensionPeriod() {
        int YrsToDay = 0;
        int MonthsToDay = 0;
        int daysEntered = 0;
        period = 0;
        if ((txtExtensionPeriodOfDeposit_Years.getText() != null) && (!txtExtensionPeriodOfDeposit_Years.getText().equals(""))) {
            YrsToDay = (Integer.parseInt(txtExtensionPeriodOfDeposit_Years.getText())) * 365;
        }
        if ((txtExtensionPeriodOfDeposit_Months.getText() != null) && (!txtExtensionPeriodOfDeposit_Months.getText().equals(""))) {
            MonthsToDay = ((Integer.parseInt(txtExtensionPeriodOfDeposit_Months.getText())) * 30);
        }
        if ((txtExtensionPeriodOfDeposit_Days.getText() != null) && (!txtExtensionPeriodOfDeposit_Days.getText().equals(""))) {
            daysEntered = Integer.parseInt(txtExtensionPeriodOfDeposit_Days.getText());
        }
        period = (YrsToDay + MonthsToDay + daysEntered);
    }
    private void tblJointAcctHolderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblJointAcctHolderMousePressed
        if (!viewType.equals(ClientConstants.VIEW_TYPE_DELETE)) { //--- If it is not in Delete mode, select the row
            tblJointAcctHolderRowSelected(tblJointAcctHolder.getSelectedRow());
        }
        //--- To disable all the buttons in Authorize status
        if (viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE) || observable.isTransactionDone == true) {
            setBtnJointAccnt(false);
        }
        if (tblJointAcctHolder.getSelectedRowCount() > 0 && evt.getClickCount() == 2) {
            if(!cboAddressType.getSelectedItem().equals("")){            
                new CustomerDetailsScreenUI(CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(tblJointAcctHolder.getSelectedRow(), 1)),
                        CommonUtil.convertObjToStr(observable.getCbmAddressType().getKeyForSelected())).show();
            }else{
                ClientUtil.showMessageWindow("CommunicationAddress should be a proper value!!!");
                return;
            }
        }
    }//GEN-LAST:event_tblJointAcctHolderMousePressed
    /**
     * Populates the Joint Account Holder data in the Screen for the row passed
     * as argument.
     *
     * @param int rowSelected is passed as argument
     */
    private void tblJointAcctHolderRowSelected(int rowSelected) {
        if (tblJointAcctHolder.getSelectedRow() != 0) {
            setBtnJointAccnt(true);
        } else if (cboConstitution.getSelectedItem().equals("Joint Account")) {
            setBtnJointAccnt(false);
            btnJointAcctNew.setEnabled(true);
        }

        HashMap cust = new HashMap();
        cust.put("CUST_ID", tblJointAcctHolder.getValueAt(tblJointAcctHolder.getSelectedRow(), 1));
        observable.populateScreen(cust, true);
        updateCustomerDetails();
        cust = null;
    }
    private void btnJointAcctNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJointAcctNewActionPerformed
        if (tblJointAcctHolder.getRowCount() != 0) { //--- If the Main Accnt Holder is selected,
//            callView("JOINT ACCOUNT");           //--- allow the user to add Jnt Acct Holder
            viewType = "JOINT ACCOUNT";
            new CheckCustomerIdUI(this);
        } else {  //--- else if the Main Acct Holder is not selected, prompt the user to select
            CommonMethods.showDialogOk(objCommRB.getString("selectMainAccntHolder")); //--- the Main Acct. holder
            btnCustomerIdFileOpen.requestFocus(true);
        }
        poaUI.ttNotifyObservers();
    }//GEN-LAST:event_btnJointAcctNewActionPerformed
    /**
     * Displays the Alert message for Joint Account Holder Data and gives the
     * Option to reset it.
     */
    private void checkJointAccntHolderForData() {
        if (tblJointAcctHolder.getRowCount() > 1) {
            //            int reset = observable.showDialog("dialogForJointAccntHolder");
            int reset = CommonMethods.showDialogYesNo(objCommRB.getString("dialogForJointAccntHolder"));
            if (reset == yes) { //--- If Yes, disable Joint Account Holder Tab
                removedJointAcctCustIDNAuthSignatory();
                observable.resetJntAccntHoldTbl();
                CustInfoDisplay(txtCustomerId.getText());
                poaUI.resetPoACustID(txtCustomerId.getText());
                poaUI.setCboPoACustModel();
                setBtnJointAccnt(false);
                observable.ttNotifyObservers();
            } else if (reset == no) { //--- If No, don't disable Joint Account Holder Tab.
                observable.setCboConstitution("Joint Account");
                cboConstitution.setSelectedItem(observable.getCboConstitution());
            }
        } else {
            setBtnJointAccnt(false);
        }
    }
    private void cboConstitutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboConstitutionActionPerformed
        //--- If some data is seleted, check whether it is Joint Account
        //        if(cboProductId.getSelectedItem()!=null && !cboProductId.getSelectedItem().equals("")){
        observable.setCboConstitution(CommonUtil.convertObjToStr(cboConstitution.getSelectedItem()));
        if ((!cboConstitution.getSelectedItem().equals("")) && (cboConstitution.getSelectedItem() != null)) {
            //--- If Selected data is "Joint Account", enable the New Button
            if (cboConstitution.getSelectedItem().equals("Joint Account")) {
                //--- If the view type is not authorize and if the transaction is not done , then continue else dont enable
                //                if(!viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE) && observable.isTransactionDone == false){
                //                    btnJointAcctNew.setEnabled(true);
                //                }
                btnJointAcctNew.setEnabled(true);
            } else {
                checkJointAccntHolderForData();
            }
            //--- Else if no data is seleted, disable the Buttons
        } else if (cboConstitution.getSelectedItem().equals("")) {
            checkJointAccntHolderForData();
        }
        if (cboConstitution.getSelectedItem().equals("Joint Account") || cboConstitution.getSelectedItem().equals("Individual") || cboConstitution.getSelectedItem().equals("Induvidual")) {
            //            tabTermDeposit.add(nomineeUi);
            //            tabTermDeposit.add(nomineeUi,"Nominee", 2);
            lblNomineeDetails.setVisible(true);
            chkNomineeDetails.setVisible(true);
        } else {
            //            tabTermDeposit.remove(nomineeUi);
            lblNomineeDetails.setVisible(false);
            chkNomineeDetails.setVisible(false);
        }
        //        }else{
        //            ClientUtil.displayAlert("Choose Product id first...");
        //            return;
        //        }
    }//GEN-LAST:event_cboConstitutionActionPerformed
    /**
     * Calculates the Total period of deposit in years
     */
    private void setYr() {
        if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
            yr = Double.parseDouble(txtPeriodOfDeposit_Years.getText());
        }

        if ((txtPeriodOfDeposit_Months.getText() != null) && (!txtPeriodOfDeposit_Months.getText().equals(""))) {
            yr = yr + (Double.parseDouble(txtPeriodOfDeposit_Months.getText()) / totalMonths);

        }

        if ((txtPeriodOfDeposit_Days.getText() != null) && (!txtPeriodOfDeposit_Days.getText().equals(""))) {
            yr = yr + (Double.parseDouble(txtPeriodOfDeposit_Days.getText()) / totalDays);
        }
    }

    /**
     * To set the Rate of Interest based on Product Id, Category ID, Period Of
     * Deposit and Deposit Amount
     */
    private double setRateOfInterset() {
        updateOBDepSubNo();
        double retInt = 0.0;
        if (!flPtWithoutPeriod) {
            retInt = observable.setRateOfInterset(null);
        }
        updateDepSubNo();
        return retInt;
    }
    private void cboInterestPaymentFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboInterestPaymentFrequencyActionPerformed
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW && newModeMouseClick == false) {
            double newModePeriod = 0.0;
            String freqency = ((ComboBoxModel) cboInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
            String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
            String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(prodId));
            int freq = CommonUtil.convertObjToInt(freqency);
            newModePeriod = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue() * 360;
            newModePeriod = newModePeriod + CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue() * 30;
            newModePeriod = newModePeriod + CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Days.getText()).doubleValue();
            //            if(strBehavesLike.equals("FIXED") && freq == 30 && newModePeriod <360){
            if (strBehavesLike.equals("FIXED") && freq == 60 && newModePeriod < 60) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency ");
                cboInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 120 && newModePeriod < 120) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 150 && newModePeriod < 150) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 210 && newModePeriod < 210) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboInterestPaymentFrequency.setSelectedItem("");
                return;
            }
            if (strBehavesLike.equals("FIXED") && freq == 240 && newModePeriod < 240) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 270 && newModePeriod < 270) {
                ClientUtil.showAlertWindow("Not able to give  Interest for this Period ");
                cboInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 300 && newModePeriod < 300) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 330 && newModePeriod < 330) {
                ClientUtil.showAlertWindow("Select a lesser interest payment frequency  ");
                cboInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && freq == 30 && newModePeriod < 30) {
                ClientUtil.showAlertWindow("Not able to give Monthly Interest for this Period ");
                cboInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && newModePeriod < 90 && freq == 90) {
                ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");
                cboInterestPaymentFrequency.setSelectedItem("");
                return;
            } else if (strBehavesLike.equals("FIXED") && newModePeriod < 180 && freq == 180) {
                if (newModePeriod < 90) {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");
                    cboInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be monthly or Quarterly ... ");
                    cboInterestPaymentFrequency.setSelectedItem("");
                    return;
                }
            } else if (strBehavesLike.equals("FIXED") && newModePeriod < 360 && freq == 360) {
                if (newModePeriod < 90) {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");
                    cboInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else if (newModePeriod < 180) {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be monthly or  Quarterly ... ");
                    cboInterestPaymentFrequency.setSelectedItem("");
                    return;
                } else {
                    ClientUtil.showAlertWindow("Int Pay Freqency can be monthly,quarterly or HalfYearly...");
                    cboInterestPaymentFrequency.setSelectedItem("");
                    return;
                }
            }

        }
        //        if(txtDepositAmount.getText().length()>0 &&
        //        CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue()>0){
        //            periodCalculationMethod();
        //        }
    }//GEN-LAST:event_cboInterestPaymentFrequencyActionPerformed
    private void cboInterestPaymentFreqActionPerformed() {
        if ((!cboInterestPaymentFrequency.getSelectedItem().equals("")) && (cboInterestPaymentFrequency.getSelectedItem() != null)) {
            if ((txtTotalInterestAmount.getText() != null) && (!txtTotalInterestAmount.getText().equals(""))) {
                double perIntAmt = 0;
                setYr();
                double totalIntAmtPerYear = (Double.parseDouble(txtTotalInterestAmount.getText()) / yr);
                if (cboInterestPaymentFrequency.getSelectedItem().equals(observable.HALFYEARLY)) {
                    perIntAmt = totalIntAmtPerYear / perHalfYear;
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals(observable.MONTHLY)) {
                    perIntAmt = totalIntAmtPerYear / perMonth;

                    double depositAmt = Double.parseDouble(txtDepositAmount.getText());

                    //--- Calculation for Period as No.Of Days
                    int YrsToDay = 0;
                    int MonToDay = 0;
                    int daysEntered = 0;
                    int periodInDays = 0;
                    int week = 0;
                    if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
                        YrsToDay = (Integer.parseInt(txtPeriodOfDeposit_Years.getText())) * 365;
                    }
                    if ((txtPeriodOfDeposit_Months.getText() != null) && (!txtPeriodOfDeposit_Months.getText().equals(""))) {
                        MonToDay = ((Integer.parseInt(txtPeriodOfDeposit_Months.getText())) * 30);
                    }
                    if ((txtPeriodOfDeposit_Days.getText() != null) && (!txtPeriodOfDeposit_Days.getText().equals(""))) {
                        daysEntered = Integer.parseInt(txtPeriodOfDeposit_Days.getText());
                    }
                    if ((txtWeek.getText() != null) && (!txtWeek.getText().equals(""))) {
                        week = Integer.parseInt(txtWeek.getText());
                    }



                    periodInDays = (YrsToDay + MonToDay + daysEntered + week);

                    //--- End 0f Calculation Period as No.Of Days

                    //system.out.println("perIntAmt" + perIntAmt);
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals(observable.YEARLY)) {
                    perIntAmt = totalIntAmtPerYear;
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals(observable.QUARTERLY)) {
                    perIntAmt = totalIntAmtPerYear / perQuarterYear;
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals(observable.DATEOFMATURITY)) {
                    perIntAmt = 0;
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals("2 Months")) {
                    perIntAmt = totalIntAmtPerYear / 6;
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals("4 Months")) {
                    perIntAmt = totalIntAmtPerYear / 3;
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals("5 Months")) {
                    perIntAmt = totalIntAmtPerYear / 2.4;
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals("7 Months")) {
                    perIntAmt = totalIntAmtPerYear / 1.7;
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals("8 Months")) {
                    perIntAmt = totalIntAmtPerYear / 1.5;
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals("9 Months")) {
                    perIntAmt = totalIntAmtPerYear / 1.33;
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals("10 Months")) {
                    perIntAmt = totalIntAmtPerYear / 1.2;
                } else if (cboInterestPaymentFrequency.getSelectedItem().equals("11 Months")) {
                    perIntAmt = totalIntAmtPerYear / 1.09;
                }

                //system.out.println("perIntAmt" + perIntAmt);
                try {
                    if(depInt!=null && depInt.equals("N")){
                    	perIntAmt = (double) getNearest((long) (perIntAmt * 100), 100) / 100;
                    }else{
                      	DecimalFormat df= new DecimalFormat("#.##");
                      	perIntAmt=CommonUtil.convertObjToDouble(df.format(perIntAmt));
                    }
                    //                    perIntAmt = (double)roundOffLower((long)(perIntAmt*100),5)/100;
                    //system.out.println("#### cboInterestPaymentFreqActionPerformed " + perIntAmt);
                } catch (Exception e) {
                    //system.out.println(e);
                }
                observable.setTxtPeriodicInterestAmount(String.valueOf(perIntAmt));
                txtPeriodicInterestAmount.setText(observable.getTxtPeriodicInterestAmount());
            }
        } else if ((cboInterestPaymentFrequency.getSelectedItem().equals("")) || (cboInterestPaymentFrequency.getSelectedItem() == null)) {
            observable.setTxtPeriodicInterestAmount("");
            txtPeriodicInterestAmount.setText(observable.getTxtPeriodicInterestAmount());
        }
    }
    private void txtPeriodOfDeposit_DaysFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPeriodOfDeposit_DaysFocusLost
        String oldValue = observable.getTxtPeriodOfDeposit_Days();
        String newValue = txtPeriodOfDeposit_Days.getText();
        //--- If oldValue is not equal to newValue, then reset the calculated fields for
        //--- recalculating the values
        //system.out.println("#############  txtPeriodOfDeposit_Days ");
        //        if(!oldValue.equals(newValue) && viewType != ClientConstants.VIEW_TYPE_RENEW && !viewType.equals("CREDIT_ACC_NO")){
        //            resetDepSubNoFields();
        //        }
        if (viewType == ClientConstants.VIEW_TYPE_RENEW) {
            cboflag = false;
            HashMap calcMap = new HashMap();
            java.util.Date depDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
            calcMap.put("DEPOSIT_PERIOD_YY", txtPeriodOfDeposit_Years.getText());
            calcMap.put("DEPOSIT_PERIOD_MM", txtPeriodOfDeposit_Months.getText());
            calcMap.put("DEPOSIT_PERIOD_DD", txtPeriodOfDeposit_Days.getText());
            calcMap.put("DEPOSIT_DT", depDt);
            calcMap = observable.calculateMaturityDate(calcMap);
            java.util.Date matDate = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
//            java.util.Date currDate = currDt.clone();
            java.util.Date currDate = (Date) currDt.clone();
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                cboInterestPaymentMode.setEnabled(true);
            }
            if (DateUtil.dateDiff(currDate, matDate) < observable.backDateFreq) {
                //                ClientUtil.showAlertWindow("Date of Maturity is lesser than today's date...\n" +
                //                "The Date of Maturity should be minimum 15 days from today's date...");
                exists = true;
                //                periodChange = true;
                already = false;
                //                txtPeriodOfDeposit_Days.requestFocus();
//                btnDepSubNoAccSave.requestFocus();
                txtDepositAmount.setEnabled(false);
            } else {
                periodChange = true;
                exists = true;
                txtDepositAmount.setEnabled(false);
            }
            if (cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")) {
                txtPeriodOfDeposit_Days.setText("");
//                btnDepSubNoAccSave.requestFocus();
            }
            cboInterestPaymentFrequency.setEnabled(false);
        }
        //        if(addingSomeAmt ==true){
        //            periodFlag = true;
        //            btnDepSubNoAccNew.setEnabled(false);
        //            btnDepSubNoAccSave.setEnabled(true);
        //            //            depSubNoSave(); //--- Save the Data
        //        }
        if (retTxtBox == 0) {
            int retVal = chkPeriodMultiples();
            if (retVal == 0) {
                int YrsToDay = 0;
                int MonToDay = 0;
                int daysEntered = 0;
                int chkDy = 0;
                if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
                    YrsToDay = (Integer.parseInt(txtPeriodOfDeposit_Years.getText())) * 365;
                }
                if ((txtPeriodOfDeposit_Months.getText() != null) && (!txtPeriodOfDeposit_Months.getText().equals(""))) {
                    MonToDay = ((Integer.parseInt(txtPeriodOfDeposit_Months.getText())) * 30);
                }
                if ((txtPeriodOfDeposit_Days.getText() != null) && (!txtPeriodOfDeposit_Days.getText().equals(""))) {
                    daysEntered = Integer.parseInt(txtPeriodOfDeposit_Days.getText());
                }
                chkDy = (YrsToDay + MonToDay + daysEntered);
                if ((chkDy <= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD"))))
                        && (chkDy >= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD"))))) {
                    calculateMatDate();
                } else {
                    //                    if(viewType != ClientConstants.VIEW_TYPE_RENEW && renewdDepNo.length()==0){
                    //                        calculateMatDate();
                    //                        //                          msgStrB.append(msgMinMaxPeriod());
                    //                        //                          msgStrB.append("\n");
                    //                    } else {
                    calculateMatDate();
                    //                    }
                }
            } else {
                //                if(viewType != ClientConstants.VIEW_TYPE_RENEW && renewdDepNo.length()==0){
                //
                //                    //                          msgStrB.append(msgPeriodMultiples());
                //                    //                          msgStrB.append("\n");
                //                } else {
                calculateMatDate();
                //                }
            }
        }
        if (txtPeriodOfDeposit_Years.getText().length() <= 0 && txtPeriodOfDeposit_Months.getText().length() <= 0 && txtPeriodOfDeposit_Days.getText().length() <= 0) {
            tdtMaturityDate.setDateValue("");
        }
        //--- If it is not filled, thn assign "0" to it.
        if (txtPeriodOfDeposit_Days.getText().length() == 0) {
            observable.setTxtPeriodOfDeposit_Days("0");
            txtPeriodOfDeposit_Days.setText(observable.getTxtPeriodOfDeposit_Days());
        }
        //        if(viewType != ClientConstants.VIEW_TYPE_RENEW && observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)){
        //        if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)){
        //            double year = 0;
        //            double month = 0;
        //            double days = 0;
        //            cboInterestPaymentMode.setEnabled(true);
        //            year = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue();
        //            month = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue();
        //            days = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Days.getText()).doubleValue();
        //            double value = year*365 +month*30+days;
        //            if(value <180){
        //                cboInterestPaymentFrequency.setSelectedItem("Date of Maturity");
        //            }else if(days>0 && cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")){
        //                ClientUtil.displayAlert("Enter Years and Months only.....");
        //            }
        //        }
        //        if(txtPeriodOfDeposit_Months.getText().length()>0 && txtPeriodOfDeposit_Days.getText().length()>0){
        //            double year = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue();
        //            double months = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue();
        //            double days = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Days.getText()).doubleValue();
        //            if((year>0 && months == 0 && days>29)||(year>0 && months >0 && days>29)||(year == 0 && months>11 && days>29)){
        //                ClientUtil.displayAlert("Enter values less than 30 days...");
        //                return;
        //            }
        //        }
        periodCalculationMethod();

    }//GEN-LAST:event_txtPeriodOfDeposit_DaysFocusLost

    private void periodRenewalCalculationMethod() {
        if (txtRenewalPeriodOfDeposit_Years.getText().length() >= 0 && txtRenewalPeriodOfDeposit_Months.getText().length() >= 0 && txtRenewalPeriodOfDeposit_Days.getText().length() >= 0) {
            txtRenewalDepositAmtFocusLost();
            //            cboRenewalInterestPaymentFreqActionPerformed();
        }
    }

    public long roundOffLower(long number, long roundingFactor) {
        long mod = number % roundingFactor;
        return number - mod;
    }

    public long getNearest(long number, long roundingFactor) {
        long roundingFactorOdd = roundingFactor;
        if ((roundingFactor % 2) != 0) {
            roundingFactorOdd += 1;
        }
        long mod = number % roundingFactor;
        if ((mod < (roundingFactor / 2)) || (mod < (roundingFactorOdd / 2))) {
            return lower(number, roundingFactor);
        } else {
            return higher(number, roundingFactor);
        }
    }

    public long lower(long number, long roundingFactor) {
        long mod = number % roundingFactor;
        return number - mod;
    }

    public long higher(long number, long roundingFactor) {
        long mod = number % roundingFactor;
        if (mod == 0) {
            return number;
        }
        return (number - mod) + roundingFactor;
    }

    private void periodCalculationMethod() {
        if (txtPeriodOfDeposit_Years.getText().length() >= 0 && txtPeriodOfDeposit_Months.getText().length() >= 0 && txtPeriodOfDeposit_Days.getText().length() >= 0) {
            txtDepositAmtFocusLost();
            cboInterestPaymentFreqActionPerformed();
        }
    }

    //--- txtPeriodOfdepositDays Lost focus in Renewal mode
    private void renewalTxtDaysLostFocus() {
        int YrsToDay = 0;
        int MonToDay = 0;
        int daysEntered = 0;
        int chkDy = 0;
        if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
            YrsToDay = (Integer.parseInt(txtPeriodOfDeposit_Years.getText())) * 365;
        }
        if ((txtPeriodOfDeposit_Months.getText() != null) && (!txtPeriodOfDeposit_Months.getText().equals(""))) {
            MonToDay = ((Integer.parseInt(txtPeriodOfDeposit_Months.getText())) * 30);
        }
        if ((txtPeriodOfDeposit_Days.getText() != null) && (!txtPeriodOfDeposit_Days.getText().equals(""))) {
            daysEntered = Integer.parseInt(txtPeriodOfDeposit_Days.getText());
        }
        chkDy = (YrsToDay + MonToDay + daysEntered);
        calculateMatDate();
    }

    //--- txtPeriodOfdepositMonths Lost focus in Renewal mode
    private void renewalTxtMonthsLostFocus() {
        int YrsToDay = 0;
        int MonToDay = 0;
        int chkDy = 0;
        if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
            YrsToDay = (Integer.parseInt(txtPeriodOfDeposit_Years.getText())) * 365;
        }
        if (!txtPeriodOfDeposit_Months.getText().equals("")) {
            MonToDay = ((Integer.parseInt(txtPeriodOfDeposit_Months.getText())) * 30);
        }
        chkDy = YrsToDay + MonToDay;
        calculateMatDate();
    }
    private void txtPeriodOfDeposit_MonthsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPeriodOfDeposit_MonthsFocusLost
        cboflag = true;
        String oldValue = observable.getTxtPeriodOfDeposit_Months();
        String newValue = txtPeriodOfDeposit_Months.getText();
        double multperiod = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
        if (viewType == ClientConstants.VIEW_TYPE_RENEW) {
            HashMap calcMap = new HashMap();
            java.util.Date depDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
            calcMap.put("DEPOSIT_PERIOD_YY", txtPeriodOfDeposit_Years.getText());
            calcMap.put("DEPOSIT_PERIOD_MM", txtPeriodOfDeposit_Months.getText());
            calcMap.put("DEPOSIT_PERIOD_DD", txtPeriodOfDeposit_Days.getText());
            calcMap.put("DEPOSIT_DT", depDt);
            calcMap = observable.calculateMaturityDate(calcMap);
            java.util.Date matDate = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
            java.util.Date currDate = (Date) currDt.clone();
            long perod = DateUtil.dateDiff(matDate, currDate);
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                cboInterestPaymentMode.setEnabled(true);
            }
            if (DateUtil.dateDiff(currDate, matDate) < observable.backDateFreq) {
                //                ClientUtil.showAlertWindow("Date of Maturity is lesser than today's date...\n" +
                //                "The Date of Maturity should be minimum 15 days from today's date...");
            }
        }
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr)) {
            int multiplePeriod = (int) multperiod / 30;
            double value = CommonUtil.convertObjToDouble(newValue).doubleValue();
            value = value % multiplePeriod;
            if (value != 0) {
                ClientUtil.showAlertWindow("Enter Multiples of " + multiplePeriod + " Months...!!! ");
                txtPeriodOfDeposit_Months.setText("");
            }
        }
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
            double yearValue = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue();
            if (yearValue != 0) {
                yearValue = yearValue * 12 * 30;
            }
            double newTxtValue = (CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue() * 30) + yearValue;
            if (newTxtValue % multperiod != 0) {
                ClientUtil.showAlertWindow("Enter Period Multiples of ..." + (multperiod / 30) + " " + "Months");
                txtPeriodOfDeposit_Months.setText("");
                txtPeriodOfDeposit_Years.setText("");
                return;
            }
        }
        if ((retTxtBox == 1) || (retTxtBox == 0)) {
            if ((txtPeriodOfDeposit_Months.getText() != null) && (!txtPeriodOfDeposit_Months.getText().equals(""))) {
                int retVal = -1;
                if (retTxtBox == 1) {
                    retVal = chkPeriodOfMultiplesForMonths();
                } else if (retTxtBox == 0) {
                    retVal = chkPeriodMultiples();
                }
                if (retVal == 0) {
                    int YrsToDay = 0;
                    int MonToDay = 0;
                    int chkDy = 0;
                    if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
                        YrsToDay = (Integer.parseInt(txtPeriodOfDeposit_Years.getText())) * 365;
                    }
                    if (!txtPeriodOfDeposit_Months.getText().equals("")) {
                        MonToDay = ((Integer.parseInt(txtPeriodOfDeposit_Months.getText())) * 30);
                    }
                    chkDy = YrsToDay + MonToDay;
                    if ((chkDy <= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD"))))
                            && (chkDy >= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD"))))) {
                        calculateMatDate();
                    } else {
                        calculateMatDate();
                    }
                } else {
                    calculateMatDate();
                }
            } else {
                calculateMatDate();
            }
        }
        if (txtPeriodOfDeposit_Months.getText().length() == 0) {
            observable.setTxtPeriodOfDeposit_Months("0");
            txtPeriodOfDeposit_Months.setText(observable.getTxtPeriodOfDeposit_Months());
        }
        //--- If Year is not filled, then assign "0" to it.
        if (txtPeriodOfDeposit_Years.getText().length() <= 0 && txtPeriodOfDeposit_Months.getText().length() <= 0 && txtPeriodOfDeposit_Days.getText().length() <= 0) {
            tdtMaturityDate.setDateValue("");
        }
        periodCalculationMethod();
    }//GEN-LAST:event_txtPeriodOfDeposit_MonthsFocusLost
    private void showMsg() {
        if (msgStrB.length() > 0) {
            CommonMethods.displayAlert(CommonUtil.convertObjToStr(msgStrB));     //--- display the alert
        }
    }

    private int enableDisableDays() {
        int monthsAndDaysDisable = 0;
        int daysDisable = 0;
        int daysChk = 0;
        if (depProdDetails != null) {
            daysChk = Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
        }
        if (daysChk > 0) {
            monthsAndDaysDisable = (daysChk % 365);
            if (monthsAndDaysDisable == 0) {
                txtPeriodOfDeposit_Months.setEnabled(false);
                txtPeriodOfDeposit_Days.setEnabled(false);
                retTxtBox = 2; //--- For checking the Period of Multiples in the
                //--- Lost Focus of Year Text Box
            } else {
                daysDisable = (daysChk % 30);
                if (daysDisable == 0) {
                    txtPeriodOfDeposit_Months.setEnabled(true);
                    txtPeriodOfDeposit_Days.setEnabled(false);
                    retTxtBox = 1; //--- For checking the Period of Multiples in the
                    //--- Lost Focus of Month Text Box
                } else {
                    txtPeriodOfDeposit_Months.setEnabled(true);
                    txtPeriodOfDeposit_Days.setEnabled(true);
                    retTxtBox = 0;  //--- For checking the Period of Multiples in the
                    //--- Lost Focus of Days Text Box
                }
            }
        }
        return retTxtBox;
    }

    private int chkPeriodOfMultiplesForMonths() {
        int retVal = -1;
        int yearsInMonths = 0;
        int monthsEntered = 0;
        int periodOfMultiplesInMonths = (Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")))) / 30;
        if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
            yearsInMonths = (Integer.parseInt(CommonUtil.convertObjToStr(txtPeriodOfDeposit_Years.getText()))) * 12;
        }
        if ((txtPeriodOfDeposit_Months.getText() != null) && (!txtPeriodOfDeposit_Months.getText().equals(""))) {
            monthsEntered = Integer.parseInt(CommonUtil.convertObjToStr(txtPeriodOfDeposit_Months.getText()));
        }
        totalMonths = yearsInMonths + monthsEntered;
        retVal = (totalMonths % periodOfMultiplesInMonths);
        return retVal;
    }

    private int chkPeriodMultiples() {
        int YearsChk = 0;
        int MonthsChk = 0;
        int DaysChk = 0;
        int totalDays;
        int multDays = 0;
        int retVal = -1;
        if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
            YearsChk = (Integer.parseInt(CommonUtil.convertObjToStr(txtPeriodOfDeposit_Years.getText()))) * 365;
        }
        if ((txtPeriodOfDeposit_Months.getText() != null) && (!txtPeriodOfDeposit_Months.getText().equals(""))) {
            MonthsChk = (Integer.parseInt(CommonUtil.convertObjToStr(txtPeriodOfDeposit_Months.getText()))) * 30;
        }
        if ((txtPeriodOfDeposit_Days.getText() != null) && (!txtPeriodOfDeposit_Days.getText().equals(""))) {
            DaysChk = Integer.parseInt(CommonUtil.convertObjToStr(txtPeriodOfDeposit_Days.getText()));
        }
        if ((txtWeek.getText() != null) && (!txtWeek.getText().equals(""))) {
            DaysChk += (Integer.parseInt(CommonUtil.convertObjToStr(txtWeek.getText()))) * 7;
        }

        totalDays = YearsChk + MonthsChk + DaysChk;
        multDays = Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
        if (totalDays != 0) {
            retVal = (totalDays % multDays);
        } else {
            retVal = -1;
        }
        return retVal;
    }

    private void yearsFocusLost() {
        int chkDy = 0;
        if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals("")) && (!txtPeriodOfDeposit_Years.getText().equals("0"))) {
            chkDy = Integer.parseInt(txtPeriodOfDeposit_Years.getText()) * 365;
        }
        if ((chkDy <= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD")))) && chkDy >= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD")))) {
            calculateMatDate();
        } else {
            if (viewType != ClientConstants.VIEW_TYPE_RENEW && CommonUtil.convertObjToStr(renewdDepNo).length() == 0) {
                calculateMatDate();
                //                msgStrB.append(msgMinMaxPeriod());
                //                msgStrB.append("\n");
            } else {
                calculateMatDate();
            }
        }
    }
    private void txtPeriodOfDeposit_YearsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPeriodOfDeposit_YearsFocusLost
        cboflag = true;
        String oldValue = observable.getTxtPeriodOfDeposit_Years();
        //system.out.println("oldValue : " + oldValue);
        String newValue = txtPeriodOfDeposit_Years.getText();
        //system.out.println("newValue : " + newValue);
        //--- If oldValue is not equal to newValue, then reset the calculated fields for
        //--- recalculating the values
        //        if(!oldValue.equals(newValue) && viewType != ClientConstants.VIEW_TYPE_RENEW && !viewType.equals("CREDIT_ACC_NO")){
        //            resetDepSubNoFields();
        //        }
        if (viewType == ClientConstants.VIEW_TYPE_RENEW) {
            HashMap calcMap = new HashMap();
            java.util.Date depDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
            //system.out.println("years :" + txtPeriodOfDeposit_Years.getText());
            calcMap.put("DEPOSIT_PERIOD_YY", txtPeriodOfDeposit_Years.getText());
            calcMap.put("DEPOSIT_PERIOD_MM", txtPeriodOfDeposit_Months.getText());
            calcMap.put("DEPOSIT_PERIOD_DD", txtPeriodOfDeposit_Days.getText());
            calcMap.put("DEPOSIT_DT", depDt);
            java.util.Date matDate = null;
            java.util.Date currDate = null;
            if (depDt != null) {
                calcMap = observable.calculateMaturityDate(calcMap);
                matDate = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
//                currDate = currDt.clone();
                currDate = (Date) currDt.clone();
                long perod = DateUtil.dateDiff(matDate, currDate);
                if (cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")) {
                    txtPeriodOfDeposit_Days.setText("");
                }
                //            cboInterestPaymentFrequency.setEnabled(false);
                if (DateUtil.dateDiff(currDate, matDate) < observable.backDateFreq) {
                    //                ClientUtil.showAlertWindow("Date of Maturity is lesser than today's date...\n" +
                    //                "The Date of Maturity should be minimum 15 days from today's date...");
                }
            }
        }
        //        if(addingSomeAmt ==true){
        //            periodFlag = true;
        //            btnDepSubNoAccNew.setEnabled(false);
        //            btnDepSubNoAccSave.setEnabled(true);
        //        }

        if ((retTxtBox == 1) || (retTxtBox == 0)) {
            if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
                int retVal = -1;
                if (retTxtBox == 1) {
                    retVal = chkPeriodOfMultiplesForMonths();
                } else if (retTxtBox == 0) {
                    retVal = chkPeriodMultiples();
                }
                if (retVal == 0) {
                    int YrsToDay = 0;
                    int MonToDay = 0;
                    int chkDy = 0;
                    if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
                        YrsToDay = (Integer.parseInt(txtPeriodOfDeposit_Years.getText())) * 365;
                    }
                    if (!txtPeriodOfDeposit_Months.getText().equals("")) {
                        MonToDay = ((Integer.parseInt(txtPeriodOfDeposit_Months.getText())) * 30);
                    }
                    chkDy = YrsToDay + MonToDay;
                    if ((chkDy <= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD"))))
                            && (chkDy >= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD"))))) {
                        calculateMatDate();
                    } else {
                        //                        if(viewType != ClientConstants.VIEW_TYPE_RENEW && renewdDepNo.length()==0){
                        //                            calculateMatDate();
                        //                            //                          msgStrB.append(msgMinMaxPeriod());
                        //                            //                          msgStrB.append("\n");
                        //                        } else {
                        calculateMatDate();
                        //                        }
                    }
                } else {
                    //                    if(viewType != ClientConstants.VIEW_TYPE_RENEW && renewdDepNo.length()==0){
                    //
                    //
                    //                        calculateMatDate();
                    //                        //                        msgStrB.append(msgPeriodMultiples());
                    //                        //                        msgStrB.append("\n");
                    //                    } else {
                    calculateMatDate();
                    //                    }
                }
            } else {
                calculateMatDate();
            }
        }
        //        if(viewType == ClientConstants.VIEW_TYPE_EXTENSION){
        //            Date originalDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(observable.txtMatDate));
        //            Date currMatDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tdtMaturityDate.getDateValue()));
        //            if(DateUtil.dateDiff(currMatDt,originalDt) >0){
        //                ClientUtil.displayAlert("Maturity Date Should be beyond old deposit maturity date... ");
        //                return;
        //            }
        //        }

        if (txtPeriodOfDeposit_Years.getText().length() == 0) {
            observable.setTxtPeriodOfDeposit_Years("0");
            txtPeriodOfDeposit_Years.setText(observable.getTxtPeriodOfDeposit_Years());
        }
        //        if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)){
        //            double year = 0;
        //            double month = 0;
        //            double days = 0;
        //            cboInterestPaymentMode.setEnabled(true);
        //            year = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue();
        //            month = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue();
        //            days = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Days.getText()).doubleValue();
        //            double value = year*365 +month*30+days;
        //            //            if(value <180){
        //            //                cboInterestPaymentFrequency.setSelectedItem("Date of Maturity");
        //            //            }else
        //            if(days>0 && cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")){
        //                ClientUtil.displayAlert("Enter Years and Months only.....");
        //            }
        //        }
        //        periodOfDepositYrsLostFocus();
        periodCalculationMethod();
        //        if(viewType == ClientConstants.VIEW_TYPE_RENEW){
        //            if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed))
        //                cboInterestPaymentFrequency.setEnabled(true);
        //            btnDepSubNoAccSave.requestFocus();
        //        }
    }//GEN-LAST:event_txtPeriodOfDeposit_YearsFocusLost
    private void resetDepSubNoFields() {
        tdtMaturityDate.setDateValue("");
        txtDepositAmount.setText("");
        txtRateOfInterest.setText("");
        txtPrintedOption.setText("");
        //        cboInstallmentAmount.setSelectedItem("");
        //        cboPaymentType.setSelectedItem("");
        //        tdtPaymentDate.setDateValue("");
        txtMaturityAmount.setText("");
        //        cboInterestPaymentFrequency.setSelectedItem("");
        //        cboInterestPaymentMode.setSelectedItem("");
        //        cboProdId.setSelectedItem("");
        txtTotalInterestAmount.setText("");
        txtPeriodicInterestAmount.setText("");
    }

    /* does the Maturity Date Calculation and other events for txtPeriodOfDeposit_YearsFocusLost*/
    private void periodOfDepositYrsLostFocus() {
        //        txtDepositAmtFocusLost();
        cboInterestPaymentFreqActionPerformed();
        if (retTxtBox != 2) {
            if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals("")) && (!txtPeriodOfDeposit_Years.getText().equals("0"))) {
                yearsFocusLost();
            } else {
                calculateMatDate();
            }
        } else {
            if (txtPeriodOfDeposit_Years.getText() != null) {
                int retVal = chkPeriodMultiples();
                if (retVal == 0) {
                    yearsFocusLost();
                } else {
                    if (viewType != ClientConstants.VIEW_TYPE_RENEW && CommonUtil.convertObjToStr(renewdDepNo).length() == 0) {
                        //                      msgStrB.append(msgPeriodMultiples());
                        //                      msgStrB.append("\n");
                        yearsFocusLost();
                    } else {
                        yearsFocusLost();
                    }
                }
            }
        }
        if (txtPeriodOfDeposit_Years.getText().length() <= 0 && txtPeriodOfDeposit_Months.getText().length() <= 0 && txtPeriodOfDeposit_Days.getText().length() <= 0) {
            tdtMaturityDate.setDateValue("");
        }
    }

    private StringBuffer msgMinPeriodNormal() {
        StringBuffer strBMsg = new StringBuffer();
        HashMap depProdRenewalDetails = observable.getAcctHeadForProd();
        strBMsg.append(" Deposit can be Opened/Renewed for a Minimum period of ");
        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdDetails.get("MIN_DEPOSIT_PERIOD"))));
        //        strBMsg.append(" to ");
        //        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdRenewalDetails.get("MAX_DEPOSIT_PERIOD"))));
        return strBMsg;
    }

    private StringBuffer msgMaxPeriodNormal() {
        StringBuffer strBMsg = new StringBuffer();
        HashMap depProdRenewalDetails = observable.getAcctHeadForProd();
        strBMsg.append(" Deposit can be Opened/Renewed for a Maximum period of ");
        //        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdRenewalDetails.get("MIN_DEPOSIT_PERIOD"))));
        //        strBMsg.append(" to ");
        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdDetails.get("MAX_DEPOSIT_PERIOD"))));
        return strBMsg;
    }

//    private StringBuffer msgMinPeriodRenewal(){
//        StringBuffer strBMsg = new StringBuffer();
//        HashMap depProdRenewalDetails = observable.getAcctHeadForProdRenewal();
//        strBMsg.append(" Deposit can be Opened/Renewed for a Minimum period of ");
//        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdRenewalDetails.get("MIN_DEPOSIT_PERIOD"))));
//        //        strBMsg.append(" to ");
//        //        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdRenewalDetails.get("MAX_DEPOSIT_PERIOD"))));
//        return strBMsg;
//    }
//    private StringBuffer msgMaxPeriodRenewal(){
//        StringBuffer strBMsg = new StringBuffer();
//        HashMap depProdRenewalDetails = observable.getAcctHeadForProdRenewal();
//        strBMsg.append(" Deposit can be Opened/Renewed for a Maximum period of ");
//        //        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdRenewalDetails.get("MIN_DEPOSIT_PERIOD"))));
//        //        strBMsg.append(" to ");
//        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdRenewalDetails.get("MAX_DEPOSIT_PERIOD"))));
//        return strBMsg;
//    }
    private StringBuffer msgAccordingToDaysMonYrs(int period) {
        StringBuffer strBPeriod = new StringBuffer();
        int tmp = period / totalDays;
        int remaining = period % totalDays;
        if (tmp != 0) {
            strBPeriod.append(tmp + " year(s) ");
        }
        tmp = remaining / 30;
        remaining = remaining % 30;
        if (tmp != 0) {
            strBPeriod.append(tmp + " month(s) ");
        }
        if (remaining != 0) {
            strBPeriod.append(remaining + " day(s)");
        }
        return strBPeriod;
    }

    //    private StringBuffer msgPeriodMultiples(){
    //        StringBuffer strBMsg = new StringBuffer();
    //        strBMsg.append(" The Deposit period should be in Multiples of ");
    //        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdDetails.get("PERIOD_MULTIPLES"))));
    //        return strBMsg;
    //    }
    private StringBuffer msgAmtMultiples() {
        StringBuffer strBMsg = new StringBuffer();
        strBMsg.append(" The Amount should be in multiples of ");
        strBMsg.append(CommonUtil.convertObjToStr(depProdDetails.get("AMT_MULTIPLES")));
        return strBMsg;
    }

    private StringBuffer msgMinMaxAmt() {
        StringBuffer strBMsg = new StringBuffer();
        strBMsg.append(" The Amount should be between ");
        strBMsg.append(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
        strBMsg.append(" and ");
        strBMsg.append(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_AMT")));
        return strBMsg;
    }

    private StringBuffer msgMinMaxPeriod() {
        StringBuffer strBMsg = new StringBuffer();
        strBMsg.append(" The Deposit period should be between ");
        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdDetails.get("MIN_DEPOSIT_PERIOD"))));
        strBMsg.append(" to ");
        strBMsg.append(msgAccordingToDaysMonYrs(CommonUtil.convertObjToInt(depProdDetails.get("MAX_DEPOSIT_PERIOD"))));
        return strBMsg;
    }

    private void calculateMatDate() {
        java.util.Date depDate = (java.util.Date) DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
        //system.out.println("####calculateMatDate : " + depDate);
        if (depDate != null) {
            GregorianCalendar cal = new GregorianCalendar((depDate.getYear() + yearTobeAdded), depDate.getMonth(), depDate.getDate());
            if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
                cal.add(GregorianCalendar.YEAR, Integer.parseInt(txtPeriodOfDeposit_Years.getText()));
            } else {
                cal.add(GregorianCalendar.YEAR, 0);
            }
            if ((txtPeriodOfDeposit_Months.getText() != null) && (!txtPeriodOfDeposit_Months.getText().equals(""))) {
                cal.add(GregorianCalendar.MONTH, Integer.parseInt(txtPeriodOfDeposit_Months.getText()));
            } else {
                cal.add(GregorianCalendar.MONTH, 0);
            }
            if ((txtPeriodOfDeposit_Days.getText() != null) && (!txtPeriodOfDeposit_Days.getText().equals(""))) {
                cal.add(GregorianCalendar.DAY_OF_MONTH, Integer.parseInt(txtPeriodOfDeposit_Days.getText()));
            } else {
                cal.add(GregorianCalendar.DAY_OF_MONTH, 0);

            }
            if ((!txtWeek.getText().equals("")) && (txtWeek.getText() != null)) {
                cal.add(GregorianCalendar.DAY_OF_MONTH, ((Integer.parseInt(txtWeek.getText())) * 7));
            } else {
                cal.add(GregorianCalendar.DAY_OF_MONTH, 0);

            }
            observable.setTdtMaturityDate(DateUtil.getStringDate(cal.getTime()));
            //system.out.println("tdtnnnnncreateddd" + observable.getTdtMaturityDate());
            tdtMaturityDate.setDateValue(observable.getTdtMaturityDate());
        }
    }
    private void btnExceptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExceptionActionPerformed
        //        viewType = ClientConstants.VIEW_TYPE_AUTHORIZE;
        //        observable.setActionType(ClientConstants.ACTIONTYPE_EXCEPTION);
        authorizeStatus(CommonConstants.STATUS_EXCEPTION);
        nomineeUi.disableNewButton(false);
        nomineeUi.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
    }//GEN-LAST:event_btnExceptionActionPerformed
    private void calculateRenewalMatDate() {
        java.util.Date depDate = (java.util.Date) DateUtil.getDateMMDDYYYY(tdtRenewalDateOfDeposit.getDateValue());
        //system.out.println("####calculateMatDate : " + depDate);
        if (depDate != null) {
            GregorianCalendar cal = new GregorianCalendar((depDate.getYear() + yearTobeAdded), depDate.getMonth(), depDate.getDate());
            if ((txtRenewalPeriodOfDeposit_Years.getText() != null) && (!txtRenewalPeriodOfDeposit_Years.getText().equals(""))) {
                cal.add(GregorianCalendar.YEAR, Integer.parseInt(txtRenewalPeriodOfDeposit_Years.getText()));
            } else {
                cal.add(GregorianCalendar.YEAR, 0);
            }
            if ((txtRenewalPeriodOfDeposit_Months.getText() != null) && (!txtRenewalPeriodOfDeposit_Months.getText().equals(""))) {
                cal.add(GregorianCalendar.MONTH, Integer.parseInt(txtRenewalPeriodOfDeposit_Months.getText()));
            } else {
                cal.add(GregorianCalendar.MONTH, 0);
            }
            if ((txtRenewalPeriodOfDeposit_Days.getText() != null) && (!txtRenewalPeriodOfDeposit_Days.getText().equals(""))) {
                double txtBoxPeriod = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Days.getText()).doubleValue();
                String totMonths = String.valueOf(txtBoxPeriod / 365);
                long totyears = new Long(totMonths.substring(0, totMonths.indexOf("."))).longValue();
                double leftOverMth = new Double(totMonths.substring(totMonths.indexOf("."))).doubleValue();
                java.text.DecimalFormat df = new java.text.DecimalFormat("#####");
                leftOverMth = new Double(df.format(leftOverMth * 365)).doubleValue();
                if (totyears >= 1) {
                    cal.add(GregorianCalendar.YEAR, (int) totyears);
                    cal.add(GregorianCalendar.DAY_OF_MONTH, (int) leftOverMth);
                } else {
                    cal.add(GregorianCalendar.DAY_OF_MONTH, Integer.parseInt(txtRenewalPeriodOfDeposit_Days.getText()));
                }
            } else {
                cal.add(GregorianCalendar.DAY_OF_MONTH, 0);
            }
            observable.setRenewaltdtMaturityDate(DateUtil.getStringDate(cal.getTime()));
            tdtRenewalMaturityDate.setDateValue(observable.getRenewaltdtMaturityDate());
        }
    }

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        //        viewType = ClientConstants.VIEW_TYPE_AUTHORIZE;
        //        observable.setActionType(ClientConstants.ACTIONTYPE_REJECT);
        setAuthorizeStatus("REJECT_BUTTON");
        //        renewalVisible(true);
        authorizeStatus(CommonConstants.STATUS_REJECTED);
        nomineeUi.disableNewButton(false);
        nomineeUi.setActionType(ClientConstants.ACTIONTYPE_REJECT);
        btnAuthorize.setEnabled(false);
        btnException.setEnabled(false);
        btnPrint.setEnabled(false);
        btnCustomerIdFileOpen1.setEnabled(false);
        if (alreadyOpenedRecords == true) {
            btnReject.setEnabled(false);
        } else {
            btnReject.setEnabled(true);
        }
        if (transactionUI.getOutputTO() != null && transactionUI.getOutputTO().size() > 0) {
            panTransaction.add(transactionUI);
            tabTermDeposit.addTab("Transaction", panTransaction);
            tabTermDeposit.resetVisits();
        }
    }//GEN-LAST:event_btnRejectActionPerformed
    private void tblExtensionDepSubNoRowSelected(int rowSelected) {
        setExtensionDepSubNoNewAndTblPress();
//        btnDepSubNoAccDel.setEnabled(true);
        observable.populateExtensionDepSubNoFields(rowSelected);
    }

    private void setExtensionDepSubNoNewAndTblPress() {
        extensionupdateOBDepSubNo();
    }
    private void btnAuthorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAuthorizeActionPerformed
        viewType = ClientConstants.VIEW_TYPE_AUTHORIZE;
        //        observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
        //        renewalVisible(true);
        setAuthorizeStatus("AUTHORIZE_BUTTON");
        authorizeStatus(CommonConstants.STATUS_AUTHORIZED);
        nomineeUi.disableNewButton(false);
        nomineeUi.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
        btnReject.setEnabled(false);
        btnException.setEnabled(false);
        btnPrint.setEnabled(false);
        btnCustomerIdFileOpen1.setEnabled(true);
        btnCancel.setEnabled(true);
        btnCustomerIdFileOpen1.setEnabled(false);
        if (alreadyOpenedRecords == true) {
            btnAuthorize.setEnabled(false);
        } else {
            btnAuthorize.setEnabled(true);
        }
        if (transactionUI.getOutputTO() != null && transactionUI.getOutputTO().size() > 0) {
            panTransaction.add(transactionUI);

            tabTermDeposit.addTab("Transaction", panTransaction);
            tabTermDeposit.resetVisits();
        }

    }//GEN-LAST:event_btnAuthorizeActionPerformed
    //    /** Does the authorization for the row selected in the AuthorizationUI screen */
    //    public void authorizeStatus(String authorizeStatus) {
    //        if (viewType == ClientConstants.VIEW_TYPE_AUTHORIZE && isFilled){
    //            String isAllTabsVisited = tabShare.isAllTabsVisited();
    //            //--- If all the tabs are not visited, then show the Message
    //            if(isAllTabsVisited.length()>0){
    //                CommonMethods.displayAlert(isAllTabsVisited);
    //            } else {
    //                HashMap singleAuthorizeMap = new HashMap();
    //                ArrayList arrList = new ArrayList();
    //                HashMap authDataMap = new HashMap();
    //                authDataMap.put(CommonConstants.USER_ID, TrueTransactMain.USER_ID);
    //                authDataMap.put(SHARE_ACCT_NO, txtShareAcctNo.getText());
    //                authDataMap.put(SHARE_DET_NO, shareDetNo);
    //                //system.out.println("authDataMap : " + authDataMap);
    //                arrList.add(authDataMap);
    //                singleAuthorizeMap.put(CommonConstants.AUTHORIZESTATUS, authorizeStatus);
    //                singleAuthorizeMap.put(CommonConstants.AUTHORIZEDATA, arrList);
    //                authorize(singleAuthorizeMap);
    //                viewType = ClientConstants.VIEW_TYPE_CANCEL;
    //                transactionUI.resetObjects();
    //            }
    //        } else {
    //            HashMap mapParam = new HashMap();
    //            mapParam.put(CommonConstants.MAP_NAME, "viewAllShareAcctAuthorizeTOList");
    //            mapParam.put(CommonConstants.USER_ID, TrueTransactMain.USER_ID);

    //            mapParam.put(CommonConstants.AUTHORIZESTATUS, authorizeStatus);
    //            isFilled = false;
    //            AuthorizeUI authorizeUI = new AuthorizeUI(this, mapParam);
    //            authorizeUI.show();
    //            viewType = ClientConstants.VIEW_TYPE_AUTHORIZE;
    //            btnSave.setEnabled(false);
    //            setAuthBtnEnableDisable();
    ////            btnDelete.setEnabled(false);
    //        }
    //    }
    /**
     * Does the authorization for the row selected in the AuthorizationUI screen
     */
    public void authorizeStatus(String authorizeStatus) {
         if (observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT) {
                int n = ClientUtil.confirmationAlert("Are you sure want to Reject", 1);
                if (n != 0) {
                    return;
                } 
         } 
        if (getAuthorizeStatus().equals("AUTHORIZE_BUTTON")) {
            observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
        }
        if (getAuthorizeStatus().equals("REJECT_BUTTON")) {
            observable.setActionType(ClientConstants.ACTIONTYPE_REJECT);
        }
        //        observable.setStatus();
        HashMap singleAuthorizeMap = new HashMap();
        if (viewType == ClientConstants.VIEW_TYPE_AUTHORIZE && isFilled) {
            //Changed BY Suresh
//            String isAllTabsVisited = tabTermDeposit.isAllTabsVisited();

            //--- If all the tabs are not visited, then show the Message
//            if(isAllTabsVisited.length()>0){
//                ClientUtil.displayAlert(isAllTabsVisited);
//                return;
//            }else{
            tabTermDeposit.resetVisits();
            ArrayList arrList = new ArrayList();
            HashMap authDataMap = new HashMap();
            authDataMap.put("multipleDepositAcctNoList",multipleDepositAcctNo);
            multipleDepositAcctNo = null;
            authDataMap.put(CommonConstants.USER_ID, TrueTransactMain.USER_ID);
            authDataMap.put("DEPOSIT NO", txtDepsoitNo.getText());
            if (flag == true) {
                for (int i = 0; i < transferUI.length; i++) {
                    if (transferUI[i] != null) {
                        transferUI[i].btnDepositClose();
                    }
                }
                for (int i = 0; i < cashTransUI.length; i++) {
                    if (cashTransUI[i] != null) {
                        cashTransUI[i].btnDepositClose();
                    }
                }
            }
            HashMap accHeadMap = new HashMap();
            HashMap headMap = new HashMap();
            headMap.put("DEPOSIT_NO", lblValRenewDep.getText());
            accHeadMap.put("DEPOSIT_NO", lblValRenewDep.getText());
            List lst = ClientUtil.executeQuery("getProdIdForRenewLienDep", headMap);
            if (lst != null && lst.size() > 0) {
                headMap = (HashMap) lst.get(0);
                lst = ClientUtil.executeQuery("getAccountHeadForLTD", accHeadMap);
                if (lst != null && lst.size() > 0) {
                    accHeadMap = (HashMap) lst.get(0);
                    if (!accHeadMap.get("BEHAVES_LIKE").equals("LOANS_AGAINST_DEPOSITS")) {
                        depositLien = new DepositLienUI();
                        HashMap authMap = new HashMap();
                        authMap.put("DEPOSIT_NO", lblValRenewDep.getText());
                        authMap.put("PROD_ID", headMap.get("PROD_ID"));
                        authMap.put("SHADOW_LIEN", headMap.get("SHADOW_LIEN"));
                        authMap.put("CLEAR_BALANCE", headMap.get("CLEAR_BALANCE"));
                        authMap.put("HEAD_DESC", headMap.get("PROD_DESC"));
                        depositLien.depRenewalLineAuthorize(authMap, authorizeStatus);
                    }
                }
            }
            HashMap totalBalMap = new HashMap();
            String renewNo = "";
            boolean renewalAuth = false;
            totalBalMap.put("OLD_DEPOSIT_NO", txtDepsoitNo.getText());
            lst = ClientUtil.executeQuery("getSelectOldDepositRenewalDetails", totalBalMap);
            if (lst != null && lst.size() > 0) {
                totalBalMap = (HashMap) lst.get(0);
                authDataMap.put("DEPOSIT NO", totalBalMap.get("DEPOSIT_NO"));
                renewNo = CommonUtil.convertObjToStr(totalBalMap.get("OLD_DEPOSIT_NO"));
                renewalAuth = true;
            } else {
                renewalAuth = false;
                totalBalMap.put("DEPOSIT_NO", txtDepsoitNo.getText());
                authDataMap.put("DEPOSIT NO", txtDepsoitNo.getText());
            }
            lst = ClientUtil.executeQuery("getTotalBalDep", totalBalMap);
            if (lst != null && lst.size() > 0) {
                totalBalMap = (HashMap) lst.get(0);
                //                    String renewNo =CommonUtil.convertObjToStr(totalBalMap.get("RENEWAL_FROM_DEPOSIT"));
                String newNo = txtDepsoitNo.getText();
                if (authorizeStatus.equals("REJECTED") && CommonUtil.convertObjToDouble(totalBalMap.get("TOTAL_BALANCE")).doubleValue() > 0 && renewalAuth == false) {
                    ClientUtil.showAlertWindow("Not Possible to reject this Deposit bcz transaction has been already done");
                } else {
                    flag = false;
                    arrList.add(authDataMap);
                    singleAuthorizeMap.put(CommonConstants.AUTHORIZESTATUS, authorizeStatus);
                    singleAuthorizeMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);
                    singleAuthorizeMap.put(CommonConstants.AUTHORIZEDATA, arrList);
                    if (rdoOpeningMode_Multiple.isSelected() == true) {
                        singleAuthorizeMap.put("NORMAL_MODE", "NORMAL_MODE");
                    }
                    authorize(singleAuthorizeMap);
                    viewType = ClientConstants.VIEW_TYPE_CANCEL;
                    btnSave.setEnabled(false);
                    //                        super.setOpenForEditBy(observable.getStatusBy());
                    //                        super.removeEditLock(txtDepsoitNo.getText());
                    //                        removeEditLockScreen(txtDepsoitNo.getText());
                    this.btnCancelActionPerformed(null);
                    //                        super.setOpenForEditBy(observable.getStatusBy());
                    //                        super.removeEditLock(txtDepsoitNo.getText());
                    //                        removeEditLockScreen(txtDepsoitNo.getText());
                    lblStatus.setText(ClientConstants.RESULT_STATUS[observable.getResult()]);
                }
            } else {
                arrList.add(authDataMap);
                singleAuthorizeMap.put(CommonConstants.AUTHORIZESTATUS, authorizeStatus);
                singleAuthorizeMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);
                singleAuthorizeMap.put(CommonConstants.AUTHORIZEDATA, arrList);
                authorize(singleAuthorizeMap);
                viewType = ClientConstants.VIEW_TYPE_CANCEL;
                btnSave.setEnabled(false);
                //                    super.setOpenForEditBy(observable.getStatusBy());
                //                    super.removeEditLock(txtDepsoitNo.getText());
                //                    removeEditLockScreen(txtDepsoitNo.getText());
                this.btnCancelActionPerformed(null);
                //                    super.setOpenForEditBy(observable.getStatusBy());
                //                    super.removeEditLock(txtDepsoitNo.getText());
                //                    removeEditLockScreen(txtDepsoitNo.getText());
                lblStatus.setText(ClientConstants.RESULT_STATUS[observable.getResult()]);
            }
//            }
        } else {
            viewType = ClientConstants.VIEW_TYPE_AUTHORIZE;
            HashMap mapParam = new HashMap();
            HashMap whereMap = new HashMap();
            whereMap.put(CommonConstants.USER_ID, TrueTransactMain.USER_ID);
            whereMap.put(CommonConstants.SELECTED_BRANCH_ID, getSelectedBranchID());
            whereMap.put(CommonConstants.AUTHORIZESTATUS, authorizeStatus);
            //bb
            whereMap.put("CASHIER_AUTH_ALLOWED", TrueTransactMain.CASHIER_AUTH_ALLOWED);
            whereMap.put("TRANS_DT", currDt.clone());
            //bb
            mapParam.put(CommonConstants.MAP_WHERE, whereMap);
            whereMap = null;
            //bb
            if (TrueTransactMain.CASHIER_AUTH_ALLOWED != null && TrueTransactMain.CASHIER_AUTH_ALLOWED.equals("Y")) {
                mapParam.put(CommonConstants.MAP_NAME, "viewAllMultipleDepAccAuthorizeCashierTOList");
            } else //bb
            {
                mapParam.put(CommonConstants.MAP_NAME, "viewAllMultipleDepAccAuthorizeTOList");
            }
            mapParam.put(CommonConstants.USER_ID, TrueTransactMain.USER_ID);
            isFilled = false;
            lblStatus.setText(ClientConstants.ACTION_STATUS[observable.getResult()]);
            singleAuthorizeMap = null;
            AuthorizeUI authorizeUI = new AuthorizeUI(this, mapParam);
            authorizeUI.show();
            btnSave.setEnabled(false);
            btnAuthorize.setEnabled(true);
            btnReject.setEnabled(true);
            btnException.setEnabled(true);
            btnCancel.setEnabled(true);
            btnClose.setEnabled(true);
            //system.out.println(" @@@@@@@@ Authrize Status :" + lblStatus);
        }
    }

    //    /** Does the authorization for the row selected in the AuthorizationUI screen */
    //    public void authorizeStatus(String authorizeStatus) {
    //        if (!isFilled ){
    //            viewType = ClientConstants.VIEW_TYPE_AUTHORIZE;
    //            HashMap mapParam = new HashMap();
    //            HashMap whereMap = new HashMap();
    //            whereMap.put(CommonConstants.USER_ID, TrueTransactMain.USER_ID);
    //            whereMap.put(CommonConstants.BRANCH_ID, getSelectedBranchID());
    //            whereMap.put(CommonConstants.AUTHORIZESTATUS, authorizeStatus);
    //            mapParam.put(CommonConstants.MAP_WHERE, whereMap);
    //            whereMap = null;
    //            mapParam.put(CommonConstants.MAP_NAME, "viewAllDepAccAuthorizeTOList");
    //            mapParam.put(CommonConstants.USER_ID, TrueTransactMain.USER_ID);
    //            AuthorizeUI authorizeUI = new AuthorizeUI(this, mapParam);
    //            authorizeUI.show();
    //            btnSave.setEnabled(false);
    //            btnDelete.setEnabled(false);
    //        } else if (isFilled) {
    //            String isAllTabsVisited = tabTermDeposit.isAllTabsVisited();
    //            //--- If all the tabs are not visited, then show the Message
    //            if(isAllTabsVisited.length()>0){
    //                CommonMethods.displayAlert(isAllTabsVisited);
    //            } else {
    //                isFilled = false;
    //                HashMap singleAuthorizeMap = new HashMap();
    //                ArrayList arrList = new ArrayList();
    //                HashMap authDataMap = new HashMap();
    //                authDataMap.put(CommonConstants.USER_ID, TrueTransactMain.USER_ID);
    //                authDataMap.put("DEPOSIT NO", txtDepsoitNo.getText());
    //                arrList.add(authDataMap);
    //                singleAuthorizeMap.put(CommonConstants.AUTHORIZESTATUS, authorizeStatus);
    //                singleAuthorizeMap.put(CommonConstants.AUTHORIZEDATA, arrList);
    //                authorize(singleAuthorizeMap);
    //                viewType = ClientConstants.VIEW_TYPE_CANCEL;
    //            }
    //        }
    //    }
    public void authorize(HashMap map) {
        map.put(CommonConstants.USER_ID, TrueTransactMain.USER_ID);
        //        observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
        observable.setAuthorizeMap(map);
        try {
            observable.doAction(nomineeUi.getNomineeOB());
            if (fromNewAuthorizeUI) {
                 newauthorizeListUI.removeSelectedRow();
                this.dispose();
                newauthorizeListUI.setFocusToTable();
                newauthorizeListUI.displayDetails("Multiple Deposit Account Opening");
            } 
            if (fromAuthorizeUI) {
                authorizeListUI.removeSelectedRow();
                this.dispose();
                authorizeListUI.setFocusToTable();
                authorizeListUI.displayDetails("Multiple Deposit Account Opening");
            } 
            if (fromCashierAuthorizeUI) {
                CashierauthorizeListUI.removeSelectedRow();
                this.dispose();
                CashierauthorizeListUI.setFocusToTable();
            } 
            if (fromManagerAuthorizeUI) {
                ManagerauthorizeListUI.removeSelectedRow();
                this.dispose();
                ManagerauthorizeListUI.setFocusToTable();
            }
            authSignUI.setLblStatus(observable.getLblStatus());
            poaUI.setLblStatus(observable.getLblStatus());
            authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
            poaUI.ttNotifyObservers();
        } catch (Exception e) {
            e.printStackTrace();
        }
        //        btnCancelActionPerformed(null);
        //        cancelOperation();
        //        doWhenCancelled();
        //observable.makeToNull();
        setModified(false);
    }
    private void txtRateOfInterestFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRateOfInterestFocusLost
                                                                                                                                                                                                                            }//GEN-LAST:event_txtRateOfInterestFocusLost

    private void txtRateOfInterestFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRateOfInterestFocusGained
                                                                                                            }//GEN-LAST:event_txtRateOfInterestFocusGained

    private void tdtDateOfDepositFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtDateOfDepositFocusGained
                                                                                                                                                                                                                            }//GEN-LAST:event_tdtDateOfDepositFocusGained
    private boolean extensionPeriod() {
        observable.intWarnMsg = "";
        boolean per = false;
        getExtensionPeriod();
        //--- If it is not between the period specified, then add the message
        if (!((period <= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD")))) && period >= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD"))))) {
            msgStrB.append(msgMinMaxPeriod());
            msgStrB.append("\n");
            if (msgStrB.equals("")) {
                per = false;
            } else {
                per = true;
            }
        }
        return per;
    }
    private void tdtDateOfDepositFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtDateOfDepositFocusLost
        ClientUtil.validateLTDate(tdtDateOfDeposit);
        updateOBFields();
        observable.resetDateofTransfer();
    }//GEN-LAST:event_tdtDateOfDepositFocusLost
    private void enablingDisabling() {
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)
                || observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr)) {
            txtPrintedNoOfTheFdr.setEnabled(false);
            cboInterestPaymentFrequency.setEnabled(false);
            cboInterestPaymentMode.setEnabled(true);
            lblTaxDeductions.setVisible(false);
            lbl15hDeclarations.setVisible(false);
            chkTaxDeductions.setVisible(false);
            chk15hDeclarations.setVisible(false);
            rdoStandingInstruction_No.setSelected(true);
            panAutoRenewal.setVisible(false);
            panAutoRenewal.setEnabled(false);
            lblAgentName.setVisible(false);
            lblMatAlertRep.setVisible(false);
            panMatAlertRep.setVisible(false);
            panMatAlertRep.setEnabled(false);
            panWithInterest.setVisible(false);
            lblWithIntAutoRenewal.setVisible(false);
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                //                panAgentId.setVisible(true);
                panAgentId.setEnabled(true);
                lblAgentName.setVisible(true);
                btnAgentIdFileOpen.setEnabled(true);
                lblAgentName.setText("Agent Name");
                panStandingInstruction.setVisible(false);
                lblStandingInstruction.setVisible(false);
            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr)) {
                //                panAgentId.setVisible(false);
                panAgentId.setEnabled(false);
                lblAgentName.setVisible(false);
                btnAgentIdFileOpen.setEnabled(false);
                lblAgentName.setText("Agent Name");
                //panStandingInstruction.setVisible(true);
                panStandingInstruction.setVisible(false);
                //lblStandingInstruction.setVisible(true);
                lblStandingInstruction.setVisible(false);
            }
            panAutoRenewal.setEnabled(false);
            lblValAgentname.setVisible(true);
            rdoMatAlert_report_No.setSelected(true);
            if (btnNew.isEnabled() == false) {
                txtPeriodOfDeposit_Days.setEnabled(false);
                cboInterestPaymentFrequency.setEnabled(false);
            }
        } else {
            txtAgentId.setText("");
            lblValAgentname.setText("");
            txtPrintedNoOfTheFdr.setEnabled(true);
            txtTotalNumberOfInstallments.setEnabled(false);
            lblTaxDeductions.setVisible(true);
            lbl15hDeclarations.setVisible(true);
            chkTaxDeductions.setVisible(true);
            chk15hDeclarations.setVisible(true);
            chkTaxDeductions.setEnabled(false);
            chk15hDeclarations.setEnabled(false);
            panStandingInstruction.setVisible(false);
            lblStandingInstruction.setVisible(false);
            panAutoRenewal.setVisible(true);
            panAutoRenewal.setEnabled(true);
            lblAgentName.setVisible(true);
            lblMatAlertRep.setVisible(true);
            panMatAlertRep.setVisible(true);
            panMatAlertRep.setEnabled(true);
            rdoAutoRenewal_No.setSelected(true);
            if (rdoAutoRenewal_No.isSelected() == true) {
                panWithInterest.setVisible(false);
                rdoWith_intRenewal_No.setSelected(true);
                lblWithIntAutoRenewal.setVisible(false);
            }
            rdoCalender_Freq_No.setSelected(true);
            lblAgentName.setText("Auto Renewal");
            panAutoRenewal.setEnabled(true);
            lblValAgentname.setVisible(false);
            rdoMatAlert_report_Yes.setSelected(true);
            if (btnNew.isEnabled() == false) {
                cboInterestPaymentFrequency.setEnabled(false);
                enableDisableDepSubAccordProd();
                //                if(rdoOpeningMode_Normal.isSelected() == true)
                //                    enableDisableDays();
            }
        }
    }

    private void tblDepSubNoAccInfoMousePressed() {
        if (!viewType.equals(ClientConstants.VIEW_TYPE_DELETE) && renewalMousePress == false) {
            newModeMouseClick = true;
            selectedDepSubNoRow = true;
            //            chkMember.setEnabled(true);
            observable.depSubNoStatus = CommonConstants.STATUS_MODIFIED;
//            int rowcount = (int)(Integer.parseInt(CommonUtil.convertObjToStr(tblDepSubNoAccInfo.getValueAt(tblDepSubNoAccInfo.getSelectedRow(),0))));
            tblDepSubNoRowSelected(0);
            String prodType = ((ComboBoxModel) cboProdType.getModel()).getKeyForSelected().toString();
            if (prodType.equals("RM")) {
                cboProdId.setEnabled(false);
                btnCustomerIdFileOpenCr.setEnabled(false);
            } else if (prodType.equals("GL")) {
                btnCustomerIdFileOpenCr.setEnabled(true);
                cboProdId.setEnabled(false);
            } else {
                btnCustomerIdFileOpenCr.setEnabled(true);
                cboProdId.setEnabled(true);
            }
            double days = CommonUtil.convertObjToDouble(observable.getTxtPeriodOfDeposit_Days()).doubleValue();
            double months = CommonUtil.convertObjToDouble(observable.getTxtPeriodOfDeposit_Months()).doubleValue() * 30;
            double years = CommonUtil.convertObjToDouble(observable.getTxtPeriodOfDeposit_Years()).doubleValue() * 360;
            double total = days + months + years;
            if (total < 180) {
                cboInterestPaymentFrequency.setSelectedItem("Date of Maturity");
                cboInterestPaymentFrequency.setEnabled(false);
            }
            tdtMaturityDate.setEnabled(false);
            retTxtBox = enableDisableDays();
            //---Sets the getSelectedRowCount to the Row that is selected
//            observable.getSelectedRowCount = tblDepSubNoAccInfo.getSelectedRow();
            observable.getSelectedRowCount = 0;
            enableDisableDepSubAccordProd();
            tdtDateOfDeposit.setEnabled(false);
            if (enable == true) {
                cboInterestPaymentFrequency.setEnabled(false);
            }

            if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {//NEWviewType.equals(ClientConstants.VIEW_TYPE_EDIT)|| viewType.equals("CREDIT_ACC_NO")){
                ClientUtil.enableDisable(panMaturityDt, true);
                ClientUtil.enableDisable(panDepositDetails, true);
                ClientUtil.enableDisable(panOpenMode, true);
                ClientUtil.enableDisable(panCategory, true);
                tdtDateOfDeposit.setEnabled(false);
//                btnDepSubNoAccNew.setEnabled(false);
                cboInterestPaymentFrequency.setEnabled(false);
                tdtDateOfDeposit.setEnabled(false);
                tdtMaturityDate.setEnabled(false);
                tdtMaturityDate.setEnabled(false);
                if (!authorizeBy.equals("")) {
                    ClientUtil.enableDisable(this, false);
                    btnCustomerIdFileOpen.setEnabled(false);
                    btnAgentIdFileOpen.setEnabled(false);
                    cboInterestPaymentMode.setEnabled(true);
                } else {
                    ClientUtil.enableDisable(this, false);
                    cboInterestPaymentMode.setEnabled(true);
                    cboProdType.setEnabled(true);
                    cboProdId.setEnabled(true);
                }
                if (authorizeBy != null && authorizeBy.length() > 0) {// || viewType.equals("CREDIT_ACC_NO")){
                    if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && (!viewType.equals(ClientConstants.VIEW_TYPE_RENEW)) && !txtDepsoitNo.getText().equals("New")) {
                        if (DateUtil.dateDiff((java.util.Date) aftDepDt, (java.util.Date) currDt.clone()) < 0) {
                            ClientUtil.enableDisable(this, false);
                            cboProdType.setEnabled(true);
                            cboProdId.setEnabled(true);
                            txtCustomerIdCr.setEnabled(true);
                            btnCustomerIdFileOpenCr.setEnabled(true);
                            cboInterestPaymentMode.setEnabled(true);
                            ClientUtil.enableDisable(panMaturityDt, false);
                            //                            if(tblDepSubNoAccInfo.getRowCount() > 0 && viewType != ClientConstants.VIEW_TYPE_RENEW)
                            //                                cboProductId.setEnabled(false);
                            cboCreditAccDetails();
                        } else {
                            btnCustomerIdFileOpenCr.setEnabled(false);
                        }
                    }
                } else {
                    ClientUtil.enableDisable(this, true);
                    ClientUtil.enableDisable(panMaturityDt, true);
                    if (!observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                        cboInterestPaymentFrequency.setEnabled(false);
                    }
                    tdtDateOfDeposit.setEnabled(false);
                    tdtMaturityDate.setEnabled(false);
                }
                ClientUtil.enableDisable(panModeOfOpening, false);
            }
            if (viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE) || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) {
                ClientUtil.enableDisable(this, false);
//                btnDepSubNoAccSave.setEnabled(false);
//                btnDepSubNoAccDel.setEnabled(false);
                btnCustomerIdFileOpenCr.setEnabled(false);
                cboInterestPaymentMode.setEnabled(false);
                cboProdType.setEnabled(false);
                cboProdId.setEnabled(false);
                btnCustomerIdFileOpenCr.setEnabled(false);
                btnJointAcctNew.setEnabled(false);
            }
            cboCreditAccDetails();
            if (/*tblDepSubNoAccInfo.getRowCount() > 0 && */viewType != ClientConstants.VIEW_TYPE_RENEW) {
                cboProductId.setEnabled(false);
               
                
               
            }
            if (viewType.equals("CLOSED_DEPOSIT") || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) {
                ClientUtil.enableDisable(panMaturityDt, false);
                ClientUtil.enableDisable(panDepositDt, false);
                ClientUtil.enableDisable(panInterestCredit, false);
                btnCustomerIdFileOpenCr.setEnabled(false);
//                btnDepSubNoAccSave.setEnabled(false);
            }
            if (viewType.equals("AUTHORIZE") && viewType != ClientConstants.VIEW_TYPE_RENEW) {
                disableScreen();
                ClientUtil.enableDisable(this, false);
            }
            
           
            if (viewType != (ClientConstants.VIEW_TYPE_AUTHORIZE) && viewType != ("ACCOUNT NUMBER")) {
                cboConstitution.setEnabled(true);
                chkAuthorizedSignatory.setEnabled(true);
                chkNomineeDetails.setEnabled(true);
                chkPowerOfAttorney.setEnabled(true);
                chkTaxDeductions.setEnabled(true);
                chk15hDeclarations.setEnabled(true);
                chkTaxDeductions.setEnabled(false);
                chk15hDeclarations.setEnabled(false);
                cboSettlementMode.setEnabled(true);
                //                chkMember.setEnabled(true);
//                cboMemberType.setVisible(false);
//                lblMemberType.setVisible(false);
                rdoDeathClaim_Yes.setEnabled(true);
                rdoDeathClaim_No.setEnabled(true);
                txtRemarks.setEnabled(true);
                panStandingInstruction.setEnabled(true);
                panMatAlertRep.setEnabled(true);
                panAutoRenewal.setEnabled(true);
                panWithInterest.setEnabled(true);
                rdoAutoRenewal_Yes.setEnabled(true);
                rdoAutoRenewal_No.setEnabled(true);
                rdoWith_intRenewal_Yes.setEnabled(true);
                rdoWith_intRenewal_No.setEnabled(true);
                rdoMatAlert_report_Yes.setEnabled(true);
                rdoMatAlert_report_No.setEnabled(true);
                rdoStandingInstruction_Yes.setEnabled(true);
                rdoStandingInstruction_Yes.setEnabled(true);
                rdoCalender_Freq_No.setEnabled(true);
                rdoCalender_Freq_Yes.setEnabled(true);
                tdtCalenderFreqDate.setEnabled(true);
                txtPanNumber.setEnabled(true);
                txtPrintedOption.setEnabled(true);
                if (observable.getRdoCalenderFreq_Yes() == true) {
                    rdoCalender_Freq_Yes.setSelected(true);
                } else {
                    rdoCalender_Freq_No.setSelected(true);
                }
            }
            lblRenewalInterestTokenNo.setVisible(false);
            txtRenewalIntTokenNoVal.setVisible(false);
            if ((observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_EXTENSION
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW)) {
                if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT
                        && panRenewalInformation.isEnabled() == true || panExtensionInformation.isEnabled() == true) {
                    if (firstClickedRenewalScreen == true && CommonUtil.convertObjToDouble(txtRenewalDepositAmount.getText()).doubleValue() > 0) {
                        if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                            cboRenewalInterestPaymentFrequency.setEnabled(true);
                            cboRenewalInterestPaymentMode.setEnabled(true);
                        } else {
                            cboRenewalInterestPaymentFrequency.setEnabled(false);
                            cboRenewalInterestPaymentMode.setEnabled(false);
                        }
                        cboRenewalDepositCategory.setEnabled(true);
                        txtRenewalPeriodOfDeposit_Years.setEnabled(true);
                        txtRenewalPeriodOfDeposit_Months.setEnabled(true);
                        txtRenewalPeriodOfDeposit_Days.setEnabled(true);
                    }
                    ClientUtil.enableDisable(panAutoRenewal, false);
                    ClientUtil.enableDisable(panMatAlertRep, false);
                    ClientUtil.enableDisable(panInterestCredit, false);
                    ClientUtil.enableDisable(panFreqency, false);
                    cboInterestPaymentMode.setEnabled(false);
//                    btnDepSubNoAccSave.setEnabled(false);
                }
                if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW) {
                    ClientUtil.enableDisable(panRenewalDepositTransDetails, false);
                    ClientUtil.enableDisable(panRenewalInterestDetails, false);
                    ClientUtil.enableDisable(panRenewalMaturityDt, false);
                    ClientUtil.enableDisable(panRenewalDepositDt, false);
                    ClientUtil.enableDisable(panRenewalInterestCredit, false);
                    ClientUtil.enableDisable(panRenewalFreqency, false);
                    txtDepsoitNo.setEnabled(false);
                    btnCustomerIdFileOpen.setEnabled(false);
                    cboInterestPaymentMode.setEnabled(false);
                    cboInterestPaymentFrequency.setEnabled(false);
                    txtCustomerId.setEnabled(false);
//                    btnDepSubNoAccSave.setEnabled(false);
                    ClientUtil.enableDisable(panMaturityDt, false);
                    ClientUtil.enableDisable(panFreqency, false);
                    ClientUtil.enableDisable(panAutoRenewal, false);
                    ClientUtil.enableDisable(panMatAlertRep, false);
                    ClientUtil.enableDisable(panWithInterest, false);
                    if (firstClickedRenewalScreen == true
                            && CommonUtil.convertObjToDouble(txtRenewalDepositAmount.getText()).doubleValue() > 0) {
                        if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                            cboRenewalInterestPaymentFrequency.setEnabled(true);
                            cboRenewalInterestPaymentMode.setEnabled(true);
                        } else {
                            cboRenewalInterestPaymentFrequency.setEnabled(false);
                            cboRenewalInterestPaymentMode.setEnabled(false);
                        }
                        cboRenewalDepositCategory.setEnabled(true);
                        txtRenewalPeriodOfDeposit_Years.setEnabled(true);
                        txtRenewalPeriodOfDeposit_Months.setEnabled(true);
                        txtRenewalPeriodOfDeposit_Days.setEnabled(true);
                        ClientUtil.enableDisable(panRenewalDepositTransDetails, true);
                        ClientUtil.enableDisable(panRenewalInterestDetails, true);
                    } else if (firstClickedRenewalScreen == true
                            && CommonUtil.convertObjToDouble(txtRenewalDepositAmount.getText()).doubleValue() == 0) {
                        cboRenewalInterestPaymentFrequency.setEnabled(false);
                        cboRenewalInterestPaymentMode.setEnabled(false);
                        cboRenewalDepositCategory.setEnabled(false);
                        txtRenewalPeriodOfDeposit_Years.setEnabled(false);
                        txtRenewalPeriodOfDeposit_Months.setEnabled(false);
                        txtRenewalPeriodOfDeposit_Days.setEnabled(false);
                        ClientUtil.enableDisable(panRenewalDepositTransDetails, false);
                        ClientUtil.enableDisable(panRenewalInterestDetails, false);
                    }
                }
                if (observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE
                        || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT
                        || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) {
                    ClientUtil.enableDisable(panRenewalInformation, false);
                    ClientUtil.enableDisable(panAccInf, false);
                    ClientUtil.enableDisable(panDepositDetails, false);
                    ClientUtil.enableDisable(panExtensionInformation, false);
                    cboInterestPaymentMode.setEnabled(false);
                    rdoDeathClaim_Yes.setEnabled(false);
                    rdoDeathClaim_No.setEnabled(false);
                }
                if ((observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT)
                        && panRenewalInformation.isEnabled() == false && panExtensionInformation.isEnabled() == false) {
                    btnCustomerIdFileOpen.setEnabled(false);
                    txtCustomerId.setEnabled(false);
                    if (!observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                        cboInterestPaymentFrequency.setSelectedItem("Date of Maturity");
                        cboInterestPaymentFrequency.setEnabled(false);
                        if (authorizeBy != null && authorizeBy.length() > 0) {
                            txtPeriodOfDeposit_Days.setEnabled(false);
                        }
                        if (observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr)) {
                            txtPeriodOfDeposit_Days.setEnabled(false);
                        }
                    } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && observable.credited == 0) {
                        cboInterestPaymentMode.setEnabled(true);
                        cboInterestPaymentFrequency.setEnabled(true);
                    } else {
                        cboInterestPaymentMode.setEnabled(false);
                        cboInterestPaymentFrequency.setEnabled(false);
                        cboProdType.setEnabled(false);
                        cboProdId.setEnabled(false);
                        btnCustomerIdFileOpenCr.setEnabled(false);
                        rdoCalender_Freq_Yes.setEnabled(false);
                        rdoCalender_Freq_No.setEnabled(false);
                        cboInterestPaymentMode.setEnabled(true);
                    }
                }
            }
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {//only incase of new mode...
                ClientUtil.enableDisable(panMaturityDt, true);
                ClientUtil.enableDisable(panDepositDetails, true);
                ClientUtil.enableDisable(panOpenMode, true);
                ClientUtil.enableDisable(panCategory, true);
                tdtDateOfDeposit.setEnabled(false);
                tdtMaturityDate.setEnabled(false);
                if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                    cboInterestPaymentFrequency.setEnabled(true);
                    cboInterestPaymentMode.setEnabled(true);
                    txtPeriodOfDeposit_Days.setEnabled(true);
                    String paymentMode = ((ComboBoxModel) cboInterestPaymentMode.getModel()).getKeyForSelected().toString();
                    if (paymentMode.equals("TRANSFER")) {
                        cboProdType.setEnabled(true);
                        cboProdId.setEnabled(true);
                        txtCustomerIdCr.setEnabled(true);
                        btnCustomerIdFileOpenCr.setEnabled(true);
                        cboProdType.setSelectedItem(observable.getCboProdType());
                        cboProdId.setSelectedItem(observable.getCboProdId());
                        txtCustomerIdCr.setText(observable.getCustomerIdCr());
                        lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
                    } else {
                        cboProdType.setSelectedItem("");
                        cboProdId.setSelectedItem("");
                        txtCustomerIdCr.setText("");
                        lblCustomerNameCrValue.setText("");
                        cboProdType.setEnabled(false);
                        cboProdId.setEnabled(false);
                        txtCustomerIdCr.setEnabled(false);
                        btnCustomerIdFileOpenCr.setEnabled(false);
                    }
                } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr)) {
                    txtPeriodOfDeposit_Days.setEnabled(false);
                    cboInterestPaymentFrequency.setEnabled(false);
                } else {
                    cboInterestPaymentFrequency.setEnabled(false);
                    txtPeriodOfDeposit_Days.setEnabled(true);
                }
                btnCustomerIdFileOpen.setEnabled(true);
                txtCustomerId.setEnabled(true);
                //                if(tblDepSubNoAccInfo.getRowCount() > 0 ){
                //                    cboProductId.setEnabled(false);
                //                    panModeOfOpening.setEnabled(false);
                //                }
            }
            txtMaturityAmount.setEnabled(false);
            txtTotalInterestAmount.setEnabled(false);
            txtPeriodicInterestAmount.setEnabled(false);
            txtRateOfInterest.setEnabled(false);
            txtDepsoitNo.setEnabled(false);
            txtAgentId.setEnabled(false);
            newModeMouseClick = false;
            renewalMousePress = true;
            //            if(chk15hDeclarations.isSelected() == false && chkTaxDeductions.isSelected() == false){
            //                chkTaxDeductions.setSelected(true);
            //            }

            if (lblMemberVal.getText() != null && !lblMemberVal.getText().equals("NONE")) {
                if (observable.getChk15hDeclarations() == false) {
                    chk15hDeclarations.setSelected(false);
                    chkTaxDeductions.setSelected(true);
                }
            } else {
                if (observable.getChk15hDeclarations() == false) {
                    chkTaxDeductions.setSelected(true);
                }
            }
            chk15hDeclarations.setEnabled(false);
            chkTaxDeductions.setEnabled(false);
        } else {
            ClientUtil.showAlertWindow("Cancel...");
            return;
        }
    }

    /**
     * To Display the data from DepSubNo CTable
     */
    private void tblDepSubNoRowSelected(int rowSelected) {
        setDepSubNoNewAndTblPress();
//        btnDepSubNoAccDel.setEnabled(true);
        observable.populateDepSubNoFields(rowSelected);
    }

    private void updateAccountInfo() {
        chkPowerOfAttorney.setSelected(observable.getChkPowerOfAttorney());
        txtCustomerId.setText(observable.getTxtCustomerId());
        cboCategory.setSelectedItem(observable.getCboCategory());
//        cboMemberType.setSelectedItem(observable.getCboMember());
        cboSettlementMode.setSelectedItem(observable.getCboSettlementMode());
        txtPanNumber.setText(observable.getTxtPanNumber());
        txtRemarks.setText(observable.getTxtRemarks());
        chkAuthorizedSignatory.setSelected(observable.getChkAuthorizedSignatory());
        chk15hDeclarations.setSelected(observable.getChk15hDeclarations());
        chkTaxDeductions.setSelected(observable.getChkTaxDeductions());
        //        chkMember.setSelected(observable.getChkMember());
        lblMemberVal.setText(observable.getLblMemberVal());
        chkNomineeDetails.setSelected(observable.getChkNomineeDetails());
        rdoOpeningMode_Multiple.setSelected(observable.getRdoOpeningMode_Normal());
        lblValRenewDep.setText(observable.getLblValRenewDep());
        rdoRenewalWithdrawing_Yes.setSelected(observable.getRdoRenewalWithdrawing_Yes());
        rdoRenewalWithdrawing_No.setSelected(observable.getRdoRenewalWithdrawing_No());
        rdoRenewalAdding_Yes.setSelected(observable.getRdoRenewalAdding_Yes());
        rdoRenewalAdding_No.setSelected(observable.getRdoRenewalAdding_No());
        rdoRenewalWithdrawingInt_Yes.setSelected(observable.getRdoRenewalWithdrawingInt_Yes());
        rdoRenewalWithdrawingInt_No.setSelected(observable.getRdoRenewalWithdrawingInt_No());
        rdoRenewalCalender_Freq_Yes.setSelected(observable.getRdoRenewalCalenderFreq_Yes());
        rdoRenewalCalender_Freq_No.setSelected(observable.getRdoRenewalCalenderFreq_No());

        rdoExtensionWithdrawing_Yes.setSelected(observable.getRdoExtensionWithdrawing_Yes());
        rdoExtensionWithdrawing_No.setSelected(observable.getRdoExtensionWithdrawing_No());
        rdoExtensionofPrematureClosure_Yes.setSelected(observable.getRdoExtensionAdding_Yes());
        rdoExtensionofPrematureClosure_No.setSelected(observable.getRdoExtensionAdding_No());
        rdoExtensionWithdrawingInt_Yes.setSelected(observable.getRdoExtensionWithdrawingInt_Yes());
        rdoExtensionWithdrawingInt_No.setSelected(observable.getRdoExtensionWithdrawingInt_No());
        rdoExtensionCalender_Freq_Yes.setSelected(observable.getRdoExtensionCalenderFreq_Yes());
        rdoExtensionCalender_Freq_No.setSelected(observable.getRdoExtensionCalenderFreq_No());        
    }

    private void updatePresentPosition() {        lblAvailableBalanceValue.setText(observable.getAvailableBalanceValue());
        lblTotalBalanceValue.setText(observable.getTotalBalanceValue());
        lblClearBalanceValue.setText(observable.getClearBalanceValue());
        lblLastInterestPaidDateValue.setText(observable.getLastInterestPaidDateValue());
        lblTotalInterestValue.setText(observable.getTotalInterestValue());
        lblPaidnterestAmountValue.setText(observable.getPaidnterestAmountValue());
        lblBalanceInterestAmountValue.setText(observable.getBalanceInterestAmountValue());
        lblTotalInterestPayableValue.setText(observable.getTotalInterestPayableValue());
        lblAccHeadValue.setText(observable.getAccHeadValue());
        //        lblDepositLienNoValue.setText(observable.getDepositLienNoValue());
        //        lblLienAmountValue.setText(observable.getLienAmountValue());
        //        lblLienDateValue.setText(observable.getLienDateValue());
        //        lblLoanNoValue.setText(observable.getLoanNoValue());
        //        lblLoanBalanceValue.setText(observable.getLoanBalanceValue());
        //        lblLoanTakenDateValue.setText(observable.getLoanTakenDateValue());
        lblTdsAmountValue.setText(observable.getTdsAmountValue());
        lblLastInterestProvisionDateValue.setText(observable.getLastInterestProvisionDateValue());
        lblClosedDateValue.setText(observable.getClosedDateValue());
        lblRenewalDepositAcValue.setText(observable.getRenewalClosedDepNo());
        lblClosingTypeValue.setText(observable.getClosingTypeValue());
        lblRenewalDateValue.setText(observable.getRenewalDateValue());
        lblClosingInterestAmountValue.setText(observable.getClosingInterestAmountValue());
        lblClosingRateOfInterestValue.setText(observable.getClosingRateOfInterestValue());
        lblSBInterestAmountValue.setText(observable.getSBInterestAmountValue());
        lblSBRateOfInterestValue.setText(observable.getSBRateOfInterestValue());
        lbldepositPeriodRunValue.setText(observable.getDepositPeriodRunValue());
        lblTransferOutBranchValue.setText(observable.getTransferOutBranchValue());
        lblSICreatedDateValue.setText(observable.getSICreatedDateValue());
        lblSINoValue.setText(observable.getSINoValue());
        lblSIProductTypeValue.setText(observable.getSIProductTypeValue());
        lblSIProductIdValue.setText(observable.getSIProductIdValue());
        lblSIAccountNoValue.setText(observable.getSIAccountNoValue());
        lblSIAmountValue.setText(observable.getSIAmountValue());
        lblSIParticularsValue.setText(observable.getSIParticularsValue());
        lblSIFrequencyValue.setText(observable.getSIFrequencyValue());
        lblSIForwardCountValue.setText(observable.getSIForwardCountValue());
        lblSIStartDateValue.setText(observable.getSIStartDateValue());
        lblSIEndDateValue.setText(observable.getSIEndDateValue());
        lblAcceptanceChargesValue.setText(observable.getAcceptanceChargesValue());
        lblSIFailureChargesValue.setText(observable.getAcceptanceChargesValue());
        lblSIExecutionChargesValue.setText(observable.getSIFailureChargesValue());
    }

    private void tblRenewalDepSubNoRowSelected(int rowSelected) {
        setRenewalDepSubNoNewAndTblPress();
//        btnDepSubNoAccDel.setEnabled(true);
        observable.populateRenewalDepSubNoFields(rowSelected);
    }

    private void setRenewalDepSubNoNewAndTblPress() {
        renewalupdateOBDepSubNo();
    }

    private void updateDepSubNoRenewal() {
        cboRenewalInterestTransProdId.setSelectedItem(observable.getCboRenewalInterestTransProdId());
        cboRenewalProdId.setSelectedItem(observable.getCboRenewalProdId());
        if (observable.getCboRenewalDepTransProdId() != null) {
            cboRenewalDepTransProdId.setSelectedItem(observable.getCboRenewalDepTransProdId());
        }
    }

    /**
     * Updates the Deposit SubNo Tab Screen
     */
    private void updateDepSubNo() {
        tdtDateOfDeposit.setDateValue(observable.getTdtDateOfDeposit());
        txtDepositAmount.setText(observable.getTxtDepositAmount());
        cboInterestPaymentFrequency.setSelectedItem(observable.getCboInterestPaymentFrequency());
        cboCalenderFreqDay.setSelectedItem(observable.getCboCalenderFreq());
        lblValDepositSubNo.setText(observable.getLblValDepositSubNo());
        txtRateOfInterest.setText(observable.getTxtRateOfInterest());
        txtMaturityAmount.setText(observable.getTxtMaturityAmount());
        txtTotalInterestAmount.setText(observable.getTxtTotalInterestAmount());
        txtPeriodicInterestAmount.setText(observable.getTxtPeriodicInterestAmount());
        tdtMaturityDate.setDateValue(observable.getTdtMaturityDate());
        txtPeriodOfDeposit_Years.setText(observable.getTxtPeriodOfDeposit_Years());
        txtPeriodOfDeposit_Months.setText(observable.getTxtPeriodOfDeposit_Months());
        txtPeriodOfDeposit_Days.setText(observable.getTxtPeriodOfDeposit_Days());
        txtWeek.setText(observable.getTxtPeriodOfDeposit_Weeks());
        cboInterestPaymentMode.setSelectedItem(observable.getCboInterestPaymentMode());
        cboProdType.setSelectedItem(observable.getCboProdType());
        cboProdId.setSelectedItem(observable.getCboProdId());
        txtCustomerIdCr.setText(observable.getCustomerIdCr());
        lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
        tdtCalenderFreqDate.setDateValue(observable.getCalenderFreqDate());
        //        cboPaymentType.setSelectedItem(observable.getCboPaymentType());
        //        cboInstallmentAmount.setSelectedItem(observable.getCboInstallmentAmount());
        //        //        tdtPaymentDate.setDateValue(observable.getTdtPaymentDate());
        //        tdtPaymentDate.setDateValue(observable.getTdtMaturityDate());
    }

    private void btnDepSubNoAccDelActionPerformed() {
        observable.resetDepSubNo();
        updateOBFields();
        observable.resetDepSubNo();
        observable.depSubNoStatus = CommonConstants.STATUS_DELETED;
        setDepSubNoFields(false);
        setBtnDepSubNo(false);
//        btnDepSubNoAccNew.setEnabled(true);
        observable.delDepSubNoTab(0, true);
        selectedDepSubNoRow = false;
        cboInterestPaymentMode.setSelectedItem("");
        cboInterestPaymentFrequency.setSelectedItem("");
        txtDepositAmount.setText("");
        txtPrintedOption.setText("");
        //resetDepSubNoProductIDChanged();
        lblValDepositSubNo.setText("");
        tdtDateOfDeposit.setDateValue("");
//        if(tblDepSubNoAccInfo.getRowCount() > 0){
        if (txtDepositAmount.getText().length() > 0) {
            cboProductId.setEnabled(false);
        } else {
            if (observable.getActionType() != ClientConstants.ACTIONTYPE_EDIT) {
                cboProductId.setEnabled(true);
            }
        }
        //        tdtPaymentDate.setEnabled(false);

    }

    private void validationForDepSubAccinfo() {
        //---If it is not in Renewal mode , check for all the validations , else don't validate
        if (viewType != ClientConstants.VIEW_TYPE_RENEW && CommonUtil.convertObjToStr(renewdDepNo).length() == 0) {
            //--- Check for the period whether it is in expected Period of multiples.
            int retPerMul = chkPeriodMultiples();
            //system.out.println("retPerMul" + retPerMul);
            //--- If it is not the expected Period of multiples, then add the message
            if (retPerMul == -1) {
                msgStrB.append(msgPeriodMultiples());
                msgStrB.append("\n");
            }
            //--- Check for the period whether it is betweeen the max and min period.
            if (!flPtWithoutPeriod) {
                getPeriod();
            }
            //--- If it is not between the period specified, then add the message
            if (!observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                validationOfMaxMinPeriodNormal();
                //                if(!((period<=Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD")))) && period>=Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD"))))){
                //                    msgStrB.append(msgMinMaxPeriod());
                //                    msgStrB.append("\n");
                //                }
            }
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                if (!((period <= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD"))))
                        && period >= (Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD"))) - 5))) {
                    msgStrB.append(msgMinMaxPeriod());
                    msgStrB.append("\n");
                }
            }
            //--- Check for the amount whether it is betweeen the max and min dep amt.
            //--- and to find whether it is in the accpeted multiples.
            double amt = 0.0;
            double maxAmt = 0.0;
            double minAmt = 0.0;
            double multAmt = 0.0;
            if (txtDepositAmount.getText().length() > 0) {
                amt = Double.parseDouble(txtDepositAmount.getText());
                maxAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_AMT")));
                minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
                multAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("AMT_MULTIPLES")));
            }
            //--- If it is not between the amount specified, then add the message
            if (!(amt >= minAmt && amt <= maxAmt)) {
                if (!observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                    msgStrB.append(msgMinMaxAmt());
                    msgStrB.append("\n");
                }
            }
            //--- If it is not the expected amount multiples, then add the message
            //                if(amt%multAmt != 0){
            //                    msgStrB.append(msgAmtMultiples());
            //                    msgStrB.append("\n");
            //                }
        }
        //--- To check whether the Rate of Interst is set or not
        double retInt = 0;
        if (viewType != ClientConstants.VIEW_TYPE_RENEW && !flPtWithoutPeriod) {
            retInt = observable.setRateOfInterset(null);
        }
    }

    private void btnDepSubNoAccSaveActionPerformed() {
        if (txtDepositAmount.getText().length() == 0) {
          //  txtDepositAmount.setText("0.00");
        }
        int checkWeek = 0;
        updateOBFields();
        observable.intWarnMsg = "";
        final String depSubNoMandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(), panInput);
        if (!txtPeriodOfDeposit_Months.getText().equals("") || !txtPeriodOfDeposit_Years.getText().equals("")
                || !txtPeriodOfDeposit_Days.getText().equals("")) {
            if (CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue() >= 0) {
                if (!flPtWithoutPeriod) {
                    validationForDepSubAccinfo();
                }
                depoAmount = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                String installType = ((ComboBoxModel) cboInterestPaymentMode.getModel()).getKeyForSelected().toString();        // TODO add your handling code here:
                String prodType = ((ComboBoxModel) cboProdType.getModel()).getKeyForSelected().toString();
                HashMap schemeMap = new HashMap();
                renewalProd = false;
                schemeMap.put("PROD_ID", ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
                List lstScheme = ClientUtil.executeQuery("getSchemeIntroDate", schemeMap);
                if (lstScheme != null && lstScheme.size() > 0) {
                    schemeMap = (HashMap) lstScheme.get(0);
                    Date schemeDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(schemeMap.get("SCHEME_INTRO_DT")));
                    Date closedDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(schemeMap.get("SCHEME_CLOSING_DT")));
                    schemeIntroDt = (Date) currDt.clone();
                    schemeCloseDt = (Date) currDt.clone();
                    if (closedDt != null && closedDt.getDate() > 0) {
                        schemeCloseDt.setDate(closedDt.getDate());
                        schemeCloseDt.setMonth(closedDt.getMonth());
                        schemeCloseDt.setYear(closedDt.getYear());
                        Date curr_Dt = (Date) currDt.clone();
                        if ((viewType.equals(ClientConstants.VIEW_TYPE_RENEW) || viewType.equals(ClientConstants.VIEW_TYPE_NEW)
                                || viewType.equals("CUSTOMER ID")) && (DateUtil.dateDiff(schemeCloseDt, curr_Dt) > 0)) {
                            if (viewType.equals(ClientConstants.VIEW_TYPE_RENEW)) {
                                renewalProd = true;
                            } else if (viewType.equals(ClientConstants.VIEW_TYPE_NEW) || viewType.equals("CUSTOMER ID")) {
                                ClientUtil.showAlertWindow("This Product is already Closed on " + " "
                                        + DateUtil.getStringDate(schemeCloseDt) + " " + "Please Change the ProductId...");
                                return;
                            }
                        }
                    }
                    if (schemeDt != null && schemeDt.getDate() > 0) {
                        schemeIntroDt.setDate(schemeDt.getDate());
                        schemeIntroDt.setMonth(schemeDt.getMonth());
                        schemeIntroDt.setYear(schemeDt.getYear());
                    }
                }
                Date curr_Dt = (Date) currDt.clone();
                //--- Adds the "Interst Rate Not Set Message" if it is not set.
                if (!observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                    cboInterestPaymentFrequency.setSelectedItem("Date of Maturity");
                    cboInterestPaymentFrequency.setEnabled(false);
                }
                if (observable.intWarnMsg != null) {
                    if (observable.intWarnMsg.length() > 0) {
                        msgStrB.append(observable.intWarnMsg);
                        msgStrB.append("\n");
                        observable.intWarnMsg = null;
                    }
                }
                double year = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue();
                double month = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue();
                double days = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Days.getText()).doubleValue();
                if ((txtWeek.getText() != null) && (!txtWeek.getText().equals(""))) {
                    days = CommonUtil.convertObjToDouble(txtWeek.getText()).doubleValue();
                    days = days * 7;
                }
                double amt = Double.parseDouble(CommonUtil.convertObjToStr(txtDepositAmount.getText()));
                double maxAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_AMT")));
                double minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
                double multAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("AMT_MULTIPLES")));
                double newModePeriod = 0.0;
                newModePeriod = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue() * 360;
                newModePeriod = newModePeriod + CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue() * 30;
                newModePeriod = newModePeriod + CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Days.getText()).doubleValue();
                if ((txtWeek.getText() != null) && (!txtWeek.getText().equals(""))) {
                    newModePeriod = newModePeriod + CommonUtil.convertObjToDouble(txtWeek.getText()).doubleValue() * 7;

                }
                if (newModePeriod == 0 && !flPtWithoutPeriod) {
                    ClientUtil.showAlertWindow("Period of Deposit Should be Proper Value... ");
                    return;
                }
                String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(CommonUtil.convertObjToStr(((ComboBoxModel) cboProductId.getModel()).getKeyForSelected())));
                int freq = CommonUtil.convertObjToInt(CommonUtil.convertObjToStr(((ComboBoxModel) cboInterestPaymentFrequency.getModel()).getKeyForSelected()));
                if (msgStrB.length() == 0) {
                    if (depSubNoMandatoryMessage.length() > 1 && !flPtWithoutPeriod) {
                        CommonMethods.displayAlert(depSubNoMandatoryMessage);
                    } else if (!observable.productBehavesLike.equals(observable.prodBehavesLikeDaily) && amt < minAmt) {
                        CommonMethods.showDialogOk("Amount is Less than the Minimum Deposit Amount");
                        txtDepositAmount.requestFocus();
                        return;
                    } else if (!observable.productBehavesLike.equals(observable.prodBehavesLikeDaily) && amt >= maxAmt) {
                        CommonMethods.showDialogOk("Amount is More than the Maximum Deposit Amount");
                        txtDepositAmount.requestFocus();
                        return;
                    } ///////////  comm by jjjj
                    //                    else if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily) && amt < minAmt) {
                    //                        //system.out.println("33333333  kkkkkkkkkk");
                    //                        CommonMethods.showDialogOk("Amount is Less than the Minimum Deposit Amount");
                    //                        txtRateOfInterest.setText(String.valueOf(0.0));
                    //                        txtDepositAmount.requestFocus();
                    //                        return;
                    //                    }
                    ///////////////////////////////
                    else if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily) && amt >= maxAmt) {
                        CommonMethods.showDialogOk("Amount is Exceeding the Maximum Deposit Amount");
                        txtRateOfInterest.setText(String.valueOf(0.0));
                        txtDepositAmount.requestFocus();
                        return;
                    } //                    else if(strBehavesLike.equals("FIXED") && days>0 && cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")){
                    //                        ClientUtil.showAlertWindow("Enter Years and Months only.....");
                    //                        return;
                    //                    }
                    //                    else if(strBehavesLike.equals("FIXED") && freq == 30 && newModePeriod <360){
                    //                        ClientUtil.showAlertWindow("Not able to give Monthly Interest for this Period ");
                    //                        return;
                    //                    }else if(strBehavesLike.equals("FIXED") && newModePeriod<180 && (freq  == 90 || freq == 360 || freq == 180)){
                    //                        ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity... ");
                    //                        return;
                    //                    }else if(strBehavesLike.equals("FIXED") && newModePeriod>=180 && newModePeriod<360 && freq == 360){
                    //                        ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity or Quaterly or Half Yearly... ");
                    //                        return;
                    //                    }else if(strBehavesLike.equals("FIXED") && newModePeriod == 360 && freq  == 360){
                    //                        ClientUtil.showAlertWindow("Int Pay Freqency can be Date of Maturity or Monthly or Quaterly or Half Yearly... ");
                    //                        return;
                    //                    }
                    else if (strBehavesLike.equals("FIXED") && freq == 30 && newModePeriod < 30) {
                        ClientUtil.showAlertWindow("Not able to give Monthly Interest for this Period ");
                        cboInterestPaymentFrequency.setSelectedItem("");
                        return;
                    } else if (strBehavesLike.equals("FIXED") && newModePeriod < 90 && freq == 90) {
                        ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");

                        return;
                    } else if (strBehavesLike.equals("FIXED") && newModePeriod < 180 && freq == 180) {
                        if (newModePeriod < 90) {
                            ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");

                            return;
                        } else {
                            ClientUtil.showAlertWindow("Int Pay Freqency can be monthly or Quarterly ... ");

                            return;
                        }
                    } else if (strBehavesLike.equals("FIXED") && newModePeriod < 360 && freq == 360) {
                        if (newModePeriod < 90) {
                            ClientUtil.showAlertWindow("Int Pay Freqency can be  monthly  ");

                            return;
                        } else if (newModePeriod < 180) {
                            ClientUtil.showAlertWindow("Int Pay Freqency can be monmthly or Quarterly ... ");

                            return;
                        } else {
                            ClientUtil.showAlertWindow("Int Pay Freqency can be monmthly,Quarterly  or HalfYearly...");

                            return;
                        }
                    } else if (txtPeriodOfDeposit_Years.getText().length() > 0 && txtPeriodOfDeposit_Months.getText().length() > 0
                            && year > 0 && month > 11 && !flPtWithoutPeriod) {
                        txtPeriodOfDeposit_Months.requestFocus();
                        ClientUtil.showAlertWindow("Enter values less than 12 months...");
                        return;
                    } else if (txtPeriodOfDeposit_Months.getText().length() > 0 && txtPeriodOfDeposit_Days.getText().length() > 0
                            && (year == 0 && month > 11 && days > 29) && !flPtWithoutPeriod) {
                        txtPeriodOfDeposit_Days.requestFocus();
                        ClientUtil.showAlertWindow("Enter values less than 30 days...");
                        return;
                    } else if (txtPeriodOfDeposit_Months.getText().length() > 0 && txtPeriodOfDeposit_Days.getText().length() > 0
                            && (year > 0 && days > 29) && !flPtWithoutPeriod) {
                        txtPeriodOfDeposit_Days.requestFocus();
                        ClientUtil.showAlertWindow("Enter values less than 30 days...");
                        return;
                    } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)
                            && rdoAutoRenewal_Yes.isSelected() == true && rdoWith_intRenewal_No.isSelected() == true
                            && (installType == null || installType.equals("CASH") || prodType == null || txtCustomerIdCr.getText().length() == 0)) {
                        ClientUtil.showAlertWindow("you have chosen Auto Renewal With out interest, Hence please Choose Intpay Mode as Transfer");
                    } else if (!observable.productBehavesLike.equals(observable.prodBehavesLikeDaily) && txtMaturityAmount.getText().length() == 0 && viewType != ClientConstants.VIEW_TYPE_RENEW) {
                        ClientUtil.showAlertWindow("Maturity Amount Should not be empty");
                    } else if (!observable.productBehavesLike.equals(observable.prodBehavesLikeDaily) && txtTotalInterestAmount.getText().length() == 0 && viewType != ClientConstants.VIEW_TYPE_RENEW) {
                        ClientUtil.showAlertWindow("Total Interest Amount Should not be empty");
                    } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && installType.equals("") && viewType != ClientConstants.VIEW_TYPE_RENEW) {
                        ClientUtil.showAlertWindow("Interest Payment Mode Should not be empty");
                    } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && prodType.equals("") && installType.equals("TRANSFER") && viewType != ClientConstants.VIEW_TYPE_RENEW) {
                        ClientUtil.showAlertWindow("Product Type Should not be empty");
                    } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && (txtCustomerIdCr.getText().length() == 0) && installType.equals("TRANSFER") && viewType != ClientConstants.VIEW_TYPE_RENEW) {
                        ClientUtil.showAlertWindow("Account Number Should not be empty");
                    } else if (rdoCalender_Freq_Yes.isSelected() == true && cboCalenderFreqDay.getSelectedItem().equals("")) {
                        ClientUtil.showAlertWindow("Calender Frequency Day Should not be empty...");
                    } else {
                        //                    if(viewType == ClientConstants.VIEW_TYPE_RENEW){
                        //                        schemeFlag = false;
                        //                        String strBehavesLikeNowSelected = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD());
                        //                        HashMap calcMap = new HashMap();
                        //                        java.util.Date depDt =DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
                        //                        calcMap.put("DEPOSIT_PERIOD_YY",txtPeriodOfDeposit_Years.getText());
                        //                        calcMap.put("DEPOSIT_PERIOD_MM",txtPeriodOfDeposit_Months.getText());
                        //                        calcMap.put("DEPOSIT_PERIOD_DD",txtPeriodOfDeposit_Days.getText());
                        //                        calcMap.put("DEPOSIT_DT",depDt);
                        //                        calcMap = observable.calculateMaturityDate(calcMap);
                        //                        java.util.Date matDate = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
                        //                        java.util.Date currDate = currDt;
                        //                        if(renewSave == true){
                        //                            if(addingSomeAmt == true){
                        //                                double totalDepAmt = observable.getdepositAmount();
                        //                                double depAmt = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                        //                                //system.out.println("####if :"+totalDepAmt);
                        //                                //system.out.println("####if :"+depAmt);
                        //                                if(periodFlag == false){
                        //                                    if(depAmt<0){
                        //                                        ClientUtil.showAlertWindow("Amount is lesser than the Deposit Amount..." +
                        //                                        "Enter Amount greater than Deposit Amount"+
                        //                                        "DepositAmount : "+ totalDepAmt);
                        //                                        txtDepositAmount.setText(String.valueOf(totalDepAmt));
                        //                                        txtDepositAmount.requestFocus();
                        //                                        return;
                        //                                    }else {
                        //                                        //system.out.println("5 changePeriod() :");
                        //                                        changePeriod();
                        //                                    }
                        //                                }else if(validationOfMaxMinPeriodRenewal()){
                        //                                    showMsg();
                        //                                    msgStrB = new StringBuffer();
                        //                                    observable.intWarnMsg = new String();
                        //                                    schemeFlag = true;
                        //                                }else if(observable.productBehavesLike.equals(observable.prodBehavesLikeDaily) && txtMaturityAmount.getText().length()==0 && viewType == ClientConstants.VIEW_TYPE_RENEW){
                        //                                    CommonMethods.displayAlert("Maturity Amount Should not be empty");
                        //                                    schemeFlag = true;
                        //                                }else if(observable.productBehavesLike.equals(observable.prodBehavesLikeDaily) && txtTotalInterestAmount.getText().length()==0 && viewType == ClientConstants.VIEW_TYPE_RENEW){
                        //                                    CommonMethods.displayAlert("Total Interest Amount Should not be empty");
                        //                                    schemeFlag = true;
                        //                                }else if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && installType.equals("") && viewType == ClientConstants.VIEW_TYPE_RENEW){
                        //                                    CommonMethods.displayAlert("Interest Payment Mode Should not be empty");
                        //                                    cboInterestPaymentMode.setEnabled(true);
                        //                                    schemeFlag = true;
                        //                                }else if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && prodType.equals("") && installType.equals("TRANSFER") && viewType == ClientConstants.VIEW_TYPE_RENEW){
                        //                                    CommonMethods.displayAlert("Product Type Should not be empty");
                        //                                    schemeFlag = true;
                        //                                }else if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && (txtCustomerIdCr.getText().length()==0) && installType.equals("TRANSFER") && viewType == ClientConstants.VIEW_TYPE_RENEW){
                        //                                    CommonMethods.displayAlert("Account Number Should not be empty");
                        //                                }else if(cboInterestPaymentFrequency.getSelectedItem().equals("") && observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)){
                        //                                    CommonMethods.displayAlert("Choose Int Pay Frequency...");
                        //                                    schemeFlag = true;
                        //                                }else if(DateUtil.dateDiff(schemeIntroDt, currDt)<0){
                        //                                    ClientUtil.showAlertWindow("This Product is Launched on "+" "+
                        //                                    DateUtil.getStringDate(schemeCloseDt)+" "+"Plz Change the ProductId...");
                        //                                    schemeFlag = true;
                        //                                }else if(renewalProd == true){
                        //                                    ClientUtil.showAlertWindow("This Product is already Closed on "+" "+
                        //                                    DateUtil.getStringDate(schemeCloseDt)+" "+"Please Change the ProductId...");
                        //                                    cboProductId.setEnabled(true);
                        //                                    return;
                        //                                }else if(strBehavesLikeNowSelected.equals("RECURRING")){
                        //                                    ClientUtil.showAlertWindow("Product cannot be renewed as Recurring Plz Change the ProductId...");
                        //                                    schemeFlag = true;
                        //                                }else
                        //                                    depSubNoSave(); //--- Save the Data
                        //                            }else if(contProdId == true){
                        //                                //system.out.println("5 changePeriod() :");
                        //                                changePeriod();
                        //                            }else if(DateUtil.dateDiff(currDate,matDate) <observable.backDateFreq){
                        //                                ClientUtil.showAlertWindow("The Date of Maturity should be minimum 15 days from today's date...");
                        //                                txtPeriodOfDeposit_Years.setEnabled(true);
                        //                                txtPeriodOfDeposit_Months.setEnabled(true);
                        //                                txtPeriodOfDeposit_Days.setEnabled(true);
                        //                                txtPeriodOfDeposit_Years.requestFocus();
                        //                                cboInterestPaymentMode.setEnabled(true);
                        //                            }else if(validationOfMaxMinPeriodRenewal()){
                        //                                showMsg();
                        //                                msgStrB = new StringBuffer();
                        //                                observable.intWarnMsg = new String();
                        //                                schemeFlag = true;
                        //                            }else if(observable.productBehavesLike.equals(observable.prodBehavesLikeDaily) && txtMaturityAmount.getText().length()==0 && viewType == ClientConstants.VIEW_TYPE_RENEW){
                        //                                CommonMethods.displayAlert("Maturity Amount Should not be empty");
                        //                                schemeFlag = true;
                        //                            }else if(observable.productBehavesLike.equals(observable.prodBehavesLikeDaily) && txtTotalInterestAmount.getText().length()==0 && viewType == ClientConstants.VIEW_TYPE_RENEW){
                        //                                CommonMethods.displayAlert("Total Interest Amount Should not be empty");
                        //                                schemeFlag = true;
                        //                            }else if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && installType.equals("") && viewType == ClientConstants.VIEW_TYPE_RENEW){
                        //                                CommonMethods.displayAlert("Interest Payment Mode Should not be empty");
                        //                                cboInterestPaymentMode.setEnabled(true);
                        //                                schemeFlag = true;
                        //                            }else if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && prodType.equals("") && installType.equals("TRANSFER") && viewType == ClientConstants.VIEW_TYPE_RENEW){
                        //                                CommonMethods.displayAlert("Product Type Should not be empty");
                        //                                schemeFlag = true;
                        //                            }else if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed) && (txtCustomerIdCr.getText().length()==0) && installType.equals("TRANSFER") && viewType == ClientConstants.VIEW_TYPE_RENEW){
                        //                                CommonMethods.displayAlert("Account Number Should not be empty");
                        //                            }else if(cboInterestPaymentFrequency.getSelectedItem().equals("") && observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)){
                        //                                CommonMethods.displayAlert("Choose Int Pay Frequency...");
                        //                                schemeFlag = true;
                        //                            }else if(DateUtil.dateDiff(schemeIntroDt, currDt)<0){
                        //                                ClientUtil.showAlertWindow("This Product is Launched on "+" "+
                        //                                DateUtil.getStringDate(schemeCloseDt)+" "+"Plz Change the ProductId...");
                        //                                schemeFlag = true;
                        //                            }else if(renewalProd == true){
                        //                                ClientUtil.showAlertWindow("This Product is already Closed, Closed on "+" "+
                        //                                DateUtil.getStringDate(schemeCloseDt)+" "+"Please Change the ProductId...");
                        //                                cboProductId.setEnabled(true);
                        //                                return;
                        //                            }else if(strBehavesLikeNowSelected.equals("RECURRING")){
                        //                                ClientUtil.showAlertWindow("Product cannot be renewed as Recurring Plz Change the ProductId...");
                        //                                schemeFlag = true;
                        //                            }else{
                        //                                depSubNoSave(); //--- Save the Data
                        //                            }
                        //                        }else{
                        //                            ClientUtil.showAlertWindow("Visit Deposit Amount Column... then Save");
                        //                            txtDepositAmount.requestFocus(false);
                        //                        }
                        //                    }else
                        if (!viewType.equals(ClientConstants.VIEW_TYPE_RENEW)) {
                            depSubNoSave(); //--- Save the Data
                        }
                        if (schemeFlag == true) {
                            selectedDepSubNoRow = true;
                        } else {
                            selectedDepSubNoRow = false;
                        }
                        if (renewalSubNo == true) {
                            cboCategory.setEnabled(false);
                            cboInterestPaymentFrequency.setEnabled(false);
                            if (schemeFlag == false) {
                                cboProductId.setEnabled(false);
                            } else {
                                cboProductId.setEnabled(true);
                            }
                        }
//                        if(tblDepSubNoAccInfo.getRowCount() > 0 && viewType != ClientConstants.VIEW_TYPE_RENEW){
                        if (txtDepositAmount.getText().length() > 0 && viewType != ClientConstants.VIEW_TYPE_RENEW) {
                            cboProductId.setEnabled(false);
                            cboCategory.setEnabled(false);
                        }
                    }
                    renewalProd = false;
                } else {
                    if (viewType != ClientConstants.VIEW_TYPE_RENEW) {
                        showMsg();
                        msgStrB = new StringBuffer();
                        observable.intWarnMsg = new String();
                    }
                }
            } else {
                ClientUtil.showAlertWindow("Enter Deposit Amount...");
                txtDepositAmount.requestFocus();
            }


            if (!panWeek.isVisible()) {
            } else {
                checkWeek = 1;
                //system.out.println("checkWeekkkkkk" + checkWeek);
            }
        } else {
            ClientUtil.showAlertWindow("Enter the Period of Deposit");
        }
    }

    private boolean validationOfMaxMinPeriodRenewal() {
        observable.intWarnMsg = "";
        boolean per = false;
        getRenewalPeriod();
        HashMap depProdRenewalDetails = observable.getAcctHeadForProdRenewal();
        //--- If it is not between the period specified, then add the message

        if (!((period <= Integer.parseInt(CommonUtil.convertObjToStr(depProdRenewalDetails.get("MAX_DEPOSIT_PERIOD")))))) {
            msgStrB.append(msgMaxPeriodRenewal());
            msgStrB.append("\n");
            if (msgStrB.equals("")) {
                per = false;
            } else {
                per = true;
            }
        } else if (period < Integer.parseInt(CommonUtil.convertObjToStr(depProdRenewalDetails.get("MINIMUM_PERIOD_OF_RENEWAL")))) {
            msgStrB.append(msgMinPeriodRenewal());
            msgStrB.append("\n");
            if (msgStrB.equals("")) {
                per = false;
            } else {
                per = true;
            }
        }
        return per;
    }

    private boolean validationOfMaxMinPeriodNormal() {
        observable.intWarnMsg = "";
        boolean per = false;
        //        getPeriod();
        HashMap depProdRenewalDetails = observable.getAcctHeadForProd();
        //--- If it is not between the period specified, then add the message
        if (!flPtWithoutPeriod) {
            if (!((period <= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD")))))) {
                msgStrB.append(msgMaxPeriodNormal());
                msgStrB.append("\n");
                if (msgStrB.equals("")) {
                    per = false;
                } else {
                    per = true;
                }
            } else if (period < Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD")))) {
                msgStrB.append(msgMinPeriodNormal());
                msgStrB.append("\n");
                if (msgStrB.equals("")) {
                    per = false;
                } else {
                    per = true;
                }
            }
        }
        return per;
    }

    /**
     * To display the data in DepositSubNo Ctable and to save the data in
     * HashMap for further Processing
     */
    private void depSubNoSave() {
        updateOBFields();
        observable.populateDepSubNoTbl();
        if (!(observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) && rdoOpeningMode_Multiple.isSelected() == true) {
            if (observable.depSubNoK == ok || observable.depSubNoK == cancel) {
                observable.resetDepSubNo();
                setDepSubNoFields(false);
                setBtnDepSubNo(false);
                renewalMousePress = false;
                //            btnDepSubNoAccNew.setEnabled(true);
                observable.ttNotifyObservers();

            } else {
                observable.ttNotifyObservers();
            }
        } else {
            observable.ttNotifyObservers();
        }
    }    //--- To enable disable the DepositSubAccInfo Fields according to the ProdID Selected

    private void enableDisableDepSubAccordProd() {
        //--- If Product Behaves Like Daily or RD, then enable Installment Type, Payment Date, Payment Date
        //--- else disable them.
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)
                || (observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr))) {
            txtPeriodOfDeposit_Days.setEnabled(false);
            txtPeriodOfDeposit_Months.setEnabled(true);
            txtPeriodOfDeposit_Years.setEnabled(true);
        } else {
            txtPeriodOfDeposit_Days.setEnabled(true);
            txtPeriodOfDeposit_Months.setEnabled(true);
            txtPeriodOfDeposit_Years.setEnabled(true);
        }
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
            panDepositDt.setVisible(false);
        } else {
            panDepositDt.setVisible(true);
        }

        //--- If Product Behaves Like Fixed, then enable InterestPaymtFreq. and IntPaymtMode
        //--- else disable them.
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
            cboInterestPaymentFrequency.setEnabled(true);
            cboInterestPaymentMode.setEnabled(true);
        } else {
            cboInterestPaymentFrequency.setEnabled(false);
            cboInterestPaymentMode.setEnabled(false);
        }
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
            tdtDateOfDeposit.setEnabled(true);
        } else {
            tdtDateOfDeposit.setEnabled(false);
        }
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
            cboProdType.setEnabled(false);
            cboProdId.setEnabled(false);
            txtCustomerIdCr.setEnabled(false);
            cboInterestPaymentMode.setEnabled(true);
            rdoCalender_Freq_No.setEnabled(true);
            rdoCalender_Freq_No.setSelected(true);
        } else {
            panInterestCredit.setVisible(false);
        }
        txtMaturityAmount.setEnabled(false);
        txtTotalInterestAmount.setEnabled(false);
        txtPeriodicInterestAmount.setEnabled(false);
        txtRateOfInterest.setEnabled(false);
        txtPanNumber.setEnabled(true);
    }
    private void normalOpeningMode() {
        observable.transferInSelect = false;
        observable.resetTransferIn();
        //        ClientUtil.enableDisable(panTransferInDetails, false);
        btnTransBranchCodeHelp.setEnabled(false);
        btnOriginalAccountNumberHelp.setEnabled(false);
        observable.ttNotifyObservers();
    }    private void resetNominee() {
        nomineeUi.resetNomineeData();
        nomineeUi.resetTable();
        nomineeUi.resetNomineeTab();
        nomineeUi.setBtnEnableDisable(false);
        observable.setChkNomineeDetails(false);
        chkNomineeDetails.setSelected(observable.getChkNomineeDetails());
        ClientUtil.enableDisable(nomineeUi, false);
    }
    private void chkNomineeDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNomineeDetailsActionPerformed
        //--- if Nominee details is selected, enable the NEW button
        if (chkNomineeDetails.isSelected() == true) {
            //            tabTermDeposit.add(nomineeUi);
            tabTermDeposit.add(nomineeUi, "Nominee");
            tabTermDeposit.resetVisits();
            ClientUtil.enableDisable(nomineeUi, true);
            nomineeUi.resetNomineeTab();
            nomineeUi.enableDisableNominee_SaveDelete();
//            nomineeUi.setStatusAsMajor();
            nomineeUi.setMainCustomerId(txtCustomerId.getText());
            nomineeUi.setCustomerList(getCustomerList());
        } else if (chkNomineeDetails.isSelected() == false) {
            tabTermDeposit.remove(nomineeUi);
            tabTermDeposit.resetVisits();
        } else if ((chkNomineeDetails.isSelected() == false) && (nomineeUi.getTblRowCount() > 0)) {
            //--- if Nominee details is unchecked, then display the warning message
            int reset = CommonMethods.showDialogYesNo(objTermDepositRB.getString("dialogForNomDet"));
            //--- if YES, reset the Nominee details
            if (reset == yes) {
                resetNominee();
            } else if (reset == no) {
                //--- if NO, don't reset the Nominee details
                observable.setChkNomineeDetails(true);
                chkNomineeDetails.setSelected(observable.getChkNomineeDetails());
            }
        } else if ((chkNomineeDetails.isSelected() == false) && (nomineeUi.getTblRowCount() == 0)) {
            resetNominee();
        }
    }//GEN-LAST:event_chkNomineeDetailsActionPerformed
                                                        private void chkAuthorizedSignatoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAuthorizedSignatoryActionPerformed
                                                            //--- If AuthSign is selected, enable the NEW Button.
                                                            if (chkAuthorizedSignatory.isSelected() == true) {
                                                                //                                        tabTermDeposit.add(authSignUI);
                                                                tabTermDeposit.add(authSignUI, "Authorized Signatory");
                                                                tabTermDeposit.resetVisits();
                                                                ClientUtil.enableDisable(authSignUI, true);
                                                                authSignUI.getAuthorizedSignatoryOB().resetAllFieldsInAuthTab();
                                                                authSignUI.setAuthEnableDisable(false);
                                                                authSignUI.setAuthOnlyNewBtnEnable();
                                                                authSignUI.setAllAuthInstEnableDisable(false);
                                                                authSignUI.setAuthInstOnlyNewBtnEnable();
                                                            } else if (chkAuthorizedSignatory.isSelected() == false) {
                                                                tabTermDeposit.remove(authSignUI);
                                                                tabTermDeposit.resetVisits();
                                                            } else if ((chkAuthorizedSignatory.isSelected() == false) && (authSignUI.getTblRowCount() > 0)) {
                                                                //--- If AuthSign checkbox is unchecked, show the warning message
                                                                int reset = CommonMethods.showDialogYesNo(objTermDepositRB.getString("dialogForAuthSign"));
                                                                //--- if YES reset the AuthSign details
                                                                if (reset == yes) {
                                                                    resetAuthSignDetails();
                                                                } else if (reset == no) { //--- if NO, don't reset the AuthSign Data
                                                                    observable.setChkAuthorizedSignatory(true);
                                                                    chkAuthorizedSignatory.setSelected(observable.getChkAuthorizedSignatory());
                                                                }
                                                            } else if ((chkAuthorizedSignatory.isSelected() == false) && (authSignUI.getTblRowCount() == 0)) {
                                                                resetAuthSignDetails();
                                                            }

    }//GEN-LAST:event_chkAuthorizedSignatoryActionPerformed

    private void resetAuthSignDetails() {
        authSignUI.resetDisableNoOfAuthSign(false);
        authSignUI.resetAllFieldsInAuthTab();
        authSignUI.setAuthTabBtnEnableDisable(false);
        authSignUI.setAuthInstAllBtnsEnableDisable(false);
        observable.setChkAuthorizedSignatory(false);
        chkAuthorizedSignatory.setSelected(false);
        ClientUtil.enableDisable(authSignUI, false);
    }

    //    private void resetAuthSignDetails(){
    //        authSignUI.resetDisableNoOfAuthSign(false);
    //        authSignUI.resetAllFieldsInAuthTab();
    //        authSignUI.setAuthTabBtnEnableDisable(false);
    //        authSignUI.setAuthInstAllBtnsEnableDisable(false);
    //        observable.setChkAuthorizedSignatory(false);
    //        chkAuthorizedSignatory.setSelected(false);
    //        ClientUtil.enableDisable(authSignUI, false);
    //    }
    //    private void resetPoA(){
    //        poaUI.getPowerOfAttorneyOB().resetAllFieldsInPoA();
    //        poaUI.setPoAToolBtnsEnableDisable(false);
    //        observable.setChkPowerOfAttorney(false);
    //        chkPowerOfAttorney.setSelected(false);
    //        ClientUtil.enableDisable(poaUI, false);
    //    }
    private void setDepSubNoNewAndTblPress() {
        updateOBDepSubNo();
        //        setDepSubNoFields(true);
        setBtnDepSubNo(false);
//                                                            btnDepSubNoAccSave.setEnabled(true);

    }

    //--- UpdateOB Method for DepositSubNoAcccInfo Tab
    private void updateOBDepSubNo() {
        observable.setTdtDateOfDeposit(tdtDateOfDeposit.getDateValue());
        observable.setTxtRateOfInterest(txtRateOfInterest.getText());
        observable.setTxtMaturityAmount(txtMaturityAmount.getText());
        observable.setTxtTotalInterestAmount(txtTotalInterestAmount.getText());
        observable.setTxtPeriodicInterestAmount(txtPeriodicInterestAmount.getText());
        observable.setTdtMaturityDate(tdtMaturityDate.getDateValue());
        observable.setTxtPeriodOfDeposit_Years(txtPeriodOfDeposit_Years.getText());
        observable.setTxtPeriodOfDeposit_Months(txtPeriodOfDeposit_Months.getText());
        observable.setTxtPeriodOfDeposit_Days(txtPeriodOfDeposit_Days.getText());
        observable.setTxtPeriodOfDeposit_Weeks(txtWeek.getText());
        observable.setTxtDepositAmount(txtDepositAmount.getText());
        observable.setCboInterestPaymentMode(CommonUtil.convertObjToStr(cboInterestPaymentMode.getSelectedItem()));
        observable.setCboInterestPaymentFrequency(CommonUtil.convertObjToStr(cboInterestPaymentFrequency.getSelectedItem()));
        observable.setCboCalenderFreq(CommonUtil.convertObjToStr(cboCalenderFreqDay.getSelectedItem()));
        observable.setCboProdId(CommonUtil.convertObjToStr(cboProdId.getSelectedItem()));
        observable.setCboProdType(CommonUtil.convertObjToStr(cboProdType.getSelectedItem()));
        observable.setCustomerIdCr(CommonUtil.convertObjToStr(txtCustomerIdCr.getText()));
        observable.setCustomerNameCrValue(CommonUtil.convertObjToStr(lblCustomerNameCrValue.getText()));
        observable.setCalenderFreqDate(tdtCalenderFreqDate.getDateValue());
    }

    private void setDepSubNoFields(boolean val) {
        ClientUtil.enableDisable(panDepositDetails, val);
    }
    private void btnOriginalAccountNumberHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOriginalAccountNumberHelpActionPerformed
        callView("ACCOUNT NUMBER");
    }//GEN-LAST:event_btnOriginalAccountNumberHelpActionPerformed
    private void renewalupdateOBDepSubNo() {
        observable.setRenewaltdtDateOfDeposit(tdtRenewalDateOfDeposit.getDateValue());
        observable.setRenewaltxtPeriodOfDeposit_Years(txtRenewalPeriodOfDeposit_Years.getText());
        observable.setRenewaltxtPeriodOfDeposit_Months(txtRenewalPeriodOfDeposit_Months.getText());
        observable.setRenewaltxtPeriodOfDeposit_Days(txtRenewalPeriodOfDeposit_Days.getText());
        observable.setRenewaltdtMaturityDate(tdtRenewalMaturityDate.getDateValue());
        observable.setRenewaltxtDepositAmount(txtRenewalDepositAmount.getText());
        observable.setRenewalValDepositSubNo(lblRenewalValDepositSubNo.getText());
        observable.setRenewaltxtRateOfInterest(txtRenewalRateOfInterest.getText());
        observable.setRenewaltxtMaturityAmount(txtRenewalMaturityAmount.getText());
        observable.setRenewaltxtTotalInterestAmount(txtRenewalTotalInterestAmount.getText());
        observable.setRenewaltxtPeriodicInterestAmount(txtRenewalPeriodicInterestAmount.getText());
        observable.setCboRenewalInterestPaymentMode(CommonUtil.convertObjToStr(cboRenewalInterestPaymentMode.getSelectedItem()));
        if (observable.getActionType() != ClientConstants.ACTIONTYPE_AUTHORIZE && observable.getActionType() != ClientConstants.ACTIONTYPE_REJECT) {
            if (cboRenewalDepositProdId.getSelectedItem() != null) {
                observable.setCboRenewalDepositProdId(CommonUtil.convertObjToStr(cboRenewalDepositProdId.getSelectedItem()));
            }
            if (cboRenewalDepositCategory.getSelectedItem() != null) {
                observable.setCboRenewalDepositCategory(CommonUtil.convertObjToStr(cboRenewalDepositCategory.getSelectedItem()));
            }
            if (cboRenewalInterestPaymentFrequency.getSelectedItem() != null) {
                observable.setCboRenewalInterestPaymentFrequency(CommonUtil.convertObjToStr(cboRenewalInterestPaymentFrequency.getSelectedItem()));
            }
            observable.setCboRenewalInterestPaymentMode(CommonUtil.convertObjToStr(cboRenewalInterestPaymentMode.getSelectedItem()));
            observable.setCboRenewalProdType(CommonUtil.convertObjToStr(cboRenewalProdType.getSelectedItem()));
            observable.setCboRenewalProdId(CommonUtil.convertObjToStr(cboRenewalProdId.getSelectedItem()));
            observable.setRenewalcustomerIdCr(CommonUtil.convertObjToStr(txtRenewalCustomerIdCr.getText()));
            observable.setRenewalcustomerNameCrValue(CommonUtil.convertObjToStr(lblRenewalCustomerNameCrValue.getText()));
            if (cboRenewalCalenderFreqDay.getSelectedItem() != null) {
                observable.setCboRenewalCalenderFreqDay(CommonUtil.convertObjToStr(cboRenewalCalenderFreqDay.getSelectedItem()));
            }
        }

        observable.setCboRenewalDepTransMode(CommonUtil.convertObjToStr(cboRenewalDepTransMode.getSelectedItem()));
        observable.setCboRenewalDepTransProdType(CommonUtil.convertObjToStr(cboRenewalDepTransProdType.getSelectedItem()));
        observable.setRenewalcustomerIdCrDep(txtRenewalDepCustomerIdCr.getText());
        observable.setRenewalcustomerNameCrValueDep(lblRenewalCustNameValue.getText());

        observable.setCboRenewalInterestTransMode(CommonUtil.convertObjToStr(cboRenewalInterestTransMode.getSelectedItem()));
        observable.setCboRenewalInterestTransProdType(CommonUtil.convertObjToStr(cboRenewalInterestTransProdType.getSelectedItem()));
        observable.setCboRenewalInterestTransProdId(CommonUtil.convertObjToStr(cboRenewalInterestTransProdId.getSelectedItem()));
        observable.setRenewalcustomerIdCrInt(txtRenewalIntCustomerIdCr.getText());
        observable.setRenewalcustomerNameCrValueInt(lblRenewalInterestCustNameVal.getText());
        observable.setTxtRenewalPrintedOption(txtRenewalPrintedOption.getText());
        observable.setTxtRenewalDepTransAmtValue(txtRenewalDepTransAmtValue.getText());
        observable.setTxtRenewalDepTransTokenNo(txtRenewalDepTransTokenNo.getText());
        observable.setTxtRenewalIntAmtValue(txtRenewalIntAmtValue.getText());
        observable.setTxtRenewalIntTokenNoVal(txtRenewalIntTokenNoVal.getText());

        observable.setRenewalDepDate(lblRenewalValPeriodRun.getText());
        observable.setRenewalBalIntAmtVal(lblRenewalBalIntAmtVal.getText());
        observable.setRenewalValPeriodRun(lblRenewalSBPeriodVal.getText());
        observable.setRenewalSBIntAmtVal(CommonUtil.convertObjToStr(lblRenewalSBIntAmtVal.getText()));
        observable.setRenewalInterestRepayAmtVal(lblRenewalInterestRepayAmtVal.getText());
        observable.setPostageRenewAmt(txtRenewPostageAmt.getText());
    }
    private void mitCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitCloseActionPerformed
        btnCloseActionPerformed(evt);
    }//GEN-LAST:event_mitCloseActionPerformed
    private void renewaldepSubNoSave() {
        updateOBFields();
        observable.populateRenewalDepSubNoTbl();
        if (observable.depSubNoK == ok || observable.depSubNoK == cancel) {
            observable.resetRenewalDepSubNo();
            setDepSubNoFields(false);
            setBtnDepSubNo(false);
            observable.ttNotifyObservers();
        } else {
            observable.ttNotifyObservers();
        }
    }
    private void mitCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitCancelActionPerformed
        btnCancelActionPerformed(evt);
    }//GEN-LAST:event_mitCancelActionPerformed
    private void extensionupdateOBDepSubNo() {
        observable.setExtensiontdtDateOfDeposit(tdtExtensionDateOfDeposit.getDateValue());
        observable.setExtensiontxtPeriodOfDeposit_Years(txtExtensionPeriodOfDeposit_Years.getText());
        observable.setExtensiontxtPeriodOfDeposit_Months(txtExtensionPeriodOfDeposit_Months.getText());
        observable.setExtensiontxtPeriodOfDeposit_Days(txtExtensionPeriodOfDeposit_Days.getText());
        observable.setExtensiontdtMaturityDate(tdtExtensionMaturityDate.getDateValue());
        observable.setExtensiontxtDepositAmount(txtExtensionDepositAmount.getText());
        observable.setExtensiontxtRateOfInterest(txtExtensionRateOfInterest.getText());
        observable.setExtensiontxtMaturityAmount(txtExtensionMaturityAmount.getText());
        observable.setExtensiontxtTotalInterestAmount(txtExtensionTotalInterestAmount.getText());
        observable.setExtensiontxtPeriodicInterestAmount(txtExtensionPeriodicInterestAmount.getText());
        //        observable.setCboExtensionPaymentMode(CommonUtil.convertObjToStr(cboExtensionInterestPaymentMode.getSelectedItem()));

        if (cboExtensionDepositProdId.getSelectedItem() != null) {
            observable.setCboExtensionDepositProdId(CommonUtil.convertObjToStr(cboExtensionDepositProdId.getSelectedItem()));
        }
        if (cboExtensionDepositCategory.getSelectedItem() != null) {
            observable.setCboExtensionDepositCategory(CommonUtil.convertObjToStr(cboExtensionDepositCategory.getSelectedItem()));
        }
        if (cboExtensionInterestPaymentFrequency.getSelectedItem() != null) {
            observable.setCboExtensionPaymentFrequency(CommonUtil.convertObjToStr(cboExtensionInterestPaymentFrequency.getSelectedItem()));
        }
        if (cboExtensionInterestPaymentMode.getSelectedItem() != null) {
            observable.setCboExtensionPaymentMode(CommonUtil.convertObjToStr(cboExtensionInterestPaymentMode.getSelectedItem()));
        }
        if (cboExtensionProdType.getSelectedItem() != null) {
            observable.setCboExtensionPaymentProdType(CommonUtil.convertObjToStr(cboExtensionProdType.getSelectedItem()));
        }
        if (cboExtensionProdId.getSelectedItem() != null) {
            observable.setCboExtensionPaymentProdId(CommonUtil.convertObjToStr(cboExtensionProdId.getSelectedItem()));
        }
        observable.setExtensioncustomerNameCrValueInt(CommonUtil.convertObjToStr(lblExtensionCustomerNameCrValue.getText()));
        if (cboExtensionCalenderFreqDay.getSelectedItem() != null) {
            observable.setCboExtensionCalenderFreqDay(CommonUtil.convertObjToStr(cboExtensionCalenderFreqDay.getSelectedItem()));
        }
        if (cboExtensionTransMode.getSelectedItem() != null) {
            observable.setCboExtensionTransMode(CommonUtil.convertObjToStr(cboExtensionTransMode.getSelectedItem()));
        }
        if (cboExtensionTransProdType.getSelectedItem() != null) {
            observable.setCboExtensionTransProdType(CommonUtil.convertObjToStr(cboExtensionTransProdType.getSelectedItem()));
        }
        if (cboExtensionTransProdId.getSelectedItem() != null) {
            observable.setCboExtensionTransProdId(CommonUtil.convertObjToStr(cboExtensionTransProdId.getSelectedItem()));
        }
        observable.setExtensioncustomerIdCrDep(txtExtensionTransCustomerIdCr.getText());
        observable.setExtensionValDepositSubNo(lblExtensionValDepositSubNo.getText());
        observable.setExtensioncustomerIdCrInt(txtExtensionCustomerIdCr.getText());
        observable.setExtensioncustomerNameCrValueDep(lblExtensionTransCustNameVal.getText());
        observable.setTxtExtensionPrintedOption(txtExtensionPrintedOption.getText());
        observable.setTxtExtensionTransAmtValue(txtExtensionDepTransAmtValue.getText());
        observable.setTxtExtensionTransTokenNo(txtExtensionTransTokenNo.getText());
        observable.setTxtExtensionIntAmtValue(txtExtensionTransAmtValue.getText());
        observable.setExtensionDepDate(lblExtensionDepositDtVal.getText());
    }
    private void mitSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitSaveActionPerformed
        btnSaveActionPerformed(evt);
    }//GEN-LAST:event_mitSaveActionPerformed

    private void mitDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitDeleteActionPerformed
        btnDeleteActionPerformed(evt);
    }//GEN-LAST:event_mitDeleteActionPerformed

    private void mitEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitEditActionPerformed
        btnEditActionPerformed(evt);
    }//GEN-LAST:event_mitEditActionPerformed
    //    private void renewalVisible(boolean Val){
    //        lblRenewalNoticeNew.setVisible(Val);
    //        lblAutoRenewalNew.setVisible(Val);
    //        lblRenewalWithIntNew.setVisible(Val);

    //        lblMemberTypeRenewalNew.setVisible(Val);
    //        lblTaxDeclareRenewalNew.setVisible(Val);
    //        lblRenewalNoticeNewVal.setVisible(Val);
    //        lblAutoRenewalNewVal.setVisible(Val);
    //        lblRenewalWithIntNewVal.setVisible(Val);
    //        lblMemberTypeRenewalNewVal.setVisible(Val);
    //        lblTaxDeclareRenewalNewVal.setVisible(Val);
    //    }
    private void mitNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitNewActionPerformed
        btnNewActionPerformed(evt);
    }//GEN-LAST:event_mitNewActionPerformed

    private void updateOBDepositNo() {
        observable.setTxtDepsoitNo(CommonUtil.convertObjToStr(txtDepsoitNo.getText()));
    }

    private void updateDepositNoAndDepositSubNo() {
        lblValDepositSubNo.setText(observable.getLblValDepositSubNo());
        txtDepsoitNo.setText(observable.getTxtDepsoitNo());
    }

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        //        closeOperation();
        //        btnCancelActionPerformed(null);
        cifClosingAlert();
    }//GEN-LAST:event_btnCloseActionPerformed
    private void closeOperation() {
        viewType = ClientConstants.VIEW_TYPE_CANCEL;
        cancelOperation();
        this.dispose();
    }

    private void updateOBProdId() {
        observable.setCboProductId(CommonUtil.convertObjToStr(cboProductId.getSelectedItem()));
        //        observable.setCboProdId(CommonUtil.convertObjToStr(cboProdId.getSelectedItem()));
        //        observable.setCboProdType(CommonUtil.convertObjToStr(cboProdType.getSelectedItem()));
    }

    private void updateProdIdAndAcctHead() {
        //        cboProductId.setSelectedItem(observable.getCboProductId());
//        lblValAccountHead.setText(observable.getLblValAccountHead());
        lblProductDescription.setText(observable.getLblProductDescription());
    }

    private void cboProductIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProductIdActionPerformed
        
         
        if(cboProductId.getSelectedIndex() > 0){
         HashMap checkMap = new HashMap();
            checkMap.put("BRANCH_ID", TrueTransactMain.BRANCH_ID);
            checkMap.put("PROD_ID", (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
            List actList = (List) (ClientUtil.executeQuery("getAccountMaintenanceCount", checkMap));
            if (actList != null && actList.size() > 0) {
                checkMap = (HashMap) actList.get(0);
                int cnt = CommonUtil.convertObjToInt(checkMap.get("CNT"));
                if (cnt == 0) {
                    ClientUtil.displayAlert("Branch Account Number Settings Not Done. Please Check !!!");
                    btnCancelActionPerformed(null);
                }
            }
        }
        
        
        List chargeList = null;
        HashMap whereMap = new HashMap();
        whereMap.put("BRANCH_ID", TrueTransactMain.BRANCH_ID);
        whereMap.put("PRODUCT_ID", (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
        chargeList = (List) (ClientUtil.executeQuery("getSelectNextAccNo", whereMap));
        if (chargeList != null && chargeList.size() > 0) {
            String accountClosingCharge = CommonUtil.convertObjToStr((chargeList.get(0)));
            txtNextAccNo.setText(String.valueOf(accountClosingCharge));
        }
        chargeList = null;
        cboProdIdChanged();
        //        newDepositDetails();
        //        if(viewType==ClientConstants.VIEW_TYPE_RENEW)
        //            renewalProdChange();
                    HashMap dataMap=new HashMap();
                    dataMap.put("PROD_ID",observable.getCbmProductId().getKeyForSelected());
                    List periodList=ClientUtil.executeQuery("getIntRoundAtIntApplication", dataMap);
                    if(periodList!=null && periodList.size()>0){
                        HashMap periodMap=(HashMap)periodList.get(0);
                        if(periodMap.containsKey("INT_ROUND_AT_INTAPPL")){
                            depInt="Y";
                        }
                    }                    
    }//GEN-LAST:event_cboProductIdActionPerformed
    //--- OnChange of ProdId, action performed.
//    used instead of the new sub deposit details button

    private void newDepositDetails() {
        updateOBFields();
        if (txtCustomerId.getText().trim().length() > 0) {
            if (rdoOpeningMode_Multiple.isSelected() == true ) {
                if ((cboProductId.getSelectedItem() != null) && (!cboProductId.getSelectedItem().equals(""))) {
                    observable.depSubNoStatus = CommonConstants.STATUS_CREATED;
                    observable.depSubNoMode = 0;
                    setDepSubNoNewAndTblPress();
                    ClientUtil.enableDisable(panDepositDetails, true);
                    observable.resetDepSubNo();
                    observable.setLblValDepositSubNo(String.valueOf(observable.depSubNoCount + 1));
                    tdtMaturityDate.setEnabled(false);
                    retTxtBox = enableDisableDays();
                    observable.setTdtDateOfDeposit(DateUtil.getStringDate((Date) currDt.clone()));
                    tdtDateOfDeposit.setDateValue(observable.getTdtDateOfDeposit());
                    if (rdoOpeningMode_Multiple.isSelected() == true) {
                        tdtDateOfDeposit.setEnabled(false);
                    } else {
                        //                        tdtDateOfDeposit.setEnabled(true);
                    }
                    observable.ttNotifyObservers();
                    enableDisableDepSubAccordProd();
                    if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                        cboInterestPaymentFrequency.setSelectedItem("");
                        cboInterestPaymentFrequency.setEnabled(true);
                        cboInterestPaymentMode.setEnabled(true);
                    } else {
                        cboInterestPaymentFrequency.setSelectedItem("Date of Maturity");
                        cboInterestPaymentFrequency.setEnabled(false);
                        cboInterestPaymentMode.setEnabled(false);
                    }
                } else {
                    int klop = CommonMethods.showDialogOk(objTermDepositRB.getString("selectProdId"));
                    cboProductId.requestFocus(true);
                }
            } else {
                CommonMethods.showDialogOk(objTermDepositRB.getString("selectOpeningMode"));
            }
        } else {
//            CommonMethods.showDialogOk(objTermDepositRB.getString("selectCustomer"));
        }
//        
//        observable.getCbmSettlementMode().setKeyForSelected("0");
        observable.getCbmInterestPaymentMode().setKeyForSelected("CASH");
    }

    private void cboProdIdChanged() {
        strProdId = observable.getCboProductId();
        strAccntHead = observable.getLblValAccountHead();
        updateOBProdId();
        //--- If an item is selected from cboProductId set the Account Head appropriate
        //--- to that Product Id else set it to nothing
        if (observable.getCboProductId().length() > 0) {
            restoreEnableDisableFltPt();
            if (selectedDepSubNoRow == false && viewType != ClientConstants.VIEW_TYPE_RENEW) {
                //resetDepSubNoProductIDChanged();
            }
            if (observable.getActionType() != ClientConstants.ACTIONTYPE_EDIT) {
                resetTranferInProductID();
            }
            updateOBFields();
            depProdDetails = observable.getAcctHeadForProd();
            updateProdIdAndAcctHead();
            observable.getProductBehaveLike(null);
            String prodType = ((ComboBoxModel) cboProdType.getModel()).getKeyForSelected().toString();
            HashMap schemeMap = new HashMap();
            schemeMap.put("PROD_ID", ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
            List lstScheme = ClientUtil.executeQuery("getSchemeIntroDate", schemeMap);
            if (lstScheme != null && lstScheme.size() > 0) {
                schemeMap = (HashMap) lstScheme.get(0);
                Date schemeDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(schemeMap.get("SCHEME_INTRO_DT")));
                Date closedDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(schemeMap.get("SCHEME_CLOSING_DT")));
                schemeIntroDt = (Date) currDt.clone();
                schemeCloseDt = (Date) currDt.clone();
                if (closedDt != null && closedDt.getDate() > 0) {
                    schemeCloseDt.setDate(closedDt.getDate());
                    schemeCloseDt.setMonth(closedDt.getMonth());
                    schemeCloseDt.setYear(closedDt.getYear());
                    Date curr_Dt = (Date) currDt.clone();
                    if ((viewType.equals("CUSTOMER ID") || viewType == ClientConstants.VIEW_TYPE_NEW) && (DateUtil.dateDiff(schemeCloseDt, curr_Dt) > 0)) {
                        ClientUtil.showAlertWindow("This Product is already Closed on " + " "
                                + DateUtil.getStringDate(schemeCloseDt) + " " + "Please Change the ProductId...");
                        return;
                    }
                }
            }


            //system.out.println("observable.productBehavesLike" + observable.productBehavesLike);
            //--- If Product Behaves Like Daily, then enable btnAgentId
            rdoDeathClaim_No.setSelected(true);
            //            if(observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr)){
            //                txtPeriodOfDeposit_Days.setEnabled(false);
            //            }else{
            //                txtPeriodOfDeposit_Days.setEnabled(true);
            //            }
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                panInterestCredit.setVisible(true);
                panDepositDt.setVisible(true);
                lblCalenderFreq.setVisible(true);
                panCalenderFreq.setVisible(true);
                tdtCalenderFreqDate.setVisible(false);
                txtAgentId.setEnabled(false);
                btnAgentIdFileOpen.setEnabled(false);
                cboInterestPaymentFrequency.setSelectedItem("");
            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                panInterestCredit.setVisible(false);
                panDepositDt.setVisible(false);
                lblCalenderFreq.setVisible(false);
                panCalenderFreq.setVisible(false);
                tdtCalenderFreqDate.setVisible(false);
                txtAgentId.setEnabled(true);
                btnAgentIdFileOpen.setEnabled(true);
                HashMap dailyProdID = new HashMap();
                dailyProdID.put("PID", (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
                List dailyFrequency = ClientUtil.executeQuery("getDailyDepositFrequency", dailyProdID);
                //system.out.println("dailyFrequencydailyFrequency" + dailyFrequency);
                if (!(dailyFrequency.equals(null))) {
                    HashMap dailyFreq = new HashMap();
                    dailyFreq = (HashMap) dailyFrequency.get(0);
                    String daily = dailyFreq.get("DEPOSIT_FREQ").toString();
                    int freq = Integer.parseInt(daily);
                    //system.out.println("Frequencyyyyy" + freq);
                    if (freq == 7) {
                        panWeek.setVisible(true);
                        panPeriodOfDeposit.setVisible(false);
                        panWeek.setEnabled(true);
                        txtWeek.setEnabled(true);
                        //system.out.println("setVisible" + panWeek.isVisible() + " " + panPeriodOfDeposit.isVisible());


                    } else {
                        panWeek.setVisible(false);
                        //   panPeriodOfDeposit.setVisible(false);
                        panWeek.setEnabled(false);
                        txtWeek.setEnabled(false);
                        //system.out.println("setVisible" + panWeek.isVisible() + " " + panPeriodOfDeposit.isVisible());
                    }

                }

            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFloating)) {
                panDepositDt.setVisible(true);
                panInterestCredit.setVisible(false);
                lblCalenderFreq.setVisible(false);
                panCalenderFreq.setVisible(false);
                tdtCalenderFreqDate.setVisible(false);
                txtAgentId.setEnabled(false);
                btnAgentIdFileOpen.setEnabled(false);
                cboInterestPaymentFrequency.setSelectedItem("Date of Maturity");
                enableDisableForFloatingPoint();
            } else {
                if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                    enableDisableForCummulative();
                }
                panDepositDt.setVisible(true);
                panInterestCredit.setVisible(false);
                lblCalenderFreq.setVisible(false);
                panCalenderFreq.setVisible(false);
                tdtCalenderFreqDate.setVisible(false);
                txtAgentId.setEnabled(false);
                btnAgentIdFileOpen.setEnabled(false);
                cboInterestPaymentFrequency.setSelectedItem("Date of Maturity");
            }
            enablingDisabling();
            if (observable.getRdoCalenderFreq_Yes() == true) {
                rdoCalender_Freq_Yes.setSelected(true);
            } else {
                rdoCalender_Freq_No.setSelected(true);
            }

            //            if(tblDepSubNoAccInfo.getRowCount() > 0 && viewType != ClientConstants.VIEW_TYPE_RENEW)
            //                cboProductId.setEnabled(false);
            //--- If Product Behaves Like RD, then enableDisable the DepositSubInfo fields

            if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                tdtDateOfDeposit.setEnabled(true);
            } else {
                tdtDateOfDeposit.setEnabled(false);
            }
        }
        //    enableDisableDepSubAccordProd();        
        updateOBFields();
    }

    private void enableDisableForCummulative() {
        //system.out.println("@#$@#$@#productBehavesLike:" + observable.productBehavesLike);
        String prodType = ((ComboBoxModel) cboProdType.getModel()).getKeyForSelected().toString();
        HashMap schemeMap = new HashMap();
        schemeMap.put("PROD_ID", ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
        List cummulativeRateLst = ClientUtil.executeQuery("getDepProdDetails", schemeMap);
        if (cummulativeRateLst != null && cummulativeRateLst.size() > 0) {
            HashMap CummRtMap = new HashMap();
            CummRtMap = (HashMap) cummulativeRateLst.get(0);
            //system.out.println("#$%#$%$#5CummRtMap:" + CummRtMap);
            if (CummRtMap.containsKey("DOUBLING_SCHEME")) {
                if (CommonUtil.convertObjToStr(CummRtMap.get("DOUBLING_SCHEME")).equals("Y")) {
                    doublingFlag = true;
                    if (CummRtMap.containsKey("DOUBLING_COUNT")) {
                        doublingCount = CommonUtil.convertObjToInt(CummRtMap.get("DOUBLING_COUNT"));
                    } else {
                        doublingCount = 2;
                    }
                    ClientUtil.clearAll(panPeriodOfDeposit);
                    ClientUtil.enableDisable(panPeriodOfDeposit, false);
                    if (CommonUtil.convertObjToInt(CummRtMap.get("MIN_DEPOSIT_PERIOD")) > 0) {
                        int days = CommonUtil.convertObjToInt(CummRtMap.get("MIN_DEPOSIT_PERIOD"));
                        setPeriodForCummulative(days);
                        calculateMatDate();
                    }
                } else {
                    ClientUtil.enableDisable(panPeriodOfDeposit, true);
                    ClientUtil.clearAll(panPeriodOfDeposit);
                    doublingFlag = false;
                    doublingCount =2;
                }
            }
        }
    }

    private void setPeriodForCummulative(int days) {
        //system.out.println("$%#$%#$%#$%days:" + days);
        int remnDays = 0;
        int remnMonths = 0;
        int finalYears = 0;
        int finalMonths = 0;
        int finalDays = 0;
        if ((days >= 365) && (days % 365 == 0)) {
            days = days / 365;
            finalYears = days;
        } else if ((days >= 30) && (days % 30 == 0)) {
            days = days / 30;
            finalMonths = days;
        } else if ((days >= 1) && (days % 1 == 0)) {
            days = days;
            finalDays = days;
        } else {
            days = 0;
        }
        //system.out.println("#$%#$%#$%finalDays:" + finalDays);
        //system.out.println("#$%#$%#$%finalMonths:" + finalMonths);
        //system.out.println("#$%#$%#$%finalYears:" + finalYears);
        txtPeriodOfDeposit_Years.setText(String.valueOf(finalYears));
        txtPeriodOfDeposit_Months.setText(String.valueOf(finalMonths));
        txtPeriodOfDeposit_Days.setText(String.valueOf(finalDays));

    }

    private void enableDisableForFloatingPoint() {
        //system.out.println("@#$@#$@#$insidebservable.productBehavesLike:" + observable.productBehavesLike);
        String prodType = ((ComboBoxModel) cboProdType.getModel()).getKeyForSelected().toString();
        HashMap schemeMap = new HashMap();
        schemeMap.put("PROD_ID", ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
        List floatingRateLst = ClientUtil.executeQuery("getDepProdDetails", schemeMap);
        if (floatingRateLst != null && floatingRateLst.size() > 0) {
            HashMap floatRtMap = new HashMap();
            floatRtMap = (HashMap) floatingRateLst.get(0);
            //system.out.println("#$%#$%$#5floatRtMap:" + floatRtMap);
            if (floatRtMap.containsKey("FLOATING_WITH_PERIOD")) {
                if (CommonUtil.convertObjToStr(floatRtMap.get("FLOATING_WITH_PERIOD")).equals("N")) {
                    flPtWithoutPeriod = true;
                    panPeriodOfDeposit.setVisible(false);
                    lblPeriodOfDeposit.setVisible(false);
                    txtTotalInterestAmount.setVisible(false);
                    lblTotalInterestAmount.setVisible(false);
                    tdtMaturityDate.setVisible(false);
                    lblMaturityDate.setVisible(false);
                    txtRateOfInterest.setVisible(false);
                    lblRateOfInterest.setVisible(false);

                } else {
                    flPtWithoutPeriod = false;
                    panPeriodOfDeposit.setVisible(true);
                    lblPeriodOfDeposit.setVisible(true);
                    txtTotalInterestAmount.setVisible(true);
                    lblTotalInterestAmount.setVisible(true);
                    tdtMaturityDate.setVisible(true);
                    lblMaturityDate.setVisible(true);
                    txtRateOfInterest.setVisible(true);
                    lblRateOfInterest.setVisible(true);
                }
            }
            lblPeriodicInterestAmount.setVisible(false);
            txtPeriodicInterestAmount.setVisible(false);
        }
    }

    private void restoreEnableDisableFltPt() {
        panPeriodOfDeposit.setVisible(true);
        lblPeriodOfDeposit.setVisible(true);
        txtTotalInterestAmount.setVisible(true);
        lblTotalInterestAmount.setVisible(true);
        lblPeriodicInterestAmount.setVisible(true);
        txtPeriodicInterestAmount.setVisible(true);
        tdtMaturityDate.setVisible(true);
        lblMaturityDate.setVisible(true);
        txtRateOfInterest.setVisible(true);
        lblRateOfInterest.setVisible(true);
        flPtWithoutPeriod = false;
    }
    //--- In Renewal mode, on change of ProdID, the action performed.

    private void renewalProdChange() {
        String renewalprodId = ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected().toString();
        String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(renewalprodId));
        HashMap schemeMap = new HashMap();
        schemeMap.put("PROD_ID", ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected());
        List lstScheme = ClientUtil.executeQuery("getSchemeIntroDate", schemeMap);
        if (lstScheme != null && lstScheme.size() > 0) {
            schemeMap = (HashMap) lstScheme.get(0);
            Date schemeDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(schemeMap.get("SCHEME_INTRO_DT")));
            Date closedDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(schemeMap.get("SCHEME_CLOSING_DT")));
            schemeIntroDt = (Date) currDt.clone();
            schemeCloseDt = (Date) currDt.clone();
            if (closedDt != null && closedDt.getDate() > 0) {
                schemeCloseDt.setDate(closedDt.getDate());
                schemeCloseDt.setMonth(closedDt.getMonth());
                schemeCloseDt.setYear(closedDt.getYear());
                Date curr_Dt = (Date) currDt.clone();
                if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW && (DateUtil.dateDiff(schemeCloseDt, curr_Dt) > 0)) {
                    ClientUtil.showAlertWindow("This Product is already Closed on " + " "
                            + DateUtil.getStringDate(schemeCloseDt) + " " + "Please Change the ProductId...");
                    return;
                }
            }
        }
        if (strBehavesLike.equals("RECURRING")) {
            selectedDepSubNoRow = true;
            ClientUtil.showAlertWindow("Product cannot be renewed as Recurring...");
            return;
        } else if (strBehavesLike.equals("DAILY")) {
            selectedDepSubNoRow = true;
            ClientUtil.showAlertWindow("Product cannot be renewed as Daily...");
            return;
        }
        if (strBehavesLike.equals("FIXED")) {
            cboRenewalInterestPaymentFrequency.setSelectedItem("");
            panRenewalInterestCredit.setVisible(true);
            panRenewalDepositDt.setVisible(true);
            cboRenewalInterestPaymentFrequency.setEnabled(true);
            lblRenewalCalenderFreq.setVisible(true);
            panRenewalCalenderFreq.setVisible(true);
            tdtCalenderFreqDate.setVisible(false);
            rdoRenewalCalender_Freq_Yes.setVisible(true);
            rdoRenewalCalender_Freq_No.setVisible(true);
        } else if (strBehavesLike.equals("DAILY")) {
            panRenewalInterestCredit.setVisible(false);
            panRenewalDepositDt.setVisible(false);
            cboRenewalInterestPaymentFrequency.setEnabled(false);
            lblRenewalCalenderFreq.setVisible(false);
            panRenewalCalenderFreq.setVisible(false);
            tdtCalenderFreqDate.setVisible(false);
            rdoRenewalCalender_Freq_Yes.setVisible(false);
            rdoRenewalCalender_Freq_No.setVisible(false);
        } else {
            cboRenewalInterestPaymentFrequency.setSelectedItem("Date of Maturity");
            panRenewalDepositDt.setVisible(true);
            panRenewalInterestCredit.setVisible(false);
            lblRenewalCalenderFreq.setVisible(false);
            panRenewalCalenderFreq.setVisible(false);
            tdtCalenderFreqDate.setVisible(false);
            cboRenewalInterestPaymentFrequency.setEnabled(false);
            rdoRenewalCalender_Freq_Yes.setVisible(false);
            rdoRenewalCalender_Freq_No.setVisible(false);
        }
        txtRenewalPrintedOption.setEnabled(true);
        renewalDays = false;
        renewalMonths = false;
        renewalYears = false;
    }

    private void resetWhenNoProdIdSelected() {
        observable.setLblValAccountHead("");
        updateProdIdAndAcctHead();
    }

    private void depositRenewalCancel() {
        if (flag == true) {
            for (int i = 0; i < cashTransUI.length; i++) {
                if (cashTransUI[i] != null) {
                    cashTransUI[i].btnDepositCancel();
                }
            }
            for (int i = 0; i < transferUI.length; i++) {
                if (transferUI[i] != null) {
                    transferUI[i].btnDepositCancel();
                }
            }
            renewal = false;
        }
    }
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        //        depositRenewalCancel();
        panSalaryRecovery1.setVisible(false);
        lockScreenDeposits();
        //        if(renewal == false){
        cancelOperation();
        doWhenCancelled();
        //        }else{
        restoreEnableDisableFltPt();
        //        }
        viewType = ClientConstants.VIEW_TYPE_CANCEL;
        setModified(false);
        doublingFlag = false;
        doublingCount =2;
         if (fromNewAuthorizeUI) {
            this.dispose();
            fromNewAuthorizeUI = false;
            newauthorizeListUI.setFocusToTable();
        }
        if (fromAuthorizeUI) {
            this.dispose();
            fromAuthorizeUI = false;
            authorizeListUI.setFocusToTable();
        }
        if (fromCashierAuthorizeUI) {
            this.dispose();
            fromCashierAuthorizeUI = false;
            CashierauthorizeListUI.setFocusToTable();
        }
        if (fromManagerAuthorizeUI) {
            this.dispose();
            fromManagerAuthorizeUI = false;
            ManagerauthorizeListUI.setFocusToTable();
        }
        //        authSignUI.resetAllFieldsInAuthTab();
        //        poaUI.clearCboPoACust_ID();
        //        poaUI.resetPoAForm();
        //        authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
        //        poaUI.ttNotifyObservers();
        //        authSignUI.setAuthEnableDisable(false);
        //        authSignUI.setAuthTabBtnEnableDisable(falerse);
        //        authSignUI.setAllAuthInstEnableDisable(false);
        //        authSignUI.setAuthInstAllBtnsEnableDisable(false);
        //        poaUI.setAllPoAEnableDisable(false);
        //
        //        maxShare = 100;
        //        setModified(false);
        rdoSalaryRecovery_Yes.setSelected(false);
        rdoSalaryRecovery_No.setSelected(false);
        forLTDpurpose = "";
        count = 1;
        depositedAmt = 0.0;
        depositAmt = 0.0;
        depositCount = 0.0;
        txtAmount.setText("");
        ClientUtil.clearAll(this);
        transactionUI.setButtonEnableDisable(true);
        transactionUI.cancelAction(false);
        transactionUI.resetObjects();
        transactionUI.setCallingApplicantName("");
        transactionUI.setCallingAmount("");
        txtNextAccNo.setText("");
        panWeek.setVisible(false);
        panIntpayable.setVisible(false);
        chkRenewinterest.setSelected(false);

    }//GEN-LAST:event_btnCancelActionPerformed
    private void doWhenCancelled() {
        authSignUI.resetAllFieldsInAuthTab();
        poaUI.clearCboPoACust_ID();
        poaUI.resetPoAForm();
        authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
        poaUI.ttNotifyObservers();
        authSignUI.setAuthEnableDisable(false);
        authSignUI.setAuthTabBtnEnableDisable(false);
        authSignUI.setAllAuthInstEnableDisable(false);
        authSignUI.setAuthInstAllBtnsEnableDisable(false);
        poaUI.setAllPoAEnableDisable(false);
        observable.setActionType(ClientConstants.ACTIONTYPE_CANCEL);
        isFilled = false;
        maxShare = 100;
        setModified(false);
    }

    private void cancelOperation() {
        observable.resetForm();
        poaUI.getPowerOfAttorneyOB().resetAllFieldsInPoA();
        authSignUI.getAuthorizedSignatoryOB().resetAllFieldsInAuthTab();
        nomineeUi.resetTable();
        nomineeUi.resetNomineeData();
        nomineeUi.resetNomineeTab();
        nomineeUi.disableNewButton(false);
        resetPresentPosition();
        setLables();
        observable.ttNotifyObservers();
        btnCustomerIdFileOpen.setEnabled(false);
        btnAgentIdFileOpen.setEnabled(false);
        panInterestCredit.setVisible(true);
        panDepositDt.setVisible(true);
        setBtnDepSubNo(false);
        setBtnJointAccnt(false);
        btnTransBranchCodeHelp.setEnabled(false);
        btnOriginalAccountNumberHelp.setEnabled(false);
        ClientUtil.enableDisable(this, false);
        setButtonEnableDisable();
        depProdDetails = null;
        renewdDepNo = null;
        observable.makeToNull();
        already = false;
        exists = false;
        periodChange = false;
        renewalSubNo = false;
        addingSomeAmt = false;
        SomeAmt = false;
        renewSave = false;
        cboflag = false;
        renewalProd = false;
        //        renewalSameNo = false;
        addingAmt = false;
        cboProductId.setEnabled(false);
        renewalEnable = false;
        renewalMousePress = false;
        renewalMousePressScreen = false;
        renewaldownSave = false;
        selectedDepSubNoRow = false;
        selectedDepSubNoRowRenewal = false;
        withoutvisitingScreen = false;
        firstClickedRenewalScreen = false;
        renewalMouseClick = false;
        newModeMouseClick = false;
        alreadyOpenedRecords = false;
        cboConstitution.setSelectedItem("");
        cboAddressType.setSelectedItem("");
        observable.setSbIntAmount(0.0);
        rdoRenewalWithdrawing_Yes.setSelected(false);
        observable.setRdoRenewalWithdrawing_Yes(false);
        rdoRenewalWithdrawing_No.setSelected(false);
        observable.setRdoRenewalWithdrawing_No(false);
        rdoRenewalAdding_Yes.setSelected(false);
        observable.setRdoRenewalAdding_Yes(false);
        rdoRenewalAdding_No.setSelected(false);
        observable.setRdoRenewalAdding_No(false);
        observable.setLockStatus("");
        observable.setSalaryRecoveryYes(false);
        observable.setSalaryRecoveryNo(false);
        rdoRenewalWithdrawingInt_Yes.setSelected(false);
        observable.setRdoRenewalWithdrawingInt_Yes(false);
        rdoRenewalWithdrawingInt_No.setSelected(false);
        observable.setRdoRenewalWithdrawingInt_No(false);
        observable.makeToNull();
        lblExtensionTotalRepayAmtValue.setText("");
        txtEditDepositNo.setText("");
        txtEditDepositNo.setEditable(true);
        txtEditDepositNo.setEnabled(true);
        lblValRenewDep.setText("");
        btnCustomerIdFileOpen1.setEnabled(true);
        panRenewalInformation.setEnabled(false);
        lblRenewalWithdrawingDeposit.setVisible(true);
        rdoRenewalWithdrawing_Yes.setVisible(true);
        rdoRenewalWithdrawing_No.setVisible(true);
        btnPrint.setEnabled(true);
        cboRenewalInterestPaymentFrequency.setSelectedItem("");
        tabTermDeposit.remove(panRenewalInformation);
        tabTermDeposit.remove(panPresentPositionDetails);
        tabTermDeposit.remove(panStandingInstructionDetails);
        tabTermDeposit.remove(authSignUI);
        tabTermDeposit.remove(nomineeUi);
        tabTermDeposit.remove(poaUI);
        tabTermDeposit.remove(panTransferInDetails);
        tabTermDeposit.remove(panExtensionInformation);
        tabTermDeposit.remove(panTransaction);
        panExtensionInformation.setEnabled(false);
        panRenewalInformation.setEnabled(false);
        tabTermDeposit.resetVisits();
        btnDisplay.setEnabled(false);
        panJointAcctButton1.setVisible(false);
        lblExtensionWithdrawIntAmtValue1.setText("");
        lblExtensionWithdrawIntAmtValue2.setText("");
        lblExtensionWithdrawIntAmtValue.setText("");
        lblExtensionLeftOverIntAmtValue.setText("");
        lblExtensionTotalIntAmtValue.setText("");
        lblExtensionBalanceIntValue.setText("");
        rdoExtensionWithdrawing_Yes.setSelected(false);
        rdoExtensionWithdrawing_No.setSelected(false);
        lblExtensionTotalRepayAmtValue.setText("");
        rdoExtensionofPrematureClosure_Yes.setSelected(false);
        rdoExtensionofPrematureClosure_No.setSelected(false);
        txtExtensionDepTransAmtValue.setText("");
        rdoExtensionWithdrawing_No.setSelected(false);
        rdoExtensionWithdrawing_Yes.setSelected(false);
        rdoExtensionofPrematureClosure_Yes.setSelected(false);
        rdoExtensionofPrematureClosure_No.setSelected(false);
        rdoExtensionWithdrawingInt_Yes.setSelected(false);
        rdoExtensionWithdrawingInt_No.setSelected(false);
        txtExtensionTransAmtValue.setText("");


    }

    private void resetPresentPosition() {
        lblAvailableBalanceValue.setText("");
        lblClearBalanceValue.setText("");
        lblTotalBalanceValue.setText("");
        lblLastInterestPaidDateValue.setText("");
        lblTotalInterestValue.setText("");
        lblPaidnterestAmountValue.setText("");
        lblBalanceInterestAmountValue.setText("");
        //        lblDepositLienNoValue.setText("");
        //        lblLienAmountValue.setText("");
        //        lblLienDateValue.setText("");
        //        lblLoanNoValue.setText("");
        //        lblLoanBalanceValue.setText("");
        //        lblLoanTakenDateValue.setText("");
        lblTotalInterestPayableValue.setText("");
        lblAccHeadValue.setText("");
        lblTdsAmountValue.setText("");
        lblLastInterestProvisionDateValue.setText("");
        lblClosedDateValue.setText("");
        lbldepositPeriodRunValue.setText("");
        lblClosingTypeValue.setText("");
        lblTransferOutBranchValue.setText("");
        lblRenewalDateValue.setText("");
        lblClosingInterestAmountValue.setText("");
        lblClosingRateOfInterestValue.setText("");
        lblSBInterestAmountValue.setText("");
        lblSBRateOfInterestValue.setText("");
        lblSICreatedDateValue.setText("");
        lblSINoValue.setText("");
        lblSIProductTypeValue.setText("");
        lblSIProductIdValue.setText("");
        lblSIAccountNoValue.setText("");
        lblSIAmountValue.setText("");
        lblSIParticularsValue.setText("");
        lblSIFrequencyValue.setText("");
        lblSIForwardCountValue.setText("");
        lblSIStartDateValue.setText("");
        lblSIEndDateValue.setText("");
        lblAcceptanceChargesValue.setText("");
        lblSIFailureChargesValue.setText("");
        lblSIExecutionChargesValue.setText("");
    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        viewType = ClientConstants.VIEW_TYPE_DELETE;
        ACTIONEDITDELETE = 1;
        transNew = false;
        observable.setActionType(ClientConstants.ACTIONTYPE_DELETE);
        nomineeUi.setActionType(ClientConstants.ACTIONTYPE_DELETE);
        popUp();
        disableScreen();
    }//GEN-LAST:event_btnDeleteActionPerformed
    private void disableScreen() {
        btnCustomerIdFileOpen.setEnabled(false);
        btnAgentIdFileOpen.setEnabled(false);
        btnTransBranchCodeHelp.setEnabled(false);
        btnOriginalAccountNumberHelp.setEnabled(false);
        ClientUtil.enableDisable(this, false);
        btnCustomerIdFileOpenCr.setEnabled(false);
        //        tblsEnableDisable(false);
        setBtnDepSubNo(false);
    }

    private void tblsEnableDisable(boolean val) {
//        tblDepSubNoAccInfo.setEnabled(val);
        tblJointAcctHolder.setEnabled(val);
    }
    private void btnCustomerIdFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomerIdFileOpenActionPerformed
        if ((cboProductId.getSelectedItem() != null) && (cboConstitution.getSelectedItem() != null)
                && (!cboProductId.getSelectedItem().equals("") && !cboConstitution.getSelectedItem().equals(""))) {
//            callView("CUSTOMER ID");
            viewType = "CUSTOMER ID";
            new CheckCustomerIdUI(this);
            //system.out.println("getSelectedBranch" + getSelectedBranchID());
            poaUI.ttNotifyObservers();
            newDepositDetails();
            //system.out.println("customer id is " + txtCustomerId.getText().toString());
            String txtCustomer = txtCustomerId.getText();
            HashMap mapDOB = new HashMap();
            HashMap cust = new HashMap();
            cust.put("CUSTOMER ID", txtCustomer);
            List lstDOB = ClientUtil.executeQuery("getCustDOB", cust);
//            //system.out.println("lstDOB====" + lstDOB);
            int age = 0;
            //           mapDOB=(HashMap)lstDOB.get(0);
//            if (lstDOB==null && lstDOB.contains(null) && lstDOB.equals("") && lstDOB.isEmpty()) 
//            {
//            if(mapDOB.get("DOB").toString().equals("N"))
//                   {
//                       ClientUtil.showAlertWindow("DOB is not set for this customer");
//                        return;
//                   } 
//           else
//            {
//                ClientUtil.showAlertWindow("DOB is not set for this customer");
//                  return;
//            }
//                            
//        }
            if (lstDOB != null && lstDOB.size() > 0) {
                mapDOB = (HashMap) lstDOB.get(0);
                if (mapDOB.get("DOB") != null) {
                    Date dob = (Date) mapDOB.get("DOB");
                    age = calAge1(dob);
                } else {
                    ClientUtil.showAlertWindow("DOB is not set for this customer");
                }
            }

//            if(mapDOB.get("DOB")!=null){
//                if(mapDOB.get("DOB").toString().equals("N"))
//                {
//                  ClientUtil.showAlertWindow("DOB is not set for this customer");
//                  return;  
//                }
//            String strDOB= mapDOB.get("DOB").toString();
//            //system.out.println("strDOB"+strDOB);
//             age= calAge1(strDOB);
//            }
//            HashMap mapRtrAge = new HashMap();
//            List lstRtrAge = ClientUtil.executeQuery("getRtrAge", mapRtrAge);
//            if (!lstRtrAge.isEmpty()) {
//                mapRtrAge = (HashMap) lstRtrAge.get(0);
//            }
//            String strRtrAge = mapRtrAge.get("RETIREMENT_AGE").toString();
//            int rtrAge = Integer.parseInt(strRtrAge);
            int rtrAge = TrueTransactMain.SENIOR_CITIZEN_AGE;
            //system.out.println("rtrAge" + rtrAge);
            //system.out.println("age" + age);
            if (age >= rtrAge) {
                observable.setCboCategory("Senior Citizens");
                cboCategory.setSelectedItem(observable.getCboCategory());
            }

            if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                enableDisableForCummulative();
            }
        } else if (cboProductId.getSelectedItem().equals("")) {
            ClientUtil.showAlertWindow("Choose Product Id First...");
            return;
        } else if (cboConstitution.getSelectedItem().equals("")) {
            ClientUtil.showAlertWindow("Choose Constitution...");
            return;
        }

    }//GEN-LAST:event_btnCustomerIdFileOpenActionPerformed
    //--- Gets the Customer List to be passed to Nominee Ui

    private StringBuffer getCustomerList() {
        StringBuffer presentCust = new StringBuffer();
        int jntAccntTablRow = tblJointAcctHolder.getRowCount();
        if (tblJointAcctHolder.getRowCount() != 0) {
            for (int i = 0, sizeJointAcctAll = tblJointAcctHolder.getRowCount(); i < sizeJointAcctAll; i++) {
                if (i == 0 || i == sizeJointAcctAll) {
                    presentCust.append("'" + CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(i, 1)) + "'");
                } else {
                    presentCust.append("," + "'" + CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(i, 1)) + "'");
                }
            }
        }
        return presentCust;
    }

    private void callView(String currField) {
        viewType = currField;
        authSignUI.setViewType(viewType);
        poaUI.setViewType(viewType);

        //--- If Customer Id is selected OR JointAccnt New is clciked, show the popup Screen of Customer Table
        if ((currField == "CUSTOMER ID") || (currField == "JOINT ACCOUNT")) {
            HashMap viewMap = new HashMap();
            StringBuffer presentCust = new StringBuffer();
            int jntAccntTablRow = tblJointAcctHolder.getRowCount();
            if (tblJointAcctHolder.getRowCount() != 0) {
                for (int i = 0, sizeJointAcctAll = tblJointAcctHolder.getRowCount(); i < sizeJointAcctAll; i++) {
                    if (i == 0 || i == sizeJointAcctAll) {
                        presentCust.append("'" + CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(i, 1)) + "'");
                    } else {
                        presentCust.append("," + "'" + CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(i, 1)) + "'");
                    }
                }
            }
            HashMap whereMap = new HashMap();
            if (currField != "JOINT ACCOUNT") {
                if (depProdDetails.get("TYPES_OF_DEPOSIT") != null && !depProdDetails.get("TYPES_OF_DEPOSIT").equals("NORMAL")) {
                    if (depProdDetails.get("TYPES_OF_DEPOSIT").equals("NRO") || depProdDetails.get("TYPES_OF_DEPOSIT").equals("NRE")) {
                        whereMap.put("RESIDENTIALSTATUS", "NONRESIDENT");
                    }
                }
                if (depProdDetails.get("STAFF_ACCOUNT") != null && depProdDetails.get("STAFF_ACCOUNT").equals("Y")) {
                    whereMap.put("STAFF_ID", depProdDetails.get("STAFF_ACCOUNT"));
                }
            }
            viewMap.put("MAPNAME", "getSelectAccInfoTOList");
            whereMap.put("CUSTOMER_ID", presentCust);
            if (cboConstitution.getSelectedItem().equals("Joint Account") || cboConstitution.getSelectedItem().equals("Individual") || cboConstitution.getSelectedItem().equals("Induvidual")) {
                whereMap.put("CUST_TYPE", "INDIVIDUAL");
            } else {
                whereMap.put("OTHER_INDIVIDUAL", "INDIVIDUAL");
            }
            whereMap.put(CommonConstants.SELECTED_BRANCH_ID, getSelectedBranchID());
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        }
        if (currField == "CREDIT_ACC_NO") {
            HashMap viewMap = new HashMap();
            String prodType = ((ComboBoxModel) cboProdType.getModel()).getKeyForSelected().toString();
            if (!prodType.equals("GL")) {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountList"
                        + ((ComboBoxModel) cboProdType.getModel()).getKeyForSelected().toString());
            } else {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getSelectAcctHead");
                //                + ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString());
            }
            HashMap whereMap = new HashMap();
            if (cboProdId.getModel() != null && cboProdId.getModel().getSize() > 0) {
                whereMap.put("PROD_ID", ((ComboBoxModel) cboProdId.getModel()).getKeyForSelected());
            }
            if (whereMap.get("SELECTED_BRANCH") == null) {
                whereMap.put("SELECTED_BRANCH", ProxyParameters.BRANCH_ID);
            } else {
                whereMap.put("SELECTED_BRANCH", getSelectedBranchID());
            }
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        }
        //--- If Branch Code is seleted, show the popup screen of Branch Code details
        if (currField == "BRANCH CODE") {
            HashMap viewMap = new HashMap();
            HashMap whereMap = new HashMap();
            whereMap.put("CURRENT_BRANCH", ProxyParameters.BRANCH_ID);
            viewMap.put(CommonConstants.MAP_NAME, "getSelectBranchList");
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        }
        //--- If Account Number is Selected, show the popup screen of Account Number
        if (currField == "ACCOUNT NUMBER") {
            HashMap viewMap = new HashMap();
            if (!txtTransferingBranchCode.getText().equals("") && txtTransferingBranchCode.getText().length() > 0) {
                HashMap viewTransMap = new HashMap();
                viewTransMap.put("CURRENT_BRANCH", txtTransferingBranchCode.getText());
                viewMap.put(CommonConstants.MAP_WHERE, viewTransMap);
                viewMap.put(CommonConstants.MAP_NAME, "Deposite.ViewAllAccountNumber");
                new ViewAll(this, viewMap).show();
            }
        }
//        //--- If Account No. is selected, show the popup screen of Account No. details
//        if (currField.equals("ACCOUNT NO")) {
//            HashMap viewMap = new HashMap();
//            viewMap.put("MAPNAME", "getAccNoDet");
//            new ViewAll(this, viewMap).show();
//        }
        //--- If Renewal is selected, show the popup screen of the Matured Deposit Accounts
        if (currField.equals("RENEW")) {
            lblStatus.setText(ClientConstants.ACTION_STATUS[12]);
            final HashMap viewMap = new HashMap();
            HashMap whereMap = new HashMap();
            //system.out.println("callView");
            whereMap.put("CURR_DATE", currDt.clone());
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            viewMap.put(CommonConstants.MAP_NAME, "viewAllRenewalAccInfo");
            new ViewAll(this, viewMap).show();
            whereMap = null;
            rdoOpeningMode_Multiple.setSelected(false);

        }
        if (currField.equals("EXTENSION_OF_DEPOSIT")) {
            lblStatus.setText(ClientConstants.ACTION_STATUS[21]);
            final HashMap viewMap = new HashMap();
            HashMap whereMap = new HashMap();
            //system.out.println("callView");
            whereMap.put("CURR_DATE", currDt.clone());
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            viewMap.put(CommonConstants.MAP_NAME, "viewAllExtensionAccInfo");
            new ViewAll(this, viewMap).show();
            whereMap = null;
            rdoOpeningMode_Multiple.setEnabled(false);
        }
        if (currField.equals("CLOSED_DEPOSIT")) {
            HashMap whereMap = new HashMap();
            HashMap viewMap = new HashMap();
            whereMap.put("SELECTED_BRANCH_ID", ProxyParameters.BRANCH_ID);
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            viewMap.put(CommonConstants.MAP_NAME, "getClosedDepositDetails");
            whereMap = null;
            new ViewAll(this, viewMap).show();
        }
        if (currField.equals("ENQUIRY_STATUS")) {
            HashMap whereMap = new HashMap();
            HashMap viewMap = new HashMap();
            whereMap.put("BRANCH_ID", getSelectedBranchID());
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            whereMap.put(CommonConstants.MAP_NAME, "getAccountList");
            whereMap = null;
            new ViewAll(this, viewMap).show();
        }
        if(viewType.equalsIgnoreCase("Account")){
           // flag1=true;
           HashMap map=new HashMap();
           HashMap viewMap = new HashMap();
           String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
            map.put("BRANCH_CODE",TrueTransactMain.BRANCH_ID);
            map.put("PRODID",prodId);
            viewMap.put(CommonConstants.MAP_WHERE, map);
            viewMap.put(CommonConstants.MAP_NAME, "getRegularDepositAccounts"); 


      new ViewAll(this,viewMap).show(); 
         }


        //--- If Button Agent Id is clicked, show the popup screen of the AgentIds.
        if (currField.equals(VIEW_TYPE_AGENT_ID)) {
            final HashMap viewMap = new HashMap();
            viewMap.put(CommonConstants.MAP_NAME, "getAgentId");
            new ViewAll(this, viewMap).show();
        }
        if (currField == "RENEWAL_CREDIT_ACC_NO") {
            HashMap viewMap = new HashMap();
            String prodType = ((ComboBoxModel) cboRenewalProdType.getModel()).getKeyForSelected().toString();
            if (!prodType.equals("GL")) {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountList"
                        + ((ComboBoxModel) cboRenewalProdType.getModel()).getKeyForSelected().toString());
            } else {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getSelectAcctHead");
                //                + ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString());
            }
            HashMap whereMap = new HashMap();
            whereMap.put("PROD_ID", ((ComboBoxModel) cboRenewalProdId.getModel()).getKeyForSelected());
            if (whereMap.get("SELECTED_BRANCH") == null) {
                whereMap.put("SELECTED_BRANCH", ProxyParameters.BRANCH_ID);
            } else {
                whereMap.put("SELECTED_BRANCH", getSelectedBranchID());
            }
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        }
        if (currField == "RENEWAL_INT_TRANS_ACC_NO") {
            HashMap viewMap = new HashMap();
            String prodType = ((ComboBoxModel) cboRenewalInterestTransProdType.getModel()).getKeyForSelected().toString();
            if (!prodType.equals("GL")) {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountList"
                        + ((ComboBoxModel) cboRenewalInterestTransProdType.getModel()).getKeyForSelected().toString());
            } else {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getSelectAcctHead");
                //                + ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString());
            }
            HashMap whereMap = new HashMap();
            whereMap.put("PROD_ID", ((ComboBoxModel) cboRenewalInterestTransProdId.getModel()).getKeyForSelected());
            if (whereMap.get("SELECTED_BRANCH") == null) {
                whereMap.put("SELECTED_BRANCH", ProxyParameters.BRANCH_ID);
            } else {
                whereMap.put("SELECTED_BRANCH", getSelectedBranchID());
            }
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        }
        if (currField == "RENEWAL_DEP_TRANS_ACC_NO") {
            HashMap viewMap = new HashMap();
            String prodType = ((ComboBoxModel) cboRenewalDepTransProdType.getModel()).getKeyForSelected().toString();
            if (!prodType.equals("GL")) {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountList"
                        + ((ComboBoxModel) cboRenewalDepTransProdType.getModel()).getKeyForSelected().toString());
            } else {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getSelectAcctHead");
                //                + ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString());
            }
            HashMap whereMap = new HashMap();
            whereMap.put("PROD_ID", ((ComboBoxModel) cboRenewalDepTransProdId.getModel()).getKeyForSelected());
            if (whereMap.get("SELECTED_BRANCH") == null) {
                whereMap.put("SELECTED_BRANCH", ProxyParameters.BRANCH_ID);
            } else {
                whereMap.put("SELECTED_BRANCH", getSelectedBranchID());
            }
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        }
        if (currField == "EXTENSION_PAYMODE") {
            HashMap viewMap = new HashMap();
            String prodType = ((ComboBoxModel) cboExtensionProdType.getModel()).getKeyForSelected().toString();
            if (!prodType.equals("GL")) {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountList"
                        + ((ComboBoxModel) cboExtensionProdType.getModel()).getKeyForSelected().toString());
            } else {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getSelectAcctHead");
                //                + ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString());
            }
            HashMap whereMap = new HashMap();
            whereMap.put("PROD_ID", ((ComboBoxModel) cboExtensionProdId.getModel()).getKeyForSelected());
            if (whereMap.get("SELECTED_BRANCH") == null) {
                whereMap.put("SELECTED_BRANCH", ProxyParameters.BRANCH_ID);
            } else {
                whereMap.put("SELECTED_BRANCH", getSelectedBranchID());
            }
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        }
        if (currField == "EXTENSION_TRANS") {
            HashMap viewMap = new HashMap();
            String prodType = ((ComboBoxModel) cboExtensionTransProdType.getModel()).getKeyForSelected().toString();
            if (!prodType.equals("GL")) {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountList"
                        + ((ComboBoxModel) cboExtensionTransProdType.getModel()).getKeyForSelected().toString());
            } else {
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getSelectAcctHead");
                //                + ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString());
            }
            HashMap whereMap = new HashMap();
            whereMap.put("PROD_ID", ((ComboBoxModel) cboExtensionTransProdId.getModel()).getKeyForSelected());
            if (whereMap.get("SELECTED_BRANCH") == null) {
                whereMap.put("SELECTED_BRANCH", ProxyParameters.BRANCH_ID);
            } else {
                whereMap.put("SELECTED_BRANCH", getSelectedBranchID());
            }
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        }
        if (currField.equals("EXISTING_CUSTOMER") && txtExistingAcctNo.getText().length() > 0) {
            HashMap existingMap = new HashMap();
            existingMap.put("ACT_NUM", txtExistingAcctNo.getText());
            List mapDataList = ClientUtil.executeQuery("getSelectExistingCustId", existingMap);
            //system.out.println("#### mapDataList :" + mapDataList);
            if (mapDataList != null && mapDataList.size() > 0) {
                //Added By Suresh 21-Aug-2013
                txtDepositAmount.setEnabled(true);
                existingMap = (HashMap) mapDataList.get(0);
                existingMap.put("ACT_NUM", txtExistingAcctNo.getText());
                fillData(existingMap);
            } else {
                ClientUtil.showAlertWindow("Invalid Account No");
                txtExistingAcctNo.setText("");
                return;
            }
        }
    }

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        forLTDpurpose = "true";        
        if (txtEditDepositNo.getText().length() > 0) {
            String[] obj = {"Yes ", "No"};
            int option = COptionPane.showOptionDialog(null, ("Do you want to Enable all those fields?"), ("Customer"),
                    COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj, obj[0]);
            if (option == 0) {
                viewType = ClientConstants.VIEW_TYPE_EDIT;
                transNew = false;
                ACTIONEDITDELETE = 1;
                txtDepsoitNo.setEditable(false);
                txtDepsoitNo.setEnabled(false);
                btnView.setEnabled(false);
                btnNew.setEnabled(false);
                btnEdit.setEnabled(false);
                btnDelete.setEnabled(false);
                btnSave.setEnabled(true);
                btnCancel.setEnabled(true);
                btnAuthorize.setEnabled(false);
                btnReject.setEnabled(false);
                btnException.setEnabled(false);
                btnPrint.setEnabled(false);
                btnCustomerIdFileOpen1.setEnabled(false);
                panExistingCustomer.setVisible(false);
                lblExistingCustomer.setVisible(false);
                txtExistingAcctNo.setVisible(false);
                lblExistingAcctNo.setVisible(false);
                cboConstitution.setEnabled(true);
                cboAddressType.setEnabled(true);
                cboSettlementMode.setEnabled(true);
                cboInterestPaymentMode.setEnabled(true);
                rdoSalaryRecovery_Yes.setEnabled(true);
                rdoSalaryRecovery_No.setEnabled(true);
                 btnDepositNo.setEnabled(true);
            } else {
                ClientUtil.enableDisable(this, false);

            }
        } else {
            viewType = ClientConstants.VIEW_TYPE_EDIT;
            transNew = false;
            ACTIONEDITDELETE = 1;
            if (viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE)) {
                ClientUtil.enableDisable(panAccountInformation, false);
                ClientUtil.enableDisable(panDepositDetails, false);
                panWeek.setVisible(false);
                panOpenMode.setEnabled(false);
                panMaturityDt.setEnabled(false);
                cboProductId.setEnabled(false);
                btnDepositNo.setEnabled(true);
                cboProductId.setEnabled(true);
            }
            //        renewalVisible(true);
            //        if(viewType.equals(ClientConstants.VIEW_TYPE_EDIT)){
            //            ClientUtil.enableDisable(panAccountInformation, true);
            //            ClientUtil.enableDisable(panDepositDetails, true);
            //            rdoOpeningMode_Normal.setEnabled(false);
            //            rdoOpeningMode_Renewal.setEnabled(false);
            //            rdoOpeningMode_TransferIn.setEnabled(false);
            //            cboPaymentType.setEnabled(true);
            //            tdtPaymentDate.setEnabled(true);
            //
            //        }
            if (authroize.equals("AUTHORIZED")) {
                ClientUtil.enableDisable(this, false);
                btnCustomerIdFileOpen.setEnabled(false);
                btnAgentIdFileOpen.setEnabled(false);
            }
            ClientUtil.enableDisable(this, false);
            ClientUtil.enableDisable(panModeOfOpening, false);
            observable.setActionType(ClientConstants.ACTIONTYPE_EDIT);
            observable.setStatus();
            poaUI.setLblStatus(observable.getLblStatus());
            poaUI.ttNotifyObservers();
            //        popUp();
            txtPeriodOfDeposit_Years.setEnabled(false);
            txtPeriodOfDeposit_Months.setEnabled(false);
            txtPeriodOfDeposit_Days.setEnabled(false);
            txtWeek.setEnabled(false);
            cboInterestPaymentFrequency.setEnabled(false);
            cboInterestPaymentMode.setEnabled(false);
            btnCustomerIdFileOpen1.setEnabled(false);
            btnAuthorize.setEnabled(false);
            btnReject.setEnabled(false);
            btnException.setEnabled(false);
            btnPrint.setEnabled(false);
            chkTaxDeductions.setEnabled(false);
            chk15hDeclarations.setEnabled(false);
            txtEditDepositNo.setEnabled(true);
            txtDepsoitNo.setEnabled(true);
            cboProductId.setEnabled(true);
        }
        txtNextAccNo.setText("");
        txtNextAccNo.setEnabled(false);
         btnDepositNo.setEnabled(true);
                 cboProductId.setEnabled(true);
        //Added BY Suresh
        txtDepsoitNo.setText(CommonUtil.convertObjToStr(TrueTransactMain.BRANCH_ID));        
    }//GEN-LAST:event_btnEditActionPerformed
    /**
     * To display a popUp window for viewing existing data
     */
    private void popUp() {
        lblStatus.setText(ClientConstants.ACTION_STATUS[0]);
        final HashMap viewMap = new HashMap();
        //--- If Action type is EDIT show the popup Screen accordingly
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) {
            ArrayList lst = new ArrayList();
            lst.add("DEPOSIT NO");
            viewMap.put(ClientConstants.RECORD_KEY_COL, lst);
            lst = null;
            HashMap whereMap = new HashMap();
            whereMap.put(CommonConstants.SELECTED_BRANCH_ID, getSelectedBranchID());
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            viewMap.put(CommonConstants.MAP_NAME, "viewAllAccInfo");
            whereMap = null;
        }

        if (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) {
            ArrayList lst = new ArrayList();
            lst.add("DEPOSIT NO");
            viewMap.put(ClientConstants.RECORD_KEY_COL, lst);
            lst = null;
            HashMap whereMap = new HashMap();
            whereMap.put(CommonConstants.SELECTED_BRANCH_ID, getSelectedBranchID());
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            viewMap.put(CommonConstants.MAP_NAME, "viewAllAccInfo");
            whereMap = null;

        }

        //--- If Action type DELETE show the popup Screen accordingly
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE) {
            ArrayList lst = new ArrayList();
            lst.add("DEPOSIT NO");
            viewMap.put(ClientConstants.RECORD_KEY_COL, lst);
            lst = null;
            HashMap whereMap = new HashMap();
            whereMap.put(CommonConstants.SELECTED_BRANCH_ID, getSelectedBranchID());
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            viewMap.put(CommonConstants.MAP_NAME, "viewAllAccInfoForDelete");
            whereMap = null;
        }
        new ViewAll(this, viewMap).show();
    }

    /**
     * Called by the Popup window created thru popUp method
     *
     * @param param
     */
    public void fillData(Object param) {
        HashMap hash = (HashMap) param;
        System.out.println("hashmap" + hash);
        HashMap multipleDepositAcctMap = null;
         if (hash.containsKey("NEW_FROM_AUTHORIZE_LIST_UI")) {
            fromNewAuthorizeUI = true;
            newauthorizeListUI = (NewAuthorizeListUI) hash.get("PARENT");
            setAuthorizeStatus("AUTHORIZE_BUTTON");
            observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
            hash.remove("PARENT");
            viewType = ClientConstants.VIEW_TYPE_AUTHORIZE;
            btnReject.setEnabled(false);
            rejectFlag = 1;
        }
        if (hash.containsKey("FROM_AUTHORIZE_LIST_UI")) {
            System.out.println("hash.get(PARENT) tD" + hash.get("PARENT"));
            fromAuthorizeUI = true;
            authorizeListUI = (AuthorizeListUI) hash.get("PARENT");
            setAuthorizeStatus("AUTHORIZE_BUTTON");
            observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
            hash.remove("PARENT");
            viewType = ClientConstants.VIEW_TYPE_AUTHORIZE;
            btnReject.setEnabled(false);
            rejectFlag = 1;
        }
        
        if (hash.containsKey("FROM_MANAGER_AUTHORIZE_LIST_UI")) {
            fromManagerAuthorizeUI = true;
            ManagerauthorizeListUI = (AuthorizeListDebitUI) hash.get("PARENT");
            setAuthorizeStatus("AUTHORIZE_BUTTON");
            observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
            hash.remove("PARENT");
            viewType = ClientConstants.VIEW_TYPE_AUTHORIZE;
            btnReject.setEnabled(false);
            rejectFlag = 1;
        }
        if (hash.containsKey("FROM_CASHIER_AUTHORIZE_LIST_UI")) {
            fromCashierAuthorizeUI = true;
            CashierauthorizeListUI = (AuthorizeListCreditUI) hash.get("PARENT");
            setAuthorizeStatus("AUTHORIZE_BUTTON");
            observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
            hash.remove("PARENT");
            viewType = ClientConstants.VIEW_TYPE_AUTHORIZE;
            btnReject.setEnabled(false);
            rejectFlag = 1;
        }
        if (hash.containsKey("FROM_CASHIER_APPROVAL_REJ_UI")) {
            //system.out.println("HASH DATE ====================" + hash);
            fromAuthorizeUI = false;
            fromCashierAuthorizeUI = false;
            fromManagerAuthorizeUI = false;
            viewType = ClientConstants.VIEW_TYPE_AUTHORIZE;
            observable.setActionType(ClientConstants.ACTIONTYPE_REJECT);
            observable.setStatus();
            //  btnSaveDisable();
        }
        if (hash.containsKey("MULTIPLE DEPOSIT ID")) {
            multipleDepositAcctNo = new ArrayList();
            multipleDepositAcctNo = ClientUtil.executeQuery("getMulDepositAcctNo", hash);
            if (multipleDepositAcctNo != null) {
                multipleDepositAcctMap = (HashMap) multipleDepositAcctNo.get(0);
            }
            hash.put("DEPOSIT NO", multipleDepositAcctMap.get("DEPOSIT_NO"));
        }
        //system.out.println("fill data termdeposit :" + hash);
        if (viewType == ClientConstants.VIEW_TYPE_EDIT && hash.get("DEPOSIT NO") != null) {
            HashMap closedMap = new HashMap();
            closedMap.put("DEPOSIT_NO", hash.get("DEPOSIT NO"));
            List lst = ClientUtil.executeQuery("checkClosedDeposit",closedMap);
            if (lst != null && lst.size() > 0) {
                closedMap = (HashMap) lst.get(0);
                String closeDt=CommonUtil.convertObjToStr(closedMap.get("CLOSE_DT"));
                ClientUtil.displayAlert("This Deposit is Closed on  "+closeDt);
            }
        }
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW) {
            HashMap hmap = new HashMap();
            hmap.put("DEPOSIT_NO", hash.get("DEPOSIT NO") + "_1");
            List authList = ClientUtil.executeQuery("getPendingTransAuthList", hmap);
            if (authList != null && authList.size() > 0) {
                hmap = (HashMap) authList.get(0);
                String tranMode = CommonUtil.convertObjToStr(hmap.get("TRANS_MODE"));
                ClientUtil.displayAlert(tranMode + "transaction is pending for authorization. Can not proceed");
                btnCancelActionPerformed(null);


            }
            hmap.put("PROD_ID", hash.get("PRODUCT ID"));
            List lst = ClientUtil.executeQuery("getSameNoFromRenewProd", hmap);
            if (lst != null && lst.size() > 0) {
                chkRenewSameNo.setVisible(true);
                lblRenewSamaNo.setVisible(true);
                hmap = (HashMap) lst.get(0);
                String sameNo = CommonUtil.convertObjToStr(hmap.get("SAME_NO_ALLOWED"));
                if (sameNo.equals("Y")) {
                    chkRenewSameNo.setSelected(true);
                } else {
                    chkRenewSameNo.setSelected(false);
                    chkRenewSameNo.setEnabled(true);
                }
            }

        }
        authSignUI.setViewType(viewType);
        poaUI.setViewType(viewType);
        selectedDepSubNoRow = false;
        renewalEdit = false;
        already = false;//those 8 lines to be added renewal purpose...
        exists = false;
        periodChange = false;
        renewalSubNo = false;
        addingSomeAmt = false;
        contProdId = false;
        SomeAmt = false;
        renewSave = false;
        cboflag = false;
        transbeyond = false;
        beyond15 = false;
        withInt = false;
        renewalProd = false;
        renewaldownSave = false;
        doContinueOrNot = true;
        if (hash.containsKey("CHECK")) {       // To view Deposit Account Screen when Double Clicking Row Table Data From Individual Customer Screen
            observable.setActionType(ClientConstants.ACTIONTYPE_VIEW);
            observable.setStatus();
            lblStatus.setText(observable.getLblStatus());
            btnCustomerIdFileOpen1.setEnabled(false);
            rdoDeathClaim_Yes.setEnabled(false);
            rdoDeathClaim_No.setEnabled(false);
            btnPrint.setEnabled(false);
        }
        if (renewalEnable == false && (viewType.equals("EDIT") || viewType.equals("AUTHORIZE"))) {
            lblRenewalProdId.setVisible(false);
            cboRenewalDepositProdId.setVisible(false);
            cboRenewalDepositCategory.setVisible(false);
            lblRenewalCategory.setVisible(false);
            lblRenewalWithdrawingDeposit.setVisible(false);
            rdoRenewalWithdrawing_Yes.setVisible(false);
            rdoRenewalWithdrawing_No.setVisible(false);
            //            lblWithdrawingIntAmt.setVisible(false);
            rdoRenewalWithdrawingInt_Yes.setVisible(false);
            rdoRenewalWithdrawingInt_No.setVisible(false);
            lblRenewalInterestTokenNo.setVisible(false);
            txtRenewalIntTokenNoVal.setVisible(false);
            renewalDays = false;
            renewalMonths = false;
            renewalYears = false;
        }
        if (viewType.equals("RENEW")) {
            renewalMousePress = false;
            renewalMousePressScreen = false;
        }
        observable.setViewTypeDeposit(viewType);
        //        if(viewType.equals("CLOSED_DEPOSIT"))
        //            viewType = "ACCOUNT NUMBER";
        //        //system.out.println("viewType:" + viewType);
        //--- If View Type is "EDIT" or "DELETE" the fill the UI From the appropriate
        //--- Table, else fill the required UI according to the View Type
        //system.out.println("### viewType : " + viewType + "  /  observable.getActionType() : " + observable.getActionType());
        boolean renewAuth = false;
        HashMap renewalMap = new HashMap();
        HashMap extensionMap = new HashMap();
        if (viewType.equals(ClientConstants.VIEW_TYPE_EDIT) || viewType.equals(ClientConstants.VIEW_TYPE_DELETE)
                || viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE) || viewType.equals(ClientConstants.VIEW_TYPE_RENEW)
                || viewType.equals("CLOSED_DEPOSIT") || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW
                || viewType.equals("EXTENSION_OF_DEPOSIT")) {
            isFilled = true;
            panExistingCustomer.setVisible(false);
            lblExistingCustomer.setVisible(false);
            txtExistingAcctNo.setVisible(false);
            lblExistingAcctNo.setVisible(false);
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE
                    || viewType == ClientConstants.VIEW_TYPE_AUTHORIZE
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW
                    || viewType.equals("CLOSED_DEPOSIT") || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_EXTENSION) {
                if (viewType == ClientConstants.VIEW_TYPE_AUTHORIZE) {
                    HashMap behavesMap = new HashMap();
                    behavesMap.put("ACT_NUM", hash.get("DEPOSIT NO"));
                    List lstBehaves = ClientUtil.executeQuery("getBehavesLikeForDepositNo", behavesMap);
                    if (lstBehaves != null && lstBehaves.size() > 0) {
                        behavesMap = (HashMap) lstBehaves.get(0);
                        if (behavesMap.get("BEHAVES_LIKE").equals("RECURRING")) {
                            tabTermDeposit.add(panStandingInstructionDetails, "Standing Instruction Details");
                            tabTermDeposit.resetVisits();
                        }
                    }
                    renewalMap.put("DEPOSIT_NO", hash.get("DEPOSIT NO"));
                    List lstRenewal = ClientUtil.executeQuery("getSelectRenewalDetails", renewalMap);
                    if (lstRenewal != null && lstRenewal.size() > 0) {
                        renewalMap = (HashMap) lstRenewal.get(0);
                        renewAuth = true;
                        hash.put("DEPOSIT NO", renewalMap.get("OLD_DEPOSIT_NO"));
                        hash.put("NEW_DEPOSIT_NO", renewalMap.get("DEPOSIT_NO"));
                        panRenewalInformation.setEnabled(true);
                        tabTermDeposit.add(panRenewalInformation, "Deposit Renewal Information");
                        tabTermDeposit.resetVisits();
                    }
                    extensionMap.put("DEPOSIT_NO", hash.get("DEPOSIT NO"));
                    List lstExtension = ClientUtil.executeQuery("getSelectOldDepositExtensionDetails", extensionMap);
                    if (lstExtension != null && lstExtension.size() > 0) {
                        extensionMap = (HashMap) lstExtension.get(0);
                        renewAuth = true;
                        hash.put("DEPOSIT NO", extensionMap.get("OLD_DEPOSIT_NO"));
                        hash.put("NEW_DEPOSIT_NO", extensionMap.get("EXTENSION_DEPOSIT_NO"));
                        panExtensionInformation.setEnabled(true);
                        tabTermDeposit.add(panExtensionInformation, "Extension of Deposit");
                        tabTermDeposit.resetVisits();
                    }
                }
                if (viewType == ClientConstants.VIEW_TYPE_EDIT) {
                    HashMap standingMap = new HashMap();
                    standingMap.put("DEPOSIT_NO", hash.get("DEPOSIT NO"));
                    standingMap.put("DEP_NO", hash.get("DEPOSIT NO") + "_1");
                    List lst = ClientUtil.executeQuery("getStandingInstrnDetails", standingMap);
                    if (lst != null && lst.size() > 0) {
                        standingMap = (HashMap) lst.get(0);
                        tabTermDeposit.add(panStandingInstructionDetails, "Standing Instruction Details");
                        tabTermDeposit.resetVisits();
                    }
                    renewalMap.put("DEPOSIT_NO", hash.get("DEPOSIT NO"));
                    List lstRenewal = ClientUtil.executeQuery("getSelectRenewalDetails", renewalMap);
                    if (lstRenewal != null && lstRenewal.size() > 0) {
                        renewalMap = (HashMap) lstRenewal.get(0);
                        renewAuth = true;
                        hash.put("DEPOSIT NO", renewalMap.get("OLD_DEPOSIT_NO"));
                        hash.put("NEW_DEPOSIT_NO", renewalMap.get("DEPOSIT_NO"));
                        panRenewalInformation.setEnabled(true);
                        tabTermDeposit.add(panRenewalInformation, "Deposit Renewal Information");
                        tabTermDeposit.resetVisits();
                    }
                    extensionMap.put("DEPOSIT_NO", hash.get("DEPOSIT NO"));
                    List lstExtension = ClientUtil.executeQuery("getSelectOldDepositExtensionDetails", extensionMap);
                    if (lstExtension != null && lstExtension.size() > 0) {
                        extensionMap = (HashMap) lstExtension.get(0);
                        renewAuth = true;
                        hash.put("DEPOSIT NO", extensionMap.get("OLD_DEPOSIT_NO"));
                        hash.put("NEW_DEPOSIT_NO", extensionMap.get("EXTENSION_DEPOSIT_NO"));
                        panExtensionInformation.setEnabled(true);
                        tabTermDeposit.add(panExtensionInformation, "Extension of Deposit");
                        tabTermDeposit.resetVisits();
                    }
                }
                tabTermDeposit.add(panPresentPositionDetails, "Present Position Details");
                tabTermDeposit.resetVisits();
                actionEditDelete(hash);
                if (viewType == ClientConstants.VIEW_TYPE_EDIT || viewType == ClientConstants.VIEW_TYPE_AUTHORIZE) {
                    renewalAuthorization();
                    extensionAuthorization();
                    String behavesLike = observable.getBehavesLike();
                    String telk_sal = CommonConstants.SAL_REC_MODULE;

                    if (behavesLike.equals("RECURRING") && telk_sal.equals("Y")) {
                        String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
                        HashMap hmap = new HashMap();
                        String custid = observable.getTxtCustomerId();
                        hmap.put("CUSTOMER ID", custid);
                        List list = ClientUtil.executeQuery("EmpRerfNewNo", hmap);

                        HashMap hashmap = new HashMap();
                        hashmap = (HashMap) list.get(0);
                        String refno = CommonUtil.convertObjToStr(hashmap.get("EMP_REFNO_NEW"));
                        if (refno.length() > 0) {
                            panSalaryRecovery1.setVisible(true);
                            rdoSalaryRecovery_Yes.setEnabled(true);
                            rdoSalaryRecovery_No.setEnabled(true);
                        }
                    } else {
                        panSalaryRecovery1.setVisible(false);
                    }
                    if (hash.get("DEPOSIT NO") != null) {
                        String actNum = (String) hash.get("DEPOSIT NO");
                        int yesNo = 0;
                        String[] options = {"Yes", "No"};
                        hash.put("PROD_ID", observable.getCbmProductId().getKeyForSelected());
                        List printList = ClientUtil.executeQuery("getCertificatePrintFrmProdLevel", hash);
                        if (printList != null && printList.size() > 0) {
                            HashMap printMap = new HashMap();
                            printMap = (HashMap) printList.get(0);
                            String certificatePrinting = CommonUtil.convertObjToStr(printMap.get("CERTIFICATE_PRINTING"));
                            if (!certificatePrinting.equals("") && certificatePrinting.equals("A") && viewType == ClientConstants.VIEW_TYPE_AUTHORIZE) {
                                printDepositCertificate(hash);
                            }
                            if (!certificatePrinting.equals("") && certificatePrinting.equals("O") && viewType == ClientConstants.VIEW_TYPE_EDIT) {
                                printDepositCertificate(hash);
                            }
                        }

//                        yesNo = COptionPane.showOptionDialog(null,"Do you want to print Deposit Certificate?", CommonConstants.WARNINGTITLE,
//                        COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
//                        null, options, options[0]);
//                        //system.out.println("#$#$$ yesNo : "+yesNo);
//                        if (yesNo==0) {
//                            com.see.truetransact.clientutil.ttrintegration.TTIntegration ttIntgration = null;
//                            HashMap reportTransIdMap = new HashMap();
//                            reportTransIdMap.put("Act_Num", actNum);
//                            ttIntgration.setParam(reportTransIdMap);
//                                ttIntgration.integrationForPrint("DepositReceipt");
//                        }

                        // For printing added by Rajesh
                        String displayStr = "";
                        String oldBatchId = "";
                        String newBatchId = "";
                        HashMap transIdMap = new HashMap();
                        List transId = new ArrayList();
                        List accountNo = new ArrayList();
                        HashMap transMap = new HashMap();
                        HashMap transTypeMap = new HashMap();                        
                        displayStr += "Transaction Details...\n";
                        if (multipleDepositAcctNo != null) {
                            for (int a = 0; a < multipleDepositAcctNo.size(); a++) {
                                HashMap depositAcctMap = (HashMap) multipleDepositAcctNo.get(a);
                                transMap.put("BATCH_ID", CommonUtil.convertObjToStr(depositAcctMap.get("DEPOSIT_NO")) + "_1");
                                transMap.put("TRANS_DT", currDt);
                                transMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);
                                List lst = ClientUtil.executeQuery("getDepositAccountTransferDetails", transMap);
                                if (lst != null && lst.size() > 0) {
                                    for (int i = 0; i < lst.size(); i++) {
                                        transMap = (HashMap) lst.get(i);
                                        if (transMap.get("PROD_TYPE").equals("TD")) {
                                            accountNo.add(transMap.get("ACT_NUM"));
                                            transId.add(transMap.get("BATCH_ID"));
                                        }
                                        transIdMap.put(transMap.get("SINGLE_TRANS_ID"), "TRANSFER");
                                        oldBatchId = newBatchId;
                                    }
                                }
                                lst = ClientUtil.executeQuery("getCashDetails", transMap);
                                if (lst != null && lst.size() > 0) {
                                    for (int i = 0; i < lst.size(); i++) {
                                        transMap = (HashMap) lst.get(i);
                                        accountNo.add(transMap.get("ACT_NUM"));
                                        transId.add(transMap.get("TRANS_ID"));
                                        transIdMap.put(transMap.get("SINGLE_TRANS_ID"), "CASH");
                                        transTypeMap.put(transMap.get("SINGLE_TRANS_ID"), transMap.get("TRANS_TYPE"));
                                    }
                                }
                            }                        
                        displayStr += "Depsosit account from Account No "+CommonUtil.convertObjToStr(accountNo.get(0))+" to Account No "
                        +CommonUtil.convertObjToStr(accountNo.get((accountNo.size()-1)))+" with TransId from "+CommonUtil.convertObjToStr(transId.get(0))+" to "
                        +CommonUtil.convertObjToStr(transId.get((transId.size()-1)))+" amount of "+CommonUtil.convertObjToStr(hash.get("DEPOSIT AMT")); 
                        if(!displayStr.equals("")) {
                            ClientUtil.showMessageWindow(""+displayStr);
                            transId = new ArrayList();
                            accountNo = new ArrayList();
                        }
                        }
                        
//                        int yesONo = 0;
//                        if (observable.getActionType() != ClientConstants.ACTIONTYPE_EDIT ){     
//                            String[] optionsNew = {"Yes", "No"};
//                            yesNo = COptionPane.showOptionDialog(null, "Do you want to print?", CommonConstants.WARNINGTITLE,
//                            COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
//                            null, options, options[0]);
//                        }
//                        System.out.println("#$#$$ yesNo : " + yesNo);
//                        if (yesNo == 0) {
//                            Object[] keys = transIdMap.keySet().toArray();
//                            System.out.println("keys" + keys);
//                            for (int i = 0; i < keys.length; i++) {
//                                if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
//                                    HashMap cummMap = new HashMap();
//                                    String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
//                                    cummMap.put("PROD_ID", prodId);
//                                    List cummList = ClientUtil.executeQuery("getCummCertificatePrint", cummMap);
//                                    if (cummList != null && cummList.size() > 0) {
//                                        cummMap = (HashMap) cummList.get(0);
//                                        if (cummMap.get("CUMM_CERTIFICATE_PRINT") != null) {
//                                            if (cummMap.get("CUMM_CERTIFICATE_PRINT").equals("Y")) {
//                                                HashMap paramMap = new HashMap();
//                                                paramMap.put("DepNo", observable.getProxyReturnMap().get("DEPOSIT NO"));
//                                                paramMap.put("TransDt", this.currDt);
//                                                paramMap.put("BranchId", ProxyParameters.BRANCH_ID);
//                                                TTIntegration.setParam(paramMap);
//                                                TTIntegration.integrationForPrint("CummulativeDepositCertificate");
//                                            }
//                                        }
//                                    }
//                                }
//                                TTIntegration ttIntgration = null;
//                                HashMap paramMap = new HashMap();
//                                paramMap.put("TransDt", this.currDt);
//                                paramMap.put("BranchId", ProxyParameters.BRANCH_ID);
//                                paramMap.put("TransId", keys[i]);
//                                TTIntegration.setParam(paramMap);
//
//                                if (CommonUtil.convertObjToStr(transIdMap.get(keys[i])).equals("TRANSFER")) {
//                                    TTIntegration.integrationForPrint("ReceiptPayment");
//                                } else if (CommonUtil.convertObjToStr(transTypeMap.get(keys[i])).equals("DEBIT")) {
//                                    TTIntegration.integrationForPrint("CashPayment");
//                                } else {
//                                    TTIntegration.integrationForPrint("CashReceipt");
//                                }
//                            }
//                        }
                        
//                        yesNo = COptionPane.showOptionDialog(null, "Do you want to print?", CommonConstants.WARNINGTITLE,
//                                COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
//                               null, options, options[0]);
//                        //system.out.println("#$#$$ yesNo : " + yesNo);
//                       if (yesNo == 0) { //comm by babu 
//                            TTIntegration ttIntgration = null;
//                            HashMap printParamMap = new HashMap();
//                            printParamMap.put("TransDt", currDt);
//                            printParamMap.put("BranchId", ProxyParameters.BRANCH_ID);
//                            Object keys[] = transIdMap.keySet().toArray();
//                            for (int i = 0; i < keys.length; i++) {
//                                printParamMap.put("TransId", keys[i]);
//                                ttIntgration.setParam(printParamMap);
////                                if (((String)TrueTransactMain.BANKINFO.get("BANK_NAME")).toUpperCase().lastIndexOf("POLPULLY")!=-1) {
//                                if (CommonUtil.convertObjToStr(transIdMap.get(keys[i])).equals("TRANSFER")) {
//                                    ttIntgration.integrationForPrint("ReceiptPayment");
//                                } else if (CommonUtil.convertObjToStr(transTypeMap.get(keys[i])).equals("DEBIT")) {
//                                    ttIntgration.integrationForPrint("CashPayment", false);
//                                } else {
//                                    ttIntgration.integrationForPrint("CashReceipt", false);
//                                }
//                            }
//                        }
                    }

                }
                //                if(chkMember.isSelected()==true){
                //                    cboMemberType.setVisible(true);
                //                    lblMemberType.setVisible(true);
                //                }
                if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW
                        || observable.getActionType() == ClientConstants.ACTIONTYPE_EXTENSION
                        || observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE
                        || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT) {
                    HashMap paramMap = new HashMap();
                    if (renewAuth == true && renewalMap.containsKey("DEPOSIT_NO")) {
                        paramMap.put("DEPOSIT_NO", renewalMap.get("DEPOSIT_NO"));
                    } else if (renewAuth == true && extensionMap.containsKey("EXTENSION_DEPOSIT_NO")) {
                        paramMap.put("DEPOSIT_NO", extensionMap.get("EXTENSION_DEPOSIT_NO"));
                    } else {
                        paramMap.put("DEPOSIT_NO", hash.get("DEPOSIT NO"));
                    }
                    boolean lock = whenTableRowSelected(paramMap);
                    if (lock == true) {
                        cboConstitution.setEnabled(false);
                        cboAddressType.setEnabled(false);
                        cboSettlementMode.setEnabled(false);
                        txtRemarks.setEnabled(false);
                        chkAuthorizedSignatory.setEnabled(false);
                        chkNomineeDetails.setEnabled(false);
                        txtPrintedOption.setEnabled(false);
                        ClientUtil.enableDisable(panAutoRenewal, false);
//                        btnCancelActionPerformed(null);
                        return;
                    }
                    btnAuthorize.setEnabled(false);
                    btnReject.setEnabled(false);
                    btnException.setEnabled(false);
                    btnCustomerIdFileOpen1.setEnabled(false);
                }
                cboConstitution.setEnabled(true);
                cboAddressType.setEnabled(true);
                rdoSalaryRecovery_Yes.setEnabled(true);
                rdoSalaryRecovery_No.setEnabled(true);
                if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                    lblTotalInterest.setVisible(false);
                    lblTotalInterestValue.setVisible(false);
                    lblBalanceInterestAmount.setText("Balance Deposit Amount");
                    //system.out.println("#######BEHAVES_LIKE DAILY");
                } else {
                    lblTotalInterest.setVisible(true);
                    lblTotalInterestValue.setVisible(true);
                    lblBalanceInterestAmount.setText("Balance Interest Amount");
                    //system.out.println("#######BEHAVES_LIKE NON");
                }
                HashMap custMap = new HashMap();
                custMap.put("DEPOSIT_NO", hash.get("DEPOSIT NO"));
                List lst = ClientUtil.executeQuery("getCustomerIdDeposit", custMap);
                if (lst != null && lst.size() > 0) {
                    custMap = (HashMap) lst.get(0);
                    hash.put("CUSTOMER ID", custMap.get("CUST_ID"));
                    //                    if(observable.getCboConstitution().equals("Joint Account")){
                    //                        JointAcctDisplay(CommonUtil.convertObjToStr(hash.get("CUSTOMER ID")));
                    //                    }else
                    //                        CustInfoDisplay(CommonUtil.convertObjToStr(hash.get("CUSTOMER ID")));
                }
                txtDepsoitNo.setEnabled(false);

                observable.ttNotifyObservers();
                fromActionEditHash = false;
                HashMap authorizeByMap = new HashMap();
                authorizeByMap.put("DEPOSIT_NO", hash.get("DEPOSIT NO"));
                lst = ClientUtil.executeQuery("getauthorizeByDeposit", authorizeByMap);
                if (lst != null && lst.size() > 0) {
                    authorizeByMap = (HashMap) lst.get(0);
                    authorizeBy = CommonUtil.convertObjToStr(authorizeByMap.get("AUTHORIZE_BY"));
                    befDepDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(authorizeByMap.get("DEPOSIT_DT")));
                    aftDepDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(authorizeByMap.get("MATURITY_DT")));
                }
//                if(tblDepSubNoAccInfo.getRowCount() > 0 && viewType != ClientConstants.VIEW_TYPE_RENEW)
                if (txtDepositAmount.getText().length() > 0 && viewType != ClientConstants.VIEW_TYPE_RENEW) {
                    cboProductId.setEnabled(false);
                }

                //--- if it is authorize or if transaction is done,
                //--- just show the data but dont allow to change the data
                if (hash.containsValue("AUTHORIZED")) {
                    //                    btnCustomerIdFileOpen.setEnabled(false);
                    //                    btnCustomerIdFileOpen.setEnabled(true);
                    btnAgentIdFileOpen.setEnabled(false);
                    authroize = CommonUtil.convertObjToStr(hash.get("AUTHORIZED"));
                    ClientUtil.enableDisable(this, false);
//                    btnDepSubNoAccNew.setEnabled(false);
                } else if (viewType.equals("NEW")) {
                    authroize = CommonUtil.convertObjToStr("");
                    ClientUtil.enableDisable(this, true);
                } else if (viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE)) {
                    ClientUtil.enableDisable(this, false);
                } else if (viewType.equals(ClientConstants.VIEW_TYPE_EDIT)) {
                    if (!authorizeBy.equals("")) {
                        ClientUtil.enableDisable(this, false);
                        //                        btnCustomerIdFileOpen.setEnabled(false);
                        //                        btnCustomerIdFileOpen.setEnabled(true);
                        btnAgentIdFileOpen.setEnabled(false);
                    } else {
                        ClientUtil.enableDisable(this, true);
                        //                        btnCustomerIdFileOpen.setEnabled(true);
                        btnAgentIdFileOpen.setEnabled(true);
                    }
//                    btnDepSubNoAccNew.setEnabled(false);
                }
                if ((viewType.equals(ClientConstants.VIEW_TYPE_EDIT) || viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE))) {
                    ClientUtil.enableDisable(this, false);
                }
              

                if (viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE) || observable.isTransactionDone == true
                        || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW || viewType.equals("CLOSED_DEPOSIT")) {
                    disableScreen();
                    nomineeUi.setEnabled(false);
                    poaUI.setEnabled(false);
                    authSignUI.setEnabled(false);
                    ClientUtil.enableDisable(nomineeUi, false);
                    if (viewType.equals("CLOSED_DEPOSIT") || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) {
                        ClientUtil.enableDisable(panMaturityDt, false);
                        ClientUtil.enableDisable(panDepositDt, false);
                        ClientUtil.enableDisable(panInterestCredit, false);
                        btnCustomerIdFileOpenCr.setEnabled(false);
//                        btnDepSubNoAccNew.setEnabled(false);
                    }
                    if (viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE)) {
                        cboInterestPaymentMode.setEnabled(false);
                        cboProdType.setEnabled(false);
                        cboProdId.setEnabled(false);
                        btnCustomerIdFileOpenCr.setEnabled(false);
                    }
                }
                if (viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE)) {
                    HashMap renewMap = new HashMap();
                    if (renewAuth == true) {
                        renewalAuthorization();
                    }
                    renewMap.put("DEPOSIT_NO", renewalMap.get("DEPOSIT_NO"));
                    lst = ClientUtil.executeQuery("getSelectRenewalDetails", renewMap);
                    if (lst != null && lst.size() > 0) {
                        renewMap = (HashMap) lst.get(0);
                        renewMap.put("CURR_DATE", currDt.clone());
                        String renewNo = CommonUtil.convertObjToStr(renewMap.get("OLD_DEPOSIT_NO"));
                        String newNo = CommonUtil.convertObjToStr(renewalMap.get("DEPOSIT_NO"));
                        double additionalAmt = CommonUtil.convertObjToDouble(renewalMap.get("ADDING_DEP_AMT")).doubleValue();
                        double sbintAmt = CommonUtil.convertObjToDouble(renewalMap.get("SB_INT_AMT")).doubleValue();
                        if (renewNo != null && renewNo.length() > 0) {
                            renewNo = renewNo + "_1";
                            String displayDetailsStr = "";
                            String oldBatchId = "";
                            String newBatchId = "";
                            double intAmt = 0.0;
                            double sbAmt = 0.0;
                            double depAmt = 0.0;
                            double totBal = 0.0;
                            long period = 0;
                            double receive = 0.0;
                            if (renewNo.lastIndexOf("_") != -1) {
                                renewNo = renewNo.substring(0, renewNo.lastIndexOf("_"));
                            }
                            List lstOld = null;
                            HashMap oldDepMap = new HashMap();
                            oldDepMap.put("DEPOSIT_NO", renewNo);
                            //                            if(renewNo.equals(newNo)){
                            
                         //   lstOld = ClientUtil.executeQuery("getRenewalSameNoDetails", oldDepMap);
                             lstOld = ClientUtil.executeQuery("getRenewalDepositNoDetails", oldDepMap);//added by chithra on 9-05-14
                            //                            }else{
                            //                                lstOld = ClientUtil.executeQuery("getRenewalOldDetails", oldDepMap);
                            //                            }
                            if (lstOld != null && lstOld.size() > 0) {
                                oldDepMap = (HashMap) lstOld.get(0);
                                intAmt = CommonUtil.convertObjToDouble(oldDepMap.get("INTEREST_AMT")).doubleValue();
                                sbAmt = CommonUtil.convertObjToDouble(oldDepMap.get("SB_INT_AMT")).doubleValue();
                                depAmt = CommonUtil.convertObjToDouble(oldDepMap.get("TOTAL_BALANCE")).doubleValue();
                                period = DateUtil.dateDiff((Date) oldDepMap.get("MATURITY_DT"), (Date) currDt.clone());
                                HashMap newDepMap = new HashMap();
                                newDepMap.put("DEPOSIT_NO", newNo);
                                lst = ClientUtil.executeQuery("getRenewalNewDetails", newDepMap);
                                if (lst != null && lst.size() > 0) {
                                    newDepMap = (HashMap) lst.get(0);
                                    totBal = CommonUtil.convertObjToDouble(newDepMap.get("DEPOSIT_AMT")).doubleValue();
                                }
                                receive = totBal - (depAmt + intAmt + sbAmt);
                                if (receive > 0) {
                                    receive = receive;
                                } else {
                                    receive = 0;
                                }
                            }
                            renewMap = new HashMap();
//                        renewMap.put("DEPOSIT_NO",renewNo);
//                        renewMap.put("CURR_DT", currDt);
//                        lst = ClientUtil.executeQuery("getTransferTransAuthDetails", renewMap);
                            renewMap.put("BATCH_ID", renewNo);
                            renewMap.put("TRANS_DT", currDt);
                            renewMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);
                            //lst = ClientUtil.executeQuery("getTransferDetails", renewMap);
                               lst = ClientUtil.executeQuery("getDepositAccountTransferDetails", renewMap);
                            if (lst != null && lst.size() > 0) {
                                displayDetailsStr += "Transfer Transaction Details...\n";
                                for (int i = 0; i < lst.size(); i++) {
                                    renewMap = (HashMap) lst.get(i);
                                    displayDetailsStr += "Trans Id : " + renewMap.get("TRANS_ID")
                                            + "   Batch Id : " + renewMap.get("BATCH_ID")
                                            + "   Trans Type : " + renewMap.get("TRANS_TYPE");
                                    String actNum = CommonUtil.convertObjToStr(renewMap.get("ACT_NUM"));
                                    if (actNum != null && !actNum.equals("")) {
                                        renewalTransMap.put("DEPOSIT_AMT_TRANSFER", "");
                                        displayDetailsStr += "   Account No : " + renewMap.get("ACT_NUM")
                                                + "   Deposit Amount : " + renewMap.get("AMOUNT") + "\n";
                                    } else {
                                        renewalTransMap.put("INTEREST_AMT_TRANSFER", "");
                                        displayDetailsStr += "   Ac Hd Desc : " + renewMap.get("AC_HD_ID")
                                                + "   Interest Amount : " + renewMap.get("AMOUNT") + "\n";
                                    }
                                    observable.setTransMode("TRANSFER"); //transfer Transaction.....
                                    renewMap.put("TRANS_MODE", "TRANSFER");
                                    newBatchId = CommonUtil.convertObjToStr(renewMap.get("BATCH_ID"));
                                    if (oldBatchId.equals(newBatchId)) {
                                        transferUI[i] = new TransferUI();
                                        transferUI[i].setViewType(201);
                                        //transferUI[i].depositAuthorize(renewMap, this);//Jeffin
                                    }
                                    //system.out.println("#### :" + intMap);
                                    oldBatchId = newBatchId;
                                }
                            }
                            if (renewNo != null && renewNo.length() > 0) {
//                                renewMap.put("DEPOSIT_NO",renewNo+"_1");
//                                renewMap.put("CURR_DT",currDt.clone());
//                                lst = ClientUtil.executeQuery("getCashTransAuthDetails", renewMap);
                                renewMap.put("DEPOSIT_NO", renewNo + "_1");
                                renewMap.put("TRANS_DT", currDt);
                                renewMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);
                                lst = ClientUtil.executeQuery("getCashDetails", renewMap);
                                if (lst != null && lst.size() > 0) {
                                    //system.out.println("cccccccccccccccccc");
                                    displayDetailsStr += "Cash Transaction Details...\n";
                                    for (int i = 0; i < lst.size(); i++) {
                                        renewMap = (HashMap) lst.get(i);
                                        displayDetailsStr += "Trans Id : " + renewMap.get("TRANS_ID")
                                                + "   Trans Type : " + renewMap.get("TRANS_TYPE");
                                        observable.setTransMode("CASH");
                                        renewMap.put("TRANS_MODE", "CASH");
                                        cashTransUI[i] = new CashTransactionUI();
                                        String actNum = CommonUtil.convertObjToStr(renewMap.get("ACT_NUM"));
                                        if (actNum != null && !actNum.equals("")) {
                                            renewalTransMap.put("DEPOSIT_AMT_CASH", "");
                                            displayDetailsStr += "   Account No : " + renewMap.get("ACT_NUM")
                                                    + "   Deposit Amount :  " + renewMap.get("AMOUNT") + "\n";
                                        } else {
                                            renewalTransMap.put("INTEREST_AMT_CASH", "");
                                            displayDetailsStr += "   Ac Hd Desc : " + renewMap.get("AC_HD_ID")
                                                    + "   Interest Amount : " + renewMap.get("AMOUNT") + "\n";
                                        }
                                        HashMap depAuthMap = new HashMap();
                                        depAuthMap.put("ACT_NUM", renewMap.get("ACT_NUM"));
                                        //cashTransUI[i].depositCashAuth(depAuthMap, this);//Jeffin
                                        cashTransUI[i].setViewType(3);
                                        cashTransUI[i].fillData(renewMap);
                                    }
                                }
                            }
                            if (displayDetailsStr != null && displayDetailsStr.length() > 0) {
                                flag = true;
                            }
                            if (depAmt > 0) {
                                displayDetailsStr += "Renewal Deposit Details... " + "\n"
                                        + "Old Deposit No : " + renewNo + "\n"
                                        + "Old Deposit Balance :" + depAmt + "\n"
                                        + "Pending Interest Amt is:" + intAmt + "\n"
                                        + "Old Deposit Maturity Date :" + CommonUtil.convertObjToStr(oldDepMap.get("MATURITY_DT")) + "\n"
                                        + "Current Date :" + ClientUtil.getCurrentDateinDDMMYYYY() + "\n"
                                        + "Period : " + period + " days" + "\n"
                                        + "Sb Interest Amt is : " + sbintAmt + "\n"
                                        + "New Deposit No : " + newNo + "\n"
                                        + "New Deposit Amt : " + totBal + "\n";
//                                "Additional Amt to be Collected : "+additionalAmt
                                ClientUtil.showMessageWindow("" + displayDetailsStr);
                            }
                        }
                    }
                    /*------------------------------------------------------------------------------------------------------------------------------*/
//                    if (extensionMap.containsKey("NEW_DEPOSIT_NO")) {
                        extensionMap.put("DEPOSIT_NO", extensionMap.get("NEW_DEPOSIT_NO"));
                        lst = ClientUtil.executeQuery("getSelectOldDepositExtensionDetails", extensionMap);
                        if (lst != null && lst.size() > 0) {
                            extensionMap = (HashMap) lst.get(0);
                            extensionMap.put("CURR_DATE", currDt.clone());
                            String extensionNo = CommonUtil.convertObjToStr(extensionMap.get("OLD_DEPOSIT_NO"));
                            String newNo = CommonUtil.convertObjToStr(extensionMap.get("EXTENSION_DEPOSIT_NO"));
                            if (extensionNo != null && extensionNo.length() > 0) {
                                extensionNo = extensionNo + "_1";
                                String displayDetailsStr = "";
                                String oldBatchId = "";
                                String newBatchId = "";
                                double intAmt = 0.0;
                                double sbAmt = 0.0;
                                double depAmt = 0.0;
                                double totBal = 0.0;
                                long period = 0;
                                double receive = 0.0;
                                if (extensionNo.lastIndexOf("_") != -1) {
                                    extensionNo = extensionNo.substring(0, extensionNo.lastIndexOf("_"));
                                }
                                List lstOld = null;
                                HashMap oldDepMap = new HashMap();
                                oldDepMap.put("DEPOSIT_NO", extensionNo);
                                lstOld = ClientUtil.executeQuery("getRenewalSameNoDetails", oldDepMap);
                                if (lstOld != null && lstOld.size() > 0) {
                                    oldDepMap = (HashMap) lstOld.get(0);
                                    intAmt = CommonUtil.convertObjToDouble(oldDepMap.get("INTEREST_AMT")).doubleValue();
                                    sbAmt = CommonUtil.convertObjToDouble(oldDepMap.get("SB_INT_AMT")).doubleValue();
                                    depAmt = CommonUtil.convertObjToDouble(oldDepMap.get("TOTAL_BALANCE")).doubleValue();
                                    period = DateUtil.dateDiff((Date) oldDepMap.get("MATURITY_DT"), (Date) currDt.clone());
                                    HashMap newDepMap = new HashMap();
                                    newDepMap.put("DEPOSIT_NO", newNo);
                                    lst = ClientUtil.executeQuery("getRenewalNewDetails", newDepMap);
                                    if (lst != null && lst.size() > 0) {
                                        newDepMap = (HashMap) lst.get(0);
                                        totBal = CommonUtil.convertObjToDouble(newDepMap.get("DEPOSIT_AMT")).doubleValue();
                                    }
                                    receive = totBal - (depAmt + intAmt + sbAmt);
                                    if (receive > 0) {
                                        receive = receive;
                                    } else {
                                        receive = 0;
                                    }
                                }
                                extensionMap = new HashMap();
//                                extensionMap.put("DEPOSIT_NO",extensionNo);
//                                extensionMap.put("CURR_DT",currDt);
//                                lst = ClientUtil.executeQuery("getTransferTransAuthDetails", extensionMap);
                                extensionMap.put("DEPOSIT_NO", extensionNo);
                                extensionMap.put("CURR_DT", currDt);
                                extensionMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);
                            //    lst = ClientUtil.executeQuery("getTransferDetails", extensionMap);
                                      lst = ClientUtil.executeQuery("getDepositAccountTransferDetails", extensionMap);
                                if (lst != null && lst.size() > 0) {
                                    displayDetailsStr += "Transfer Transaction Details...\n";
                                    for (int i = 0; i < lst.size(); i++) {
                                        extensionMap = (HashMap) lst.get(i);
                                        displayDetailsStr += "Trans Id : " + extensionMap.get("TRANS_ID")
                                                + "   Batch Id : " + extensionMap.get("BATCH_ID")
                                                + "   Trans Type : " + extensionMap.get("TRANS_TYPE");
                                        String actNum = CommonUtil.convertObjToStr(extensionMap.get("ACT_NUM"));
                                        if (actNum != null && !actNum.equals("")) {
                                            renewalTransMap.put("DEPOSIT_AMT_TRANSFER", "");
                                            displayDetailsStr += "   Account No : " + extensionMap.get("ACT_NUM")
                                                    + "   Deposit Amount : " + extensionMap.get("AMOUNT") + "\n";
                                        } else {
                                            renewalTransMap.put("INTEREST_AMT_TRANSFER", "");
                                            displayDetailsStr += "   Ac Hd Desc : " + extensionMap.get("AC_HD_ID")
                                                    + "   Interest Amount : " + extensionMap.get("AMOUNT") + "\n";
                                        }
                                        observable.setTransMode("TRANSFER"); //transfer Transaction.....
                                        extensionMap.put("TRANS_MODE", "TRANSFER");
                                        newBatchId = CommonUtil.convertObjToStr(extensionMap.get("BATCH_ID"));
                                        if (oldBatchId.equals(newBatchId)) {
                                            transferUI[i] = new TransferUI();
                                            transferUI[i].setViewType(201);
                                            //transferUI[i].depositAuthorize(extensionMap, this);//Jeffin
                                        }
                                        //system.out.println("#### :" + intMap);
                                        oldBatchId = newBatchId;
                                    }
                                }
                                if (extensionNo != null && extensionNo.length() > 0) {
//                                    extensionMap.put("DEPOSIT_NO",extensionNo+"_1");
//                                    extensionMap.put("CURR_DT",currDt.clone());
//                                    lst = ClientUtil.executeQuery("getCashTransAuthDetails", extensionMap);
                                    extensionMap.put("DEPOSIT_NO", extensionNo + "_1");
                                    extensionMap.put("TRANS_DT", currDt);
                                    extensionMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);
                                    lst = ClientUtil.executeQuery("getCashDetails", extensionMap);
                                    if (lst != null && lst.size() > 0) {
                                        //system.out.println("ddddddddddddddddddddd");
                                        displayDetailsStr += "Cash Transaction Details...\n";
                                        for (int i = 0; i < lst.size(); i++) {
                                            extensionMap = (HashMap) lst.get(i);
                                            displayDetailsStr += "Trans Id : " + extensionMap.get("TRANS_ID")
                                                    + "   Trans Type : " + extensionMap.get("TRANS_TYPE");
                                            observable.setTransMode("CASH");
                                            extensionMap.put("TRANS_MODE", "CASH");
                                            cashTransUI[i] = new CashTransactionUI();
                                            String actNum = CommonUtil.convertObjToStr(extensionMap.get("ACT_NUM"));
                                            if (actNum != null && !actNum.equals("")) {
                                                renewalTransMap.put("DEPOSIT_AMT_CASH", "");
                                                displayDetailsStr += "   Account No :  " + extensionMap.get("ACT_NUM")
                                                        + "   Deposit Amount :  " + extensionMap.get("AMOUNT") + "\n";
                                            } else {
                                                renewalTransMap.put("INTEREST_AMT_CASH", "");
                                                displayDetailsStr += "   Ac Hd Desc :  " + extensionMap.get("AC_HD_ID")
                                                        + "   Interest Amount :  " + extensionMap.get("AMOUNT") + "\n";
                                            }
                                            HashMap depAuthMap = new HashMap();
                                            depAuthMap.put("ACT_NUM", extensionMap.get("ACT_NUM"));
                                            //cashTransUI[i].depositCashAuth(depAuthMap, this);//Jeffin
                                            cashTransUI[i].setViewType(3);
                                            cashTransUI[i].fillData(extensionMap);
                                        }
                                    }
                                }
                                if (displayDetailsStr != null && displayDetailsStr.length() > 0) {
                                    flag = true;
                                }
                                if (depAmt > 0) {
                                    displayDetailsStr += "Extension Deposit Details..." + "\n"
                                            + "Old Deposit No :" + extensionNo + "\n"
                                            + "Old Deposit Balance :" + depAmt + "\n"
                                            + "Pending Interest Amt is:" + intAmt + "\n"
                                            + "Old Deposit Maturity Date :" + CommonUtil.convertObjToStr(oldDepMap.get("MATURITY_DT")) + "\n"
                                            + "Current Date :" + ClientUtil.getCurrentDateinDDMMYYYY() + "\n"
                                            + "New Deposit No :" + newNo + "\n"
                                            + "New Deposit Amt :" + totBal + "\n";
                                    ClientUtil.showMessageWindow("" + displayDetailsStr);
                                }
                            }
                        }
//                    }
                }
                if (viewType.equals(ClientConstants.VIEW_TYPE_RENEW)) {
                    observable.setLblValRenewDep(observable.getTxtDepsoitNo());
                    lblValRenewDep.setText(observable.getLblValRenewDep());
                    observable.setTxtDepsoitNo("Renewal");
                    cboConstitution.setEnabled(false);
                    cboAddressType.setEnabled(false);
                    cboSettlementMode.setEnabled(false);
//                    btnDepSubNoAccNew.setEnabled(false);
                    cboCategory.setEnabled(false);
                    ClientUtil.enableDisable(panMaturityDt, false);
                    ClientUtil.enableDisable(panInterestCredit, false);
                    ClientUtil.enableDisable(panDepositDt, false);
                    txtDepsoitNo.setText(observable.getTxtDepsoitNo());
                    rdoMatAlert_report_Yes.setSelected(true);
                    rdoAutoRenewal_No.setSelected(true);
                    double amount = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
                    HashMap freezeMap = new HashMap();
                    if (txtDepsoitNo.getText().equals("Renewal")) {
                        freezeMap.put("DEPOSIT_NO", lblValRenewDep.getText());
                    } else {
                        freezeMap.put("DEPOSIT_NO", txtDepsoitNo.getText());
                    }
                    lst = ClientUtil.executeQuery("getFreezeAccNoForDep", freezeMap);
                    if (lst != null && lst.size() > 0) {
                        freezeMap = (HashMap) lst.get(0);
                        ClientUtil.showMessageWindow("Freeze is Marked Renewal is Not allowing...");
                        btnCancelActionPerformed(null);
                    }
                }
            }
            if (hash.containsKey("OPENING MODE") && hash.get("OPENING MODE").equals("TransferIn")) {
                tranferInflag = true;
                btnOriginalAccountNumberHelp.setEnabled(false);
                btnTransBranchCodeHelp.setEnabled(false);
                HashMap transferIn = new HashMap();
                transferIn.put("DEPOSIT NO", hash.get("ACCOUNT NUMBER"));
                List lst = ClientUtil.executeQuery("getTransInDetails", hash);
                if (lst != null && lst.size() > 0) {
                    transferIn = (HashMap) lst.get(0);
                    tabTermDeposit.add(panTransferInDetails);
                    tabTermDeposit.add(panTransferInDetails, "Transfer In Details");
                }
            }
        } else if (viewType.equals("CUSTOMER ID")) {
            if (hash.containsKey("CUST_ID")) {
                hash.put("CUSTOMER ID", hash.get("CUST_ID"));
            }
            cboAddressType.setSelectedItem(observable.getCbmAddressType().getDataForKey(CommonUtil.convertObjToStr(hash.get("COMMUNICATION ADDRESS"))));
            CustInfoDisplay(CommonUtil.convertObjToStr(hash.get("CUSTOMER ID")));
            List list = ClientUtil.executeQuery("EmpRerfNewNo", hash);
            HashMap hashmap = new HashMap();
            if (list != null && list.size() > 0) {
                hashmap = (HashMap) list.get(0);
            }
            String refno = CommonUtil.convertObjToStr(hashmap.get("EMP_REFNO_NEW"));
            String behavesLike = observable.getBehavesLike();
            String telk_sal = CommonConstants.SAL_REC_MODULE;
            if (behavesLike.equals("RECURRING") && telk_sal.equals("Y") && refno.length() > 0) {
                String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
                panSalaryRecovery1.setVisible(true);
                rdoSalaryRecovery_Yes.setEnabled(true);
                rdoSalaryRecovery_No.setEnabled(true);
            } else {
                panSalaryRecovery1.setVisible(false);
            }
            transactionUI.setCallingApplicantName(lblValCustomerName.getText());
        } else if (viewType.equals("JOINT ACCOUNT")) {
            //            JointAcctDisplay(CommonUtil.convertObjToStr(hash.get("CUSTOMER ID")));
            JointAcctDisplay(CommonUtil.convertObjToStr(hash.get("CUST_ID")));
        } else if (viewType.equals("BRANCH CODE")) {
            TransBranchDisplay(CommonUtil.convertObjToStr(hash.get("BRANCH CODE")));
        } else if (viewType.equals("ACCOUNT NUMBER")) {
            TransAccountNumberDisplay(CommonUtil.convertObjToStr(hash.get("ACCOUNT NUMBER")));
            hash.put("DEPOSIT NO", hash.get("DEPOSIT_NO"));
            actionEditDelete(hash);
            ClientUtil.enableDisable(this, false);
            txtPrintedNoOfTheFdr.setEnabled(true);
            btnSave.setEnabled(true);
            btnCancel.setEnabled(true);
        } else if (viewType.equals(VIEW_TYPE_AGENT_ID)) {
            observable.setTxtAgentId(CommonUtil.convertObjToStr(hash.get("AGENT ID")));
            observable.setLblValAgentname(CommonUtil.convertObjToStr(hash.get("CUSTOMER")));
            txtAgentId.setText(observable.getTxtAgentId());
            lblValAgentname.setText(observable.getLblValAgentname());
        } else if (viewType.equals("CREDIT_ACC_NO")) {
            renewalSubNo = true;
            String prodType = ((ComboBoxModel) cboProdType.getModel()).getKeyForSelected().toString();
            String pid = CommonUtil.convertObjToStr(cboProdId.getSelectedItem());
            String acno = CommonUtil.convertObjToStr(hash.get("ACCOUNTNO"));
            double periodicAmt = CommonUtil.convertObjToDouble(txtPeriodicInterestAmount.getText()).doubleValue();
            String custid = txtCustomerId.getText();
            Date d = DateUtil.getDateMMDDYYYY(tdtMaturityDate.getDateValue());
            Date FdMeturDt = (Date) currDt.clone();
            FdMeturDt.setDate(d.getDate());
            FdMeturDt.setMonth(d.getMonth());
            FdMeturDt.setYear(d.getYear());
            HashMap hashmap = new HashMap();
            hashmap.put("SCHEME_NAME", pid);
            hashmap.put("CUST_ID", custid);
            hashmap.put("ACNO", acno);
            String pType = "";
            String rec = "RECURRING";
            if (prodType != null && !prodType.equals("GL")) {
                List LTDList = ClientUtil.executeQuery("getLTDDetails", hashmap);
                List MDSList = ClientUtil.executeQuery("getMDSAccountDetails", hashmap);
                if (prodType.equals("TD")) {
                    hash.put("ACCOUNTNO", hash.get("ACCOUNTNO") + "_1");
                    pType = CommonUtil.convertObjToStr(hash.get("PRODUCTTYPE"));
                }
                if (LTDList.size() > 0 && LTDList != null && prodType.equals("TL")) {
                    hashmap = (HashMap) LTDList.get(0);
                    String LTDPurp = "true";
                    String behaves = CommonUtil.convertObjToStr(hashmap.get("BEHAVES_LIKE"));
                    String ltdcust = CommonUtil.convertObjToStr(hashmap.get("CUST_ID"));

                    String cid = txtCustomerId.getText();

                    Date matdt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(hashmap.get("MATURITY_DT")));
                    Date maturitydt = (Date) currDt.clone();
                    if (matdt != null) {
                        maturitydt.setDate(matdt.getDate());
                        maturitydt.setMonth(matdt.getMonth());
                        maturitydt.setYear(matdt.getYear());
                    }
                    if (cid.equals(ltdcust)) {
                        if (DateUtil.dateDiff(maturitydt, currDt) > 0) {
                            ClientUtil.displayAlert("Loan Repayment date should be greater than the current date");
                            return;
                        } else {
                            txtCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                            lblCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
                        }
                    } else {
                        int yesNo = 0;
                        String[] options = {"Yes", "No"};
                        yesNo = COptionPane.showOptionDialog(null, "Loan account belongs to different customer. Do you want to continue?", CommonConstants.WARNINGTITLE,
                                COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                null, options, options[0]);
                        if (yesNo == 0) {
                            if (DateUtil.dateDiff(maturitydt, currDt) > 0) {
                                ClientUtil.displayAlert("Loan Repayment date should be greater than the current date");
                                txtCustomerIdCr.setText("");
                                lblCustomerNameCrValue.setText("");
                                return;
                            } else {
                                txtCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                                lblCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
                            }
                        } else {
                            txtCustomerIdCr.setText("");
                            lblCustomerNameCrValue.setText("");
                            return;
                        }
                    }
                } else if (pType.equals(rec)) {

                    String feq = ((ComboBoxModel) cboInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
                    List feqList = ClientUtil.executeQuery("getIntfreqDetails", hashmap);
                    hashmap = (HashMap) feqList.get(0);
                    String intPayferq = CommonUtil.convertObjToStr(hashmap.get("INTPAY_FREQ"));
                    double Rdamt = CommonUtil.convertObjToDouble(hashmap.get("DEPOSIT_AMT")).doubleValue();
                    Date date = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(hashmap.get("MATURITY_DT")));
                    String cid = CommonUtil.convertObjToStr(hashmap.get("CUST_ID"));
                    Date RDMatureDt = (Date) currDt.clone();
                    RDMatureDt.setDate(date.getDate());
                    RDMatureDt.setMonth(date.getMonth());
                    RDMatureDt.setYear(date.getYear());
                    if (feq.equals(intPayferq)) {
                        if (periodicAmt >= Rdamt) {
                            if (FdMeturDt.before(RDMatureDt)) {
                                int yesNo = 0;
                                String[] options = {"Yes", "No"};
                                yesNo = COptionPane.showOptionDialog(null, "FD Meturity date is less than the RD meturity date. Do you want to continue?", CommonConstants.WARNINGTITLE,
                                        COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                        null, options, options[0]);
                                if (yesNo == 0) {
                                    if (DateUtil.dateDiff(RDMatureDt, currDt) > 0) {
                                        ClientUtil.displayAlert("RD has Matured");
                                        return;
                                    } else {
                                        if (cid.equals(custid)) {
                                            txtCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                                            lblCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
                                        } else {
                                            yesNo = COptionPane.showOptionDialog(null, "RD account belongs to different customer. Do you want to continue?", CommonConstants.WARNINGTITLE,
                                                    COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                                    null, options, options[0]);
                                            if (yesNo == 0) {
                                                txtCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                                                lblCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
                                            } else {
                                                txtCustomerIdCr.setText("");
                                                lblCustomerNameCrValue.setText("");
                                                return;
                                            }
                                        }
                                    }
                                } else {
                                    return;
                                }
                            } else {
                                int yesNo = 0;
                                String[] options = {"Yes", "No"};
                                if (DateUtil.dateDiff(RDMatureDt, currDt) > 0) {
                                    ClientUtil.displayAlert("RD has Matured");
                                    return;
                                } else {
                                    if (cid.equals(custid)) {
                                        txtCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                                        lblCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
                                    } else {
                                        yesNo = COptionPane.showOptionDialog(null, "RD account belongs to different customer. Do you want to continue?", CommonConstants.WARNINGTITLE,
                                                COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                                null, options, options[0]);
                                        if (yesNo == 0) {
                                            txtCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                                            lblCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
                                        } else {
                                            txtCustomerIdCr.setText("");
                                            lblCustomerNameCrValue.setText("");
                                            return;
                                        }
                                    }
                                }

                            }
                        } else {
                            ClientUtil.displayAlert("FD Interest amount lesser than RD instalment amount");
                            txtCustomerIdCr.setText("");
                            lblCustomerNameCrValue.setText("");
                            return;
                        }

                    } else {
                        ClientUtil.displayAlert("FD Interest payment frequency and RD instalment frequency not same");
                        txtCustomerIdCr.setText("");
                        lblCustomerNameCrValue.setText("");
                        return;
                    }
                } else if (prodType.equals("TD")) {
                    ClientUtil.displayAlert("Please select only RD type account");
                    cboProdId.setSelectedItem(null);
                    txtCustomerIdCr.setText("");
                    lblCustomerNameCrValue.setText("");
                    return;
                } else if (prodType.equals("MDS")) {
                    if (MDSList != null && MDSList.size() > 0) {
                        hashmap = (HashMap) MDSList.get(0);
                        String memNo = CommonUtil.convertObjToStr(hashmap.get("MEMBER_NO"));
                        String custMem = CommonUtil.convertObjToStr(hashmap.get("CUST_MEMBER"));
                        Date endDT = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(hashmap.get("CHIT_END_DT")));
                        Date chitEndDT = (Date) currDt.clone();
                        chitEndDT.setDate(endDT.getDate());
                        chitEndDT.setMonth(endDT.getMonth());
                        chitEndDT.setYear(endDT.getYear());
                        if (memNo.equals(custMem)) {
                            if (DateUtil.dateDiff(chitEndDT, currDt) > 0) {
                                ClientUtil.displayAlert("Chit end date Should be greate tneh the current date");
                                return;
                            } else {
                                txtCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                                lblCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
                            }
                        } else {
                            int yesNo = 0;
                            String[] options = {"Yes", "No"};
                            yesNo = COptionPane.showOptionDialog(null, "MDS account belongs to different customer. Do you want to continue?", CommonConstants.WARNINGTITLE,
                                    COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                    null, options, options[0]);
                            if (yesNo == 0) {
                                if (DateUtil.dateDiff(chitEndDT, currDt) > 0) {
                                    ClientUtil.displayAlert("Chit end date Should be greate tneh the current date");
                                    return;
                                } else {
                                    txtCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                                    lblCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
                                }
                            } else {
                                txtCustomerIdCr.setText("");
                                lblCustomerNameCrValue.setText("");
                                return;
                            }
                        }

                    }
                } else {
                    txtCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                    lblCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
                }

            } else {
                txtCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD")));
                lblCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD DESCRIPTION")));
            }

        } else if (viewType.equals("RENEWAL_CREDIT_ACC_NO")) {
            renewalSubNo = true;
            String prodType = ((ComboBoxModel) cboRenewalProdType.getModel()).getKeyForSelected().toString();
            if (prodType != null && !prodType.equals("GL")) {
                if (prodType.equals("TD")) {
                    hash.put("ACCOUNTNO", hash.get("ACCOUNTNO") + "_1");
                }
                txtRenewalCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                lblRenewalCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
            } else {
                txtRenewalCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD")));
                lblRenewalCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD DESCRIPTION")));
            }
        } else if (viewType.equals("RENEWAL_DEP_TRANS_ACC_NO")) {
            renewalSubNo = true;
            String prodType = ((ComboBoxModel) cboRenewalDepTransProdType.getModel()).getKeyForSelected().toString();
            if (prodType != null && !prodType.equals("GL")) {
                if (prodType.equals("TD")) {
                    hash.put("ACCOUNTNO", hash.get("ACCOUNTNO") + "_1");
                }
                txtRenewalDepCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                lblRenewalCustNameValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
            } else {
                txtRenewalDepCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD")));
                lblRenewalCustNameValue.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD DESCRIPTION")));
            }
        } else if (viewType.equals("RENEWAL_INT_TRANS_ACC_NO")) {
            renewalSubNo = true;
            String prodType = ((ComboBoxModel) cboRenewalInterestTransProdType.getModel()).getKeyForSelected().toString();
            if (prodType != null && !prodType.equals("GL")) {
                if (prodType.equals("TD")) {
                    hash.put("ACCOUNTNO", hash.get("ACCOUNTNO") + "_1");
                }
                txtRenewalIntCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                lblRenewalInterestCustNameVal.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
            } else {
                txtRenewalIntCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD")));
                lblRenewalInterestCustNameVal.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD DESCRIPTION")));
            }
        } else if (viewType.equals("EXTENSION_TRANS")) {
            renewalSubNo = true;
            String prodType = ((ComboBoxModel) cboExtensionTransProdType.getModel()).getKeyForSelected().toString();
            if (prodType != null && !prodType.equals("GL")) {
                if (prodType.equals("TD")) {
                    hash.put("ACCOUNTNO", hash.get("ACCOUNTNO") + "_1");
                }
                txtExtensionTransCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                lblExtensionTransCustNameVal.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
            } else {
                txtExtensionTransCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD")));
                lblExtensionTransCustNameVal.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD DESCRIPTION")));
            }
        } else if (viewType.equals("EXTENSION_PAYMODE")) {
            renewalSubNo = true;
            String prodType = ((ComboBoxModel) cboExtensionProdType.getModel()).getKeyForSelected().toString();
            if (prodType != null && !prodType.equals("GL")) {
                if (prodType.equals("TD")) {
                    hash.put("ACCOUNTNO", hash.get("ACCOUNTNO") + "_1");
                }
                txtExtensionCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                lblExtensionCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMERNAME")));
            } else {
                txtExtensionCustomerIdCr.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD")));
                lblExtensionCustomerNameCrValue.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD DESCRIPTION")));
            }
        } else if (viewType.equals("EXISTING_CUSTOMER") && txtExistingAcctNo.getText().length() > 0) {
            txtCustomerId.setText(CommonUtil.convertObjToStr(hash.get("CUST_ID")));
            cboAddressType.setSelectedItem(observable.getCbmAddressType().getDataForKey(CommonUtil.convertObjToStr(hash.get("COMM_ADDR_TYPE"))));
            CustInfoDisplay(CommonUtil.convertObjToStr(hash.get("CUST_ID")));

            //            HashMap existingMap = new HashMap();
            //            existingMap.put("ACT_NUM",txtExistingAcctNo.getText());
            //            List mapDataList = ClientUtil.executeQuery("getSelectExistingCustId", existingMap);
            //            //system.out.println("#### mapDataList :"+mapDataList);
            //            if (mapDataList!=null && mapDataList.size()>0) {
            //                existingMap = (HashMap)mapDataList.get(0);
            //                existingMap.put("ACT_NUM",txtExistingAcctNo.getText());
            //                fillData(existingMap);
            //            }else{
            //                ClientUtil.showAlertWindow("Invalid Account No");
            //                txtExistingAcctNo.setText("");
            //                return;
            //            }
        }
        if (viewType.equals(ClientConstants.VIEW_TYPE_EDIT) || viewType == (ClientConstants.VIEW_TYPE_AUTHORIZE)
                && txtAgentId.getText().length() > 0) {
            HashMap agentMap = new HashMap();
            agentMap.put("AGENT_ID", txtAgentId.getText());
            List lst = ClientUtil.executeQuery("getAgentIdEditMode", agentMap);
            if (lst != null && lst.size() > 0) {
                agentMap = (HashMap) lst.get(0);
                observable.setTxtAgentId(txtAgentId.getText());
                observable.setLblValAgentname(CommonUtil.convertObjToStr(agentMap.get("Name")));
                lblValAgentname.setText(observable.getLblValAgentname());
            }
        }
        if (chkAuthorizedSignatory.isSelected() == true) {
            //            tabTermDeposit.add(authSignUI);
            tabTermDeposit.add(authSignUI, "Authorized Signatory");
            tabTermDeposit.resetVisits();
            ClientUtil.enableDisable(authSignUI, true);
            authSignUI.setAuthEnableDisable(false);
            authSignUI.setAuthOnlyNewBtnEnable();
            authSignUI.setAllAuthInstEnableDisable(false);
            authSignUI.setAuthInstOnlyNewBtnEnable();
            //            authSignUI.setViewType(viewType);
            authSignUI.setLblStatus(observable.getLblStatus());
            authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
            authSignUI.setAuthOnlyNewSaveBtnsEnable();
            authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
            // To add the Borrower level Customer ID's in Authorized Signatory's
            // acctLevelCustomerList
            addCustIDNAuthSignatory();
        }
        if (chkPowerOfAttorney.isSelected() == true) {
            //            tabTermDeposit.add(poaUI);
            tabTermDeposit.add(poaUI, "Power of Attorney");
            tabTermDeposit.resetVisits();
            ClientUtil.enableDisable(poaUI, true);
            poaUI.setPoANewOnlyEnable();
            poaUI.getPowerOfAttorneyOB().ttNotifyObservers();
            poaUI.ttNotifyObservers();
        }
        if (chkNomineeDetails.isSelected() == true) {
            //            tabTermDeposit.add(nomineeUi);
            tabTermDeposit.add(nomineeUi, "Nominee");
            tabTermDeposit.resetVisits();
            //            ClientUtil.enableDisable(nomineeUi, true);
            nomineeUi.enableDisableNominee_SaveDelete();
            /**
             * * TO get the Max of the deleted Nominee(s) for the particular
             * Account-Holder...
             */
            nomineeUi.callMaxDel(txtDepsoitNo.getText());
            nomineeUi.resetNomineeTab();
            nomineeUi.setActionType(observable.getActionType());
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW_MODE
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT) {
                ClientUtil.enableDisable(nomineeUi, false);
            } else {
                ClientUtil.enableDisable(nomineeUi, true);
            }
        }
        if (viewType.equals(ClientConstants.VIEW_TYPE_EDIT)) {
            rdoOpeningMode_Multiple.setEnabled(false);
     
            //            btnDepSubNoAccNew.setEnabled(false);
        }
        renewdDepNo = observable.getLblValRenewDep();
        //--- If the deposit is renewal, get the prod id.
        if (viewType.equals(ClientConstants.VIEW_TYPE_RENEW)) {
            HashMap statusMap = new HashMap();
            btnSave.setEnabled(true);
            statusMap.put("DEPOSIT_NO", hash.get("DEPOSIT NO"));
            List lst = ClientUtil.executeQuery("getDepositDetailsForLien", statusMap);
            if (lst != null && lst.size() > 0) {
                double amount = 0.0;
                double lienAmt = 0.0;
                for (int i = 0; i < lst.size(); i++) {
                    statusMap = (HashMap) lst.get(i);
                    double availBal = CommonUtil.convertObjToDouble(statusMap.get("AVAILABLE_BALANCE")).doubleValue();
                    double totalBal = CommonUtil.convertObjToDouble(statusMap.get("TOTAL_BALANCE")).doubleValue();
                    if (availBal < totalBal) {
                        amount = CommonUtil.convertObjToDouble(statusMap.get("LIEN_AMOUNT")).doubleValue();
                        lienAmt = amount + lienAmt;
                    }
                }
                HashMap headMap = new HashMap();
                HashMap accHeadMap = new HashMap();
                headMap.put("DEPOSIT_NO", lblValRenewDep.getText());
                accHeadMap.put("DEPOSIT_NO", lblValRenewDep.getText());
                accHeadMap.put("DEPOSIT_RENEWAL", "DEPOSIT_RENEWAL");
                lst = ClientUtil.executeQuery("getProdIdForLienDep", headMap);
                if (lst != null && lst.size() > 0) {
                    headMap = (HashMap) lst.get(0);
                    lst = ClientUtil.executeQuery("getAccountHeadForLTD", accHeadMap);
                    if (lst != null && lst.size() > 0) {
                        accHeadMap = (HashMap) lst.get(0);
                        if (!accHeadMap.get("BEHAVES_LIKE").equals("LOANS_AGAINST_DEPOSITS")) {
                            ClientUtil.showMessageWindow("Lien Exists For This Deposit Customer...\n"
                                    + "Lien Amount is :" + lienAmt);
                            lienStatus = CommonUtil.convertObjToStr("LIEN");
                            btnSave.setEnabled(true);
                            btnCancel.setEnabled(true);
                            btnNew.setEnabled(false);
                            btnEdit.setEnabled(false);
                            btnDelete.setEnabled(false);
                        } else {
                            ClientUtil.showMessageWindow("Loan Against Term Deposit Exists, go and close the Loan/Deposit & come back again...\n"
                                    + "Lien Amount is :" + lienAmt);
                            btnCancelActionPerformed(null);
                            btnCancel.setEnabled(true);
                            btnNew.setEnabled(true);
                            btnEdit.setEnabled(true);
                            btnDelete.setEnabled(true);
                            lienStatus = null;
                            return;
                        }
                    }
                }
            } else {
                lienStatus = null;
                btnSave.setEnabled(true);
                btnCancel.setEnabled(true);
                btnNew.setEnabled(false);
                btnEdit.setEnabled(false);
                btnDelete.setEnabled(false);
            }
            if (viewType.equals(ClientConstants.VIEW_TYPE_RENEW)) {
                renewalMap = new HashMap();
                renewalMap.put("DEPOSIT NO", hash.get("DEPOSIT NO"));
                List lstRenew = ClientUtil.executeQuery("getRenewalCountStartingDep", renewalMap);
                if (lstRenew != null && lstRenew.size() > 0) {
                    renewalMap = (HashMap) lstRenew.get(0);
                    double renewalCount = CommonUtil.convertObjToDouble(renewalMap.get("RENEWAL_COUNT")).doubleValue();
                    HashMap productMap = new HashMap();
                    productMap.put("PROD_ID", renewalMap.get("PROD_ID"));
                    lstRenew = ClientUtil.executeQuery("getMaxNoSameNoAllowed", productMap);
                    if (lstRenew != null && lstRenew.size() > 0) {
                        productMap = (HashMap) lstRenew.get(0);
                        double productCount = CommonUtil.convertObjToDouble(productMap.get("MAX_NO_SAME_RENEWAL")).doubleValue();
                        if (renewalMap.get("BEHAVES_LIKE").equals("FIXED") && productMap.get("SAME_NO_ALLOWED") != null
                                && productMap.get("SAME_NO_ALLOWED").equals("Y") && (renewalCount + 1) > productCount) {
                            ClientUtil.showMessageWindow("Deposit will be Renewed with new Deposit No...");
                            chkRenewSameNo.setVisible(false);
                            lblRenewSamaNo.setVisible(false);

                        }
                    }
                }
                HashMap renewedIntMap = new HashMap();
                renewedIntMap.put("DEPOSIT NO", hash.get("DEPOSIT NO"));
                List intValue = ClientUtil.executeQuery("getPreviousBalInt", renewedIntMap);
                if (intValue != null && intValue.size() > 0) {
                    renewedIntMap = (HashMap) intValue.get(0);
                    if (renewedIntMap.containsKey("PREVIOUS_INT_PAYABLE") && renewedIntMap.get("PREVIOUS_INT_PAYABLE") != null) {
                        lblPreBalIntVal.setText(CommonUtil.convertObjToStr(renewedIntMap.get("PREVIOUS_INT_PAYABLE")));
                    } else {
                        lblPreBalIntVal.setText("0"); //lblPreBalIntVal
                    }
                    observable.setPreBalIntVal(lblPreBalIntVal.getText());
                }
            }
            authSignUI.setLblStatus(observable.getLblStatus());
            poaUI.setLblStatus(observable.getLblStatus());
            authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
            poaUI.ttNotifyObservers();
            //            strProductIdInRenew = CommonUtil.convertObjToStr(observable.getCbmRenewalDepositProdId().getKeyForSelected());
        }
        if (viewType != (ClientConstants.VIEW_TYPE_AUTHORIZE) && viewType != ("ACCOUNT NUMBER")) {
            cboConstitution.setEnabled(true);
            cboAddressType.setEnabled(true);
            chkAuthorizedSignatory.setEnabled(true);
            chkNomineeDetails.setEnabled(true);
            chkPowerOfAttorney.setEnabled(true);
            chkTaxDeductions.setEnabled(true);
            chk15hDeclarations.setEnabled(true);
            chkTaxDeductions.setEnabled(false);
            chk15hDeclarations.setEnabled(false);
            cboSettlementMode.setEnabled(true);
            rdoDeathClaim_Yes.setEnabled(true);
            rdoDeathClaim_No.setEnabled(true);
            txtRemarks.setEnabled(true);
            panStandingInstruction.setEnabled(true);
            panMatAlertRep.setEnabled(true);
            panAutoRenewal.setEnabled(true);
            panWithInterest.setEnabled(true);
            txtPrintedOption.setEnabled(true);
            rdoSalaryRecovery_Yes.setEnabled(true);
            rdoSalaryRecovery_No.setEnabled(true);
        }
        if (viewType == ClientConstants.VIEW_TYPE_EDIT) {
            rdoSalaryRecovery_Yes.setEnabled(true);
            rdoSalaryRecovery_No.setEnabled(true);
        }
        if (viewType.equals(ClientConstants.VIEW_TYPE_RENEW) || panRenewalInformation.isEnabled() == true) {
            ClientUtil.enableDisable(panDepositDetails, false);
            ClientUtil.enableDisable(panMaturityDt, false);
            ClientUtil.enableDisable(panDepositDt, false);
            ClientUtil.enableDisable(panInterestCredit, false);
            ClientUtil.enableDisable(panFreqency, false);
            //            btnDepSubNoAccNew.setEnabled(false);
            tdtDateOfDeposit.setEnabled(false);
            txtPeriodOfDeposit_Years.setEnabled(false);
            txtPeriodOfDeposit_Months.setEnabled(false);
            txtPeriodOfDeposit_Days.setEnabled(false);
            cboInterestPaymentFrequency.setEnabled(false);
            txtDepositAmount.setEnabled(false);
            cboInterestPaymentMode.setEnabled(false);
            cboProdType.setEnabled(false);
            cboProdId.setEnabled(false);
            cboProductId.setEnabled(false);
            cboCategory.setEnabled(false);
            cboRenewalInterestPaymentFrequency.setEnabled(false);
            txtRenewalDepositAmount.setEnabled(false);
            //            btnDepSubNoAccSave.setEnabled(false);
            //            btnRenewalDepSubNoAccNew.setEnabled(false);
            cboInterestPaymentMode.setEnabled(false);
            if (observable.getRdoRenewalWithdrawingInt_No() == true) {
                txtRenewalIntAmtValue.setVisible(false);
                lblRenewalIntAmt.setVisible(false);
                cboRenewalInterestTransMode.setVisible(false);
                lblRenewalInterestTransMode.setVisible(false);
            }
        }
        if (viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE)) {
            HashMap customerMap = new HashMap();
            customerMap.put("CUST_ID", txtCustomerId.getText());
            List lst = ClientUtil.executeQuery("getCustomerStatusForDep", customerMap);
            if (lst != null && lst.size() > 0) {
                customerMap = (HashMap) lst.get(0);
                ClientUtil.showAlertWindow("Please First Authorize Customer Id Creation...");
                btnCancelActionPerformed(null);
                return;
            }
        }
        if (viewType.equals(ClientConstants.VIEW_TYPE_AUTHORIZE) || viewType.equals(ClientConstants.VIEW_TYPE_EDIT)) {
            HashMap remarksMap = new HashMap();
            remarksMap.put("DEPOSIT NO", hash.get("DEPOSIT NO"));
            List lstRemarks = ClientUtil.executeQuery("getRemarksForDep", remarksMap);
            if (lstRemarks != null && lstRemarks.size() > 0) {
                remarksMap = (HashMap) lstRemarks.get(0);
                ClientUtil.showMessageWindow("Remarks\n" + remarksMap.get("REMARKS"));
                enableFields(true);
            }
        }
        if (observable.getActionType() != ClientConstants.ACTIONTYPE_NEW) {
            if (observable.getRdoAutoRenewal_Yes() == true) {
                rdoAutoRenewal_Yes.setSelected(true);
                panWithInterest.setEnabled(true);
                panWithInterest.setVisible(true);
                rdoWith_intRenewal_Yes.setVisible(true);
                rdoWith_intRenewal_No.setVisible(true);
                if (observable.getRdowithIntRenewal_Yes() == true) {
                    rdoWith_intRenewal_Yes.setSelected(true);
                } else {
                    rdoWith_intRenewal_No.setSelected(true);
                }
                lblWithIntAutoRenewal.setVisible(true);
            } else {
                rdoAutoRenewal_No.setSelected(true);
                panWithInterest.setEnabled(false);
                panWithInterest.setVisible(false);
                lblWithIntAutoRenewal.setVisible(false);
            }
            if (observable.getRdoCalenderFreq_Yes() == true) {
                tdtCalenderFreqDate.setVisible(false);
                lblCalenderFreqDate.setVisible(true);
                cboCalenderFreqDay.setVisible(true);
            } else {
                tdtCalenderFreqDate.setVisible(false);
                lblCalenderFreqDate.setVisible(false);
                cboCalenderFreqDay.setVisible(false);
            }
            //            chkMember.setEnabled(true);
            rdoAutoRenewal_Yes.setEnabled(true);
            rdoAutoRenewal_No.setEnabled(true);
            rdoWith_intRenewal_Yes.setEnabled(true);
            rdoWith_intRenewal_No.setEnabled(true);
            //            cboMemberType.setVisible(false);
            //            lblMemberType.setVisible(false);
        } else {
            rdoDeathClaim_No.setEnabled(false);
            rdoDeathClaim_Yes.setEnabled(false);
        }
        if (!viewType.equals(ClientConstants.VIEW_TYPE_RENEW) && !viewType.equals("CREDIT_ACC_NO")) {
            //            enablingDisabling();
        }
        if (viewType.equals("RENEWAL_CREDIT_ACC_NO") || viewType.equals("RENEWAL_INT_TRANS_ACC_NO")
                || viewType.equals("RENEWAL_DEP_TRANS_ACC_NO") || viewType.equals("JOINT ACCOUNT")) {
        } else if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW) {
            ClientUtil.enableDisable(panRenewalDepositTransDetails, false);
            ClientUtil.enableDisable(panRenewalInterestDetails, false);
            ClientUtil.enableDisable(panRenewalMaturityDt, false);
            ClientUtil.enableDisable(panRenewalDepositDt, false);
            ClientUtil.enableDisable(panRenewalInterestCredit, false);
            ClientUtil.enableDisable(panRenewalFreqency, false);
            txtCustomerId.setEnabled(false);
        } else if (observable.getActionType() == ClientConstants.ACTIONTYPE_EXTENSION) {
            ClientUtil.enableDisable(panRenewalDepositTransDetails, false);
            ClientUtil.enableDisable(panRenewalInterestDetails, false);
            ClientUtil.enableDisable(panRenewalMaturityDt, false);
            ClientUtil.enableDisable(panRenewalDepositDt, false);
            ClientUtil.enableDisable(panRenewalInterestCredit, false);
            ClientUtil.enableDisable(panRenewalFreqency, false);
            txtDepsoitNo.setText("Extension");
            lblRenewDep.setText("Extension of Deposit");
            lblValRenewDep.setText(CommonUtil.convertObjToStr(hash.get("DEPOSIT NO")));
            txtDepsoitNo.setEnabled(false);
            txtCustomerId.setEnabled(false);
            cboInterestPaymentFrequency.setEnabled(false);
            cboInterestPaymentMode.setEnabled(false);
        }
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW
                || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW_MODE
                || observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE
                || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT) {
            ClientUtil.enableDisable(panAccountInformationLeftPanel, false);
            ClientUtil.enableDisable(panInput, false);
            ClientUtil.enableDisable(panFreqency, false);
            ClientUtil.enableDisable(panRenewalDepositTransDetails, false);
            ClientUtil.enableDisable(panRenewalMaturityDt, false);
            ClientUtil.enableDisable(panRenewalInterestCredit, false);
        }
        if (viewType.equals("CREDIT_ACC_NO")) {
            cboInterestPaymentMode.setEnabled(true);
            cboProdType.setEnabled(true);
            cboProdId.setEnabled(true);
        }
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
                panAgentId.setEnabled(true);
                lblAgentName.setVisible(true);
                btnAgentIdFileOpen.setEnabled(true);
                lblAgentName.setText("Agent Name");
                panStandingInstruction.setVisible(false);
                lblStandingInstruction.setVisible(false);
            } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr)) {
                panAgentId.setEnabled(false);
                lblAgentName.setVisible(true);
                btnAgentIdFileOpen.setEnabled(false);
                lblAgentName.setText("Agent Name");
                panStandingInstruction.setVisible(true);
                lblStandingInstruction.setVisible(true);
            } else {
                panAgentId.setEnabled(false);
                lblAgentName.setVisible(true);
                btnAgentIdFileOpen.setEnabled(false);
                lblAgentName.setText("Auto Renewal");
                panStandingInstruction.setVisible(false);
                lblStandingInstruction.setVisible(false);
            }
            ClientUtil.enableDisable(panRenewalDepositTransDetails, false);
            ClientUtil.enableDisable(panRenewalInterestDetails, false);
            ClientUtil.enableDisable(panRenewalMaturityDt, false);
            ClientUtil.enableDisable(panRenewalDepositDt, false);
            ClientUtil.enableDisable(panRenewalInterestCredit, false);
            ClientUtil.enableDisable(panRenewalFreqency, false);
            txtCustomerId.setEnabled(false);
            txtPanNumber.setEnabled(true);
            btnRenewalDepCustomerIdFileOpenCr.setEnabled(false);
            btnRenewalIntCustomerIdFileOpenCr.setEnabled(false);
            ClientUtil.enableDisable(panAutoRenewal, false);
            if (panRenewalInformation.isEnabled() == true
                    && CommonUtil.convertObjToDouble(txtRenewalDepositAmount.getText()).doubleValue() > 0) {// || panExtensionInformation.isEnabled() == true){
                txtRenewalPeriodOfDeposit_Years.setEnabled(true);
                txtRenewalPeriodOfDeposit_Days.setEnabled(true);
                txtRenewalPeriodOfDeposit_Months.setEnabled(true);
                cboRenewalDepositCategory.setEnabled(true);
                cboRenewalInterestPaymentMode.setEnabled(true);
                if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                    cboRenewalInterestPaymentFrequency.setEnabled(true);
                    cboRenewalInterestPaymentMode.setEnabled(true);
                } else {
                    cboRenewalInterestPaymentFrequency.setEnabled(false);
                    cboRenewalInterestPaymentMode.setEnabled(false);
                }
                txtRenewalPrintedOption.setEnabled(true);
            }
        }
        if (lblMemberVal.getText() != null && !lblMemberVal.getText().equals("NONE")) {
            if (observable.getChk15hDeclarations() == false) {
                chk15hDeclarations.setSelected(false);
                chkTaxDeductions.setSelected(false);
            }
        } else {
            if (observable.getChk15hDeclarations() == false) {
                chkTaxDeductions.setSelected(true);
            }
        }
        if (observable.getRdoRenewalAutoRenewal_Yes() == true) {
            lblRenewalWithIntNew.setVisible(true);
            rdoRenewalWith_intRenewal_Yes.setVisible(true);
            rdoRenewalWith_intRenewal_No.setVisible(true);
        } else {
            lblRenewalWithIntNew.setVisible(false);
            rdoRenewalWith_intRenewal_Yes.setVisible(false);
            rdoRenewalWith_intRenewal_No.setVisible(false);
        }
        if (observable.getRdoCalenderFreq_Yes() == true) {
            rdoCalender_Freq_Yes.setSelected(true);
        } else {
            rdoCalender_Freq_No.setSelected(true);
        }
        if (observable.getRdoStandingInstruction_Yes() == true) {
            rdoStandingInstruction_Yes.setSelected(true);
        } else {
            rdoStandingInstruction_No.setSelected(true);
        }
        if (alreadyOpenedRecords == true) {
            btnSave.setEnabled(false);
        } else {
            btnSave.setEnabled(true);
        }
        if (viewType.equals("AUTHORIZE") || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) {
            setBtnJointAccnt(false);
            poaUI.setPoAToolBtnsEnableDisable(false);
            poaUI.setAllPoAEnableDisable(false);
        }
        if (hash.containsKey("CHECK")) {
            btnCheck();
            ClientUtil.enableDisable(panPresentPosition, false);
        }
        if (hash.containsKey("FROM_AUTHORIZE_LIST_UI")) {
            btnAuthorize.setEnabled(true);
            btnReject.setEnabled(true);
            btnSave.setEnabled(false);
            btnCancel.setEnabled(true);
            btnCustomerIdFileOpen1.setEnabled(false);
        }
        if (hash.containsKey("FROM_MANAGER_AUTHORIZE_LIST_UI")) {
            btnAuthorize.setEnabled(true);
            btnReject.setEnabled(true);
            btnSave.setEnabled(false);
            btnCancel.setEnabled(true);
            btnCustomerIdFileOpen1.setEnabled(false);
        }
        if (hash.containsKey("FROM_CASHIER_AUTHORIZE_LIST_UI")) {
            btnAuthorize.setEnabled(true);
            btnReject.setEnabled(true);
            btnSave.setEnabled(false);
            btnCancel.setEnabled(true);
            btnCustomerIdFileOpen1.setEnabled(false);
        }
        if (viewType == ClientConstants.VIEW_TYPE_EDIT && hash.get("DEPOSIT NO") != null) {
            HashMap authorizeByMap = new HashMap();
            authorizeByMap.put("DEPOSIT_NO", hash.get("DEPOSIT NO"));
            List lst = ClientUtil.executeQuery("getauthorizeByDeposit", authorizeByMap);
            if (lst != null && lst.size() > 0) {
                authorizeByMap = (HashMap) lst.get(0);
                authorizeBy = CommonUtil.convertObjToStr(authorizeByMap.get("AUTHORIZE_BY"));
                if (authorizeBy.equals("")) {
                    ClientUtil.enableDisable(panPeriodOfDeposit, true);
                    txtPeriodOfDeposit_Years.setEnabled(true);
                    txtPeriodOfDeposit_Months.setEnabled(true);
                    txtPeriodOfDeposit_Days.setEnabled(true);
                }
            }
        }
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW) {
            txtCustomerId.setEnabled(true);
            String txtCustomer = txtCustomerId.getText();
            HashMap mapDOB = new HashMap();
            HashMap cust = new HashMap();
            cust.put("CUSTOMER ID", txtCustomer);
            List lstDOB = ClientUtil.executeQuery("getCustDOB", cust);
//            //system.out.println("lstDOB====" + lstDOB);
            int age = 0;
            if (lstDOB != null && lstDOB.size() > 0) {
                mapDOB = (HashMap) lstDOB.get(0);
                if (mapDOB.get("DOB") != null) {
                    Date dob = (Date) mapDOB.get("DOB");
                    age = calAge1(dob);
                } else {
                    ClientUtil.showAlertWindow("DOB is not set for this customer");
                }
            }
//            HashMap mapRtrAge = new HashMap();
//            List lstRtrAge = ClientUtil.executeQuery("getRtrAge", mapRtrAge);
//            if (!lstRtrAge.isEmpty()) {
//                mapRtrAge = (HashMap) lstRtrAge.get(0);
//            }
//            String strRtrAge = mapRtrAge.get("RETIREMENT_AGE").toString();
//            int rtrAge = Integer.parseInt(strRtrAge);
             int rtrAge = TrueTransactMain.SENIOR_CITIZEN_AGE;
            //system.out.println("rtrAge" + rtrAge);
            //system.out.println("age" + age);
            if (age >= rtrAge) {
                observable.setCboCategory("Senior Citizens");
                cboCategory.setSelectedItem(observable.getCboCategory());
            }
            txtCustomerId.setEnabled(false);
        }
        //Added By Suresh
        if (txtCustomerId.getText().length() > 0) {
            btnDisplay.setEnabled(true);

        } else {
            btnDisplay.setEnabled(false);
        }
        alreadyOpenedRecords = false;
        setModified(true);
        if (rejectFlag == 1) {
            btnReject.setEnabled(false);
        }
        if (viewType.equals("Account")) {
           // flag1 = true;
            //System.out.println("hash");
            String DepositNum = CommonUtil.convertObjToStr(hash.get("DEPOSIT_ACT_NUM"));
            System.out.println("DepositNum=======" + DepositNum);
            txtDepsoitNo.setText(DepositNum);
            // if(flag=false){
            txtDepsoitNoFocusLost(null);


        }
        if(observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE){
	        btnAuthorize.setEnabled(true);
	        btnAuthorize.requestFocusInWindow();
	        btnAuthorize.setFocusable(true);
       }
        //Added By Kannan AR
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW || observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
            chkMobileNumRequired.setEnabled(true);
        }                
    }

    private void printDepositCertificate(HashMap hashMap) {
        System.out.println("inside print");
        String actNum = "";
        List acctNo = null;
        System.out.println("printMap"+hashMap);
        //Changed By Suresh
//        if (hashMap.containsValue("Renewal")) {
//            actNum = (String)hashMap.get("NEW_DEPOSIT_NO");
//        } else {
//            actNum = (String)hashMap.get("DEPOSIT NO");
//        }
//        if (hashMap.containsValue("NEW_DEPOSIT_NO")) {
//            System.out.println("inside new deposit no");
//            actNum = (String) hashMap.get("NEW_DEPOSIT_NO");
//        } 
        if(observable.getActionType()== ClientConstants.ACTIONTYPE_EDIT) {
            actNum = (String) hashMap.get("DEPOSIT NO");
            System.out.println("inside out");
        }else{
            acctNo = observable.getDepositNoList();
            System.out.println("list"+acctNo);
        }
        int yesNo = 0;
        int bondyesNo = 0;
        String[] options = {"Yes", "No"};
        yesNo = COptionPane.showOptionDialog(null, "Do you want to print Deposit Certificate?", CommonConstants.WARNINGTITLE,
                COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                null, options, options[0]);
        //system.out.println("#$#$$ yesNo : " + yesNo);
        if(observable.getActionType()==ClientConstants.ACTIONTYPE_EDIT){            
            if (yesNo == 0) {
                if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                    HashMap cummMap = new HashMap();
                    HashMap paramMap = null;
                    String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
                    //system.out.println("@#@# prodId cummm>>>" + prodId);
                    cummMap.put("PROD_ID", prodId);
                    List cummList = ClientUtil.executeQuery("getCummCertificatePrint", cummMap);
                    if (cummList != null && cummList.size() > 0) {
                        cummMap = (HashMap) cummList.get(0);
                        if (cummMap.get("CUMM_CERTIFICATE_PRINT") != null) {
                            if (cummMap.get("CUMM_CERTIFICATE_PRINT").equals("Y")) {
                                //            TTIntegration ttIntgration = null;
                                paramMap = new HashMap();
                                //system.out.println("txtDepsoitNo cumm>>>" + observable.getProxyReturnMap().get("DEPOSIT NO"));
                            // paramMap.put("DepNo", observable.getProxyReturnMap().get("DEPOSIT NO"));
                                System.out.println("@r@iS@h..."+actNum);
                                paramMap.put("DepNo",actNum);
                                paramMap.put("TransDt", this.currDt);
                                paramMap.put("BranchId", ProxyParameters.BRANCH_ID);
                                TTIntegration.setParam(paramMap);
                                TTIntegration.integrationForPrint("CummulativeDepositCertificate");
                            }
                        }
                    }
                } else {
                    com.see.truetransact.clientutil.ttrintegration.TTIntegration ttIntgration = null;
                    HashMap reportTransIdMap = new HashMap();
                    reportTransIdMap.put("Act_Num", actNum);
                    ttIntgration.setParam(reportTransIdMap);
                    ttIntgration.integrationForPrint("DepositReceipt");

                    HashMap singleAuthorizeMap = new HashMap();
                    //singleAuthorizeMap.put("PRINT_NO", "PRINT_SYS");//Receipt No
                    singleAuthorizeMap.put("PRINT_NO", CommonUtil.convertObjToInt(0));//Changed by Revathi 07-03-24 reff by Rajesh.
                    singleAuthorizeMap.put("DEPOSIT_NO", actNum);//Account No
                    ClientUtil.execute("updatePrintingHashMap", singleAuthorizeMap);
                }
            }
        }
        if(observable.getActionType()==ClientConstants.ACTIONTYPE_NEW && acctNo != null && acctNo.size()>0){
            System.out.println("inside new");
            String accountNo = "";
            for(int i = 0 ; i < acctNo.size() ; i++){
                accountNo = CommonUtil.convertObjToStr(acctNo.get(i));
                if (yesNo == 0) {
                    if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                        HashMap cummMap = new HashMap();
                        HashMap paramMap = null;
                        String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
                        //system.out.println("@#@# prodId cummm>>>" + prodId);
                        cummMap.put("PROD_ID", prodId);
                        List cummList = ClientUtil.executeQuery("getCummCertificatePrint", cummMap);
                        if (cummList != null && cummList.size() > 0) {
                            cummMap = (HashMap) cummList.get(0);
                            if (cummMap.get("CUMM_CERTIFICATE_PRINT") != null) {
                                if (cummMap.get("CUMM_CERTIFICATE_PRINT").equals("Y")) {
                                    //            TTIntegration ttIntgration = null;
                                    paramMap = new HashMap();
                                    //system.out.println("txtDepsoitNo cumm>>>" + observable.getProxyReturnMap().get("DEPOSIT NO"));
                                // paramMap.put("DepNo", observable.getProxyReturnMap().get("DEPOSIT NO"));
                                    System.out.println("@r@iS@h..."+accountNo);
                                    paramMap.put("DepNo",accountNo);
                                    paramMap.put("TransDt", this.currDt);
                                    paramMap.put("BranchId", ProxyParameters.BRANCH_ID);
                                    TTIntegration.setParam(paramMap);
                                    TTIntegration.integrationForPrint("CummulativeDepositCertificate");
                                }
                            }
                        }
                    } else {
                        com.see.truetransact.clientutil.ttrintegration.TTIntegration ttIntgration = null;
                        HashMap reportTransIdMap = new HashMap();
                        reportTransIdMap.put("Act_Num", accountNo);
                        ttIntgration.setParam(reportTransIdMap);
                        ttIntgration.integrationForPrint("DepositReceipt");

                        HashMap singleAuthorizeMap = new HashMap();
                        //singleAuthorizeMap.put("PRINT_NO", "PRINT_SYS");//Receipt No
                        singleAuthorizeMap.put("PRINT_NO", CommonUtil.convertObjToInt(0));//Changed by Revathi 07-03-24 reff by Rajesh.
                        singleAuthorizeMap.put("DEPOSIT_NO", accountNo);//Account No
                        ClientUtil.execute("updatePrintingHashMap", singleAuthorizeMap);
                    }
                    if(i==0){
                       String[] opt = {"Yes", "No"}; 
                       bondyesNo = COptionPane.showOptionDialog(null, "Successfully taken Deposit Certifiacate?", CommonConstants.WARNINGTITLE,
                            COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                            null, opt, opt[0]);
                    }
                    if (bondyesNo == 0) {
                        HashMap countUpdateMap = new HashMap();
                        countUpdateMap.put("DEPOSIT_NO", accountNo);//Account No
                        ClientUtil.execute("updateCertificatePrintCount", countUpdateMap);
                    }
                }
            }
        }
    }

    private void TransBranchDisplay(String brCode) {
        HashMap hash = new HashMap();
        hash.put("BRANCH CODE", brCode);
        observable.populateTransBranchName(hash);
        this.txtTransferingBranchCode.setText(observable.getTxtTransferingBranchCode());
        this.lblValTransferingBranchName.setText(observable.getLblValTransferingBranchName());
        hash = null;
    }

    private void TransAccountNumberDisplay(String accNum) {
        HashMap hash = new HashMap();
        hash.put("DEPOSIT_NO", accNum);
        observable.populateAccountNumber(hash);
        txtOriginalAccountNumber.setText(observable.getTxtOriginalAccountNumber());
        tdtOriginalDateOfDeposit.setDateValue(observable.getTdtOriginalDateOfDeposit());
        hash = null;
    }

    private void JointAcctDisplay(String custId) {
        HashMap hash = new HashMap();
        hash.put("CUST_ID", custId);
        observable.populateJointAccntTable(hash);
        tblJointAcctHolder.setModel(observable.getTblJointAccnt());
        btnJointAcctDel.setEnabled(false);
        btnJointAcctToMain.setEnabled(false);
        poaUI.getPowerOfAttorneyOB().ttNotifyObservers();
        authSignUI.addAcctLevelCustomer(custId);
        hash = null;
    }

    private void CustInfoDisplay(String custId) {
        HashMap hash = new HashMap();
        hash.put("CUST_ID", custId);
        if (viewType == ClientConstants.VIEW_TYPE_EDIT) {
            HashMap custMap = new HashMap();
            custMap.put("DEPOSIT_NO", txtDepsoitNo.getText());
            custMap.put("CUST_ID", custId);
            List lst = ClientUtil.executeQuery("getCustomerIdDeposit", custMap);
            if (lst != null && lst.size() > 0) {
                custMap = (HashMap) lst.get(0);
                hash.put("CUSTOMER ID", custMap.get("CUST_ID"));
                hash.put("OPENING_MODE", custMap.get("OPENING_MODE"));
            }
        }
        // Remove the old Main CUSTOMER ID
        authSignUI.removeAcctLevelCustomer(observable.getTxtCustomerId());
        //system.out.println("custInfoDisplay : " + hash);
        observable.populateScreen(hash, false);
        updateCustomerDetails();
		observable.setTxtCustomerId(custId);
        txtCustomerId.setText(observable.getTxtCustomerId());
        cboCategory.setSelectedItem(observable.getCboCategory());
        // Add the new Main CUSTOMER ID
        authSignUI.addAcctLevelCustomer(observable.getTxtCustomerId());
        tblJointAcctHolder.setModel(observable.getTblJointAccnt());
        hash = null;
    }

    private void updateCustomerDetails() {
        lblValCustomerName.setText(observable.getLblValCustomerName());
        lblValDateOfBirth.setText(observable.getLblValDateOfBirth());
        lblValStreet.setText(observable.getLblValStreet());
        lblValArea.setText(observable.getLblValArea());
        lblValCity.setText(observable.getLblValCity());
        lblValState.setText(observable.getLblValState());
        lblValCountry.setText(observable.getLblValCountry());
        lblValPin.setText(observable.getLblValPin());
//        lblValCommunicationAddress.setText(observable.getLblValCommunicationAddress());
        lblMemberVal.setText(observable.getLblMemberVal());
    }

    /*To get the data and populating on the screen,set the status and enabling the apt components*/
    private void actionEditDelete(HashMap hash) {
        if (hash.containsKey("NEW_DEPOSIT_NO")) {
            observable.setRenewedNewNo(CommonUtil.convertObjToStr(hash.get("NEW_DEPOSIT_NO")));
        }
        fromActionEditHash = true;
        observable.resetForm();
        poaUI.getPowerOfAttorneyOB().resetAllFieldsInPoA();
        authSignUI.getAuthorizedSignatoryOB().resetAllFieldsInAuthTab();
        //        btnCustomerIdFileOpen.setEnabled(true);
        //        ClientUtil.enableDisable(panAccInf, true);
        ClientUtil.enableDisable(panOpenMode, true);
        ClientUtil.enableDisable(panCategory, true);
        observable.setStatus();
        authSignUI.setLblStatus(observable.getLblStatus());
        poaUI.setLblStatus(observable.getLblStatus());
        observable.populateData(hash, nomineeUi.getNomineeOB(), viewType);
        tblDepSubNoAccInfoMousePressed();
        authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
        poaUI.getPowerOfAttorneyOB().ttNotifyObservers();
        updateAccountInfo();
        updatePresentPosition();
        updateDepSubNo();
        updateTranserIn();
        setButtonEnableDisable();
        //--- If Transfer In is selected, it poulates the TransferBranch Name
        if (observable.getRdoOpeningMode_TransferIn() == true) {
            observable.transferInSelect = true;
            //            ClientUtil.enableDisable(panTransferInDetails, true);
            btnTransBranchCodeHelp.setEnabled(true);
            btnOriginalAccountNumberHelp.setEnabled(true);
            TransBranchDisplay(observable.getTxtTransferingBranchCode());
        }

        //--- If Authorized Signatory is selected, it populates the screen
        //        if(observable.getChkAuthorizedSignatory()==true){
        ////            authSignUI.getAuthorizedSignatoryOB().resetAllFieldsInAuthTab();
        ////            authSignUI.setLblStatus(observable.getLblStatus());
        ////            authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
        //        }
        //        //--- If PoA is selected , it populates the screen
        //        if(observable.getChkPowerOfAttorney()==true){
        ////            poaUI.getPowerOfAttorneyOB().resetAllFieldsInPoA();
        //        }
        //        //--- If Nominee details is selected, it populates the screen
        //        if(observable.getChkNomineeDetails()==true){
        //
        //        }
        txtDepsoitNo.setEnabled(true);
        txtDepsoitNo.setText(observable.getTxtDepsoitNo());
        txtDepsoitNo.setEnabled(false);
        tblsEnableDisable(true);
        //--- If the deposit is not renewal, option is disabled to change the Product type.
        if (!viewType.equals(ClientConstants.VIEW_TYPE_RENEW)) {
            cboProductId.setEnabled(false);
        }
        //        btnDepSubNoAccNew.setEnabled(true);
    }

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        viewType = ClientConstants.VIEW_TYPE_NEW;
        transNew = true;
        observable.depositNoList = new ArrayList();
        observable.resetForm();
        poaUI.getPowerOfAttorneyOB().resetAllFieldsInPoA();
        authSignUI.getAuthorizedSignatoryOB().resetAllFieldsInAuthTab();
        btnCustomerIdFileOpen.setEnabled(true);
        btnCustomerIdFileOpen.setEnabled(false);
        rdoOpeningMode_Multiple.setEnabled(true);
        setButtonEnableDisable();
        observable.setActionType(ClientConstants.ACTIONTYPE_NEW);
        observable.setStatus();
        authSignUI.setLblStatus(observable.getLblStatus());
        poaUI.setLblStatus(observable.getLblStatus());
        authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
        poaUI.getPowerOfAttorneyOB().ttNotifyObservers();
        tblsEnableDisable(true);
        observable.ttNotifyObservers();
        setBtnDepSubNo(false);
//        btnDepSubNoAccNew.setEnabled(true);
        //        observable.setTxtDepsoitNo("New");
        //        txtDepsoitNo.setText("New");
        // txtDepsoitNo.setText(observable.getTxtDepsoitNo());
        observable.depSubNoCount = 0;//--- To set the Deposit SubNo to 0 in the NEW Mode
        authSignUI.setAuthEnableDisable(false);
        authSignUI.setAuthTabBtnEnableDisable(false);
        poaUI.setAllPoAEnableDisable(false);
        poaUI.setPoAToolBtnsEnableDisable(false);
        nomineeUi.resetNomineeTab();
        nomineeUi.setBtnEnableDisable(false);
        setModified(true);
        renewdDepNo = "";
        rdoOpeningMode_Multiple.setVisible(true);
        chkTaxDeductions.setSelected(true);
        cboInterestPaymentFrequency.setEnabled(false);
        cboInterestPaymentMode.setEnabled(false);
        btnSave.setEnabled(true);
        btnCustomerIdFileOpen1.setEnabled(false);
        btnPrint.setEnabled(false);
        ClientUtil.enableDisable(panOpenMode, false);
        ClientUtil.enableDisable(panCategory, false);
        ClientUtil.enableDisable(panDepositDetails, false);
        ClientUtil.enableDisable(panModeOfOpening, true);
        txtEditDepositNo.setEnabled(false);
        observable.getCbmConstitution().setKeyForSelected("INDIVIDUAL");
        observable.getCbmSettlementMode().setKeyForSelected("0");
        observable.getCbmInterestPaymentMode().setKeyForSelected("CASH");
        restoreEnableDisableFltPt();
        observable.getCbmCategory().setKeyForSelected("GENERAL_CATEGORY");
        transactionUI.cancelAction(false);
        transactionUI.setButtonEnableDisable(true);
        transactionUI.resetObjects();
        transactionUI.setCallingUiMode(ClientConstants.ACTIONTYPE_NEW);
        txtCustomerId.setEnabled(false);// Added by nithya on 26-09-2016
//        cboInterestPaymentMode.setSelectedItem(observable.getCbmInterestPaymentMode().getDataForKey("CASH"));
    }//GEN-LAST:event_btnNewActionPerformed
    private void setBtnDepSubNo(boolean val) {
//        btnDepSubNoAccNew.setEnabled(val);
//        btnDepSubNoAccSave.setEnabled(val);
//        btnDepSubNoAccDel.setEnabled(val);
    }

    private void setBtnJointAccnt(boolean val) {
        btnJointAcctDel.setEnabled(val);
        btnJointAcctNew.setEnabled(val);
        btnJointAcctToMain.setEnabled(val);
    }

    private void lienToUnlien(String lienStatus) {
        HashMap accHeadMap = new HashMap();
        if (lienStatus != null && lienStatus.equals("LIEN")) {
            depositLien = new DepositLienUI();
            HashMap lienMap = new HashMap();
            HashMap authMap = new HashMap();
            HashMap headMap = new HashMap();
            lienMap.put("DEPOSIT_NO", lblValRenewDep.getText());
            authMap.put("DEPOSIT_NO", lblValRenewDep.getText());
            headMap.put("DEPOSIT_NO", lblValRenewDep.getText());
            accHeadMap.put("DEPOSIT_NO", lblValRenewDep.getText());
            List lst = ClientUtil.executeQuery("getProdIdForLienDep", headMap);
            if (lst != null && lst.size() > 0) {
                headMap = (HashMap) lst.get(0);
                lst = ClientUtil.executeQuery("getAccountHeadForLTD", accHeadMap);
                if (lst != null && lst.size() > 0) {
                    accHeadMap = (HashMap) lst.get(0);
                    if (!accHeadMap.get("BEHAVES_LIKE").equals("LOANS_AGAINST_DEPOSITS")) {
                        lienMap.put("PROD_ID", headMap.get("PROD_ID"));
                        lienMap.put("SHADOW_LIEN", headMap.get("SHADOW_LIEN"));
                        lienMap.put("CLEAR_BALANCE", headMap.get("CLEAR_BALANCE"));
                        authMap.put("PROD_ID", headMap.get("PROD_ID"));
                        authMap.put("SHADOW_LIEN", headMap.get("SHADOW_LIEN"));
                        authMap.put("CLEAR_BALANCE", headMap.get("CLEAR_BALANCE"));
                        lst = ClientUtil.executeQuery("getDepositAccHeadId", headMap);
                        if (lst != null && lst.size() > 0) {
                            headMap = (HashMap) lst.get(0);
                            lienMap.put("HEAD_DESC", headMap.get("PROD_DESC"));
                            authMap.put("HEAD_DESC", headMap.get("PROD_DESC"));
                            depositLien.depRenewalLineMarked(lienMap);
                            //                            depositLien.depRenewalLineAuthorize(authMap);
                            savePerformed();
                            lienStatus = null;
                        }
                    }
                }
            }
        }
    }

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        prodId=(String)(((ComboBoxModel)(cboProductId).getModel()).getKeyForSelected());
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT || observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
            HashMap hashmap = new HashMap();
            if (tblJointAcctHolder != null && tblJointAcctHolder.getRowCount() > 0) {
                int row = tblJointAcctHolder.getRowCount();
                for (int i = 0; i < row; i++) {
                    String custid = CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(i, 1));
                    hashmap.put("CUST_ID", custid);
                    hashmap.put("MEMBER_NO", custid);
                    List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                    if (lst1 != null && lst1.size() > 0) {
                        ClientUtil.displayAlert("Customer is death marked please select another customerId");
                        return;
                    }
                }

            }
            if (nomineeUi.getTblRowCount() > 0) {
                for (int i = 0; i < nomineeUi.getTblRowCount(); i++) {
                    NomineeOB observable = nomineeUi.getNomineeOB();
                    observable.populateNomineeTab(i);
                    hashmap.put("CUST_ID", observable.getLblCustNo());
                    hashmap.put("MEMBER_NO", observable.getLblCustNo());
                    List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                    if (lst1 != null && lst1.size() > 0) {
                        ClientUtil.displayAlert("Customer is death marked please select another customerId");
                        return;
                    }
                }
            }
            if (authSignUI.getAuthorizedSignatoryRowCount() > 0) {
                for (int i = 0; i < authSignUI.getAuthorizedSignatoryRowCount(); i++) {
                    AuthorizedSignatoryOB observableAuthSign = authSignUI.getAuthorizedSignatoryOB();
                    observableAuthSign.populateAuthorizeTab(i);
                    hashmap.put("CUST_ID", observableAuthSign.getTxtCustomerID());
                    hashmap.put("MEMBER_NO", observableAuthSign.getTxtCustomerID());
                    List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                    if (lst1 != null && lst1.size() > 0) {
                        ClientUtil.displayAlert("Customer is death marked please select another customerId");
                        return;
                    }
                }
            }
            //Validation added By Kannan AR on 13-Jul-2018
            if (chkMobileNumRequired.isSelected()) {
                if (CommonUtil.convertObjToStr(txtMobileNo.getText()).length() <= 0
                        || CommonUtil.convertObjToStr(tdtMobileSubscribedFrom.getDateValue()).length() <= 0) {
                    ClientUtil.displayAlert("Please Enter mobile number and subscribtion date !!!");
                    return;
                } else if (CommonUtil.convertObjToStr(txtMobileNo.getText()).length() != 10) {
                    ClientUtil.displayAlert("Please Enter valid 10 digit mobile number !!!");
                    return;
                }
            }
        }
        final String mainAccInfoMandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(), panAccInf);
        final String mainDepSubNoMandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(), panDepositDetails);
        //final String mainTransferInMandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(), panTransferInDetails);
        StringBuffer strBMandatory = new StringBuffer();
        //        if(chkMember.isSelected() == true && cboMemberType.getSelectedItem().equals("")){
        //            strBMandatory.append("Member Type Should Not be empty...");
        //            strBMandatory.append("\n");
        //        }
        boolean callingfromDeposit = false;
        boolean callingForEditMode = false;
        String depositNo = "";
        depositNo = CommonUtil.convertObjToStr(txtDepsoitNo.getText());
        double rdAmount = 0.0;
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr)) {
            rdAmount = CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue();
        }

        //--- checks the Mandatory data for Account Info screen
        if (mainAccInfoMandatoryMessage.length() > 0) {
            strBMandatory.append(mainAccInfoMandatoryMessage);
        }
        //--- checks the Mandatory data for DepSubNoAccInfo
//        if(tblDepSubNoAccInfo.getRowCount()==0){
        if (txtDepositAmount.getText().length() == 0) {
//            strBMandatory.append("DepositSubNo Details should not be empty");
//            strBMandatory.append("\n");
        } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative) && doublingFlag) {
//            if (CommonUtil.convertObjToDouble(txtTotalInterestAmount.getText()).doubleValue() != CommonUtil.convertObjToDouble(txtDepositAmount.getText()).doubleValue()) {
//                strBMandatory.append("Interest Amount Should be equal to deposit amount");
//                strBMandatory.append("\n");
//                strBMandatory.append("Please change the Period in product level");
//                strBMandatory.append("\n");
//            }
        }
        //--- checks the Mandatory data for Agent ID if the product is Daily Deposits
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily) && txtAgentId.getText().length() == 0) {
            strBMandatory.append("AgentId should not be empty");
            strBMandatory.append("\n");
        }
        //--- checks the Mandatory data for TransferIn screen
//        if ((mainTransferInMandatoryMessage.length() > 0)) {
//            String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD());
//            if (strBehavesLike.equals(observable.prodBehavesLikeRecurr)) {
//                if ((txtTotalInstallmentReceived.getText().length() == 0) || (txtTotalInstallmentReceived.getText() == null)) {
//                    strBMandatory.append("Total Installment Received should not be empty");
//                    strBMandatory.append("\n");
//                }
//                if ((txtTotalNumberOfInstallments.getText().length() == 0) || (txtTotalNumberOfInstallments.getText() == null)) {
//                    strBMandatory.append("Total Number of Installments should not be empty");
//                    strBMandatory.append("\n");
//                }
//                if ((tdtLastInstallmentReceivedDate.getDateValue().length() == 0) || (tdtLastInstallmentReceivedDate.getDateValue() == null)) {
//                    strBMandatory.append("Last Installment Received Date should not be empty");
//                    strBMandatory.append("\n");
//                }
//
//            }
//            strBMandatory.append(mainTransferInMandatoryMessage);
//        }
        //--- Validates the No.of Authorised Signatories
        if (chkAuthorizedSignatory.isSelected() == true && authSignUI.getTblRowCount() == 0) {
            strBMandatory.append("Enter the Authorised Signatory details.");
            strBMandatory.append("\n");
        }
        if ((chkAuthorizedSignatory.isSelected() == true) && (authSignUI.getTblRowCount() > 0)) {
            String strTemp = authSignUI.isHavingProperNoOfRecords(strBMandatory.toString());
            if (!strTemp.equalsIgnoreCase("")) {
                strBMandatory.append(strTemp);
                strBMandatory.append("\n");
            }
        }

        //--- Validates the Nominee details
        if (chkNomineeDetails.isSelected() == true && nomineeUi.getTblRowCount() == 0) {
            strBMandatory.append("Enter the Nominee details.");
            strBMandatory.append("\n");
        }
        if (chkNomineeDetails.isSelected() == true && nomineeUi.getTblRowCount() > 0) {
            String alert = nomineeUi.validateData();
            if (!alert.equalsIgnoreCase("")) {
                strBMandatory.append(alert);
                strBMandatory.append("\n");
            }
        }
        if (rdoStandingInstruction_No.isSelected() == true
                && (viewType.equals(ClientConstants.VIEW_TYPE_NEW) || viewType.equals("CUSTOMER ID"))
                && observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr)) {
            String[] obj = {"Yes", "No"};
            int option = COptionPane.showOptionDialog(null, ("DO YOU WANT TO ENTER STANDING INSTRUCTION..."), ("Select The Desired Option"),
                    COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj, obj[0]);
            if (option == 0) {
                rdoStandingInstruction_Yes.setSelected(true);
            } else {
                rdoStandingInstruction_No.setSelected(true);
            }
        }
        if (rdoStandingInstruction_Yes.isSelected() == true) {
            rdoStandingInstruction_Yes.setSelected(true);
        }
        //--- Validates the PoA details
        if (chkPowerOfAttorney.isSelected() == true && poaUI.getTblRowCount() == 0) {
            strBMandatory.append("Enter the Power of attorney details.");
            strBMandatory.append("\n");
        }

        if (viewType.equals(ClientConstants.VIEW_TYPE_DELETE)
                && CommonUtil.convertObjToDouble(observable.getAvailableBalanceValue()).doubleValue() > 0) {
            ClientUtil.showAlertWindow("Transaction has been completed... Not Possible to delete...");
            btnCancelActionPerformed(null);
            return;
        }

        //--- Validates for Joint Account holder details
        if (observable.getCbmConstitution().getKeyForSelected().equals("JOINT_ACCOUNT") && tblJointAcctHolder.getRowCount() < 2) {
            strBMandatory.append("Select the Joint account holder.");
            strBMandatory.append("\n");
        }

        String strMandatory = strBMandatory.toString();
        if (chk15hDeclarations.isSelected() == false && chkTaxDeductions.isSelected() == false) {
            chkTaxDeductions.setSelected(true);
        }
        String installType = "";
        String prodType = "";
        String dailyProdTyp = "";
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
            installType = ((ComboBoxModel) cboInterestPaymentMode.getModel()).getKeyForSelected().toString();        // TODO add your handling code here:
            prodType = ((ComboBoxModel) cboProdType.getModel()).getKeyForSelected().toString();
        } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeDaily)) {
            dailyProdTyp = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
            //system.out.println("The product type is" + dailyProdTyp);
        }

//              changed by nikhil

        //--- checks whether the Mandatory fields are entered
        ////////////////////////////////////////
        double amtVal=noofAccounts*CommonUtil.convertObjToDouble(transactionUI.getCallingAmount());
        System.out.println("Amtt--->"+transactionUI.getCallingAmount()+" PTYPE-->"+transactionUI.getCallingTransProdType() +"amtVal--->"+amtVal);
        if(transactionUI.getCallingTransProdType()!=null && transactionUI.getCallingTransProdType().equals("OA")){
            HashMap authMap = new HashMap();
            authMap.put("ACT_NUM", transactionUI.getCallingTransAcctNo());
            System.out.println("ACCC  NOOO--->"+transactionUI.getCallingTransAcctNo());
            List clearlst = ClientUtil.executeQuery("getBalanceOA", authMap); 
            System.out.println("clearlst   O--->"+clearlst);
            if(clearlst!=null && clearlst.size()>0){
                HashMap balMap=(HashMap)clearlst.get(0);
                 System.out.println("balMap --->"+balMap );
                if(balMap!=null && balMap.size()>0 && balMap.containsKey("AVAILABLE_BALANCE")){
                    double avalBal=CommonUtil.convertObjToDouble(balMap.get("AVAILABLE_BALANCE"));
                    System.out.println("amtVal --->"+amtVal +"avalBal"+avalBal);
                    if(amtVal>avalBal){
                        ClientUtil.showAlertWindow("Insufficient Balance!!");
                        btnCancelActionPerformed(null);
                        return;
                    }
                }
            }
        }
        /////////////////////////////////////////////////////////////////
        if (strMandatory.trim().length() > 0) { //--- if all the mandatory fields are not entered,
            CommonMethods.displayAlert(strMandatory);     //--- display the alert
            return;
        }
        if (observable.getActionType() != ClientConstants.ACTIONTYPE_RENEW && observable.getActionType() != ClientConstants.ACTIONTYPE_EXTENSION) {
            btnDepSubNoAccSaveActionPerformed();
        }
        if (selectedDepSubNoRow == true && rdoOpeningMode_Multiple.isSelected() == true) { //--- if all the mandatory fields are not entered,
            ClientUtil.showAlertWindow("DepositSubNo Details should be Saved...");     //--- display the alert
            return;
        } else if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW && withoutvisitingScreen == false) {
            ClientUtil.showAlertWindow("Save Pending in Deposit Renewal Information...");     //--- display the alert
            return;
        } else if ((observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW || observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT)
                && selectedDepSubNoRowRenewal == true) { //--- if all the mandatory fields are not entered,
            ClientUtil.showAlertWindow("Renewal DepositSubNo Details should be Saved...");     //--- display the alert
            return;
        } else if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)
                && rdoAutoRenewal_Yes.isSelected() == true && rdoWith_intRenewal_No.isSelected() == true
                && (installType == null || installType.equals("CASH") || prodType == null || txtCustomerIdCr.getText().length() == 0)) {
            ClientUtil.showAlertWindow("you have chosen Auto Renewal With out interest, Hence please Choose Intpay Mode as Transfer");
            return;
        } else if (strMandatory.trim().length() == 0) { //--- if all the values are entered, save the data
            double totalDepAmt = observable.getdepositAmount();
            double minAmtPan = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_AMT_PAN")));

            if (rdoStandingInstruction_Yes.isSelected() == true && viewType == ClientConstants.VIEW_TYPE_EDIT
                    && observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr) && authorizeBy.equals("")) {
                HashMap behavesMap = new HashMap();
                behavesMap.put("ACT_NUM", depositNo);
                List lstBehaves = ClientUtil.executeQuery("getBehavesLikeForDepositNo", behavesMap);
                if (lstBehaves != null && lstBehaves.size() > 0) {
                    behavesMap = (HashMap) lstBehaves.get(0);
                    if (behavesMap.get("BEHAVES_LIKE").equals("RECURRING")) {
                        HashMap standingMap = new HashMap();
                        standingMap.put("DEPOSIT_NO", depositNo + "_1");
                        List lst = ClientUtil.executeQuery("getStandingInstrnDetailsAuthIsNull", standingMap);
                        if (lst != null && lst.size() > 0) {
                            standingMap = (HashMap) lst.get(0);
                            String[] obj = {"Yes", "No"};
                            int option = COptionPane.showOptionDialog(null, ("DO YOU WANT TO MAKE CHANGES IN STANDING INSTRUCTION..."), ("Select The Desired Option"),
                                    COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj, obj[0]);
                            if (option == 0) {
                                callingfromDeposit = true;
                            }
                        } else {
                            String[] obj = {"Yes", "No"};
                            int option = COptionPane.showOptionDialog(null, ("DO YOU WANT TO ENTER STANDING INSTRUCTION..."), ("Select The Desired Option"),
                                    COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj, obj[0]);
                            if (option == 0) {
                                callingfromDeposit = false;
                                callingForEditMode = true;
                                rdoStandingInstruction_Yes.setSelected(true);
                            }
                        }
                    }
                }
            }
            //--- If it doesnot exceeds the Amount limit without Pan details,//--- then continue else alert him
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW
                    && rdoRenewalAdding_Yes.isSelected() == true && rdoRenewalWithdrawing_No.isSelected() == true) {
//                commnented by nikhil
//                ClientUtil.showAlertWindow("Collect Balance Deposit Amount by Cash or Transfer...\n"+
//                "Balance Amount is : "+CommonUtil.convertObjToDouble(txtRenewalDepTransAmtValue.getText()).doubleValue());
                //                if(addingAmt ==true){
                //                    if(withInt == true){
                //                        befAddingAddAmt = observable.depAmt+observable.balIntAmt+observable.getSbIntAmount();
                //                        //system.out.println("####if :"+befAddingAddAmt);
                //                    }else{
                //                        befAddingAddAmt = observable.matAmount;
                //                    }
                //                    if(totalDepAmt>befAddingAddAmt){
                //                        observable.withDrawFlag = false;
                //                        //system.out.println("####if final:"+befAddingAddAmt);
                //                        double balAmt = totalDepAmt-befAddingAddAmt;
                //                        if(balAmt>0){
                //                            observable.withDrawFlag = true;
                //                            observable.addingFlag = true;
                //                            ClientUtil.displayAlert("Collect Balance Deposit Amount by Cash or Transfer...\n"+
                //                            "Balance Amount is :"+balAmt);
                //                        }
                //                        //system.out.println("####if :"+totalDepAmt);
                //                        //system.out.println("####if :"+balAmt);
                //                    }else{
                //                        //system.out.println("####else :"+totalDepAmt);
                //                    }
                //                }
                //                if(renewalSameNo == true)
                //                    observable.withDrawFlag = true;
            }

            if (!txtPanNumber.getText().trim().equals("")) {
                //--- Check for Validation for PAN No.
                 if (!insertTransactionPart()) {
                                ClientUtil.displayAlert("Please enter the transaction details");
                                return;
                            }
                 if (rdoOpeningMode_Multiple.isSelected()) {
                observable.setAllowedTransactionDetailsTO(transactionUI.getOutputTO());
                 }
                if (!ClientUtil.validatePAN(txtPanNumber)) {
                    ClientUtil.showMessageWindow("Invalid Pan Number...Enter Proper Pan No (Format :ABCDE1234F)");
                    strBMandatory.append("Invalid Pan Number");
                    strBMandatory.append("\n");
                } else {
                    if (lienStatus != null) {
                        lienToUnlien(lienStatus);
                    } else {

                        savePerformed();
                    }
                }
                //            }else if(totalDepAmt<minAmtPan){
                //            }else if(totalDepAmt<minAmtPan){
                //                if(lienStatus !=null){
                //                    lienToUnlien(lienStatus);
                //                }else{
                //                    savePerformed();
                //                }
                //            }else if(totalDepAmt>=minAmtPan && txtPanNumber.getText().trim().equals("")) {
            } else if (totalDepAmt >= minAmtPan && txtPanNumber.getText().trim().equals("")) {
                //--- Show alert message
                int chosenOne = ClientUtil.showAlertWindow("Enter the PAN No...");
                //--- If he still wants to save , allow him to save
                if (chosenOne == COptionPane.YES_OPTION) {
                    //--- Check for Validation for PAN No.
                    if (!ClientUtil.validatePAN(txtPanNumber)) {
                        strBMandatory.append("Invalid Pan Number");
                        strBMandatory.append("\n");
                    } else {
                        if (lienStatus != null) {
                            lienToUnlien(lienStatus);
                        } else {
                            savePerformed();
                        }
                    }
                }                //--- If the Pan no .is present then, save the data
                //            }else if(totalDepAmt>=minAmtPan && !txtPanNumber.getText().trim().equals("")) {
                //            }else if(!txtPanNumber.getText().trim().equals("")) {
                //                //--- Check for Validation for PAN No.
                //                if(!ClientUtil.validatePAN(txtPanNumber)){
                //                    ClientUtil.showMessageWindow("Invalid Pan Number...Enter Proper Pan No (Format :ABCDE1234F)");
                //                    strBMandatory.append("Invalid Pan Number");
                //                    strBMandatory.append("\n");
                //                } else {
                //                    if(lienStatus !=null){
                //                        lienToUnlien(lienStatus);
                //                    }else{
                //                        savePerformed();
                //                    }
                //                }
            } else if (totalDepAmt < minAmtPan) {
                if (lienStatus != null) {
                    lienToUnlien(lienStatus);
                } else {
                    //                    here
                    if (transNew) {
                        ///added by jjjjjj
                        System.out.println("dailyProdTypdailyProdTypdailyProdTyp" + prodId);
                        HashMap mapCanZeroActOpng=new HashMap();
                        mapCanZeroActOpng.put("PROD_ID",prodId);
                        List lstCanZeroActOpng=ClientUtil.executeQuery("getSelCanZeroActOpng", mapCanZeroActOpng);
                        mapCanZeroActOpng= (HashMap)lstCanZeroActOpng.get(0);
                        String canZeroActOpng=CommonUtil.convertObjToStr(mapCanZeroActOpng.get("ZERO_BAL_ACT_OPNG"));
                        if(canZeroActOpng.equals("N")){
                       // if ((dailyProdTyp.equals(""))) {
                            if (!insertTransactionPart()) {
                                ClientUtil.displayAlert("Please enter the transaction details");
                                return;
                            }

                        }


                        ///////
                        if (rdoOpeningMode_Multiple.isSelected()) {
                            observable.setAllowedTransactionDetailsTO(transactionUI.getOutputTO());
                            double tranAmount = CommonUtil.convertObjToDouble(transactionUI.getCallingAmount()).doubleValue();
                            double depAmt = CommonUtil.convertObjToDouble(observable.getTxtDepositAmount());
                            System.out.println("depAmt    tranAmount"+tranAmount+depAmt);
                            if (tranAmount != depAmt) {
                                ClientUtil.displayAlert("Amount not talied !!!");
                                return;
                            }
                            transNew = false;
                        }
                    }

                    savePerformed();
                }
            }
        }

        if (observable.getActionType() != ClientConstants.ACTIONTYPE_FAILED && strMandatory.trim().length() == 0 && strBMandatory.length() == 0) {
            //system.out.println("#$%#$%#$%inside dis:!@$@#$#@4");
            String displayStr = "";
            String oldBatchId = "";
            String newBatchId = "";
            String actNum = "";
            List depositNoList = new ArrayList();
            if ((viewType == ClientConstants.VIEW_TYPE_RENEW 
                    && observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW)
                    || (viewType == ClientConstants.VIEW_TYPE_EXTENSION 
                    && observable.getActionType() == ClientConstants.ACTIONTYPE_EXTENSION)) {
               
               
            } else {
                //actNum = CommonUtil.convertObjToStr(observable.getTxtDepsoitNo());
                depositNoList = observable.getDepositNoList();
            }
            String fromTransferID = "";
            String toTransferID = "";
            String fromCashID = "";
            String toCashID = "";
            HashMap transTypeMap = new HashMap();
            HashMap transMap = new HashMap();
            HashMap transCashMap = new HashMap();
            HashMap transIdMap = new HashMap();
            List transId = new ArrayList();
            List accountNo = new ArrayList();
            System.out.println("depositNoList"+depositNoList);
            if(observable.getProxyReturnMap().containsKey("MULTIPLE_DEPOSIT_ID")){
                ClientUtil.showMessageWindow("Multiple Deposit ID : "+CommonUtil.convertObjToStr(observable.getProxyReturnMap().get("MULTIPLE_DEPOSIT_ID")));
            }
            displayStr += "Transaction Details...\n";
            for(int a = 0 ; a < depositNoList.size() ; a++){
                transCashMap.put("BATCH_ID", CommonUtil.convertObjToStr(depositNoList.get(a))+ "_1");
                transCashMap.put("TRANS_DT", currDt);
                transCashMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);//AUTHORIZE_STATUS
                transCashMap.put("AUTHORIZE_STATUS", "AUTHORIZE_STATUS");
                List lst = ClientUtil.executeQuery("getDepositAccountTransferDetails", transCashMap);
                if (lst != null && lst.size() > 0) {
                    for (int i = 0; i < lst.size(); i++) {
                        transMap = (HashMap) lst.get(i);
                        if(transMap.get("PROD_TYPE").equals("TD")){
                            accountNo.add(transMap.get("ACT_NUM"));
                            transId.add(transMap.get("BATCH_ID"));
                        }
                       transIdMap.put(transMap.get("SINGLE_TRANS_ID"), "TRANSFER");

                        System.out.println("#### :" + transMap);
                        oldBatchId = newBatchId;
                        if (i == 0) {
                            fromTransferID = CommonUtil.convertObjToStr(transMap.get("SINGLE_TRANS_ID"));
                        }
                        if (i == lst.size() - 1) {
                            toTransferID = CommonUtil.convertObjToStr(transMap.get("SINGLE_TRANS_ID"));
                        }
                    }
                }
                actNum = lblValRenewDep.getText();
                lst = ClientUtil.executeQuery("getCashDetails", transCashMap);
                if (lst != null && lst.size() > 0) {
                    for (int i = 0; i < lst.size(); i++) {
                        transMap = (HashMap) lst.get(i);
                        accountNo.add(transMap.get("ACT_NUM"));
                        transId.add(transMap.get("TRANS_ID"));
                        transIdMap.put(transMap.get("SINGLE_TRANS_ID"), "CASH");
                        transTypeMap.put(transMap.get("SINGLE_TRANS_ID"), transMap.get("TRANS_TYPE"));
                        System.out.println("transIdMap"+transIdMap);
                        System.out.println("transTypeMap"+transTypeMap);
                        if (i == 0) {
                            fromCashID = CommonUtil.convertObjToStr(transMap.get("SINGLE_TRANS_ID"));
                        }
                        if (i == lst.size() - 1) {
                            toCashID = CommonUtil.convertObjToStr(transMap.get("SINGLE_TRANS_ID"));
                        }
                    }
                }
            }            
            if (accountNo!=null && accountNo.size()> 0) {
                displayStr += "Depsosit account created from Account No " + CommonUtil.convertObjToStr(accountNo.get(0)) + " to Account No " + CommonUtil.convertObjToStr(accountNo.get((accountNo.size() - 1))) + " with TransId from " + CommonUtil.convertObjToStr(transId.get(0)) + " to " + CommonUtil.convertObjToStr(transId.get((transId.size() - 1))) + " amount of " + amountDeposit;
                if (!displayStr.equals("")) {
                    ClientUtil.showMessageWindow("" + displayStr);
                    transId = new ArrayList();
                    accountNo = new ArrayList();
                }
            }                            
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW || observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW) {
                HashMap printMap = new HashMap();
                String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
                printMap.put("PROD_ID", prodId);
                List printList = ClientUtil.executeQuery("getCertificatePrintFrmProdLevel", printMap);
                //system.out.println("printList..." + printList);
                if (printList != null && printList.size() > 0) {
                    printMap = new HashMap();
                    printMap = (HashMap) printList.get(0);
                    //system.out.println("printtt" + printMap);
                    if (printMap.get("CERTIFICATE_PRINTING") != null && !printMap.get("CERTIFICATE_PRINTING").equals("null")) {
                        if (!printMap.get("CERTIFICATE_PRINTING").equals("") && printMap.get("CERTIFICATE_PRINTING").equals("O")) {
                            for(int i = 0 ; i<observable.getProxyReturnMap().size() ; i++){
                                printMap.put("DEPOSIT NO"+CommonUtil.convertObjToStr(i), observable.getProxyReturnMap().get("DEPOSIT NO"+CommonUtil.convertObjToStr(i)));
                            }
                            //system.out.println("aaaaaaaaaaaaa");
                            printDepositCertificate(printMap);
                        }
                    }
                }
            }




            ///////////////////////////////
            int yesNo = 0;
            if (observable.getActionType() != ClientConstants.ACTIONTYPE_EDIT ){     
           
            String[] options = {"Yes", "No"};
            yesNo = COptionPane.showOptionDialog(null, "Do you want to print?", CommonConstants.WARNINGTITLE,
                    COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                    null, options, options[0]);
            }
            System.out.println("#$#$$ yesNo : " + yesNo);
            if (yesNo == 0) {
                Object[] keys = transIdMap.keySet().toArray();
                System.out.println("keys" + keys);
                for (int i = 0; i < keys.length; i++) {
                    if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
                        HashMap cummMap = new HashMap();
                        String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
                        cummMap.put("PROD_ID", prodId);
                        List cummList = ClientUtil.executeQuery("getCummCertificatePrint", cummMap);
                        if (cummList != null && cummList.size() > 0) {
                            cummMap = (HashMap) cummList.get(0);
                            if (cummMap.get("CUMM_CERTIFICATE_PRINT") != null) {
                                if (cummMap.get("CUMM_CERTIFICATE_PRINT").equals("Y")) {
                                    HashMap paramMap = new HashMap();
                                    paramMap.put("DepNo", observable.getProxyReturnMap().get("DEPOSIT NO"));
                                    paramMap.put("TransDt", this.currDt);
                                    paramMap.put("BranchId", ProxyParameters.BRANCH_ID);
                                    TTIntegration.setParam(paramMap);
                                    TTIntegration.integrationForPrint("CummulativeDepositCertificate");
                                }
                            }
                        }
                    }
                    TTIntegration ttIntgration = null;
                    HashMap paramMap = new HashMap();
                    paramMap.put("TransDt", this.currDt);
                    paramMap.put("BranchId", ProxyParameters.BRANCH_ID);
                    paramMap.put("TransId", keys[i]);
                    TTIntegration.setParam(paramMap);

                    if (CommonUtil.convertObjToStr(transIdMap.get(keys[i])).equals("TRANSFER")) {
                        TTIntegration.integrationForPrint("ReceiptPayment");
                    } else if (CommonUtil.convertObjToStr(transTypeMap.get(keys[i])).equals("DEBIT")) {
                        TTIntegration.integrationForPrint("CashPayment");
                    } else {
                        TTIntegration.integrationForPrint("CashReceipt");
                    }
                }
            }
            if (observable.getRdoStandingInstruction_Yes() == true && callingfromDeposit == true) {
                HashMap standingMap = new HashMap();
                StandingInstructionUI standingInstn = new StandingInstructionUI();
                com.see.truetransact.ui.TrueTransactMain.showScreen(standingInstn);
                standingMap.put("DEPOSIT_NO", depositNo + "_1");
                //standingMap = standingInstn.standingInstnCallingFromDepositsEditMode(standingMap, this);//Jeffin
                observable.setRdoStandingInstruction_Yes(false);
            }
            if (!(observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) && rdoOpeningMode_Multiple.isSelected()) {
                if (observable.getRdoStandingInstruction_Yes() == true && callingfromDeposit == false
                        && observable.productBehavesLike.equals(observable.prodBehavesLikeRecurr)) {
                    HashMap standingInstnMap = new HashMap();
                    if (callingForEditMode == false) {
                        depositNo = CommonUtil.convertObjToStr(observable.getProxyReturnMap().get("DEPOSIT NO"));
                    }
                    HashMap behavesMap = new HashMap();
                    behavesMap.put("ACT_NUM", depositNo);
                    List lstBehaves = ClientUtil.executeQuery("getBehavesLikeForDepositNo", behavesMap);
                    if (lstBehaves != null && lstBehaves.size() > 0) {
                        behavesMap = (HashMap) lstBehaves.get(0);
                        if (behavesMap.get("BEHAVES_LIKE").equals("RECURRING") && !depositNo.equals("") && depositNo.length() > 0) {
                            StandingInstructionUI standingInstn = new StandingInstructionUI();
                            com.see.truetransact.ui.TrueTransactMain.showScreen(standingInstn);
                            standingInstnMap.put("DEPOSIT_NO", depositNo);
                            standingInstnMap.put("PRODUCT_TYPE", "TD");
                            standingInstnMap.put("DEPOSIT_AMT", String.valueOf(rdAmount));
                            //standingInstnMap = standingInstn.standingInstnCallingFromDeposits(standingInstnMap, this);//Jeffin
                            this.btnCancelActionPerformed(null);
                            this.btnCloseActionPerformed(null);
                            observable.setRdoStandingInstruction_Yes(false);
                        }
                    } else {
                        this.btnCancelActionPerformed(null);
                    }
                } else {
                    this.btnCancelActionPerformed(null);
                }
            }else {
//                if (!rdoOpeningMode_Renewal.isSelected()) {
//                    System.out.println("inside !rdoOpeningMode_Renewal.isSelected()");
//                    yesNo = 0;
//                    String[] option = {"Yes", "No"};
//                    //                                 yesNo = COptionPane.showOptionDialog(null,"Do You Want to Create One More Depost For Same Customer?", CommonConstants.WARNINGTITLE,
//                    //                                 COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
//                    //                                 null, option, option[0]);
//
//                    depositCount = getNoOfDeposits();
//                    depositAmt = getDepositAmount();
//                    depositCount = depositCount - count;
//                    depositedAmt = depositedAmt + CommonUtil.convertObjToDouble(transMap.get("AMOUNT")).doubleValue();
//                    depositAmt = depositAmt - depositedAmt;
//                    txtDepositsOpened.setText(CommonUtil.convertObjToStr(new Double(count)));
//                    txtAmount.setText(CommonUtil.convertObjToStr(new Double(depositedAmt)));
//                    txtDepositAmount.setText(String.valueOf(CommonUtil.convertObjToDouble(transMap.get("AMOUNT")).doubleValue())); //depositAmt
//                    transactionUI.setCallingAmount(String.valueOf(depositAmt));
//                    //system.out.println("#$#$$ yesNo : " + yesNo);
//                    if (multipleDeposits == true && (depositCount > 0 && depositAmt > 0.0)) {
//
//                        if (depositCount <= 0.0) {
//                            yesNo = COptionPane.showOptionDialog(null, "Exceeds the No.Of accounts to be opened " + "(" + count + ")" + "do you want to continue ?", CommonConstants.WARNINGTITLE,
//                                    COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
//                                    null, option, option[0]);
//                            if (yesNo != 0) {
//
//                                this.btnCancelActionPerformed(null);
//                                multipleDeposits = false;
//                                txtDepositsOpened.setText("");
//                                txtDepositAmount.setText("");
//                            }
//                        }
//                        txtDepositsOpened.setText(CommonUtil.convertObjToStr(new Double(count)));
//                        txtAmount.setText(CommonUtil.convertObjToStr(new Double(depositedAmt)));
//                        count = count + 1;
//                        btnNew.setEnabled(false);
//                        observable.setTxtDepsoitNo("");
//                        transNew = true;
//                        observable.makeToNull();
//                        observable.resetDepSubNoTbl();
//                        transactionUI.resetObjects();
//                    } else {
//                        this.btnCancelActionPerformed(null);
//                        multipleDeposits = false;
//                        txtDepositsOpened.setText("");
//                        txtDepositAmount.setText("");
//                    }
//                } 
                    //else {
                    this.btnCancelActionPerformed(null);
                //}
            }
        }
        observable.setTransactionMap(null);
        //            this.btnCancelActionPerformed(null);
        setModified(false);
    }//GEN-LAST:event_btnSaveActionPerformed
    private void renewalRecalculation1() {
        double year = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Years.getText()).doubleValue();
        double month = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Months.getText()).doubleValue();
        double days = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Days.getText()).doubleValue();
        String prodType = ((ComboBoxModel) cboRenewalInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
        double per = year * 360 + month * 30 + days;
        if (per == 0 || prodType.length() <= 0) {
            return;
        } else {
            txtRenewalDepositAmtFocusLost1();
            ////system.out.println("txtRenewalDepositAmount.getText().toString()"+txtRenewalDepositAmount.getText().toString());
            txtRenewalMaturityAmount.setText(txtRenewalDepositAmount.getText().toString());
        }
    }

    private void txtRenewalDepositAmtFocusLost1() {
        if ((txtRenewalDepositAmount.getText() != null) && (!txtRenewalDepositAmount.getText().equals(""))) {
            HashMap detailsHash = new HashMap();
            rateFlag = false;
            double amt = Double.parseDouble(CommonUtil.convertObjToStr(txtRenewalDepositAmount.getText()));
            double maxAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_AMT")));
            double minAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_AMT")));
            double multAmt = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("AMT_MULTIPLES")));
            double multPeriod = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
            double multFreq = Double.parseDouble(CommonUtil.convertObjToStr(depProdDetails.get("PERIOD_MULTIPLES")));
            detailsHash.put("AMT_MULTIPLES", new Double(multAmt));
            String intType = (String) ((ComboBoxModel) this.cboRenewalInterestPaymentFrequency.getModel()).getKeyForSelected();
            double secTerm = 0;//--- If Year is not filled, then assign "0" to it.
            double years = 0.0;
            double months = 0.0;
            double days = 0.0;
            double totalPeriod = 0.0;
            if (txtRenewalPeriodOfDeposit_Years.getText().length() == 0) {
                observable.setRenewaltxtPeriodOfDeposit_Years("0");
                txtRenewalPeriodOfDeposit_Years.setText(observable.getRenewaltxtPeriodOfDeposit_Years());
            } else {
                years = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Years.getText()).doubleValue();
                totalPeriod = years * 365;
            }
            if (txtRenewalPeriodOfDeposit_Months.getText().length() == 0) {
                observable.setRenewaltxtPeriodOfDeposit_Months("0");
                txtRenewalPeriodOfDeposit_Months.setText(observable.getRenewaltxtPeriodOfDeposit_Months());
            } else {
                months = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Months.getText()).doubleValue();
                totalPeriod += months * 30;
            }
            if (txtRenewalPeriodOfDeposit_Days.getText().length() == 0) {
                observable.setRenewaltxtPeriodOfDeposit_Days("0");
                txtRenewalPeriodOfDeposit_Days.setText(observable.getRenewaltxtPeriodOfDeposit_Days());
            } else {
                days = CommonUtil.convertObjToDouble(txtRenewalPeriodOfDeposit_Days.getText()).doubleValue();
                totalPeriod += days;
            }
            String renewalprodId = ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected().toString();
            String strBehavesLike = CommonUtil.convertObjToStr(observable.getMandatoryFieldForRD(renewalprodId));
            if (strBehavesLike.equals("FIXED")) {
                String prodType = ((ComboBoxModel) cboRenewalInterestPaymentFrequency.getModel()).getKeyForSelected().toString();
                int freq = CommonUtil.convertObjToInt(prodType);
                if (freq == 30) {
                    detailsHash.put("INTEREST_TYPE", "MONTHLY");
                } else if (freq == 90) {
                    detailsHash.put("INTEREST_TYPE", "QUATERLY");
                } else if (freq == 180) {
                    detailsHash.put("INTEREST_TYPE", "HALF YEARLY");
                } else if (freq == 0) {
                    detailsHash.put("INTEREST_TYPE", "DATE OF MATURITY");
                } else if (freq == 360) {
                    detailsHash.put("INTEREST_TYPE", "YEARLY");
                } else if (freq == 60) {
                    detailsHash.put("INTEREST_TYPE", "2MONTHS");
                } else if (freq == 120) {
                    detailsHash.put("INTEREST_TYPE", "4MONTHS");
                } else if (freq == 150) {
                    detailsHash.put("INTEREST_TYPE", "5MONTHS");
                } else if (freq == 210) {
                    detailsHash.put("INTEREST_TYPE", "7MONTHS");
                } else if (freq == 240) {
                    detailsHash.put("INTEREST_TYPE", "8MONTHS");
                } else if (freq == 270) {
                    detailsHash.put("INTEREST_TYPE", "9MONTHS");
                } else if (freq == 300) {
                    detailsHash.put("INTEREST_TYPE", "10MONTHS");
                } else if (freq == 330) {
                    detailsHash.put("INTEREST_TYPE", "11MONTHS");
                }
            }
            if (!strBehavesLike.equals("DAILY")) {
                if (amt >= minAmt && amt <= maxAmt) { // Checks the Amount entered to be between the Acccpeted Range
                    //                    if(multPeriod%totalPeriod == 0){
                    observable.setRenewaltxtRateOfInterest("");
                    //                    if( amt%multAmt == 0){          // and is Multiples of predefined value
                    double retInt = 0.0;
                    retInt = setrenewRateOfInterset();//check
                    retInt = CommonUtil.convertObjToDouble(txtRenewalRateOfInterest.getText());//setrenewRateOfInterset();
                    if ((viewType == ClientConstants.VIEW_TYPE_RENEW || viewType.equals("CUSTOMER ID")
                            || viewType.equals("RENEWAL_DEP_TRANS_ACC_NO") || viewType.equals("RENEWAL_INT_TRANS_ACC_NO")
                            || viewType.equals("RENEWAL_CREDIT_ACC_NO") || viewType.equals("EDIT")) && retInt != 0 && retInt != -1) {
                        double maturityAmt = 0.0;
                        double depositAmt = 0;
                        double interestAmt = 0;
                        txtRenewalRateOfInterest.setText(String.valueOf(txtRenewalRateOfInterest.getText()));
                        detailsHash.put("AMOUNT", txtRenewalDepositAmount.getText());
                        detailsHash.put("DEPOSIT_DT", DateUtil.getDateMMDDYYYY(tdtRenewalDateOfDeposit.getDateValue()));
                        observable.setRenewaltxtPeriodOfDeposit_Days(txtRenewalPeriodOfDeposit_Days.getText());
                        observable.setRenewaltxtPeriodOfDeposit_Months(txtRenewalPeriodOfDeposit_Months.getText());
                        observable.setRenewaltxtPeriodOfDeposit_Years(txtRenewalPeriodOfDeposit_Years.getText());
                        detailsHash.put("PERIOD_DAYS", txtRenewalPeriodOfDeposit_Days.getText());
                        detailsHash.put("PERIOD_MONTHS", txtRenewalPeriodOfDeposit_Months.getText());
                        detailsHash.put("PERIOD_YEARS", txtRenewalPeriodOfDeposit_Years.getText());
                        detailsHash.put("MATURITY_DT", DateUtil.getDateMMDDYYYY(tdtRenewalMaturityDate.getDateValue()));
                        detailsHash.put("ROI", txtRenewalRateOfInterest.getText());
                        detailsHash.put("DISCOUNTED_RATE", depProdDetails.get("DISCOUNTED_RATE"));
                        detailsHash.put("BEHAVES_LIKE", strBehavesLike);
                        detailsHash = observable.setRenewalAmountsAccROI(detailsHash, null);
                        //system.out.println("$$$$$detailshash :3333" + detailsHash);
                        HashMap roundMap1 = new HashMap();
                        // String a=CommonUtil.convertObjToStr(((ComboBoxModel)cboProdId.getModel()).getKeyForSelected());
                        //String a=CommonUtil.convertObjToStr(cboProdId.getSelectedItem());
                        String a1 = (String) ((ComboBoxModel) cboRenewalDepositProdId.getModel()).getKeyForSelected();
                        //system.out.println("Prodidddddd42444 " + a1);
                        roundMap1.put("PROD_ID", a1);
                        List roundgList1 = ClientUtil.executeQuery("getRoungOffTypeInterest", roundMap1);
                        if (!roundgList1.isEmpty()) {
                            roundMap1 = (HashMap) roundgList1.get(0);
                        }
                        //system.out.println("roundingList555555 = " + roundgList1 + "   Map12212 " + roundMap1);
                        if (strBehavesLike.equals("FIXED")) {
                            maturityAmt = CommonUtil.convertObjToDouble(txtRenewalDepositAmount.getText()).doubleValue();
                            interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                            if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("NEAREST_VALUE")) {
                                interestAmt = (double) getNearest((long) (interestAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                interestAmt = (double) roundOffLower((long) (interestAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("HIGHER_VALUE")) {
                                interestAmt = (double) higher((long) (interestAmt * 100), 100) / 100;
                            } else {
                                //system.out.println(" in no round44444");
                                interestAmt = new Double(interestAmt);
                                //system.out.println("interestAmt 44444" + interestAmt);
                            }
                        } else if (strBehavesLike.equals("CUMMULATIVE")) {
                            maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                            if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("NEAREST_VALUE")) {
                                maturityAmt = (double) getNearest((long) (maturityAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                maturityAmt = (double) roundOffLower((long) (maturityAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("HIGHER_VALUE")) {
                                maturityAmt = (double) higher((long) (maturityAmt * 100), 100) / 100;
                            } else {
                                //system.out.println(" in no round5555@@@@233dsd");
                                maturityAmt = new Double(maturityAmt);
                                //system.out.println("maturityAmt 5555@@@@231sdd" + maturityAmt);
                            }
                            interestAmt = maturityAmt - CommonUtil.convertObjToDouble(txtRenewalDepositAmount.getText()).doubleValue();
                        } else {
                            if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("NEAREST_VALUE")) {
                                maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                maturityAmt = (double) getNearest((long) (maturityAmt * 100), 100) / 100;
                                interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                interestAmt = (double) getNearest((long) (interestAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("LOWER_VALUE")) {
                                maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                maturityAmt = (double) roundOffLower((long) (maturityAmt * 100), 100) / 100;
                                interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                interestAmt = (double) roundOffLower((long) (interestAmt * 100), 100) / 100;
                            } else if (roundMap1.get("INT_ROUNDOFF_TERMS").equals("HIGHER_VALUE")) {
                                maturityAmt = CommonUtil.convertObjToDouble(detailsHash.get("AMOUNT")).doubleValue();
                                maturityAmt = (double) higher((long) (maturityAmt * 100), 100) / 100;
                                interestAmt = CommonUtil.convertObjToDouble(detailsHash.get("INTEREST")).doubleValue();
                                interestAmt = (double) higher((long) (interestAmt * 100), 100) / 100;
                            } else {
                                //system.out.println(" in no round5555@@@1111");
                                maturityAmt = new Double(maturityAmt);
                                interestAmt = new Double(interestAmt);
                                //system.out.println("maturityAmt 55555@@@@1111" + maturityAmt + "nbdhad@@@@555" + interestAmt);
                            }
                        }
                        observable.setRenewaltxtMaturityAmount(String.valueOf(maturityAmt));
                        txtRenewalMaturityAmount.setText(observable.getRenewaltxtMaturityAmount());
                        observable.setRenewaltxtTotalInterestAmount(String.valueOf(interestAmt));
                        txtRenewalTotalInterestAmount.setText(observable.getRenewaltxtTotalInterestAmount());

                        if (!interestYesNo) {
                            observable.setRenewaltxtMaturityAmount(txtRenewalDepositAmount.getText());
                        }
                        txtRenewalMaturityAmount.setText(observable.getRenewaltxtMaturityAmount());
                        //system.out.println("#### Second time txtPeriodOfDeposit_Days " + txtMaturityAmount.getText());
                    } else {
                        rateFlag = true;
                        observable.msgIntWarn();
                    }
                    //                    }else {
                    //                        if(!viewType.equals(ClientConstants.VIEW_TYPE_RENEW) && rdoOpeningMode_Normal.isSelected() == true){
                    //                            CommonMethods.displayAlert("Amount Should Be Multiples Of : " +multAmt);
                    //                            observable.resetAmount();
                    //                        }else if(viewType.equals(ClientConstants.VIEW_TYPE_RENEW) && rdoOpeningMode_Renewal.isSelected() == true){
                    //                            CommonMethods.displayAlert("Amount Should Be Multiples Of : " +multAmt);
                    //                        }
                    //                    }
                    //                    }else{
                    //                        CommonMethods.showDialogOk("Deposit Period should be multiples of " +multPeriod);
                    ////                        txtRenewalDepositAmount.requestFocus();
                    //                        return;
                    //                    }
                    //                } else {
                    //                    CommonMethods.showDialogOk("Amount is Less than the Minimum Deposit Amount" );
                    //                    txtRenewalDepositAmount.requestFocus();
                    //                    return;
                }
            }
        }

        cboRenewalInterestPaymentFreqActionPerformed();
    }
    private void txtRenewalRateOfInterestFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRenewalRateOfInterestFocusLost
        // TODO add your handling code here:
        renewalRecalculation1();
    }//GEN-LAST:event_txtRenewalRateOfInterestFocusLost

    private void txtRenewalDepositAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRenewalDepositAmountFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRenewalDepositAmountFocusLost

    private void txtRenewalDepositAmountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRenewalDepositAmountFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRenewalDepositAmountFocusGained

    private void txtWeekFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWeekFocusLost
        String oldValue = observable.getTxtPeriodOfDeposit_Days();
        String newValue = txtPeriodOfDeposit_Days.getText();
        //--- If oldValue is not equal to newValue, then reset the calculated fields for
        //--- recalculating the values
        ///  iii
        //system.out.println("#############  txtPeriodOfDeposit_Days ");
        //        if(!oldValue.equals(newValue) && viewType != ClientConstants.VIEW_TYPE_RENEW && !viewType.equals("CREDIT_ACC_NO")){
        //            resetDepSubNoFields();
        //        }
        if (viewType == ClientConstants.VIEW_TYPE_RENEW) {
            cboflag = false;
            HashMap calcMap = new HashMap();
            java.util.Date depDt = DateUtil.getDateMMDDYYYY(tdtDateOfDeposit.getDateValue());
            calcMap.put("DEPOSIT_PERIOD_YY", "0");
            calcMap.put("DEPOSIT_PERIOD_MM", "0");
            int weekDays = (Integer.parseInt(txtWeek.getText())) * 7;
            String weekDay = "" + weekDays;
            calcMap.put("DEPOSIT_PERIOD_DD", weekDay);
            calcMap.put("DEPOSIT_DT", depDt);
            calcMap = observable.calculateMaturityDate(calcMap);
            java.util.Date matDate = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(calcMap.get("MATURITY_DT")));
            //            java.util.Date currDate = currDt.clone();
            java.util.Date currDate = (Date) currDt.clone();
            if (observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)) {
                cboInterestPaymentMode.setEnabled(true);
            }
            if (DateUtil.dateDiff(currDate, matDate) < observable.backDateFreq) {
                //                ClientUtil.showAlertWindow("Date of Maturity is lesser than today's date...\n" +
                //                "The Date of Maturity should be minimum 15 days from today's date...");
                exists = true;
                //                periodChange = true;
                already = false;
                //                txtPeriodOfDeposit_Days.requestFocus();
                //                btnDepSubNoAccSave.requestFocus();
                txtDepositAmount.setEnabled(false);
            } else {
                periodChange = true;
                exists = true;
                txtDepositAmount.setEnabled(false);
            }
            if (cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")) {
                txtPeriodOfDeposit_Days.setText("");
                //                btnDepSubNoAccSave.requestFocus();
            }
            cboInterestPaymentFrequency.setEnabled(false);
        }
        //        if(addingSomeAmt ==true){
        //            periodFlag = true;
        //            btnDepSubNoAccNew.setEnabled(false);
        //            btnDepSubNoAccSave.setEnabled(true);
        //            //            depSubNoSave(); //--- Save the Data
        //        }
        if (retTxtBox == 0) {
            int retVal = chkPeriodMultiples();
            if (retVal == 0) {
                int YrsToDay = 0;
                int MonToDay = 0;
                int daysEntered = 0;
                int WeekToDay = 0;
                int chkDy = 0;
                if ((txtPeriodOfDeposit_Years.getText() != null) && (!txtPeriodOfDeposit_Years.getText().equals(""))) {
                    YrsToDay = (Integer.parseInt(txtPeriodOfDeposit_Years.getText())) * 365;
                }
                if ((txtPeriodOfDeposit_Months.getText() != null) && (!txtPeriodOfDeposit_Months.getText().equals(""))) {
                    MonToDay = ((Integer.parseInt(txtPeriodOfDeposit_Months.getText())) * 30);
                }
                if ((txtPeriodOfDeposit_Days.getText() != null) && (!txtPeriodOfDeposit_Days.getText().equals(""))) {
                    daysEntered = Integer.parseInt(txtPeriodOfDeposit_Days.getText());
                }
                if ((txtWeek.getText() != null) && (!txtWeek.getText().equals(""))) {
                    WeekToDay = (Integer.parseInt(txtWeek.getText())) * 7;
                }
                chkDy = (YrsToDay + MonToDay + daysEntered + WeekToDay);
                if ((chkDy <= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MAX_DEPOSIT_PERIOD"))))
                        && (chkDy >= Integer.parseInt(CommonUtil.convertObjToStr(depProdDetails.get("MIN_DEPOSIT_PERIOD"))))) {
                    calculateMatDate();
                } else {
                    //                    if(viewType != ClientConstants.VIEW_TYPE_RENEW && renewdDepNo.length()==0){
                    //                        calculateMatDate();
                    //                        //                          msgStrB.append(msgMinMaxPeriod());
                    //                        //                          msgStrB.append("\n");
                    //                    } else {
                    calculateMatDate();
                    //                    }
                }
            } else {
                //                if(viewType != ClientConstants.VIEW_TYPE_RENEW && renewdDepNo.length()==0){
                //
                //                    //                          msgStrB.append(msgPeriodMultiples());
                //                    //                          msgStrB.append("\n");
                //                } else {
                calculateMatDate();
                //                }
            }
        }
        if (txtPeriodOfDeposit_Years.getText().length() <= 0 && txtPeriodOfDeposit_Months.getText().length() <= 0 && txtPeriodOfDeposit_Days.getText().length() <= 0 && txtWeek.getText().length() <= 0) {
            tdtMaturityDate.setDateValue("");
        }
        //--- If it is not filled, thn assign "0" to it.
        if (txtPeriodOfDeposit_Days.getText().length() == 0) {
            observable.setTxtPeriodOfDeposit_Days("0");
            txtPeriodOfDeposit_Days.setText(observable.getTxtPeriodOfDeposit_Days());
        }
        //        if(viewType != ClientConstants.VIEW_TYPE_RENEW && observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)){
        //        if(observable.productBehavesLike.equals(observable.prodBehavesLikeFixed)){
        //            double year = 0;
        //            double month = 0;
        //            double days = 0;
        //            cboInterestPaymentMode.setEnabled(true);
        //            year = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue();
        //            month = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue();
        //            days = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Days.getText()).doubleValue();
        //            double value = year*365 +month*30+days;
        //            if(value <180){
        //                cboInterestPaymentFrequency.setSelectedItem("Date of Maturity");
        //            }else if(days>0 && cboInterestPaymentFrequency.getSelectedItem().equals("Monthly")){
        //                ClientUtil.displayAlert("Enter Years and Months only.....");
        //            }
        //        }
        //        if(txtPeriodOfDeposit_Months.getText().length()>0 && txtPeriodOfDeposit_Days.getText().length()>0){
        //            double year = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Years.getText()).doubleValue();
        //            double months = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Months.getText()).doubleValue();
        //            double days = CommonUtil.convertObjToDouble(txtPeriodOfDeposit_Days.getText()).doubleValue();
        //            if((year>0 && months == 0 && days>29)||(year>0 && months >0 && days>29)||(year == 0 && months>11 && days>29)){
        //                ClientUtil.displayAlert("Enter values less than 30 days...");
        //                return;
        //            }
        //        }
        periodCalculationMethod();
    }//GEN-LAST:event_txtWeekFocusLost

    private void chkRenewinterestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRenewinterestActionPerformed
        // TODO add your handling code here:
        rdoRenewalWithdrawingInt_NoActionPerformed(null);
    }//GEN-LAST:event_chkRenewinterestActionPerformed

    private void txtDepositAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepositAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepositAmountActionPerformed

    private void txtRenewalIntAmtValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRenewalIntAmtValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRenewalIntAmtValueActionPerformed

private void txtCustomerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerIdActionPerformed
// TODO add your handling code here:
    if (CustomerId!= null) {
        txtCustomerId.setText(CustomerId);
       CustomerId= "";
    }
}//GEN-LAST:event_txtCustomerIdActionPerformed

    private void cboAddressTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboAddressTypeActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_cboAddressTypeActionPerformed

    private void btnAgentIdFileOpen1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgentIdFileOpen1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAgentIdFileOpen1ActionPerformed

    private void btnDepositNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepositNoActionPerformed
       callView("Account");
    }//GEN-LAST:event_btnDepositNoActionPerformed

    private void txtDepsoitNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepsoitNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepsoitNoActionPerformed

    private void lblPreBalIntValMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPreBalIntValMouseClicked
        // TODO add your handling code here:
         if (CommonUtil.convertObjToDouble(lblPreBalIntVal.getText()).doubleValue() != 0) {//lblRenewalInterestRepayAmtVal
            enteredAmount(CommonUtil.convertObjToDouble(lblPreBalIntVal.getText()).doubleValue());
        }
    }//GEN-LAST:event_lblPreBalIntValMouseClicked
private void cboProductIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cboProductIdFocusLost
    System.out.println("inside focuslost"+viewType);
    if(viewType.equals("NEW"))
{
     txtReferenceNo.setText(generateBillsNoBranchAc());
}
}//GEN-LAST:event_cboProductIdFocusLost

    private void rdoOpeningMode_MultipleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoOpeningMode_MultipleActionPerformed
        if (!CommonUtil.convertObjToStr(TrueTransactMain.selBranch).equals("") && CommonUtil.convertObjToStr(TrueTransactMain.selBranch).length()>0 && 
        !TrueTransactMain.BRANCH_ID.equals(CommonUtil.convertObjToStr(TrueTransactMain.selBranch))) {
            ClientUtil.showMessageWindow("Interbranch Account creation not allowed for this screen...");
            TrueTransactMain.populateBranches();
            TrueTransactMain.selBranch = ProxyParameters.BRANCH_ID;
            observable.setSelectedBranchID(ProxyParameters.BRANCH_ID);
            setSelectedBranchID(ProxyParameters.BRANCH_ID);
            return;
        }
        else{
        updateOBFields();
        //---If Openeing Mode is Normal, show the Dialog Box
        if (observable.getRdoOpeningMode_Normal() == true) {
            if (viewType == ClientConstants.VIEW_TYPE_NEW) {
                panTransaction.add(transactionUI);

                tabTermDeposit.addTab("Transaction", panTransaction);
                tabTermDeposit.resetVisits();
            }
        }
        if (((!txtTransferingBranchCode.getText().equals("")) && txtTransferingBranchCode.getText() != null) && ((!txtOriginalAccountNumber.getText().equals("")) && txtOriginalAccountNumber.getText() != null)) {
            if ((observable.transferInSelect == true) && (rdoOpeningMode_Multiple.isSelected() == true)) {
                int reset = CommonMethods.showDialogYesNo(objTermDepositRB.getString("dialogForOpenMode"));
                if (reset == yes) { //--- If Yes, disable the TransferIn Tab
                    normalOpeningMode();
                } else if (reset == no) { //--- If No, don't disable the TransferIn Tab.
                    observable.transferInSelect = true;
                    observable.setRdoOpeningMode_Normal(false);
                    observable.setRdoOpeningMode_TransferIn(true);
                    observable.ttNotifyObservers();
                }
            }
        } else if (((txtTransferingBranchCode.getText().equals("")) || txtTransferingBranchCode.getText() == null) || ((txtOriginalAccountNumber.getText().equals("")) || txtOriginalAccountNumber.getText() == null)) {
            normalOpeningMode();
        }
        if (rdoOpeningMode_Multiple.isSelected() == true/*
                 * && (!btnDepSubNoAccNew.isEnabled())
                 */) {
            observable.setTdtDateOfDeposit(DateUtil.getStringDate((Date) currDt.clone()));
            tdtDateOfDeposit.setDateValue(observable.getTdtDateOfDeposit());
            tdtDateOfDeposit.setEnabled(false);
        }
        if (rdoOpeningMode_Multiple.isSelected() == true) {
            //            ClientUtil.enableDisable(panAccInf, true);
            ClientUtil.enableDisable(panOpenMode, true);
            ClientUtil.enableDisable(panCategory, true);
            btnCustomerIdFileOpen.setEnabled(true);
//            btnDepSubNoAccNew.setEnabled(true);
            chkTaxDeductions.setSelected(true);
            txtDepsoitNo.setEnabled(false);
            txtAgentId.setEnabled(false);
            chkTaxDeductions.setEnabled(false);
            chk15hDeclarations.setEnabled(false);
            rdoOpeningMode_Multiple.setEnabled(false);
            ClientUtil.enableDisable(panModeOfOpening, false);
            panExistingCustomer.setVisible(true);
            lblExistingCustomer.setVisible(true);
            txtExistingAcctNo.setVisible(true);
            lblExistingAcctNo.setVisible(true);
        }
        if (rdoOpeningMode_Multiple.isSelected() == true) {
            noofAccounts = 0.0;
            //amountDeposit = 0.0;
            multipleDeposits = true;
            new MultipleNoOfDepositsAmountUI(this).show();
            if (isClosed == true) {
                btnNewActionPerformed(null);
            }
            isClosed = false;
            //amountDeposit = getDepositAmount();
            noofAccounts = getNoOfDeposits();
            //txtDepositAmount.setText(CommonUtil.convertObjToStr(amountDeposit));
            panJointAcctButton1.setVisible(true);
            txtDepositsOpened.setAllowAll(true);
            txtDepositAmount.setValidation(new CurrencyValidation());
            txtDepositsOpened.setText("0");
            txtDepositAmount.setText("0");
        }
        txtDepsoitNo.setEnabled(false);
        txtAgentId.setEnabled(false);
        chkTaxDeductions.setEnabled(false);
        chk15hDeclarations.setEnabled(false);
        transNew = true;
//        cboAddressType.setSelectedItem("Home");
        cboSettlementMode.setSelectedItem("SELF");
        txtCustomerId.setEnabled(false);// Added by nithya on 26-09-2016
} 
    }//GEN-LAST:event_rdoOpeningMode_MultipleActionPerformed

    private void chkMobileNumRequiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMobileNumRequiredActionPerformed
        // TODO add your handling code here:
        if (chkMobileNumRequired.isSelected()) {
            if (txtCustomerId.getText().length() > 0) {
                long mobileNo = observable.getMobileNo(CommonUtil.convertObjToStr(txtCustomerId.getText()));
                if (mobileNo != 0) {
                    txtMobileNo.setText(CommonUtil.convertObjToStr(mobileNo));
                    tdtMobileSubscribedFrom.setDateValue(CommonUtil.convertObjToStr(currDt.clone()));
                }
            }
            EnableDisbleMobileBanking(true);
            tdtMobileSubscribedFrom.setDateValue(CommonUtil.convertObjToStr(currDt.clone()));
        } else {
            EnableDisbleMobileBanking(false);
            txtMobileNo.setText("");
            tdtMobileSubscribedFrom.setDateValue("");
        }
    }//GEN-LAST:event_chkMobileNumRequiredActionPerformed

    private void EnableDisbleMobileBanking(boolean flag) {
        txtMobileNo.setEnabled(flag);
        tdtMobileSubscribedFrom.setEnabled(flag);
    }
    
    private void txtMobileNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMobileNoFocusLost
        // TODO add your handling code here:
        tdtMobileSubscribedFrom.setDateValue(CommonUtil.convertObjToStr(currDt.clone()));
    }//GEN-LAST:event_txtMobileNoFocusLost

    private void cboAddressTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboAddressTypeItemStateChanged
        // TODO add your handling code here:
        String selectedAddressType = CommonUtil.convertObjToStr(observable.getCbmAddressType().getKeyForSelected());
        String primaryAddressType = "";
        HashMap whereMap =  new HashMap();
        whereMap.put("CUST_ID", txtCustomerId.getText());        
        List addrList = ClientUtil.executeQuery("getCustomerPrimaryCommunicationAddr",whereMap);
        if(addrList != null && addrList.size() > 0){            
            HashMap addrMap = (HashMap)addrList.get(0);
            if(addrMap.containsKey("COMM_ADDR_TYPE") && addrMap.get("COMM_ADDR_TYPE")!= null)
            primaryAddressType =  CommonUtil.convertObjToStr(addrMap.get("COMM_ADDR_TYPE"));
            if(!(selectedAddressType.equals(primaryAddressType))){
                ClientUtil.showMessageWindow("The primary Communication addresstype is ::" + primaryAddressType);
                cboAddressType.setSelectedItem(observable.getCbmAddressType().getDataForKey(primaryAddressType));
            }
         }
    }//GEN-LAST:event_cboAddressTypeItemStateChanged

    public String generateBillsNoBranchAc()
   {
       String referNo="",strPrefix="",nextAccno="";
       HashMap hash = null;
       HashMap where = new HashMap();
        String productid = CommonUtil.convertObjToStr(((ComboBoxModel)(cboProductId.getModel())).getKeyForSelected());
            System.out.println("****1111***********"+productid);
       where.put("PROD_TYPE",productid);
        where.put("BRANCH_ID",TrueTransactMain.BRANCH_ID);
       List list = (List) ClientUtil.executeQuery("getReferenceId", where);
         if (list.size() > 0) {
                hash = (HashMap) list.get(0);
                System.out.println("hash.........."+hash);
                 if (hash.containsKey("PREFIX")) {
                    strPrefix = (String) hash.get("PREFIX");
                    if (strPrefix == null || strPrefix.trim().length() == 0) strPrefix = "";
                }
              nextAccno=   (String) hash.get("NEXT_AC_NO");
              referNo=strPrefix+nextAccno;
         }
            System.out.println("****referNo*****"+referNo);
       return referNo;
   }
    private void savePerformed() {
        try {
            updateOBFields();
            if(observable.getActionType() == ClientConstants.ACTIONTYPE_NEW && rdoOpeningMode_Multiple.isSelected() == true && multipleDeposits == true){
                //for(int in = 0 ; in < noofAccounts ; in++){ //Jeffin
                observable.setNoOfAccounts(noofAccounts);
                    observable.doAction(nomineeUi.getNomineeOB());
                //}
            }
            else{
                
                observable.doAction(nomineeUi.getNomineeOB());
            }
            if (observable.getResult() != ClientConstants.ACTIONTYPE_FAILED) {
                HashMap lockMap = new HashMap();
                ArrayList lst = new ArrayList();
                lst.add("DEPOSIT NO");
                lockMap.put(ClientConstants.RECORD_KEY_COL, lst);
                //                if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW)
                if (observable.getProxyReturnMap() != null) {
                    if (observable.getProxyReturnMap().containsKey("DEPOSIT NO")) {
                        lockMap.put("DEPOSIT NO", observable.getProxyReturnMap().get("DEPOSIT NO"));
                    }
//                    if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW || observable.getActionType() == ClientConstants.ACTIONTYPE_RENEW) {
//                        HashMap printMap = new HashMap();
//                        String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
//                        printMap.put("PROD_ID", prodId);
//                        List printList = ClientUtil.executeQuery("getCertificatePrintFrmProdLevel", printMap);
//                        if (printList != null && printList.size() > 0) {
//                            printMap = new HashMap();
//                            printMap = (HashMap) printList.get(0);
//                            if (!printMap.get("CERTIFICATE_PRINTING").equals("") && printMap.get("CERTIFICATE_PRINTING").equals("O")) {
//                                printMap.put("DEPOSIT NO", observable.getProxyReturnMap().get("DEPOSIT NO"));
//                                //system.out.println("aaaaaaaaaaaaa");
//                                printDepositCertificate(printMap);
//                            }
//                        }
//                    }

                    //jithin
                    //                    if (observable.getProxyReturnMap()!=null && observable.getProxyReturnMap().containsKey("TRANS_ID")) {
                    //                        String actNum = (String)observable.getProxyReturnMap().get("TRANS_ID");
                    //                        observable.setTxtDepsoitNo(actNum);
                    //                        //system.out.println("@#$@#$#@$in here:"+actNum);
                    //                        int yesNo = 0;
                    //                        String[] options = {"Yes", "No"};
                    //                        yesNo = COptionPane.showOptionDialog(null,"Do you want to print?", CommonConstants.WARNINGTITLE,
                    //                        COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                    //                        null, options, options[0]);
                    //                        //system.out.println("#$#$$ yesNo : "+yesNo);
                    //                        if (yesNo==0) {
                    //                            com.see.truetransact.clientutil.ttrintegration.TTIntegration ttIntgration = null;
                    //                            HashMap reportTransIdMap = new HashMap();
                    //                            reportTransIdMap.put("Act_Num", actNum);
                    //                            ttIntgration.setParam(reportTransIdMap);
                    //                            String transType = "";
                    //                            //                    if (((String)TrueTransactMain.BANKINFO.get("BANK_NAME")).toUpperCase().lastIndexOf("POLPULLY")!=-1) {
                    //                            //                        ttIntgration.integrationForPrint("Goldbond");
                    //                            //                    } else {
                    //                            if (((String)TrueTransactMain.BANKINFO.get("BANK_NAME")).toUpperCase().lastIndexOf("POLPULLY")!=-1) {
                    //                                ttIntgration.integrationForPrint("DepositReceipt");
                    //                            } else {
                    //                                ttIntgration.integrationForPrint("DepositReceipt");
                    //                            }
                    //                        }
                    //                        if(transNew){
                    //                            displayTransDetail();
                    //                        }
                    //                    }

                    //                    if (observable.getProxyReturnMap()!=null && observable.getProxyReturnMap().containsKey("DEPOSIT NO")) {
                    //                        String actNum = (String)observable.getProxyReturnMap().get("DEPOSIT NO");
                    //                        int yesNo = 0;
                    //                        String[] options = {"Yes", "No"};
                    //                        yesNo = COptionPane.showOptionDialog(null,"Do you want to print Certificate?", CommonConstants.WARNINGTITLE,
                    //                        COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                    //                        null, options, options[0]);
                    //                        //system.out.println("#$#$$ yesNo : "+yesNo);
                    //                        if (yesNo==0) {
                    //                            com.see.truetransact.clientutil.ttrintegration.TTIntegration ttIntgration = null;
                    //                            HashMap reportTransIdMap = new HashMap();
                    //                            reportTransIdMap.put("Act_Num", actNum);
                    //                            ttIntgration.setParam(reportTransIdMap);
                    //                            String transType = "";
                    //                            if (((String)TrueTransactMain.BANKINFO.get("BANK_NAME")).toUpperCase().lastIndexOf("POLPULLY")!=-1) {
                    //                                ttIntgration.integrationForPrint("DepositReceipt");
                    //                            } else {
                    //                                ttIntgration.integrationForPrint("DepositReceipt");
                    //                            }
                    //                        }
                    //                    }
                }
                //                if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
                //                    lockMap.put("DEPOSIT NO",  observable.getTxtDepsoitNo());
                //                }
                //                setEditLockMap(lockMap);
                //                setEditLock();
                lockScreenDeposits();
            }
            if (!(observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) && rdoOpeningMode_Multiple.isSelected()) {

                subDepositDetails();
//            authSignUI.setLblStatus(observable.getLblStatus());
//            poaUI.setLblStatus(observable.getLblStatus());
//            authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
//            poaUI.getPowerOfAttorneyOB().ttNotifyObservers();
//            observable.makeToNull();
//            maxShare = MAXIMUMSHARE;
//            viewType=ClientConstants.VIEW_TYPE_CANCEL;
//            //            btnCancelActionPerformed(null);
//            //            cancelOperation();
//            observable.setResultStatus();
//            authSignUI.resetAllFieldsInAuthTab();
//            poaUI.clearCboPoACust_ID();
//            poaUI.resetPoAForm();
//            cboInterestPaymentFrequency.setEnabled(false);
//            cboInterestPaymentMode.setEnabled(false);
//            poaUI.getPowerOfAttorneyOB().ttNotifyObservers();
//            authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
//            authSignUI.setAuthEnableDisable(false);
//            authSignUI.setAuthOnlyNewBtnEnable();
//            poaUI.setAllPoAEnableDisable(false);
//            nomineeUi.resetTable();
//            nomineeUi.resetNomineeData();
//            nomineeUi.disableNewButton(false);
//            befAddingAddAmt = 0.0;
//            doublingFlag = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void subDepositDetails() {
        authSignUI.setLblStatus(observable.getLblStatus());
        poaUI.setLblStatus(observable.getLblStatus());
        authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
        poaUI.getPowerOfAttorneyOB().ttNotifyObservers();
        observable.makeToNull();
        maxShare = MAXIMUMSHARE;
        viewType = ClientConstants.VIEW_TYPE_CANCEL;
        //            btnCancelActionPerformed(null);
        //            cancelOperation();
        observable.setResultStatus();
        authSignUI.resetAllFieldsInAuthTab();
        poaUI.clearCboPoACust_ID();
        poaUI.resetPoAForm();
        cboInterestPaymentFrequency.setEnabled(false);
        cboInterestPaymentMode.setEnabled(false);
        poaUI.getPowerOfAttorneyOB().ttNotifyObservers();
        authSignUI.getAuthorizedSignatoryOB().ttNotifyObservers();
        authSignUI.setAuthEnableDisable(false);
        authSignUI.setAuthOnlyNewBtnEnable();
        poaUI.setAllPoAEnableDisable(false);
        nomineeUi.resetTable();
        nomineeUi.resetNomineeData();
        nomineeUi.disableNewButton(false);
        befAddingAddAmt = 0.0;
        doublingFlag = false;
        doublingCount =2;

    }

    private boolean insertTransactionPart() {
        HashMap singleAuthorizeMap = new HashMap();
        java.util.ArrayList arrList = new java.util.ArrayList();
        HashMap authDataMap = new HashMap();
        //        if(observable.getTxtDepsoitNo().length()>0){
        //            authDataMap.put("ACCT_NUM", observable.getTxtDepsoitNo());
        //        }else{
        //            authDataMap.put("ACCT_NUM", lblAcctNo_Sanction_Disp.getText());
        //        }
        arrList.add(authDataMap);
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW || observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT /*&& observable.getAvailableBalance() >0 */) {
            //        if(observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE && observable.getAvailableBalance() >0){
            String[] debitType = {"Cash", "Transfer"};
            String[] obj4 = {"Yes", "No"};
            //            int option3 = COptionPane.showOptionDialog(null,("Do you want to make Transaction?"), ("Transaction"),
            //            COptionPane.YES_NO_CANCEL_OPTION,COptionPane.QUESTION_MESSAGE,null,obj4,obj4[0]);
            //            int option3 = 0;
            String transType = "";
//            while (CommonUtil.convertObjToStr(transType).length()==0) {
//                transType = (String)COptionPane.showInputDialog(null,"Select Transaction Type", "Transaction type", COptionPane.QUESTION_MESSAGE, null, debitType, "");
            if (transactionUI.getOutputTO() != null && transactionUI.getOutputTO().size() > 0) {
                java.util.LinkedHashMap hashmap = transactionUI.getOutputTO();
                TransactionTO tranTo = (TransactionTO) hashmap.get("1");
                String transtype = tranTo.getTransType();
                String pid = tranTo.getProductId();
                String acno = tranTo.getDebitAcctNo();
                authDataMap.put("TRANSACTION_PART", "TRANSACTION_PART");
                authDataMap.put("TRANS_TYPE", transtype);
                String prodId = ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString();
                //system.out.println("@#@# prodId:" + prodId);
                authDataMap.put("PROD_ID", prodId);
                authDataMap.put("DR_PROD_ID", pid);
                authDataMap.put("DEPOSIT_AMOUNT", transactionUI.getCallingAmount());
                authDataMap.put("USER_ID", ProxyParameters.USER_ID);
                authDataMap.put("CR_ACT_NUM", acno);
                authDataMap.put("PROD_TYPE", tranTo.getProductType());
                //system.out.println("@#@# authDataMap:" + authDataMap);

                observable.setTransactionMap(authDataMap);
            } else {
                return false;
            }
            // If Without Transaction Need
            //                else{
            //                    transType = "Cancel";
            //        }
        }
        return true;
    }

    private boolean checkingActNo(String sbAcNo) {
        boolean flag = false;
        HashMap existingMap = new HashMap();
        existingMap.put("ACT_NUM", sbAcNo.toUpperCase());
        List mapDataList = ClientUtil.executeQuery("getAccNoDet", existingMap);
        //system.out.println("#### mapDataList :" + mapDataList);
        if (mapDataList != null && mapDataList.size() > 0) {
            existingMap = (HashMap) mapDataList.get(0);
            String[] obj5 = {"Proceed", "ReEnter"};
            int option4 = COptionPane.showOptionDialog(null, ("Please check whether Account No, Name coreect or not " + "\nOperative AcctNo is : " + existingMap.get("Account Number") + "\nCustomer Name :" + existingMap.get("Customer Name")), ("Transaction Part"),
                    COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj5, obj5[0]);
            if (option4 == 0) {
                flag = true;
            } else {
                flag = false;
            }
        }
        return flag;
    }

    private String firstEnteredActNo() {
        String sbAcNo = COptionPane.showInputDialog(this, objTermDepositRB.getString("REMARK_TRANSFER_TRANS"));
        return sbAcNo;
    }

    private void displayTransDetail() {   //Jeffin
        if (observable.getResult() != ClientConstants.ACTIONTYPE_FAILED) {
            String displayStr = "";
            String oldBatchId = "";
            String newBatchId = "";
            String depositNumber = CommonUtil.convertObjToStr(observable.getTxtDepsoitNo());
            HashMap transMap = new HashMap();
            transMap.put("BATCH_ID", observable.getTxtDepsoitNo() + "_1");
            transMap.put("TRANS_DT", currDt);
            transMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);
          //  List lst = ClientUtil.executeQuery("getTransferDetails", transMap);
                List lst = ClientUtil.executeQuery("getDepositAccountTransferDetails", transMap);
            if (lst != null && lst.size() > 0) {
                displayStr += "Transfer Transaction Details...\n";
                for (int i = 0; i < lst.size(); i++) {
                    transMap = (HashMap) lst.get(i);
                    displayStr += "Trans Id : " + transMap.get("TRANS_ID")
                            + "   Batch Id : " + transMap.get("BATCH_ID")
                            + "   Trans Type : " + transMap.get("TRANS_TYPE");
                    depositNumber = CommonUtil.convertObjToStr(transMap.get("ACT_NUM"));
                    if (depositNumber != null && !depositNumber.equals("")) {
                        displayStr += "   Account No : " + transMap.get("ACT_NUM")
                                + "   Deposit Amount : " + transMap.get("AMOUNT") + "\n";
                    } else {
                        displayStr += "   Ac Hd Desc : " + transMap.get("AC_HD_ID")
                                + "   Interest Amount : " + transMap.get("AMOUNT") + "\n";
                    }
                    //system.out.println("#### :" + transMap);
                    oldBatchId = newBatchId;
                }
            }
            depositNumber = CommonUtil.convertObjToStr(observable.getTxtDepsoitNo());
            transMap = new HashMap();
            transMap.put("BATCH_ID", observable.getTxtDepsoitNo() + "_1");
            transMap.put("TRANS_DT", currDt);
            transMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);
            lst = ClientUtil.executeQuery("getCashDetails", transMap);
            if (lst != null && lst.size() > 0) {
                //system.out.println("ffffffffffffffffffffffffff");
                displayStr += "Cash Transaction Details...\n";
                for (int i = 0; i < lst.size(); i++) {
                    transMap = (HashMap) lst.get(i);
                    displayStr += "Trans Id : " + transMap.get("TRANS_ID")
                            + "   Trans Type : " + transMap.get("TRANS_TYPE");
                    depositNumber = CommonUtil.convertObjToStr(transMap.get("ACT_NUM"));
                    if (depositNumber != null && !depositNumber.equals("")) {
                        displayStr += "   Account No :  " + transMap.get("ACT_NUM")
                                + "   Deposit Amount :  " + transMap.get("AMOUNT") + "\n";
                    } else {
                        displayStr += "   Ac Hd Desc :  " + transMap.get("AC_HD_ID")
                                + "   Interest Amount :  " + transMap.get("AMOUNT") + "\n";
                    }
                }
            }
            if (!displayStr.equals("")) {
                ClientUtil.showMessageWindow("" + displayStr);
            }
        }
    }

    private boolean tokenValidation(String tokenNo) {
        boolean tokenflag = false;
        HashMap tokenWhereMap = new HashMap();// Separating Serias No and Token No
        char[] chrs = tokenNo.toCharArray();
        StringBuffer seriesNo = new StringBuffer();
        int i = 0;
        for (int j = chrs.length; i < j; i++) {
            if (Character.isDigit(chrs[i])) {
                break;
            } else {
                seriesNo.append(chrs[i]);
            }
        }
        tokenWhereMap.put("SERIES_NO", seriesNo.toString());
        tokenWhereMap.put("TOKEN_NO", CommonUtil.convertObjToInt(tokenNo.substring(i)));
        tokenWhereMap.put("USER_ID", ProxyParameters.USER_ID);
        tokenWhereMap.put("BRANCH_ID", ProxyParameters.BRANCH_ID);
        tokenWhereMap.put("CURRENT_DT", currDt.clone());
        List lst = ClientUtil.executeQuery("validateTokenNo", tokenWhereMap);
        if (((Integer) lst.get(0)).intValue() == 0) {
            tokenflag = false;
        } else {
            tokenflag = true;
        }
        return tokenflag;
    }

    private void setButtonEnableDisable() {
        btnNew.setEnabled(!btnNew.isEnabled());
        btnEdit.setEnabled(!btnEdit.isEnabled());
        btnDelete.setEnabled(!btnDelete.isEnabled());
        mitNew.setEnabled(btnNew.isEnabled());
        mitEdit.setEnabled(btnEdit.isEnabled());
        mitDelete.setEnabled(btnDelete.isEnabled());
        btnSave.setEnabled(!btnNew.isEnabled());
        btnCancel.setEnabled(!btnNew.isEnabled());
        mitSave.setEnabled(btnSave.isEnabled());
        mitCancel.setEnabled(btnCancel.isEnabled());
        btnView.setEnabled(!btnView.isEnabled());
        //system.out.println("### btnSave.isEnabled() : " + btnSave.isEnabled());
        setAuthBtnEnableDisable();
    }

    private void setAuthBtnEnableDisable() {
        boolean enableDisable = !btnSave.isEnabled();
        btnAuthorize.setEnabled(enableDisable);
        btnException.setEnabled(enableDisable);
        btnReject.setEnabled(enableDisable);
        mitAuthorize.setEnabled(enableDisable);
        mitException.setEnabled(enableDisable);
        mitReject.setEnabled(enableDisable);
    }

    /* Auto Generated Method - setFieldNames()
     This method assigns name for all the components.
     Other functions are working based on this name. */
    private void setFieldNames() {
        btnAuthorize.setName("btnAuthorize");
        btnCancel.setName("btnCancel");
        btnClose.setName("btnClose");
        btnCustomerIdFileOpen.setName("btnCustomerIdFileOpen");
        btnDelete.setName("btnDelete");
        //        btnDepSubNoAccDel.setName("btnDepSubNoAccDel");
        //        btnDepSubNoAccNew.setName("btnDepSubNoAccNew");
        //        btnDepSubNoAccSave.setName("btnDepSubNoAccSave");
        btnEdit.setName("btnEdit");
        btnException.setName("btnException");
        btnJointAcctDel.setName("btnJointAcctDel");
        btnJointAcctNew.setName("btnJointAcctNew");
        btnJointAcctToMain.setName("btnJointAcctToMain");
        btnNew.setName("btnNew");
        btnPrint.setName("btnPrint");
        btnReject.setName("btnReject");
        btnSave.setName("btnSave");
        btnTransBranchCodeHelp.setName("btnTransBranchCodeHelp");
        btnOriginalAccountNumberHelp.setName("btnOriginalAccountNumberHelp");
        cboCategory.setName("cboCategory");
        cboConstitution.setName("cboConstitution");
        cboAddressType.setName("cboAddressType");
        //        cboInstallmentAmount.setName("cboInstallmentAmount");
        cboInterestPaymentFrequency.setName("cboInterestPaymentFrequency");
        cboInterestPaymentMode.setName("cboInterestPaymentMode");
        //        cboPaymentType.setName("cboPaymentType");
        cboProductId.setName("cboProductId");
        cboSettlementMode.setName("cboSettlementMode");
        chk15hDeclarations.setName("chk15hDeclarations");
        chkAuthorizedSignatory.setName("chkAuthorizedSignatory");
        chkNomineeDetails.setName("chkNomineeDetails");
        chkPowerOfAttorney.setName("chkPowerOfAttorney");
        //        chkMember.setName("chkMember");
        chkTaxDeductions.setName("chkTaxDeductions");
        lbl15hDeclarations.setName("lbl15hDeclarations");
        //        lblAccountHead.setName("lblAccountHead");
        lblArea.setName("lblArea");
        lblBalanceInterestPayable.setName("lblBalanceInterestPayable");
        lblCategory.setName("lblCategory");
        lblCity.setName("lblCity");
        lblAddressType.setName("lblAddressType");
        lblConstitution.setName("lblConstitution");
        lblCountry.setName("lblCountry");
        lblCustomerId.setName("lblCustomerId");
        lblCustomerName.setName("lblCustomerName");
        lblDateOfBirth.setName("lblDateOfBirth");
        lblDateOfDeposit.setName("lblDateOfDeposit");
        lblDateOfTransfer.setName("lblDateOfTransfer");
        lblDepositAmount.setName("lblDepositAmount");
        lblDepositNo.setName("lblDepositNo");
        lblDepositSubNo.setName("lblDepositSubNo");
        //        lblInstallmentAmount.setName("lblInstallmentAmount");
        lblInterBranchTransferNo.setName("lblInterBranchTransferNo");
        lblInterestPaid.setName("lblInterestPaid");
        lblInterestPaymentFrequency.setName("lblInterestPaymentFrequency");
        lblInterestPaymentMode.setName("lblInterestPaymentMode");
        lblInterestProvidedAmount.setName("lblInterestProvidedAmount");
        lblLastInstallmentReceivedDate.setName("lblLastInstallmentReceivedDate");
        lblLastInterestCalculatedDate.setName("lblLastInterestCalculatedDate");
        lblLastTdsCollected.setName("lblLastTdsCollected");
        lblMaturityAmount.setName("lblMaturityAmount");
        lblMaturityDate.setName("lblMaturityDate");
        lblModeOfOpening.setName("lblModeOfOpening");
        lblMsg.setName("lblMsg");
        lblOriginalAccountNumber.setName("lblOriginalAccountNumber");
        lblOriginalDateOfDeposit.setName("lblOriginalDateOfDeposit");
        lblPanNumber.setName("lblPanNumber");
        //        lblPaymentDate.setName("lblPaymentDate");
        //        lblPaymentType.setName("lblPaymentType");
        lblPeriodOfDeposit.setName("lblPeriodOfDeposit");
        lblPeriod_Days.setName("lblPeriod_Days");
        lblPeriod_Months.setName("lblPeriod_Months");
        lblPeriod_Years.setName("lblPeriod_Years");
        lblPeriodicInterestAmount.setName("lblPeriodicInterestAmount");
        lblPin.setName("lblPin");
        lblPrintedNoOfTheFdr.setName("lblPrintedNoOfTheFdr");
        lblProdDesc.setName("lblProdDesc");
        lblProductDescription.setName("lblProductDescription");
        lblProductId.setName("lblProductId");
        lblRateOfInterest.setName("lblRateOfInterest");
        lblRemarks.setName("lblRemarks");
        lblSettlementMode.setName("lblSettlementMode");
        lblSpace1.setName("lblSpace1");
        lblSpace2.setName("lblSpace2");
        lblSpace3.setName("lblSpace3");
        lblSpace5.setName("lblSpace5");
        lblState.setName("lblState");
        lblStatus.setName("lblStatus");
        lblStreet.setName("lblStreet");
        lblTaxDeductions.setName("lblTaxDeductions");
        lblTdsCollectedUpto.setName("lblTdsCollectedUpto");
        lblTotalInstallmentReceived.setName("lblTotalInstallmentReceived");
        lblTotalInterestAmount.setName("lblTotalInterestAmount");
        lblTotalNumberOfInstallments.setName("lblTotalNumberOfInstallments");
        lblTransferingAmount.setName("lblTransferingAmount");
        lblTransferingBranchCode.setName("lblTransferingBranchCode");
        lblTransferingBranchName.setName("lblTransferingBranchName");
        //        lblValAccountHead.setName("lblValAccountHead");
        lblValArea.setName("lblValArea");
        lblValBalanceInterestPayable.setName("lblValBalanceInterestPayable");
        lblValCity.setName("lblValCity");
//        lblValCommunicationAddress.setName("lblValCommunicationAddress");
        lblValCountry.setName("lblValCountry");
        lblValCustomerName.setName("lblValCustomerName");
        lblValDateOfBirth.setName("lblValDateOfBirth");
        lblValDepositSubNo.setName("lblValDepositSubNo");
        lblValPin.setName("lblValPin");
        lblValState.setName("lblValState");
        lblValStreet.setName("lblValStreet");
        lblValTransferingBranchName.setName("lblValTransferingBranchName");
        //this details filled with the present Position Details tab....
        lblAvailableBalance.setName("lblAvailableBalance");
        lblClearBalance.setName("lblClearBalance");
        lblTotalBalance.setName("lblTotalBalance");
        lblTotalInterest.setName("lblTotalInterest");
        lblLastInterestPaidDate.setName("lblLastInterestPaidDate");
        lblAvailableBalanceValue.setName("lblAvailableBalance");
        lblTdsAmount.setName("lblTdsAmount");
        lblClearBalanceValue.setName("lblClearBalance");
        lblTotalBalanceValue.setName("lblTotalBalance");
        lblTotalInterestValue.setName("lblTotalInterest");
        lblLastInterestPaidDateValue.setName("lblLastInterestPaidDate");
        lblPaidInterestAmount.setName("lblPaidInterestAmount");
        lblBalanceInterestAmount.setName("lblBalanceInterestAmount");
        lblPaidInterestAmount.setName("lblPaidInterestAmount");
        lblBalanceInterestAmountValue.setName("lblBalanceInterestAmount");
        lblTotalInterestPayable.setName("lblTotalInterestPayable");
        lblTotalInterestPayableValue.setName("lblTotalInterestPayable");
        lblAccHead.setName("lblAccHead");
        //        lblDepositLienNo.setName("lblDepositLienNo");
        //        lblLienDate.setName("lblLienDate");
        //        lblLienAmount.setName("lblLienAmount");
        //        lblLoanNo.setName("lblLoanNo");
        //        lblLoanBalance.setName("lblLoanBalance");
        //        lblLoanTakenDate.setName("lblLoanTakenDate");
        //        lblDepositLienNoValue.setName("lblDepositLienNoValue");
        //        lblLienDateValue.setName("lblLienDateValue");
        //        lblLienAmountValue.setName("lblLienAmountValue");
        //        lblLoanNoValue.setName("lblLoanNoValue");
        //        lblLoanBalanceValue.setName("lblLoanBalanceValue");
        //        lblLoanTakenDateValue.setName("lblLoanTakenDateValue");
        mbrMain.setName("mbrMain");
        panAccInf.setName("panAccInf");
        panAccountInformation.setName("panAccountInformation");
        panAccountInformationLeftPanel.setName("panAccountInformationLeftPanel");
        //        panBtnDepSubNoAcc.setName("panBtnDepSubNoAcc");
        panCategory.setName("panCategory");
        panCustomerId.setName("panCustomerId");
        panCustomerName.setName("panCustomerName");
        panCustomerSide.setName("panCustomerSide");
        panDateOfTransfer.setName("panDateOfTransfer");
        panDepositDetails.setName("panDepositDetails");
        panDepositDt.setName("panDepositDt");
        panInput.setName("panInput");
        panIntBranchTransferNo.setName("panIntBranchTransferNo");
        panInterBranchFunds.setName("panInterBranchFunds");
        panJointAcctButton.setName("panJointAcctButton");
        panJointAcctHolder.setName("panJointAcctHolder");
        panLastIntCalDt.setName("panLastIntCalDt");
        panLastInterestCalculatedDate.setName("panLastInterestCalculatedDate");
        panMaturityDt.setName("panMaturityDt");
        panModeOfOpening.setName("panModeOfOpening");
        panOpenMode.setName("panOpenMode");
        panPeriodOfDeposit.setName("panPeriodOfDeposit");
        panStatus.setName("panStatus");
        panTDSCollUpto.setName("panTDSCollUpto");
        //        panTblDepSubNoAccInfo.setName("panTblDepSubNoAccInfo");
        panTermDeposit.setName("panTermDeposit");
        panTranBranCode.setName("panTranBranCode");
        panTranBrancName.setName("panTranBrancName");
        panTransInDet.setName("panTransInDet");
        panTransferInDetails.setName("panTransferInDetails");
        panTransferingBranchCode.setName("panTransferingBranchCode");
        rdoOpeningMode_Multiple.setName("rdoOpeningMode_Multiple");
        
        srpJointAcctHolder.setName("srpJointAcctHolder");
        //        srpTblDepSubNoAccInfo.setName("srpTblDepSubNoAccInfo");
        tabTermDeposit.setName("tabTermDeposit");
        //        tblDepSubNoAccInfo.setName("tblDepSubNoAccInfo");
        tblJointAcctHolder.setName("tblJointAcctHolder");
        tdtDateOfDeposit.setName("tdtDateOfDeposit");
        tdtDateOfTransfer.setName("tdtDateOfTransfer");
        tdtLastInstallmentReceivedDate.setName("tdtLastInstallmentReceivedDate");
        tdtLastInterestCalculatedDate.setName("tdtLastInterestCalculatedDate");
        tdtMaturityDate.setName("tdtMaturityDate");
        tdtOriginalDateOfDeposit.setName("tdtOriginalDateOfDeposit");
        //        tdtPaymentDate.setName("tdtPaymentDate");
        tdtTdsCollectedUpto.setName("tdtTdsCollectedUpto");
        txtCustomerId.setName("txtCustomerId");
        txtDepositAmount.setName("txtDepositAmount");
        txtDepsoitNo.setName("txtDepsoitNo");
        txtInterBranchTransferNo.setName("txtInterBranchTransferNo");
        txtInterestPaid.setName("txtInterestPaid");
        txtInterestProvidedAmount.setName("txtInterestProvidedAmount");
        txtLastTdsCollected.setName("txtLastTdsCollected");
        txtMaturityAmount.setName("txtMaturityAmount");
        txtOriginalAccountNumber.setName("txtOriginalAccountNumber");
        txtPanNumber.setName("txtPanNumber");
        txtPeriodOfDeposit_Days.setName("txtPeriodOfDeposit_Days");
        txtPeriodOfDeposit_Months.setName("txtPeriodOfDeposit_Months");
        txtPeriodOfDeposit_Years.setName("txtPeriodOfDeposit_Years");
        txtPeriodicInterestAmount.setName("txtPeriodicInterestAmount");
        txtPrintedNoOfTheFdr.setName("txtPrintedNoOfTheFdr");
        txtRateOfInterest.setName("txtRateOfInterest");
        txtRemarks.setName("txtRemarks");
        txtTotalInstallmentReceived.setName("txtTotalInstallmentReceived");
        txtTotalInterestAmount.setName("txtTotalInterestAmount");
        txtTotalNumberOfInstallments.setName("txtTotalNumberOfInstallments");
        txtTransferingAmount.setName("txtTransferingAmount");
        txtTransferingBranchCode.setName("txtTransferingBranchCode");
        txtAgentId.setName("txtAgentId");
        //crediting other accounts.....
        lblProductType.setName("lblProductType");
        lblProdId.setName("lblProdId");
        lblAccountNo.setName("lblAccountNo");
        lblCustomerNameCr.setName("lblCustomerNameCr");
        cboProdType.setName("cboProdType");
        cboProdId.setName("cboProdId");
        txtCustomerIdCr.setName("txtCustomerIdCr");
        lblCustomerNameCrValue.setName("lblCustomerNameCrValue");
        btnCustomerIdFileOpenCr.setName("btnCustomerIdFileOpenCr");
        lblSalaryRecovery.setName("lblSalaryRecovery");
        rdoSalaryRecovery_Yes.setName("rdoSalaryRecovery_Yes");
        rdoSalaryRecovery_No.setName("rdoSalaryRecovery_No");
        lblLockStatus.setName("Lock Status");
    }

    /* Auto Generated Method - internationalize()
     This method used to assign display texts from
     the Resource Bundle File. */
    private void internationalize() {
        MultipleTermDepositRB resourceBundle = new MultipleTermDepositRB();
        rdoOpeningMode_Multiple.setText(resourceBundle.getString("rdoOpeningMode_Multiple"));
        chk15hDeclarations.setText(resourceBundle.getString("chk15hDeclarations"));
        lblValCity.setText(resourceBundle.getString("lblValCity"));
        lblTaxDeductions.setText(resourceBundle.getString("lblTaxDeductions"));
        lblProductDescription.setText(resourceBundle.getString("lblProductDescription"));
        btnReject.setText(resourceBundle.getString("btnReject"));
        lblCategory.setText(resourceBundle.getString("lblCategory"));
        lblInterestPaymentMode.setText(resourceBundle.getString("lblInterestPaymentMode"));
        lblValCustomerName.setText(resourceBundle.getString("lblValCustomerName"));
        lblValArea.setText(resourceBundle.getString("lblValArea"));
        lblTransferingBranchName.setText(resourceBundle.getString("lblTransferingBranchName"));
        btnException.setText(resourceBundle.getString("btnException"));
        btnSave.setText(resourceBundle.getString("btnSave"));
        lblMaturityAmount.setText(resourceBundle.getString("lblMaturityAmount"));
        btnCustomerIdFileOpen.setText(resourceBundle.getString("btnCustomerIdFileOpen"));
        //        btnDepSubNoAccDel.setText(resourceBundle.getString("btnDepSubNoAccDel"));
        lblArea.setText(resourceBundle.getString("lblArea"));
        lblPowerOfAttorney.setText(resourceBundle.getString("lblPowerOfAttorney"));
        lblCustomerName.setText(resourceBundle.getString("lblCustomerName"));
        lblValTransferingBranchName.setText(resourceBundle.getString("lblValTransferingBranchName"));
        //        lblPaymentDate.setText(resourceBundle.getString("lblPaymentDate"));
        lblCustomerId.setText(resourceBundle.getString("lblCustomerId"));
        lblPeriod_Days.setText(resourceBundle.getString("lblPeriod_Days"));
        btnJointAcctNew.setText(resourceBundle.getString("btnJointAcctNew"));
        lblInterBranchTransferNo.setText(resourceBundle.getString("lblInterBranchTransferNo"));
        lblModeOfOpening.setText(resourceBundle.getString("lblModeOfOpening"));
        
        lblDepositAmount.setText(resourceBundle.getString("lblDepositAmount"));
        lblSpace2.setText(resourceBundle.getString("lblSpace2"));
        lblPeriodOfDeposit.setText(resourceBundle.getString("lblPeriodOfDeposit"));
        lblSpace3.setText(resourceBundle.getString("lblSpace3"));
        lblSpace1.setText(resourceBundle.getString("lblSpace1"));
        lblTotalInterestAmount.setText(resourceBundle.getString("lblTotalInterestAmount"));
        lblTransferingBranchCode.setText(resourceBundle.getString("lblTransferingBranchCode"));
        //        lblValAccountHead.setText(resourceBundle.getString("lblValAccountHead"));
        lblDateOfDeposit.setText(resourceBundle.getString("lblDateOfDeposit"));
        lblDepositSubNo.setText(resourceBundle.getString("lblDepositSubNo"));
        lblStreet.setText(resourceBundle.getString("lblStreet"));
        lblCity.setText(resourceBundle.getString("lblCity"));
        lblLastInstallmentReceivedDate.setText(resourceBundle.getString("lblLastInstallmentReceivedDate"));
        lblStatus.setText(resourceBundle.getString("lblStatus"));
        lblValState.setText(resourceBundle.getString("lblValState"));
        lblBalanceInterestPayable.setText(resourceBundle.getString("lblBalanceInterestPayable"));
        lblSpace5.setText(resourceBundle.getString("lblSpace5"));
        btnDelete.setText(resourceBundle.getString("btnDelete"));
        lblInterestPaymentFrequency.setText(resourceBundle.getString("lblInterestPaymentFrequency"));
        //        lblInstallmentAmount.setText(resourceBundle.getString("lblInstallmentAmount"));
        lblLastTdsCollected.setText(resourceBundle.getString("lblLastTdsCollected"));
        lblAddressType.setText(resourceBundle.getString("lblAddressType"));
        lblPrintedNoOfTheFdr.setText(resourceBundle.getString("lblPrintedNoOfTheFdr"));
//        lblValCommunicationAddress.setText(resourceBundle.getString("lblValCommunicationAddress"));
        btnClose.setText(resourceBundle.getString("btnClose"));
        //        btnDepSubNoAccNew.setText(resourceBundle.getString("btnDepSubNoAccNew"));
        btnAuthorize.setText(resourceBundle.getString("btnAuthorize"));
        lblMsg.setText(resourceBundle.getString("lblMsg"));
        lblPin.setText(resourceBundle.getString("lblPin"));
        //        btnDepSubNoAccSave.setText(resourceBundle.getString("btnDepSubNoAccSave"));
        lblInterestPaid.setText(resourceBundle.getString("lblInterestPaid"));
        lbl15hDeclarations.setText(resourceBundle.getString("lbl15hDeclarations"));
        lblPeriod_Months.setText(resourceBundle.getString("lblPeriod_Months"));
        chkPowerOfAttorney.setText(resourceBundle.getString("chkPowerOfAttorney"));
        //        chkMember.setText(resourceBundle.getString("chkMember"));
        lblTransferingAmount.setText(resourceBundle.getString("lblTransferingAmount"));
        btnPrint.setText(resourceBundle.getString("btnPrint"));
        lblPanNumber.setText(resourceBundle.getString("lblPanNumber"));
        lblOriginalDateOfDeposit.setText(resourceBundle.getString("lblOriginalDateOfDeposit"));
        ((javax.swing.border.TitledBorder) panDepositDetails.getBorder()).setTitle(resourceBundle.getString("panDepositDetails"));
        lblInterestProvidedAmount.setText(resourceBundle.getString("lblInterestProvidedAmount"));
        lblTotalInstallmentReceived.setText(resourceBundle.getString("lblTotalInstallmentReceived"));
        lblProductId.setText(resourceBundle.getString("lblProductId"));
        lblValPin.setText(resourceBundle.getString("lblValPin"));
        lblAuthorizedSignatory.setText(resourceBundle.getString("lblAuthorizedSignatory"));
        lblMember.setText(resourceBundle.getString("lblMember"));
        lblNomineeDetails.setText(resourceBundle.getString("lblNomineeDetails"));
        lblLastInterestCalculatedDate.setText(resourceBundle.getString("lblLastInterestCalculatedDate"));
        lblDateOfTransfer.setText(resourceBundle.getString("lblDateOfTransfer"));
        lblDepositNo.setText(resourceBundle.getString("lblDepositNo"));
        chkNomineeDetails.setText(resourceBundle.getString("chkNomineeDetails"));
        btnNew.setText(resourceBundle.getString("btnNew"));
        lblPeriod_Years.setText(resourceBundle.getString("lblPeriod_Years"));
        chkAuthorizedSignatory.setText(resourceBundle.getString("chkAuthorizedSignatory"));
        btnJointAcctToMain.setText(resourceBundle.getString("btnJointAcctToMain"));
        lblRateOfInterest.setText(resourceBundle.getString("lblRateOfInterest"));
        chkTaxDeductions.setText(resourceBundle.getString("chkTaxDeductions"));
        lblValDateOfBirth.setText(resourceBundle.getString("lblValDateOfBirth"));
        lblValStreet.setText(resourceBundle.getString("lblValStreet"));
        lblConstitution.setText(resourceBundle.getString("lblConstitution"));
        lblOriginalAccountNumber.setText(resourceBundle.getString("lblOriginalAccountNumber"));
        ((javax.swing.border.TitledBorder) panCustomerSide.getBorder()).setTitle(resourceBundle.getString("panCustomerSide"));
        lblCountry.setText(resourceBundle.getString("lblCountry"));
        btnEdit.setText(resourceBundle.getString("btnEdit"));
        lblTdsCollectedUpto.setText(resourceBundle.getString("lblTdsCollectedUpto"));
        lblMaturityDate.setText(resourceBundle.getString("lblMaturityDate"));
        lblValDepositSubNo.setText(resourceBundle.getString("lblValDepositSubNo"));
        lblValBalanceInterestPayable.setText(resourceBundle.getString("lblValBalanceInterestPayable"));
        ((javax.swing.border.TitledBorder) panLastInterestCalculatedDate.getBorder()).setTitle(resourceBundle.getString("panLastInterestCalculatedDate"));
        ((javax.swing.border.TitledBorder) panInterBranchFunds.getBorder()).setTitle(resourceBundle.getString("panInterBranchFunds"));
        lblDateOfBirth.setText(resourceBundle.getString("lblDateOfBirth"));
        //        lblAccountHead.setText(resourceBundle.getString("lblAccountHead"));
        btnTransBranchCodeHelp.setText(resourceBundle.getString("btnTransBranchCodeHelp"));
        btnOriginalAccountNumberHelp.setText(resourceBundle.getString("btnOriginalAccountNumberHelp"));
        lblValCountry.setText(resourceBundle.getString("lblValCountry"));
        //        lblPaymentType.setText(resourceBundle.getString("lblPaymentType"));
        btnJointAcctDel.setText(resourceBundle.getString("btnJointAcctDel"));
        lblSettlementMode.setText(resourceBundle.getString("lblSettlementMode"));
        lblTotalNumberOfInstallments.setText(resourceBundle.getString("lblTotalNumberOfInstallments"));
        ((javax.swing.border.TitledBorder) panTransferingBranchCode.getBorder()).setTitle(resourceBundle.getString("panTransferingBranchCode"));
        lblRemarks.setText(resourceBundle.getString("lblRemarks"));
        lblPeriodicInterestAmount.setText(resourceBundle.getString("lblPeriodicInterestAmount"));
        lblProdDesc.setText(resourceBundle.getString("lblProdDesc"));
        btnCancel.setText(resourceBundle.getString("btnCancel"));
        lblState.setText(resourceBundle.getString("lblState"));
        //this details filled with the present Position Details tab....
        lblAvailableBalance.setText(resourceBundle.getString("lblAvailableBalance"));
        lblClearBalance.setText(resourceBundle.getString("lblClearBalance"));
        lblTotalBalance.setText(resourceBundle.getString("lblTotalBalance"));
        lblTotalInterest.setText(resourceBundle.getString("lblTotalInterest"));
        lblLastInterestPaidDate.setText(resourceBundle.getString("lblLastInterestPaidDate"));
        lblTotalInterestPayable.setText(resourceBundle.getString("lblTotalInterestPayable"));
        //crediting other accounts.....
        lblProductType.setName(resourceBundle.getString("lblProductType"));
        lblProdId.setName(resourceBundle.getString("lblProdId"));
        lblAccountNo.setName(resourceBundle.getString("lblAccountNo"));
        lblCustomerNameCr.setName(resourceBundle.getString("lblCustomerNameCr"));
        lblAccHead.setName(resourceBundle.getString("lblAccHead"));
        lblSalaryRecovery.setName(resourceBundle.getString("lblSalaryRecovery"));
        rdoSalaryRecovery_Yes.setName(resourceBundle.getString("rdoSalaryRecovery_Yes"));
        rdoSalaryRecovery_No.setName(resourceBundle.getString("rdoSalaryRecovery_No"));
        lblLockStatus.setName(resourceBundle.getString("lblLockStatus"));
    }

    private void removeRadioButtons() {
        rdgOpeningMode.remove(rdoOpeningMode_Multiple);
        rdgDeathClaim.remove(rdoDeathClaim_No);
        rdgDeathClaim.remove(rdoDeathClaim_Yes);
        rdgAutoRenewal.remove(rdoAutoRenewal_No);
        rdgAutoRenewal.remove(rdoAutoRenewal_Yes);
        rdgMatAlertReport.remove(rdoMatAlert_report_No);
        rdgMatAlertReport.remove(rdoMatAlert_report_Yes);
        rdgWithIntRenewal.remove(rdoWith_intRenewal_No);
        rdgWithIntRenewal.remove(rdoWith_intRenewal_Yes);
        rdgStandingInstruciton.remove(rdoStandingInstruction_No);
        rdgStandingInstruciton.remove(rdoStandingInstruction_Yes);
        rdgCalenderFreq.remove(rdoCalender_Freq_No);
        rdgCalenderFreq.remove(rdoCalender_Freq_Yes);
        rdgRenewalCalenderFreq.remove(rdoRenewalCalender_Freq_Yes);
        rdgRenewalCalenderFreq.remove(rdoRenewalCalender_Freq_No);
        rdgRenewalWithdrawing.remove(rdoRenewalWithdrawing_Yes);
        rdgRenewalWithdrawing.remove(rdoRenewalWithdrawing_No);
        rdgRenewalAdding.remove(rdoRenewalAdding_Yes);
        rdgRenewalAdding.remove(rdoRenewalAdding_No);
        rdgRenewalInterest.remove(rdoRenewalWithdrawingInt_Yes);
        rdgRenewalInterest.remove(rdoRenewalWithdrawingInt_No);
        rdgRenewalMatAlertReport.remove(rdoRenewalMatAlert_report_Yes);
        rdgRenewalMatAlertReport.remove(rdoRenewalMatAlert_report_No);
        rdgRenewalAutoRenewal.remove(rdoRenewalAutoRenewal_Yes);
        rdgRenewalAutoRenewal.remove(rdoRenewalAutoRenewal_No);
        rdgRenewalWithIntRenewal.remove(rdoRenewalWith_intRenewal_Yes);
        rdgRenewalWithIntRenewal.remove(rdoRenewalWith_intRenewal_No);
        rdgExtensionCalenderFreq.remove(rdoExtensionCalender_Freq_Yes);
        rdgExtensionCalenderFreq.remove(rdoExtensionCalender_Freq_No);
        rdgExtensionWithdrawing.remove(rdoExtensionWithdrawing_Yes);
        rdgExtensionWithdrawing.remove(rdoExtensionWithdrawing_No);
        rdgExtensionAdding.remove(rdoExtensionofPrematureClosure_Yes);
        rdgExtensionAdding.remove(rdoExtensionofPrematureClosure_No);
        rdgExtensionInterest.remove(rdoExtensionWithdrawingInt_Yes);
        rdgExtensionInterest.remove(rdoExtensionWithdrawingInt_No);
        rdgSalaryRecovery.remove(rdoSalaryRecovery_Yes);
        rdgSalaryRecovery.remove(rdoSalaryRecovery_No);
    }

    private void addRadioButtons() {// these r all radio button purpose adding...
        rdgOpeningMode = new CButtonGroup();
        rdgOpeningMode.add(rdoOpeningMode_Multiple);
        
        rdgDeathClaim = new CButtonGroup();
        rdgDeathClaim.add(rdoDeathClaim_No);
        rdgDeathClaim.add(rdoDeathClaim_Yes);

        rdgAutoRenewal = new CButtonGroup();
        rdgAutoRenewal.add(rdoAutoRenewal_No);
        rdgAutoRenewal.add(rdoAutoRenewal_Yes);

        rdgMatAlertReport = new CButtonGroup();
        rdgMatAlertReport.add(rdoMatAlert_report_No);
        rdgMatAlertReport.add(rdoMatAlert_report_Yes);

        rdgWithIntRenewal = new CButtonGroup();
        rdgWithIntRenewal.add(rdoWith_intRenewal_No);
        rdgWithIntRenewal.add(rdoWith_intRenewal_Yes);

        rdgStandingInstruciton = new CButtonGroup();
        rdgStandingInstruciton.add(rdoStandingInstruction_No);
        rdgStandingInstruciton.add(rdoStandingInstruction_Yes);

        rdgCalenderFreq = new CButtonGroup();
        rdgCalenderFreq.add(rdoCalender_Freq_No);
        rdgCalenderFreq.add(rdoCalender_Freq_Yes);

        rdgRenewalCalenderFreq = new CButtonGroup();
        rdgRenewalCalenderFreq.add(rdoRenewalCalender_Freq_Yes);
        rdgRenewalCalenderFreq.add(rdoRenewalCalender_Freq_No);

        rdgRenewalWithdrawing = new CButtonGroup();
        rdgRenewalWithdrawing.add(rdoRenewalWithdrawing_Yes);
        rdgRenewalWithdrawing.add(rdoRenewalWithdrawing_No);

        rdgRenewalAdding = new CButtonGroup();
        rdgRenewalAdding.add(rdoRenewalAdding_Yes);
        rdgRenewalAdding.add(rdoRenewalAdding_No);

        rdgRenewalInterest = new CButtonGroup();
        rdgRenewalInterest.add(rdoRenewalWithdrawingInt_Yes);
        rdgRenewalInterest.add(rdoRenewalWithdrawingInt_No);

        rdgRenewalMatAlertReport = new CButtonGroup();
        rdgRenewalMatAlertReport.add(rdoRenewalMatAlert_report_Yes);
        rdgRenewalMatAlertReport.add(rdoRenewalMatAlert_report_No);

        rdgRenewalAutoRenewal = new CButtonGroup();
        rdgRenewalAutoRenewal.add(rdoRenewalAutoRenewal_Yes);
        rdgRenewalAutoRenewal.add(rdoRenewalAutoRenewal_No);

        rdgRenewalWithIntRenewal = new CButtonGroup();
        rdgRenewalWithIntRenewal.add(rdoRenewalWith_intRenewal_Yes);
        rdgRenewalWithIntRenewal.add(rdoRenewalWith_intRenewal_No);

        rdgExtensionCalenderFreq = new CButtonGroup();
        rdgExtensionCalenderFreq.add(rdoExtensionCalender_Freq_Yes);
        rdgExtensionCalenderFreq.add(rdoExtensionCalender_Freq_No);

        rdgExtensionWithdrawing = new CButtonGroup();
        rdgExtensionWithdrawing.add(rdoExtensionWithdrawing_Yes);
        rdgExtensionWithdrawing.add(rdoExtensionWithdrawing_No);

        rdgExtensionAdding = new CButtonGroup();
        rdgExtensionAdding.add(rdoExtensionofPrematureClosure_Yes);
        rdgExtensionAdding.add(rdoExtensionofPrematureClosure_No);

        rdgExtensionInterest = new CButtonGroup();
        rdgExtensionInterest.add(rdoExtensionWithdrawingInt_Yes);
        rdgExtensionInterest.add(rdoExtensionWithdrawingInt_No);

        rdgSalaryRecovery = new CButtonGroup();
        rdgSalaryRecovery.add(rdoSalaryRecovery_Yes);
        rdgSalaryRecovery.add(rdoSalaryRecovery_No);

        rdgLock = new CButtonGroup();

    }

    public void setLables() {
        lblValArea.setText(observable.getLblValArea());
        lblValCity.setText(observable.getLblValCity());
        lblValCountry.setText(observable.getLblValCountry());
        lblValCustomerName.setText(observable.getLblValCustomerName());
        lblValDateOfBirth.setText(observable.getLblValDateOfBirth());
        lblValPin.setText(observable.getLblValPin());
        lblValState.setText(observable.getLblValState());
        lblValStreet.setText(observable.getLblValStreet());
        lblValRenewDep.setText(observable.getLblValRenewDep());
    }

    public void update(Observable observed, Object arg) {
        removeRadioButtons();
        //--- TransferIn Fields
        tdtOriginalDateOfDeposit.setDateValue(observable.getTdtOriginalDateOfDeposit());
        txtOriginalAccountNumber.setText(observable.getTxtOriginalAccountNumber());
        txtTransferingBranchCode.setText(observable.getTxtTransferingBranchCode());
        txtPrintedNoOfTheFdr.setText(observable.getTxtPrintedNoOfTheFdr());
        txtInterBranchTransferNo.setText(observable.getTxtInterBranchTransferNo());
        txtTransferingAmount.setText(observable.getTxtTransferingAmount());
        tdtDateOfTransfer.setDateValue(observable.getTdtDateOfTransfer());
        tdtLastInterestCalculatedDate.setDateValue(observable.getTdtLastInterestCalculatedDate());
        txtInterestProvidedAmount.setText(observable.getTxtInterestProvidedAmount());
        txtInterestPaid.setText(observable.getTxtInterestPaid());
        txtTotalNumberOfInstallments.setText(observable.getTxtTotalNumberOfInstallments());
        tdtLastInstallmentReceivedDate.setDateValue(observable.getTdtLastInstallmentReceivedDate());
        tdtTdsCollectedUpto.setDateValue(observable.getTdtTdsCollectedUpto());
        txtLastTdsCollected.setText(observable.getTxtLastTdsCollected());
        txtTotalInstallmentReceived.setText(observable.getTxtTotalInstallmentReceived());
        lblValBalanceInterestPayable.setText(observable.getLblValBalanceInterestPayable());
        lblValTransferingBranchName.setText(observable.getLblValTransferingBranchName());
        //system.out.println("update txtdepsoitAmount" + observable.getTxtMaturityAmount());
        //system.out.println("update txtdepsoitAmount" + observable.getTxtTotalInterestAmount());
        //--- End of TransferIn Fields

        txtAgentId.setText(observable.getTxtAgentId());
        lblValAgentname.setText(observable.getLblValAgentname());
        
        rdoOpeningMode_Multiple.setSelected(observable.getRdoOpeningMode_Normal());
       

        rdoDeathClaim_No.setSelected(observable.getRdoDeathClaim_No());
        rdoDeathClaim_Yes.setSelected(observable.getRdoDeathClaim_Yes());
        rdoAutoRenewal_No.setSelected(observable.getRdoAutoRenewal_No());
        rdoAutoRenewal_Yes.setSelected(observable.getRdoAutoRenewal_Yes());
        rdoMatAlert_report_No.setSelected(observable.getRdoMatAlertReport_No());
        rdoMatAlert_report_Yes.setSelected(observable.getRdoMatAlertReport_Yes());
        rdoWith_intRenewal_No.setSelected(observable.getRdowithIntRenewal_No());
        rdoWith_intRenewal_Yes.setSelected(observable.getRdowithIntRenewal_Yes());
        rdoStandingInstruction_No.setSelected(observable.getRdoStandingInstruction_No());
        rdoStandingInstruction_Yes.setSelected(observable.getRdoStandingInstruction_Yes());
        rdoCalender_Freq_Yes.setSelected(observable.getRdoCalenderFreq_Yes());
        rdoCalender_Freq_No.setSelected(observable.getRdoCalenderFreq_No());
        tdtCalenderFreqDate.setDateValue(observable.getCalenderFreqDate());
        txtPrintedOption.setText(observable.getPrinting_No());
   
        txtReferenceNo.setText(observable.getReferenceNo());
        //        cboInstallmentAmount.setSelectedItem(observable.getCboInstallmentAmount());
        //        cboPaymentType.setSelectedItem(observable.getCboPaymentType());
        cboInterestPaymentFrequency.setSelectedItem(observable.getCboInterestPaymentFrequency());
        cboCalenderFreqDay.setSelectedItem(observable.getCboCalenderFreq());
        //        tdtPaymentDate.setDateValue(observable.getTdtPaymentDate());
        //        tdtPaymentDate.setDateValue(observable.getTdtMaturityDate());
        lblStatus.setText(observable.getLblStatus());
        lblMemberVal.setText(observable.getLblMemberVal());
        //        lblValAccountHead.setText(observable.getLblValAccountHead());
        //        tdtDateOfDeposit.setDateValue(observable.getTdtDateOfDeposit());
        lblValDepositSubNo.setText(observable.getLblValDepositSubNo());
        cboInterestPaymentMode.setSelectedItem(observable.getCboInterestPaymentMode());

        cboProdType.setSelectedItem(observable.getCboProdType());
        cboProdId.setSelectedItem(observable.getCboProdId());
        txtCustomerIdCr.setText(observable.getCustomerIdCr());
        lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());

        txtDepositAmount.setText(observable.getTxtDepositAmount());
        lblProductDescription.setText(observable.getLblProductDescription());
        //        lblValAccountHead.setText(observable.getLblValAccountHead());
        cboCategory.setSelectedItem(observable.getCboCategory());
        //        cboMemberType.setSelectedItem(observable.getCboMember());
        txtCustomerId.setText(observable.getTxtCustomerId());
        txtDepsoitNo.setText(observable.getTxtDepsoitNo());
        txtDepositAmount.setText(observable.getTxtDepositAmount());
        txtPanNumber.setText(observable.getTxtPanNumber());
        txtRemarks.setText(observable.getTxtRemarks());
        chkPowerOfAttorney.setSelected(observable.getChkPowerOfAttorney());
        chkAuthorizedSignatory.setSelected(observable.getChkAuthorizedSignatory());
        chk15hDeclarations.setSelected(observable.getChk15hDeclarations());
        chkTaxDeductions.setSelected(observable.getChkTaxDeductions());
        //        chkMember.setSelected(observable.getChkMember());
        lblMemberVal.setText(observable.getLblMemberVal());
        chkNomineeDetails.setSelected(observable.getChkNomineeDetails());
//        lblValCommunicationAddress.setText(observable.getLblValCommunicationAddress());
        cboSettlementMode.setSelectedItem(observable.getCboSettlementMode());
        if ((observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE
                || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT)
                && observable.getTxtRateOfInterest().length() > 0) {
            txtRateOfInterest.setText(observable.getTxtRateOfInterest());
        } else {
            txtRateOfInterest.setText(observable.getTxtRateOfInterest());
        }
        txtMaturityAmount.setText(observable.getTxtMaturityAmount());
        txtTotalInterestAmount.setText(observable.getTxtTotalInterestAmount());
        txtPeriodicInterestAmount.setText(observable.getTxtPeriodicInterestAmount());
        tdtMaturityDate.setDateValue(observable.getTdtMaturityDate());
        txtPeriodOfDeposit_Years.setText(observable.getTxtPeriodOfDeposit_Years());
        txtPeriodOfDeposit_Months.setText(observable.getTxtPeriodOfDeposit_Months());
        txtPeriodOfDeposit_Days.setText(observable.getTxtPeriodOfDeposit_Days());
        cboConstitution.setSelectedItem(observable.getCboConstitution());
        cboAddressType.setSelectedItem(observable.getCboAddressType());
        //        cboProductId.setSelectedItem(observable.getCboProductId());

        cboProdType.setSelectedItem(observable.getCboProdType());
        cboProdId.setSelectedItem(observable.getCboProdId());
        txtCustomerIdCr.setText(observable.getCustomerIdCr());
        lblCustomerNameCrValue.setText(observable.getCustomerNameCrValue());
        rdoOpeningMode_Multiple.setSelected(observable.getRdoOpeningMode_Normal());

        lblMemberVal.setText(observable.getLblMemberVal());
        lblStatus.setText(observable.getLblStatus());
        //        lblValAccountHead.setText(observable.getLblValAccountHead());
        tdtDateOfDeposit.setDateValue(observable.getTdtDateOfDeposit());
        lblValDepositSubNo.setText(observable.getLblValDepositSubNo());
        cboInterestPaymentMode.setSelectedItem(observable.getCboInterestPaymentMode());
        txtDepositAmount.setText(observable.getTxtDepositAmount());
        lblValRenewDep.setText(observable.getLblValRenewDep());

        //this details filled with the present Position Details tab....
        lblAvailableBalanceValue.setText(observable.getAvailableBalanceValue());
        lblTotalBalanceValue.setText(observable.getTotalBalanceValue());
        lblClearBalanceValue.setText(observable.getClearBalanceValue());
        lblLastInterestPaidDateValue.setText(observable.getLastInterestPaidDateValue());
        lblTotalInterestValue.setText(observable.getTotalInterestValue());
        lblBalanceInterestAmountValue.setText(observable.getBalanceInterestAmountValue());
        lblTotalInterestPayableValue.setText(observable.getTotalInterestPayableValue());
        lblPaidnterestAmountValue.setText(observable.getPaidnterestAmountValue());
        lblAccHeadValue.setText(observable.getAccHeadValue());
        //        lblDepositLienNoValue.setText(observable.getDepositLienNoValue());
        //        lblLienAmountValue.setText(observable.getLienAmountValue());
        //        lblLienDateValue.setText(observable.getLienDateValue());
        //        lblLoanNoValue.setText(observable.getLoanNoValue());
        //        lblLoanBalanceValue.setText(observable.getLoanBalanceValue());
        //        lblLoanTakenDateValue.setText(observable.getLoanTakenDateValue());
        rdoDeathClaim_No.setSelected(observable.getRdoDeathClaim_No());
        rdoDeathClaim_Yes.setSelected(observable.getRdoDeathClaim_Yes());
        rdoAutoRenewal_No.setSelected(observable.getRdoAutoRenewal_No());
        rdoAutoRenewal_Yes.setSelected(observable.getRdoAutoRenewal_Yes());
        rdoMatAlert_report_No.setSelected(observable.getRdoMatAlertReport_No());
        rdoMatAlert_report_Yes.setSelected(observable.getRdoMatAlertReport_Yes());
        rdoWith_intRenewal_No.setSelected(observable.getRdowithIntRenewal_No());
        rdoWith_intRenewal_Yes.setSelected(observable.getRdowithIntRenewal_Yes());
        rdoStandingInstruction_No.setSelected(observable.getRdoStandingInstruction_No());
        rdoStandingInstruction_Yes.setSelected(observable.getRdoStandingInstruction_Yes());

        lblTdsAmountValue.setText(observable.getTdsAmountValue());
        lblLastInterestProvisionDateValue.setText(observable.getLastInterestProvisionDateValue());
        lblClosedDateValue.setText(observable.getClosedDateValue());
        lblRenewalDepositAcValue.setText(observable.getRenewalClosedDepNo());
        lblClosingTypeValue.setText(observable.getClosingTypeValue());
        lblRenewalDateValue.setText(observable.getRenewalDateValue());
        lblClosingInterestAmountValue.setText(observable.getClosingInterestAmountValue());
        lblClosingRateOfInterestValue.setText(observable.getClosingRateOfInterestValue());
        lblSBInterestAmountValue.setText(observable.getSBInterestAmountValue());
        lblSBRateOfInterestValue.setText(observable.getSBRateOfInterestValue());
        lbldepositPeriodRunValue.setText(observable.getDepositPeriodRunValue());
        lblTransferOutBranchValue.setText(observable.getTransferOutBranchValue());
        //standing Instruction...
        lblSICreatedDateValue.setText(observable.getSICreatedDateValue());
        lblSINoValue.setText(observable.getSINoValue());
        lblSIProductTypeValue.setText(observable.getSIProductTypeValue());
        lblSIProductIdValue.setText(observable.getSIProductIdValue());
        lblSIAccountNoValue.setText(observable.getSIAccountNoValue());
        lblSIAmountValue.setText(observable.getSIAmountValue());
        lblSIParticularsValue.setText(observable.getSIParticularsValue());
        lblSIFrequencyValue.setText(observable.getSIFrequencyValue());
        lblSIForwardCountValue.setText(observable.getSIForwardCountValue());
        lblSIStartDateValue.setText(observable.getSIStartDateValue());
        lblSIEndDateValue.setText(observable.getSIEndDateValue());
        lblAcceptanceChargesValue.setText(observable.getAcceptanceChargesValue());
        lblSIFailureChargesValue.setText(observable.getAcceptanceChargesValue());
        lblSIExecutionChargesValue.setText(observable.getSIFailureChargesValue());
        rdoCalender_Freq_Yes.setSelected(observable.getRdoCalenderFreq_Yes());
        rdoCalender_Freq_No.setSelected(observable.getRdoCalenderFreq_No());
        tdtCalenderFreqDate.setDateValue(observable.getCalenderFreqDate());
        txtPrintedOption.setText(observable.getPrinting_No());
        lblMemberVal.setText(observable.getLblMemberVal());
        if (observable.productBehavesLike.equals(observable.prodBehavesLikeCummulative)) {
            lblRenewalBalIntAmtVal.setText(observable.getBalanceInterestAmountValue());
        } else {
            lblRenewalBalIntAmtVal.setText(observable.getRenewalBalIntAmtVal());
        }
        lblRenewalValPeriodRun.setText(observable.getRenewalDepDate());
        lblRenewalSBPeriodVal.setText(observable.getRenewalValPeriodRun());
        lblRenewalSBIntAmtVal.setText(observable.getRenewalSBIntAmtVal());
        lblRenewalSBIntRateVal.setText(observable.getRenewalSBIntRateVal());
        lblRenewalInterestRepayAmtVal.setText(observable.getRenewalInterestRepayAmtVal());
        tdtRenewalDateOfDeposit.setDateValue(observable.getRenewaltdtDateOfDeposit());
        txtRenewalPeriodOfDeposit_Years.setText(observable.getRenewaltxtPeriodOfDeposit_Years());
        txtRenewalPeriodOfDeposit_Months.setText(observable.getRenewaltxtPeriodOfDeposit_Months());
        txtRenewalPeriodOfDeposit_Days.setText(observable.getRenewaltxtPeriodOfDeposit_Days());
        tdtRenewalMaturityDate.setDateValue(observable.getRenewaltdtMaturityDate());
        txtRenewalDepositAmount.setText(observable.getRenewaltxtDepositAmount());
        lblRenewalValDepositSubNo.setText(observable.getRenewalValDepositSubNo());
        if ((observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE
                || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT)
                && observable.getTxtRateOfInterest().length() > 0) {
            txtRenewalRateOfInterest.setText(observable.getRenewaltxtRateOfInterest());
        } else {
            txtRenewalRateOfInterest.setText(observable.getRenewaltxtRateOfInterest());
        }
        //system.out.println("observable.getRenewaltxtMaturityAmount()" + observable.getRenewaltxtMaturityAmount());
        txtRenewalMaturityAmount.setText(observable.getRenewaltxtMaturityAmount());
        txtRenewalTotalInterestAmount.setText(observable.getRenewaltxtTotalInterestAmount());
        txtRenewalPeriodicInterestAmount.setText(observable.getRenewaltxtPeriodicInterestAmount());
        //added by rishad 25/042014
        if (observable.getActionType() ==ClientConstants.ACTIONTYPE_RENEW){
        cboRenewalDepositProdId.setSelectedItem(observable.getCboRenewalDepositProdId());
        }
        cboRenewalDepositCategory.setSelectedItem(observable.getCboRenewalDepositCategory());
        //        cboRenewalCalenderFreqDay.setSelectedItem(observable.getCboRenewalCalenderFreqDay());

        cboRenewalDepTransMode.setSelectedItem(observable.getCboRenewalDepTransMode());
        cboRenewalDepTransProdType.setSelectedItem(observable.getCboRenewalDepTransProdType());
        if (observable.getCbmRenewalDepTransProdId() != null) {
            if (observable.getCboRenewalDepTransProdType() != null && observable.getCboRenewalDepTransProdType().length() > 0) {
                if (!observable.getCboRenewalDepTransProdType().equals("General Ledger") && cboRenewalDepTransProdId.getSelectedItem().equals("")) {
                    cboRenewalDepTransProdId.setModel(observable.getCbmRenewalDepTransProdId());
                    cboRenewalDepTransProdId.setSelectedItem(observable.getCbmRenewalDepTransProdId().getDataForKey(observable.getCboRenewalDepTransProdId()));
                }
            }
        }
        txtRenewalDepCustomerIdCr.setText(observable.getRenewalcustomerIdCrDep());
        lblRenewalCustNameValue.setText(CommonUtil.convertObjToStr(observable.getRenewalcustomerNameCrValueDep()));

        cboRenewalInterestTransMode.setSelectedItem(observable.getCboRenewalInterestTransMode());
        cboRenewalInterestTransProdType.setSelectedItem(observable.getCboRenewalInterestTransProdType());
        if (observable.getCbmRenewalInterestTransProdId() != null) {
            if (observable.getCboRenewalInterestTransProdType() != null && observable.getCboRenewalInterestTransProdType().length() > 0) {
                if (!observable.getCboRenewalInterestTransProdType().equals("General Ledger") && cboRenewalInterestTransProdId.getSelectedItem().equals("")) {
                    cboRenewalInterestTransProdId.setModel(observable.getCbmRenewalInterestTransProdId());
                    cboRenewalInterestTransProdId.setSelectedItem(observable.getCbmRenewalInterestTransProdId().getDataForKey(observable.getCboRenewalInterestTransProdId()));
                }
            }
        }
        txtRenewalIntCustomerIdCr.setText(observable.getRenewalcustomerIdCrInt());
        lblRenewalInterestCustNameVal.setText(CommonUtil.convertObjToStr(observable.getRenewalcustomerNameCrValueInt()));
        cboRenewalInterestPaymentMode.setSelectedItem(observable.getCboRenewalInterestPaymentMode());
        cboRenewalProdType.setSelectedItem(observable.getCboRenewalProdType());
        if (observable.getCbmRenewalProdId() != null) {
            if (observable.getCboRenewalProdType() != null && observable.getCboRenewalProdType().length() > 0) {
                if (!observable.getCboRenewalProdType().equals("General Ledger") && cboRenewalProdId.getSelectedItem().equals("")) {
                    cboRenewalProdId.setModel(observable.getCbmRenewalProdId());
                    cboRenewalProdId.setSelectedItem(observable.getCbmRenewalProdId().getDataForKey(observable.getCboRenewalProdId()));
                }
            }
        }
        txtRenewalCustomerIdCr.setText(observable.getRenewalcustomerIdCr());
        lblRenewalCustomerNameCrValue.setText(CommonUtil.convertObjToStr(observable.getRenewalcustomerNameCrValue()));
        txtRenewalPrintedOption.setText(observable.getTxtRenewalPrintedOption());

        rdoRenewalWithdrawing_Yes.setSelected(observable.getRdoRenewalWithdrawing_Yes());
        rdoRenewalWithdrawing_No.setSelected(observable.getRdoRenewalWithdrawing_No());
        rdoRenewalAdding_Yes.setSelected(observable.getRdoRenewalAdding_Yes());
        rdoRenewalAdding_No.setSelected(observable.getRdoRenewalAdding_No());
        rdoRenewalWithdrawingInt_Yes.setSelected(observable.getRdoRenewalWithdrawingInt_Yes());
        rdoRenewalWithdrawingInt_No.setSelected(observable.getRdoRenewalWithdrawingInt_No());
        txtRenewalDepTransAmtValue.setText(observable.getTxtRenewalDepTransAmtValue());
        txtRenewalDepTransTokenNo.setText(observable.getTxtRenewalDepTransTokenNo());
        txtRenewalIntAmtValue.setText(observable.getTxtRenewalIntAmtValue());
        txtRenewalIntTokenNoVal.setText(observable.getTxtRenewalIntTokenNoVal());
        rdoRenewalCalender_Freq_Yes.setSelected(observable.getRdoRenewalCalenderFreq_Yes());
        rdoRenewalCalender_Freq_No.setSelected(observable.getRdoRenewalCalenderFreq_No());

        rdoRenewalMatAlert_report_Yes.setSelected(observable.getRdoRenewalMatAlert_report_Yes());
        rdoRenewalMatAlert_report_No.setSelected(observable.getRdoRenewalMatAlert_report_No());
        rdoRenewalAutoRenewal_Yes.setSelected(observable.getRdoRenewalAutoRenewal_Yes());
        rdoRenewalAutoRenewal_No.setSelected(observable.getRdoRenewalAutoRenewal_No());
        rdoRenewalWith_intRenewal_Yes.setSelected(observable.getRdoRenewalWith_intRenewal_Yes());
        rdoRenewalWith_intRenewal_No.setSelected(observable.getRdoRenewalWith_intRenewal_No());

        // lblRenewalBalIntAmtVal.setText(observable.getRenewalBalIntAmtVal());b
        lblRenewalValPeriodRun.setText(observable.getRenewalDepDate());
        lblRenewalSBPeriodVal.setText(observable.getRenewalValPeriodRun());
        lblRenewalSBIntAmtVal.setText(observable.getRenewalSBIntAmtVal());
        lblRenewalSBIntRateVal.setText(observable.getRenewalSBIntRateVal());
        lblRenewalInterestRepayAmtVal.setText(observable.getRenewalInterestRepayAmtVal());

        addRadioButtons();
        //        tblDepSubNoAccInfo.setModel(observable.getTblDepSubNo());
        tblRenewalDepSubNoAccInfo.setModel(observable.getRenewalTblDepSubNo());
        tblExtensionDepSubNoAccInfo.setModel(observable.getTblExtensionDepSubNoAccInfo());
        tblJointAcctHolder.setModel(observable.getTblJointAccnt());
        tblLien.setModel(observable.getTblLien());
        cboCalenderFreqDay.setSelectedItem(CommonUtil.convertObjToStr(observable.getCboCalenderFreq()));
        //  lblRenewalBalIntAmtVal.setText(observable.getRenewalBalIntAmtVal());b
        lblRenewalValPeriodRun.setText(observable.getRenewalDepDate());
        lblRenewalSBPeriodVal.setText(observable.getRenewalValPeriodRun());
        lblRenewalSBIntAmtVal.setText(observable.getRenewalSBIntAmtVal());
        lblRenewalInterestRepayAmtVal.setText(observable.getRenewalInterestRepayAmtVal());
        tdtRenewalDateOfDeposit.setDateValue(observable.getRenewaltdtDateOfDeposit());
        txtRenewalPeriodOfDeposit_Years.setText(observable.getRenewaltxtPeriodOfDeposit_Years());
        txtRenewalPeriodOfDeposit_Months.setText(observable.getRenewaltxtPeriodOfDeposit_Months());
        txtRenewalPeriodOfDeposit_Days.setText(observable.getRenewaltxtPeriodOfDeposit_Days());
        tdtRenewalMaturityDate.setDateValue(observable.getRenewaltdtMaturityDate());
        txtRenewalDepositAmount.setText(observable.getRenewaltxtDepositAmount());
        lblRenewalValDepositSubNo.setText(observable.getRenewalValDepositSubNo());
        //        txtRenewalRateOfInterest.setText(observable.getRenewaltxtRateOfInterest());
        txtRenewalMaturityAmount.setText(observable.getRenewaltxtMaturityAmount());
        txtRenewalTotalInterestAmount.setText(observable.getRenewaltxtTotalInterestAmount());
        txtRenewalPeriodicInterestAmount.setText(observable.getRenewaltxtPeriodicInterestAmount());
           //added by  by rishad 25/04/2014
          if (observable.getActionType() ==ClientConstants.ACTIONTYPE_RENEW){
        cboRenewalDepositProdId.setSelectedItem(observable.getCboRenewalDepositProdId());
}
        cboRenewalDepositCategory.setSelectedItem(observable.getCboRenewalDepositCategory());
        //        cboRenewalCalenderFreqDay.setSelectedItem(observable.getCboRenewalCalenderFreqDay());

        txtRenewalDepCustomerIdCr.setText(observable.getRenewalcustomerIdCrDep());
        lblRenewalCustNameValue.setText(CommonUtil.convertObjToStr(observable.getRenewalcustomerNameCrValueDep()));
        txtRenewalIntCustomerIdCr.setText(observable.getRenewalcustomerIdCrInt());
        lblRenewalInterestCustNameVal.setText(CommonUtil.convertObjToStr(observable.getRenewalcustomerNameCrValueInt()));

        txtRenewalCustomerIdCr.setText(observable.getRenewalcustomerIdCr());
        lblRenewalCustomerNameCrValue.setText(CommonUtil.convertObjToStr(observable.getRenewalcustomerNameCrValue()));
        if (observable.getCbmRenewalInterestPaymentFrequency() != null) {
            cboRenewalInterestPaymentFrequency.setModel(observable.getCbmRenewalInterestPaymentFrequency());
            if (cboRenewalInterestPaymentFrequency.getSelectedItem().equals("")) {
                cboRenewalInterestPaymentFrequency.setSelectedItem(observable.getCboRenewalInterestPaymentFrequency());
            }
        }
        if (observable.getCbmRenewalCalenderFreqDay() != null) {
            cboRenewalCalenderFreqDay.setModel(observable.getCbmRenewalCalenderFreqDay());
            if (cboRenewalCalenderFreqDay.getSelectedItem().equals("")) {
                cboRenewalCalenderFreqDay.setSelectedItem(observable.getCboRenewalCalenderFreqDay());
            }
        }
        rdoRenewalWithdrawing_Yes.setSelected(observable.getRdoRenewalWithdrawing_Yes());
        rdoRenewalWithdrawing_No.setSelected(observable.getRdoRenewalWithdrawing_No());
        rdoRenewalAdding_Yes.setSelected(observable.getRdoRenewalAdding_Yes());
        rdoRenewalAdding_No.setSelected(observable.getRdoRenewalAdding_No());
        rdoRenewalWithdrawingInt_Yes.setSelected(observable.getRdoRenewalWithdrawingInt_Yes());
        rdoRenewalWithdrawingInt_No.setSelected(observable.getRdoRenewalWithdrawingInt_No());
        txtRenewalDepTransAmtValue.setText(observable.getTxtRenewalDepTransAmtValue());
        txtRenewalDepTransTokenNo.setText(observable.getTxtRenewalDepTransTokenNo());
        txtRenewalIntAmtValue.setText(observable.getTxtRenewalIntAmtValue());
        txtRenewalIntTokenNoVal.setText(observable.getTxtRenewalIntTokenNoVal());
        rdoRenewalCalender_Freq_Yes.setSelected(observable.getRdoRenewalCalenderFreq_Yes());
        rdoRenewalCalender_Freq_No.setSelected(observable.getRdoRenewalCalenderFreq_No());
        txtRenewalPrintedOption.setText(observable.getTxtRenewalPrintedOption());

        //  lblRenewalBalIntAmtVal.setText(observable.getRenewalBalIntAmtVal());b
        lblRenewalValPeriodRun.setText(observable.getRenewalDepDate());
        lblRenewalSBPeriodVal.setText(observable.getRenewalValPeriodRun());
        lblRenewalSBIntAmtVal.setText(observable.getRenewalSBIntAmtVal());
        lblRenewalInterestRepayAmtVal.setText(observable.getRenewalInterestRepayAmtVal());
        //        lblRenewalNoticeNewVal.setText(observable.getLblRenewalNoticeNewVal());
        //        lblAutoRenewalNewVal.setText(observable.getLblAutoRenewalNewVal());
        //        lblRenewalWithIntNewVal.setText(observable.getLblRenewalWithIntNewVal());
        //        lblMemberTypeRenewalNewVal.setText(observable.getLblMemberTypeRenewalNewVal());
        //        lblTaxDeclareRenewalNewVal.setText(observable.getLblTaxDeclareRenewalNewVal());
        //        lbl15HDeclareRenewalNewVal.setText(observable.getLbl15HDeclareRenewalNewVal());

        //extension deposit details...
        lblExtensionDepositDtVal.setText(observable.getExtensionDepDate());
        lblExtensionRateOfIntVal.setText(observable.getExtensionRateOfIntVal());
        lblExtensionPaymentFreqValue.setText(observable.getExtensionPaymentFreqValue());
        lblExtensionTotalIntAmtValue.setText(observable.getExtensionBalInterestAmtVal());
        lblExtensionPeriodRunValue.setText(observable.getExtensionActualPeriodRun());
        lblExtensionWithdrawIntAmtValue.setText(observable.getExtensionWithdrawIntAmtVal());
        lblExtensionLeftOverIntAmtValue.setText(observable.getExtensionBalIntAmtVal());
        tdtExtensionDateOfDeposit.setDateValue(observable.getExtensiontdtDateOfDeposit());
        txtExtensionPeriodOfDeposit_Years.setText(observable.getExtensiontxtPeriodOfDeposit_Years());
        txtExtensionPeriodOfDeposit_Months.setText(observable.getExtensiontxtPeriodOfDeposit_Months());
        txtExtensionPeriodOfDeposit_Days.setText(observable.getExtensiontxtPeriodOfDeposit_Days());
        tdtExtensionMaturityDate.setDateValue(observable.getExtensiontdtMaturityDate());
        txtExtensionDepositAmount.setText(observable.getExtensiontxtDepositAmount());
        txtExtensionRateOfInterest.setText(observable.getExtensiontxtRateOfInterest());
        txtExtensionMaturityAmount.setText(observable.getExtensiontxtMaturityAmount());
        txtExtensionTotalInterestAmount.setText(observable.getExtensiontxtTotalInterestAmount());
        txtExtensionPeriodicInterestAmount.setText(observable.getExtensiontxtPeriodicInterestAmount());

        cboExtensionDepositProdId.setSelectedItem(observable.getCboExtensionDepositProdId());
        cboExtensionDepositCategory.setSelectedItem(observable.getCboExtensionDepositCategory());
        if (observable.getCboExtensionPaymentMode() != null) {
            cboExtensionInterestPaymentMode.setSelectedItem(observable.getCboExtensionPaymentMode());
        }
        cboExtensionProdType.setSelectedItem(observable.getCboExtensionPaymentProdType());
        if (observable.getCbmExtensionPaymentProdId() != null) {
            if (observable.getCboExtensionPaymentProdId() != null && observable.getCboExtensionPaymentProdType().length() > 0) {
                if (!observable.getCboExtensionPaymentProdId().equals("General Ledger") && cboExtensionProdId.getSelectedItem().equals("")) {
                    //                    cboExtensionProdId.setModel(observable.getCbmExtensionPaymentProdId());
                    cboExtensionProdId.setSelectedItem(observable.getCboExtensionPaymentProdId());
                }
            }
        }
        txtExtensionCustomerIdCr.setText(observable.getExtensioncustomerIdCrInt());
        lblExtensionTransCustNameVal.setText(CommonUtil.convertObjToStr(observable.getExtensioncustomerNameCrValueDep()));
        cboExtensionInterestPaymentMode.setSelectedItem(observable.getCboExtensionPaymentMode());
        cboExtensionTransProdType.setSelectedItem(observable.getCboExtensionTransProdType());
        if (observable.getCboExtensionTransProdId() != null) {
            if (observable.getCboExtensionTransProdType() != null && observable.getCboExtensionTransProdType().length() > 0) {
                if (!observable.getCboExtensionTransProdType().equals("General Ledger") && cboExtensionTransProdId.getSelectedItem().equals("")) {
                    //                    cboExtensionTransProdId.setModel(observable.getCbmExtensionTransProdId());
                    cboExtensionTransProdId.setSelectedItem(observable.getCboExtensionTransProdId());
                }
            }
        }
        lblExtensionValDepositSubNo.setText(observable.getExtensionValDepositSubNo());
        txtExtensionTransCustomerIdCr.setText(observable.getExtensioncustomerIdCrDep());
        lblExtensionCustomerNameCrValue.setText(CommonUtil.convertObjToStr(observable.getExtensioncustomerNameCrValueInt()));
        txtExtensionPrintedOption.setText(observable.getTxtExtensionPrintedOption());
        txtExtensionTransAmtValue.setText(observable.getTxtExtensionIntAmtValue());
        rdoExtensionWithdrawing_Yes.setSelected(observable.getRdoExtensionWithdrawing_Yes());
        rdoExtensionWithdrawing_No.setSelected(observable.getRdoExtensionWithdrawing_No());
        if (rdoExtensionWithdrawing_No.isSelected() == true) {
            lblExtensionWithdrawIntAmt1.setVisible(false);
            lblExtensionWithdrawIntAmtValue1.setVisible(false);
            lblExtensionWithdrawIntAmt.setVisible(false);
            lblExtensionWithdrawIntAmtValue.setVisible(false);
            lblExtensionWithdrawIntAmt2.setVisible(false);
            lblExtensionWithdrawIntAmtValue2.setVisible(false);
            lblExtensionLeftOverIntAmt.setVisible(false);
            lblExtensionLeftOverIntAmtValue.setVisible(false);
        }
        rdoExtensionofPrematureClosure_Yes.setSelected(observable.getRdoExtensionAdding_Yes());
        rdoExtensionofPrematureClosure_No.setSelected(observable.getRdoExtensionAdding_No());
        rdoExtensionWithdrawingInt_Yes.setSelected(observable.getRdoExtensionWithdrawingInt_Yes());
        rdoExtensionWithdrawingInt_No.setSelected(observable.getRdoExtensionWithdrawingInt_No());
        rdoExtensionCalender_Freq_Yes.setSelected(observable.getRdoExtensionCalenderFreq_Yes());
        rdoExtensionCalender_Freq_No.setSelected(observable.getRdoExtensionCalenderFreq_No());
        txtExtensionTransTokenNo.setText(observable.getTxtRenewalDepTransTokenNo());
        txtRenewPostageAmt.setText(observable.getPostageRenewAmt());
        txtpostageAmt.setText(observable.getPostageAmt());
        if (observable.getSalaryRecoveryYes() == true) {
            rdoSalaryRecovery_Yes.setSelected(true);
            rdoSalaryRecovery_No.setSelected(false);
        } else {
            rdoSalaryRecovery_No.setSelected(true);
            rdoSalaryRecovery_Yes.setSelected(false);
        }
        if (rdoExtensionWithdrawing_Yes.isSelected() == true) {
            lblExtensionWithdrawIntAmtValue1.setVisible(true);
            lblExtensionWithdrawIntAmt1.setVisible(true);
            lblExtensionWithdrawIntAmt.setVisible(true);
            lblExtensionWithdrawIntAmtValue.setVisible(true);
            lblExtensionWithdrawIntAmt2.setVisible(true);
            lblExtensionLeftOverIntAmt.setVisible(true);
            lblExtensionLeftOverIntAmtValue.setVisible(true);
            lblExtensionWithdrawIntAmtValue2.setVisible(true);
            lblExtensionofPrematureClosure.setVisible(false);
            panExtensionAdding.setVisible(false);
            lblExtensionWithdrawIntAmtValue1.setText(observable.getLblExtensionWithdrawIntAmtValue1());
            lblExtensionWithdrawIntAmtValue2.setText(observable.getLblExtensionWithdrawIntAmtValue2());
        }
        lblExtensionTotalRepayAmtValue.setText(observable.getLblExtensionTotalRepayAmtValue());
        lblExtensionBalanceIntValue.setText(observable.getExtensionBalanceIntValue());
        lblLockStatus1.setText("<HTML><b><font color=Blue>"
                + observable.getLockStatus()
                + "</font></b></html>");        
        if (observable.isChkMobileNumRequired()) {
            chkMobileNumRequired.setSelected(true);
        } else {
            chkMobileNumRequired.setSelected(false);
        }
        txtMobileNo.setText(observable.getTxtMobileNo());
        tdtMobileSubscribedFrom.setDateValue(observable.getTdtMobileSubscribedFrom());
        addRadioButtons();
    }

    public void updateOBFields() {
        observable.setModule(getModule());
        observable.setScreen(getScreen());
        observable.setSelectedBranchID(getSelectedBranchID());
        //        observable.setTdtPaymentDate(tdtPaymentDate.getDateValue());
        //        tdtPaymentDate.setDateValue(observable.getTdtMaturityDate());
        //        observable.setCboPaymentType(CommonUtil.convertObjToStr(cboPaymentType.getSelectedItem()));
        authSignUI.updateOBFields();
        poaUI.updateOBFields();
        //        observable.setLblValAccountHead(lblValAccountHead.getText());
        observable.setLblValCustomerName(lblValCustomerName.getText());
        observable.setLblValDateOfBirth(lblValDateOfBirth.getText());
        observable.setLblValStreet(lblValStreet.getText());
        observable.setLblValArea(lblValArea.getText());
        observable.setLblValCity(lblValCity.getText());
        observable.setLblValState(lblValState.getText());
        observable.setLblValCountry(lblValCountry.getText());
        observable.setTxtAgentId(txtAgentId.getText());
        observable.setLblValAgentname(lblValAgentname.getText());
        observable.setLblValPin(lblValPin.getText());
        observable.setTdtDateOfDeposit(tdtDateOfDeposit.getDateValue());
        observable.setLblValTransferingBranchName(lblValTransferingBranchName.getText());
        observable.setLblValBalanceInterestPayable(lblValBalanceInterestPayable.getText());
        observable.setTxtRateOfInterest(txtRateOfInterest.getText());
        observable.setTxtMaturityAmount(txtMaturityAmount.getText());
        observable.setTxtTotalInterestAmount(txtTotalInterestAmount.getText());
        observable.setTxtPeriodicInterestAmount(txtPeriodicInterestAmount.getText());
        observable.setTdtMaturityDate(tdtMaturityDate.getDateValue());
        observable.setTxtPeriodOfDeposit_Years(txtPeriodOfDeposit_Years.getText());
        observable.setTxtPeriodOfDeposit_Months(txtPeriodOfDeposit_Months.getText());
        observable.setTxtPeriodOfDeposit_Days(txtPeriodOfDeposit_Days.getText());
        observable.setTxtPeriodOfDeposit_Weeks(txtWeek.getText());
        observable.setCboConstitution(CommonUtil.convertObjToStr(cboConstitution.getSelectedItem()));
        observable.setCboAddressType(CommonUtil.convertObjToStr(cboAddressType.getSelectedItem()));
        observable.setCboProductId(CommonUtil.convertObjToStr(cboProductId.getSelectedItem()));
        observable.setTxtDepsoitNo(CommonUtil.convertObjToStr(txtDepsoitNo.getText()));
        observable.setCboCategory(CommonUtil.convertObjToStr(cboCategory.getSelectedItem()));
        //        observable.setCboMember(CommonUtil.convertObjToStr(cboMemberType.getSelectedItem()));
        observable.setTxtCustomerId(txtCustomerId.getText());
        observable.setRdoOpeningMode_Normal(rdoOpeningMode_Multiple.isSelected());
       
        observable.setTxtDepositAmount(txtDepositAmount.getText());
        observable.setTxtPanNumber(txtPanNumber.getText());
        observable.setTxtRemarks(txtRemarks.getText());
        observable.setChkPowerOfAttorney(chkPowerOfAttorney.isSelected());
        observable.setChkAuthorizedSignatory(chkAuthorizedSignatory.isSelected());
        observable.setChk15hDeclarations(chk15hDeclarations.isSelected());
        observable.setChkTaxDeductions(chkTaxDeductions.isSelected());
        //        observable.setChkMember(chkMember.isSelected());
        lblMemberVal.setText(observable.getLblMemberVal());
        observable.setChkNomineeDetails(chkNomineeDetails.isSelected());
//        observable.setLblValCommunicationAddress(lblValCommunicationAddress.getText());
        observable.setCboSettlementMode(CommonUtil.convertObjToStr(cboSettlementMode.getSelectedItem()));
        observable.setCboInterestPaymentMode(CommonUtil.convertObjToStr(cboInterestPaymentMode.getSelectedItem()));
        //crediting to his customer accounts.....
        observable.setCboProdId(CommonUtil.convertObjToStr(cboProdId.getSelectedItem()));
        observable.setCboProdType(CommonUtil.convertObjToStr(cboProdType.getSelectedItem()));
        observable.setCustomerIdCr(CommonUtil.convertObjToStr(txtCustomerIdCr.getText()));
        observable.setCustomerNameCrValue(CommonUtil.convertObjToStr(lblCustomerNameCrValue.getText()));

        observable.setCboInterestPaymentFrequency(CommonUtil.convertObjToStr(cboInterestPaymentFrequency.getSelectedItem()));
        observable.setCboCalenderFreq(CommonUtil.convertObjToStr(cboCalenderFreqDay.getSelectedItem()));
        observable.setTdtOriginalDateOfDeposit(tdtOriginalDateOfDeposit.getDateValue());
        observable.setTxtOriginalAccountNumber(txtOriginalAccountNumber.getText());
        observable.setTxtTransferingBranchCode(txtTransferingBranchCode.getText());
        observable.setTxtPrintedNoOfTheFdr(txtPrintedNoOfTheFdr.getText());
        observable.setTxtInterBranchTransferNo(txtInterBranchTransferNo.getText());
        observable.setTxtTransferingAmount(txtTransferingAmount.getText());
        observable.setTdtDateOfTransfer(tdtDateOfTransfer.getDateValue());
        observable.setTdtLastInterestCalculatedDate(tdtLastInterestCalculatedDate.getDateValue());
        observable.setTxtInterestProvidedAmount(txtInterestProvidedAmount.getText());
        observable.setTxtInterestPaid(txtInterestPaid.getText());
        observable.setTxtTotalNumberOfInstallments(txtTotalNumberOfInstallments.getText());
        observable.setTdtLastInstallmentReceivedDate(tdtLastInstallmentReceivedDate.getDateValue());
        observable.setTdtTdsCollectedUpto(tdtTdsCollectedUpto.getDateValue());
        observable.setTxtLastTdsCollected(txtLastTdsCollected.getText());
        observable.setTxtTotalInstallmentReceived(txtTotalInstallmentReceived.getText());
        observable.setLblValRenewDep(lblValRenewDep.getText());
        //        observable.setCboInstallmentAmount(CommonUtil.convertObjToStr(cboInstallmentAmount.getSelectedItem()));
        //        observable.setCboPaymentType(CommonUtil.convertObjToStr(cboPaymentType.getSelectedItem()));
        observable.setLblProductDescription(lblProductDescription.getText());
        //this details filled with the present Position Details tab....
        observable.setAvailableBalanceValue(lblAvailableBalanceValue.getText());
        observable.setTotalBalanceValue(lblTotalBalanceValue.getText());
        observable.setClearBalanceValue(lblClearBalanceValue.getText());
        observable.setTotalInterestValue(lblTotalInterestValue.getText());
        observable.setLastInterestPaidDateValue(lblLastInterestPaidDateValue.getText());
        observable.setPaidnterestAmountValue(lblPaidnterestAmountValue.getText());
        observable.setBalanceInterestAmountValue(lblBalanceInterestAmountValue.getText());
        observable.setAccHeadValue(lblAccHeadValue.getText());
        observable.setTotalInterestPayableValue(lblTotalInterestPayableValue.getText());
        //        observable.setDepositLienNoValue(lblDepositLienNoValue.getText());
        //        observable.setLienAmountValue(lblLienAmountValue.getText());
        //        observable.setLienDateValue(lblLienDateValue.getText());
        //        observable.setLoanNoValue(lblLoanNoValue.getText());
        //        observable.setLoanBalanceValue(lblLoanBalanceValue.getText());
        //        observable.setLoanTakenDateValue(lblLoanTakenDateValue.getText());
        observable.setTdsAmountValue(lblTdsAmountValue.getText());
        observable.setLastInterestProvisionDateValue(lblLastInterestProvisionDateValue.getText());
        observable.setClosedDateValue(lblClosedDateValue.getText());
        observable.setRenewalClosedDepNo(lblRenewalDepositAcValue.getText());
        observable.setClosingTypeValue(lblClosingTypeValue.getText());
        observable.setClosingInterestAmountValue(lblClosingInterestAmountValue.getText());
        observable.setClosingRateOfInterestValue(lblClosingRateOfInterestValue.getText());
        observable.setSBInterestAmountValue(lblSBInterestAmountValue.getText());
        observable.setSBRateOfInterestValue(lblSBRateOfInterestValue.getText());
        observable.setRdoDeathClaim_Yes(rdoDeathClaim_Yes.isSelected());
        observable.setRdoDeathClaim_No(rdoDeathClaim_No.isSelected());
        observable.setRdoAutoRenewal_No(rdoAutoRenewal_No.isSelected());
        observable.setRdoAutoRenewal_Yes(rdoAutoRenewal_Yes.isSelected());
        observable.setRdowithIntRenewal_No(rdoWith_intRenewal_No.isSelected());
        observable.setRdowithIntRenewal_Yes(rdoWith_intRenewal_Yes.isSelected());
        observable.setRdoMatAlertReport_No(rdoMatAlert_report_No.isSelected());
        observable.setRdoMatAlertReport_Yes(rdoMatAlert_report_Yes.isSelected());
        observable.setRdoStandingInstruction_No(rdoStandingInstruction_No.isSelected());
        observable.setRdoStandingInstruction_Yes(rdoStandingInstruction_Yes.isSelected());
        observable.setDepositPeriodRunValue(lbldepositPeriodRunValue.getText());
        observable.setTransferOutBranchValue(lblTransferOutBranchValue.getText());
        //standing Instruction...
        observable.setSICreatedDateValue(lblSICreatedDateValue.getText());
        observable.setSINoValue(lblSINoValue.getText());
        observable.setSIProductTypeValue(lblSIProductTypeValue.getText());
        observable.setSIProductIdValue(lblSIProductIdValue.getText());
        observable.setSIAccountNoValue(lblSIAccountNoValue.getText());
        observable.setSIAmountValue(lblSIAmountValue.getText());
        observable.setSIParticularsValue(lblSIParticularsValue.getText());
        observable.setSIFrequencyValue(lblSIFrequencyValue.getText());
        observable.setSIForwardCountValue(lblSIForwardCountValue.getText());
        observable.setSIStartDateValue(lblSIStartDateValue.getText());
        observable.setSIEndDateValue(lblSIEndDateValue.getText());
        observable.setAcceptanceChargesValue(lblAcceptanceChargesValue.getText());
        observable.setAcceptanceChargesValue(lblSIFailureChargesValue.getText());
        observable.setSIFailureChargesValue(lblSIExecutionChargesValue.getText());
        observable.setRdoCalenderFreq_Yes(rdoCalender_Freq_Yes.isSelected());
        observable.setRdoCalenderFreq_No(rdoCalender_Freq_No.isSelected());
        observable.setCalenderFreqDate(tdtCalenderFreqDate.getDateValue());
        observable.setPrinting_No(txtPrintedOption.getText());
        observable.setCboCalenderFreq(CommonUtil.convertObjToStr(cboCalenderFreqDay.getSelectedItem()));
        observable.setLblMemberVal(lblMemberVal.getText());
        //renewal
        observable.setRenewalBalIntAmtVal(lblRenewalBalIntAmtVal.getText());
        observable.setRenewalDepDate(lblRenewalValPeriodRun.getText());
        observable.setRenewalValPeriodRun(lblRenewalSBPeriodVal.getText());
        observable.setRenewalSBIntAmtVal(lblRenewalSBIntAmtVal.getText());
        observable.setRenewalSBIntRateVal(lblRenewalSBIntRateVal.getText());
        observable.setRenewalInterestRepayAmtVal(lblRenewalInterestRepayAmtVal.getText());
        observable.setRenewaltdtDateOfDeposit(tdtRenewalDateOfDeposit.getDateValue());
        observable.setRenewaltxtPeriodOfDeposit_Years(txtRenewalPeriodOfDeposit_Years.getText());
        observable.setRenewaltxtPeriodOfDeposit_Months(txtRenewalPeriodOfDeposit_Months.getText());
        observable.setRenewaltxtPeriodOfDeposit_Days(txtRenewalPeriodOfDeposit_Days.getText());
        observable.setRenewaltdtMaturityDate(tdtRenewalMaturityDate.getDateValue());
        observable.setRenewaltxtDepositAmount(txtRenewalDepositAmount.getText());
        observable.setRenewalValDepositSubNo(lblRenewalValDepositSubNo.getText());
        observable.setRenewaltxtRateOfInterest(txtRenewalRateOfInterest.getText());
        observable.setRenewaltxtMaturityAmount(txtRenewalMaturityAmount.getText());
        observable.setRenewaltxtTotalInterestAmount(txtRenewalTotalInterestAmount.getText());
        observable.setRenewaltxtPeriodicInterestAmount(txtRenewalPeriodicInterestAmount.getText());
        //system.out.println("REBEW11===" + CommonUtil.convertObjToStr(cboRenewalDepositProdId.getSelectedItem()));
        observable.setCboRenewalDepositProdId(CommonUtil.convertObjToStr(cboRenewalDepositProdId.getSelectedItem()));
        observable.setCboRenewalDepositCategory(CommonUtil.convertObjToStr(cboRenewalDepositCategory.getSelectedItem()));
        if (cboRenewalInterestPaymentFrequency.getSelectedItem() != null && !cboRenewalInterestPaymentFrequency.getSelectedItem().equals("")) {
            observable.setCboRenewalInterestPaymentFrequency(CommonUtil.convertObjToStr(cboRenewalInterestPaymentFrequency.getSelectedItem()));
        }
        observable.setCboRenewalInterestPaymentMode(CommonUtil.convertObjToStr(cboRenewalInterestPaymentMode.getSelectedItem()));
        observable.setCboRenewalProdType(CommonUtil.convertObjToStr(cboRenewalProdType.getSelectedItem()));
        if (cboRenewalProdId.getSelectedItem() != null) {
            observable.setCboRenewalProdId(CommonUtil.convertObjToStr(cboRenewalProdId.getSelectedItem()));
        }
        observable.setRenewalcustomerIdCr(CommonUtil.convertObjToStr(txtRenewalCustomerIdCr.getText()));
        observable.setRenewalcustomerNameCrValue(CommonUtil.convertObjToStr(lblRenewalCustomerNameCrValue.getText()));
        if (cboRenewalCalenderFreqDay.getSelectedItem() != null && !cboRenewalCalenderFreqDay.getSelectedItem().equals("")) {
            observable.setCboRenewalCalenderFreqDay(CommonUtil.convertObjToStr(cboRenewalCalenderFreqDay.getSelectedItem()));
        }

        observable.setCboRenewalDepTransMode(CommonUtil.convertObjToStr(cboRenewalDepTransMode.getSelectedItem()));
        observable.setCboRenewalDepTransProdType(CommonUtil.convertObjToStr(cboRenewalDepTransProdType.getSelectedItem()));
        if (cboRenewalDepTransProdId.getSelectedItem() != null) {
            observable.setCboRenewalDepTransProdId(CommonUtil.convertObjToStr(cboRenewalDepTransProdId.getSelectedItem()));
        }
        observable.setRenewalcustomerIdCrDep(txtRenewalDepCustomerIdCr.getText());
        observable.setRenewalcustomerNameCrValueDep(lblRenewalCustNameValue.getText());

        observable.setCboRenewalInterestTransMode(CommonUtil.convertObjToStr(cboRenewalInterestTransMode.getSelectedItem()));
        observable.setCboRenewalInterestTransProdType(CommonUtil.convertObjToStr(cboRenewalInterestTransProdType.getSelectedItem()));
        if (cboRenewalInterestTransProdId.getSelectedItem() != null) {
            observable.setCboRenewalInterestTransProdId(CommonUtil.convertObjToStr(cboRenewalInterestTransProdId.getSelectedItem()));
        }
        observable.setRenewalcustomerIdCrInt(txtRenewalIntCustomerIdCr.getText());
        observable.setRenewalcustomerNameCrValueInt(lblRenewalInterestCustNameVal.getText());
        observable.setTxtRenewalPrintedOption(txtRenewalPrintedOption.getText());

        observable.setRdoRenewalWithdrawing_Yes(rdoRenewalWithdrawing_Yes.isSelected());
        observable.setRdoRenewalWithdrawing_No(rdoRenewalWithdrawing_No.isSelected());
        observable.setRdoRenewalAdding_Yes(rdoRenewalAdding_Yes.isSelected());
        observable.setRdoRenewalAdding_No(rdoRenewalAdding_No.isSelected());
        observable.setRdoRenewalWithdrawingInt_Yes(rdoRenewalWithdrawingInt_Yes.isSelected());
        observable.setRdoRenewalWithdrawingInt_No(rdoRenewalWithdrawingInt_No.isSelected());
        observable.setRdoRenewalCalenderFreq_Yes(rdoRenewalCalender_Freq_Yes.isSelected());
        observable.setRdoRenewalCalenderFreq_No(rdoRenewalCalender_Freq_No.isSelected());

        observable.setTxtRenewalDepTransAmtValue(txtRenewalDepTransAmtValue.getText());
        observable.setTxtRenewalDepTransTokenNo(txtRenewalDepTransTokenNo.getText());
        observable.setTxtRenewalIntAmtValue(txtRenewalIntAmtValue.getText());
        observable.setTxtRenewalIntTokenNoVal(txtRenewalIntTokenNoVal.getText());
        observable.setCboRenewalCalenderFreqDay(CommonUtil.convertObjToStr(cboRenewalCalenderFreqDay.getSelectedItem()));
        observable.setRenewalBalIntAmtVal(lblRenewalBalIntAmtVal.getText());
        observable.setRenewalDepDate(lblRenewalValPeriodRun.getText());
        observable.setRenewalValPeriodRun(lblRenewalSBPeriodVal.getText());
        observable.setRenewalSBIntAmtVal(CommonUtil.convertObjToStr(lblRenewalSBIntAmtVal.getText()));
        observable.setRenewalInterestRepayAmtVal(lblRenewalInterestRepayAmtVal.getText());

        observable.setRdoRenewalMatAlert_report_Yes(rdoRenewalMatAlert_report_Yes.isSelected());
        observable.setRdoRenewalMatAlert_report_No(rdoRenewalMatAlert_report_No.isSelected());
        observable.setRdoRenewalAutoRenewal_Yes(rdoRenewalAutoRenewal_Yes.isSelected());
        observable.setRdoRenewalAutoRenewal_No(rdoRenewalAutoRenewal_No.isSelected());
        observable.setRdoRenewalWith_intRenewal_Yes(rdoRenewalWith_intRenewal_Yes.isSelected());
        observable.setRdoRenewalWith_intRenewal_No(rdoRenewalWith_intRenewal_No.isSelected());
        //        observable.setLblRenewalNoticeNewVal(lblRenewalNoticeNewVal.getText());
        //        observable.setLblAutoRenewalNewVal(lblAutoRenewalNewVal.getText());
        //        observable.setLblRenewalWithIntNewVal(lblRenewalWithIntNewVal.getText());
        //        observable.setLblMemberTypeRenewalNewVal(lblMemberTypeRenewalNewVal.getText());
        //        observable.setLblTaxDeclareRenewalNewVal(lblTaxDeclareRenewalNewVal.getText());
        //        observable.setLbl15HDeclareRenewalNewVal(lbl15HDeclareRenewalNewVal.getText());

        //extension deposit details...
        observable.setExtensionDepDate(lblExtensionDepositDtVal.getText());
        //        observable.setExtensionCurrDt(lblExtensionCurrDtVal.getText());
        observable.setExtensionRateOfIntVal(lblExtensionRateOfIntVal.getText());
        observable.setExtensionBalInterestAmtVal(lblExtensionTotalIntAmtValue.getText());
        observable.setExtensionWithdrawIntAmtVal(lblExtensionWithdrawIntAmtValue.getText());
        observable.setExtensionBalIntAmtVal(lblExtensionLeftOverIntAmtValue.getText());
        observable.setExtensionPaymentFreqValue(lblExtensionPaymentFreqValue.getText());
        observable.setExtensionActualPeriodRun(lblExtensionPeriodRunValue.getText());
        observable.setExtensiontdtDateOfDeposit(tdtExtensionDateOfDeposit.getDateValue());
        observable.setExtensiontxtPeriodOfDeposit_Years(txtExtensionPeriodOfDeposit_Years.getText());
        observable.setExtensiontxtPeriodOfDeposit_Months(txtExtensionPeriodOfDeposit_Months.getText());
        observable.setExtensiontxtPeriodOfDeposit_Days(txtExtensionPeriodOfDeposit_Days.getText());
        observable.setExtensiontdtMaturityDate(tdtExtensionMaturityDate.getDateValue());
        observable.setExtensiontxtDepositAmount(txtExtensionDepositAmount.getText());
        observable.setExtensiontxtRateOfInterest(txtExtensionRateOfInterest.getText());
        observable.setExtensiontxtMaturityAmount(txtExtensionMaturityAmount.getText());
        observable.setExtensiontxtTotalInterestAmount(txtExtensionTotalInterestAmount.getText());
        observable.setExtensiontxtPeriodicInterestAmount(txtExtensionPeriodicInterestAmount.getText());

        observable.setCboExtensionDepositCategory(CommonUtil.convertObjToStr(cboExtensionDepositCategory.getSelectedItem()));
        observable.setCboExtensionPaymentMode(CommonUtil.convertObjToStr(cboExtensionInterestPaymentMode.getSelectedItem()));
        observable.setExtensioncustomerIdCrInt(CommonUtil.convertObjToStr(txtExtensionCustomerIdCr.getText()));
        observable.setExtensioncustomerNameCrValueInt(CommonUtil.convertObjToStr(lblExtensionCustomerNameCrValue.getText()));
        observable.setCboExtensionTransMode(CommonUtil.convertObjToStr(cboExtensionTransMode.getSelectedItem()));
        observable.setCboExtensionTransProdType(CommonUtil.convertObjToStr(cboExtensionTransProdType.getSelectedItem()));
        observable.setTxtExtensionPrintedOption(txtExtensionPrintedOption.getText());
        observable.setTxtExtensionTransAmtValue(txtExtensionDepTransAmtValue.getText());
        observable.setTxtExtensionTransTokenNo(txtExtensionTransTokenNo.getText());
        observable.setTxtExtensionIntAmtValue(txtExtensionTransAmtValue.getText());
        observable.setExtensioncustomerIdCrDep(txtExtensionTransCustomerIdCr.getText());
        observable.setExtensionValDepositSubNo(lblExtensionValDepositSubNo.getText());

        observable.setCboExtensionCalenderFreqDay(CommonUtil.convertObjToStr(cboExtensionCalenderFreqDay.getSelectedItem()));
        if (cboExtensionInterestPaymentFrequency.getSelectedItem() != null && !cboExtensionInterestPaymentFrequency.getSelectedItem().equals("")) {
            observable.setCboExtensionPaymentFrequency(CommonUtil.convertObjToStr(cboExtensionInterestPaymentFrequency.getSelectedItem()));
        }
        if (cboExtensionCalenderFreqDay.getSelectedItem() != null && !cboExtensionCalenderFreqDay.getSelectedItem().equals("")) {
            observable.setCboExtensionCalenderFreqDay(CommonUtil.convertObjToStr(cboExtensionCalenderFreqDay.getSelectedItem()));
        }
        if (cboExtensionTransProdId.getSelectedItem() != null) {
            observable.setCboExtensionTransProdId(CommonUtil.convertObjToStr(cboExtensionTransProdId.getSelectedItem()));
        }
        observable.setCboExtensionPaymentProdType(CommonUtil.convertObjToStr(cboExtensionProdType.getSelectedItem()));
        if (cboExtensionProdId.getSelectedItem() != null) {
            observable.setCboExtensionPaymentProdId(CommonUtil.convertObjToStr(cboExtensionProdId.getSelectedItem()));
        }
        if (cboExtensionDepositProdId.getSelectedItem() != null) {
            observable.setCboExtensionDepositProdId(CommonUtil.convertObjToStr(cboExtensionDepositProdId.getSelectedItem()));
        }

        observable.setSalaryRecoveryYes(rdoSalaryRecovery_Yes.isSelected());
        observable.setSalaryRecoveryNo(rdoSalaryRecovery_No.isSelected());
        observable.setPostageRenewAmt(txtRenewPostageAmt.getText());
        observable.setPostageAmt(txtpostageAmt.getText());
        observable.setChkRenewinterest(chkRenewinterest.isSelected());
        observable.setReferenceNo(txtReferenceNo.getText());             
        if(chkMobileNumRequired.isSelected()){
            observable.setChkMobileNumRequired(true);
        }else{
            observable.setChkMobileNumRequired(false);
        } 
        observable.setTxtMobileNo(CommonUtil.convertObjToStr(txtMobileNo.getText()));
        observable.setTdtMobileSubscribedFrom(tdtMobileSubscribedFrom.getDateValue());
    }

    private void updateTranserIn() {
        tdtOriginalDateOfDeposit.setDateValue(observable.getTdtOriginalDateOfDeposit());
        txtOriginalAccountNumber.setText(observable.getTxtOriginalAccountNumber());
        txtTransferingBranchCode.setText(observable.getTxtTransferingBranchCode());
        txtPrintedNoOfTheFdr.setText(observable.getTxtPrintedNoOfTheFdr());
        txtInterBranchTransferNo.setText(observable.getTxtInterBranchTransferNo());
        txtTransferingAmount.setText(observable.getTxtTransferingAmount());
        tdtDateOfTransfer.setDateValue(observable.getTdtDateOfTransfer());
        tdtLastInterestCalculatedDate.setDateValue(observable.getTdtLastInterestCalculatedDate());
        txtInterestProvidedAmount.setText(observable.getTxtInterestProvidedAmount());
        txtInterestPaid.setText(observable.getTxtInterestPaid());
        txtTotalNumberOfInstallments.setText(observable.getTxtTotalNumberOfInstallments());
        tdtLastInstallmentReceivedDate.setDateValue(observable.getTdtLastInstallmentReceivedDate());
        tdtTdsCollectedUpto.setDateValue(observable.getTdtTdsCollectedUpto());
        txtLastTdsCollected.setText(observable.getTxtLastTdsCollected());
        txtTotalInstallmentReceived.setText(observable.getTxtTotalInstallmentReceived());
        lblValBalanceInterestPayable.setText(observable.getLblValBalanceInterestPayable());
        lblValTransferingBranchName.setText(observable.getLblValTransferingBranchName());
    }

    public static void main(java.lang.String[] args) {

        //        TermDepositUI objTermDepositUI = new TermDepositUI();
        //        objTermDepositUI.depProdDetails = new HashMap();
        //        objTermDepositUI.depProdDetails.put("MIN_DEPOSIT_PERIOD", "10");
        //        objTermDepositUI.depProdDetails.put("MAX_DEPOSIT_PERIOD", "3660");
        //        //system.out.println(objTermDepositUI.msgMinMaxPeriod());

        //        //system.out.println("3650:"+objTermDepositUI.msgAccordingToDaysMonYrs(3650));
        //        //system.out.println("3690:"+objTermDepositUI.msgAccordingToDaysMonYrs(3690));
        //        //system.out.println("3660:"+objTermDepositUI.msgAccordingToDaysMonYrs(3660));
        //        //system.out.println("50:"+objTermDepositUI.msgAccordingToDaysMonYrs(50));

        javax.swing.JFrame frm = new javax.swing.JFrame();
        MultipleTermDepositUI term = new MultipleTermDepositUI();
        frm.getContentPane().add(term);
        term.show();
        frm.setSize(600, 500);
        frm.show();
    }

    public void resetDepSubNoProductIDChanged() {
        txtPeriodOfDeposit_Years.setText("");
        txtPeriodOfDeposit_Months.setText("");
        txtPeriodOfDeposit_Days.setText("");
        txtWeek.setText("");
        tdtMaturityDate.setDateValue("");
        //        tdtPaymentDate.setDateValue("");
        txtRateOfInterest.setText("");
        txtMaturityAmount.setText("");
        txtTotalInterestAmount.setText("");
        txtPeriodicInterestAmount.setText("");
        //        cboInterestPaymentMode.setSelectedItem("");
        //        cboInterestPaymentFrequency.setSelectedItem("");
        //        cboPaymentType.setSelectedItem("");
        //        tdtPaymentDate.setDateValue("");
        //        cboInstallmentAmount.setSelectedItem("");
        txtDepositAmount.setText("");
        //        txtPrintedOption.setText("");
    }

    public void resetTranferInProductID() {
        txtOriginalAccountNumber.setText("");
        txtTransferingBranchCode.setText("");
        txtPrintedNoOfTheFdr.setText("");
        txtInterBranchTransferNo.setText("");
        txtTransferingAmount.setText("");
        txtInterestProvidedAmount.setText("");
        txtInterestPaid.setText("");
        txtTotalNumberOfInstallments.setText("");
        txtLastTdsCollected.setText("");
        txtTotalInstallmentReceived.setText("");
        lblValBalanceInterestPayable.setText("");
        lblValTransferingBranchName.setText("");
        tdtDateOfTransfer.setDateValue("");
        tdtLastInstallmentReceivedDate.setDateValue("");
        tdtLastInterestCalculatedDate.setDateValue("");
        tdtOriginalDateOfDeposit.setDateValue("");
        tdtTdsCollectedUpto.setDateValue("");

    }

    //--- Methods For Authorised signatory Screen ----- //
    private void addCustIDNAuthSignatory() {
        int borrowerTabRowCount = tblJointAcctHolder.getRowCount();
        for (int i = borrowerTabRowCount - 1, j = 0; i >= 0; --i, ++j) {
            authSignUI.addAcctLevelCustomer(CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(j, 1)));
        }
    }

    private void removedJointAcctCustIDNAuthSignatory() {
        int borrowerTabRowCount = tblJointAcctHolder.getRowCount();
        for (int i = borrowerTabRowCount - 1, j = 1; i >= 1; --i, ++j) {
            authSignUI.removeAcctLevelCustomer(CommonUtil.convertObjToStr(tblJointAcctHolder.getValueAt(j, 1)));
        }
    }

    /**
     * Getter for property transSomeAmt.
     *
     * @return Value of property transSomeAmt.
     */
    public java.lang.String getTransSomeAmt() {
        return transSomeAmt;
    }

    /**
     * Setter for property transSomeAmt.
     *
     * @param transSomeAmt New value of property transSomeAmt.
     */
    public void setTransSomeAmt(java.lang.String transSomeAmt) {
        this.transSomeAmt = transSomeAmt;
    }

    /**
     * Getter for property renewalTransMap.
     *
     * @return Value of property renewalTransMap.
     */
    public java.util.HashMap getRenewalTransMap() {
        return renewalTransMap;
    }

    /**
     * Setter for property renewalTransMap.
     *
     * @param renewalTransMap New value of property renewalTransMap.
     */
    public void setRenewalTransMap(java.util.HashMap renewalTransMap) {
        this.renewalTransMap = renewalTransMap;
    }

    public boolean isIsClosed() {
        return isClosed;
    }

    public void setIsClosed(boolean isClosed) {
        this.isClosed = isClosed;
    }

    /**
     * Getter for property authorizeStatus.
     *
     * @return Value of property authorizeStatus.
     */
    public java.lang.String getAuthorizeStatus() {
        return authorizeStatus;
    }

    /**
     * Setter for property authorizeStatus.
     *
     * @param authorizeStatus New value of property authorizeStatus.
     */
    public void setAuthorizeStatus(java.lang.String authorizeStatus) {
        this.authorizeStatus = authorizeStatus;
    }
    
    /**
     * Getter for property noOfDeposits.
     *
     * @return Value of property noOfDeposits.
     */
    public double getNoOfDeposits() {
        return noOfDeposits;
    }

    /**
     * Setter for property noOfDeposits.
     *
     * @param noOfDeposits New value of property noOfDeposits.
     */
    public void setNoOfDeposits(double noOfDeposits) {
        this.noOfDeposits = noOfDeposits;
    }
    
    private void changeCustomerCategory(){
          if (txtCustomerId.getText().length() > 0) {
            if ((cboProductId.getSelectedItem() != null) && (cboConstitution.getSelectedItem() != null)
                    && (!cboProductId.getSelectedItem().equals("") && !cboConstitution.getSelectedItem().equals(""))) {
                String txtCustomer = txtCustomerId.getText();
                HashMap mapDOB = new HashMap();
                HashMap cust = new HashMap();
                cust.put("CUSTOMER ID", txtCustomer);
                int age = 0;
                int rtrAge = 0;
                List lstDOB = ClientUtil.executeQuery("getCustDOB", cust);
                if (lstDOB != null && lstDOB.size() > 0) {
                    mapDOB = (HashMap) lstDOB.get(0);
                    if (mapDOB.get("DOB") != null) {
                        Date dob = (Date) mapDOB.get("DOB");
                        age = calAge1(dob);
                    } 
                }
                rtrAge = TrueTransactMain.SENIOR_CITIZEN_AGE;              
                if (age >= rtrAge) {
                    observable.setCboCategory("Senior Citizens");
                    cboCategory.setSelectedItem(observable.getCboCategory());
                }else{
                    System.out.println("Execute here else");
                    observable.setCboCategory("General Category");
                    cboCategory.setSelectedItem(observable.getCboCategory());
                }
            }     
        }
    }
    
    
    
    
    //--- Methods For Authorised signatory Screen ----- //
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnAgentIdFileOpen;
    private com.see.truetransact.uicomponent.CButton btnAgentIdFileOpen1;
    private com.see.truetransact.uicomponent.CButton btnAuthorize;
    private com.see.truetransact.uicomponent.CButton btnCancel;
    private com.see.truetransact.uicomponent.CButton btnClose;
    private com.see.truetransact.uicomponent.CButton btnCustomerIdFileOpen;
    private com.see.truetransact.uicomponent.CButton btnCustomerIdFileOpen1;
    private com.see.truetransact.uicomponent.CButton btnCustomerIdFileOpenCr;
    private com.see.truetransact.uicomponent.CButton btnDelete;
    private com.see.truetransact.uicomponent.CButton btnDepositNo;
    private com.see.truetransact.uicomponent.CButton btnDisplay;
    private com.see.truetransact.uicomponent.CButton btnEdit;
    private com.see.truetransact.uicomponent.CButton btnException;
    private com.see.truetransact.uicomponent.CButton btnExtensionCustomerIdFileOpenCr;
    private com.see.truetransact.uicomponent.CButton btnExtensionDepSubNoAccSave;
    private com.see.truetransact.uicomponent.CButton btnExtensionTransCustomerIdFileOpenCr;
    private com.see.truetransact.uicomponent.CButton btnJointAcctDel;
    private com.see.truetransact.uicomponent.CButton btnJointAcctNew;
    private com.see.truetransact.uicomponent.CButton btnJointAcctToMain;
    private com.see.truetransact.uicomponent.CButton btnNew;
    private com.see.truetransact.uicomponent.CButton btnOriginalAccountNumberHelp;
    private com.see.truetransact.uicomponent.CButton btnPrint;
    private com.see.truetransact.uicomponent.CButton btnReject;
    private com.see.truetransact.uicomponent.CButton btnRenewalCustomerIdFileOpenCr;
    private com.see.truetransact.uicomponent.CButton btnRenewalDepCustomerIdFileOpenCr;
    private com.see.truetransact.uicomponent.CButton btnRenewalDepSubNoAccSave;
    private com.see.truetransact.uicomponent.CButton btnRenewalIntCustomerIdFileOpenCr;
    private com.see.truetransact.uicomponent.CButton btnSave;
    private com.see.truetransact.uicomponent.CButton btnTransBranchCodeHelp;
    private com.see.truetransact.uicomponent.CButton btnView;
    private com.see.truetransact.uicomponent.CPanel cPanel1;
    private com.see.truetransact.uicomponent.CComboBox cboAddressType;
    private com.see.truetransact.uicomponent.CComboBox cboCalenderFreqDay;
    private com.see.truetransact.uicomponent.CComboBox cboCategory;
    private com.see.truetransact.uicomponent.CComboBox cboConstitution;
    private com.see.truetransact.uicomponent.CComboBox cboExtensionCalenderFreqDay;
    private com.see.truetransact.uicomponent.CComboBox cboExtensionDepositCategory;
    private com.see.truetransact.uicomponent.CComboBox cboExtensionDepositProdId;
    private com.see.truetransact.uicomponent.CComboBox cboExtensionInterestPaymentFrequency;
    private com.see.truetransact.uicomponent.CComboBox cboExtensionInterestPaymentMode;
    private com.see.truetransact.uicomponent.CComboBox cboExtensionProdId;
    private com.see.truetransact.uicomponent.CComboBox cboExtensionProdType;
    private com.see.truetransact.uicomponent.CComboBox cboExtensionTransMode;
    private com.see.truetransact.uicomponent.CComboBox cboExtensionTransProdId;
    private com.see.truetransact.uicomponent.CComboBox cboExtensionTransProdType;
    private com.see.truetransact.uicomponent.CComboBox cboInterestPaymentFrequency;
    private com.see.truetransact.uicomponent.CComboBox cboInterestPaymentMode;
    private com.see.truetransact.uicomponent.CComboBox cboProdId;
    private com.see.truetransact.uicomponent.CComboBox cboProdType;
    private com.see.truetransact.uicomponent.CComboBox cboProductId;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalCalenderFreqDay;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalDepTransMode;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalDepTransProdId;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalDepTransProdType;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalDepositCategory;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalDepositProdId;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalInterestPaymentFrequency;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalInterestPaymentMode;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalInterestTransMode;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalInterestTransProdId;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalInterestTransProdType;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalProdId;
    private com.see.truetransact.uicomponent.CComboBox cboRenewalProdType;
    private com.see.truetransact.uicomponent.CComboBox cboSettlementMode;
    private com.see.truetransact.uicomponent.CCheckBox chk15hDeclarations;
    private com.see.truetransact.uicomponent.CCheckBox chkAuthorizedSignatory;
    private com.see.truetransact.uicomponent.CCheckBox chkMobileNumRequired;
    private com.see.truetransact.uicomponent.CCheckBox chkNomineeDetails;
    private com.see.truetransact.uicomponent.CCheckBox chkPowerOfAttorney;
    private com.see.truetransact.uicomponent.CCheckBox chkRenewSameNo;
    private com.see.truetransact.uicomponent.CCheckBox chkRenewinterest;
    private com.see.truetransact.uicomponent.CCheckBox chkTaxDeductions;
    private com.see.truetransact.uicomponent.CLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private com.see.truetransact.uicomponent.CPanel jPanel2;
    private com.see.truetransact.uicomponent.CLabel lbl15hDeclarations;
    private com.see.truetransact.uicomponent.CLabel lblAccHead;
    private com.see.truetransact.uicomponent.CLabel lblAccHeadValue;
    private com.see.truetransact.uicomponent.CLabel lblAcceptanceCharges;
    private com.see.truetransact.uicomponent.CLabel lblAcceptanceChargesValue;
    private com.see.truetransact.uicomponent.CLabel lblAccountNo;
    private com.see.truetransact.uicomponent.CLabel lblAddressType;
    private com.see.truetransact.uicomponent.CLabel lblAgentId;
    private com.see.truetransact.uicomponent.CLabel lblAgentName;
    private com.see.truetransact.uicomponent.CLabel lblAmount;
    private com.see.truetransact.uicomponent.CLabel lblArea;
    private com.see.truetransact.uicomponent.CLabel lblAuthorizedSignatory;
    private com.see.truetransact.uicomponent.CLabel lblAutoRenewalNew;
    private com.see.truetransact.uicomponent.CLabel lblAvailableBalance;
    private com.see.truetransact.uicomponent.CLabel lblAvailableBalanceValue;
    private com.see.truetransact.uicomponent.CLabel lblBalanceInterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblBalanceInterestAmountValue;
    private com.see.truetransact.uicomponent.CLabel lblBalanceInterestPayable;
    private com.see.truetransact.uicomponent.CLabel lblCalenderFreq;
    private com.see.truetransact.uicomponent.CLabel lblCalenderFreqDate;
    private com.see.truetransact.uicomponent.CLabel lblCategory;
    private com.see.truetransact.uicomponent.CLabel lblCity;
    private com.see.truetransact.uicomponent.CLabel lblClTDSCollectedValue2;
    private com.see.truetransact.uicomponent.CLabel lblClearBalance;
    private com.see.truetransact.uicomponent.CLabel lblClearBalanceValue;
    private com.see.truetransact.uicomponent.CLabel lblClosedDate;
    private com.see.truetransact.uicomponent.CLabel lblClosedDateValue;
    private com.see.truetransact.uicomponent.CLabel lblClosingInterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblClosingInterestAmountValue;
    private com.see.truetransact.uicomponent.CLabel lblClosingRateOfInterest;
    private com.see.truetransact.uicomponent.CLabel lblClosingRateOfInterestValue;
    private com.see.truetransact.uicomponent.CLabel lblClosingType;
    private com.see.truetransact.uicomponent.CLabel lblClosingTypeValue;
    private com.see.truetransact.uicomponent.CLabel lblConstitution;
    private com.see.truetransact.uicomponent.CLabel lblCountry;
    private com.see.truetransact.uicomponent.CLabel lblCustomerId;
    private com.see.truetransact.uicomponent.CLabel lblCustomerName;
    private com.see.truetransact.uicomponent.CLabel lblCustomerNameCr;
    private com.see.truetransact.uicomponent.CLabel lblCustomerNameCrValue;
    private com.see.truetransact.uicomponent.CLabel lblDateOfBirth;
    private com.see.truetransact.uicomponent.CLabel lblDateOfDeposit;
    private com.see.truetransact.uicomponent.CLabel lblDateOfTransfer;
    private com.see.truetransact.uicomponent.CLabel lblDeathClaim;
    private com.see.truetransact.uicomponent.CLabel lblDelayedAmount;
    private com.see.truetransact.uicomponent.CLabel lblDelayedAmountValue;
    private com.see.truetransact.uicomponent.CLabel lblDelayedMonth;
    private com.see.truetransact.uicomponent.CLabel lblDelayedMonthValue;
    private com.see.truetransact.uicomponent.CLabel lblDepositAmount;
    private com.see.truetransact.uicomponent.CLabel lblDepositNo;
    private com.see.truetransact.uicomponent.CLabel lblDepositSubNo;
    private com.see.truetransact.uicomponent.CLabel lblDepositsOpened;
    private com.see.truetransact.uicomponent.CLabel lblExistingAcctNo;
    private com.see.truetransact.uicomponent.CLabel lblExistingCustomer;
    private com.see.truetransact.uicomponent.CLabel lblExtensionAccountNo;
    private com.see.truetransact.uicomponent.CLabel lblExtensionAutoRenewal;
    private com.see.truetransact.uicomponent.CLabel lblExtensionBalanceInt;
    private com.see.truetransact.uicomponent.CLabel lblExtensionBalanceIntValue;
    private com.see.truetransact.uicomponent.CLabel lblExtensionCalenderFreq;
    private com.see.truetransact.uicomponent.CLabel lblExtensionCalenderFreqDate;
    private com.see.truetransact.uicomponent.CLabel lblExtensionCategory;
    private com.see.truetransact.uicomponent.CLabel lblExtensionCustomerNameCr;
    private com.see.truetransact.uicomponent.CLabel lblExtensionCustomerNameCrValue;
    private com.see.truetransact.uicomponent.CLabel lblExtensionDateOfDeposit;
    private com.see.truetransact.uicomponent.CLabel lblExtensionDepTransAmt;
    private com.see.truetransact.uicomponent.CLabel lblExtensionDepositAmount;
    private com.see.truetransact.uicomponent.CLabel lblExtensionDepositDate;
    private com.see.truetransact.uicomponent.CLabel lblExtensionDepositDtVal;
    private com.see.truetransact.uicomponent.CLabel lblExtensionDepositProdId;
    private com.see.truetransact.uicomponent.CLabel lblExtensionDepositSubNo;
    private com.see.truetransact.uicomponent.CLabel lblExtensionDepositTransTokenNo;
    private com.see.truetransact.uicomponent.CLabel lblExtensionIntAmt;
    private com.see.truetransact.uicomponent.CLabel lblExtensionInterestCustName;
    private com.see.truetransact.uicomponent.CLabel lblExtensionInterestPaymentFrequency;
    private com.see.truetransact.uicomponent.CLabel lblExtensionInterestPaymentMode;
    private com.see.truetransact.uicomponent.CLabel lblExtensionInterestTransAccNo;
    private com.see.truetransact.uicomponent.CLabel lblExtensionInterestTransMode;
    private com.see.truetransact.uicomponent.CLabel lblExtensionInterestTransProdId;
    private com.see.truetransact.uicomponent.CLabel lblExtensionInterestTransProdType;
    private com.see.truetransact.uicomponent.CLabel lblExtensionLeftOverIntAmt;
    private com.see.truetransact.uicomponent.CLabel lblExtensionLeftOverIntAmtValue;
    private com.see.truetransact.uicomponent.CLabel lblExtensionMatAlertRep;
    private com.see.truetransact.uicomponent.CLabel lblExtensionMaturityAmount;
    private com.see.truetransact.uicomponent.CLabel lblExtensionMaturityDate;
    private com.see.truetransact.uicomponent.CLabel lblExtensionPaymentFreq;
    private com.see.truetransact.uicomponent.CLabel lblExtensionPaymentFreqValue;
    private com.see.truetransact.uicomponent.CLabel lblExtensionPeriodOfDeposit;
    private com.see.truetransact.uicomponent.CLabel lblExtensionPeriodRun;
    private com.see.truetransact.uicomponent.CLabel lblExtensionPeriodRunValue;
    private com.see.truetransact.uicomponent.CLabel lblExtensionPeriod_Days;
    private com.see.truetransact.uicomponent.CLabel lblExtensionPeriod_Months;
    private com.see.truetransact.uicomponent.CLabel lblExtensionPeriod_Years;
    private com.see.truetransact.uicomponent.CLabel lblExtensionPeriodicInterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblExtensionPrintedOption;
    private com.see.truetransact.uicomponent.CLabel lblExtensionProdId;
    private com.see.truetransact.uicomponent.CLabel lblExtensionProductType;
    private com.see.truetransact.uicomponent.CLabel lblExtensionRateOfInt;
    private com.see.truetransact.uicomponent.CLabel lblExtensionRateOfIntVal;
    private com.see.truetransact.uicomponent.CLabel lblExtensionRateOfInterest;
    private com.see.truetransact.uicomponent.CLabel lblExtensionTotalIntAmt;
    private com.see.truetransact.uicomponent.CLabel lblExtensionTotalIntAmtValue;
    private com.see.truetransact.uicomponent.CLabel lblExtensionTotalInterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblExtensionTotalRepayAmt;
    private com.see.truetransact.uicomponent.CLabel lblExtensionTotalRepayAmtValue;
    private com.see.truetransact.uicomponent.CLabel lblExtensionTransCustNameVal;
    private com.see.truetransact.uicomponent.CLabel lblExtensionValDepositSubNo;
    private com.see.truetransact.uicomponent.CLabel lblExtensionWithIntAutoRenewal;
    private com.see.truetransact.uicomponent.CLabel lblExtensionWithdrawIntAmt;
    private com.see.truetransact.uicomponent.CLabel lblExtensionWithdrawIntAmt1;
    private com.see.truetransact.uicomponent.CLabel lblExtensionWithdrawIntAmt2;
    private com.see.truetransact.uicomponent.CLabel lblExtensionWithdrawIntAmtValue;
    private com.see.truetransact.uicomponent.CLabel lblExtensionWithdrawIntAmtValue1;
    private com.see.truetransact.uicomponent.CLabel lblExtensionWithdrawIntAmtValue2;
    private com.see.truetransact.uicomponent.CLabel lblExtensionWithdrawingDeposit;
    private com.see.truetransact.uicomponent.CLabel lblExtensionWithdrawingIntAmt;
    private com.see.truetransact.uicomponent.CLabel lblExtensionofPrematureClosure;
    private com.see.truetransact.uicomponent.CLabel lblInterBranchTransferNo;
    private com.see.truetransact.uicomponent.CLabel lblInterestPaid;
    private com.see.truetransact.uicomponent.CLabel lblInterestPaymentFrequency;
    private com.see.truetransact.uicomponent.CLabel lblInterestPaymentMode;
    private com.see.truetransact.uicomponent.CLabel lblInterestProvidedAmount;
    private com.see.truetransact.uicomponent.CLabel lblLastInstallmentReceivedDate;
    private com.see.truetransact.uicomponent.CLabel lblLastInterestCalculatedDate;
    private com.see.truetransact.uicomponent.CLabel lblLastInterestPaidDate;
    private com.see.truetransact.uicomponent.CLabel lblLastInterestPaidDate1;
    private com.see.truetransact.uicomponent.CLabel lblLastInterestPaidDateValue;
    private com.see.truetransact.uicomponent.CLabel lblLastInterestProvisionDateValue;
    private com.see.truetransact.uicomponent.CLabel lblLastTdsCollected;
    private com.see.truetransact.uicomponent.CLabel lblLockStatus;
    private com.see.truetransact.uicomponent.CLabel lblLockStatus1;
    private com.see.truetransact.uicomponent.CLabel lblMatAlertRep;
    private com.see.truetransact.uicomponent.CLabel lblMaturityAmount;
    private com.see.truetransact.uicomponent.CLabel lblMaturityDate;
    private com.see.truetransact.uicomponent.CLabel lblMember;
    private com.see.truetransact.uicomponent.CLabel lblMemberVal;
    private com.see.truetransact.uicomponent.CLabel lblMobileNo;
    private com.see.truetransact.uicomponent.CLabel lblMobileSubscribedFrom;
    private com.see.truetransact.uicomponent.CLabel lblModeOfOpening;
    private com.see.truetransact.uicomponent.CLabel lblMsg;
    private com.see.truetransact.uicomponent.CLabel lblNewProdId;
    private com.see.truetransact.uicomponent.CLabel lblNextAccntNo;
    private com.see.truetransact.uicomponent.CLabel lblNomineeDetails;
    private com.see.truetransact.uicomponent.CLabel lblOriginalAccountNumber;
    private com.see.truetransact.uicomponent.CLabel lblOriginalDateOfDeposit;
    private com.see.truetransact.uicomponent.CLabel lblPaidInterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblPaidnterestAmountValue;
    private com.see.truetransact.uicomponent.CLabel lblPanNumber;
    private com.see.truetransact.uicomponent.CLabel lblPanNumber1;
    private com.see.truetransact.uicomponent.CLabel lblPeriodOfDeposit;
    private com.see.truetransact.uicomponent.CLabel lblPeriod_Days;
    private com.see.truetransact.uicomponent.CLabel lblPeriod_Months;
    private com.see.truetransact.uicomponent.CLabel lblPeriod_Years;
    private com.see.truetransact.uicomponent.CLabel lblPeriodicInterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblPin;
    private com.see.truetransact.uicomponent.CLabel lblPostageAmt;
    private com.see.truetransact.uicomponent.CLabel lblPowerOfAttorney;
    private com.see.truetransact.uicomponent.CLabel lblPreBalIntVal;
    private com.see.truetransact.uicomponent.CLabel lblPrevInt;
    private com.see.truetransact.uicomponent.CLabel lblPrintedNoOfTheFdr;
    private com.see.truetransact.uicomponent.CLabel lblPrintedOption;
    private com.see.truetransact.uicomponent.CLabel lblProdDesc;
    private com.see.truetransact.uicomponent.CLabel lblProdId;
    private com.see.truetransact.uicomponent.CLabel lblProductDescription;
    private com.see.truetransact.uicomponent.CLabel lblProductId;
    private com.see.truetransact.uicomponent.CLabel lblProductType;
    private com.see.truetransact.uicomponent.CLabel lblRateOfInterest;
    private com.see.truetransact.uicomponent.CLabel lblRemarks;
    private com.see.truetransact.uicomponent.CLabel lblRenewDep;
    private com.see.truetransact.uicomponent.CLabel lblRenewPostageAmt;
    private com.see.truetransact.uicomponent.CLabel lblRenewSamaNo;
    private com.see.truetransact.uicomponent.CLabel lblRenewalAccountNo;
    private com.see.truetransact.uicomponent.CLabel lblRenewalAddingDepTrans;
    private com.see.truetransact.uicomponent.CLabel lblRenewalBalIntAmtVal;
    private com.see.truetransact.uicomponent.CLabel lblRenewalCalenderFreq;
    private com.see.truetransact.uicomponent.CLabel lblRenewalCalenderFreqDate;
    private com.see.truetransact.uicomponent.CLabel lblRenewalCategory;
    private com.see.truetransact.uicomponent.CLabel lblRenewalCustNameValue;
    private com.see.truetransact.uicomponent.CLabel lblRenewalCustomerNameCr;
    private com.see.truetransact.uicomponent.CLabel lblRenewalCustomerNameCrValue;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDate;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDateOfDeposit;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDateValue;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDepTransAmt;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDepositAc;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDepositAcValue;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDepositAmount;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDepositTransAccNo;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDepositTransCustName;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDepositTransMode;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDepositTransProdId;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDepositTransProdType;
    private com.see.truetransact.uicomponent.CLabel lblRenewalDepositTransTokenNo;
    private com.see.truetransact.uicomponent.CLabel lblRenewalIntAmount;
    private com.see.truetransact.uicomponent.CLabel lblRenewalIntAmt;
    private com.see.truetransact.uicomponent.CLabel lblRenewalInterestCustName;
    private com.see.truetransact.uicomponent.CLabel lblRenewalInterestCustNameVal;
    private com.see.truetransact.uicomponent.CLabel lblRenewalInterestPaymentFrequency;
    private com.see.truetransact.uicomponent.CLabel lblRenewalInterestPaymentMode;
    private com.see.truetransact.uicomponent.CLabel lblRenewalInterestRepayAmt;
    private com.see.truetransact.uicomponent.CLabel lblRenewalInterestRepayAmtVal;
    private com.see.truetransact.uicomponent.CLabel lblRenewalInterestTokenNo;
    private com.see.truetransact.uicomponent.CLabel lblRenewalInterestTransAccNo;
    private com.see.truetransact.uicomponent.CLabel lblRenewalInterestTransMode;
    private com.see.truetransact.uicomponent.CLabel lblRenewalInterestTransProdId;
    private com.see.truetransact.uicomponent.CLabel lblRenewalInterestTransProdType;
    private com.see.truetransact.uicomponent.CLabel lblRenewalMaturityAmount;
    private com.see.truetransact.uicomponent.CLabel lblRenewalMaturityDate;
    private com.see.truetransact.uicomponent.CLabel lblRenewalNoticeNew;
    private com.see.truetransact.uicomponent.CLabel lblRenewalOldMaturityDate;
    private com.see.truetransact.uicomponent.CLabel lblRenewalPeriodOfDeposit;
    private com.see.truetransact.uicomponent.CLabel lblRenewalPeriod_Days;
    private com.see.truetransact.uicomponent.CLabel lblRenewalPeriod_Months;
    private com.see.truetransact.uicomponent.CLabel lblRenewalPeriod_Years;
    private com.see.truetransact.uicomponent.CLabel lblRenewalPeriodicInterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblRenewalPrintedOption;
    private com.see.truetransact.uicomponent.CLabel lblRenewalProdId;
    private com.see.truetransact.uicomponent.CLabel lblRenewalProductType;
    private com.see.truetransact.uicomponent.CLabel lblRenewalRateOfInterest;
    private com.see.truetransact.uicomponent.CLabel lblRenewalSBIntAmt;
    private com.see.truetransact.uicomponent.CLabel lblRenewalSBIntAmtVal;
    private com.see.truetransact.uicomponent.CLabel lblRenewalSBIntRate;
    private com.see.truetransact.uicomponent.CLabel lblRenewalSBIntRateVal;
    private com.see.truetransact.uicomponent.CLabel lblRenewalSBPeriod;
    private com.see.truetransact.uicomponent.CLabel lblRenewalSBPeriodVal;
    private com.see.truetransact.uicomponent.CLabel lblRenewalTotalInterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblRenewalValDepositSubNo;
    private com.see.truetransact.uicomponent.CLabel lblRenewalValPeriodRun;
    private com.see.truetransact.uicomponent.CLabel lblRenewalWithIntNew;
    private com.see.truetransact.uicomponent.CLabel lblRenewalWithdrawingDeposit;
    private com.see.truetransact.uicomponent.CLabel lblRenewalWithdrawingIntAmt;
    private com.see.truetransact.uicomponent.CLabel lblRenewinterest;
    private com.see.truetransact.uicomponent.CLabel lblRenewlaDepositSubNo;
    private com.see.truetransact.uicomponent.CLabel lblSBInterestAmountValue;
    private com.see.truetransact.uicomponent.CLabel lblSBRateOfInterest;
    private com.see.truetransact.uicomponent.CLabel lblSBRateOfInterestValue;
    private com.see.truetransact.uicomponent.CLabel lblSBinterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblSIAccountNo;
    private com.see.truetransact.uicomponent.CLabel lblSIAccountNoValue;
    private com.see.truetransact.uicomponent.CLabel lblSIAmount;
    private com.see.truetransact.uicomponent.CLabel lblSIAmountValue;
    private com.see.truetransact.uicomponent.CLabel lblSICreatedDate;
    private com.see.truetransact.uicomponent.CLabel lblSICreatedDateValue;
    private com.see.truetransact.uicomponent.CLabel lblSIEndDate;
    private com.see.truetransact.uicomponent.CLabel lblSIEndDateValue;
    private com.see.truetransact.uicomponent.CLabel lblSIExecutionCharges;
    private com.see.truetransact.uicomponent.CLabel lblSIExecutionChargesValue;
    private com.see.truetransact.uicomponent.CLabel lblSIFailureCharges;
    private com.see.truetransact.uicomponent.CLabel lblSIFailureChargesValue;
    private com.see.truetransact.uicomponent.CLabel lblSIForwardCount;
    private com.see.truetransact.uicomponent.CLabel lblSIForwardCountValue;
    private com.see.truetransact.uicomponent.CLabel lblSIFrequency;
    private com.see.truetransact.uicomponent.CLabel lblSIFrequencyValue;
    private com.see.truetransact.uicomponent.CLabel lblSINo;
    private com.see.truetransact.uicomponent.CLabel lblSINoValue;
    private com.see.truetransact.uicomponent.CLabel lblSIParticulars;
    private com.see.truetransact.uicomponent.CLabel lblSIParticularsValue;
    private com.see.truetransact.uicomponent.CLabel lblSIProductId;
    private com.see.truetransact.uicomponent.CLabel lblSIProductIdValue;
    private com.see.truetransact.uicomponent.CLabel lblSIProductType;
    private com.see.truetransact.uicomponent.CLabel lblSIProductTypeValue;
    private com.see.truetransact.uicomponent.CLabel lblSIStartDate;
    private com.see.truetransact.uicomponent.CLabel lblSIStartDateValue;
    private com.see.truetransact.uicomponent.CLabel lblSalaryRecovery;
    private com.see.truetransact.uicomponent.CLabel lblSettlementMode;
    private com.see.truetransact.uicomponent.CLabel lblSpace1;
    private com.see.truetransact.uicomponent.CLabel lblSpace17;
    private com.see.truetransact.uicomponent.CLabel lblSpace18;
    private com.see.truetransact.uicomponent.CLabel lblSpace19;
    private com.see.truetransact.uicomponent.CLabel lblSpace2;
    private com.see.truetransact.uicomponent.CLabel lblSpace20;
    private com.see.truetransact.uicomponent.CLabel lblSpace21;
    private com.see.truetransact.uicomponent.CLabel lblSpace22;
    private com.see.truetransact.uicomponent.CLabel lblSpace3;
    private com.see.truetransact.uicomponent.CLabel lblSpace4;
    private com.see.truetransact.uicomponent.CLabel lblSpace5;
    private com.see.truetransact.uicomponent.CLabel lblSpace6;
    private com.see.truetransact.uicomponent.CLabel lblSpace7;
    private com.see.truetransact.uicomponent.CLabel lblSpace8;
    private com.see.truetransact.uicomponent.CLabel lblSpace9;
    private com.see.truetransact.uicomponent.CLabel lblStandingInstruction;
    private com.see.truetransact.uicomponent.CLabel lblState;
    private com.see.truetransact.uicomponent.CLabel lblStatus;
    private com.see.truetransact.uicomponent.CLabel lblStreet;
    private com.see.truetransact.uicomponent.CLabel lblTaxDeductions;
    private com.see.truetransact.uicomponent.CLabel lblTdsAmount;
    private com.see.truetransact.uicomponent.CLabel lblTdsAmountValue;
    private com.see.truetransact.uicomponent.CLabel lblTdsCollectedUpto;
    private com.see.truetransact.uicomponent.CLabel lblTdsDate;
    private com.see.truetransact.uicomponent.CLabel lblTdsDateValue;
    private com.see.truetransact.uicomponent.CLabel lblTdsNo;
    private com.see.truetransact.uicomponent.CLabel lblTdsValue;
    private com.see.truetransact.uicomponent.CLabel lblTotalBalance;
    private com.see.truetransact.uicomponent.CLabel lblTotalBalanceValue;
    private com.see.truetransact.uicomponent.CLabel lblTotalInstallmentReceived;
    private com.see.truetransact.uicomponent.CLabel lblTotalInterest;
    private com.see.truetransact.uicomponent.CLabel lblTotalInterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblTotalInterestPayable;
    private com.see.truetransact.uicomponent.CLabel lblTotalInterestPayableValue;
    private com.see.truetransact.uicomponent.CLabel lblTotalInterestValue;
    private com.see.truetransact.uicomponent.CLabel lblTotalNumberOfInstallments;
    private com.see.truetransact.uicomponent.CLabel lblTransferOutBranch;
    private com.see.truetransact.uicomponent.CLabel lblTransferOutBranchValue;
    private com.see.truetransact.uicomponent.CLabel lblTransferingAmount;
    private com.see.truetransact.uicomponent.CLabel lblTransferingBranchCode;
    private com.see.truetransact.uicomponent.CLabel lblTransferingBranchName;
    private com.see.truetransact.uicomponent.CLabel lblValAgentname;
    private com.see.truetransact.uicomponent.CLabel lblValArea;
    private com.see.truetransact.uicomponent.CLabel lblValBalanceInterestPayable;
    private com.see.truetransact.uicomponent.CLabel lblValCity;
    private com.see.truetransact.uicomponent.CLabel lblValCountry;
    private com.see.truetransact.uicomponent.CLabel lblValCustomerName;
    private com.see.truetransact.uicomponent.CLabel lblValDateOfBirth;
    private com.see.truetransact.uicomponent.CLabel lblValDepositSubNo;
    private com.see.truetransact.uicomponent.CLabel lblValPin;
    private com.see.truetransact.uicomponent.CLabel lblValRenewDep;
    private com.see.truetransact.uicomponent.CLabel lblValState;
    private com.see.truetransact.uicomponent.CLabel lblValStreet;
    private com.see.truetransact.uicomponent.CLabel lblValTransferingBranchName;
    private com.see.truetransact.uicomponent.CLabel lblWeek;
    private com.see.truetransact.uicomponent.CLabel lblWithIntAutoRenewal;
    private com.see.truetransact.uicomponent.CLabel lbldepositPeriodRun;
    private com.see.truetransact.uicomponent.CLabel lbldepositPeriodRunValue;
    private com.see.truetransact.uicomponent.CMenuBar mbrMain;
    private javax.swing.JMenuItem mitAuthorize;
    private javax.swing.JMenuItem mitCancel;
    private javax.swing.JMenuItem mitClose;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JMenuItem mitException;
    private javax.swing.JMenuItem mitNew;
    private javax.swing.JMenuItem mitReject;
    private javax.swing.JMenuItem mitSave;
    private javax.swing.JMenu mnuProcess;
    private com.see.truetransact.uicomponent.CPanel panAccInf;
    private com.see.truetransact.uicomponent.CPanel panAccountInformation;
    private com.see.truetransact.uicomponent.CPanel panAccountInformationLeftPanel;
    private com.see.truetransact.uicomponent.CPanel panAgentId;
    private com.see.truetransact.uicomponent.CPanel panAutoRenewal;
    private com.see.truetransact.uicomponent.CPanel panAutoRenewal1;
    private com.see.truetransact.uicomponent.CPanel panCalenderFreq;
    private com.see.truetransact.uicomponent.CPanel panCategory;
    private com.see.truetransact.uicomponent.CPanel panClosedDetails;
    private com.see.truetransact.uicomponent.CPanel panClosingPosition;
    private com.see.truetransact.uicomponent.CPanel panCustomerId;
    private com.see.truetransact.uicomponent.CPanel panCustomerNO;
    private com.see.truetransact.uicomponent.CPanel panCustomerName;
    private com.see.truetransact.uicomponent.CPanel panCustomerSide;
    private com.see.truetransact.uicomponent.CPanel panCustomerSide1;
    private com.see.truetransact.uicomponent.CPanel panDateOfTransfer;
    private com.see.truetransact.uicomponent.CPanel panDeathClaim;
    private com.see.truetransact.uicomponent.CPanel panDepositDetails;
    private com.see.truetransact.uicomponent.CPanel panDepositDt;
    private com.see.truetransact.uicomponent.CPanel panExistingCustomer;
    private com.see.truetransact.uicomponent.CPanel panExtensionAccountInformation;
    private com.see.truetransact.uicomponent.CPanel panExtensionAdding;
    private com.see.truetransact.uicomponent.CPanel panExtensionAutoRenewal;
    private com.see.truetransact.uicomponent.CPanel panExtensionBtnDepSubNoAcc;
    private com.see.truetransact.uicomponent.CPanel panExtensionCalenderFreq;
    private com.see.truetransact.uicomponent.CPanel panExtensionCustomerNO;
    private com.see.truetransact.uicomponent.CPanel panExtensionDepositDetails;
    private com.see.truetransact.uicomponent.CPanel panExtensionDepositDt;
    private com.see.truetransact.uicomponent.CPanel panExtensionDepositTransDetails;
    private com.see.truetransact.uicomponent.CPanel panExtensionFreqency;
    private com.see.truetransact.uicomponent.CPanel panExtensionInformation;
    private com.see.truetransact.uicomponent.CPanel panExtensionInput;
    private com.see.truetransact.uicomponent.CPanel panExtensionInterestCredit;
    private com.see.truetransact.uicomponent.CPanel panExtensionInterestDetails;
    private com.see.truetransact.uicomponent.CPanel panExtensionMatAlertRep;
    private com.see.truetransact.uicomponent.CPanel panExtensionMaturityDt;
    private com.see.truetransact.uicomponent.CPanel panExtensionPeriodOfDeposit;
    private com.see.truetransact.uicomponent.CPanel panExtensionRateOfInterest;
    private com.see.truetransact.uicomponent.CPanel panExtensionRateOfInterest1;
    private com.see.truetransact.uicomponent.CPanel panExtensionTblDepSubNoAccInfo;
    private com.see.truetransact.uicomponent.CPanel panExtensionTransCustomerNO;
    private com.see.truetransact.uicomponent.CPanel panExtensionWithInterest;
    private com.see.truetransact.uicomponent.CPanel panExtensionWithdrawingInterest;
    private com.see.truetransact.uicomponent.CPanel panExtensionwithdrawing;
    private com.see.truetransact.uicomponent.CPanel panFreqency;
    private com.see.truetransact.uicomponent.CPanel panInput;
    private com.see.truetransact.uicomponent.CPanel panIntBranchTransferNo;
    private com.see.truetransact.uicomponent.CPanel panInterBranchFunds;
    private com.see.truetransact.uicomponent.CPanel panInterestCredit;
    private com.see.truetransact.uicomponent.CPanel panIntpayable;
    private com.see.truetransact.uicomponent.CPanel panJointAcctButton;
    private com.see.truetransact.uicomponent.CPanel panJointAcctButton1;
    private com.see.truetransact.uicomponent.CPanel panJointAcctHolder;
    private com.see.truetransact.uicomponent.CPanel panLastIntCalDt;
    private com.see.truetransact.uicomponent.CPanel panLastInterestCalculatedDate;
    private com.see.truetransact.uicomponent.CPanel panLienLoanDetails1;
    private com.see.truetransact.uicomponent.CPanel panMatAlertRep;
    private com.see.truetransact.uicomponent.CPanel panMatAlertRep1;
    private com.see.truetransact.uicomponent.CPanel panMaturityDt;
    private com.see.truetransact.uicomponent.CPanel panMobileBanking;
    private com.see.truetransact.uicomponent.CPanel panModeOfOpening;
    private com.see.truetransact.uicomponent.CPanel panNewBtnDepSubNoAcc;
    private com.see.truetransact.uicomponent.CPanel panNewCustomerNO;
    private com.see.truetransact.uicomponent.CPanel panNewDepositDetails;
    private com.see.truetransact.uicomponent.CPanel panNewInput;
    private com.see.truetransact.uicomponent.CPanel panNewPeriodOfDeposit;
    private com.see.truetransact.uicomponent.CPanel panNewTblDepSubNoAccInfo;
    private com.see.truetransact.uicomponent.CPanel panOpenMode;
    private com.see.truetransact.uicomponent.CPanel panPeriodOfDeposit;
    private com.see.truetransact.uicomponent.CPanel panPresentPosition;
    private com.see.truetransact.uicomponent.CPanel panPresentPositionDetails;
    private com.see.truetransact.uicomponent.CPanel panRenewalAccountInformation;
    private com.see.truetransact.uicomponent.CPanel panRenewalAdding;
    private com.see.truetransact.uicomponent.CPanel panRenewalCalenderFreq;
    private com.see.truetransact.uicomponent.CPanel panRenewalDepTransCustomerNO;
    private com.see.truetransact.uicomponent.CPanel panRenewalDepositDt;
    private com.see.truetransact.uicomponent.CPanel panRenewalDepositTransDetails;
    private com.see.truetransact.uicomponent.CPanel panRenewalFreqency;
    private com.see.truetransact.uicomponent.CPanel panRenewalInformation;
    private com.see.truetransact.uicomponent.CPanel panRenewalInterestCredit;
    private com.see.truetransact.uicomponent.CPanel panRenewalInterestCustomerNO;
    private com.see.truetransact.uicomponent.CPanel panRenewalInterestDetails;
    private com.see.truetransact.uicomponent.CPanel panRenewalMaturityDt;
    private com.see.truetransact.uicomponent.CPanel panRenewalWithdrawingInterest;
    private com.see.truetransact.uicomponent.CPanel panRenewalwithdrawing;
    private com.see.truetransact.uicomponent.CPanel panSIDebitDetails;
    private com.see.truetransact.uicomponent.CPanel panSIDetails;
    private com.see.truetransact.uicomponent.CPanel panSISchedule;
    private com.see.truetransact.uicomponent.CPanel panSISchedule2;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecovery;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecovery1;
    private com.see.truetransact.uicomponent.CPanel panStandingInstruction;
    private com.see.truetransact.uicomponent.CPanel panStandingInstructionDetails;
    private com.see.truetransact.uicomponent.CPanel panStatus;
    private com.see.truetransact.uicomponent.CPanel panTDSCollUpto;
    private com.see.truetransact.uicomponent.CPanel panTermDeposit;
    private com.see.truetransact.uicomponent.CPanel panTranBranCode;
    private com.see.truetransact.uicomponent.CPanel panTranBrancName;
    private com.see.truetransact.uicomponent.CPanel panTransInDet;
    private com.see.truetransact.uicomponent.CPanel panTransaction;
    private com.see.truetransact.uicomponent.CPanel panTransferInDetails;
    private com.see.truetransact.uicomponent.CPanel panTransferingBranchCode;
    private com.see.truetransact.uicomponent.CPanel panWeek;
    private com.see.truetransact.uicomponent.CPanel panWithInterest;
    private com.see.truetransact.uicomponent.CPanel panWithInterest1;
    private com.see.truetransact.uicomponent.CButtonGroup rdgAutoRenewal;
    private com.see.truetransact.uicomponent.CButtonGroup rdgCalenderFreq;
    private com.see.truetransact.uicomponent.CButtonGroup rdgDeathClaim;
    private com.see.truetransact.uicomponent.CButtonGroup rdgExtensionAdding;
    private com.see.truetransact.uicomponent.CButtonGroup rdgExtensionAutoRenewal;
    private com.see.truetransact.uicomponent.CButtonGroup rdgExtensionCalenderFreq;
    private com.see.truetransact.uicomponent.CButtonGroup rdgExtensionInterest;
    private com.see.truetransact.uicomponent.CButtonGroup rdgExtensionMatAlertReport;
    private com.see.truetransact.uicomponent.CButtonGroup rdgExtensionWithIntRenewal;
    private com.see.truetransact.uicomponent.CButtonGroup rdgExtensionWithdrawing;
    private com.see.truetransact.uicomponent.CButtonGroup rdgLock;
    private com.see.truetransact.uicomponent.CButtonGroup rdgMatAlertReport;
    private com.see.truetransact.uicomponent.CButtonGroup rdgOpeningMode;
    private com.see.truetransact.uicomponent.CButtonGroup rdgRenewalAdding;
    private com.see.truetransact.uicomponent.CButtonGroup rdgRenewalAutoRenewal;
    private com.see.truetransact.uicomponent.CButtonGroup rdgRenewalCalenderFreq;
    private com.see.truetransact.uicomponent.CButtonGroup rdgRenewalInterest;
    private com.see.truetransact.uicomponent.CButtonGroup rdgRenewalMatAlertReport;
    private com.see.truetransact.uicomponent.CButtonGroup rdgRenewalWithIntRenewal;
    private com.see.truetransact.uicomponent.CButtonGroup rdgRenewalWithdrawing;
    private com.see.truetransact.uicomponent.CButtonGroup rdgSalaryRecovery;
    private com.see.truetransact.uicomponent.CButtonGroup rdgStandingInstruciton;
    private com.see.truetransact.uicomponent.CButtonGroup rdgWithIntRenewal;
    private com.see.truetransact.uicomponent.CRadioButton rdoAutoRenewal_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoAutoRenewal_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoCalender_Freq_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoCalender_Freq_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoDeathClaim_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoDeathClaim_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoExistingCustomer_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoExistingCustomer_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionAutoRenewal_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionAutoRenewal_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionCalender_Freq_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionCalender_Freq_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionMatAlertReport_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionMatAlertReport_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionWithIntAutoRenewal_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionWithIntAutoRenewal_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionWithdrawingInt_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionWithdrawingInt_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionWithdrawing_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionWithdrawing_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionofPrematureClosure_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoExtensionofPrematureClosure_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoMatAlert_report_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoMatAlert_report_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoOpeningMode_Multiple;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalAdding_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalAdding_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalAutoRenewal_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalAutoRenewal_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalCalender_Freq_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalCalender_Freq_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalMatAlert_report_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalMatAlert_report_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalWith_intRenewal_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalWith_intRenewal_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalWithdrawingInt_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalWithdrawingInt_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalWithdrawing_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewalWithdrawing_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoSalaryRecovery_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoSalaryRecovery_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoStandingInstruction_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoStandingInstruction_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoWith_intRenewal_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoWith_intRenewal_Yes;
    private javax.swing.JSeparator sptCancel;
    private javax.swing.JSeparator sptDelete;
    private javax.swing.JSeparator sptException;
    private com.see.truetransact.uicomponent.CScrollPane srpJointAcctHolder;
    private com.see.truetransact.uicomponent.CScrollPane srpLien;
    private com.see.truetransact.uicomponent.CScrollPane srpTblExtensionDepSubNoAccInfo;
    private com.see.truetransact.uicomponent.CScrollPane srpTblRenewalDepSubNoAccInfo;
    private com.see.truetransact.uicomponent.CTabbedPane tabTermDeposit;
    private com.see.truetransact.uicomponent.CTable tblExtensionDepSubNoAccInfo;
    private com.see.truetransact.uicomponent.CTable tblJointAcctHolder;
    private com.see.truetransact.uicomponent.CTable tblLien;
    private com.see.truetransact.uicomponent.CTable tblRenewalDepSubNoAccInfo;
    private javax.swing.JToolBar tbrTermDeposit;
    private com.see.truetransact.uicomponent.CDateField tdtCalenderFreqDate;
    private com.see.truetransact.uicomponent.CDateField tdtDateOfDeposit;
    private com.see.truetransact.uicomponent.CDateField tdtDateOfTransfer;
    private com.see.truetransact.uicomponent.CDateField tdtExtensionDateOfDeposit;
    private com.see.truetransact.uicomponent.CDateField tdtExtensionMaturityDate;
    private com.see.truetransact.uicomponent.CDateField tdtLastInstallmentReceivedDate;
    private com.see.truetransact.uicomponent.CDateField tdtLastInterestCalculatedDate;
    private com.see.truetransact.uicomponent.CDateField tdtMaturityDate;
    private com.see.truetransact.uicomponent.CDateField tdtMobileSubscribedFrom;
    private com.see.truetransact.uicomponent.CDateField tdtOriginalDateOfDeposit;
    private com.see.truetransact.uicomponent.CDateField tdtRenewalDateOfDeposit;
    private com.see.truetransact.uicomponent.CDateField tdtRenewalMaturityDate;
    private com.see.truetransact.uicomponent.CDateField tdtTdsCollectedUpto;
    private com.see.truetransact.uicomponent.CTextField txtAgentId;
    private com.see.truetransact.uicomponent.CTextField txtAmount;
    public static com.see.truetransact.uicomponent.CTextField txtCustomerId;
    private com.see.truetransact.uicomponent.CTextField txtCustomerIdCr;
    private com.see.truetransact.uicomponent.CTextField txtDepositAmount;
    private com.see.truetransact.uicomponent.CTextField txtDepositsOpened;
    private com.see.truetransact.uicomponent.CTextField txtDepsoitNo;
    private com.see.truetransact.uicomponent.CTextField txtEditDepositNo;
    private com.see.truetransact.uicomponent.CTextField txtExistingAcctNo;
    private com.see.truetransact.uicomponent.CTextField txtExtensionCustomerIdCr;
    private com.see.truetransact.uicomponent.CTextField txtExtensionDepTransAmtValue;
    private com.see.truetransact.uicomponent.CTextField txtExtensionDepositAmount;
    private com.see.truetransact.uicomponent.CTextField txtExtensionMaturityAmount;
    private com.see.truetransact.uicomponent.CTextField txtExtensionPeriodOfDeposit_Days;
    private com.see.truetransact.uicomponent.CTextField txtExtensionPeriodOfDeposit_Months;
    private com.see.truetransact.uicomponent.CTextField txtExtensionPeriodOfDeposit_Years;
    private com.see.truetransact.uicomponent.CTextField txtExtensionPeriodicInterestAmount;
    private com.see.truetransact.uicomponent.CTextField txtExtensionPrintedOption;
    private com.see.truetransact.uicomponent.CTextField txtExtensionRateOfInterest;
    private com.see.truetransact.uicomponent.CTextField txtExtensionTotalInterestAmount;
    private com.see.truetransact.uicomponent.CTextField txtExtensionTransAmtValue;
    private com.see.truetransact.uicomponent.CTextField txtExtensionTransCustomerIdCr;
    private com.see.truetransact.uicomponent.CTextField txtExtensionTransTokenNo;
    private com.see.truetransact.uicomponent.CTextField txtInterBranchTransferNo;
    private com.see.truetransact.uicomponent.CTextField txtInterestPaid;
    private com.see.truetransact.uicomponent.CTextField txtInterestProvidedAmount;
    private com.see.truetransact.uicomponent.CTextField txtLastTdsCollected;
    private com.see.truetransact.uicomponent.CTextField txtMaturityAmount;
    private com.see.truetransact.uicomponent.CTextField txtMobileNo;
    private com.see.truetransact.uicomponent.CTextField txtNextAccNo;
    private com.see.truetransact.uicomponent.CTextField txtNextAccntNo;
    private com.see.truetransact.uicomponent.CTextField txtOriginalAccountNumber;
    private com.see.truetransact.uicomponent.CTextField txtPanNumber;
    private com.see.truetransact.uicomponent.CTextField txtPeriodOfDeposit_Days;
    private com.see.truetransact.uicomponent.CTextField txtPeriodOfDeposit_Months;
    private com.see.truetransact.uicomponent.CTextField txtPeriodOfDeposit_Years;
    private com.see.truetransact.uicomponent.CTextField txtPeriodicInterestAmount;
    private com.see.truetransact.uicomponent.CTextField txtPrintedNoOfTheFdr;
    private com.see.truetransact.uicomponent.CTextField txtPrintedOption;
    private com.see.truetransact.uicomponent.CTextField txtRateOfInterest;
    private javax.swing.JTextField txtReferenceNo;
    private com.see.truetransact.uicomponent.CTextField txtRemarks;
    private com.see.truetransact.uicomponent.CTextField txtRenewPostageAmt;
    private com.see.truetransact.uicomponent.CTextField txtRenewalCustomerIdCr;
    private com.see.truetransact.uicomponent.CTextField txtRenewalDepCustomerIdCr;
    private com.see.truetransact.uicomponent.CTextField txtRenewalDepTransAmtValue;
    private com.see.truetransact.uicomponent.CTextField txtRenewalDepTransTokenNo;
    private com.see.truetransact.uicomponent.CTextField txtRenewalDepositAmount;
    private com.see.truetransact.uicomponent.CTextField txtRenewalIntAmtValue;
    private com.see.truetransact.uicomponent.CTextField txtRenewalIntCustomerIdCr;
    private com.see.truetransact.uicomponent.CTextField txtRenewalIntTokenNoVal;
    private com.see.truetransact.uicomponent.CTextField txtRenewalMaturityAmount;
    private com.see.truetransact.uicomponent.CTextField txtRenewalPeriodOfDeposit_Days;
    private com.see.truetransact.uicomponent.CTextField txtRenewalPeriodOfDeposit_Months;
    private com.see.truetransact.uicomponent.CTextField txtRenewalPeriodOfDeposit_Years;
    private com.see.truetransact.uicomponent.CTextField txtRenewalPeriodicInterestAmount;
    private com.see.truetransact.uicomponent.CTextField txtRenewalPrintedOption;
    private com.see.truetransact.uicomponent.CTextField txtRenewalRateOfInterest;
    private com.see.truetransact.uicomponent.CTextField txtRenewalTotalInterestAmount;
    private com.see.truetransact.uicomponent.CTextField txtTotalInstallmentReceived;
    private com.see.truetransact.uicomponent.CTextField txtTotalInterestAmount;
    private com.see.truetransact.uicomponent.CTextField txtTotalNumberOfInstallments;
    private com.see.truetransact.uicomponent.CTextField txtTransferingAmount;
    private com.see.truetransact.uicomponent.CTextField txtTransferingBranchCode;
    private com.see.truetransact.uicomponent.CTextField txtWeek;
    private com.see.truetransact.uicomponent.CTextField txtpostageAmt;
    // End of variables declaration//GEN-END:variables
    private void enableFields(boolean change) {
    cboCategory.setEnabled(change);
    txtPeriodOfDeposit_Years.setEnabled(change);
    txtPeriodOfDeposit_Months.setEnabled(change);
    txtPeriodOfDeposit_Days.setEnabled(change);
    }
}
