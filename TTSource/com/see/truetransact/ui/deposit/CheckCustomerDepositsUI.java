/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.  
 * 
 * CheckCustomerDepositsUI.java
 */

package com.see.truetransact.ui.deposit;


import com.see.truetransact.clientproxy.ProxyParameters;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.clientutil.*;
import com.see.truetransact.clientutil.ttrintegration.TTIntegration;
import com.see.truetransact.ui.TrueTransactMain;
import com.see.truetransact.ui.customer.CheckCustomerIdUI;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.uicomponent.CTable;
import com.see.truetransact.uivalidation.NumericValidation;
import java.awt.Dimension;
import java.awt.Toolkit;

import java.util.*;

/**
 *
 * @author nithya
 */

public class CheckCustomerDepositsUI extends com.see.truetransact.uicomponent.CInternalFrame implements Observer{
   
    final ArrayList custTitle = new ArrayList();
    public HashMap sourceMap;
    CInternalFrame parent = null;
    private CTable _tblData;
    private ArrayList _heading;
    private HashMap dataHash;
    private ArrayList data;
    private boolean _isAvailable = true;
    HashMap branchMap = new HashMap();
    
    public CheckCustomerDepositsUI() {
        initForm();
    }
  
    public CheckCustomerDepositsUI(CInternalFrame parent, HashMap map){
        if (sourceMap == null) {
            sourceMap = new HashMap();
        }
        sourceMap.putAll(map);
        this.parent = parent;
        initForm();
        show();
    }
    private void initForm() {
        initComponents();
        setMaxLengths();
        setupScreen();
        branchMap = TrueTransactMain.BRANCHINFO;
        txtBranchCode.setText(CommonUtil.convertObjToStr(branchMap.get("BRANCH_CODE")));
        lblBranchName.setText(CommonUtil.convertObjToStr(branchMap.get("BRANCH_NAME")));
        cboSearchCriteria.setModel(new javax.swing.DefaultComboBoxModel(new String[]{" ", "Starts with", "Ends with", "Exact Match"}));
        cboStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[]{" ", "New", "Closed"}));        
        cboJointCustSearchCrieteria.setModel(new javax.swing.DefaultComboBoxModel(new String[]{" ", "Starts with", "Ends with", "Exact Match"}));        
    }
 
     private void setMaxLengths() {    
        
        txtMemberNo.setAllowAll(true);        
        txtCustomerId.setAllowAll(true);
        txtBranchCode.setAllowNumber(true);
        
     }  
   
      public void insertCustTableRecords(HashMap hash) {
          
          if(hash.containsKey("CUSTOMER ID")){
            txtCustomerId.setText(hash.get("CUSTOMER ID").toString());
          }
          
     }
     private void setupScreen() {       
                
        /*
         * Calculate the screen size
         */
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        /*
         * Center frame on the screen
         */
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dlgMajorHead = new com.see.truetransact.uicomponent.CDialog();
        srpMajorHead = new com.see.truetransact.uicomponent.CScrollPane();
        tblMajorHead = new com.see.truetransact.uicomponent.CTable();
        panSearchDetails = new com.see.truetransact.uicomponent.CPanel();
        lblCustomerId = new com.see.truetransact.uicomponent.CLabel();
        lblCustomerName = new com.see.truetransact.uicomponent.CLabel();
        lblHouseName = new com.see.truetransact.uicomponent.CLabel();
        lblMemberNo = new com.see.truetransact.uicomponent.CLabel();
        txtCustomerId = new com.see.truetransact.uicomponent.CTextField();
        txtCustomerName = new com.see.truetransact.uicomponent.CTextField();
        txtHouseName = new com.see.truetransact.uicomponent.CTextField();
        txtMemberNo = new com.see.truetransact.uicomponent.CTextField();
        cboSearchCriteria = new com.see.truetransact.uicomponent.CComboBox();
        lblBranchCode = new com.see.truetransact.uicomponent.CLabel();
        lblFromDt = new com.see.truetransact.uicomponent.CLabel();
        lblToDt = new com.see.truetransact.uicomponent.CLabel();
        lblStatus = new com.see.truetransact.uicomponent.CLabel();
        lblAmountRange = new com.see.truetransact.uicomponent.CLabel();
        tdtFromDt = new com.see.truetransact.uicomponent.CDateField();
        tdtToDt = new com.see.truetransact.uicomponent.CDateField();
        cboStatus = new com.see.truetransact.uicomponent.CComboBox();
        btnSearch = new com.see.truetransact.uicomponent.CButton();
        btnClear = new com.see.truetransact.uicomponent.CButton();
        txtBranchCode = new com.see.truetransact.uicomponent.CTextField();
        srpSearchDisplayPane = new com.see.truetransact.uicomponent.CScrollPane();
        tblDepositDetails = new com.see.truetransact.uicomponent.CTable();
        chkSelectAll = new com.see.truetransact.uicomponent.CCheckBox();
        txtFromAmount = new com.see.truetransact.uicomponent.CTextField();
        lblFrom = new com.see.truetransact.uicomponent.CLabel();
        lblTo = new com.see.truetransact.uicomponent.CLabel();
        txtToAmount = new com.see.truetransact.uicomponent.CTextField();
        lblBranchName = new com.see.truetransact.uicomponent.CLabel();
        btnCustomerIdFileOpen = new com.see.truetransact.uicomponent.CButton();
        cLabel1 = new com.see.truetransact.uicomponent.CLabel();
        txtJointCustomerName = new com.see.truetransact.uicomponent.CTextField();
        cboJointCustSearchCrieteria = new com.see.truetransact.uicomponent.CComboBox();
        btnReport = new com.see.truetransact.uicomponent.CButton();
        btnCancel = new com.see.truetransact.uicomponent.CButton();
        btnClear1 = new com.see.truetransact.uicomponent.CButton();

        dlgMajorHead.getContentPane().setLayout(new java.awt.GridBagLayout());

        tblMajorHead.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Major Head Code", "Major Head Name"
            }
        ));
        srpMajorHead.setViewportView(tblMajorHead);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dlgMajorHead.getContentPane().add(srpMajorHead, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Check Customer Deposits");
        setMinimumSize(new java.awt.Dimension(730, 114));

        lblCustomerId.setText("Customer ID");

        lblCustomerName.setText("Customer Name");

        lblHouseName.setText("Address");

        lblMemberNo.setText("Member No");

        txtCustomerId.setAllowNumber(true);

        txtMemberNo.setAllowNumber(true);

        cboSearchCriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSearchCriteriaActionPerformed(evt);
            }
        });

        lblBranchCode.setText("Branch Code");

        lblFromDt.setText("From Date");

        lblToDt.setText("To Date");

        lblStatus.setText("Status");

        lblAmountRange.setText("Amount Range");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtBranchCode.setAllowNumber(true);
        txtBranchCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBranchCodeFocusLost(evt);
            }
        });

        srpSearchDisplayPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        srpSearchDisplayPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tblDepositDetails.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tblDepositDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select", "Customer ID", "Member No", "Name", "House Name", "Deposit No", "Amount", "Deposit Date", "Due Date", "Closed Date", "Last Int Calc dt", "Interest Amount", "Tot Int Drawn"
            }
        ));
        tblDepositDetails.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblDepositDetails.setPreferredScrollableViewportSize(new java.awt.Dimension(794, 246));
        srpSearchDisplayPane.setViewportView(tblDepositDetails);

        chkSelectAll.setText("Select All");
        chkSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSelectAllActionPerformed(evt);
            }
        });

        txtFromAmount.setAllowNumber(true);

        lblFrom.setText("From");

        lblTo.setText("To");

        txtToAmount.setAllowNumber(true);

        btnCustomerIdFileOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnCustomerIdFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomerIdFileOpenActionPerformed(evt);
            }
        });

        cLabel1.setText("Joint Customer Name");

        cboJointCustSearchCrieteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboJointCustSearchCrieteriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panSearchDetailsLayout = new javax.swing.GroupLayout(panSearchDetails);
        panSearchDetails.setLayout(panSearchDetailsLayout);
        panSearchDetailsLayout.setHorizontalGroup(
            panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panSearchDetailsLayout.createSequentialGroup()
                .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panSearchDetailsLayout.createSequentialGroup()
                        .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(panSearchDetailsLayout.createSequentialGroup()
                                .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panSearchDetailsLayout.createSequentialGroup()
                                        .addGap(85, 85, 85)
                                        .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblMemberNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblHouseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panSearchDetailsLayout.createSequentialGroup()
                                                .addComponent(txtHouseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblToDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panSearchDetailsLayout.createSequentialGroup()
                                                .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(cboSearchCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblFromDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panSearchDetailsLayout.createSequentialGroup()
                                                .addComponent(txtCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnCustomerIdFileOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(142, 142, 142)
                                                .addComponent(lblBranchCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panSearchDetailsLayout.createSequentialGroup()
                                                .addComponent(txtMemberNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(panSearchDetailsLayout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(chkSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18))
                            .addGroup(panSearchDetailsLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(cLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtJointCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cboJointCustSearchCrieteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblAmountRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)))
                        .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tdtFromDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tdtToDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panSearchDetailsLayout.createSequentialGroup()
                                .addComponent(txtBranchCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblBranchName, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(panSearchDetailsLayout.createSequentialGroup()
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panSearchDetailsLayout.createSequentialGroup()
                                    .addComponent(txtFromAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtToAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panSearchDetailsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(srpSearchDisplayPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panSearchDetailsLayout.setVerticalGroup(
            panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panSearchDetailsLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCustomerIdFileOpen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBranchCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtBranchCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBranchName, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblFromDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cboSearchCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tdtFromDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panSearchDetailsLayout.createSequentialGroup()
                        .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHouseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHouseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblToDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMemberNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMemberNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panSearchDetailsLayout.createSequentialGroup()
                                .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblAmountRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFromAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtToAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtJointCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cboJointCustSearchCrieteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panSearchDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(chkSelectAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(tdtToDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(srpSearchDisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        btnReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_REPORT.gif"))); // NOI18N
        btnReport.setText("Report");
        btnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportActionPerformed(evt);
            }
        });

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CLOSE.gif"))); // NOI18N
        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnClear1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CANCEL.gif"))); // NOI18N
        btnClear1.setText("Clear");
        btnClear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClear1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panSearchDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(340, 340, 340)
                        .addComponent(btnReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panSearchDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void clearAllTableData() {
        
        TableModel custModel = new TableModel(new ArrayList(), custTitle);
        tblDepositDetails.setModel(custModel);    
        
     }
    
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
       
        clearAllTableData();       
        HashMap where = new HashMap();
        HashMap viewMap = new HashMap();
        String custID = CommonUtil.convertObjToStr(txtCustomerId.getText());
        String CustName = CommonUtil.convertObjToStr(txtCustomerName.getText());
        String houseName = CommonUtil.convertObjToStr(txtHouseName.getText());
        String memberNo = CommonUtil.convertObjToStr(txtMemberNo.getText());
        String branchID = CommonUtil.convertObjToStr(txtBranchCode.getText());
        Date fromDate = DateUtil.getDateMMDDYYYY(tdtFromDt.getDateValue());
        Date toDate = DateUtil.getDateMMDDYYYY(tdtToDt.getDateValue());
        String searchCrieteria = CommonUtil.convertObjToStr(cboSearchCriteria.getSelectedItem());        
        String jointCustSearchCrieteria = CommonUtil.convertObjToStr(cboJointCustSearchCrieteria.getSelectedItem());
        String jointCustName = CommonUtil.convertObjToStr(txtJointCustomerName.getText());
        String status = CommonUtil.convertObjToStr(cboStatus.getSelectedItem());      
        Double fromAmount = CommonUtil.convertObjToDouble(txtFromAmount.getText());
        Double toAmount = CommonUtil.convertObjToDouble(txtToAmount.getText());
                
        viewMap.put(CommonConstants.MAP_NAME,"getSelectCustDepositDetails");
        
        if(custID.length() > 0){
            where.put("CUST_ID",custID.toUpperCase());
        }
        if(CustName.length() > 0){
            where.put("FNAME",CustName.toUpperCase());
        }
        if(houseName.length() > 0){
            where.put("ADDRESS", houseName.toUpperCase());
        }
        if (memberNo.length() > 0) {
            where.put("MEMBER_NO", memberNo);
        }
        if (branchID.length() > 0) {
            where.put("BRANCH_CODE", branchID);
        }
        if (tdtFromDt.getDateValue().length() > 0) {
            where.put("FROM_DATE", DateUtil.getDateMMDDYYYY(tdtFromDt.getDateValue()));
        } 
        if (tdtToDt.getDateValue().length() > 0) {
            where.put("TO_DATE", DateUtil.getDateMMDDYYYY(tdtToDt.getDateValue()));
        } 
        if (searchCrieteria.length() > 0 && searchCrieteria.equalsIgnoreCase("Starts with")) {
            where.put("STARTSWITH", searchCrieteria);
        }
        if (searchCrieteria.length() > 0 && searchCrieteria.equalsIgnoreCase("Ends with")) {
            where.put("ENDSWITH", searchCrieteria);
        }
        if (searchCrieteria.length() > 0 && searchCrieteria.equalsIgnoreCase("Exact Match")) {
            where.put("EXACTMATCH", searchCrieteria);
        }      
        if (CustName.length() > 0 && searchCrieteria.length() == 0) {
            where.put("ALL", "");
        }
        if(status.length() > 0){
            where.put("STATUS" , status);
        }
        if(fromAmount > 0){
            where.put("FROM_AMOUNT",fromAmount);
        }        
        if(toAmount > 0){
            where.put("TO_AMOUNT",toAmount);
        }    
        
        System.out.println("search crieteria :"+searchCrieteria);        
        
        if(jointCustName.length() > 0){
            where.put("JOINT_CUST_NAME",jointCustName.toUpperCase());
        }
        if (jointCustSearchCrieteria.length() > 0 && jointCustSearchCrieteria.equalsIgnoreCase("Starts with")) {
            where.put("JOINT_CUST_STARTSWITH", jointCustSearchCrieteria);
        }
        if (jointCustSearchCrieteria.length() > 0 && jointCustSearchCrieteria.equalsIgnoreCase("Ends with")) {
            where.put("JOINT_CUST_ENDSWITH", jointCustSearchCrieteria);
        }
        if (jointCustSearchCrieteria.length() > 0 && jointCustSearchCrieteria.equalsIgnoreCase("Exact Match")) {
            where.put("JOINT_CUST_EXACTMATCH", jointCustSearchCrieteria);
        }      
        if (jointCustName.length() > 0 && jointCustSearchCrieteria.length() == 0) {
            where.put("JOINT_CUST_ALL", "");
        }
        System.out.println("joint cust search crieteria where:"+where);
        
        if (where.isEmpty()) {
            ClientUtil.showMessageWindow("Please Enter Atleast One Field Value Along With Branch Code !!!");
            return;
        }
        else {
            try {
                if (branchID.length() > 0) {
                    if (!(memberNo.length()>0)) {           // if condition added by shihad on 04-11-2014
                        where.put("BRANCH_ID", branchID);    //Added By Kannan
                    }
                }
                if (sourceMap != null && sourceMap.size() > 0) {
                    if (sourceMap.containsKey("CUST_TYPE")) {
                        where.put("CUST_TYPE", "INDIVIDUAL");
                    }
                    if (sourceMap.containsKey("CUST_TYPE_NOT_INDIVIDUAL")) {
                        where.put("CUST_TYPE_NOT_INDIVIDUAL", "CUST_TYPE_NOT_INDIVIDUAL");
                    }
                    if (sourceMap.containsKey("DEATH_MARKING")) {
                        where.put("DEATH_MARKING", "DEATH_MARKING");
                    }
                    if (sourceMap.containsKey("SECURITY")) {
                        where.put("SECURITY", "SECURITY");
                    }
                    if (sourceMap.containsKey("GAHAN_CUSTOMER")) {
                        where.put("SHARE_ACCT", "SHARE_ACCT");
                    }
                    if (sourceMap.containsKey("AGENT")) {
                        where.put("AGENT", "AGENT");
                    }
                    if (sourceMap.containsKey("AGENT_ID")) {
                        where.put("AGENT_ID", "AGENT_ID");
                    }
                    if (sourceMap.containsKey("SHARE_ACCT")) {
                        where.put("SHARE_ACCT", "SHARE_ACCT");
                    }
                    if (sourceMap.containsKey("SHARE_ACCT_NEW")) {
                        where.put("SHARE_ACCT_NEW", "SHARE_ACCT_NEW");
                    }
                }
                viewMap.put(CommonConstants.MAP_WHERE, where);
                populateData(viewMap, tblDepositDetails);
                tblDepositDetails.getColumnModel().getColumn(14).setPreferredWidth(280);
                tblDepositDetails.getColumnModel().getColumn(15).setPreferredWidth(320);
                tblDepositDetails.getColumnModel().getColumn(5).setPreferredWidth(100);
            } catch (Exception e) {
                System.err.println("Exception " + e.toString() + "Caught");
                e.printStackTrace();
            }
            viewMap = null;
            where = null;
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void chkSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSelectAllActionPerformed
        // TODO add your handling code here: 
        
        if(chkSelectAll.isSelected() == true){
            for(int i=0; i<tblDepositDetails.getRowCount(); i++){
                tblDepositDetails.setValueAt(new Boolean(true), i, 0);
            }
        } else if(chkSelectAll.isSelected() == false){
            for(int i=0; i<tblDepositDetails.getRowCount();i++){
                tblDepositDetails.setValueAt(new Boolean(false), i, 0);
            }
        }
        
    }//GEN-LAST:event_chkSelectAllActionPerformed

    private void cboSearchCriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSearchCriteriaActionPerformed
        // TODO add your handling code here:
        if (txtCustomerName.getText().length() <= 0 && cboSearchCriteria.getSelectedIndex() > 0) {
            ClientUtil.showMessageWindow("Please Enter Customer Name !!!");
            cboSearchCriteria.setSelectedIndex(0);
            return;
        }
    }//GEN-LAST:event_cboSearchCriteriaActionPerformed

    private void btnClear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClear1ActionPerformed

        txtCustomerId.setText("");
        txtCustomerName.setText("");
        txtHouseName.setText("");
        txtMemberNo.setText("");
        txtFromAmount.setText("");
        txtToAmount.setText("");
        lblBranchName.setText("");
        ClientUtil.clearAll(this);
        
    }//GEN-LAST:event_btnClear1ActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        btnClear1ActionPerformed(null);
        txtBranchCode.setText(CommonUtil.convertObjToStr(branchMap.get("BRANCH_CODE")));
        lblBranchName.setText(CommonUtil.convertObjToStr(branchMap.get("BRANCH_NAME")));
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportActionPerformed
        // TODO add your handling code here:
        
        int depositCount = 0;
        int depositSelectCount = 0;
        HashMap newDepositMap;
        String depositId = "";
        ArrayList depositArrayList = new ArrayList();
        depositCount = tblDepositDetails.getRowCount();
        if(depositCount > 0){
            for(int i=0; i<depositCount; i++){
               String isSelected = CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(i,0)) ;
               if(isSelected.equalsIgnoreCase("TRUE")){
                  depositSelectCount++;
                  newDepositMap = new HashMap();
                  newDepositMap.put("DEPOSIT",CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(i, 5)));
                  if(depositSelectCount == 1){
                      depositId = "'" + CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(i, 5)) + "'";
                  }else{
                     depositId += "," + "'" + CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(i, 5)) + "'";
                  }
                  //depositArrayList.add(newDepositMap);
               }
            }
        }
          System.out.println("deposit Id " + depositId) ;
          print(depositId);
//        System.out.println("depositArrayList count:" + depositArrayList.size());
//        System.out.println("depositArrayList :" + depositArrayList);        
        
    }//GEN-LAST:event_btnReportActionPerformed

     private void print(String depositId) {
         
         TTIntegration ttIntgration = null;
         HashMap paramMap = new HashMap();         
         paramMap.put("depositId", depositId);
         ttIntgration.setParam(paramMap);
         ttIntgration.integrationForPrint("Deposit_Details", true);
         
     }
    
    private void txtBranchCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBranchCodeFocusLost
        // TODO add your handling code here:
        
        if (txtBranchCode.getText().length() > 0) {
            HashMap dataMap = new HashMap();
            dataMap.put("BRANCH_CODE", CommonUtil.convertObjToStr(txtBranchCode.getText()));
            List lst = ClientUtil.executeQuery("getDisplayRegionalOffice", dataMap);

            if (lst != null && lst.size() > 0) {
                dataMap = (HashMap) lst.get(0);
                lblBranchName.setText(CommonUtil.convertObjToStr(dataMap.get("BRANCH NAME")));
            } else {
                ClientUtil.displayAlert("Invalid Branch Code");
                txtBranchCode.setText("");
                lblBranchName.setText("Branch Name");
                return;
            }
        } else {
            lblBranchName.setText("Branch Name");
            return;
        }
        
    }//GEN-LAST:event_txtBranchCodeFocusLost

    private void btnCustomerIdFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomerIdFileOpenActionPerformed
        // TODO add your handling code here:
        new CheckCustomerIdUI(this);
    }//GEN-LAST:event_btnCustomerIdFileOpenActionPerformed
    
    private void cboJointCustSearchCrieteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboJointCustSearchCrieteriaActionPerformed
        // TODO add your handling code here:
          if (txtJointCustomerName.getText().length() <= 0 && cboJointCustSearchCrieteria.getSelectedIndex() > 0) {
            ClientUtil.showMessageWindow("Please Enter Joint Customer Name !!!");
            cboJointCustSearchCrieteria.setSelectedIndex(0);
            return;
        }
    }//GEN-LAST:event_cboJointCustSearchCrieteriaActionPerformed
    
    public ArrayList populateData(HashMap whereMap, CTable tblData) {
      
        _tblData = tblData;
        if (!whereMap.containsKey(CommonConstants.BRANCH_ID)) { 
            whereMap.put(CommonConstants.BRANCH_ID, TrueTransactMain.BRANCH_ID);
        }
        dataHash = ClientUtil.executeTableQuery(whereMap);
        System.out.println("dataHash :" + dataHash);
        _heading = (ArrayList) dataHash.get(CommonConstants.TABLEHEAD);        
        System.out.println("### _heading : " + _heading);
        data = (ArrayList) dataHash.get(CommonConstants.TABLEDATA);
        System.out.println("### Data : " + data);
        boolean select = false;       
        if (_heading != null && _heading.size() > 0) {
            _heading.add(0, "Select");
            select = true;
        }        
        ArrayList arrList = new ArrayList();
        if (data != null && data.size() > 0) {
            for (int i = 0; i < data.size(); i++) {
                arrList = (ArrayList) data.get(i);
                if(select==true){
                arrList.add(0, new Boolean(false));}
                data.set(i, arrList);
            }
        }
        System.out.println("### Data : " + data);
        populateTable();        
        whereMap = null;
        return _heading;       
        
   }   
    
     public void populateTable() {
//        ArrayList heading = (ArrayList) dataHash.get(CommonConstants.TABLEHEAD);
        boolean dataExist;
        if (_heading != null) {
            _isAvailable = true;
            dataExist = true;
            setTblModel(_tblData, data, _heading);
        } else {
            _isAvailable = false;
            dataExist = false;
            
            TableSorter tableSorter = new TableSorter();
            tableSorter.addMouseListenerToHeaderInTable(_tblData);
            TableModel tableModel = new TableModel();
            tableModel.setHeading(new ArrayList());
            tableModel.setData(new ArrayList());
            tableModel.fireTableDataChanged();
            tableSorter.setModel(tableModel);
            tableSorter.fireTableDataChanged();
            //_tblData.setAutoResizeMode(0);
            _tblData.doLayout();
            _tblData.setModel(tableSorter);
            _tblData.revalidate();                   
            
            ClientUtil.noDataAlert();
        }
    }
   private void setTblModel(CTable tbl, ArrayList tblData, ArrayList head) {
        TableSorter tableSorter = new TableSorter();
        tableSorter.addMouseListenerToHeaderInTable(tbl);
        TableModel tableModel = new TableModel(tblData, head) {

            public boolean isCellEditable(int rowIndex, int mColIndex) {
                if (mColIndex == 0) {
                    return true;
                } else {
                    return false;
                }
            }
        };
        tableModel.fireTableDataChanged();
        tableSorter.setModel(tableModel);
        tableSorter.fireTableDataChanged();
        
        tbl.setModel(tableSorter);
        tbl.revalidate();
    } 
    
//    public void populateTable(boolean select) {
//        boolean dataExist;
//        if(select==true){
//        if (_heading != null && _heading.size() > 0) {
//            _heading.add(0, "Select");
//        }
//        }
//        if (_heading != null) {
//            _isAvailable = true;
//            dataExist = true;
//            TableSorter tableSorter = new TableSorter();
//            tableSorter.addMouseListenerToHeaderInTable(_tblData);
//            TableModel tableModel = new TableModel();
//            tableModel.setHeading(_heading);
//            tableModel.setData(data);
//            tableModel.fireTableDataChanged();
//            tableSorter.setModel(tableModel);
//            tableSorter.fireTableDataChanged();
//            _tblData.setAutoResizeMode(0);
//            _tblData.doLayout();
//            _tblData.setModel(tableSorter);
//            _tblData.revalidate();
//
//            _tblData.getColumnModel().getColumn(0).setPreferredWidth(70);
//            _tblData.getColumnModel().getColumn(1).setPreferredWidth(130);
//            _tblData.getColumnModel().getColumn(2).setPreferredWidth(350);
//            _tblData.getColumnModel().getColumn(3).setPreferredWidth(95);
//            _tblData.getColumnModel().getColumn(4).setPreferredWidth(120);
//            _tblData.getColumnModel().getColumn(5).setPreferredWidth(115);
//            _tblData.getColumnModel().getColumn(6).setPreferredWidth(90);
//            _tblData.getColumnModel().getColumn(7).setPreferredWidth(80);
//            _tblData.getColumnModel().getColumn(8).setPreferredWidth(95);
//        } else {
//            ClientUtil.noDataAlert();
//            ClientUtil.clearAll(panSearchDetails);
//            //txtBranchId.setText(CommonUtil.convertObjToStr(branchMap.get("BRANCH_CODE")));
//            //lblBranchName.setText(CommonUtil.convertObjToStr(branchMap.get("BRANCH_NAME")));
//        }
//        System.out.println("tblDepositDetails.getRowCount() :" +tblDepositDetails.getRowCount());
//        
//    }
  

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnCancel;
    private com.see.truetransact.uicomponent.CButton btnClear;
    private com.see.truetransact.uicomponent.CButton btnClear1;
    private com.see.truetransact.uicomponent.CButton btnCustomerIdFileOpen;
    private com.see.truetransact.uicomponent.CButton btnReport;
    private com.see.truetransact.uicomponent.CButton btnSearch;
    private com.see.truetransact.uicomponent.CLabel cLabel1;
    private com.see.truetransact.uicomponent.CComboBox cboJointCustSearchCrieteria;
    private com.see.truetransact.uicomponent.CComboBox cboSearchCriteria;
    private com.see.truetransact.uicomponent.CComboBox cboStatus;
    private com.see.truetransact.uicomponent.CCheckBox chkSelectAll;
    private com.see.truetransact.uicomponent.CDialog dlgMajorHead;
    private com.see.truetransact.uicomponent.CLabel lblAmountRange;
    private com.see.truetransact.uicomponent.CLabel lblBranchCode;
    private com.see.truetransact.uicomponent.CLabel lblBranchName;
    private com.see.truetransact.uicomponent.CLabel lblCustomerId;
    private com.see.truetransact.uicomponent.CLabel lblCustomerName;
    private com.see.truetransact.uicomponent.CLabel lblFrom;
    private com.see.truetransact.uicomponent.CLabel lblFromDt;
    private com.see.truetransact.uicomponent.CLabel lblHouseName;
    private com.see.truetransact.uicomponent.CLabel lblMemberNo;
    private com.see.truetransact.uicomponent.CLabel lblStatus;
    private com.see.truetransact.uicomponent.CLabel lblTo;
    private com.see.truetransact.uicomponent.CLabel lblToDt;
    private com.see.truetransact.uicomponent.CPanel panSearchDetails;
    private com.see.truetransact.uicomponent.CScrollPane srpMajorHead;
    private com.see.truetransact.uicomponent.CScrollPane srpSearchDisplayPane;
    private com.see.truetransact.uicomponent.CTable tblDepositDetails;
    private com.see.truetransact.uicomponent.CTable tblMajorHead;
    private com.see.truetransact.uicomponent.CDateField tdtFromDt;
    private com.see.truetransact.uicomponent.CDateField tdtToDt;
    private com.see.truetransact.uicomponent.CTextField txtBranchCode;
    private com.see.truetransact.uicomponent.CTextField txtCustomerId;
    private com.see.truetransact.uicomponent.CTextField txtCustomerName;
    private com.see.truetransact.uicomponent.CTextField txtFromAmount;
    private com.see.truetransact.uicomponent.CTextField txtHouseName;
    private com.see.truetransact.uicomponent.CTextField txtJointCustomerName;
    private com.see.truetransact.uicomponent.CTextField txtMemberNo;
    private com.see.truetransact.uicomponent.CTextField txtToAmount;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    
    
}
