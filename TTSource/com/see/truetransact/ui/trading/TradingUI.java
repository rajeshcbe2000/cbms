/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition. 
 * 
 * TradingUI.java
 *
 * Created on September 12, 2011, 12:08 PM
 */

package com.see.truetransact.ui.trading;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import java.io.*;
import java.text.SimpleDateFormat;
import com.see.truetransact.uimandatory.UIMandatoryField;
import com.see.truetransact.clientexception.ClientParseException;
import com.see.truetransact.clientutil.ClientConstants;
import java.util.Observable;
import com.see.truetransact.clientutil.ClientUtil;
import java.util.Observer;
import com.see.truetransact.ui.common.authorizestatus.AuthorizeStatusUI;
import java.util.HashMap;
import java.util.ArrayList;
import com.see.truetransact.ui.common.viewall.ViewAll;
import java.util.ResourceBundle;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.clientproxy.ProxyParameters;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.clientutil.CMandatoryDialog;
import com.see.truetransact.transferobject.trading.TradingTO;
/**
 * 
 * @author  userdd
 */
public class TradingUI extends CInternalFrame implements Observer, UIMandatoryField{
 
     javax.swing. JFileChooser fc;
     private TradingOB observable;
     private  TradingTO objTradingTO;
      DefaultTableModel model1 = null;
       DefaultTableModel model2 = null;
       SimpleDateFormat sdfSource = new SimpleDateFormat("dd-MM-yyyy");
       ArrayList list1=new ArrayList();
       Date curDate = null;
//Variable used when btnAuthorize is clicked
    /** Creates new form ifrNewBorrowing */
    public TradingUI() {
        System.out.println("Hai..");
        initForm();
        curDate = ClientUtil.getCurrentDate();       //Added By Suresh R
    }
     private void initForm(){
        initComponents();
        this.setBounds(0,0, 800, 700);
        initTableData();
        fc = new javax.swing.JFileChooser();
        observable = new TradingOB();
     }
      
    private void setMaxLengths() {
       // txtUserID.setAllowAll(true);
       // txtPwd.setAllowAll(true);
        //  this.setBounds(0,0, 800, 700);
    }
      private void setObservable() {
       
    }
     private void initComponentData() {
       
    }
  
      /* Method used to showPopup ViewAll by Executing a Query */
    private void callView(String currField) {
      
    }
     public void fillData(Object  map) {

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblAgency1 = new com.see.truetransact.uicomponent.CLabel();
        path = new com.see.truetransact.uicomponent.CTextField();
        tbrTokenConfig = new com.see.truetransact.uicomponent.CToolBar();
        btnSave = new com.see.truetransact.uicomponent.CButton();
        open = new com.see.truetransact.uicomponent.CButton();
        scrTableScroll = new com.see.truetransact.uicomponent.CScrollPane();
        tblData2 = new com.see.truetransact.uicomponent.CTable();
        cLabel1 = new com.see.truetransact.uicomponent.CLabel();
        cLabel2 = new com.see.truetransact.uicomponent.CLabel();
        scrTableScroll1 = new com.see.truetransact.uicomponent.CScrollPane();
        tblData1 = new com.see.truetransact.uicomponent.CTable();
        mbrTokenConfig = new com.see.truetransact.uicomponent.CMenuBar();
        mnuProcess = new javax.swing.JMenu();
        mitNew = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        sptView = new javax.swing.JSeparator();
        mitSave = new javax.swing.JMenuItem();
        mitCancel = new javax.swing.JMenuItem();
        sptCancel = new javax.swing.JSeparator();
        mitClose = new javax.swing.JMenuItem();

        getContentPane().setLayout(null);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setMaximumSize(new java.awt.Dimension(480, 480));
        setMinimumSize(new java.awt.Dimension(480, 480));
        setPreferredSize(new java.awt.Dimension(480, 480));
        lblAgency1.setText("File .");
        getContentPane().add(lblAgency1);
        lblAgency1.setBounds(60, 50, 50, 18);

        getContentPane().add(path);
        path.setBounds(120, 50, 140, 21);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif")));
        btnSave.setToolTipText("Save");
        btnSave.setMaximumSize(new java.awt.Dimension(30, 30));
        btnSave.setMinimumSize(new java.awt.Dimension(30, 30));
        btnSave.setPreferredSize(new java.awt.Dimension(30, 30));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        tbrTokenConfig.add(btnSave);

        getContentPane().add(tbrTokenConfig);
        tbrTokenConfig.setBounds(160, 0, 80, 40);

        open.setText("Browse");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });

        getContentPane().add(open);
        open.setBounds(270, 50, 75, 27);

        tblData2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "AC HD ID", "AMOUNT", "DATE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblData2.setCellSelectionEnabled(true);
        tblData2.setEnabled(false);
        scrTableScroll.setViewportView(tblData2);

        getContentPane().add(scrTableScroll);
        scrTableScroll.setBounds(20, 250, 370, 110);

        cLabel1.setText("Cash");
        getContentPane().add(cLabel1);
        cLabel1.setBounds(20, 90, 110, 10);

        cLabel2.setText("Transfer");
        getContentPane().add(cLabel2);
        cLabel2.setBounds(20, 230, 120, 10);

        tblData1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "AC HD ID", "AMOUNT", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblData1.setCellSelectionEnabled(true);
        tblData1.setEnabled(false);
        scrTableScroll1.setViewportView(tblData1);

        getContentPane().add(scrTableScroll1);
        scrTableScroll1.setBounds(20, 110, 370, 110);

        mbrTokenConfig.setInheritsPopupMenu(true);
        mnuProcess.setText("Import Trading Data");
        mnuProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuProcessActionPerformed(evt);
            }
        });

        mitNew.setText("New");
        mnuProcess.add(mitNew);

        mitEdit.setText("Edit");
        mnuProcess.add(mitEdit);

        mitDelete.setText("Delete");
        mnuProcess.add(mitDelete);

        mnuProcess.add(sptView);

        mitSave.setText("Save");
        mnuProcess.add(mitSave);

        mitCancel.setText("Cancel");
        mnuProcess.add(mitCancel);

        mnuProcess.add(sptCancel);

        mitClose.setText("Close");
        mnuProcess.add(mitClose);

        mbrTokenConfig.add(mnuProcess);

        setJMenuBar(mbrTokenConfig);

        pack();
    }//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
       
        savePerformed();
    }//GEN-LAST:event_btnSaveActionPerformed
       private void savePerformed(){
            try{
             
            	  
                    System.out.println("Save file");
         	     
         	       
         	        String fname = path.getText();
         	    
         	       if(fname !=null || !fname.equalsIgnoreCase(""))
        	    	   if(fname.substring(fname.indexOf('.')+1, fname.length()).equals("txt"))
        	    	   {
                              updateOBFields();
                              
                           }
                           else if(fname ==null)
                           displayAlert("Please select file");    
                           else
                               displayAlert("File should be .txt format"); 
                    insertdata();
                      }
                    
                   catch(Exception e){
                       e.printStackTrace();
                       displayAlert("File should be .txt format");
                   }
       
 }
       
     public void updateOBFields() {
        
                 boolean accNos=observable.getAccountNos();
                 if(!accNos)
                 {
                       displayAlert("Invalid Account numbers!!!"); 
                       return;
                 }
            //  displayAlert("Parsing success . "); 
           
       System.out.println("Save file 2 :"+observable.getFilePath());
    }
     
     public void insertdata(){
         System.out.println("haiiii");
              String action;
              System.out.println("Going to insert");  
            action=CommonConstants.TOSTATUS_INSERT;
            saveAction(action);
            
              if(observable.getActionType()==ClientConstants.ACTIONTYPE_NEW ){
                 System.out.println("Going to insert");  
            action=CommonConstants.TOSTATUS_INSERT;
            saveAction(action);
            
              }
    }
     
     
      private void saveAction(String status){
            observable.execute(status);
            settings();
        
            
    }
     private void settings(){
        observable.resetForm();
        path.setText("");
        ClientUtil.clearAll(this);
        list1.clear();
        model1=null;
        model2=null;
       // model1.setColumnCount(0);
       // model2.setColumnCount(0);
        displayAlert("Saved Successfully");
        observable.setResultStatus();
         initTableData();
    }
    private void mnuProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuProcessActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuProcessActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
       
        System.out.println("Open");
       
         try{
             
            	   int returnVal = fc.showOpenDialog(null);
                    System.out.println("Open 1");
         	      if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
         	        java.io.File file = fc.getSelectedFile();
         	        String fname = file.getName();
         	    Date curdt=(Date)curDate.clone();
                    //System.out.println("current date is....."+curdt);
                   String strDate=null;String flname=null;
                   strDate=sdfSource.format(curdt);
                    
                    final int lastPeriodPos = fname.lastIndexOf('.');
    if (lastPeriodPos <= 0)
    {
        // No period after first character - return name as it was passed in
         flname= fname;
    }
    else
    {
      
         flname=fname.substring(0, lastPeriodPos);
    }
             System.out.println("current date in format....."+strDate+"file"+flname);       
                    if(!flname.equalsIgnoreCase(strDate)){
                        displayAlert("Filename and Application Date not matching"); 
                        return;
                    }
         	       if(fname !=null || !fname.equalsIgnoreCase(""))
        	    	   if(fname.substring(fname.indexOf('.')+1, fname.length()).equals("txt"))
        	    	   {
                              path.setText(fc.getSelectedFile().toString());
                           }
                           else
                           displayAlert("File should be .txt format");    
                    } 
                    getListDataTO();
                      }
                   catch(Exception e){
                       displayAlert("File should be .txt format");
                   }
    }//GEN-LAST:event_openActionPerformed
  public void getListDataTO()
  {
       String fName = path.getText().trim();
        observable.setDataFileName(path.getText().trim());
        
         System.out.println("Save file 1 :"+fName+": "+observable.getFilePath());
        if(fName == null || fName.equalsIgnoreCase(""))
            displayAlert(" Please Select file");
        else
        { 
            if(!observable.parseImportData())
            {
               // displayAlert("Error occured during parsing.\n Please check the imported file");
                System.out.println("PARSING FAILED !!!");
            }
            else
            {
                  list1= observable.listTradingTo;
                // ArrayList list2= observable.getTransDataList();
              //   System.out.println("LISTT !!!!!!!!!!====="+observable.listTradingTo);
             //    System.out.println("LIASTT 222=========="+list2);
                  model1.setRowCount(0);
                    model2.setRowCount(0);
                 for(int i=0;i<list1.size();i++)
                 {
                     TradingTO objTradingTO1 = (TradingTO)list1.get(i);
                      String mode=objTradingTO1.getMode();
                       System.out.println("objTradingTO1.getAchdID()=="+objTradingTO1.getAchdID());
                    if(mode.equalsIgnoreCase("CASH"))
                    {
                        model1.addRow(new String[]{objTradingTO1.getAchdID(),objTradingTO1.getAMOUNT().toString(),getDtPrintValue(objTradingTO1.getTrans_DT().toString())}); 
                    }
                    else
                    {
                         model2.addRow(new String[]{objTradingTO1.getAchdID(),objTradingTO1.getAMOUNT().toString(),getDtPrintValue(objTradingTO1.getTrans_DT().toString())});                      
                    }
                   
                 }
                
                 
            }
            
        }
  }
      public String getDtPrintValue(String strDate)
    {
         try
         {
        //create SimpleDateFormat object with source string date format
        SimpleDateFormat sdfSource = new SimpleDateFormat("EEE MMM d hh:mm:ss z yyyy");
        //"yyyy-MM-dd HH:mm:ss "
        //parse the string into Date object
        Date date = sdfSource.parse(strDate);
        //create SimpleDateFormat object with desired date format
        SimpleDateFormat sdfDestination = new SimpleDateFormat("dd/MM/yyyy");
        //parse the date into another format
        strDate = sdfDestination.format(date);
        }
         catch(Exception e)
         {
           // e.printStackTrace(); 
         }
        return strDate;
    }  
    /** Method used to Give a Alert when any Mandatory Field is not filled by the user */
    private void displayAlert(String message){
        CMandatoryDialog cmd = new CMandatoryDialog();
        cmd.setMessage(message);
        cmd.setModal(true);
        cmd.show();
    }
    
    public void initTableData()
   {
     String data[][] ={{}};
     String col[] = {"AC HD ID","AMONT","DATE"};
     DefaultTableModel dataModel = new DefaultTableModel();  
     DefaultTableModel dataMode2 = new DefaultTableModel();  
    // dataModel.setDataVector(dataVector
     model1 = new DefaultTableModel(data,col);
      model2 = new DefaultTableModel(data,col);
   //  tblData.getCellEditor().stopCellEditing();
     tblData1.setModel(model1);
     tblData2.setModel(model2);
   }
      
     public void setMandatoryHashMap() {
      
    }
    public java.util.HashMap getMandatoryHashMap() {
           return null;
    }    
    
    public void update(java.util.Observable observable, Object obj) {
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnSave;
    private com.see.truetransact.uicomponent.CLabel cLabel1;
    private com.see.truetransact.uicomponent.CLabel cLabel2;
    private com.see.truetransact.uicomponent.CLabel lblAgency1;
    private com.see.truetransact.uicomponent.CMenuBar mbrTokenConfig;
    private javax.swing.JMenuItem mitCancel;
    private javax.swing.JMenuItem mitClose;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JMenuItem mitNew;
    private javax.swing.JMenuItem mitSave;
    private javax.swing.JMenu mnuProcess;
    private com.see.truetransact.uicomponent.CButton open;
    private com.see.truetransact.uicomponent.CTextField path;
    private com.see.truetransact.uicomponent.CScrollPane scrTableScroll;
    private com.see.truetransact.uicomponent.CScrollPane scrTableScroll1;
    private javax.swing.JSeparator sptCancel;
    private javax.swing.JSeparator sptView;
    private com.see.truetransact.uicomponent.CTable tblData1;
    private com.see.truetransact.uicomponent.CTable tblData2;
    private com.see.truetransact.uicomponent.CToolBar tbrTokenConfig;
    // End of variables declaration//GEN-END:variables
//     private com.see.truetransact.uicomponent.CTable tblData;
      private com.see.truetransact.clientutil.TableModel tbModel;
}
