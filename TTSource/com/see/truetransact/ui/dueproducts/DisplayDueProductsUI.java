/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.  
 * 
 * DisplayDueProductsUI.java
 */

package com.see.truetransact.ui.dueproducts;


import com.see.truetransact.clientproxy.ProxyParameters;
import com.see.truetransact.clientutil.*;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.transferobject.common.mobile.SMSSubscriptionTO;
import com.see.truetransact.ui.TrueTransactMain;
import com.see.truetransact.ui.generalledger.AccountMaintenanceUI;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.uicomponent.COptionPane;
import com.see.truetransact.uicomponent.CTable;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.util.*;
import java.util.logging.Level;
import javax.swing.JTable;
import javax.swing.JDialog;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import org.apache.log4j.Logger;

/**
 * @author Nithya
 */
public class DisplayDueProductsUI extends com.see.truetransact.uicomponent.CInternalFrame implements Observer {

    private static TrueTransactMain frm = null;
    DisplayDueProductsOB observable;
    HashMap paramMap = null;
    int amtColumnNo = 0;
    double tot = 0;
    String amtColName = "";
    String behavesLike = "";
    boolean collDet = false;
    DefaultTableModel model = null;
    DefaultTreeModel root;
    DefaultTreeModel child;
    Date currDt = null;    
    ArrayList _heading = null;
    ArrayList data = null;
    String node = "";    
    

    /**
     * Creates new form DisplayDueProductsUI
     */
    public DisplayDueProductsUI(TrueTransactMain frm) {
        try{
            this.frm = frm;
            setupInit();            
            setupScreen();
            show();
            String displayDt = DateUtil.getStringDate(getProperDateFormat(currDt));
            this.setTitle("Due Products List on :" + displayDt);            
        }catch (Exception exc) {
        }
        //this.enable();
    }

    private void setupInit() {
        currDt = ClientUtil.getCurrentDate();
        initComponents();
        setObservable();
        internationalize();
        toFront();
        getUnauthorizedTree();        
        btnClear.setVisible(true);
        btnPrint.setVisible(true);
        btnSendSMS.setVisible(false);
    }
   
    private void setObservable(){
        
        observable = DisplayDueProductsOB.getInstance();
        observable.addObserver(this);      
        System.out.println("itssetobserv");

    }

    private void setupScreen() {
        /*
         * Calculate the screen size
         */
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        /*
         * Center frame on the screen
         */
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
    }    

    public void show() {        
        super.show();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        rdgAndOr = new com.see.truetransact.uicomponent.CButtonGroup();
        panSearchCondition = new com.see.truetransact.uicomponent.CPanel();
        panTree = new com.see.truetransact.uicomponent.CPanel();
        cScrollPane1 = new com.see.truetransact.uicomponent.CScrollPane();
        treData = new javax.swing.JTree();
        panTable = new com.see.truetransact.uicomponent.CPanel();
        srcTable = new com.see.truetransact.uicomponent.CScrollPane();
        tblData = new com.see.truetransact.uicomponent.CTable();
        btnSendSMS = new com.see.truetransact.uicomponent.CButton();
        btnPrint = new com.see.truetransact.uicomponent.CButton();
        chkSelectAll = new com.see.truetransact.uicomponent.CCheckBox();
        panSearch = new com.see.truetransact.uicomponent.CPanel();
        btnClose = new com.see.truetransact.uicomponent.CButton();
        btnClear = new com.see.truetransact.uicomponent.CButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setMinimumSize(new java.awt.Dimension(975, 650));
        setPreferredSize(new java.awt.Dimension(975, 650));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panSearchCondition.setMinimumSize(new java.awt.Dimension(950, 600));
        panSearchCondition.setPreferredSize(new java.awt.Dimension(950, 600));
        panSearchCondition.setLayout(new java.awt.GridBagLayout());

        panTree.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panTree.setMinimumSize(new java.awt.Dimension(200, 575));
        panTree.setPreferredSize(new java.awt.Dimension(200, 575));
        panTree.setLayout(new java.awt.GridBagLayout());

        cScrollPane1.setMinimumSize(new java.awt.Dimension(700, 680));
        cScrollPane1.setPreferredSize(new java.awt.Dimension(700, 680));

        treData.setModel(root);
        treData.setExpandsSelectedPaths(false);
        treData.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treDataValueChanged(evt);
            }
        });
        cScrollPane1.setViewportView(treData);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        panTree.add(cScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.ipady = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        panSearchCondition.add(panTree, gridBagConstraints);

        panTable.setMinimumSize(new java.awt.Dimension(950, 575));
        panTable.setOpaque(false);
        panTable.setPreferredSize(new java.awt.Dimension(750, 575));
        panTable.setLayout(new java.awt.GridBagLayout());

        srcTable.setAutoscrolls(true);
        srcTable.setMinimumSize(new java.awt.Dimension(50, 0));
        srcTable.setOpaque(false);
        srcTable.setPreferredSize(new java.awt.Dimension(240, 0));

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblData.setCellSelectionEnabled(true);
        tblData.setMaximumSize(new java.awt.Dimension(1300, 1000));
        tblData.setMinimumSize(new java.awt.Dimension(1300, 1000));
        tblData.setOpaque(false);
        tblData.setPreferredScrollableViewportSize(new java.awt.Dimension(1300, 1000));
        tblData.setPreferredSize(new java.awt.Dimension(1300, 1000));
        tblData.setReorderingAllowed(false);
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblDataMousePressed(evt);
            }
        });
        tblData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblDataKeyPressed(evt);
            }
        });
        srcTable.setViewportView(tblData);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 641;
        gridBagConstraints.ipady = 550;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        panTable.add(srcTable, gridBagConstraints);

        btnSendSMS.setText("Send SMS");
        btnSendSMS.setMinimumSize(new java.awt.Dimension(110, 20));
        btnSendSMS.setPreferredSize(new java.awt.Dimension(110, 20));
        btnSendSMS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendSMSActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 117, 0, 0);
        panTable.add(btnSendSMS, gridBagConstraints);

        btnPrint.setText("Print");
        btnPrint.setMinimumSize(new java.awt.Dimension(110, 20));
        btnPrint.setPreferredSize(new java.awt.Dimension(110, 20));
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        panTable.add(btnPrint, gridBagConstraints);

        chkSelectAll.setText("Select All");
        chkSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSelectAllActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 322, 6, 0);
        panTable.add(chkSelectAll, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 32;
        gridBagConstraints.ipady = 44;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.6;
        panSearchCondition.add(panTable, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 94;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(panSearchCondition, gridBagConstraints);

        panSearch.setMinimumSize(new java.awt.Dimension(750, 0));
        panSearch.setPreferredSize(new java.awt.Dimension(750, 0));
        panSearch.setLayout(new java.awt.GridBagLayout());

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CLOSE.gif"))); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSearch.add(btnClose, gridBagConstraints);

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CANCEL.gif"))); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSearch.add(btnClear, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 163;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(panSearch, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void treDataValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treDataValueChanged
        // TODO add your handling code here:
        System.out.println("Inside treDataValueChanged");
        TreePath oldPath = evt.getOldLeadSelectionPath();
        TreePath newPath = evt.getNewLeadSelectionPath();
        DefaultMutableTreeNode lastNode = null;
        if (oldPath != null) {
            lastNode = (DefaultMutableTreeNode) oldPath.getLastPathComponent();
        }
        DefaultMutableTreeNode newNode = null;
        if (newPath != null) {
            newNode = (DefaultMutableTreeNode) newPath.getLastPathComponent();
        }
        if (newNode != null) {
            node = newNode.toString();
            System.out.println("last selected node = " + lastNode + "\n"
                    + "new selected node = " + newNode + "\n\n");
            if (!node.equals("") && !node.equals(null)) {
                displayDetails(node); // Main method to modify by nithya
            }
        }
    }//GEN-LAST:event_treDataValueChanged


    // Modified by nithya
    public DefaultTreeModel getUnauthorizedTree() {
        
        DefaultMutableTreeNode parent = new DefaultMutableTreeNode("Products Due List");
        DefaultMutableTreeNode depositParent = new DefaultMutableTreeNode("Deposits");
        DefaultMutableTreeNode investmentParent = new DefaultMutableTreeNode("Bank Investments");
        DefaultMutableTreeNode loanParent = new DefaultMutableTreeNode("Term Loans");
        DefaultMutableTreeNode fullDue = new DefaultMutableTreeNode("Full Due");
        DefaultMutableTreeNode intDue = new DefaultMutableTreeNode("Interest due");
        DefaultMutableTreeNode depositLoanParent = new DefaultMutableTreeNode("DepositLoan");
        DefaultMutableTreeNode goldLoanParent = new DefaultMutableTreeNode("Gold Loans");        
        
        parent.add(depositParent);
        parent.add(investmentParent);
        parent.add(loanParent);
        loanParent.add(fullDue);
        loanParent.add(intDue);
        parent.add(depositLoanParent);
        parent.add(goldLoanParent);               
       
        final DefaultTreeModel treemodel = new DefaultTreeModel(parent);
        treData.setModel(treemodel);        
        
        root = null;        
        return treemodel;
    }

   
    public void displayDetails(String nodeSelected) {
        
        _heading = null;
        data = null;
        HashMap whereMap = new HashMap();
        HashMap where = new HashMap();
        where.put("BRANCH_ID", ProxyParameters.BRANCH_ID);
        currDt = (Date) currDt.clone();        
        where.put("DUE_DT", currDt.clone());   
        List lst = new ArrayList();
        System.out.println("node selected :: " + nodeSelected);
        if (nodeSelected.equals("Deposits")) { 
            btnSendSMS.setVisible(true);
            whereMap.put(CommonConstants.MAP_NAME, "getDepositsMaturedCustomers");
        }else if (nodeSelected.equals("Full Due")) {
            btnSendSMS.setVisible(false);
            whereMap.put(CommonConstants.MAP_NAME, "getTermLoanDueCustomers");
        }else if (nodeSelected.equals("Gold Loans")) {    
            btnSendSMS.setVisible(false);
            whereMap.put(CommonConstants.MAP_NAME, "getGoldLoanDueCustomers");
        }else if (nodeSelected.equals("DepositLoan")) {  
            btnSendSMS.setVisible(false);
            whereMap.put(CommonConstants.MAP_NAME, "depositLoanDueCustomers");
        }else if (nodeSelected.equals("Interest due")) {  
            btnSendSMS.setVisible(true);
            whereMap.put(CommonConstants.MAP_NAME, "loanIntDueCustomers");
        }else if (nodeSelected.equals("Bank Investments")){         
            btnSendSMS.setVisible(false);
            whereMap.put(CommonConstants.MAP_NAME, "getMaturedInvestmentDepositDetails");
        } 
        whereMap.put(CommonConstants.MAP_WHERE, where);
        if (whereMap.containsKey(CommonConstants.MAP_NAME)) {
            whereMap = ClientUtil.executeTableQuery(whereMap);
            _heading = (ArrayList) whereMap.get(CommonConstants.TABLEHEAD);
            data = (ArrayList) whereMap.get(CommonConstants.TABLEDATA);
        }
        populateTable();
        //System.out.println("#$#$ whereMap : " + whereMap);        
    }    

    public void fillData(Object obj) {
        HashMap hash = (HashMap) obj;
        //System.out.println("#$#$ Hash : " + hash);
    }

    public void populateTable() {

        boolean dataExist;
        boolean select = false;
        if (_heading != null && _heading.size() > 0) {            
            _heading.add(0, "Select");
            select = true;

            ArrayList arrList = new ArrayList();
            if (data != null && data.size() > 0) {
              for (int i = 0; i < data.size(); i++) {
                arrList = (ArrayList) data.get(i);
                if(select==true){
                arrList.add(0, new Boolean(false));}
                data.set(i, arrList);
            }
           }
           
            dataExist = true;
            TableSorter tableSorter = new TableSorter();
            tableSorter.addMouseListenerToHeaderInTable(tblData);
            TableModel tableModel = new TableModel();
            tableModel.setHeading(_heading);
            tableModel.setData(data);
            tableModel.fireTableDataChanged();
            tableSorter.setModel(tableModel);
            tableSorter.fireTableDataChanged();
            tblData.setModel(tableSorter);
            tblData.doLayout();
            tblData.revalidate();
        } else {
            dataExist = false;
            TableSorter tableSorter = new TableSorter();
            tableSorter.addMouseListenerToHeaderInTable(tblData);
            TableModel tableModel = new TableModel();
            tableModel.setHeading(new ArrayList());
            tableModel.setData(new ArrayList());
            tableModel.fireTableDataChanged();
            tableSorter.setModel(tableModel);
            tableSorter.fireTableDataChanged();
            tblData.setModel(tableSorter);
            tblData.doLayout();
            tblData.revalidate();
            ClientUtil.noDataAlert();
        }
        setTblModel(tblData, data, _heading);
    }  

    private HashMap fillData(int rowIndexSelected) {
        TableModel _tableModel = (TableModel) tblData.getModel();
        ArrayList rowdata = null;

        if (rowIndexSelected > -1) {
            rowdata = _tableModel.getRow(rowIndexSelected);
        }

        HashMap hashdata = new HashMap();
        String strColName = null;
        Object obj = null;
        for (int i = 0, j = _tableModel.getColumnCount(); i < j; i++) {
            if (rowdata != null) {
                obj = rowdata.get(i);
            }

            strColName = _tableModel.getColumnName(i).toUpperCase().trim();
            if (obj != null) {
                hashdata.put(strColName, obj);
            } else {
                hashdata.put(strColName, "");
            }
        }
        return hashdata;
    }

    private void displayAlert(String message) {
        CMandatoryDialog cmd = new CMandatoryDialog();
        cmd.setMessage(message);
        cmd.show();
    }

    private void tblDataMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMousePressed
        if (evt.getClickCount() == 2) {
            //whenTableRowSelected();
        }
    }//GEN-LAST:event_tblDataMousePressed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // Add your handling code here:
        btnClearActionPerformed(null);
        //cifClosingAlert();
//        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
//        observable.resetForm();
//        update(observable, null);
    }//GEN-LAST:event_btnClearActionPerformed
  

    private void tblDataKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDataKeyPressed
        // TODO add your handling code here:       
    }//GEN-LAST:event_tblDataKeyPressed

    private void btnSendSMSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendSMSActionPerformed
        
        /*
        List selectedAcctNoList = new ArrayList();
        List depositNoList = new ArrayList();
        HashMap where = new HashMap();      
        HashMap customerMap;
        int selectionCount = tblData.getRowCount();
        if (node.equals("Deposits")) {
            if(selectionCount > 0){
              for (int i = 0; i < selectionCount; i++) {
               String isAcctSelected = CommonUtil.convertObjToStr(tblData.getValueAt(i, 0)); 
               if (isAcctSelected.equalsIgnoreCase("TRUE")) {                   
                 customerMap = new HashMap();
                 String custId = CommonUtil.convertObjToStr(tblData.getValueAt(i, 1)).toString();
                 where.put("CUST_ID",custId);
                 where.put("BRANCH_CODE",ProxyParameters.BRANCH_ID);
                 List lst = ClientUtil.executeQuery("getSMSContactForDepositMaturedCustomer", where);
                 //System.out.println("getSMSContactForDepositMaturedCustomer :: " + lst); 
                 if(lst != null && lst.size() > 0){
                    HashMap custPhoneMap = (HashMap) lst.get(0);
                    customerMap.put("CUST_ID", CommonUtil.convertObjToStr(tblData.getValueAt(i, 1)));
                    customerMap.put("DEPOSIT_TYPE", CommonUtil.convertObjToStr(tblData.getValueAt(i, 5)));
                    customerMap.put("DEPO_NO", CommonUtil.convertObjToStr(tblData.getValueAt(i, 6))); 
                    customerMap.put("DEPO_AMT", CommonUtil.convertObjToStr(tblData.getValueAt(i, 8))); 
                    customerMap.put("CUST_PHONE",custPhoneMap.get("CONTACT_NO"));
                    depositNoList.add(customerMap);
                 }
               }
              } 
            }
            //System.out.println("depositNoList :: " + depositNoList);            
            observable.setSMSForMaturedDeposits(depositNoList);
        } else {
            if (selectionCount > 0) {
                for (int i = 0; i < selectionCount; i++) {
                    String isAcctSelected = CommonUtil.convertObjToStr(tblData.getValueAt(i, 0));
                    if (isAcctSelected.equalsIgnoreCase("TRUE")) {
                        customerMap = new HashMap();
                        customerMap.put("ACT_NUM", CommonUtil.convertObjToStr(tblData.getValueAt(i, 1)));
                        customerMap.put("PROD_ID", CommonUtil.convertObjToStr(tblData.getValueAt(i, 3)));
                        selectedAcctNoList.add(customerMap);
                    }
                }
            }
            //System.out.println("selectedAcctNoList :: " + selectedAcctNoList);
            
            int selectedAcctNoListSize = selectedAcctNoList.size();            
            
            for (int i = 0; i < selectedAcctNoListSize; i++) {
                HashMap loanCustMap = (HashMap) selectedAcctNoList.get(i);
                where.put("ACT_NUM", loanCustMap.get("ACT_NUM"));
                where.put("PROD_TYPE", "TL");
                where.put("PROD_ID", loanCustMap.get("PROD_ID"));                
                List lst = ClientUtil.executeQuery("getSelectSMSSubscriptionMap", where);
                //System.out.println("getSelectSMSSubscriptionMap :: " + lst);                
                if (lst != null && lst.size() > 0) {
                    observable.setSMSSubscriptionTO(lst, node);
                }
            }
        }*/
        
        // Added by nithya on 22-04-2019 for KD 468 - DueProducts screen SmsConfigDAO Called in OB Side, Needs to be removed and it has to use the standard way
        HashMap where = new HashMap();
        HashMap smsMap = new HashMap();
        HashMap customerMap;
         List selectedAcctNoList = new ArrayList();
        int selectionCount = tblData.getRowCount();
        if (node.equals("Deposits")) {
            if (selectionCount > 0) {
                for (int i = 0; i < selectionCount; i++) {
                    String isAcctSelected = CommonUtil.convertObjToStr(tblData.getValueAt(i, 0));
                    if (isAcctSelected.equalsIgnoreCase("TRUE")) {                        
                        String displayDt = DateUtil.getStringDate(getProperDateFormat(currDt));
                        String custId = CommonUtil.convertObjToStr(tblData.getValueAt(i, 1)).toString();
                        where.put("CUST_ID", custId);
                        where.put("BRANCH_CODE", ProxyParameters.BRANCH_ID);
                        List lst = ClientUtil.executeQuery("getSMSContactForDepositMaturedCustomer", where);
                        if (lst != null && lst.size() > 0) {
                            HashMap rowMap = new HashMap();
                            String actNo = "";
                            HashMap custPhoneMap = (HashMap) lst.get(0);                   
                            actNo = CommonUtil.convertObjToStr(tblData.getValueAt(i, 6));
                            //schemeName = CommonUtil.convertObjToStr(cboProdId.getSelectedItem());
                            rowMap.put("ACT_NUM", actNo);
                            //rowMap.put("SCHEME_NAME", schemeName);
                            String message = "Your " + CommonUtil.convertObjToStr(tblData.getValueAt(i, 5)) + " Acct No : " + actNo + " Amount : " + CommonUtil.convertObjToStr(tblData.getValueAt(i, 8)) + " - is matured on " + displayDt + " - " + CommonConstants.BANK_SMS_DESCRIPTION + " - " + CommonConstants.MOBILE_BANKING_SENDERID;
                            rowMap.put("MESSAGE", message);
                            rowMap.put("PHONE_NUMBER", custPhoneMap.get("CONTACT_NO"));
                            rowMap.put("SMS_MODULE", "DUE ACCOUNTS REMINDER");
                            rowMap.put("BRANCH_ID", com.see.truetransact.ui.TrueTransactMain.BRANCH_ID);
                            smsMap.put(actNo, rowMap);
                        }
                    }
                }
            }
        }else{
            if (selectionCount > 0) {
                for (int i = 0; i < selectionCount; i++) {
                    String isAcctSelected = CommonUtil.convertObjToStr(tblData.getValueAt(i, 0));
                    if (isAcctSelected.equalsIgnoreCase("TRUE")) {
                        customerMap = new HashMap();
                        customerMap.put("ACT_NUM", CommonUtil.convertObjToStr(tblData.getValueAt(i, 1)));
                        customerMap.put("PROD_ID", CommonUtil.convertObjToStr(tblData.getValueAt(i, 3)));
                        selectedAcctNoList.add(customerMap);
                    }
                }
            }            
            int selectedAcctNoListSize = selectedAcctNoList.size();
            String actNo = "";
            for (int i = 0; i < selectedAcctNoListSize; i++) {
                HashMap rowMap = new HashMap();
                HashMap loanCustMap = (HashMap) selectedAcctNoList.get(i);
                where.put("ACT_NUM", loanCustMap.get("ACT_NUM"));
                where.put("PROD_TYPE", "TL");
                where.put("PROD_ID", loanCustMap.get("PROD_ID"));
                List lst = ClientUtil.executeQuery("getSelectSMSSubscriptionMap", where);              
                SMSSubscriptionTO objSmsSubscriptionTO = (SMSSubscriptionTO) (lst.get(0));
                if (lst != null && lst.size() > 0) {
                    if (node.equals("Interest due")) {
                        currDt = ClientUtil.getCurrentDate();
                        String displayDt = DateUtil.getStringDate(getProperDateFormat(currDt));
                        HashMap check = new HashMap();
                        check.put("DUE_DT", currDt.clone());
                        check.put("ACCT_NUM", loanCustMap.get("ACT_NUM"));
                        List checklst = ClientUtil.executeQuery("getSMSDateForIntDueCustomers", check);
                        HashMap smsCheckMap = (HashMap) checklst.get(0);
                        String message = "Your term loan Acct No  " + loanCustMap.get("ACT_NUM") + " - Installment  no : " + smsCheckMap.get("INSTALLMENT_SLNO") + " is due on " + displayDt + " Amount is : " + smsCheckMap.get("TOTAL_AMT") + " - " + CommonConstants.BANK_SMS_DESCRIPTION + " - " + CommonConstants.MOBILE_BANKING_SENDERID + " Please ignore if paid!! ";
                        actNo = CommonUtil.convertObjToStr(loanCustMap.get("ACT_NUM"));
                        rowMap.put("ACT_NUM", actNo);
                        rowMap.put("MESSAGE", message);
                        rowMap.put("PHONE_NUMBER", objSmsSubscriptionTO.getMobileNo());
                        rowMap.put("SMS_MODULE", "DUE ACCOUNTS REMINDER");
                        rowMap.put("BRANCH_ID", com.see.truetransact.ui.TrueTransactMain.BRANCH_ID);
                        smsMap.put(actNo, rowMap);
                    }
                }
            }
        }
        if (smsMap.size() > 0) {
            HashMap smsDataMap = new HashMap();
            smsDataMap.put("SMS", smsMap);
            smsDataMap.put("DISPLAY_DUE_PRODUCT_SCREEN", "DISPLAY_DUE_PRODUCT_SCREEN");
            smsDataMap.put(CommonConstants.BRANCH_ID, com.see.truetransact.ui.TrueTransactMain.BRANCH_ID);
            observable.SendSMS(smsDataMap);

        }
    }//GEN-LAST:event_btnSendSMSActionPerformed

//GEN-FIRST:event_btnRefreshListActionPerformed
 
//GEN-LAST:event_btnRefreshListActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
       try
        {   
            tblData.print();
        }
        catch(Exception e)
        {
            System.out.println("Exception"+e);
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void chkSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSelectAllActionPerformed
         if(chkSelectAll.isSelected() == true){
            for(int i=0; i<tblData.getRowCount(); i++){
                tblData.setValueAt(new Boolean(true), i, 0);
            }
        } else if(chkSelectAll.isSelected() == false){
            for(int i=0; i<tblData.getRowCount();i++){
                tblData.setValueAt(new Boolean(false), i, 0);
            }
        }
    }//GEN-LAST:event_chkSelectAllActionPerformed

  

    private void internationalize() {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }
//        //CHANGED BY JITHIN TO WORK FOR SAL_REC='Y'
//        new DisplayDueProductsUI().show();
    }

    public void update(Observable observed, Object arg) {
//            tdtFromDate.setDateValue(DateUtil.getStringDate(observable.getTdtFromDate()));
//            tdtToDate.setDateValue(DateUtil.getStringDate(observable.getTdtToDate()));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnClear;
    private com.see.truetransact.uicomponent.CButton btnClose;
    private com.see.truetransact.uicomponent.CButton btnPrint;
    private com.see.truetransact.uicomponent.CButton btnSendSMS;
    private com.see.truetransact.uicomponent.CScrollPane cScrollPane1;
    private com.see.truetransact.uicomponent.CCheckBox chkSelectAll;
    private com.see.truetransact.uicomponent.CPanel panSearch;
    private com.see.truetransact.uicomponent.CPanel panSearchCondition;
    private com.see.truetransact.uicomponent.CPanel panTable;
    private com.see.truetransact.uicomponent.CPanel panTree;
    private com.see.truetransact.uicomponent.CButtonGroup rdgAndOr;
    private com.see.truetransact.uicomponent.CScrollPane srcTable;
    private com.see.truetransact.uicomponent.CTable tblData;
    private javax.swing.JTree treData;
    // End of variables declaration//GEN-END:variables

    
   
    
    public void setTblModel(final CTable tbl, ArrayList tblData, ArrayList head) {
        TableSorter tableSorter = new TableSorter();    
        tableSorter.addMouseListenerToHeaderInTable(tbl);
        TableModel tableModel = new TableModel(tblData, head) { 
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                if (mColIndex == 0) { 
                    return true;
                } else {                  
                    return false;
                }
            }
        };      
              
        tableModel.fireTableDataChanged();
        tableSorter.setModel(tableModel);
        tableSorter.fireTableDataChanged();
        tbl.setModel(tableSorter);
        tbl.revalidate();
        
        //System.out.println("column count :: " + tbl.getColumnCount());
        int colCount = tbl.getColumnCount();
        for(int i=0; i<colCount; i++){
          tbl.getColumnModel().getColumn(i).setPreferredWidth(120);  
        }
    }
    
    public Date getProperDateFormat(Date obj) {
        Date curr_Dt = null;
        if (obj!=null && obj.toString().length()>0) {
            Date tempDt= DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(obj));
            curr_Dt=(Date)currDt.clone();
            curr_Dt.setDate(tempDt.getDate());
            curr_Dt.setMonth(tempDt.getMonth());
            curr_Dt.setYear(tempDt.getYear());
        }
        return curr_Dt;
    }
}
