/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.  
 * 
 * ScheduleTaskUI.java
 */
package com.see.truetransact.ui.scheduler;

import java.util.HashMap;
import org.apache.log4j.Logger;

public class ScheduleTaskUI extends com.see.truetransact.uicomponent.CInternalFrame implements java.util.Observer{
    
    private static Logger logger = Logger.getLogger(ScheduleTaskUI.class.getName());
    private HashMap hashMap = new HashMap();
    private final String ACTIVE_STATUS = "ACTIVE";      // Value change should be refelect in 
    private final String  INACTIVE_STATUS = "INACTIVE"; // com.see.rep.report.util.backup.ScheduleTask.java also.  
    
    public ScheduleTaskUI() {
        initComponents();
        initComponentsRB();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        panSchedule = new com.see.truetransact.uicomponent.CPanel();
        rdoDaily = new com.see.truetransact.uicomponent.CRadioButton();
        rdoWeekly = new com.see.truetransact.uicomponent.CRadioButton();
        rdoMonthly = new com.see.truetransact.uicomponent.CRadioButton();
        cboWeekly = new com.see.truetransact.uicomponent.CComboBox();
        cboMonthly = new com.see.truetransact.uicomponent.CComboBox();
        rdoReportOn = new com.see.truetransact.uicomponent.CRadioButton();
        cdtReportOn = new com.see.truetransact.uicomponent.CDateField();
        panTimeSchedule = new com.see.truetransact.uicomponent.CPanel();
        lblHour = new com.see.truetransact.uicomponent.CLabel();
        lblMin = new com.see.truetransact.uicomponent.CLabel();
        cboHour = new com.see.truetransact.uicomponent.CComboBox();
        cboMin = new com.see.truetransact.uicomponent.CComboBox();
        panScheduleButton = new com.see.truetransact.uicomponent.CPanel();
        btnScheduleJob = new com.see.truetransact.uicomponent.CButton();
        btnCancel = new com.see.truetransact.uicomponent.CButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Schedule Task");
        panSchedule.setLayout(new java.awt.GridBagLayout());

        panSchedule.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "Scheduling Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11)));
        rdoDaily.setSelected(true);
        rdoDaily.setText("Daily");
        buttonGroup1.add(rdoDaily);
        rdoDaily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoDailyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panSchedule.add(rdoDaily, gridBagConstraints);

        rdoWeekly.setText("Weekly");
        buttonGroup1.add(rdoWeekly);
        rdoWeekly.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoWeeklyStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panSchedule.add(rdoWeekly, gridBagConstraints);

        rdoMonthly.setText("Monthly");
        buttonGroup1.add(rdoMonthly);
        rdoMonthly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoMonthlyActionPerformed(evt);
            }
        });
        rdoMonthly.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoMonthlyStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panSchedule.add(rdoMonthly, gridBagConstraints);

        cboWeekly.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        cboWeekly.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panSchedule.add(cboWeekly, gridBagConstraints);

        cboMonthly.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        cboMonthly.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panSchedule.add(cboMonthly, gridBagConstraints);

        rdoReportOn.setText("Report On");
        buttonGroup1.add(rdoReportOn);
        rdoReportOn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoReportOnStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panSchedule.add(rdoReportOn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        panSchedule.add(cdtReportOn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(panSchedule, gridBagConstraints);

        panTimeSchedule.setLayout(new java.awt.GridBagLayout());

        panTimeSchedule.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "Time Scheduling Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11)));
        panTimeSchedule.setMinimumSize(new java.awt.Dimension(189, 159));
        panTimeSchedule.setPreferredSize(new java.awt.Dimension(189, 159));
        lblHour.setText("Hour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panTimeSchedule.add(lblHour, gridBagConstraints);

        lblMin.setText("Minutes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panTimeSchedule.add(lblMin, gridBagConstraints);

        cboHour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "20", "21", "22", "23", "All" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panTimeSchedule.add(cboHour, gridBagConstraints);

        cboMin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "15", "30", "45" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panTimeSchedule.add(cboMin, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(panTimeSchedule, gridBagConstraints);

        btnScheduleJob.setText("Schedule Job");
        btnScheduleJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleJobActionPerformed(evt);
            }
        });

        panScheduleButton.add(btnScheduleJob);

        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        panScheduleButton.add(btnCancel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(panScheduleButton, gridBagConstraints);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-402)/2, (screenSize.height-222)/2, 402, 222);
    }//GEN-END:initComponents
    private void rdoReportOnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoReportOnStateChanged
        // Add your handling code here:
        if(rdoReportOn.isSelected()) {
            cdtReportOn.setEnabled(true);
            hashMap.put("dayofweek","*");
            if(!cdtReportOn.getDateValue().trim().equals("")){
                hashMap.put("month",cdtReportOn.getDateValue().substring(0,2));
                hashMap.put("dayofmonth",cdtReportOn.getDateValue().substring(3,5)); 
                hashMap.put("year",cdtReportOn.getDateValue().substring(8,10));            
            }
        }else {
            cdtReportOn.setDateValue("");
            cdtReportOn.setEnabled(false);
        }        
    }//GEN-LAST:event_rdoReportOnStateChanged
    private void initComponentsRB(){        
        ScheduleTaskRB schTaskRB = new ScheduleTaskRB();

        setTitle(schTaskRB.getString("frameTitle"));
        rdoDaily.setText(schTaskRB.getString("jRadioButtonDaily"));
        rdoWeekly.setText(schTaskRB.getString("jRadioButtonWeekly"));
        rdoMonthly.setText(schTaskRB.getString("jRadioButtonMonthly"));
        rdoReportOn.setText(schTaskRB.getString("jRadi0ButtonReportOn"));
        
        lblHour.setText(schTaskRB.getString("jLabelHour"));
        lblMin.setText(schTaskRB.getString("jLabelMin"));
        
        btnCancel.setText(schTaskRB.getString("jButtonCancel"));
        
        cboWeekly.setModel(new javax.swing.DefaultComboBoxModel(new String[] { schTaskRB.getString("Sunday"),
                                                                                     schTaskRB.getString("Monday"),
                                                                                     schTaskRB.getString("Tuesday"),
                                                                                     schTaskRB.getString("Wednesday"),
                                                                                     schTaskRB.getString("Thursday"),
                                                                                     schTaskRB.getString("Friday"),
                                                                                     schTaskRB.getString("Saturday")}));
    }
    private void btnScheduleJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleJobActionPerformed
//        jLabelStatusBar.setText("  ");
//        if(roleName.equalsIgnoreCase(Constants.ROLE_SUPERADMIN) && !validateJListUserList()) {
//            //new com.see.truetransact.uicomponent.COptionPane().showMessageDialog(null,"Plese select user(s) from the User List.");
//            new com.see.truetransact.uicomponent.COptionPane().showMessageDialog(null, new ScheduleTaskRB().getString("msgPlSelectUsers"));
//            return;
//        }
///*        
//        ConfigurationManager config = IIEClient.getConfigurationManager();
//        String resource = config.getENV("BASE_URL")+config.getENV("SCHEDULE_TASK_RP");
//        XMLRequestAction xmlRequestAction = IIEClient.getConfigurationManager().getXMLRequestAction();
//        xmlRequestAction.addObserver(this);
// */
//        if(logger.isDebugEnabled()) logger.debug("calling ScheduleTask with from date"+jLabelFromDate.getText());
//        
//        hashMap = fillHashMap();
//        hashMap.put("action", "INSERT");
//        xmlRequestAction.perform(resourceURL,hashMap, "SCHEDULE_JOB");     
    }//GEN-LAST:event_btnScheduleJobActionPerformed
    private HashMap fillHashMap() {
//        String hour = String.valueOf(jComboBoxHour.getSelectedItem());
//        
//        if(hour.equalsIgnoreCase("ALL")) hour = "*";
//        
//        hashMap.put("reportname",jTextFieldRepName.getText());
//        hashMap.put("fieldfromtree",jTextFieldFieldFromTree.getText());
//        /*
//         * From and to date can be uncommented in case we give date boxes in UI.
//         */
//        //hashMap.put("fromDate",jTextFieldFromDate.getText());
//        //hashMap.put("toDate",jTextFieldToDate.getText());
//        
//        if(jRadioButtonDaily.isSelected()) {
//            hashMap.put("dayofweek","*");
//            hashMap.put("dayofmonth","*");
//        }
//        
//        hashMap.put("second","0");
//        hashMap.put("minute",String.valueOf(jComboBoxMin.getSelectedItem()));
//        hashMap.put("hour",hour);
//        
//        if(jRadi0ButtonReportOn.isSelected() && !jTextFieldReportOn.getText().trim().equals("")) {
//            hashMap.put("month",jTextFieldReportOn.getText().substring(0,2));
//            hashMap.put("dayofmonth",jTextFieldReportOn.getText().substring(3,5)); 
//            hashMap.put("year",jTextFieldReportOn.getText().substring(8,10));            
//        }else {
//            hashMap.put("month","*");
//            hashMap.put("year","*");        
//        }
//        
//        hashMap.put("task","com.see.rep.report.util.backup.BackupManager");
//        //hashMap.put("extrainfo","");        
// 
//        if(roleName.equalsIgnoreCase(Constants.ROLE_SUPERADMIN)) {
//            Object[] selectedUsers = jListUserList.getSelectedValues();
//            final int NO_OF_SELECTED_USERS = selectedUsers.length;
//            hashMap.put("userSize", String.valueOf(NO_OF_SELECTED_USERS));
//            for(int i=0; i<NO_OF_SELECTED_USERS; i++) {
//                hashMap.put("user"+i, selectedUsers[i]);
//            }
//            hashMap.put("status",ACTIVE_STATUS);
//        }else if(roleName.equalsIgnoreCase(Constants.ROLE_ADMIN)) {
//            hashMap.put("userSize", "1");
//            hashMap.put("user0", userName);
//            hashMap.put("status",ACTIVE_STATUS);
//        }else {
//            hashMap.put("userSize", "1");
//            hashMap.put("user0", userName);
//            hashMap.put("status",INACTIVE_STATUS);
//        } 
//         
// //       hashMap.put("userList",userName);
//        return hashMap;
        return null;
    }
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed
    private void rdoMonthlyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoMonthlyStateChanged
        if(rdoMonthly.isSelected()) {
            cboMonthly.setEnabled(true);
            hashMap.put("dayofweek","*");
            hashMap.put("dayofmonth",String.valueOf(cboMonthly.getSelectedItem()));            
        }else {
            cboMonthly.setSelectedIndex(0);
            cboMonthly.setEnabled(false);
        }          
    }//GEN-LAST:event_rdoMonthlyStateChanged
    private void rdoMonthlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoMonthlyActionPerformed
    }//GEN-LAST:event_rdoMonthlyActionPerformed
    private void rdoWeeklyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoWeeklyStateChanged
        if(rdoWeekly.isSelected()) {
            cboWeekly.setEnabled(true);
            hashMap.put("dayofweek",String.valueOf(cboWeekly.getSelectedIndex()));
            hashMap.put("dayofmonth","*");            
        }else {
            cboWeekly.setSelectedIndex(0);
            cboWeekly.setEnabled(false);
        }
    }//GEN-LAST:event_rdoWeeklyStateChanged
    private void rdoDailyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoDailyActionPerformed
        hashMap.put("dayofweek","*");
        hashMap.put("dayofmonth","*");        
    }//GEN-LAST:event_rdoDailyActionPerformed
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.dispose();
    }//GEN-LAST:event_exitForm
    public static void main(String args[]) {
        new ScheduleTaskUI().show();
    }
    
    public void update(java.util.Observable observable, Object obj) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnCancel;
    private com.see.truetransact.uicomponent.CButton btnScheduleJob;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.see.truetransact.uicomponent.CComboBox cboHour;
    private com.see.truetransact.uicomponent.CComboBox cboMin;
    private com.see.truetransact.uicomponent.CComboBox cboMonthly;
    private com.see.truetransact.uicomponent.CComboBox cboWeekly;
    private com.see.truetransact.uicomponent.CDateField cdtReportOn;
    private com.see.truetransact.uicomponent.CLabel lblHour;
    private com.see.truetransact.uicomponent.CLabel lblMin;
    private com.see.truetransact.uicomponent.CPanel panSchedule;
    private com.see.truetransact.uicomponent.CPanel panScheduleButton;
    private com.see.truetransact.uicomponent.CPanel panTimeSchedule;
    private com.see.truetransact.uicomponent.CRadioButton rdoDaily;
    private com.see.truetransact.uicomponent.CRadioButton rdoMonthly;
    private com.see.truetransact.uicomponent.CRadioButton rdoReportOn;
    private com.see.truetransact.uicomponent.CRadioButton rdoWeekly;
    // End of variables declaration//GEN-END:variables
}