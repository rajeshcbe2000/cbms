/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.
 **
 *
 * AccountTransferUI.java
 *
 * Created on August 6, 2003, 10:51 AM
 */

package com.see.truetransact.ui.operativeaccount;

import java.util.Observable;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;


import com.see.truetransact.clientutil.ClientConstants;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.clientutil.TableModel;
import com.see.truetransact.clientutil.ComboBoxModel;
import com.see.truetransact.uimandatory.UIMandatoryField;
import com.see.truetransact.uimandatory.MandatoryCheck;
import com.see.truetransact.clientutil.CMandatoryDialog;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.uicomponent.COptionPane;
import com.see.truetransact.clientproxy.ProxyParameters;

import org.apache.log4j.Logger;
/**
 *
 * @author  annamalai
 */
public class AccountTransferUI extends com.see.truetransact.uicomponent.CInternalFrame implements java.util.Observer,UIMandatoryField {
    AccountTransferOB _observable;
    private HashMap _mandatoryMap;
    java.util.ResourceBundle resourceBundle = java.util.ResourceBundle.getBundle("com.see.truetransact.ui.operativeaccount.AccountTransferRB", ProxyParameters.LANGUAGE);
    
    private final static Logger _log = Logger.getLogger(AccountTransferUI.class);
    /** Creates new form AccountTransferUI */
    public AccountTransferUI() {
        initComponents();
        initStartup();
    }
    
    private void initStartup() {
        setFieldNames();
        internationalize();
        setObservable();
        initComponentData();
        ClientUtil.enableDisable(this, false);
        setButtonEnableDisable();
        setMandatoryHashMap();
        _observable.resetStatus();
        _observable.resetForm();
        
    }
    
    public void setMandatoryHashMap() {
        _mandatoryMap = new HashMap();
        _mandatoryMap.put("cboProductId", new Boolean(true));
    }
    public HashMap getMandatoryHashMap() {
        return _mandatoryMap;
    }
    
    private void initComponentData() {
        cboProductId.setModel(_observable.getCbmProductId());
    }
    
    private void setObservable() {
        //_observable = new AccountTransferOB();
        
        /* Implementing Singleton pattern */
        _observable = AccountTransferOB.getInstance();
        _observable.addObserver(this);
    }
    
    private void setButtonEnableDisable() {
        btnNew.setEnabled(!btnNew.isEnabled());
        mitNew.setEnabled(btnNew.isEnabled());
        
        btnSave.setEnabled(!btnNew.isEnabled());
        btnCancel.setEnabled(!btnNew.isEnabled());
        mitSave.setEnabled(btnSave.isEnabled());
        mitCancel.setEnabled(btnCancel.isEnabled());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tbrHead = new javax.swing.JToolBar();
        btnNew = new com.see.truetransact.uicomponent.CButton();
        lblSpace2 = new com.see.truetransact.uicomponent.CLabel();
        btnSave = new com.see.truetransact.uicomponent.CButton();
        lblSpace17 = new com.see.truetransact.uicomponent.CLabel();
        btnCancel = new com.see.truetransact.uicomponent.CButton();
        lblSpace3 = new com.see.truetransact.uicomponent.CLabel();
        btnPrint = new com.see.truetransact.uicomponent.CButton();
        lblSpace18 = new com.see.truetransact.uicomponent.CLabel();
        btnClose = new com.see.truetransact.uicomponent.CButton();
        panStatus = new com.see.truetransact.uicomponent.CPanel();
        lblSpace1 = new com.see.truetransact.uicomponent.CLabel();
        lblStatus = new com.see.truetransact.uicomponent.CLabel();
        lblMsg = new com.see.truetransact.uicomponent.CLabel();
        panAcctTransfer = new com.see.truetransact.uicomponent.CPanel();
        panProductId = new com.see.truetransact.uicomponent.CPanel();
        lblProductId = new com.see.truetransact.uicomponent.CLabel();
        lblAccountHead = new com.see.truetransact.uicomponent.CLabel();
        cboProductId = new com.see.truetransact.uicomponent.CComboBox();
        panAccountHead = new javax.swing.JPanel();
        lblAccountHeadDisplay = new com.see.truetransact.uicomponent.CLabel();
        lblAccNo = new com.see.truetransact.uicomponent.CLabel();
        txtAccNo = new com.see.truetransact.uicomponent.CTextField();
        lblAccName = new com.see.truetransact.uicomponent.CLabel();
        btnView = new com.see.truetransact.uicomponent.CButton();
        panTable = new com.see.truetransact.uicomponent.CPanel();
        srpTable = new com.see.truetransact.uicomponent.CScrollPane();
        tblAccountTransfer = new com.see.truetransact.uicomponent.CTable();
        chkSelectAll = new com.see.truetransact.uicomponent.CCheckBox();
        mbrMain = new com.see.truetransact.uicomponent.CMenuBar();
        mnuProcess = new javax.swing.JMenu();
        mitNew = new javax.swing.JMenuItem();
        sptNew = new javax.swing.JSeparator();
        mitSave = new javax.swing.JMenuItem();
        mitCancel = new javax.swing.JMenuItem();
        sptCancel = new javax.swing.JSeparator();
        mitClose = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Inoperative to Operative");

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif"))); // NOI18N
        btnNew.setToolTipText("New");
        btnNew.setEnabled(false);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        tbrHead.add(btnNew);

        lblSpace2.setText("     ");
        tbrHead.add(lblSpace2);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif"))); // NOI18N
        btnSave.setToolTipText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        tbrHead.add(btnSave);

        lblSpace17.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace17.setText("     ");
        lblSpace17.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace17.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace17.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrHead.add(lblSpace17);

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CANCEL.gif"))); // NOI18N
        btnCancel.setToolTipText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        tbrHead.add(btnCancel);

        lblSpace3.setText("     ");
        tbrHead.add(lblSpace3);

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_PRINT.gif"))); // NOI18N
        btnPrint.setToolTipText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        tbrHead.add(btnPrint);

        lblSpace18.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace18.setText("     ");
        lblSpace18.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace18.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace18.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrHead.add(lblSpace18);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CLOSE.gif"))); // NOI18N
        btnClose.setToolTipText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        tbrHead.add(btnClose);

        getContentPane().add(tbrHead, java.awt.BorderLayout.NORTH);

        panStatus.setLayout(new java.awt.GridBagLayout());

        lblSpace1.setText(" Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblSpace1, gridBagConstraints);

        lblStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblStatus.setText("                      ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblStatus, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblMsg, gridBagConstraints);

        getContentPane().add(panStatus, java.awt.BorderLayout.SOUTH);

        panAcctTransfer.setLayout(new java.awt.GridBagLayout());

        panProductId.setName("panProductId");
        panProductId.setLayout(new java.awt.GridBagLayout());

        lblProductId.setText("Product ID");
        lblProductId.setName("lblProductId");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 8);
        panProductId.add(lblProductId, gridBagConstraints);

        lblAccountHead.setText("Account Head");
        lblAccountHead.setName("lblAccountHead");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 8);
        panProductId.add(lblAccountHead, gridBagConstraints);

        cboProductId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProductId.setName("cboProductId");
        cboProductId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProductIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProductId.add(cboProductId, gridBagConstraints);

        panAccountHead.setName("panAccountHead");
        panAccountHead.setLayout(new java.awt.GridBagLayout());

        lblAccountHeadDisplay.setForeground(new java.awt.Color(0, 51, 204));
        lblAccountHeadDisplay.setText("Test Head");
        lblAccountHeadDisplay.setFont(new java.awt.Font("MS Sans Serif", 1, 13)); // NOI18N
        lblAccountHeadDisplay.setMaximumSize(new java.awt.Dimension(600, 15));
        lblAccountHeadDisplay.setName("lblAccountHeadDisplay");
        lblAccountHeadDisplay.setPreferredSize(new java.awt.Dimension(600, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAccountHead.add(lblAccountHeadDisplay, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProductId.add(panAccountHead, gridBagConstraints);

        lblAccNo.setText("Account No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProductId.add(lblAccNo, gridBagConstraints);

        txtAccNo.setAllowAll(true);
        txtAccNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtAccNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAccNoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        panProductId.add(txtAccNo, gridBagConstraints);

        lblAccName.setForeground(new java.awt.Color(0, 51, 204));
        lblAccName.setFont(new java.awt.Font("MS Sans Serif", 1, 13)); // NOI18N
        lblAccName.setMaximumSize(new java.awt.Dimension(1000, 21));
        lblAccName.setMinimumSize(new java.awt.Dimension(100, 21));
        lblAccName.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProductId.add(lblAccName, gridBagConstraints);

        btnView.setText("View");
        btnView.setMaximumSize(new java.awt.Dimension(63, 23));
        btnView.setMinimumSize(new java.awt.Dimension(63, 23));
        btnView.setPreferredSize(new java.awt.Dimension(63, 23));
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProductId.add(btnView, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctTransfer.add(panProductId, gridBagConstraints);

        panTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Reactivate Account"));
        panTable.setMinimumSize(new java.awt.Dimension(700, 403));
        panTable.setName("panTable");
        panTable.setPreferredSize(new java.awt.Dimension(700, 403));
        panTable.setLayout(new java.awt.GridBagLayout());

        srpTable.setMinimumSize(new java.awt.Dimension(700, 420));
        srpTable.setName("srpTable");
        srpTable.setPreferredSize(new java.awt.Dimension(700, 420));

        tblAccountTransfer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblAccountTransfer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAccountTransferMouseClicked(evt);
            }
        });
        srpTable.setViewportView(tblAccountTransfer);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panTable.add(srpTable, gridBagConstraints);

        chkSelectAll.setText("Select All");
        chkSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSelectAllActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTable.add(chkSelectAll, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctTransfer.add(panTable, gridBagConstraints);

        getContentPane().add(panAcctTransfer, java.awt.BorderLayout.CENTER);

        mnuProcess.setText("Process");

        mitNew.setText("New");
        mitNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitNewActionPerformed(evt);
            }
        });
        mnuProcess.add(mitNew);
        mnuProcess.add(sptNew);

        mitSave.setText("Save");
        mnuProcess.add(mitSave);

        mitCancel.setText("Cancel");
        mnuProcess.add(mitCancel);
        mnuProcess.add(sptCancel);

        mitClose.setText("Close");
        mnuProcess.add(mitClose);

        mbrMain.add(mnuProcess);

        setJMenuBar(mbrMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        if( CommonUtil.convertObjToStr(txtAccNo.getText()).length()==0){
            txtAccNo.setText("");
            lblAccName.setText("");
        }
        getTableData();
    }//GEN-LAST:event_btnViewActionPerformed
    
    private void txtAccNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAccNoFocusLost
        // TODO add your handling code here:
        setAccountName();
    }//GEN-LAST:event_txtAccNoFocusLost
    
    public void setAccountName(){
        String AccountNo = (String) txtAccNo.getText();
        if (AccountNo.length()>0) {
            HashMap resultMap = new HashMap();
            final HashMap accountNameMap = new HashMap();
            List resultList = new ArrayList();
            try {
                accountNameMap.put(CommonConstants.PRODUCT_ID, _observable.getCboProductId());
                accountNameMap.put(CommonConstants.BRANCH_ID, com.see.truetransact.ui.TrueTransactMain.BRANCH_ID);
                accountNameMap.put("ACT_NUM",AccountNo);
                resultList = ClientUtil.executeQuery("getAccountTransMap",accountNameMap);
                if(resultList != null && resultList.size() > 0){
                    resultMap=(HashMap) resultList.get(0);
                    //                    System.out.println("!!!! resultMap :"+resultMap);
                    lblAccName.setText(CommonUtil.convertObjToStr(resultMap.get("Account Holder's Name")));
                } else {
                    ClientUtil.displayAlert("Invalid Account Number OR Account is in Operative status.");
                    txtAccNo.setText("");
                    lblAccName.setText("");
                }
            }
            catch(Exception e){
                e.printStackTrace();
            }
        }
    }
    private void tblAccountTransferMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAccountTransferMouseClicked
        // TODO add your handling code here:
        final int selectedRow = tblAccountTransfer.getSelectionModel().getMinSelectionIndex();
        final int selectedCol = tblAccountTransfer.getSelectedColumn();
        int ctSelRow = 0;
        boolean chkSelectAll = true;
        final int rowCt = tblAccountTransfer.getRowCount();
        /** When Select All Checkbox is clicked */
        if (selectedRow >= 0 && selectedCol == 0 && _observable.getChkSelectAll()) {
            _observable.setChkSelectAll(false);
        }
        /** The condition is the number of rows selected is equal to the total rows in the table
         *  When this condition occurs, the select all checkbox should be checked
         */
        if (ctRowsSelected() == tblAccountTransfer.getRowCount()){
            _log.info("ctRowsSelected() == tblAccountTransfer.getRowCount()");
            _observable.setChkSelectAll(true);
        }
    }//GEN-LAST:event_tblAccountTransferMouseClicked
    
    //    private void txtAccNoActionPerformed() {
    //        // TODO add your handling code here:
    //        HashMap hash = new HashMap();
    //        String ACCOUNTNO = (String) txtAccNo.getText();
    //        if (ACCOUNTNO.length()>0) {
    //            if (observable.checkAcNoWithoutProdType(ACCOUNTNO)) {
    //                cboProdId.setModel(observable.getCbmProdId());
    //                cboProdIdActionPerformed(null);
    //                txtAccNo.setText(ACCOUNTNO);
    //                String prodType = ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString();
    //            } else {
    //                ClientUtil.showAlertWindow("Invalid Account No.");
    //                txtAccNo.setText("");
    //                return;
    //            }
    //        }
    //        hash.put("ACT_NUM", hash.get("ACCOUNTNO"));
    //        hash.put("PROD_ID", ((ComboBoxModel) cboProdId.getModel()).getKeyForSelected());
    //        hash.put("SELECTED_BRANCH",ProxyParameters.BRANCH_ID);
    //
    //        observable.setAccountName(ACCOUNTNO);
    //
    //            viewType = ACCNO;
    //            HashMap listMap = new HashMap();
    //            if(observable.getLblAccName().length()>0){
    //                updateOBFields();
    //                hash.put("PROD_ID", ((ComboBoxModel) cboProdId.getModel()).getKeyForSelected());
    //                hash.put("SELECTED_BRANCH",ProxyParameters.BRANCH_ID);
    ////                lst=ClientUtil.executeQuery("Cash.getAccountList"
    ////                + ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString(),hash);
    //                fillData(hash);
    //                observable.setLblAccName("");
    //            }else{
    //                ClientUtil.showAlertWindow(" Invalid Number Choose correct number");
    //                txtAccNo.setText("");
    //            }
    //    }
    
    private void mitNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitNewActionPerformed
        // Add your handling code here:
        btnNewActionPerformed(evt);
    }//GEN-LAST:event_mitNewActionPerformed
    
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // Add your handling code here:
        _observable.resetForm();
        ClientUtil.enableDisable(this, true);
        setButtonEnableDisable();
        _observable.setActionType(ClientConstants.ACTIONTYPE_NEW);
        _observable.setStatus();
        
        //__ To Save the data in the Internal Frame...
        setModified(true);
    }//GEN-LAST:event_btnNewActionPerformed
    
    /** Returns the number of rows selected*/
    private int ctRowsSelected(){
        int ctSelRow = 0 ;
        final int rowCount = tblAccountTransfer.getRowCount();
        for (int i = 0;i<rowCount;i++){
            if (((Boolean)(((com.see.truetransact.clientutil.TableModel)tblAccountTransfer.getModel()).getValueAt(i, 0))).booleanValue()){
                ctSelRow++;
            }
        }
        return ctSelRow;
    }
    
    private void chkSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSelectAllActionPerformed
        // Add your handling code here:
        _observable.setChkSelectAll(((com.see.truetransact.uicomponent.CCheckBox)evt.getSource()).isSelected());
        getTableData();
    }//GEN-LAST:event_chkSelectAllActionPerformed
    
    /* Purpose: To get the data for the table and display it*/
    private void getTableData(){
        final HashMap hash = new HashMap();
        final HashMap where = new HashMap();
        hash.put(CommonConstants.PRODUCT_ID, _observable.getCboProductId());
        hash.put(CommonConstants.BRANCH_ID, com.see.truetransact.ui.TrueTransactMain.BRANCH_ID);
        if (txtAccNo.getText().length()>0)
            hash.put("ACT_NUM",(String)txtAccNo.getText());
        where.put(CommonConstants.MAP_WHERE, hash);
        _log.info("_observable.getCboProductId()"+_observable.getCboProductId());
        _observable.fillTable(where);
        if (tblAccountTransfer.getRowCount() > 0){
            //When the row count of the table is more than Zero
            chkSelectAll.setEnabled(true);
        }
    }
    
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // Add your handling code here:
        _observable.resetForm();
        cifClosingAlert();
        //        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed
    
    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_btnPrintActionPerformed
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // Add your handling code here:
        _observable.setActionType(ClientConstants.ACTIONTYPE_CANCEL);
        _observable.resetForm();
        txtAccNo.setText("");
        lblAccName.setText("");
        ClientUtil.enableDisable(this, false);
        setButtonEnableDisable();
        _observable.setStatus();
        
        //__ Make the Screen Closable..
        setModified(false);
    }//GEN-LAST:event_btnCancelActionPerformed
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Add your handling code here:
        updateOBFields();
        String mandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(), panProductId);
        if (mandatoryMessage.length() > 1){
            displayAlert(mandatoryMessage);
        }else{
            savePerformed();
            txtAccNo.setText("");
            lblAccName.setText("");
        }
        
        //__ Make the Screen Closable..
        setModified(false);
    }//GEN-LAST:event_btnSaveActionPerformed
        private void cboProductIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProductIdActionPerformed
            // Add your handling code here:
            updateOBFields();
            chkSelectAll.setEnabled(false);
            if( _observable.getCboProductId().length() > 0){
                System.out.println("prod id length = " + _observable.getCboProductId().length());
                //When the selected ProductId is not empty string
                cboProductIdPerformed();
            }else{
                _observable.resetForm();
            }
    }    private void mitCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-LAST:event_cboProductIdActionPerformed
        btnCloseActionPerformed(evt);
    }
    
    /* Consits of operations to be done when an valid Product Id is selected */
    private void cboProductIdPerformed(){
        _log.info("entered cboProductIdPerformed");
        _observable.resetAccTransferData();
        _observable.getAccountHeadForProduct();
        //        getTableData();
        _observable.ttNotifyObservers();
    }
    
    /* Consits of operations to be done when the mandatory condition is satisfied and SaveAction is performed*/
    private void savePerformed(){
        if (_observable.getChkSelectAll() || ctRowsSelected() >0){
            //Condition: The select all check box is checked or atleast one row in the table is selected
            clickedCheckBox();
        }else {
            notClickedCheckBox();
        }
    }
    
    /* Performed when atleast one checkbox is checked in the Table
     * The save action is performed
     */
    private void clickedCheckBox(){
        _observable.doAction();
        ClientUtil.enableDisable(this, false);
        setButtonEnableDisable();
        _observable.resetForm();
        _observable.setResultStatus();
    }
    
    
    /* Performed when no checkbox is checked in the Table
     * An popup is shown to indicate that no row is checked in the table
     */
    private void notClickedCheckBox(){
        String[] options = { CommonConstants.OK};
        AccountTransferRB resourceBundle = new AccountTransferRB();
        COptionPane.showOptionDialog(null, resourceBundle.getString("noSelectionErrMsg"), CommonConstants.WARNINGTITLE,
        COptionPane.DEFAULT_OPTION, COptionPane.WARNING_MESSAGE,
        null, options, options[0]);
    }
    
    private void setFieldNames() {
        cboProductId.setName("cboProductId");
        lblAccountHead.setName("lblAccountHead");
        lblAccountHeadDisplay.setName("lblAccountHeadDisplay");
        lblProductId.setName("lblProductId");
        mbrMain.setName("mbrMain");
        panProductId.setName("panProductId");
        panTable.setName("panTable");
        srpTable.setName("srpTable");
        tblAccountTransfer.setName("tblAccountTransfer");
    }
    
    private void internationalize() {
        //        AccountTransferRB resourceBundle = new AccountTransferRB();
        lblAccountHeadDisplay.setText(resourceBundle.getString("lblAccountHeadDisplay"));
        lblProductId.setText(resourceBundle.getString("lblProductId"));
        lblAccountHead.setText(resourceBundle.getString("lblAccountHead"));
    }
    
    public void update(Observable observed, Object arg) {
        lblAccountHeadDisplay.setText(_observable.getLblAccountHeadDisplay());
        cboProductId.setSelectedItem(_observable.getCboProductId());
        tblAccountTransfer.setModel(_observable.getTblAccountTransferModel());
        chkSelectAll.setSelected(_observable.getChkSelectAll());
        lblStatus.setText(_observable.getLblStatus());
        _log.info("update/_observable.getLblStatus():"+_observable.getLblStatus());
    }
    
    private void updateOBFields() {
        _observable.setLblAccountHeadDisplay(lblAccountHeadDisplay.getText());
        _observable.setCboProductId((String)(((ComboBoxModel)(cboProductId).getModel())).getKeyForSelected());
        _observable.setChkSelectAll(chkSelectAll.isSelected());
        _observable.ttNotifyObservers();
    }
    
    private String checkMandatory(javax.swing.JComponent component){
        return new MandatoryCheck().checkMandatory(getClass().getName(), component);
    }
    
    private void displayAlert(String message){
        CMandatoryDialog cmd = new CMandatoryDialog();
        cmd.setMessage(message);
        cmd.setModal(true);
        cmd.show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnCancel;
    private com.see.truetransact.uicomponent.CButton btnClose;
    private com.see.truetransact.uicomponent.CButton btnNew;
    private com.see.truetransact.uicomponent.CButton btnPrint;
    private com.see.truetransact.uicomponent.CButton btnSave;
    private com.see.truetransact.uicomponent.CButton btnView;
    private com.see.truetransact.uicomponent.CComboBox cboProductId;
    private com.see.truetransact.uicomponent.CCheckBox chkSelectAll;
    private com.see.truetransact.uicomponent.CLabel lblAccName;
    private com.see.truetransact.uicomponent.CLabel lblAccNo;
    private com.see.truetransact.uicomponent.CLabel lblAccountHead;
    private com.see.truetransact.uicomponent.CLabel lblAccountHeadDisplay;
    private com.see.truetransact.uicomponent.CLabel lblMsg;
    private com.see.truetransact.uicomponent.CLabel lblProductId;
    private com.see.truetransact.uicomponent.CLabel lblSpace1;
    private com.see.truetransact.uicomponent.CLabel lblSpace17;
    private com.see.truetransact.uicomponent.CLabel lblSpace18;
    private com.see.truetransact.uicomponent.CLabel lblSpace2;
    private com.see.truetransact.uicomponent.CLabel lblSpace3;
    private com.see.truetransact.uicomponent.CLabel lblStatus;
    private com.see.truetransact.uicomponent.CMenuBar mbrMain;
    private javax.swing.JMenuItem mitCancel;
    private javax.swing.JMenuItem mitClose;
    private javax.swing.JMenuItem mitNew;
    private javax.swing.JMenuItem mitSave;
    private javax.swing.JMenu mnuProcess;
    private javax.swing.JPanel panAccountHead;
    private com.see.truetransact.uicomponent.CPanel panAcctTransfer;
    private com.see.truetransact.uicomponent.CPanel panProductId;
    private com.see.truetransact.uicomponent.CPanel panStatus;
    private com.see.truetransact.uicomponent.CPanel panTable;
    private javax.swing.JSeparator sptCancel;
    private javax.swing.JSeparator sptNew;
    private com.see.truetransact.uicomponent.CScrollPane srpTable;
    private com.see.truetransact.uicomponent.CTable tblAccountTransfer;
    private javax.swing.JToolBar tbrHead;
    private com.see.truetransact.uicomponent.CTextField txtAccNo;
    // End of variables declaration//GEN-END:variables
}
