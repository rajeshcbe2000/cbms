/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.
 **
 *
 * SBInterestApplicationUI.java
 *
 * Created on March 1, 2019, 11:23 AM
 */

package com.see.truetransact.ui.operativeaccount.interestapplication;

import com.see.truetransact.ui.sysadmin.lookup.*;
import com.see.truetransact.clientutil.CMandatoryDialog;
import com.see.truetransact.uimandatory.UIMandatoryField;
import com.see.truetransact.uimandatory.MandatoryCheck;
import com.see.truetransact.clientutil.ClientConstants;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.ui.common.viewall.ViewAll;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.clientutil.EnhancedTableModel;

import javax.swing.table.DefaultTableModel;
import com.see.truetransact.ui.TrueTransactMain;
import com.see.truetransact.ui.common.authorize.AuthorizeUI;
import com.see.truetransact.clientproxy.ProxyParameters;
import com.see.truetransact.clientutil.ttrintegration.TTIntegration;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.SwingWorker;
/**
 *
 * @author  Lohith R.
 */
public class SBInterestApplicationUI extends com.see.truetransact.uicomponent.CInternalFrame implements Observer,UIMandatoryField{
    private HashMap mandatoryMap;
    private SBInterestApplicationOB observable;
    //    LookupMasterRB resourceBundle = new LookupMasterRB();
    java.util.ResourceBundle resourceBundle = java.util.ResourceBundle.getBundle("com.see.truetransact.ui.sysadmin.lookup.LookupMasterRB", ProxyParameters.LANGUAGE);
    
    int result;
    private boolean selectedTableYesNo = false;
    private int isEditable = -1;
    private final String NO = "N";
    int viewType = -1;
    final int EDIT=0, AUTHORIZE=1, VIEW =3;
    boolean isFilled = false;
    private Date currDt = null;
    /** Creates new form LookupMasterUI */
    public SBInterestApplicationUI() {
        currDt = ClientUtil.getCurrentDate();
        initComponents();
        initStartUp();
    }
    
    /** Initialzation of UI */
    private void initStartUp(){        
        internationalize();
        try {
            observable = new SBInterestApplicationOB();
        } catch (Exception ex) {
            Logger.getLogger(SBInterestApplicationUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        observable.addObserver(this);
        setMandatoryHashMap();
        setHelpMessage();
        setMaximumLength();        
        setButtonEnableDisable();
        setButtonLookupMasterTab(false);
        setFieldInvisible();       
        observable.resetStatus();      
        observable.resetFields();
        setLookupIdDisable();
        ClientUtil.enableDisable(this, true);
        cboExecutionType.setModel(observable.getCbmExecutionType());
        cboProduct.setModel(observable.getCbmProduct());
        tdtFromDt.setEnabled(false);
        tdtToDt.setEnabled(false);
    }
   
    private void internationalize() {        
             
    }
    
    public void setMandatoryHashMap() {
        mandatoryMap = new HashMap();
        mandatoryMap.put("txtLookupRef", new Boolean(true));
        mandatoryMap.put("txtLookupDesc", new Boolean(true));
        mandatoryMap.put("txtLookupID", new Boolean(true));
    }
    
    public HashMap getMandatoryHashMap() {
        return mandatoryMap;
    }
    
    public void update(Observable observed, Object arg) {        
        lblStatus.setText(observable.getLblStatus());
    }
    
    public void updateOBFields() {        
      
    }
    
    public void setHelpMessage() {
        LookupMasterMRB objMandatoryRB = new LookupMasterMRB();        
    }
    
    private void setMaximumLength(){
    
    }
    
    private void setFieldInvisible(){
       
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panMain = new com.see.truetransact.uicomponent.CPanel();
        panText = new com.see.truetransact.uicomponent.CPanel();
        panLookupMaster = new com.see.truetransact.uicomponent.CPanel();
        lblFromDt = new com.see.truetransact.uicomponent.CLabel();
        lblToDt = new com.see.truetransact.uicomponent.CLabel();
        btnProcess = new com.see.truetransact.uicomponent.CButton();
        btnView = new com.see.truetransact.uicomponent.CButton();
        btnPost = new com.see.truetransact.uicomponent.CButton();
        btnExit = new com.see.truetransact.uicomponent.CButton();
        lblExecutionType = new com.see.truetransact.uicomponent.CLabel();
        lblProduct = new com.see.truetransact.uicomponent.CLabel();
        cboExecutionType = new com.see.truetransact.uicomponent.CComboBox();
        cboProduct = new com.see.truetransact.uicomponent.CComboBox();
        tdtFromDt = new com.see.truetransact.uicomponent.CDateField();
        tdtToDt = new com.see.truetransact.uicomponent.CDateField();
        panStatus = new com.see.truetransact.uicomponent.CPanel();
        lblSpace3 = new com.see.truetransact.uicomponent.CLabel();
        lblStatus = new com.see.truetransact.uicomponent.CLabel();
        lblMsg = new com.see.truetransact.uicomponent.CLabel();
        mbrMain = new com.see.truetransact.uicomponent.CMenuBar();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Savings Bank Interest Application");
        setMinimumSize(new java.awt.Dimension(650, 400));
        setPreferredSize(new java.awt.Dimension(650, 400));

        panMain.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        panText.setLayout(new java.awt.GridBagLayout());

        panLookupMaster.setBorder(javax.swing.BorderFactory.createTitledBorder("Interest Application"));

        lblFromDt.setText("From Date");

        lblToDt.setText("To Date");

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.setMaximumSize(new java.awt.Dimension(81, 27));
        btnView.setMinimumSize(new java.awt.Dimension(81, 27));
        btnView.setPreferredSize(new java.awt.Dimension(81, 27));
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnPost.setText("Post");
        btnPost.setMaximumSize(new java.awt.Dimension(81, 27));
        btnPost.setMinimumSize(new java.awt.Dimension(81, 27));
        btnPost.setPreferredSize(new java.awt.Dimension(81, 27));
        btnPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPostActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.setMaximumSize(new java.awt.Dimension(81, 27));
        btnExit.setMinimumSize(new java.awt.Dimension(81, 27));
        btnExit.setPreferredSize(new java.awt.Dimension(81, 27));
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        lblExecutionType.setText("Excecution Type");

        lblProduct.setText("Product");

        cboExecutionType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboExecutionTypeItemStateChanged(evt);
            }
        });
        cboExecutionType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboExecutionTypeActionPerformed(evt);
            }
        });

        cboProduct.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboProductItemStateChanged(evt);
            }
        });
        cboProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panLookupMasterLayout = new javax.swing.GroupLayout(panLookupMaster);
        panLookupMaster.setLayout(panLookupMasterLayout);
        panLookupMasterLayout.setHorizontalGroup(
            panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panLookupMasterLayout.createSequentialGroup()
                .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panLookupMasterLayout.createSequentialGroup()
                        .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panLookupMasterLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(lblToDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panLookupMasterLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(lblFromDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tdtFromDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tdtToDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnExit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panLookupMasterLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblExecutionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cboExecutionType, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .addComponent(cboProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnProcess, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panLookupMasterLayout.setVerticalGroup(
            panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panLookupMasterLayout.createSequentialGroup()
                .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panLookupMasterLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboExecutionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panLookupMasterLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(lblExecutionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panLookupMasterLayout.createSequentialGroup()
                        .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tdtFromDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFromDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panLookupMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblToDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tdtToDt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panLookupMasterLayout.createSequentialGroup()
                        .addComponent(btnPost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panMainLayout = new javax.swing.GroupLayout(panMain);
        panMain.setLayout(panMainLayout);
        panMainLayout.setHorizontalGroup(
            panMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMainLayout.createSequentialGroup()
                .addComponent(panText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(panMainLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(panLookupMaster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panMainLayout.setVerticalGroup(
            panMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMainLayout.createSequentialGroup()
                .addComponent(panText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panLookupMaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(panMain, java.awt.BorderLayout.CENTER);

        panStatus.setLayout(new java.awt.GridBagLayout());

        lblSpace3.setText(" Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblSpace3, gridBagConstraints);

        lblStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblStatus.setText("                      ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblStatus, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblMsg, gridBagConstraints);

        getContentPane().add(panStatus, java.awt.BorderLayout.SOUTH);
        setJMenuBar(mbrMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents
                //    public void authorizeStatus(String authorizeStatus) {
    //        if (viewType == AUTHORIZE && isFilled){
    //            HashMap singleAuthorizeMap = new HashMap();
    //            singleAuthorizeMap.put("STATUS", authorizeStatus);
    //            singleAuthorizeMap.put("USER_ID", TrueTransactMain.USER_ID);
    //            singleAuthorizeMap.put("AUTHORIZEDT", currDt.clone());
    //            singleAuthorizeMap.put("LOOKUP ID", CommonUtil.convertObjToStr(txtLookupID.getText()));
    //            ClientUtil.execute("authorizeLookUpData", singleAuthorizeMap);
    //
    //            btnSave.setEnabled(true);
    //            btnCancelActionPerformed(null);
    //        } else{
    //            viewType = AUTHORIZE;
    //            HashMap mapParam = new HashMap();
    //
    //            //__ To Save the data in the Internal Frame...
    //            setModified(true);
    //
    //            mapParam.put(CommonConstants.MAP_NAME, "getLookUpAuthorizeList");
    //            mapParam.put(CommonConstants.UPDATE_MAP_NAME, "authorizeLookUpData");
    //
    //            isFilled = false;
    //            AuthorizeStatusUI authorizeUI = new AuthorizeStatusUI(this, mapParam);
    //            authorizeUI.show();
    //
    //            lblStatus.setText(ClientConstants.RESULT_STATUS[authorizeUI.getResultStatus()]);
    //            btnSave.setEnabled(false);
    //        }
    //    }
    
    public void authorizeStatus(String authorizeStatus) {
       
    }
    
    public void authorize(HashMap map) {
      
    }
    private void btnPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPostActionPerformed
       //postSBInterestApplication
        final HashMap paramMap = new HashMap();
        paramMap.put("EXCTYPE",CommonUtil.convertObjToStr(observable.getCbmExecutionType().getKeyForSelected()));
        paramMap.put("PROD_ID",CommonUtil.convertObjToStr(observable.getCbmProduct().getKeyForSelected()));
        paramMap.put("BRANCH_CODE",TrueTransactMain.BRANCH_ID);
        paramMap.put("USER",TrueTransactMain.USER_ID);
        paramMap.put("FROM_DT",DateUtil.getDateMMDDYYYY(tdtFromDt.getDateValue()));
        paramMap.put("TO_DT",DateUtil.getDateMMDDYYYY(tdtToDt.getDateValue()));
        paramMap.put("CURR_DT",currDt);
        
        CommonUtil comm = new CommonUtil();
        final JDialog loading = comm.addProgressBar();
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws InterruptedException /**
             * Execute some operation
             */
            {
                try {
                    doPost(paramMap);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            }

            @Override
            protected void done() {
                loading.dispose();
            }
        };
        worker.execute();
        loading.show();
        try {
            worker.get();
        } catch (Exception e1) {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_btnPostActionPerformed
        
    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        String reportName = "";
        TTIntegration ttIntgration = null;
        HashMap processMap = new HashMap();
        HashMap paramMap = new HashMap();
        paramMap.put("EXCTYPE", CommonUtil.convertObjToStr(observable.getCbmExecutionType().getKeyForSelected()));
        paramMap.put("PROD_ID", CommonUtil.convertObjToStr(observable.getCbmProduct().getKeyForSelected()));
        paramMap.put("BRANCH_CODE", TrueTransactMain.BRANCH_ID);
        paramMap.put("USER", TrueTransactMain.USER_ID);
        paramMap.put("FROM_DT", DateUtil.getDateMMDDYYYY(tdtFromDt.getDateValue()));
        paramMap.put("TO_DT", DateUtil.getDateMMDDYYYY(tdtToDt.getDateValue()));
        paramMap.put("CURR_DT", currDt);
        List paramList = ClientUtil.executeQuery("getSBInterestApplicationReportName", paramMap);
        if (paramList != null && paramList.size() > 0) {
            processMap = (HashMap) paramList.get(0);
            if (processMap.containsKey("REPORTNAME") && processMap.get("REPORTNAME") != null) {
                reportName = CommonUtil.convertObjToStr(processMap.get("REPORTNAME"));
            }
        }
        ttIntgration.setParam(paramMap);
        ttIntgration.integrationForPrint(reportName, true);
    }//GEN-LAST:event_btnViewActionPerformed
    
    private void displayAlert(String message){
        final CMandatoryDialog cmd = new CMandatoryDialog();
        cmd.setMessage(message);
        cmd.setModal(true);
        cmd.show();
    }    
 
    private void doSave(HashMap paramMap){
       HashMap processMap = new HashMap();
       List paramList = ClientUtil.executeQuery("processSBInterestApplication", paramMap);
       if(paramList != null && paramList.size() > 0){
          processMap = (HashMap) paramList.get(0);
          if(processMap.containsKey("PROCESS_STATUS") && processMap.get("PROCESS_STATUS") != null){
              String message = CommonUtil.convertObjToStr(processMap.get("PROCESS_STATUS"));
              ClientUtil.showMessageWindow(message);
              if(message.equalsIgnoreCase("Processing successfully completed")){
                  btnView.setEnabled(true);
                  btnPost.setEnabled(true);
                  btnProcess.setEnabled(false);
              }else{
                  btnView.setEnabled(false);
                  btnPost.setEnabled(false);
              }
          }else{
                btnView.setEnabled(false);
                btnPost.setEnabled(false);
          }
       }          
    }
    
    
    private void doPost(HashMap paramMap){
       HashMap processMap = new HashMap();
       List paramList = ClientUtil.executeQuery("postSBInterestApplication", paramMap);
       if(paramList != null && paramList.size() > 0){
          processMap = (HashMap) paramList.get(0);
          if(processMap.containsKey("POST_STATUS") && processMap.get("POST_STATUS") != null){
              String message = CommonUtil.convertObjToStr(processMap.get("POST_STATUS"));
              ClientUtil.showMessageWindow(message);
              btnPost.setEnabled(false);
          }
       }          
    }
    
    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
 
        final HashMap paramMap = new HashMap();
        paramMap.put("EXCTYPE",CommonUtil.convertObjToStr(observable.getCbmExecutionType().getKeyForSelected()));
        paramMap.put("PROD_ID",CommonUtil.convertObjToStr(observable.getCbmProduct().getKeyForSelected()));
        paramMap.put("BRANCH_CODE",TrueTransactMain.BRANCH_ID);
        paramMap.put("USER",TrueTransactMain.USER_ID);
        paramMap.put("FROM_DT",DateUtil.getDateMMDDYYYY(tdtFromDt.getDateValue()));
        paramMap.put("TO_DT",DateUtil.getDateMMDDYYYY(tdtToDt.getDateValue()));
        
        CommonUtil comm = new CommonUtil();
        final JDialog loading = comm.addProgressBar();
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws InterruptedException /**
             * Execute some operation
             */
            {
                try {
                    doSave(paramMap);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            }

            @Override
            protected void done() {
                loading.dispose();
            }
        };
        worker.execute();
        loading.show();
        try {
            worker.get();
        } catch (Exception e1) {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_btnProcessActionPerformed
                                    
   
    
    /** Called Automatically when viewAll() is Called...
     * @param param The selected data from the viewAll() is passed as a param
     */
    public void fillData(Object param) {
        //__ To Save the data in the Internal Frame...
       
    }
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void cboExecutionTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboExecutionTypeItemStateChanged
        // TODO add your handling code here:
      
    }//GEN-LAST:event_cboExecutionTypeItemStateChanged

    private void cboProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProductActionPerformed
        // TODO add your handling code here:
       // System.out.println("****88" +  CommonUtil.convertObjToStr(observable.getCbmProduct().getKeyForSelected()));
        tdtFromDt.setDateValue("");
        tdtToDt.setDateValue("");
        btnProcess.setEnabled(false);
        if(CommonUtil.convertObjToStr(cboProduct.getSelectedItem()).length() > 0){
            HashMap paramMap = new HashMap();
            paramMap.put("EXCTYPE",CommonUtil.convertObjToStr(observable.getCbmExecutionType().getKeyForSelected()));
            paramMap.put("PROD_ID",CommonUtil.convertObjToStr(observable.getCbmProduct().getKeyForSelected()));
            paramMap.put("BRANCH_CODE",TrueTransactMain.BRANCH_ID);
            List paramList = ClientUtil.executeQuery("getExecutionParametersForInterestApplication", paramMap);
            if(paramList != null && paramList.size() > 0){
                paramMap = (HashMap)paramList.get(0);
                if(paramMap.containsKey("FRDT") && paramMap.get("FRDT") != null){
                    String fromDt = CommonUtil.convertObjToStr(paramMap.get("FRDT"));
                    tdtFromDt.setDateValue(fromDt);
                }if(paramMap.containsKey("TODT") && paramMap.get("TODT") != null){
                    String toDt = CommonUtil.convertObjToStr(paramMap.get("TODT"));
                    tdtToDt.setDateValue(toDt);
                }
            }
            
            if(tdtFromDt.getDateValue().length() > 0 && tdtToDt.getDateValue().length() > 0){
                HashMap validateMap = new HashMap();
                validateMap.put("EXCTYPE",CommonUtil.convertObjToStr(observable.getCbmExecutionType().getKeyForSelected()));
                validateMap.put("PROD_ID",CommonUtil.convertObjToStr(observable.getCbmProduct().getKeyForSelected()));
                validateMap.put("FROM_DT",DateUtil.getDateMMDDYYYY(tdtFromDt.getDateValue()));
                validateMap.put("USER", TrueTransactMain.USER_ID);               
                validateMap.put("TO_DT", DateUtil.getDateMMDDYYYY(tdtToDt.getDateValue()));
                validateMap.put("CURR_DT", currDt);
                validateMap.put("BRANCH_CODE",TrueTransactMain.BRANCH_ID);
                List validateList = ClientUtil.executeQuery("getvalidateParametersForInterestApplication", validateMap);
                if(validateList != null && validateList.size() > 0){
                  validateMap = (HashMap)validateList.get(0);
                  if(validateMap.containsKey("MESSAGE") && validateMap.get("MESSAGE") != null){
                      String message = CommonUtil.convertObjToStr(validateMap.get("MESSAGE"));
                      ClientUtil.showMessageWindow(message);
                      if(message.startsWith("1")){
                          btnProcess.setEnabled(true);
                      }else{
                          btnProcess.setEnabled(false);
                      }
                  }else{
                      btnProcess.setEnabled(false);
                  }
                }else{
                    btnProcess.setEnabled(false);
                }               
            }            
        }
      
    }//GEN-LAST:event_cboProductActionPerformed

    private void cboExecutionTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExecutionTypeActionPerformed
        // TODO add your handling code here:
          if(CommonUtil.convertObjToStr(cboExecutionType.getSelectedItem()).length() > 0){
            observable.populateProductId();
            cboProduct.setModel(observable.getCbmProduct());
          }  
    }//GEN-LAST:event_cboExecutionTypeActionPerformed

    private void cboProductItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboProductItemStateChanged
        // TODO add your handling code here:
//        System.out.println("****88" +  CommonUtil.convertObjToStr(observable.getCbmProduct().getKeyForSelected()));
//        tdtFromDt.setDateValue("");
//        tdtToDt.setDateValue("");
//        if(CommonUtil.convertObjToStr(cboProduct.getSelectedItem()).length() > 0){
//            HashMap paramMap = new HashMap();
//            paramMap.put("EXCTYPE",CommonUtil.convertObjToStr(observable.getCbmExecutionType().getKeyForSelected()));
//            paramMap.put("PROD_ID",CommonUtil.convertObjToStr(observable.getCbmProduct().getKeyForSelected()));
//            paramMap.put("BRANCH_CODE",TrueTransactMain.BRANCH_ID);
//            List paramList = ClientUtil.executeQuery("getExecutionParametersForInterestApplication", paramMap);
//            if(paramList != null && paramList.size() > 0){
//                paramMap = (HashMap)paramList.get(0);
//                if(paramMap.containsKey("FRDT") && paramMap.get("FRDT") != null){
//                    String fromDt = CommonUtil.convertObjToStr(paramMap.get("FRDT"));
//                    tdtFromDt.setDateValue(fromDt);
//                }if(paramMap.containsKey("TODT") && paramMap.get("TODT") != null){
//                    String toDt = CommonUtil.convertObjToStr(paramMap.get("TODT"));
//                    tdtToDt.setDateValue(toDt);
//                }
//            }
//            
//            if(tdtFromDt.getDateValue().length() > 0 && tdtToDt.getDateValue().length() > 0){
//                HashMap validateMap = new HashMap();
//                validateMap.put("EXCTYPE",CommonUtil.convertObjToStr(observable.getCbmExecutionType().getKeyForSelected()));
//                validateMap.put("PROD_ID",CommonUtil.convertObjToStr(observable.getCbmProduct().getKeyForSelected()));
//                validateMap.put("FROM_DT",DateUtil.getDateMMDDYYYY(tdtFromDt.getDateValue()));
//                validateMap.put("USER", TrueTransactMain.USER_ID);               
//                validateMap.put("TO_DT", DateUtil.getDateMMDDYYYY(tdtToDt.getDateValue()));
//                validateMap.put("CURR_DT", currDt);
//                validateMap.put("BRANCH_CODE",TrueTransactMain.BRANCH_ID);
//                List validateList = ClientUtil.executeQuery("getvalidateParametersForInterestApplication", validateMap);
//                if(validateList != null && validateList.size() > 0){
//                  validateMap = (HashMap)validateList.get(0);
//                  if(validateMap.containsKey("MESSAGE") && validateMap.get("MESSAGE") != null){
//                      String message = CommonUtil.convertObjToStr(validateMap.get("MESSAGE"));
//                      ClientUtil.showMessageWindow(message);
//                      if(message.startsWith("1")){
//                          btnProcess.setEnabled(true);
//                      }else{
//                          btnProcess.setEnabled(false);
//                      }
//                  }else{
//                      btnProcess.setEnabled(false);
//                  }
//                }else{
//                    btnProcess.setEnabled(false);
//                }               
//            }            
//        }
    }//GEN-LAST:event_cboProductItemStateChanged

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed
    
  
    
    // To Enable or Disable the fields of the Table in Lookup Master...
    private void setButtonEnableDisable() {
       
    }
    
    private void setButtonLookupMasterTab(boolean value){
        //        btnLookupMasterTabNew.setEnabled(!btnEdit.isEnabled());
        //        btnLookupMasterTabAdd.setEnabled(!btnEdit.isEnabled());
        //        btnLookupMasterTabDelete.setEnabled(!btnEdit.isEnabled());
        
        btnProcess.setEnabled(value);
        btnView.setEnabled(value);
        btnPost.setEnabled(value);
        
    }
    
    private void SetFieldsEnable(boolean value){
      
    }
    
    private void setLookupIdDisable(){
       
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnExit;
    private com.see.truetransact.uicomponent.CButton btnPost;
    private com.see.truetransact.uicomponent.CButton btnProcess;
    private com.see.truetransact.uicomponent.CButton btnView;
    private com.see.truetransact.uicomponent.CComboBox cboExecutionType;
    private com.see.truetransact.uicomponent.CComboBox cboProduct;
    private com.see.truetransact.uicomponent.CLabel lblExecutionType;
    private com.see.truetransact.uicomponent.CLabel lblFromDt;
    private com.see.truetransact.uicomponent.CLabel lblMsg;
    private com.see.truetransact.uicomponent.CLabel lblProduct;
    private com.see.truetransact.uicomponent.CLabel lblSpace3;
    private com.see.truetransact.uicomponent.CLabel lblStatus;
    private com.see.truetransact.uicomponent.CLabel lblToDt;
    private com.see.truetransact.uicomponent.CMenuBar mbrMain;
    private com.see.truetransact.uicomponent.CPanel panLookupMaster;
    private com.see.truetransact.uicomponent.CPanel panMain;
    private com.see.truetransact.uicomponent.CPanel panStatus;
    private com.see.truetransact.uicomponent.CPanel panText;
    private com.see.truetransact.uicomponent.CDateField tdtFromDt;
    private com.see.truetransact.uicomponent.CDateField tdtToDt;
    // End of variables declaration//GEN-END:variables
}