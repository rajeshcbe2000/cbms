/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition. 
 * 
 *  PassbookDataEntryUI.java
  *     
 */
package com.see.truetransact.ui.passbookDataEntry;

import com.see.truetransact.clientutil.CMandatoryDialog;
import com.see.truetransact.clientutil.ClientConstants;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.clientutil.ComboBoxModel;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.ui.common.viewall.ViewAll;
import com.see.truetransact.uicomponent.CButtonGroup;
import com.see.truetransact.uimandatory.MandatoryCheck;
import com.see.truetransact.uimandatory.UIMandatoryField;
import com.see.truetransact.uivalidation.CurrencyValidation;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author anjuanand
 *
 *
 */
public class PassbookDataEntryUI extends com.see.truetransact.uicomponent.CInternalFrame implements java.util.Observer, UIMandatoryField {

    private HashMap mandatoryMap;
    private PassbookDataEntryOB observable;
    final int EDIT = 0, DELETE = 1, RO = 2, ID = 3, AUTHORIZE = 100, NEW = 4, VIEW = 5;
    int viewType = -1;
    boolean isFilled = false;
    final PassbookDataEntryRB resourceBundle = new PassbookDataEntryRB();
    private Date currDt = null;
    private boolean selectedSingleRow = false;

    /**
     * Creates new form PassbookDataEntryUI
     */
    public PassbookDataEntryUI() {
        try {
            currDt = ClientUtil.getCurrentDate();
            initComponents();
            ClientUtil.enableDisable(this, false);
            setFieldNames();
            internationalize();
            setMandatoryHashMap();
            setObservable();
            initComponentData();
            setComponentLength();
            enableDisable(false);
            new MandatoryCheck().putMandatoryMarks(getClass().getName(), panOtherBankInfo);
            setButtonEnableDisable();
            setHelpMessage();
            btnDisplay.setVisible(false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setObservable() throws Exception {
        observable = new PassbookDataEntryOB();
        observable = PassbookDataEntryOB.getInstance();
        observable.addObserver(this);
    }

    /*
     * Auto Generated Method - setMandatoryHashMap() This method list out all
     * the Input Fields available in the UI. It needs a class level HashMap
     * variable mandatoryMap.
     */
    public void setMandatoryHashMap() {
        mandatoryMap = new HashMap();
        mandatoryMap.put("cboBankHead", new Boolean(true));
        mandatoryMap.put("tdtDate", new Boolean(true));
    }

    /*
     * Auto Generated Method - getMandatoryHashMap() Getter method for
     * setMandatoryHashMap().
     */
    public HashMap getMandatoryHashMap() {
        return mandatoryMap;
    }

    private void setComponentLength() {
        txtInstrumentNo1.setAllowAll(true);
        txtInstrumentNo2.setAllowAll(true);
    }
    /*
     *
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        rdoTransactionType = new com.see.truetransact.uicomponent.CButtonGroup();
        tbrOtherBankDetails = new javax.swing.JToolBar();
        btnView = new com.see.truetransact.uicomponent.CButton();
        lblSpace4 = new com.see.truetransact.uicomponent.CLabel();
        btnNew = new com.see.truetransact.uicomponent.CButton();
        lblSpace17 = new com.see.truetransact.uicomponent.CLabel();
        btnEdit = new com.see.truetransact.uicomponent.CButton();
        lblSpace18 = new com.see.truetransact.uicomponent.CLabel();
        btnDelete = new com.see.truetransact.uicomponent.CButton();
        lblSpace2 = new com.see.truetransact.uicomponent.CLabel();
        btnSave = new com.see.truetransact.uicomponent.CButton();
        lblSpace19 = new com.see.truetransact.uicomponent.CLabel();
        btnCancel = new com.see.truetransact.uicomponent.CButton();
        lblSpace5 = new com.see.truetransact.uicomponent.CLabel();
        btnAuthorize = new com.see.truetransact.uicomponent.CButton();
        lblSpace20 = new com.see.truetransact.uicomponent.CLabel();
        btnException = new com.see.truetransact.uicomponent.CButton();
        lblSpace21 = new com.see.truetransact.uicomponent.CLabel();
        btnReject = new com.see.truetransact.uicomponent.CButton();
        lblSpace3 = new com.see.truetransact.uicomponent.CLabel();
        btnPrint = new com.see.truetransact.uicomponent.CButton();
        lblSpace22 = new com.see.truetransact.uicomponent.CLabel();
        btnClose = new com.see.truetransact.uicomponent.CButton();
        panStatus = new com.see.truetransact.uicomponent.CPanel();
        lblSpace1 = new com.see.truetransact.uicomponent.CLabel();
        lblStatus = new com.see.truetransact.uicomponent.CLabel();
        lblMsg = new com.see.truetransact.uicomponent.CLabel();
        tabOtherBankDetails = new com.see.truetransact.uicomponent.CTabbedPane();
        panBranchDetails = new com.see.truetransact.uicomponent.CPanel();
        panOtherBankInfo = new com.see.truetransact.uicomponent.CPanel();
        panOtherBankDetails = new com.see.truetransact.uicomponent.CPanel();
        cPanel2 = new com.see.truetransact.uicomponent.CPanel();
        panBankDetails = new com.see.truetransact.uicomponent.CPanel();
        lblBankHead = new com.see.truetransact.uicomponent.CLabel();
        lblBranchHead = new com.see.truetransact.uicomponent.CLabel();
        cboBankHead = new com.see.truetransact.uicomponent.CComboBox();
        txtBranchHead = new com.see.truetransact.uicomponent.CLabel();
        lblBalance = new com.see.truetransact.uicomponent.CLabel();
        txtBalance = new com.see.truetransact.uicomponent.CLabel();
        lblDate = new com.see.truetransact.uicomponent.CLabel();
        tdtDate = new com.see.truetransact.uicomponent.CDateField();
        sptAddress = new com.see.truetransact.uicomponent.CSeparator();
        btnDisplay = new com.see.truetransact.uicomponent.CButton();
        panDataEntryDetails = new com.see.truetransact.uicomponent.CPanel();
        srpDataEntry = new com.see.truetransact.uicomponent.CScrollPane();
        tblDataEntry = new com.see.truetransact.uicomponent.CTable();
        panDataEntry = new com.see.truetransact.uicomponent.CPanel();
        cPanel1 = new com.see.truetransact.uicomponent.CPanel();
        lblTransactionID = new com.see.truetransact.uicomponent.CLabel();
        txtTransactionID = new com.see.truetransact.uicomponent.CTextField();
        lblInstrumentType = new com.see.truetransact.uicomponent.CLabel();
        cboInstrumentType = new com.see.truetransact.uicomponent.CComboBox();
        lblInstrumentNo = new com.see.truetransact.uicomponent.CLabel();
        txtInstrumentNo1 = new com.see.truetransact.uicomponent.CTextField();
        txtInstrumentNo2 = new com.see.truetransact.uicomponent.CTextField();
        lblInstrumentDate = new com.see.truetransact.uicomponent.CLabel();
        tdtInstrumentDate = new com.see.truetransact.uicomponent.CDateField();
        lblTransactionType = new com.see.truetransact.uicomponent.CLabel();
        panTransactionType = new com.see.truetransact.uicomponent.CPanel();
        rdoTransactionType_Debit = new com.see.truetransact.uicomponent.CRadioButton();
        rdoTransactionType_Credit = new com.see.truetransact.uicomponent.CRadioButton();
        lblParticulars = new com.see.truetransact.uicomponent.CLabel();
        lblAmount = new com.see.truetransact.uicomponent.CLabel();
        txtAmount = new com.see.truetransact.uicomponent.CTextField();
        srpParticulars = new com.see.truetransact.uicomponent.CScrollPane();
        txaParticulars = new com.see.truetransact.uicomponent.CTextArea();
        panDataEntryButtons = new com.see.truetransact.uicomponent.CPanel();
        btnDataEntryNew = new com.see.truetransact.uicomponent.CButton();
        btnDataEntrySave = new com.see.truetransact.uicomponent.CButton();
        btnDataEntryDelete = new com.see.truetransact.uicomponent.CButton();
        cPanel3 = new com.see.truetransact.uicomponent.CPanel();
        lblTotalAmount = new com.see.truetransact.uicomponent.CLabel();
        txtTotalAmount = new com.see.truetransact.uicomponent.CLabel();
        mbrOtherBankDataEntry = new com.see.truetransact.uicomponent.CMenuBar();
        mnuProcess = new javax.swing.JMenu();
        mitNew = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        sptNew = new javax.swing.JSeparator();
        mitSave = new javax.swing.JMenuItem();
        mitCancel = new javax.swing.JMenuItem();
        sptSave = new javax.swing.JSeparator();
        mitPrint = new javax.swing.JMenuItem();
        mitClose = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Other Bank PassBook Data Entry");
        setMinimumSize(new java.awt.Dimension(800, 690));
        setPreferredSize(new java.awt.Dimension(800, 690));

        btnView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_Summary.gif"))); // NOI18N
        btnView.setToolTipText("Enquiry");
        btnView.setEnabled(false);
        btnView.setMinimumSize(new java.awt.Dimension(21, 21));
        btnView.setPreferredSize(new java.awt.Dimension(21, 21));
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        tbrOtherBankDetails.add(btnView);

        lblSpace4.setText("     ");
        tbrOtherBankDetails.add(lblSpace4);

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif"))); // NOI18N
        btnNew.setToolTipText("New");
        btnNew.setEnabled(false);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        tbrOtherBankDetails.add(btnNew);

        lblSpace17.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace17.setText("     ");
        lblSpace17.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace17.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace17.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrOtherBankDetails.add(lblSpace17);

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_EDIT.gif"))); // NOI18N
        btnEdit.setToolTipText("Edit");
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        tbrOtherBankDetails.add(btnEdit);

        lblSpace18.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace18.setText("     ");
        lblSpace18.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace18.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace18.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrOtherBankDetails.add(lblSpace18);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif"))); // NOI18N
        btnDelete.setToolTipText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        tbrOtherBankDetails.add(btnDelete);

        lblSpace2.setText("     ");
        tbrOtherBankDetails.add(lblSpace2);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif"))); // NOI18N
        btnSave.setToolTipText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        tbrOtherBankDetails.add(btnSave);

        lblSpace19.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace19.setText("     ");
        lblSpace19.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace19.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace19.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrOtherBankDetails.add(lblSpace19);

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CANCEL.gif"))); // NOI18N
        btnCancel.setToolTipText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        tbrOtherBankDetails.add(btnCancel);

        lblSpace5.setText("     ");
        tbrOtherBankDetails.add(lblSpace5);

        btnAuthorize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_AUTHORIZE.gif"))); // NOI18N
        btnAuthorize.setToolTipText("Authorize");
        btnAuthorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAuthorizeActionPerformed(evt);
            }
        });
        tbrOtherBankDetails.add(btnAuthorize);

        lblSpace20.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace20.setText("     ");
        lblSpace20.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace20.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace20.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrOtherBankDetails.add(lblSpace20);

        btnException.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_EXCEPTION.gif"))); // NOI18N
        btnException.setToolTipText("Exception");
        btnException.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExceptionActionPerformed(evt);
            }
        });
        tbrOtherBankDetails.add(btnException);

        lblSpace21.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace21.setText("     ");
        lblSpace21.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace21.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace21.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrOtherBankDetails.add(lblSpace21);

        btnReject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_REJECT.gif"))); // NOI18N
        btnReject.setToolTipText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        tbrOtherBankDetails.add(btnReject);

        lblSpace3.setText("     ");
        tbrOtherBankDetails.add(lblSpace3);

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_PRINT.gif"))); // NOI18N
        btnPrint.setToolTipText("Print");
        tbrOtherBankDetails.add(btnPrint);

        lblSpace22.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace22.setText("     ");
        lblSpace22.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace22.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace22.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrOtherBankDetails.add(lblSpace22);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CLOSE.gif"))); // NOI18N
        btnClose.setToolTipText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        tbrOtherBankDetails.add(btnClose);

        getContentPane().add(tbrOtherBankDetails, java.awt.BorderLayout.NORTH);

        panStatus.setLayout(new java.awt.GridBagLayout());

        lblSpace1.setText(" Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblSpace1, gridBagConstraints);

        lblStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblStatus.setText("                      ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblStatus, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblMsg, gridBagConstraints);

        getContentPane().add(panStatus, java.awt.BorderLayout.SOUTH);

        tabOtherBankDetails.setMinimumSize(new java.awt.Dimension(830, 600));
        tabOtherBankDetails.setPreferredSize(new java.awt.Dimension(830, 600));

        panBranchDetails.setMinimumSize(new java.awt.Dimension(830, 600));
        panBranchDetails.setPreferredSize(new java.awt.Dimension(830, 600));
        panBranchDetails.setLayout(new java.awt.GridBagLayout());

        panOtherBankInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panOtherBankInfo.setMinimumSize(new java.awt.Dimension(170, 400));
        panOtherBankInfo.setPreferredSize(new java.awt.Dimension(800, 240));
        panOtherBankInfo.setLayout(new java.awt.GridBagLayout());

        panOtherBankDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Other Bank Details"));
        panOtherBankDetails.setMinimumSize(new java.awt.Dimension(280, 220));
        panOtherBankDetails.setPreferredSize(new java.awt.Dimension(260, 230));
        panOtherBankDetails.setLayout(new java.awt.GridBagLayout());

        cPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        cPanel2.setMinimumSize(new java.awt.Dimension(250, 126));
        cPanel2.setPreferredSize(new java.awt.Dimension(500, 500));
        cPanel2.setLayout(new java.awt.GridBagLayout());

        panBankDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panBankDetails.setMinimumSize(new java.awt.Dimension(203, 65));
        panBankDetails.setLayout(new java.awt.GridBagLayout());

        lblBankHead.setText("Bank Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBankDetails.add(lblBankHead, gridBagConstraints);

        lblBranchHead.setText("Branch Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBankDetails.add(lblBranchHead, gridBagConstraints);

        cboBankHead.setMinimumSize(new java.awt.Dimension(100, 21));
        cboBankHead.setPopupWidth(300);
        cboBankHead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboBankHeadActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBankDetails.add(cboBankHead, gridBagConstraints);

        txtBranchHead.setMaximumSize(new java.awt.Dimension(100, 21));
        txtBranchHead.setMinimumSize(new java.awt.Dimension(100, 21));
        txtBranchHead.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBankDetails.add(txtBranchHead, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        cPanel2.add(panBankDetails, gridBagConstraints);

        lblBalance.setText("Final Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 23, 4, 4);
        cPanel2.add(lblBalance, gridBagConstraints);

        txtBalance.setMaximumSize(new java.awt.Dimension(100, 21));
        txtBalance.setMinimumSize(new java.awt.Dimension(100, 21));
        txtBalance.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 26);
        cPanel2.add(txtBalance, gridBagConstraints);

        lblDate.setText("Transaction Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 134);
        cPanel2.add(lblDate, gridBagConstraints);

        tdtDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtDateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 119, 4, 4);
        cPanel2.add(tdtDate, gridBagConstraints);

        panOtherBankDetails.add(cPanel2, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panOtherBankInfo.add(panOtherBankDetails, gridBagConstraints);

        sptAddress.setOrientation(javax.swing.SwingConstants.VERTICAL);
        sptAddress.setMinimumSize(new java.awt.Dimension(2, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        panOtherBankInfo.add(sptAddress, gridBagConstraints);

        btnDisplay.setText("Display");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 120);
        panOtherBankInfo.add(btnDisplay, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 0.7;
        panBranchDetails.add(panOtherBankInfo, gridBagConstraints);

        panDataEntryDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Entry Details"));
        panDataEntryDetails.setMinimumSize(new java.awt.Dimension(140, 640));
        panDataEntryDetails.setPreferredSize(new java.awt.Dimension(1000, 700));
        panDataEntryDetails.setLayout(new java.awt.GridBagLayout());

        srpDataEntry.setAutoscrolls(true);
        srpDataEntry.setMinimumSize(new java.awt.Dimension(400, 300));

        tblDataEntry.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trans ID", "Amount", "Trans Date", "Trans Type"
            }
        ));
        tblDataEntry.setMinimumSize(new java.awt.Dimension(320, 1000));
        tblDataEntry.setOpaque(false);
        tblDataEntry.setPreferredSize(new java.awt.Dimension(270, 1000));
        tblDataEntry.setReorderingAllowed(false);
        tblDataEntry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataEntryMouseClicked(evt);
            }
        });
        srpDataEntry.setViewportView(tblDataEntry);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 12);
        panDataEntryDetails.add(srpDataEntry, gridBagConstraints);

        panDataEntry.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panDataEntry.setMinimumSize(new java.awt.Dimension(370, 650));
        panDataEntry.setPreferredSize(new java.awt.Dimension(460, 550));
        panDataEntry.setLayout(new java.awt.GridBagLayout());

        cPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        cPanel1.setMinimumSize(new java.awt.Dimension(320, 280));
        cPanel1.setPreferredSize(new java.awt.Dimension(800, 800));
        cPanel1.setLayout(new java.awt.GridBagLayout());

        lblTransactionID.setText("Transaction ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(lblTransactionID, gridBagConstraints);

        txtTransactionID.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(txtTransactionID, gridBagConstraints);

        lblInstrumentType.setText("Instrument Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(lblInstrumentType, gridBagConstraints);

        cboInstrumentType.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(cboInstrumentType, gridBagConstraints);

        lblInstrumentNo.setText("Instrument No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(lblInstrumentNo, gridBagConstraints);

        txtInstrumentNo1.setMinimumSize(new java.awt.Dimension(50, 21));
        txtInstrumentNo1.setPreferredSize(new java.awt.Dimension(50, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(txtInstrumentNo1, gridBagConstraints);

        txtInstrumentNo2.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 65, 4, 4);
        cPanel1.add(txtInstrumentNo2, gridBagConstraints);

        lblInstrumentDate.setText("Instrument Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(lblInstrumentDate, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(tdtInstrumentDate, gridBagConstraints);

        lblTransactionType.setText("Transaction Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 4, 4);
        cPanel1.add(lblTransactionType, gridBagConstraints);

        panTransactionType.setMinimumSize(new java.awt.Dimension(153, 30));
        panTransactionType.setPreferredSize(new java.awt.Dimension(153, 30));
        panTransactionType.setLayout(new java.awt.GridBagLayout());

        rdoTransactionType.add(rdoTransactionType_Debit);
        rdoTransactionType_Debit.setText("Payment");
        rdoTransactionType_Debit.setMinimumSize(new java.awt.Dimension(85, 27));
        rdoTransactionType_Debit.setPreferredSize(new java.awt.Dimension(85, 27));
        rdoTransactionType_Debit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTransactionType_DebitActionPerformed(evt);
            }
        });
        panTransactionType.add(rdoTransactionType_Debit, new java.awt.GridBagConstraints());

        rdoTransactionType.add(rdoTransactionType_Credit);
        rdoTransactionType_Credit.setText("Receipt");
        rdoTransactionType_Credit.setMargin(new java.awt.Insets(2, 5, 2, 2));
        rdoTransactionType_Credit.setMaximumSize(new java.awt.Dimension(69, 27));
        rdoTransactionType_Credit.setMinimumSize(new java.awt.Dimension(85, 27));
        rdoTransactionType_Credit.setPreferredSize(new java.awt.Dimension(85, 27));
        rdoTransactionType_Credit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTransactionType_CreditActionPerformed(evt);
            }
        });
        panTransactionType.add(rdoTransactionType_Credit, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(panTransactionType, gridBagConstraints);

        lblParticulars.setText("Particulars");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 4, 4);
        cPanel1.add(lblParticulars, gridBagConstraints);

        lblAmount.setText("Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(lblAmount, gridBagConstraints);

        txtAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(txtAmount, gridBagConstraints);

        srpParticulars.setMinimumSize(new java.awt.Dimension(346, 100));

        txaParticulars.setMinimumSize(new java.awt.Dimension(40, 40));
        txaParticulars.setPreferredSize(new java.awt.Dimension(180, 70));
        srpParticulars.setViewportView(txaParticulars);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cPanel1.add(srpParticulars, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        panDataEntry.add(cPanel1, gridBagConstraints);

        panDataEntryButtons.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panDataEntryButtons.setMinimumSize(new java.awt.Dimension(120, 40));
        panDataEntryButtons.setPreferredSize(new java.awt.Dimension(250, 80));
        panDataEntryButtons.setLayout(new java.awt.GridBagLayout());

        btnDataEntryNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif"))); // NOI18N
        btnDataEntryNew.setMinimumSize(new java.awt.Dimension(30, 25));
        btnDataEntryNew.setPreferredSize(new java.awt.Dimension(30, 30));
        btnDataEntryNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataEntryNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        panDataEntryButtons.add(btnDataEntryNew, gridBagConstraints);

        btnDataEntrySave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif"))); // NOI18N
        btnDataEntrySave.setDefaultCapable(false);
        btnDataEntrySave.setMinimumSize(new java.awt.Dimension(30, 25));
        btnDataEntrySave.setPreferredSize(new java.awt.Dimension(30, 30));
        btnDataEntrySave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataEntrySaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 0);
        panDataEntryButtons.add(btnDataEntrySave, gridBagConstraints);

        btnDataEntryDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif"))); // NOI18N
        btnDataEntryDelete.setMinimumSize(new java.awt.Dimension(30, 25));
        btnDataEntryDelete.setPreferredSize(new java.awt.Dimension(30, 30));
        btnDataEntryDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataEntryDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 0);
        panDataEntryButtons.add(btnDataEntryDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 2, 0);
        panDataEntry.add(panDataEntryButtons, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panDataEntryDetails.add(panDataEntry, gridBagConstraints);

        cPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        cPanel3.setMinimumSize(new java.awt.Dimension(200, 40));
        cPanel3.setLayout(new java.awt.GridBagLayout());

        lblTotalAmount.setText("Balance:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        cPanel3.add(lblTotalAmount, gridBagConstraints);

        txtTotalAmount.setMaximumSize(new java.awt.Dimension(100, 21));
        txtTotalAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        txtTotalAmount.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        cPanel3.add(txtTotalAmount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        panDataEntryDetails.add(cPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.7;
        panBranchDetails.add(panDataEntryDetails, gridBagConstraints);

        tabOtherBankDetails.addTab("PassBook Data Entry", panBranchDetails);

        getContentPane().add(tabOtherBankDetails, java.awt.BorderLayout.CENTER);

        mbrOtherBankDataEntry.setName("mbrOtherBankDataEntry");

        mnuProcess.setText("Process");
        mnuProcess.setName("mnuProcess");

        mitNew.setText("New");
        mitNew.setName("mitNew");
        mnuProcess.add(mitNew);

        mitEdit.setText("Edit");
        mitEdit.setName("mitEdit");
        mnuProcess.add(mitEdit);

        mitDelete.setText("Delete");
        mitDelete.setName("mitDelete");
        mnuProcess.add(mitDelete);

        sptNew.setName("sptNew");
        mnuProcess.add(sptNew);

        mitSave.setText("Save");
        mitSave.setName("mitSave");
        mnuProcess.add(mitSave);

        mitCancel.setText("Cancel");
        mitCancel.setName("mitCancel");
        mnuProcess.add(mitCancel);

        sptSave.setName("sptSave");
        mnuProcess.add(sptSave);

        mitPrint.setText("Print");
        mitPrint.setName("mitPrint");
        mnuProcess.add(mitPrint);

        mitClose.setText("Close");
        mitClose.setName("mitClose");
        mnuProcess.add(mitClose);

        mbrOtherBankDataEntry.add(mnuProcess);

        setJMenuBar(mbrOtherBankDataEntry);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_VIEW);
        observable.setStatus();
        lblStatus.setText(observable.getLblStatus());
        resetDataEntryTextFields();
        resetInstTxt();
        btnCheck();
        observable.resetForm();
        btnAuthorize.setEnabled(false);
        btnReject.setEnabled(false);
        btnException.setEnabled(false);
        btnNew.setEnabled(false);
        btnDelete.setEnabled(false);
        btnSave.setEnabled(false);
        btnEdit.setEnabled(false);
        btnView.setEnabled(false);
        btnCancel.setEnabled(true);
        panTransactionType.setEnabled(false);
        enableDataEntryDetails(false);
        enableInstTxt(false);
        enableTblButtons(false);
        enableOtherBankDetails(true);
        txtAmount.setEnabled(false);
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnCheck() {
        btnCancel.setEnabled(true);
        btnSave.setEnabled(false);
        btnNew.setEnabled(false);
        btnDelete.setEnabled(false);
        btnAuthorize.setEnabled(false);
        btnReject.setEnabled(false);
        btnException.setEnabled(false);
        btnEdit.setEnabled(false);
    }

    private void btnAuthorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAuthorizeActionPerformed
        observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
        authorizeStatus(CommonConstants.STATUS_AUTHORIZED);
    }//GEN-LAST:event_btnAuthorizeActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // Add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_NEW);
        enableDataEntryDetails(false);
        enableOtherBankDetails(true);
        enableTblButtons(false);
        btnDataEntryNew.setEnabled(true);
        enableInstTxt(false);
        resetDataEntryTextFields();
        resetInstTxt();
        resetOtherBankTxtFields();
        btnCancel.setEnabled(true);
        btnSave.setEnabled(false);
        btnNew.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        lblStatus.setText("New");
        btnCancel.setEnabled(true);
        txtTotalAmount.setText("");
        txtBalance.setText("");
        btnDisplay.setVisible(false);
        btnView.setEnabled(false);
    }//GEN-LAST:event_btnNewActionPerformed

    private void tdtDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtDateFocusLost
        // TODO add your handling code here:
        HashMap dataMap = new HashMap();
        dataMap.put("BANK_CODE", observable.getCboBankHead());
        dataMap.put("BRANCH_CODE", observable.getTxtBranchHead());
        dataMap.put("TRANS_DATE", DateUtil.getDateMMDDYYYY(tdtDate.getDateValue()));
        boolean chkTransDate = false;
        chkTransDate = observable.chkTransDate(dataMap);
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW && chkTransDate == true) {
            ClientUtil.showMessageWindow("Already entered data in this date!!!");
            tdtDate.setDateValue(null);
            enableOtherBankDetails(true);
            enableDataEntryDetails(false);
            enableInstTxt(false);
            enableTblButtons(false);
            btnDataEntryNew.setEnabled(true);
            return;
        }
    }//GEN-LAST:event_tdtDateFocusLost

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        final String mandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(), tabOtherBankDetails);
        if (observable.getActionType() != ClientConstants.ACTIONTYPE_DELETE && mandatoryMessage.length() > 0) {
            displayAlert(mandatoryMessage);
        } else {
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
                updateOBFields();
            }
            observable.doAction();
            if (observable.getResult() != ClientConstants.ACTIONTYPE_FAILED) {
                lblStatus.setText("Success");
            } else if (observable.getResult() == ClientConstants.ACTIONTYPE_FAILED) {
                lblStatus.setText("Failed");
            }
            enableTblButtons(false);
            enableDataEntryDetails(false);
            enableOtherBankDetails(false);
            btnDataEntryNew.setEnabled(false);
            resetDataEntryTextFields();
            resetInstTxt();
            resetOtherBankTxtFields();
            observable.resetForm();
            btnSave.setEnabled(false);
            btnCancel.setEnabled(true);
            btnClose.setEnabled(true);
            txtTotalAmount.setText("");
            txtBalance.setText("");
            btnDisplay.setVisible(false);
            btnView.setEnabled(false);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_CANCEL);
        enableDisable(false);
        setButtonEnableDisable();
        observable.resetForm();
        isFilled = false;
        observable.setStatus();
        setModified(false);
        enableTblButtons(false);
        enableDataEntryDetails(false);
        enableOtherBankDetails(false);
        btnDataEntryNew.setEnabled(false);
        enableInstTxt(false);
        btnAuthorize.setEnabled(true);
        btnReject.setEnabled(true);
        btnException.setEnabled(true);
        updateTable();
        txtTotalAmount.setText("");
        txtBalance.setText("");
        btnDisplay.setVisible(false);
        btnView.setEnabled(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        observable.resetForm();
        observable.setActionType(ClientConstants.ACTIONTYPE_DELETE);
        popUp(DELETE);
        btnAuthorize.setEnabled(false);
        btnReject.setEnabled(false);
        btnException.setEnabled(false);
        btnCancel.setEnabled(true);
        btnDisplay.setVisible(false);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        observable.resetForm();
        observable.setActionType(ClientConstants.ACTIONTYPE_EDIT);
        btnAuthorize.setEnabled(false);
        btnReject.setEnabled(false);
        btnException.setEnabled(false);
        btnNew.setEnabled(false);
        btnDelete.setEnabled(false);
        btnSave.setEnabled(false);
        btnEdit.setEnabled(false);
        btnView.setEnabled(false);
        btnCancel.setEnabled(true);
        panTransactionType.setEnabled(false);
        enableOtherBankDetails(true);
        enableDataEntryDetails(false);
        enableInstTxt(false);
        enableTblButtons(false);
        resetDataEntryTextFields();
        resetInstTxt();
        btnDataEntryNew.setEnabled(false);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        cifClosingAlert();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnExceptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExceptionActionPerformed
        // TODO add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_EXCEPTION);
        authorizeStatus(CommonConstants.STATUS_EXCEPTION);
    }//GEN-LAST:event_btnExceptionActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_REJECT);
        authorizeStatus(CommonConstants.STATUS_REJECTED);
    }//GEN-LAST:event_btnRejectActionPerformed

    private void rdoTransactionType_DebitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoTransactionType_DebitActionPerformed
        // TODO add your handling code here:
        enableInstTxt(true);
    }//GEN-LAST:event_rdoTransactionType_DebitActionPerformed

    private void rdoTransactionType_CreditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoTransactionType_CreditActionPerformed
        // TODO add your handling code here:
        enableInstTxt(false);
        resetInstTxt();
    }//GEN-LAST:event_rdoTransactionType_CreditActionPerformed

    private void cboBankHeadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboBankHeadActionPerformed
        // TODO add your handling code here:
        if ((cboBankHead.getSelectedIndex() > 0)) {
            String bankName = CommonUtil.convertObjToStr(((ComboBoxModel) (cboBankHead.getModel())).getSelectedItem());
            HashMap dataMap = new HashMap();
            dataMap.put("bankName", bankName);
            List bankCodeList = observable.getBankCode(dataMap);
            if (bankCodeList != null && bankCodeList.size() > 0) {
                HashMap map = new HashMap();
                map = (HashMap) bankCodeList.get(0);
                String bankCode = "";
                bankCode = CommonUtil.convertObjToStr(map.get("AGENCY_NAME"));
                double balanceAmt = 0;
                balanceAmt = CommonUtil.convertObjToDouble(map.get("AVAILABLE_BALANCE"));
                String branchCode = "";
                branchCode = CommonUtil.convertObjToStr(map.get("BRANCH_ID"));
                txtBalance.setText(CommonUtil.convertObjToStr(balanceAmt));
                txtBranchHead.setText(branchCode);
                observable.setCboBankHead(bankCode);
                observable.setTxtBranchHead(branchCode);
            }
        }
    }//GEN-LAST:event_cboBankHeadActionPerformed

    private void tblDataEntryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataEntryMouseClicked
        // TODO add your handling code here:
        this.selectedSingleRow = true;
        int rowCount = 0;
        rowCount = tblDataEntry.getRowCount();
        if (rowCount >= 0) {
            updateTableData();
            this.selectedSingleRow = false;
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
                txtBalance.setText(CommonUtil.convertObjToStr(observable.getBalance()));
//                txtBalance.setText(CurrencyValidation.formatCrore(CommonUtil.convertObjToStr(observable.getBalance())));
                btnDataEntryDelete.setEnabled(true);
            } else if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
                btnDataEntrySave.setEnabled(true);
                btnDataEntryDelete.setEnabled(false);
                observable.setAmount(CommonUtil.convertObjToDouble(txtAmount.getText()));
            } else {
                btnDataEntrySave.setEnabled(false);
            }
            observable.ttNotifyObservers();
            enableOtherBankDetails(false);
            enableDataEntryDetails(false);
            enableInstTxt(false);
            btnDataEntryNew.setEnabled(false);
            txtAmount.setEnabled(true);
            txtAmount.setEditable(true);
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
                HashMap resultMap = new HashMap();
                resultMap.put("BANK_CODE", observable.getCboBankHead());
                resultMap.put("BRANCH_CODE", observable.getTxtBranchHead());
                double balance = 0;
                balance = observable.getPassBookMaxBalance(resultMap);
                txtBalance.setText(CommonUtil.convertObjToStr(balance));
                txtTotalAmount.setText(CommonUtil.convertObjToStr(observable.getTxtBalance()));
//                txtBalance.setText(CurrencyValidation.formatCrore(CommonUtil.convertObjToStr(balance)));
//                txtTotalAmount.setText(CurrencyValidation.formatCrore(CommonUtil.convertObjToStr(observable.getTxtBalance())));
                btnSave.setEnabled(false);
            }
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) {
                txtAmount.setEnabled(false);
            }
        } else {
            ClientUtil.showMessageWindow("There are no records to display!!!");
        }

    }//GEN-LAST:event_tblDataEntryMouseClicked

    private void btnDataEntryNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataEntryNewActionPerformed
        if (!cboBankHead.getSelectedItem().equals("") && !txtBranchHead.equals("")) {
            enableOtherBankDetails(false);
            enableDataEntryDetails(true);
            btnDataEntrySave.setEnabled(true);
            btnDataEntryDelete.setEnabled(false);
            resetDataEntryTextFields();
            resetInstTxt();
            if (rdoTransactionType_Credit.isSelected()) {
                enableInstTxt(false);
            } else if (rdoTransactionType_Debit.isSelected()) {
                enableInstTxt(true);
            }
        } else {
            ClientUtil.showMessageWindow("Please enter Bank and Branch!!!");
            enableOtherBankDetails(true);
            enableDataEntryDetails(false);
            enableTblButtons(false);
            btnDataEntryNew.setEnabled(true);
        }
    }//GEN-LAST:event_btnDataEntryNewActionPerformed

    private void btnDataEntrySaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataEntrySaveActionPerformed
        if (txtTransactionID.getText().equals("") || txtAmount.getText().equals("") || !(rdoTransactionType_Credit.isSelected() || rdoTransactionType_Debit.isSelected())) {
            ClientUtil.showMessageWindow("Please enter all the appropriate details before saving to the grid!!!");
            return;
        } else {
            HashMap dataMap = new HashMap();
            dataMap.put("BANK_CODE", observable.getCboBankHead());
            dataMap.put("BRANCH_CODE", observable.getTxtBranchHead());
            dataMap.put("TRANSID", txtTransactionID.getText());
            boolean chkTransId = false;
            boolean chkTblTransId = false;
            chkTransId = observable.chkTransID(dataMap);
            String transId = "";
            transId = txtTransactionID.getText();
            if (tblDataEntry.getRowCount() > 0) {
                for (int i = 0; i < tblDataEntry.getRowCount(); i++) {
                    String tblTransId = "";
                    tblTransId = CommonUtil.convertObjToStr(tblDataEntry.getValueAt(i, 0));
                    if (tblTransId.equals(transId)) {
                        chkTblTransId = true;
                    }
                }
            }
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW && chkTransId == true) {
                ClientUtil.showMessageWindow("This TransID already exists!!!");
                txtTransactionID.setText("");
                return;
            } else if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW && chkTblTransId == true) {
                ClientUtil.showMessageWindow("Please enter another Trans Id!!!");
                txtTransactionID.setText("");
                return;
            } else {
                updateOBFields();
                double balanceAmt = 0;
                balanceAmt = CommonUtil.convertObjToDouble(txtBalance.getText());
                String bankCodeKey = "";
                bankCodeKey = CommonUtil.convertObjToStr(((ComboBoxModel) cboBankHead.getModel()).getKeyForSelected());
                if (!this.selectedSingleRow) {
                    this.updateTable();
                    int rowSelected = this.tblDataEntry.getSelectedRow();
                    observable.insertIntoTableData(rowSelected);
                    btnDelete.setEnabled(false);
                    int rowCount = 0;
                    rowCount = tblDataEntry.getRowCount();
                    double transAmt = 0;
                    transAmt = CommonUtil.convertObjToDouble(txtAmount.getText());
                    String tblType = "";
                    tblType = CommonUtil.convertObjToStr(tblDataEntry.getValueAt(rowCount - 1, 3));
                    double finalAmt = 0;
                    if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
                        if (rowCount == 1) {
                            if (bankCodeKey.equals("OTHER_BANK_OD")) {
                                if (tblType.equals("Debit")) {
                                    finalAmt = balanceAmt + transAmt;
                                } else if (tblType.equals("Credit")) {
                                    finalAmt = balanceAmt - transAmt;
                                }
                            } else {
                                if (tblType.equals("Debit")) {
                                    finalAmt = balanceAmt + transAmt;
                                } else if (tblType.equals("Credit")) {
                                    finalAmt = balanceAmt - transAmt;
                                }
                            }
                        } else if (rowCount > 1) {
                            double totalAmt = 0;
                            totalAmt = observable.getTxtTotalAmt();
                            if (bankCodeKey.equals("OTHER_BANK_OD")) {
                                if (tblType.equals("Debit")) {
                                    finalAmt = totalAmt + transAmt;
                                } else if (tblType.equals("Credit")) {
                                    finalAmt = totalAmt - transAmt;
                                }
                            } else {
                                if (tblType.equals("Debit")) {
                                    finalAmt = totalAmt + transAmt;
                                } else if (tblType.equals("Credit")) {
                                    finalAmt = totalAmt - transAmt;
                                }
                            }
                        }
                    } else if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
                        double amount = CommonUtil.convertObjToDouble(observable.getAmount());
                        double calcAmt = 0;
                        calcAmt = CommonUtil.convertObjToDouble(txtTotalAmount.getText());
                        double totAmt = 0;
                        double incrAmt = 0;
                        if (amount > transAmt) {
                            incrAmt = amount - transAmt;
                            if (bankCodeKey.equals("OTHER_BANK_OD")) {
                                if (tblType.equals("Debit")) {
                                    totAmt = balanceAmt - incrAmt;
                                    finalAmt = calcAmt - incrAmt;
                                } else if (tblType.equals("Credit")) {
                                    totAmt = balanceAmt + incrAmt;
                                    finalAmt = calcAmt + incrAmt;
                                }
                            } else {
                                if (tblType.equals("Debit")) {
                                    totAmt = balanceAmt - incrAmt;
                                    finalAmt = calcAmt - incrAmt;
                                } else if (tblType.equals("Credit")) {
                                    totAmt = balanceAmt + incrAmt;
                                    finalAmt = calcAmt + incrAmt;
                                }
                            }
                        } else {
                            incrAmt = transAmt - amount;
                            if (bankCodeKey.equals("OTHER_BANK_OD")) {
                                if (tblType.equals("Debit")) {
                                    totAmt = balanceAmt + incrAmt;
                                    finalAmt = calcAmt + incrAmt;
                                } else if (tblType.equals("Credit")) {
                                    totAmt = balanceAmt - incrAmt;
                                    finalAmt = calcAmt - incrAmt;
                                }
                            } else {
                                if (tblType.equals("Debit")) {
                                    totAmt = balanceAmt + incrAmt;
                                    finalAmt = calcAmt + incrAmt;
                                } else if (tblType.equals("Credit")) {
                                    totAmt = balanceAmt - incrAmt;
                                    finalAmt = calcAmt - incrAmt;
                                }
                            }
                        }
                        txtBalance.setText(CommonUtil.convertObjToStr(totAmt));
                    }
                    txtTotalAmount.setText(CommonUtil.convertObjToStr(finalAmt));
                    observable.setTxtBalance(finalAmt);
                    observable.setAccType(bankCodeKey);
                    btnSave.setEnabled(true);
                    resetDataEntryTextFields();
                    resetInstTxt();
                } else {
                    this.updateTable();
                    observable.insertIntoTableData(-1);
                    btnSave.setEnabled(true);
                    btnCancel.setEnabled(true);
                    btnNew.setEnabled(false);
                    btnDelete.setEnabled(false);
                }
                resetDataEntryTextFields();
                resetInstTxt();
                enableDataEntryDetails(false);
                enableTblButtons(false);
                btnSave.setEnabled(true);
            }
        }
    }//GEN-LAST:event_btnDataEntrySaveActionPerformed

    private void btnDataEntryDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataEntryDeleteActionPerformed
        // TODO add your handling code here:
        btnDataEntryNew.setEnabled(true);
        int rowSelected = this.tblDataEntry.getSelectedRow();
        if (rowSelected >= 0) {
            observable.deleteTblData(rowSelected);
            this.updateTable();
            resetDataEntryTextFields();
            resetInstTxt();
            enableDataEntryDetails(false);
        } else {
            ClientUtil.showMessageWindow("Please select a row to delete!!!");
        }
    }//GEN-LAST:event_btnDataEntryDeleteActionPerformed

    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
        // TODO add your handling code here:
        HashMap dataMap = new HashMap();
        dataMap.put("BANK_CODE", observable.getCboBankHead());
        dataMap.put("BRANCH_CODE", observable.getTxtBranchHead());
        dataMap.put("TRANS_DATE", DateUtil.getDateMMDDYYYY(tdtDate.getDateValue()));
        boolean chkTransDate = false;
        chkTransDate = observable.chkTransDate(dataMap);
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT && chkTransDate == true) {
            popUp(EDIT);
            btnAuthorize.setEnabled(false);
            btnReject.setEnabled(false);
            btnException.setEnabled(false);
            btnNew.setEnabled(false);
            btnDelete.setEnabled(false);
            btnSave.setEnabled(true);
            btnEdit.setEnabled(false);
            btnView.setEnabled(false);
            btnCancel.setEnabled(true);
            panTransactionType.setEnabled(false);
            enableOtherBankDetails(false);
            enableDataEntryDetails(false);
            enableInstTxt(false);
            enableTblButtons(false);
            resetDataEntryTextFields();
            resetInstTxt();
            btnDataEntryNew.setEnabled(false);
        } else if (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW && chkTransDate == true) {
            popUp(VIEW);
            enableOtherBankDetails(false);
            enableDataEntryDetails(false);
            enableInstTxt(false);
            enableTblButtons(false);
            txtAmount.setEnabled(false);
        } else {
            ClientUtil.showMessageWindow("This Trans Date does not exist!!!");
            tdtDate.setDateValue(null);
            return;
        }
    }//GEN-LAST:event_btnDisplayActionPerformed

    /**
     * To check mandatory of a specific component, mostly a Panel
     */
    private String checkMandatory(javax.swing.JComponent component) {
        return new MandatoryCheck().checkMandatory(getClass().getName(), component);
    }

    /**
     * To display the given message as an alert in a Dialog box
     */
    private void displayAlert(String message) {
        final CMandatoryDialog cmd = new CMandatoryDialog();
        cmd.setMessage(message);
        cmd.setModal(true);
        cmd.show();
    }

    /**
     * To populate Comboboxes with proper data
     */
    private void initComponentData() {
        txtAmount.setAllowNumber(true);
        txtAmount.setValidation(new CurrencyValidation(14, 2));
        txtTransactionID.setAllowAll(true);
        List bankBranchList = null;
        bankBranchList = observable.setBankNames();
        cboBankHead.setModel(observable.getCbmBankHead());
        cboInstrumentType.setModel(observable.getCbmInstrumentType());
    }

    public void enableInstTxt(boolean flag) {
        cboInstrumentType.setEnabled(flag);
        txtInstrumentNo1.setEnabled(flag);
        txtInstrumentNo2.setEnabled(flag);
        tdtInstrumentDate.setEnabled(flag);
    }

    public void resetInstTxt() {
        cboInstrumentType.setSelectedItem("");
        txtInstrumentNo1.setText("");
        txtInstrumentNo2.setText("");
        tdtInstrumentDate.setDateValue(null);
    }

    /**
     * To display a popUp window for viewing existing data as well as to select
     * new Branch for entry
     */
    private void popUp(int field) {
        viewType = field;
        if (field == EDIT || field == DELETE || field == VIEW) {
            final HashMap viewMap = new HashMap();
            HashMap dataMap = new HashMap();
            dataMap.put("BANK_CODE", observable.getCboBankHead());
            dataMap.put("BRANCH_CODE", observable.getTxtBranchHead());
            dataMap.put("TRANS_DATE", DateUtil.getDateMMDDYYYY(tdtDate.getDateValue()));
            viewMap.put(CommonConstants.MAP_NAME, "getPassbookEditDetails");
            viewMap.put(CommonConstants.MAP_WHERE, dataMap);
            new ViewAll(this, viewMap).show();
        }
    }

    /**
     * Called by the Popup window created thru popUp method
     */
    public void fillData(Object obj) {
        final HashMap hash = (HashMap) obj;
        if (viewType == EDIT || viewType == ClientConstants.ACTIONTYPE_DELETE || viewType == VIEW) {
            try {
                observable.populateOB(hash);
                if (viewType == EDIT) {
                    enableTblButtons(true);
                    enableDataEntryDetails(true);
                    enableOtherBankDetails(true);
                    btnDataEntryNew.setEnabled(true);
                    enableInstTxt(true);
                    if (rdoTransactionType_Credit.isSelected()) {
                        enableInstTxt(false);
                    } else if (rdoTransactionType_Debit.isSelected()) {
                        enableInstTxt(true);
                    }
                } else if (viewType == ClientConstants.ACTIONTYPE_DELETE || viewType == VIEW) {
                    enableTblButtons(false);
                    enableDataEntryDetails(false);
                    enableOtherBankDetails(false);
                    btnDataEntryNew.setEnabled(false);
                    enableInstTxt(false);
                }
            } catch (Exception ex) {
                Logger.getLogger(PassbookDataEntryUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        setModified(true);
    }

    /*
     * Auto Generated Method - setFieldNames() This method assigns name for all
     * the components. Other functions are working based on this name.
     */
    private void setFieldNames() {
        btnCancel.setName("btnCancel");
        btnClose.setName("btnClose");
        btnDelete.setName("btnDelete");
        btnEdit.setName("btnEdit");
        btnNew.setName("btnNew");
        btnPrint.setName("btnPrint");
        btnSave.setName("btnSave");
        lblMsg.setName("lblMsg");
        lblSpace1.setName("lblSpace1");
        lblSpace2.setName("lblSpace2");
        lblSpace3.setName("lblSpace3");
        lblStatus.setName("lblStatus");
        mbrOtherBankDataEntry.setName("mbrOtherBankDataEntry");
        panOtherBankInfo.setName("panOtherBankInfo");
        panBranchDetails.setName("panBranchDetails");
        panDataEntryDetails.setName("panDataEntryDetails");
        panOtherBankDetails.setName("panOtherBankDetails");
        panStatus.setName("panStatus");
        sptAddress.setName("sptAddress");
        tabOtherBankDetails.setName("tabOtherBankDetails");
        panBankDetails.setName("panBankDetails");
        lblBankHead.setName("lblBankHead");
        cboBankHead.setName("cboBankHead");
        lblBranchHead.setName("lblBranchHead");
        txtBranchHead.setName("txtBranchHead");
        lblDate.setName("lblDate");
        tdtDate.setName("tdtDate");
        lblTransactionType.setName("lblTransactionType");
        panTransactionType.setName("panTransactionType");
        rdoTransactionType_Debit.setName("rdoTransactionType_Debit");
        rdoTransactionType_Credit.setName("rdoTransactionType_Credit");
        lblTransactionID.setName("lblTransactionID");
        txtTransactionID.setName("txtTransactionID");
        lblInstrumentType.setName("lblInstrumentType");
        cboInstrumentType.setName("cboInstrumentType");
        lblInstrumentNo.setName("lblInstrumentNo");
        txtInstrumentNo1.setName("txtInstrumentNo1");
        txtInstrumentNo2.setName("txtInstrumentNo2");
        lblInstrumentDate.setName("lblInstrumentDate");
        tdtInstrumentDate.setName("tdtInstrumentDate");
        lblParticulars.setName("lblParticulars");
        srpParticulars.setName("srpParticulars");
        txaParticulars.setName("txaParticulars");
        lblAmount.setName("lblAmount");
        txtAmount.setName("txtAmount");
        lblBalance.setName("lblBalance");
        txtBalance.setName("txtBalance");
        srpDataEntry.setName("srpDataEntry");
        tblDataEntry.setName("tblDataEntry");
        panDataEntryButtons.setName("panDataEntryButtons");
        btnDataEntryNew.setName("btnDataEntryNew");
        btnDataEntrySave.setName("btnDataEntrySave");
        btnDataEntryDelete.setName("btnDataEntryDelete");
        panDataEntry.setName("panDataEntry");
    }

    /*
     * Auto Generated Method - internationalize() This method used to assign
     * display texts from the Resource Bundle File.
     */
    private void internationalize() {
        btnClose.setText(resourceBundle.getString("btnClose"));
        lblMsg.setText(resourceBundle.getString("lblMsg"));
        lblSpace2.setText(resourceBundle.getString("lblSpace2"));
        lblSpace3.setText(resourceBundle.getString("lblSpace3"));
        lblSpace1.setText(resourceBundle.getString("lblSpace1"));
        btnEdit.setText(resourceBundle.getString("btnEdit"));
        btnPrint.setText(resourceBundle.getString("btnPrint"));
        btnSave.setText(resourceBundle.getString("btnSave"));
        lblStatus.setText(resourceBundle.getString("lblStatus"));
        btnDelete.setText(resourceBundle.getString("btnDelete"));
        btnNew.setText(resourceBundle.getString("btnNew"));
        btnCancel.setText(resourceBundle.getString("btnCancel"));
        lblBankHead.setText(resourceBundle.getString("lblBankHead"));
        lblBranchHead.setText(resourceBundle.getString("lblBranchHead"));
        lblTransactionType.setText(resourceBundle.getString("lblTransactionType"));
        rdoTransactionType_Debit.setText(resourceBundle.getString("rdoTransactionType_Debit"));
        rdoTransactionType_Credit.setText(resourceBundle.getString("rdoTransactionType_Credit"));
        lblTransactionID.setText(resourceBundle.getString("lblTransactionID"));
        lblInstrumentType.setText(resourceBundle.getString("lblInstrumentType"));
        lblInstrumentNo.setText(resourceBundle.getString("lblInstrumentNo"));
        lblInstrumentDate.setText(resourceBundle.getString("lblInstrumentDate"));
        lblParticulars.setText(resourceBundle.getString("lblParticulars"));
        lblAmount.setText(resourceBundle.getString("lblAmount"));
        lblBalance.setText(resourceBundle.getString("lblBalance"));
    }

    /*
     * Auto Generated Method - update() This method called by Observable. It
     * updates the UI with Observable's data. If needed add/Remove RadioButtons
     * method need to be added.
     */
    public void update(Observable observed, Object arg) {
        removeRadioButtons();
        lblStatus.setText(observable.getLblStatus());
        txtAmount.setText(CommonUtil.convertObjToStr(observable.getTxtAmount()));
        txtInstrumentNo1.setText(observable.getTxtInstrumentNo1());
        txtInstrumentNo2.setText(observable.getTxtInstrumentNo2());
        txaParticulars.setText(observable.getTxaParticulars());
        txtTransactionID.setText(observable.getTxtTransactionID());
        cboBankHead.setSelectedItem(observable.getCboBankHead());
        txtBranchHead.setText(observable.getTxtBranchHead());
        cboInstrumentType.setSelectedItem(observable.getCboInstrumentType());
        tdtDate.setDateValue(CommonUtil.convertObjToStr(observable.getTdtDate()));
        tdtInstrumentDate.setDateValue(CommonUtil.convertObjToStr(observable.getTdtInstrumentDate()));
        if (observable.isRdoPayment() == true) {
            rdoTransactionType_Debit.setSelected(true);
            rdoTransactionType_Credit.setSelected(false);
        } else {
            rdoTransactionType_Debit.setSelected(false);
            rdoTransactionType_Credit.setSelected(true);
        }
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
            txtTotalAmount.setText(CommonUtil.convertObjToStr(observable.getTxtBalance()));
        }
        addRadioButtons();
        this.updateTable();
    }

    /*
     * Auto Generated Method - updateOBFields() This method called by Save
     * option of UI. It updates the OB with UI data.
     */
    public void updateOBFields() {
        observable.setScreen(getScreen());
        observable.setModule(getModule());
        observable.setTxtTransactionID(txtTransactionID.getText());
        observable.setCboInstrumentType(CommonUtil.convertObjToStr(cboInstrumentType.getSelectedItem()));
        observable.setTxtInstrumentNo1(txtInstrumentNo1.getText());
        observable.setTxtInstrumentNo2(txtInstrumentNo2.getText());
        observable.setTdtDate(DateUtil.getDateMMDDYYYY(tdtDate.getDateValue()));
        observable.setTdtInstrumentDate(DateUtil.getDateMMDDYYYY(tdtInstrumentDate.getDateValue()));
        observable.setTxaParticulars(txaParticulars.getText());
        observable.setTxtAmount(CommonUtil.convertObjToDouble(txtAmount.getText()));
        observable.setTxtTotalAmt(CommonUtil.convertObjToDouble(txtTotalAmount.getText()));
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT || observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
            observable.setTxtBalance(CommonUtil.convertObjToDouble(txtBalance.getText()));
        }
        if (rdoTransactionType_Debit.isSelected()) {
            observable.setRdoPayment(true);
            observable.setRdoReceipt(false);
        } else if (rdoTransactionType_Credit.isSelected()) {
            observable.setRdoPayment(false);
            observable.setRdoReceipt(true);
        }
        if (rdoTransactionType_Debit.isSelected()) {
            observable.setRdoPayment(true);
            observable.setRdoReceipt(false);
        } else if (rdoTransactionType_Credit.isSelected()) {
            observable.setRdoPayment(false);
            observable.setRdoReceipt(true);
        }
    }

    /*
     * To remove the radio buttons
     */
    private void removeRadioButtons() {
        rdoTransactionType.remove(rdoTransactionType_Credit);
        rdoTransactionType.remove(rdoTransactionType_Debit);
    }

    /*
     * To add the radio buttons
     */
    private void addRadioButtons() {
        rdoTransactionType = new CButtonGroup();
        rdoTransactionType.add(rdoTransactionType_Credit);
        rdoTransactionType.add(rdoTransactionType_Debit);
    }

    /*
     * Auto Generated Method - setHelpMessage() This method shows tooltip help
     * for all the input fields available in the UI. It needs the Mandatory
     * Resource Bundle object. Help display Label name should be lblMsg.
     */
    public void setHelpMessage() {
        PassbookDataEntryMRB objMandatoryRB = new PassbookDataEntryMRB();
        cboBankHead.setHelpMessage(lblMsg, objMandatoryRB.getString("cboBankHead"));
        tdtDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDate"));
        rdoTransactionType_Debit.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoTransactionType_Debit"));
        rdoTransactionType_Credit.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoTransactionType_Credit"));
        txtTransactionID.setHelpMessage(lblMsg, objMandatoryRB.getString("txtTransactionID"));
        cboInstrumentType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboInstrumentType"));
        txtInstrumentNo1.setHelpMessage(lblMsg, objMandatoryRB.getString("txtInstrumentNo1"));
        txtInstrumentNo2.setHelpMessage(lblMsg, objMandatoryRB.getString("txtInstrumentNo2"));
        tdtInstrumentDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtInstrumentDate"));
        txaParticulars.setHelpMessage(lblMsg, objMandatoryRB.getString("txaParticulars"));
        txtAmount.setHelpMessage(lblMsg, objMandatoryRB.getString("txtAmount"));
    }

    private void enableDisable(boolean yesno) {
        ClientUtil.enableDisable(this, yesno);
    }

    private void setButtonEnableDisable() {
        btnNew.setEnabled(!btnNew.isEnabled());
        btnEdit.setEnabled(!btnEdit.isEnabled());
        btnDelete.setEnabled(!btnDelete.isEnabled());
        mitNew.setEnabled(btnNew.isEnabled());
        mitEdit.setEnabled(btnEdit.isEnabled());
        mitDelete.setEnabled(btnDelete.isEnabled());
        btnSave.setEnabled(!btnNew.isEnabled());
        btnCancel.setEnabled(!btnNew.isEnabled());
        mitSave.setEnabled(btnSave.isEnabled());
        mitCancel.setEnabled(btnCancel.isEnabled());
        lblStatus.setText(observable.getLblStatus());
        btnView.setEnabled(!btnView.isEnabled());
    }

    private void resetDataEntryTextFields() {
        txaParticulars.setText("");
        txtAmount.setText("");
        txtTransactionID.setText("");

    }

    private void resetOtherBankTxtFields() {
        cboBankHead.setSelectedItem("");
        txtBranchHead.setText("");
        tdtDate.setDateValue(null);
    }

    private void updateTable() {
        this.tblDataEntry.setModel(observable.getTbmDataEntry());
        this.tblDataEntry.revalidate();
    }

    public void enableOtherBankDetails(boolean flag) {
        cboBankHead.setEnabled(flag);
        txtBranchHead.setEnabled(true);
        tdtDate.setEnabled(flag);
    }

    public void enableDataEntryDetails(boolean flag) {
        txtTransactionID.setEnabled(flag);
        rdoTransactionType_Debit.setEnabled(flag);
        rdoTransactionType_Credit.setEnabled(flag);
        cboInstrumentType.setEnabled(flag);
        txtInstrumentNo1.setEnabled(flag);
        txtInstrumentNo2.setEnabled(flag);
        tdtInstrumentDate.setEnabled(flag);
        txtAmount.setEnabled(flag);
        txaParticulars.setEnabled(flag);
    }

    public void enableTblButtons(boolean flag) {
        btnDataEntrySave.setEnabled(flag);
        btnDataEntryDelete.setEnabled(flag);
    }

    private void updateTableData() {
        this.selectedSingleRow = true;
        observable.populateTableData(tblDataEntry.getSelectedRow());
        txtTransactionID.setText(observable.getTxtTransactionID());
        txtAmount.setText(CommonUtil.convertObjToStr(observable.getTxtAmount()));
        tdtDate.setDateValue(CommonUtil.convertObjToStr(observable.getTdtDate()));
        if (observable.isRdoPayment() == true) {
            rdoTransactionType_Debit.setSelected(true);
            rdoTransactionType_Credit.setSelected(false);
        } else if (observable.isRdoReceipt() == true) {
            rdoTransactionType_Debit.setSelected(false);
            rdoTransactionType_Credit.setSelected(true);
        }
        cboInstrumentType.setSelectedItem(observable.getCboInstrumentType());
        txtInstrumentNo1.setText(observable.getTxtInstrumentNo1());
        txtInstrumentNo2.setText(observable.getTxtInstrumentNo2());
        tdtInstrumentDate.setDateValue(CommonUtil.convertObjToStr(observable.getTdtDate()));
        txaParticulars.setText(observable.getTxaParticulars());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnAuthorize;
    private com.see.truetransact.uicomponent.CButton btnCancel;
    private com.see.truetransact.uicomponent.CButton btnClose;
    private com.see.truetransact.uicomponent.CButton btnDataEntryDelete;
    private com.see.truetransact.uicomponent.CButton btnDataEntryNew;
    private com.see.truetransact.uicomponent.CButton btnDataEntrySave;
    private com.see.truetransact.uicomponent.CButton btnDelete;
    private com.see.truetransact.uicomponent.CButton btnDisplay;
    private com.see.truetransact.uicomponent.CButton btnEdit;
    private com.see.truetransact.uicomponent.CButton btnException;
    private com.see.truetransact.uicomponent.CButton btnNew;
    private com.see.truetransact.uicomponent.CButton btnPrint;
    private com.see.truetransact.uicomponent.CButton btnReject;
    private com.see.truetransact.uicomponent.CButton btnSave;
    private com.see.truetransact.uicomponent.CButton btnView;
    private com.see.truetransact.uicomponent.CPanel cPanel1;
    private com.see.truetransact.uicomponent.CPanel cPanel2;
    private com.see.truetransact.uicomponent.CPanel cPanel3;
    private com.see.truetransact.uicomponent.CComboBox cboBankHead;
    private com.see.truetransact.uicomponent.CComboBox cboInstrumentType;
    private com.see.truetransact.uicomponent.CLabel lblAmount;
    private com.see.truetransact.uicomponent.CLabel lblBalance;
    private com.see.truetransact.uicomponent.CLabel lblBankHead;
    private com.see.truetransact.uicomponent.CLabel lblBranchHead;
    private com.see.truetransact.uicomponent.CLabel lblDate;
    private com.see.truetransact.uicomponent.CLabel lblInstrumentDate;
    private com.see.truetransact.uicomponent.CLabel lblInstrumentNo;
    private com.see.truetransact.uicomponent.CLabel lblInstrumentType;
    private com.see.truetransact.uicomponent.CLabel lblMsg;
    private com.see.truetransact.uicomponent.CLabel lblParticulars;
    private com.see.truetransact.uicomponent.CLabel lblSpace1;
    private com.see.truetransact.uicomponent.CLabel lblSpace17;
    private com.see.truetransact.uicomponent.CLabel lblSpace18;
    private com.see.truetransact.uicomponent.CLabel lblSpace19;
    private com.see.truetransact.uicomponent.CLabel lblSpace2;
    private com.see.truetransact.uicomponent.CLabel lblSpace20;
    private com.see.truetransact.uicomponent.CLabel lblSpace21;
    private com.see.truetransact.uicomponent.CLabel lblSpace22;
    private com.see.truetransact.uicomponent.CLabel lblSpace3;
    private com.see.truetransact.uicomponent.CLabel lblSpace4;
    private com.see.truetransact.uicomponent.CLabel lblSpace5;
    private com.see.truetransact.uicomponent.CLabel lblStatus;
    private com.see.truetransact.uicomponent.CLabel lblTotalAmount;
    private com.see.truetransact.uicomponent.CLabel lblTransactionID;
    private com.see.truetransact.uicomponent.CLabel lblTransactionType;
    private com.see.truetransact.uicomponent.CMenuBar mbrOtherBankDataEntry;
    private javax.swing.JMenuItem mitCancel;
    private javax.swing.JMenuItem mitClose;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JMenuItem mitNew;
    private javax.swing.JMenuItem mitPrint;
    private javax.swing.JMenuItem mitSave;
    private javax.swing.JMenu mnuProcess;
    private com.see.truetransact.uicomponent.CPanel panBankDetails;
    private com.see.truetransact.uicomponent.CPanel panBranchDetails;
    private com.see.truetransact.uicomponent.CPanel panDataEntry;
    private com.see.truetransact.uicomponent.CPanel panDataEntryButtons;
    private com.see.truetransact.uicomponent.CPanel panDataEntryDetails;
    private com.see.truetransact.uicomponent.CPanel panOtherBankDetails;
    private com.see.truetransact.uicomponent.CPanel panOtherBankInfo;
    private com.see.truetransact.uicomponent.CPanel panStatus;
    private com.see.truetransact.uicomponent.CPanel panTransactionType;
    private com.see.truetransact.uicomponent.CButtonGroup rdoTransactionType;
    private com.see.truetransact.uicomponent.CRadioButton rdoTransactionType_Credit;
    private com.see.truetransact.uicomponent.CRadioButton rdoTransactionType_Debit;
    private com.see.truetransact.uicomponent.CSeparator sptAddress;
    private javax.swing.JSeparator sptNew;
    private javax.swing.JSeparator sptSave;
    private com.see.truetransact.uicomponent.CScrollPane srpDataEntry;
    private com.see.truetransact.uicomponent.CScrollPane srpParticulars;
    private com.see.truetransact.uicomponent.CTabbedPane tabOtherBankDetails;
    private com.see.truetransact.uicomponent.CTable tblDataEntry;
    private javax.swing.JToolBar tbrOtherBankDetails;
    private com.see.truetransact.uicomponent.CDateField tdtDate;
    private com.see.truetransact.uicomponent.CDateField tdtInstrumentDate;
    private com.see.truetransact.uicomponent.CTextArea txaParticulars;
    private com.see.truetransact.uicomponent.CTextField txtAmount;
    private com.see.truetransact.uicomponent.CLabel txtBalance;
    private com.see.truetransact.uicomponent.CLabel txtBranchHead;
    private com.see.truetransact.uicomponent.CTextField txtInstrumentNo1;
    private com.see.truetransact.uicomponent.CTextField txtInstrumentNo2;
    private com.see.truetransact.uicomponent.CLabel txtTotalAmount;
    private com.see.truetransact.uicomponent.CTextField txtTransactionID;
    // End of variables declaration//GEN-END:variables
}
