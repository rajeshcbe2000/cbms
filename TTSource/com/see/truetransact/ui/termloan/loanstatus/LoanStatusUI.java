/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.  
 * 
 *
 * Authorize.java
 *
 * Created on March 3, 2004, 1:46 PM
 */

package com.see.truetransact.ui.termloan.loanstatus;

import java.util.Date;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Observer;
import java.util.Observable;
import java.util.List;
import javax.swing.table.*; 
import javax.swing.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.Color;
import java.awt.Component;

import java.awt.Point;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.event.ListSelectionListener;
//import javax.swing.DefaultListModel;

import org.apache.log4j.Logger;

import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.clientutil.EnhancedComboBoxModel;
import com.see.truetransact.clientutil.CMandatoryDialog;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.uicomponent.COptionPane;
import com.see.truetransact.clientutil.ComboBoxModel;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.clientutil.ClientConstants;
import com.see.truetransact.clientutil.ttrintegration.TTIntegration;
import com.see.truetransact.ui.common.authorize.AuthorizeUI;
import com.see.truetransact.clientproxy.ProxyParameters;
import com.see.truetransact.ui.common.viewall.ViewAll;

import com.see.truetransact.ui.common.viewall.TableDialogUI;
import com.see.truetransact.ui.TrueTransactMain;

/**
 * @author  bala
 */
public class LoanStatusUI extends com.see.truetransact.uicomponent.CInternalFrame implements Observer {
    private TableModelListener tableModelListener;
    private LoanStatusOB observable;
    HashMap paramMap = null;
    CInternalFrame parent = null;
    Date currDt = null;
    TTIntegration ttIntegration = null;
    int previousRow = -1;
    boolean generateNotice = false;
    final int TO=0, FROM=1;
    int viewType=-1;
    boolean isFilled=false;
    boolean transAmtEdit=false;
    private final static Logger log = Logger.getLogger(LoanStatusUI.class);

    /** Creates new form AuthorizeUI */
    public LoanStatusUI() {
        setupInit();
        setupScreen();
        enableDisableSearchDetails(true);
    }
    
    /** Creates new form AuthorizeUI */
    public LoanStatusUI(CInternalFrame parent, HashMap paramMap) {
        this.parent = parent;
        this.paramMap = paramMap;
        setupInit();
        setupScreen();
        cPanel1.setVisible(false);
    }
    
    private void setupInit() {
        currDt = ClientUtil.getCurrentDate();
        initComponents();
        internationalize();
        setObservable();
        createCboProdType();
        createCboNoticeType();
        setMaxLength();
        initSubsidyTableData();
        enableDisableSearchDetails(false);
      }

    private void enableDisableSearchDetails(boolean flag){
        ClientUtil.enableDisable(panMultiSearch,flag);
        btnProcess.setEnabled(flag);
        btnFromAccountNo.setEnabled(flag);
   }
    private void setMaxLength(){
        txtFromAccountNo.setAllowAll(true);
     }
    private void setupScreen() {
       Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
       Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) frameSize.height = screenSize.height;
        if (frameSize.width > screenSize.width) frameSize.width = screenSize.width;
        this.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
    }
    
    private void setObservable() {
        try {
            observable = new LoanStatusOB();
            observable.addObserver(this);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void fillData(Object obj){
        HashMap dataMap =(HashMap)obj;
        if(viewType==FROM){
            if(dataMap.containsKey("ACCOUNTNO")){
                txtFromAccountNo.setText(CommonUtil.convertObjToStr(dataMap.get("ACCOUNTNO")));
            }else{
                txtFromAccountNo.setText(CommonUtil.convertObjToStr(dataMap.get("ACT_NUM")));
            }
        }
    }
   /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panSearchCondition = new com.see.truetransact.uicomponent.CPanel();
        panMultiSearch = new com.see.truetransact.uicomponent.CPanel();
        lblProdId = new com.see.truetransact.uicomponent.CLabel();
        cboProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblProdType = new com.see.truetransact.uicomponent.CLabel();
        cboProdType = new com.see.truetransact.uicomponent.CComboBox();
        panToAccount = new com.see.truetransact.uicomponent.CPanel();
        lblToAccount = new com.see.truetransact.uicomponent.CLabel();
        txtFromAccountNo = new com.see.truetransact.uicomponent.CTextField();
        lblToDate = new com.see.truetransact.uicomponent.CLabel();
        tdtFromAccountNo = new com.see.truetransact.uicomponent.CDateField();
        btnFromAccountNo = new com.see.truetransact.uicomponent.CButton();
        panMultiSearch2 = new com.see.truetransact.uicomponent.CPanel();
        btnProcess = new com.see.truetransact.uicomponent.CButton();
        panTable = new com.see.truetransact.uicomponent.CPanel();
        srcTable = new com.see.truetransact.uicomponent.CScrollPane();
        tblData = new com.see.truetransact.uicomponent.CTable();
        lblNoOfRecordsVal = new com.see.truetransact.uicomponent.CLabel();
        panSearch = new com.see.truetransact.uicomponent.CPanel();
        btnClose = new com.see.truetransact.uicomponent.CButton();
        btnClear1 = new com.see.truetransact.uicomponent.CButton();
        cPanel1 = new com.see.truetransact.uicomponent.CPanel();
        sptLine = new com.see.truetransact.uicomponent.CSeparator();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Loan Status");
        setMinimumSize(new java.awt.Dimension(800, 630));
        setPreferredSize(new java.awt.Dimension(800, 630));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panSearchCondition.setMinimumSize(new java.awt.Dimension(574, 140));
        panSearchCondition.setPreferredSize(new java.awt.Dimension(574, 140));
        panSearchCondition.setLayout(new java.awt.GridBagLayout());

        panMultiSearch.setMaximumSize(new java.awt.Dimension(350, 170));
        panMultiSearch.setMinimumSize(new java.awt.Dimension(350, 170));
        panMultiSearch.setPreferredSize(new java.awt.Dimension(350, 170));
        panMultiSearch.setLayout(new java.awt.GridBagLayout());

        lblProdId.setText("Product Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 80, 0, 0);
        panMultiSearch.add(lblProdId, gridBagConstraints);

        cboProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProdId.setPopupWidth(160);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 9, 0, 0);
        panMultiSearch.add(cboProdId, gridBagConstraints);

        lblProdType.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 97, 0, 0);
        panMultiSearch.add(lblProdType, gridBagConstraints);

        cboProdType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProdType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProdTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 8, 0, 0);
        panMultiSearch.add(cboProdType, gridBagConstraints);

        panToAccount.setMaximumSize(new java.awt.Dimension(280, 58));
        panToAccount.setMinimumSize(new java.awt.Dimension(280, 58));
        panToAccount.setPreferredSize(new java.awt.Dimension(280, 58));
        panToAccount.setLayout(new java.awt.GridBagLayout());

        lblToAccount.setText("Account No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 41, 0, 0);
        panToAccount.add(lblToAccount, gridBagConstraints);

        txtFromAccountNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtFromAccountNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFromAccountNoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 0, 0);
        panToAccount.add(txtFromAccountNo, gridBagConstraints);

        lblToDate.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(9, 82, 0, 0);
        panToAccount.add(lblToDate, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 4, 0);
        panToAccount.add(tdtFromAccountNo, gridBagConstraints);

        btnFromAccountNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnFromAccountNo.setToolTipText("To Account");
        btnFromAccountNo.setPreferredSize(new java.awt.Dimension(21, 21));
        btnFromAccountNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFromAccountNoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 9);
        panToAccount.add(btnFromAccountNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 50, 27, 20);
        panMultiSearch.add(panToAccount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSearchCondition.add(panMultiSearch, gridBagConstraints);

        panMultiSearch2.setMaximumSize(new java.awt.Dimension(200, 55));
        panMultiSearch2.setMinimumSize(new java.awt.Dimension(200, 55));
        panMultiSearch2.setPreferredSize(new java.awt.Dimension(200, 55));
        panMultiSearch2.setLayout(null);

        btnProcess.setText("Search");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });
        panMultiSearch2.add(btnProcess);
        btnProcess.setBounds(63, 64, 73, 27);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSearchCondition.add(panMultiSearch2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(panSearchCondition, gridBagConstraints);

        panTable.setMaximumSize(new java.awt.Dimension(400, 350));
        panTable.setMinimumSize(new java.awt.Dimension(400, 350));
        panTable.setPreferredSize(new java.awt.Dimension(400, 350));
        panTable.setLayout(new java.awt.GridBagLayout());

        srcTable.setMaximumSize(new java.awt.Dimension(760, 300));
        srcTable.setMinimumSize(new java.awt.Dimension(760, 300));
        srcTable.setPreferredSize(new java.awt.Dimension(760, 300));
        srcTable.setViewport(srcTable.getRowHeader());

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblData.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblData.setEditingColumn(5);
        tblData.setEditingRow(0);
        tblData.setMaximumSize(new java.awt.Dimension(760, 300));
        tblData.setMinimumSize(new java.awt.Dimension(760, 300));
        tblData.setPreferredScrollableViewportSize(new java.awt.Dimension(450000, 400000));
        tblData.setPreferredSize(new java.awt.Dimension(760, 300));
        tblData.setReorderingAllowed(true);
        srcTable.setViewportView(tblData);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panTable.add(srcTable, gridBagConstraints);

        lblNoOfRecordsVal.setMaximumSize(new java.awt.Dimension(230, 85));
        lblNoOfRecordsVal.setMinimumSize(new java.awt.Dimension(80, 18));
        lblNoOfRecordsVal.setPreferredSize(new java.awt.Dimension(80, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panTable.add(lblNoOfRecordsVal, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(panTable, gridBagConstraints);

        panSearch.setMinimumSize(new java.awt.Dimension(150, 35));
        panSearch.setPreferredSize(new java.awt.Dimension(150, 35));
        panSearch.setLayout(new java.awt.GridBagLayout());

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CLOSE.gif"))); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panSearch.add(btnClose, gridBagConstraints);

        btnClear1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CANCEL.gif"))); // NOI18N
        btnClear1.setText("Clear");
        btnClear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClear1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 25.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSearch.add(btnClear1, gridBagConstraints);

        cPanel1.setMinimumSize(new java.awt.Dimension(180, 35));
        cPanel1.setPreferredSize(new java.awt.Dimension(180, 35));
        cPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 10.0;
        panSearch.add(cPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(panSearch, gridBagConstraints);

        sptLine.setMinimumSize(new java.awt.Dimension(2, 2));
        sptLine.setPreferredSize(new java.awt.Dimension(2, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(sptLine, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void btnCancelActionPerformed(){
        cboProdType.setSelectedItem("");
        observable.setCbmProdId("");
        txtFromAccountNo.setText("");
        resetinitStatusTableData();
        observable.setStatus();
        
    }    
   
     private void popUp(int field) {
        final HashMap viewMap = new HashMap();
        viewType = field;
        HashMap hash = new HashMap();
        String prodType = CommonUtil.convertObjToStr(cboProdType.getSelectedItem());
        if(prodType.equals("Advances")){
            viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountListAD");
        }
        else if(prodType.equals("Term Loans")){
            viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountListTL");
        }
       
        hash.put("SELECTED_BRANCH", com.see.truetransact.ui.TrueTransactMain.BRANCH_ID);
        hash.put("PROD_ID", CommonUtil.convertObjToStr(observable.getCbmProdId().getKeyForSelected()));
        hash.put(CommonConstants.BRANCH_ID, com.see.truetransact.ui.TrueTransactMain.BRANCH_ID);
        viewMap.put(CommonConstants.MAP_WHERE, hash);
        new ViewAll(this, viewMap).show();
    }
  
 private String validateAccNo(){
        String from = CommonUtil.convertObjToStr(txtFromAccountNo.getText());
       String message = "";
   //        if(CommonUtil.convertObjToStr(cboProdType.getSelectedItem()).equals("TL") || ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString().equals("AD"))
//        {
            HashMap hash=new HashMap();
         hash.put("PROD_ID",CommonUtil.convertObjToStr(observable.getCbmProdId().getKeyForSelected()));
         hash.put("ACT_NUM",txtFromAccountNo.getText());
      
         
         hash.put("SELECTED_BRANCH",ProxyParameters.BRANCH_ID);
         List actlst=ClientUtil.executeQuery("getActNotCLOSEDTL",hash);
  
//        }
        return message;
    }

     private void displayAlert(String message){
        final CMandatoryDialog cmd = new CMandatoryDialog();
        cmd.setMessage(message);
        cmd.setModal(true);
        cmd.show();
    }
    private void btnClear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClear1ActionPerformed
        // TODO add your handling code here:
        ClientUtil.clearAll(this);
        resetinitStatusTableData();
    }//GEN-LAST:event_btnClear1ActionPerformed
    public void validation(){
        String prodType = CommonUtil.convertObjToStr(cboProdType.getSelectedItem());
        if(prodType=="" || prodType.equals("")){
            displayAlert("Enter Product Type!!!");
            return;
        }
        String prodId = CommonUtil.convertObjToStr(cboProdId.getSelectedItem());
        if(prodId=="" || prodId.equals("")){
            displayAlert("Enter Product Id!!!");
            return;
        }
        String AcNo = CommonUtil.convertObjToStr(txtFromAccountNo.getText());
        if(AcNo=="" || AcNo.equals("")){
            displayAlert("Enter Account No!!!");
            return;
        }
         String date = CommonUtil.convertObjToStr(tdtFromAccountNo.getDateValue());
        if(date=="" || date.equals("")){
            displayAlert("Enter Date!!!");
            return;
        }
    }
    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
       validation();
       validateAccNo();
       initSubsidyTableData();
 
    }//GEN-LAST:event_btnProcessActionPerformed
  //  }
     public Date getProperDateFormat(Object obj) {
        Date curDt = null;
        if (obj != null && obj.toString().length() > 0) {
            Date tempDt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(obj));
            curDt = (Date) currDt.clone();
            curDt.setDate(tempDt.getDate());
            curDt.setMonth(tempDt.getMonth());
            curDt.setYear(tempDt.getYear());
        }
        return curDt;
    }
     
    public ArrayList  populateData() {
        HashMap viewMap = new HashMap();
        HashMap whereMap = new HashMap();
        ArrayList resultlist=new ArrayList();
        String prodType = String.valueOf(cboProdType.getSelectedItem());
        viewMap.put(CommonConstants.MAP_NAME, "getLoanStatus");
        if (txtFromAccountNo.getText()!=null) {
                whereMap.put("ACT_NUM", CommonUtil.convertObjToStr(txtFromAccountNo.getText()));
         }
        whereMap.put("FROM_DATE",getProperDateFormat(tdtFromAccountNo.getDateValue()));
         viewMap.put(CommonConstants.MAP_WHERE, whereMap);
         try {
                log.info("populateData...");
                resultlist=(ArrayList)observable.populateDataNew(viewMap, tblData);
           } catch( Exception e ) {
                System.err.println( "Exception " + e.toString() + "Caught" );
                e.printStackTrace();
            }
        viewMap = null;
        whereMap = null;
        return resultlist;
    }
    public void initSubsidyTableData() {
        tblData.setModel(new javax.swing.table.DefaultTableModel(
        setTableData(),
        new String [] {
            "Charge Type","Balance"
        }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class,
                java.lang.String.class
                            
            };
            
            boolean[] canEdit = new boolean [] {
                false, false
            };
           
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (columnIndex==5 && transAmtEdit){
                    return true;
                }
               
                return canEdit [columnIndex];
            }
     });
        
        
        tblData.setCellSelectionEnabled(true);
   
        setTableModelListener();
        setSizeTallyTableData();
        }
    
    public void resetinitStatusTableData() {
        Object obj[][]=new Object[0][0];
        tblData.setModel(new javax.swing.table.DefaultTableModel(
        obj,
        new String [] {
             "Charge Type","Balance"
        }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class,
                java.lang.String.class
               
                
            };
            
            boolean[] canEdit = new boolean [] {
                false, false
            };
            
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (columnIndex==5 && transAmtEdit){
                    return true;
                }
                
                return canEdit [columnIndex];
            }
        });
        tblData.setCellSelectionEnabled(true);
        setSizeTallyTableData();
       
    }
    
    private void tblDataPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblRecoveryListTallyPropertyChange
 
    }//GEN-LAST:event_tblRecoveryListTallyPropertyChange

    private void btnFromAccountNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFromAccountNoActionPerformed
        // TODO add your handling code here:
        popUp(FROM);
}//GEN-LAST:event_btnFromAccountNoActionPerformed

    private void txtFromAccountNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromAccountNoFocusLost
        // TODO add your handling code here:
        final String MESSAGE = validateAccNo();
        if(!MESSAGE.equalsIgnoreCase("")){
            displayAlert(MESSAGE);
        }
    }//GEN-LAST:event_txtFromAccountNoFocusLost

    private void cboProdTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProdTypeActionPerformed
        // TODO add your handling code here:
        String prodType = String.valueOf(cboProdType.getSelectedItem());
        observable.setCbmProdId(prodType);
        cboProdId.setModel(observable.getCbmProdId());
 
}//GEN-LAST:event_cboProdTypeActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed
    
    
     private void setTableModelListenerUpdate() {
        tableModelListener = new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    System.out.println("Cell " + e.getFirstRow() + ", "
                    + e.getColumn() + " changed. The new value: "
                    + tblData.getModel().getValueAt(e.getFirstRow(),
                    e.getColumn()));
                    int row = e.getFirstRow();
                    int column  = e.getColumn();
                    if (column == 5) {
                        TableModel model = tblData.getModel();
                        System.out.println("tblData getvalueate"+tblData.getValueAt(tblData.getSelectedRow(),5)+" e.getColumn()"+ e.getColumn());
                    }
                }
            }
        };
        tblData.getModel().addTableModelListener(tableModelListener);
    }
    private Object[][] setTableData() {
        DefaultTableModel  tblModel = (DefaultTableModel) tblData.getModel();
            HashMap whereMap=new HashMap();
            double totalAmount = 0.0;
            ArrayList recoveryList = new ArrayList();
            recoveryList = (ArrayList)populateData();
            if(recoveryList !=null && recoveryList.size()>0 ){
            Object totalList[][] = new Object[recoveryList.size()+1][2];
            Object totalListRow[] = new Object[8];
            
            
            whereMap=new HashMap();
            double total_Demand=0.0;
            double total_RecoveredAmt=0.0;
            for(int i=0;i<recoveryList.size();i++){
                whereMap=(HashMap) recoveryList.get(i);
//                System.out.println("####### whereMap : "+i+""+whereMap);
                totalList[i][0] =CommonUtil.convertObjToStr(whereMap.get("CHARGE_TYPE"));
                totalList[i][1] = CommonUtil.convertObjToStr(whereMap.get("BALANCE"));
                totalAmount +=  CommonUtil.convertObjToDouble(whereMap.get("BALANCE"));
                if(whereMap.get("CHARGE_TYPE").equals("PRINCIPAL")){
                   totalAmount = totalAmount -  CommonUtil.convertObjToDouble(whereMap.get("BALANCE"));
                }
            }
            totalList[recoveryList.size()][0] = "Total Amount";
            totalList[recoveryList.size()][1] = CommonUtil.convertObjToStr(String.valueOf(totalAmount));
            return totalList;
            }
            return null;
    }
    
    private void setTableModelListener() {
    
    }
    
    private void setSizeTallyTableData(){
                if(tblData.getRowCount()>0){
                    tblData.getColumnModel().getColumn(0).setPreferredWidth(400);
                    tblData.getColumnModel().getColumn(0).setMaxWidth(400);
                    tblData.getColumnModel().getColumn(0).setMinWidth(400);
                    tblData.getColumnModel().getColumn(1).setPreferredWidth(360);
                    tblData.getColumnModel().getColumn(1).setMaxWidth(360);
                    tblData.getColumnModel().getColumn(1).setMinWidth(360);
                  }
    }
   
    private void createCboProdType() {
        cboProdType.addItem("");
        cboProdType.addItem("Advances");
        cboProdType.addItem("Term Loans");
    }
    
    private void createCboNoticeType() {
     }
    
    private Date getProperDate(Date sourceDate) {
        Date targetDate = (Date) currDt.clone();
        targetDate.setDate(sourceDate.getDate());
        targetDate.setMonth(sourceDate.getMonth());
        targetDate.setYear(sourceDate.getYear());
        return targetDate;
    }
    
    private ComboBoxModel getListModel() {
        ComboBoxModel listData = new ComboBoxModel();
        return listData;
    }
    
    
    
    
    private void updateDBStatus(String status) {
        HashMap screenParamMap = new HashMap();
        screenParamMap.put(CommonConstants.AUTHORIZEDATA, observable.getSelected(tblData));
        screenParamMap.put(CommonConstants.AUTHORIZESTATUS, status);
    }
    
    private void setColour() {
        /* Set a cellrenderer to this table in order format the date */
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer() {
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected,hasFocus, row, column);
                System.out.println("row #####"+row);
                boolean selected = ((Boolean) table.getValueAt(row, 0)).booleanValue();
                if (!selected) {
                    setForeground(Color.RED);
                }
                else {
                    setForeground(Color.BLACK);
                }
                // Set oquae
                this.setOpaque(true);
                return this;
            }
        };
        tblData.setDefaultRenderer(Object.class, renderer);
    }
    
    
    
    
    
    
    
    private void internationalize() {
        //        lblSearch.setText(resourceBundle.getString("lblSearch"));
        //        btnSearch.setText(resourceBundle.getString("btnSearch"));
        //        chkCase.setText(resourceBundle.getString("chkCase"));
        //        btnAuthorize.setText(resourceBundle.getString("btnAuthorize"));
        //        btnCancel.setText(resourceBundle.getString("btnCancel"));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        HashMap mapParam = new HashMap();
        
        HashMap whereMap = new HashMap();
        whereMap.put("USER_ID", "sysadmin1");
        //getSelectOperativeAcctProductAuthorizeTOList
        whereMap.put("INITIATED_BRANCH", ProxyParameters.BRANCH_ID);
        whereMap.put("OUTWARD_DT", ClientUtil.getCurrentDate());
        mapParam.put(CommonConstants.MAP_NAME, "getSelectOutwardClearingRealizeTOList");
        mapParam.put(CommonConstants.MAP_WHERE, whereMap);
        
        mapParam.put(CommonConstants.UPDATE_MAP_NAME, "authorizeOperativeAcctProduct");
        
        //        AuthorizeUI authorizeUI = new AuthorizeUI(mapParam);
        //        authorizeUI.setAuthorize(true);
        //        authorizeUI.setException(false);
        //        authorizeUI.setReject(false);
        //        authorizeUI.setRealize(true);
        //        authorizeUI.show();
    }
    
    public void update(Observable o, Object arg) {
      
    }
  
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnClear1;
    private com.see.truetransact.uicomponent.CButton btnClose;
    private com.see.truetransact.uicomponent.CButton btnFromAccountNo;
    private com.see.truetransact.uicomponent.CButton btnProcess;
    private com.see.truetransact.uicomponent.CPanel cPanel1;
    private com.see.truetransact.uicomponent.CComboBox cboProdId;
    private com.see.truetransact.uicomponent.CComboBox cboProdType;
    private com.see.truetransact.uicomponent.CLabel lblNoOfRecordsVal;
    private com.see.truetransact.uicomponent.CLabel lblProdId;
    private com.see.truetransact.uicomponent.CLabel lblProdType;
    private com.see.truetransact.uicomponent.CLabel lblToAccount;
    private com.see.truetransact.uicomponent.CLabel lblToDate;
    private com.see.truetransact.uicomponent.CPanel panMultiSearch;
    private com.see.truetransact.uicomponent.CPanel panMultiSearch2;
    private com.see.truetransact.uicomponent.CPanel panSearch;
    private com.see.truetransact.uicomponent.CPanel panSearchCondition;
    private com.see.truetransact.uicomponent.CPanel panTable;
    private com.see.truetransact.uicomponent.CPanel panToAccount;
    private com.see.truetransact.uicomponent.CSeparator sptLine;
    private com.see.truetransact.uicomponent.CScrollPane srcTable;
    private com.see.truetransact.uicomponent.CTable tblData;
    private com.see.truetransact.uicomponent.CDateField tdtFromAccountNo;
    private com.see.truetransact.uicomponent.CTextField txtFromAccountNo;
    // End of variables declaration//GEN-END:variables
}

