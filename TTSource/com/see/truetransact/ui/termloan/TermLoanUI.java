/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.
 * 
 *
 * TermLoanUI.java
 *
 * Created on November 28, 2003, 3:55 PM
 */
package com.see.truetransact.ui.termloan;

import java.awt.*;
import java.util.*;
import javax.swing.*;
import java.util.Map;
import java.util.Date;
import java.util.List;
import javax.swing.table.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Observable;
import org.apache.log4j.Logger;
import java.util.LinkedHashMap;
import com.see.truetransact.transferobject.common.charges.LoanSlabChargesTO;
import com.see.truetransact.ui.TrueTransactMain;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.uicomponent.COptionPane;
import com.see.truetransact.uicomponent.CButtonGroup;
import com.see.truetransact.clientutil.ComboBoxModel;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.uimandatory.MandatoryCheck;
import com.see.truetransact.clientutil.ClientConstants;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.clientproxy.ProxyParameters;
import com.see.truetransact.clientutil.CMandatoryDialog;
import com.see.truetransact.uimandatory.UIMandatoryField;
import com.see.truetransact.uivalidation.ToDateValidation;
import com.see.truetransact.ui.deposit.lien.DepositLienUI;
import com.see.truetransact.clientutil.EnhancedTableModel;
import com.see.truetransact.ui.customer.CheckCustomerIdUI;
import com.see.truetransact.uivalidation.DefaultValidation;
import com.see.truetransact.uivalidation.NumericValidation;
import com.see.truetransact.ui.common.authorize.AuthorizeUI;
import com.see.truetransact.uivalidation.CurrencyValidation;
import com.see.truetransact.commonutil.interestcalc.Rounding;
import com.see.truetransact.uivalidation.PincodeValidation_IN;
import com.see.truetransact.uivalidation.PercentageValidation;
import com.see.truetransact.ui.common.customer.MembershipLiabilityUI;
import com.see.truetransact.ui.common.powerofattorney.PowerOfAttorneyUI;
import com.see.truetransact.ui.termloan.emicalculator.TermLoanInstallmentUI;
import com.see.truetransact.ui.termloan.loandisbursement.LoanDisbursementUI;
import com.see.truetransact.ui.termloan.loandisbursement.LoanDisbursementOB;
import com.see.truetransact.transferobject.termloan.TermLoanSanctionFacilityTO;
import com.see.truetransact.ui.common.authorizedsignatory.AuthorizedSignatoryUI;
import com.see.truetransact.ui.common.servicetax.ServiceTaxCalculation;
import com.see.truetransact.ui.termloan.customerDetailsScreen.CustomerDetailsScreenUI;
import com.see.truetransact.ui.termloan.loanapplicationregister.LoanApplicationOB;
import com.see.truetransact.ui.customer.IndividualCustUI;
import com.see.truetransact.ui.salaryrecovery.AuthorizeListDebitUI;
import com.see.truetransact.ui.common.viewall.*;

/*
 *
 * @author  shanmugavel
 * Created on November 28, 2003, 3:55 PM
 *
 */
public class TermLoanUI extends CInternalFrame implements java.util.Observer, UIMandatoryField {

    java.util.ResourceBundle resourceBundle = java.util.ResourceBundle.getBundle("com.see.truetransact.ui.termloan.TermLoanRB", ProxyParameters.LANGUAGE);
    //    TermLoanRB resourceBundle = new TermLoanRB();
    public static double oldloanAmt=0;
    TermLoanOB observable;
    TermLoanBorrowerOB observableBorrow;
    TermLoanCompanyOB observableComp;
    TermLoanSecurityOB observableSecurity;
    TermLoanRepaymentOB observableRepay;
    TermLoanGuarantorOB observableGuarantor;
    TermLoanDocumentDetailsOB observableDocument;
    TermLoanInterestOB observableInt;
    TermLoanClassificationOB observableClassi;
    TermLoanOtherDetailsOB observableOtherDetails;
    TermLoanAdditionalSanctionOB observableAdditionalSanctionOB;
    AuthorizedSignatoryUI authSignUI = null;
    PowerOfAttorneyUI poaUI = null;
    LoanDisbursementUI loanDisbursementUI = null;
    LoanDisbursementOB loanDisbursementOB = null;
    LoanApplicationOB observableApplication;
    private Date date;
    private Date repayFromdate;
    private HashMap mandatoryMap;
    private boolean updateModeAuthorize = false;
    private boolean updateModePoA = false;
    private boolean updateSanctionFacility = false;
    private boolean updateSanctionMain = false;
    private boolean updateSecurity = false;
    private boolean updateRepayment = false;
    private boolean repayNewMode = false;
    private boolean allowMultiRepay = true;
    private boolean updateGuarantor = false;
    private boolean updateDocument = false;
    private boolean updateInterest = false;
    private boolean alreadyChecked = true;
    private boolean isFilled = false;
    private boolean sanMousePress = false;
    private boolean sanValueChanged = false;
    private boolean sanDetailMousePressedForLTD = false;
    private boolean additionalSanMousePress = false;
    private boolean facilityFlag = true;
    private boolean outStandingAmtRepayment = false;
    private boolean existRecord = false;
    private boolean repayMorotoruimavailable = false;
    private HashMap accNumMap = new HashMap();
    private Date curr_dt = null;
    private Date repaymentDate = null;
    private String docGenIdValue = "";
    int result;
    int modeAuthorize = -1;
    int modePoA = -1;
    int rowSanctionFacility = -1;
    int rowSanctionMain = -1;
    int rowFacilityTabSanction = -1;
    int rowFacilityTabFacility = -1;
    int rowSecurity = -1;
    int rowRepayment = -1;
    int dumRowRepay = -1;
    int rowGuarantor = -1;
    int rowDocument = -1;
    int rowInterest = -1;
    int transCount = 0;
    boolean sanction = false;
    boolean sandetail = false;
    boolean santab = false;
    boolean sanfacTab = false;
    int rowmaintab = -1;
    int rowfactab = -1;
    int rowsan = -1;
    int rowsanDetail = -1;
    int updateTab = -1;
    String accountClosingCharge = null;
    private final static Logger log = Logger.getLogger(TermLoanUI.class);
    private final String ACT = "ACT";
    private final String AUTHORIZE = "AUTHORIZE";
    private final String CORPORATE = "CORPORATE";
    private final String FLOATING_RATE = "FLOATING_RATE";
    private final String FIXED_RATE = "FIXED_RATE";
    private final String INDIVIDUAL = "INDIVIDUAL";
    private final String IS_COOPERATIVE = "IS_COOPERATIVE";
    private final String JOINT_ACCOUNT = "JOINT_ACCOUNT";
    private final String LOANS_AGAINST_DEPOSITS = "LOANS_AGAINST_DEPOSITS";
    private final String REJECT = "REJECT";
    private final String EXCEPTION = "EXCEPTION";
    private final String PROD = "PROD";
    private final String SUBSIDY_GL = "SUBSIDY_GL";
    private String viewType = "";
    private String loanType = "OTHERS";
    private boolean facilitySaved = false;
    private boolean btnNewPressed = false;
    private int addSanctionPosition = -1;
    private boolean allowResetVisit = false;
    private boolean deleteInstallment = false;
    private boolean enableControls = false;
    private boolean updateRecords = false;
    private boolean transNew = true;
    private boolean finalChecking = false;
    //Loan Charges
    private boolean tableFlag = false;
    private JTable table = null;
    public String prodDesc = "";
    private String shareLink = "";
    private String excludeScSt = "";
    private List chargelst = null;
    Rounding rd = new Rounding();
    private boolean updateMode = false;
    private boolean updateLosMode = false;
    private double eligibleAmt = 0;
    boolean fromAuthorizeUI = false;
    boolean fromNewAuthorizeUI = false;
    boolean fromManagerAuthorizeUI = false;
    boolean fromPayMasterUI = false;
    AuthorizeListUI authorizeListUI = null;
    NewAuthorizeListUI newauthorizeListUI = null;
    AuthorizeListDebitUI ManagerauthorizeListUI=null;
    IndividualCustUI individualCustUI = null;
    int salarytblSelectedRow = -1;
    double balanceShare = 0.0;
    double balnoShare = 0.0;
    String caste = "";
    private int rejectFlag = 0;
    private int rowCount=0;
    private AcctSearchUI acctsearch=null;
    String todateEdit1 = "";
    String fromdateEdit1 = "";
    private boolean addSubsidy=false;
    boolean chktrans = false;
    boolean chkok=false;
    String loannaration="";
    public boolean tableCheck = false;
    public String suspenceAcctNo = null;
    public String suspenceProdID = null;
    public HashMap serviceTaxApplMap = new HashMap();
    public HashMap serviceTaxIdMap = new HashMap();
    HashMap serviceTax_Map=new HashMap();
    ServiceTaxCalculation objServiceTax;
    public boolean loanRenewal=false;
    public boolean closingInProgress = false;
    private boolean loanRenewalAllowedForProduct = false;
    private boolean loanReceiptInRenewal = false;
    private String oldLoanNo = null;
    private String suspenseActNum=null;
    private String emi_flat_rate=null;

    
    /**
     * Creates new form TermLoanUI
     */
    public TermLoanUI() {
        termLoanUI();
    }

    public TermLoanUI(String loanType) {
        this.loanType = loanType;
        termLoanUI();
    }

    private void termLoanUI() {
        initComponents();
        initRunComponents3();
        initRuntimeComponents();
        initRuntimeComponents2();
        initRunSecurityComponents();
        initComponentsforCourtOrder();
        initComponentsCropLoan();
        initDirPayPanel();
        lblMemberNo.setVisible(false);
        lblMemberNo_Disp.setVisible(false);
        panDailyLoanSanctionDetails = new com.see.truetransact.uicomponent.CPanel();
        setFieldNames();
        internationalize();
        setMaxLength();
        setObservable();
        SHGVisible(false);
        if (loanType.equals("LTD")) {
            tabLimitAmount.remove(panGuarantorInsuranceDetails);
            tabLimitAmount.remove(panCaseDetails);
        }
        panPeakSanctionDetails_Table.setVisible(false);
        authSignUI = new AuthorizedSignatoryUI("TL");
        poaUI = new PowerOfAttorneyUI("TL");
        loanDisbursementUI = new LoanDisbursementUI();
        observable.setIsTransacton(false);
        observableBorrow.setAuthSignAndPoAOB(authSignUI.getAuthorizedSignatoryOB(), poaUI.getPowerOfAttorneyOB());
        observable.setExtendedOB(authSignUI.getAuthorizedSignatoryOB(), authSignUI.getAuthorizedSignatoryInstructionOB(),
                poaUI.getPowerOfAttorneyOB(), loanDisbursementUI.getAgriSubLimitOB());//,agriSubSidyUI.getAgriSubSidyOB(),settlementUI.getSettlementOB(),actTransUI.getActTransOB());
        ClientUtil.enableDisable(this, false);
        allEnableDisable();
        initComponentData();
        if (loanType.equals("LTD")) {
            if (observable.getCbmIntGetFrom().containsElement("Product")) {
                observable.getCbmIntGetFrom().removeKeyAndElement("PROD");
            }
        } else if (!observable.getCbmIntGetFrom().containsElement("Product")) {
            observable.getCbmIntGetFrom().addKeyAndElement("PROD", "Product");
        }
        if (loanType.equals("OTHERS") && observable.getCbmTypeOfFacility().containsElement("Loans Against Deposits")) {
            observable.getCbmTypeOfFacility().removeKeyAndElement(LOANS_AGAINST_DEPOSITS);
        } else if (loanType.equals("LTD") && !observable.getCbmTypeOfFacility().containsElement("Loans Against Deposits")) {
            observable.getCbmTypeOfFacility().addKeyAndElement(LOANS_AGAINST_DEPOSITS, "Loans Against Deposits");
        }
        if (loanType.equals("OTHERS") && observable.getCbmRepayFreq().containsElement("Lump Sum")) {
            observable.getCbmRepayFreq().removeKeyAndElement("1");
        } else if (!observable.getCbmRepayFreq().containsElement("Lump Sum")) {
            observable.getCbmRepayFreq().addKeyAndElement("1", "Lump Sum");
        }

        if (loanType.equals("OTHERS") && observableRepay.getCbmRepayType().containsElement("Lump Sum")) {
            //observableRepay.getCbmRepayType().removeKeyAndElement("LUMP_SUM");
        } else if (!observableRepay.getCbmRepayType().containsElement("Lump Sum")) {
            observableRepay.getCbmRepayType().addKeyAndElement("LUMP_SUM", "Lump Sum");
        }
        if (loanType.equals("OTHERS")) {
            tabLimitAmount.remove(panAdditionalSanctionDetails);
            tabLimitAmount.add(panInterMaintenance, "Interest Maintenance", 1);
            tabLimitAmount.add(panRepaymentSchedule, "Repayment Schedule", 5);
            tabLimitAmount.addTab("Case Details", panCaseDetails);
        } else {
            tabLimitAmount.addTab("Additional Sanction Details", panAdditionalSanctionDetails);
        }
        setMandatoryHashMap();
        setHelpMessage();
        //        new MandatoryCheck().putMandatoryMarks(getClass().getName(),panFacilityDetails_Data1);
        new MandatoryCheck().putMandatoryMarks(getClass().getName(), panCourtOrder, getMandatoryHashMap());
        new MandatoryCheck().putMandatoryMarks(getClass().getName(), panCourtRepaymentDetails, getMandatoryHashMap());
        new MandatoryCheck().putMandatoryMarks(getClass().getName(), panSanctionAuthority, getMandatoryHashMap());
        observable.resetForm();
        lblTotalLimitAmt.setText("");
        observable.resetStatus();
        authSignUI.setLblStatus(observable.getLblStatus());
        poaUI.setLblStatus(observable.getLblStatus());
        authSignUI.setViewType(viewType);
        poaUI.setViewType(viewType);
        tabLimitAmount.add(authSignUI, "Authorized Signatory", 3);
        tabLimitAmount.add(poaUI, "Power of Attorney", 4);
        tabLimitAmount.remove(panAccountDetails);
        tabLimitAmount.resetVisits();
        btnDelete.setVisible(true);
        btnDelete.setEnabled(true);
        btnView.setEnabled(!btnView.isEnabled());
        curr_dt = ClientUtil.getCurrentDate();
        curr_dt = ClientUtil.getCurrentDate();

        //reducing screen
        tabLimitAmount.remove(panDocumentDetails);
        tabLimitAmount.remove(panGuarantorInsuranceDetails);
        tabLimitAmount.remove(authSignUI);
        tabLimitAmount.remove(poaUI);
        txtAcct_Name.setVisible(false);
        lblAcct_Name.setVisible(false);
        panExistingCustomer.setVisible(false);
        lblExistingCustomer.setVisible(false);
        txtExistingAcctNo.setVisible(false);
        lblExistingAcctNo.setVisible(false);
        txtEditTermLoanNo.setEnabled(true);
        btnCaseNew.setEnabled(false);
        btnCaseSave.setEnabled(false);
        btnCaseDelete.setEnabled(false);
        panCustDetails.setVisible(false);
        txtTotalShareAmount.setEnabled(false);
        txtTotalNoOfShare.setEnabled(false);
        tblMemberType.setModel(observable.getTblMemberTypeDetails());
        tblCollateral.setModel(observable.getTblCollateralDetails());
        tblJointCollateral.setModel(observable.getTblJointCollateral());
        tblSalary.setModel(observable.getTblSalarySecrityTable());
        tblVehicleType.setModel(observable.getTblVehicleTypeDetails());
        tblCropDetails.setModel(observable.getTblCropDetails());
        tblDepositDetails.setModel(observable.getTblDepositTypeDetails());
        tblLosDetails.setModel(observable.getTblLosTypeDetails());
        tabLimitAmount.add(panSecurityDetails, "Security Details", 2);
        btnMembershipLia.setEnabled(false);
        //od renewal
        odRenewalVisibleComp(false);
        enableDisableSalaryBtns(false);
//        dailyLoanVisibleComp(false);
        panDirectRepayment.setVisible(false);
        panRepaySanctionDetails.setVisible(true);

        //Added By Suresh
        if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
            panSalaryRecovery.setVisible(true);
            panLockStatus.setVisible(true);
            panCalcDiminishing.setVisible(true);
        } else {
            panSalaryRecovery.setVisible(true);
            rdoSalaryRecovery_No.setSelected(true);
            panLockStatus.setVisible(false);
            panCalcDiminishing.setVisible(false);
        }
        lblGroupDesc.setVisible(false);
        txtGroupDesc.setVisible(false);
        txtEnteredSubsidyAmt.setEnabled(false);
        setEnableDisableDirectPayment(false);
        btnCourtOrderNew.setVisible(false);
//        chkEligibleAmt.setVisible(false);
//        lblEligibleAmt.setVisible(false);
        setInstallmentType(true);
        btnAppNo.setEnabled(false);
        panLockStatus.setVisible(true);
        if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {// Added by nithya on 27-09-2019 for KD-553
            rdoSalaryRecovery_Yes.setSelected(true);
        }
        
        rdoGoldSecurityExitsNo.setSelected(true);
        txtGoldSecurityId.setEnabled(false);
        btnGoldSecurityIdSearch.setEnabled(false);
    }

    public void initDirPayPanel() {
        java.awt.GridBagConstraints gridBagConstraints = null;
        gridBagConstraints = new java.awt.GridBagConstraints();
        lblDirectRepayment = new com.see.truetransact.uicomponent.CLabel();
        panDirectPayment = new com.see.truetransact.uicomponent.CPanel();
        DirectRepayment_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        DirectRepayment_No = new com.see.truetransact.uicomponent.CRadioButton();
        cboDirectRepaymentProdType = new com.see.truetransact.uicomponent.CComboBox();
        lblDirectRepaymentProdType = new com.see.truetransact.uicomponent.CLabel();
        cboDirectRepaymentProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblDirectRepaymentProdId = new com.see.truetransact.uicomponent.CLabel();
        lblDirectRepaymentAcctHead = new com.see.truetransact.uicomponent.CLabel();
        lblDirectRepaymentAcctNo = new com.see.truetransact.uicomponent.CLabel();
        cPanel1 = new com.see.truetransact.uicomponent.CPanel();
        txtDirectRepaymentAcctHead = new com.see.truetransact.uicomponent.CTextField();
        btnDirectRepaymentAcctHead = new com.see.truetransact.uicomponent.CButton();
        cPanel2 = new com.see.truetransact.uicomponent.CPanel();
        panDirectRepaymentLoanPeriod = new com.see.truetransact.uicomponent.CPanel();
        txtDirectRepaymentLoanPeriod = new com.see.truetransact.uicomponent.CTextField();
        cboDirectRepaymentLoanPeriod = new com.see.truetransact.uicomponent.CComboBox();
        lblDirectRepaymentLoanPeriod = new com.see.truetransact.uicomponent.CLabel();
        lblFacility_Repay_Date2 = new com.see.truetransact.uicomponent.CLabel();
        tdtDirect_Repay_Date = new com.see.truetransact.uicomponent.CDateField();
        btnDirectRepaymentAcctNo = new com.see.truetransact.uicomponent.CButton();
        txtDirectRepaymentAcctNo = new com.see.truetransact.uicomponent.CTextField();
        sptFacilityDetails_Vert = new com.see.truetransact.uicomponent.CSeparator();
        panDirectRepayment = new com.see.truetransact.uicomponent.CPanel();
        panDirectRepayment.setMinimumSize(new java.awt.Dimension(250, 400));
        panDirectRepayment.setPreferredSize(new java.awt.Dimension(250, 400));
        panDirectRepayment.setLayout(new java.awt.GridBagLayout());
        panDirectRepayment.add(lblDirectRepayment, gridBagConstraints);
        panDirectRepayment.add(panDirectPayment, gridBagConstraints);
        panDirectRepayment.setMinimumSize(new java.awt.Dimension(250, 400));
        panDirectRepayment.setPreferredSize(new java.awt.Dimension(250, 400));
        panDirectRepayment.setLayout(new java.awt.GridBagLayout());

        lblDirectRepayment.setText("Direct Repayment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 1, 0, 0);
        panDirectRepayment.add(lblDirectRepayment, gridBagConstraints);

        panDirectPayment.setLayout(new java.awt.GridBagLayout());

        rdoDirectRepaymentGroup.add(DirectRepayment_Yes);
        DirectRepayment_Yes.setText("Yes");
        DirectRepayment_Yes.setMinimumSize(new java.awt.Dimension(65, 21));
        DirectRepayment_Yes.setPreferredSize(new java.awt.Dimension(65, 21));
        DirectRepayment_Yes.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectRepayment_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panDirectPayment.add(DirectRepayment_Yes, gridBagConstraints);

        rdoDirectRepaymentGroup.add(DirectRepayment_No);
        DirectRepayment_No.setText("No");
        DirectRepayment_No.setMinimumSize(new java.awt.Dimension(65, 21));
        DirectRepayment_No.setPreferredSize(new java.awt.Dimension(65, 21));
        DirectRepayment_No.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectRepayment_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panDirectPayment.add(DirectRepayment_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 6, 0, 0);
        panDirectRepayment.add(panDirectPayment, gridBagConstraints);

        cboDirectRepaymentProdType.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Select---"}));
        cboDirectRepaymentProdType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboDirectRepaymentProdType.setNextFocusableComponent(cboProductId);
        cboDirectRepaymentProdType.setPopupWidth(150);
        cboDirectRepaymentProdType.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDirectRepaymentProdTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 0, 0);
        panDirectRepayment.add(cboDirectRepaymentProdType, gridBagConstraints);

        lblDirectRepaymentProdType.setText("Prod Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 46, 0, 0);
        panDirectRepayment.add(lblDirectRepaymentProdType, gridBagConstraints);

        cboDirectRepaymentProdId.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Select---"}));
        cboDirectRepaymentProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboDirectRepaymentProdId.setNextFocusableComponent(cboProductId);
        cboDirectRepaymentProdId.setPopupWidth(150);
        cboDirectRepaymentProdId.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDirectRepaymentProdIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 0, 0);
        panDirectRepayment.add(cboDirectRepaymentProdId, gridBagConstraints);

        lblDirectRepaymentProdId.setText("Prod Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 64, 0, 0);
        panDirectRepayment.add(lblDirectRepaymentProdId, gridBagConstraints);

        lblDirectRepaymentAcctHead.setText("Customer Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 15, 0, 0);
        panDirectRepayment.add(lblDirectRepaymentAcctHead, gridBagConstraints);

        lblDirectRepaymentAcctNo.setText("Customer Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 1, 0, 0);
        panDirectRepayment.add(lblDirectRepaymentAcctNo, gridBagConstraints);

        cPanel1.setMinimumSize(new java.awt.Dimension(130, 21));
        cPanel1.setPreferredSize(new java.awt.Dimension(130, 21));
        cPanel1.setLayout(new java.awt.GridBagLayout());

        txtDirectRepaymentAcctHead.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        cPanel1.add(txtDirectRepaymentAcctHead, gridBagConstraints);

        btnDirectRepaymentAcctHead.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnDirectRepaymentAcctHead.setToolTipText("Select Customer");
        btnDirectRepaymentAcctHead.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDirectRepaymentAcctHead.setMaximumSize(new java.awt.Dimension(22, 21));
        btnDirectRepaymentAcctHead.setMinimumSize(new java.awt.Dimension(22, 21));
        btnDirectRepaymentAcctHead.setPreferredSize(new java.awt.Dimension(22, 21));
        btnDirectRepaymentAcctHead.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectRepaymentAcctHeadActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        cPanel1.add(btnDirectRepaymentAcctHead, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        panDirectRepayment.add(cPanel1, gridBagConstraints);

        cPanel2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        panDirectRepayment.add(cPanel2, gridBagConstraints);

        panDirectRepaymentLoanPeriod.setMinimumSize(new java.awt.Dimension(98, 21));
        panDirectRepaymentLoanPeriod.setPreferredSize(new java.awt.Dimension(98, 21));
        panDirectRepaymentLoanPeriod.setLayout(new java.awt.GridBagLayout());

        txtDirectRepaymentLoanPeriod.setMinimumSize(new java.awt.Dimension(40, 21));
        txtDirectRepaymentLoanPeriod.setPreferredSize(new java.awt.Dimension(40, 21));
        txtDirectRepaymentLoanPeriod.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDirectRepaymentLoanPeriodActionPerformed(evt);
            }
        });
        panDirectRepaymentLoanPeriod.add(txtDirectRepaymentLoanPeriod, new java.awt.GridBagConstraints());

        cboDirectRepaymentLoanPeriod.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Select---"}));
        cboDirectRepaymentLoanPeriod.setMinimumSize(new java.awt.Dimension(55, 21));
        cboDirectRepaymentLoanPeriod.setPreferredSize(new java.awt.Dimension(55, 21));
        cboDirectRepaymentLoanPeriod.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDirectRepaymentLoanPeriodActionPerformed(evt);
            }
        });
        panDirectRepaymentLoanPeriod.add(cboDirectRepaymentLoanPeriod, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 6, 0, 0);
        panDirectRepayment.add(panDirectRepaymentLoanPeriod, gridBagConstraints);

        lblDirectRepaymentLoanPeriod.setText("Loan Period");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 36, 0, 0);
        panDirectRepayment.add(lblDirectRepaymentLoanPeriod, gridBagConstraints);

        lblFacility_Repay_Date2.setText("Repayment Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 8, 0, 0);
        panDirectRepayment.add(lblFacility_Repay_Date2, gridBagConstraints);

        tdtDirect_Repay_Date.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtDirect_Repay_Date.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        panDirectRepayment.add(tdtDirect_Repay_Date, gridBagConstraints);

        btnDirectRepaymentAcctNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnDirectRepaymentAcctNo.setToolTipText("Select Customer");
        btnDirectRepaymentAcctNo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDirectRepaymentAcctNo.setMaximumSize(new java.awt.Dimension(22, 21));
        btnDirectRepaymentAcctNo.setMinimumSize(new java.awt.Dimension(22, 21));
        btnDirectRepaymentAcctNo.setPreferredSize(new java.awt.Dimension(22, 21));
        btnDirectRepaymentAcctNo.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectRepaymentAcctNoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 0, 0);
        panDirectRepayment.add(btnDirectRepaymentAcctNo, gridBagConstraints);

        txtDirectRepaymentAcctNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 0);
        panDirectRepayment.add(txtDirectRepaymentAcctNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.ipadx = 130;
        gridBagConstraints.ipady = -210;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panFDAccount.add(panDirectRepayment, gridBagConstraints);
        txtDirectRepaymentLoanPeriod.setVisible(false);
        cboDirectRepaymentLoanPeriod.setVisible(false);
        lblDirectRepaymentLoanPeriod.setVisible(false);
        lblFacility_Repay_Date2.setVisible(false);
        tdtDirect_Repay_Date.setVisible(false);
    }

    private void DirectRepayment_YesActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        setEnableDisableDirectPayment(false);
        resetDirectPayment();
    }

    private void DirectRepayment_NoActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        setEnableDisableDirectPayment(true);
    }

    private void cboDirectRepaymentProdTypeActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        if (cboDirectRepaymentProdType.getSelectedIndex() > 0) {
            String prodType = ((ComboBoxModel) cboDirectRepaymentProdType.getModel()).getKeyForSelected().toString();
            //System.out.println("***************" + prodType);
            clearProdFields();
            if (prodType.equals("GL")) {
                setEnableDisableDirectPaymentAcctHead(true);
            } else {
                setEnableDisableDirectPaymentAcctHead(false);
            }

//            populateInstrumentType();

//            observable.setProdType(prodType);
            //this is for depoists

            if (prodType.equals("GL")) {
                if (TrueTransactMain.BRANCH_ID.equals(CommonUtil.convertObjToStr(TrueTransactMain.selBranch))) {

                    txtDirectRepaymentAcctNo.setText("");


//                btnAccHdId.setEnabled(true);
//                if (!( viewType==EDIT || viewType==DELETE || viewType==AUTHORIZE || viewType==VIEW || viewType==LINK_BATCH || viewType==LINK_BATCH_TD)) 
//                observable.setTxtAccNo("");
                    setProdEnable(false);
                    cboProdId.setSelectedItem("");
                    cboDirectRepaymentProdId.setSelectedIndex(0);
                    cboDirectRepaymentProdId.setEnabled(false);
                } else {
                    ClientUtil.displayAlert("InterBranch Transactions Not Allowed For GL");
                    observable.resetForm();
                }
//            txtAccHdId.setEnabled(true);
            } else {
                if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW
                        || observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
//                    productBased();
                }
                setProdEnable(true);
                observable.setCbmProdId(prodType);
                cboDirectRepaymentProdId.setModel(observable.getCbmDirectPaymentProdId());
//                observable.getCbmProdId().setKeyForSelected(observable.getCbmProdId().getDataForKey(observable.getCboProdId()));
//                txtAccHdId.setEnabled(false);
                btnAccNo.setEnabled(false);
                 cboDirectRepaymentProdId.setEnabled(true);
            }
//            btnViewTermLoanDetails. setEnabled(true);
        }
//        if(viewType==AUTHORIZE || viewType==LINK_BATCH || viewType==LINK_BATCH_TD) {
//            cboProdId.setEnabled(false);
//            txtAccNo.setEnabled(false);
//            btnAccNo.setEnabled(false);
//        }
    }

    private void cboDirectRepaymentProdIdActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String prodId = CommonUtil.convertObjToStr(cboDirectRepaymentProdId.getSelectedItem());
        if (prodId.length() > 0) {
            observable.setAccountHead();
            txtDirectRepaymentAcctHead.setText(observable.getTxtDirectRepaymentAcctHead());
        }
    }

    private void btnDirectRepaymentAcctHeadActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        viewType="DIRAC_HEAD";
        final HashMap viewMap = new HashMap();
        viewMap.put(CommonConstants.MAP_NAME, "Cash.getSelectAcctHead");
        new ViewAll(this, viewMap).show();
    }

    private void txtDirectRepaymentLoanPeriodActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        observable.setTxtDirectRepaymentLoanPeriod(CommonUtil.convertObjToStr(txtDirectRepaymentLoanPeriod));
        checkDirectRepaymentDate();
    }

    private void cboDirectRepaymentLoanPeriodActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        checkDirectRepaymentDate();

    }

    private void btnDirectRepaymentAcctNoActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        String prodId = CommonUtil.convertObjToStr(((ComboBoxModel) cboDirectRepaymentProdId.getModel()).getKeyForSelected());
        if (prodId.length() > 0) {
            popUp("ACCT_NO");
        }
    }

    private void btnCaseNewActionPerformed(java.awt.event.ActionEvent evt) {
        updateMode = false;
        btnCaseNew.setEnabled(false);
        btnCaseSave.setEnabled(true);
        btnCaseDelete.setEnabled(false);
        observable.setNewData(true);
        ClientUtil.enableDisable(panCaseTableFields, true);
        txtFillingFees.setEnabled(false);
    }

    private void odRenewalVisibleComp(boolean flag) {
        //panODEnhance.setVisible(flag);
        panRenewal.setVisible(flag);
        lblRenewal.setVisible(flag);
        //lblEnhance.setVisible(flag);
    }

    private void dailyLoanVisibleComp(boolean flag) {
        // panRepaySanctionDetails.setVisible(!flag);
        // panDirectRepayment.setVisible(flag);
        panRepaySanctionDetails.setEnabled(true);
        panDirectRepayment.setVisible(flag);
        lblAgentId.setVisible(flag);
        cboAgentId.setVisible(flag);
        lblAgentname.setVisible(flag);
        lblAgentnameDisplay.setVisible(flag);
        //observable.setDailyLoan(flag);
        tdtDirect_Repay_Date.setEnabled(false);
    }

    private void createDailyLoanDetails() {

        panDailyLoanSanctionDetails.setLayout(new java.awt.GridBagLayout());
        panDailyLoanSanctionDetails.setBorder(new javax.swing.border.TitledBorder("Sanction Details"));
        panDailyLoanSanctionDetails.setMinimumSize(new java.awt.Dimension(250, 250));
        panDailyLoanSanctionDetails.setPreferredSize(new java.awt.Dimension(250, 250));
        srpComp_Tab_Addr.setOrientation(javax.swing.SwingConstants.VERTICAL);
        srpComp_Tab_Addr.setPreferredSize(new java.awt.Dimension(3, 0));
        GridBagConstraints gridBagConstraints;
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 15, 1, 10);
        gridBagConstraints.weightx = 0;
        gridBagConstraints.weighty = 0;
        panDailyLoanSanctionDetails.add(srpComp_Tab_Addr, gridBagConstraints);

        lblDirectRepayment.setText("Direct Repayment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 4, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panDailyLoanSanctionDetails.add(lblSanctionSlNo, gridBagConstraints);

        panDirectPayment.setMinimumSize(new java.awt.Dimension(100, 21));
        panDirectPayment.setNextFocusableComponent(txtSanctionNo);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 4, 3);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panDailyLoanSanctionDetails.add(panDirectPayment, gridBagConstraints);

        lblSanctionNo.setText("Sanction No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 4, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panDailyLoanSanctionDetails.add(lblSanctionNo, gridBagConstraints);

        txtSanctionNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtSanctionNo.setNextFocusableComponent(tdtSanctionDate);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panDailyLoanSanctionDetails.add(txtSanctionNo, gridBagConstraints);

        lblSanctionDate.setText("Sanction Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 4, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panDailyLoanSanctionDetails.add(lblSanctionDate, gridBagConstraints);

        tdtSanctionDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtSanctionDate.setNextFocusableComponent(txtLimit_SD);
        tdtSanctionDate.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panDailyLoanSanctionDetails.add(tdtSanctionDate, gridBagConstraints);

        lblSanctioningAuthority.setText("Sanctioning Authority");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panDailyLoanSanctionDetails.add(lblSanctioningAuthority, gridBagConstraints);

        cboSanctioningAuthority.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Select---"}));
        cboSanctioningAuthority.setMinimumSize(new java.awt.Dimension(100, 21));
        cboSanctioningAuthority.setNextFocusableComponent(cboInterestType);
        cboSanctioningAuthority.setPopupWidth(200);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panDailyLoanSanctionDetails.add(cboSanctioningAuthority, gridBagConstraints);

        lblModeSanction.setText("Mode of Sanction Communication");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 4, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panDailyLoanSanctionDetails.add(lblModeSanction, gridBagConstraints);

        cboModeSanction.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Select---"}));
        cboModeSanction.setMinimumSize(new java.awt.Dimension(100, 21));
        cboModeSanction.setNextFocusableComponent(cboSanctioningAuthority);
        cboModeSanction.setPopupWidth(115);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panDailyLoanSanctionDetails.add(cboModeSanction, gridBagConstraints);

    }

    private void setInstallmentType(boolean flag) {
        lblSanRepaymentType.setVisible(flag);
        cboSanRepaymentType.setVisible(flag);
    }

    private void cboCaseStatusActionPerformed(java.awt.event.ActionEvent evt) {
        String caseStatus = CommonUtil.convertObjToStr(((ComboBoxModel) cboCaseStatus.getModel()).getKeyForSelected()).toString();
        if (caseStatus.length() > 0) {
            HashMap whereMap = new HashMap();
            whereMap.put("CHARGE_TYPE", caseStatus);
            List lst = ClientUtil.executeQuery("getChargecalcDetails", whereMap);
            if (lst != null && lst.size() > 0) {
                double limit = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
                whereMap = (HashMap) lst.get(0);
                if (CommonUtil.convertObjToStr(whereMap.get("CHARGE_BASE")).equals("Amount Range")) {

                    for (int i = 0; i < lst.size(); i++) {
                        HashMap dataMap = (HashMap) lst.get(i);
                        if (CommonUtil.convertObjToDouble(dataMap.get("FROM_SLAB_AMT")).doubleValue() <= limit
                                && CommonUtil.convertObjToDouble(dataMap.get("TO_SLAB_AMT")).doubleValue() >= limit) {
                            double chargeRate = CommonUtil.convertObjToDouble(whereMap.get("SLAB_CHARGE_RATE")).doubleValue();
                            double fillingFees = (double) limit * chargeRate / 100;
                            double minChargeAmt = CommonUtil.convertObjToDouble(whereMap.get("SLAB_MIN_CHARGE_AMOUNT")).doubleValue();
                            double maxChargeAmt = CommonUtil.convertObjToDouble(whereMap.get("SLAB_MAX_CHARGE_AMOUNT")).doubleValue();
                            //SLAB_ROUND_OFF_TYPE

                            txtFillingFees.setText(String.valueOf(fillingFees));
                            break;
                        }
                    }

                } else if (CommonUtil.convertObjToStr(whereMap.get("CHARGE_BASE")).equals("Flat Charge")) {

                    double flatCharge = CommonUtil.convertObjToDouble(whereMap.get("FLAT_CHARGE")).doubleValue();
                    double minChargeAmt = CommonUtil.convertObjToDouble(whereMap.get("MIN_CHARGE_AMOUNT")).doubleValue();
                    double maxChargeAmt = CommonUtil.convertObjToDouble(whereMap.get("MAX_CHARGE_AMOUNT")).doubleValue();


                    txtFillingFees.setText(String.valueOf(flatCharge));

                } else if (CommonUtil.convertObjToStr(whereMap.get("CHARGE_BASE")).equals("Sanction Amount")) {
                    double chargeRate = CommonUtil.convertObjToDouble(whereMap.get("CHARGE_RATE")).doubleValue();

                    double fillingFees = (double) limit * chargeRate / 100;
                    double minChargeAmt = CommonUtil.convertObjToDouble(whereMap.get("MIN_CHARGE_AMOUNT")).doubleValue();
                    double maxChargeAmt = CommonUtil.convertObjToDouble(whereMap.get("MAX_CHARGE_AMOUNT")).doubleValue();
                    txtFillingFees.setText(String.valueOf(fillingFees));
                }
            }

        }
    }

    private void btnCaseSaveActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        try {
            updateCaseOBFields();
            String caseStatus = (String) cboCaseStatus.getSelectedItem();
            if (tblCaseTable.getRowCount() > 0) {
                for (int i = 0; i < tblCaseTable.getRowCount(); i++) {
                    String caseState = CommonUtil.convertObjToStr(tblCaseTable.getValueAt(i, 0));
                    if (caseStatus.equalsIgnoreCase(caseState) && !updateMode) {
                        ClientUtil.displayAlert("Case Status Already Exists in this Table");
                        cboCaseStatus.setSelectedItem("");
                        return;
                    }
                }
            }
            if (caseStatus.length() > 0) {
                observable.addToCaseTable(updateTab);
                tblCaseTable.setModel(observable.getTblCaseDetails());
                observable.resetCaseDetails();
                resetCaseDetails();
                ClientUtil.enableDisable(panCaseTableFields, false);
                btnCaseNew.setEnabled(true);
                btnCaseSave.setEnabled(false);
                btnCaseDelete.setEnabled(false);
            } else {
                ClientUtil.showAlertWindow("Case Status Should Not be Empty !!!");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void resetCaseDetails() {
        cboCaseStatus.setSelectedItem("");
        txtCaseNumber.setText("");
        tdtlFillingDt.setDateValue("");
        txtFillingFees.setText("");
        txtMiscCharges.setText("");
    }

    private void enableDisableCourtDetails(boolean flag, boolean rdoYesNo) {
        txtCourtOrderNo.setEnabled(flag);
        tdtCourtOrderDate.setEnabled(flag);
        tdtOTSDate.setEnabled(flag);
        txtOTSRate.setEnabled(flag);
        txtTotAmountDue.setEnabled(flag);
        txtSettlementAmt.setEnabled(flag);
        txtPrincipalAmount.setEnabled(flag);
        txtInterestAmount.setEnabled(flag);
        txtPenalInterestAmount.setEnabled(flag);
        txtChargeAmount.setEnabled(flag);
        txtTotalAmountWrittenOff.setEnabled(false);

        txtNoInstallment.setEnabled(false);
        cboFreq.setEnabled(false);
        txtInstallmentAmt.setEnabled(false);
        tdtFirstInstallDt.setEnabled(false);
        tdtLastInstallDate.setEnabled(false);
        txtPenal.setEnabled(false);
        txtRepayRemarks.setEnabled(false);

        if (rdoYesNo) {
            txtNoInstallment.setEnabled(flag);
            cboFreq.setEnabled(flag);
            txtInstallmentAmt.setEnabled(flag);
            tdtFirstInstallDt.setEnabled(flag);
            tdtLastInstallDate.setEnabled(false);
            txtPenal.setEnabled(flag);
            txtRepayRemarks.setEnabled(flag);
        }
        rdoRepaySingle_YES.setEnabled(flag);
        rdoRepaySingle_NO.setEnabled(flag);
    }

    private void SHGVisible(boolean flag) {
        lblSHGId.setVisible(flag);
        txtSHGId.setVisible(flag);
        btnSHGId.setVisible(flag);
//        txtSHGId.setEnabled(flag);
//        btnSHGId.setEnabled(flag);
        txtSHGId.setText("");
    }

    private void btnCaseDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String caseStatus = CommonUtil.convertObjToStr(tblCaseTable.getValueAt(tblCaseTable.getSelectedRow(), 0));
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
            HashMap costMap = new HashMap();
            HashMap expenseMap = new HashMap();
            String costType = "";
            String expType = "";
            if (caseStatus.equals("Arbitration Case")) {
                costType = "ARC Cost";
                expType = "ARC Expense";
            } else if (caseStatus.equals("Execution of Award")) {
                costType = "EA Cost";
                expType = "EA Expense";
            } else if (caseStatus.equals("Execution Process")) {
                costType = "EP Cost";
                expType = "EP Expense";
            }
            costMap.put("ACT_NUM", observable.getStrACNumber());
            costMap.put("CHARGE_TYPE", costType);
            List costLst = ClientUtil.executeQuery("getTermLoanChargePaidAmount", costMap);
            expenseMap.put("ACT_NUM", observable.getStrACNumber());
            expenseMap.put("CHARGE_TYPE", expType);
            List expenseLst = ClientUtil.executeQuery("getTermLoanChargePaidAmount", expenseMap);
            String message = "";
            if (costLst != null && costLst.size() > 0) {
                message += "Transaction already made for " + costType;
            }
            if (expenseLst != null && expenseLst.size() > 0) {
                message += "\nTransaction already made for " + expType;
            }
            if (message.length() > 0) {
                ClientUtil.displayAlert(message);
                return;
            }
        }
        observable.deleteCaseTableData(caseStatus, tblCaseTable.getSelectedRow());
        observable.resetCaseDetails();
        resetCaseDetails();
        btnCaseNew.setEnabled(true);
        btnCaseSave.setEnabled(false);
        btnCaseDelete.setEnabled(false);
        ClientUtil.enableDisable(panCaseTableFields, false);
    }

    private void tdtlFillingDtFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        if (tdtlFillingDt.getDateValue() != null && tdtlFillingDt.getDateValue().length() > 0) {
            ToDateValidation toDate = new ToDateValidation(ClientUtil.getCurrentDate(), true);
            toDate.setComponent(this.tdtlFillingDt);
            if (!toDate.validate()) {
                COptionPane.showMessageDialog(this, "Future Date Not Allowed");
                tdtlFillingDt.setDateValue("");
                tdtlFillingDt.requestFocus();
                return;
            }
        }
    }

    public void updateCaseOBFields() {
        observable.setCboCaseStatus((String) cboCaseStatus.getSelectedItem());
        observable.setTxtCaseNumber(txtCaseNumber.getText());
        observable.setTdtlFillingDt(tdtlFillingDt.getDateValue());
        observable.setTxtFillingFees(txtFillingFees.getText());
        observable.setTxtMiscCharges(txtMiscCharges.getText());
    }

    private void tblCaseTableMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        updateCaseOBFields();
        updateMode = true;
        updateTab = tblCaseTable.getSelectedRow();
        observable.setNewData(false);
        String st = CommonUtil.convertObjToStr(tblCaseTable.getValueAt(tblCaseTable.getSelectedRow(), 0));
        cboCaseStatus.setSelectedItem(st);
        observable.populateCaseDetails(CommonUtil.convertObjToStr(((ComboBoxModel) cboCaseStatus.getModel()).getKeyForSelected()));
        populateCaseDetails();
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT
                || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW || observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE
                || observable.getActionType() == ClientConstants.ACTIONTYPE_EXCEPTION) {
            btnCaseNew.setEnabled(false);
            btnCaseSave.setEnabled(false);
            btnCaseDelete.setEnabled(false);
            ClientUtil.enableDisable(panCaseTableFields, false);
            cboCaseStatus.setEnabled(false);
        } else {
            btnCaseNew.setEnabled(false);
            btnCaseSave.setEnabled(true);
            btnCaseDelete.setEnabled(true);
            ClientUtil.enableDisable(panCaseTableFields, true);
            txtFillingFees.setEnabled(false);
            cboCaseStatus.setEnabled(false);
        }
    }

    public void populateCaseDetails() {
        cboCaseStatus.setSelectedItem(observable.getCboCaseStatus());
        txtCaseNumber.setText(observable.getTxtCaseNumber());
        txtFillingFees.setText(observable.getTxtFillingFees());
        txtMiscCharges.setText(observable.getTxtMiscCharges());
        tdtlFillingDt.setDateValue(observable.getTdtlFillingDt());
    }

    private void initRuntimeComponents() {
        // Variables declaration - do not modify
        panGuarantor = new com.see.truetransact.uicomponent.CPanel();
        lblCustomerID_GD = new com.see.truetransact.uicomponent.CLabel();
        txtCustomerID_GD = new com.see.truetransact.uicomponent.CTextField();
        btnCustomerID_GD = new com.see.truetransact.uicomponent.CButton();
        lblGuaranAccNo = new com.see.truetransact.uicomponent.CLabel();
        txtGuaranAccNo = new com.see.truetransact.uicomponent.CTextField();
        lblGuaranName = new com.see.truetransact.uicomponent.CLabel();
        txtGuaranName = new com.see.truetransact.uicomponent.CTextField();
        lblDOB_GD = new com.see.truetransact.uicomponent.CLabel();
        lblStreet_GD = new com.see.truetransact.uicomponent.CLabel();
        txtStreet_GD = new com.see.truetransact.uicomponent.CTextField();
        lblGuarantorNo = new com.see.truetransact.uicomponent.CLabel();
        txtGuarantorNo = new com.see.truetransact.uicomponent.CTextField();
        tdtDOB_GD = new com.see.truetransact.uicomponent.CDateField();
        lblProdType = new com.see.truetransact.uicomponent.CLabel();
        cboProdType = new com.see.truetransact.uicomponent.CComboBox();
        cboProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblProdId1 = new com.see.truetransact.uicomponent.CLabel();
        lblArea_GD = new com.see.truetransact.uicomponent.CLabel();
        txtArea_GD = new com.see.truetransact.uicomponent.CTextField();
        btnAccNo = new com.see.truetransact.uicomponent.CButton();
        sptGuarantorDetail_Vert = new com.see.truetransact.uicomponent.CSeparator();
        panGuaranAddr = new com.see.truetransact.uicomponent.CPanel();
        lblPin_GD = new com.see.truetransact.uicomponent.CLabel();
        txtPin_GD = new com.see.truetransact.uicomponent.CTextField();
        lblState_GD = new com.see.truetransact.uicomponent.CLabel();
        lblCountry_GD = new com.see.truetransact.uicomponent.CLabel();
        cboCountry_GD = new com.see.truetransact.uicomponent.CComboBox();
        lblPhone_GD = new com.see.truetransact.uicomponent.CLabel();
        txtPhone_GD = new com.see.truetransact.uicomponent.CTextField();
        lblConstitution_GD = new com.see.truetransact.uicomponent.CLabel();
        cboConstitution_GD = new com.see.truetransact.uicomponent.CComboBox();
        lblGuarantorNetWorth = new com.see.truetransact.uicomponent.CLabel();
        txtGuarantorNetWorth = new com.see.truetransact.uicomponent.CTextField();
        lblAsOn_GD = new com.see.truetransact.uicomponent.CLabel();
        tdtAsOn_GD = new com.see.truetransact.uicomponent.CDateField();
        cboState_GD = new com.see.truetransact.uicomponent.CComboBox();
        cboCity_GD = new com.see.truetransact.uicomponent.CComboBox();
        lblCity_GD = new com.see.truetransact.uicomponent.CLabel();

        panGuarantor.setLayout(new java.awt.GridBagLayout());

        panGuarantor.setMinimumSize(new java.awt.Dimension(270, 235));
        panGuarantor.setPreferredSize(new java.awt.Dimension(270, 235));
        lblCustomerID_GD.setText("Member No. / Customer Id");
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(lblCustomerID_GD, gridBagConstraints);

        txtCustomerID_GD.setMinimumSize(new java.awt.Dimension(100, 21));
        txtCustomerID_GD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustomerID_GDFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(txtCustomerID_GD, gridBagConstraints);

        btnCustomerID_GD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif")));
        btnCustomerID_GD.setToolTipText("Save");
        btnCustomerID_GD.setMaximumSize(new java.awt.Dimension(35, 25));
        btnCustomerID_GD.setMinimumSize(new java.awt.Dimension(21, 21));
        btnCustomerID_GD.setPreferredSize(new java.awt.Dimension(21, 21));
        btnCustomerID_GD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomerID_GDActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panGuarantor.add(btnCustomerID_GD, gridBagConstraints);

        lblGuaranAccNo.setText("Guarantor Account No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(lblGuaranAccNo, gridBagConstraints);

        txtGuaranAccNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(txtGuaranAccNo, gridBagConstraints);

        lblGuaranName.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(lblGuaranName, gridBagConstraints);

        txtGuaranName.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(txtGuaranName, gridBagConstraints);

        lblDOB_GD.setText("Date of Birth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(lblDOB_GD, gridBagConstraints);

        lblStreet_GD.setText("Street");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(lblStreet_GD, gridBagConstraints);

        txtStreet_GD.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(txtStreet_GD, gridBagConstraints);

        lblGuarantorNo.setText("Guarantor Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(lblGuarantorNo, gridBagConstraints);

        txtGuarantorNo.setMaximumSize(new java.awt.Dimension(100, 21));
        txtGuarantorNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(txtGuarantorNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(tdtDOB_GD, gridBagConstraints);

        lblProdType.setText("Product Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(lblProdType, gridBagConstraints);

        cboProdType.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Select---"}));
        cboProdType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProdType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProdTypeActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(cboProdType, gridBagConstraints);

        cboProdId.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Select---"}));
        cboProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProdId.setPopupWidth(200);
        cboProdId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProdIdActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(cboProdId, gridBagConstraints);

        lblProdId1.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(lblProdId1, gridBagConstraints);

        lblArea_GD.setText("Area");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(lblArea_GD, gridBagConstraints);

        txtArea_GD.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantor.add(txtArea_GD, gridBagConstraints);

        btnAccNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif")));
        btnAccNo.setToolTipText("Account No.");
        btnAccNo.setMaximumSize(new java.awt.Dimension(35, 25));
        btnAccNo.setMinimumSize(new java.awt.Dimension(35, 25));
        btnAccNo.setPreferredSize(new java.awt.Dimension(21, 21));
        btnAccNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccNoActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        panGuarantor.add(btnAccNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantorDetail_Detail.add(panGuarantor, gridBagConstraints);

        sptGuarantorDetail_Vert.setOrientation(javax.swing.SwingConstants.VERTICAL);
        sptGuarantorDetail_Vert.setMinimumSize(new java.awt.Dimension(3, 235));
        sptGuarantorDetail_Vert.setPreferredSize(new java.awt.Dimension(3, 235));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantorDetail_Detail.add(sptGuarantorDetail_Vert, gridBagConstraints);

        panGuaranAddr.setLayout(new java.awt.GridBagLayout());

        panGuaranAddr.setMinimumSize(new java.awt.Dimension(224, 207));
        panGuaranAddr.setPreferredSize(new java.awt.Dimension(224, 207));
        lblPin_GD.setText("Pincode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(lblPin_GD, gridBagConstraints);

        txtPin_GD.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(txtPin_GD, gridBagConstraints);

        lblState_GD.setText("State");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(lblState_GD, gridBagConstraints);

        lblCountry_GD.setText("Country");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(lblCountry_GD, gridBagConstraints);

        cboCountry_GD.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Select---"}));
        cboCountry_GD.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(cboCountry_GD, gridBagConstraints);

        lblPhone_GD.setText("Phone");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(lblPhone_GD, gridBagConstraints);

        txtPhone_GD.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(txtPhone_GD, gridBagConstraints);

        lblConstitution_GD.setText("Constitution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(lblConstitution_GD, gridBagConstraints);

        cboConstitution_GD.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Selected---"}));
        cboConstitution_GD.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(cboConstitution_GD, gridBagConstraints);

        lblGuarantorNetWorth.setText("Guarantor's Net worth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(lblGuarantorNetWorth, gridBagConstraints);

        txtGuarantorNetWorth.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(txtGuarantorNetWorth, gridBagConstraints);

        lblAsOn_GD.setText("As On");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(lblAsOn_GD, gridBagConstraints);

        tdtAsOn_GD.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtAsOn_GD.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtAsOn_GD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtAsOn_GDFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(tdtAsOn_GD, gridBagConstraints);

        cboState_GD.setMinimumSize(new java.awt.Dimension(100, 21));
        cboState_GD.setPopupWidth(100);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(cboState_GD, gridBagConstraints);

        cboCity_GD.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Select---"}));
        cboCity_GD.setMinimumSize(new java.awt.Dimension(100, 21));
        cboCity_GD.setPopupWidth(100);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(cboCity_GD, gridBagConstraints);

        lblCity_GD.setText("City");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuaranAddr.add(lblCity_GD, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantorDetail_Detail.add(panGuaranAddr, gridBagConstraints);
    }

    private void initRunComponents3() {
        java.awt.GridBagConstraints gridBagConstraints;
        panAssetDescription = new com.see.truetransact.uicomponent.CPanel();
        panCaseTableFieldsDetails = new com.see.truetransact.uicomponent.CPanel();
        lblCaseStatus = new com.see.truetransact.uicomponent.CLabel();
        cboCaseStatus = new com.see.truetransact.uicomponent.CComboBox();
        lblCaseNumber = new com.see.truetransact.uicomponent.CLabel();
        txtCaseNumber = new com.see.truetransact.uicomponent.CTextField();
        lblFillingDt = new com.see.truetransact.uicomponent.CLabel();
        tdtlFillingDt = new com.see.truetransact.uicomponent.CDateField();
        lblFillingFees = new com.see.truetransact.uicomponent.CLabel();
        txtFillingFees = new com.see.truetransact.uicomponent.CTextField();
        lblMiscCharges = new com.see.truetransact.uicomponent.CLabel();
        txtMiscCharges = new com.see.truetransact.uicomponent.CTextField();
        panCaseDetailBtn = new com.see.truetransact.uicomponent.CPanel();
        btnCaseNew = new com.see.truetransact.uicomponent.CButton();
        btnCaseSave = new com.see.truetransact.uicomponent.CButton();
        btnCaseDelete = new com.see.truetransact.uicomponent.CButton();
        panScheduleTable = new com.see.truetransact.uicomponent.CPanel();
        srpCaseTable = new com.see.truetransact.uicomponent.CScrollPane();
        tblCaseTable = new com.see.truetransact.uicomponent.CTable();
        tbrTokenConfig = new com.see.truetransact.uicomponent.CToolBar();
        panCaseTableFields.setLayout(new java.awt.GridBagLayout());

        panCaseTableFields.setBorder(new javax.swing.border.TitledBorder("Case Details"));
        panCaseTableFields.setMinimumSize(new java.awt.Dimension(800, 350));
        panCaseTableFields.setPreferredSize(new java.awt.Dimension(800, 350));
        panCaseTableFieldsDetails.setLayout(new java.awt.GridBagLayout());

        panCaseTableFieldsDetails.setMinimumSize(new java.awt.Dimension(300, 300));
        panCaseTableFieldsDetails.setPreferredSize(new java.awt.Dimension(300, 300));
        lblCaseStatus.setText("Status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCaseTableFieldsDetails.add(lblCaseStatus, gridBagConstraints);

        cboCaseStatus.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;

        cboCaseStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboCaseStatusActionPerformed(evt);
            }
        });


        panCaseTableFieldsDetails.add(cboCaseStatus, gridBagConstraints);

        lblCaseNumber.setText("Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCaseTableFieldsDetails.add(lblCaseNumber, gridBagConstraints);

        txtCaseNumber.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panCaseTableFieldsDetails.add(txtCaseNumber, gridBagConstraints);

        lblFillingDt.setText("Filling Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCaseTableFieldsDetails.add(lblFillingDt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panCaseTableFieldsDetails.add(tdtlFillingDt, gridBagConstraints);

        lblFillingFees.setText("Filling Fees");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCaseTableFieldsDetails.add(lblFillingFees, gridBagConstraints);

        txtFillingFees.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panCaseTableFieldsDetails.add(txtFillingFees, gridBagConstraints);

        lblMiscCharges.setText("Misc Charges");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCaseTableFieldsDetails.add(lblMiscCharges, gridBagConstraints);

        txtMiscCharges.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panCaseTableFieldsDetails.add(txtMiscCharges, gridBagConstraints);

        panCaseDetailBtn.setLayout(new java.awt.GridBagLayout());

        panCaseDetailBtn.setMinimumSize(new java.awt.Dimension(95, 35));
        panCaseDetailBtn.setPreferredSize(new java.awt.Dimension(95, 35));
        btnCaseNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif")));
        btnCaseNew.setToolTipText("New");
        btnCaseNew.setMaximumSize(new java.awt.Dimension(29, 27));
        btnCaseNew.setMinimumSize(new java.awt.Dimension(29, 27));
        btnCaseNew.setPreferredSize(new java.awt.Dimension(29, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCaseDetailBtn.add(btnCaseNew, gridBagConstraints);

        btnCaseSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif")));
        btnCaseSave.setToolTipText("Save");
        btnCaseSave.setMaximumSize(new java.awt.Dimension(29, 27));
        btnCaseSave.setMinimumSize(new java.awt.Dimension(29, 27));
        btnCaseSave.setName("btnContactNoAdd");
        btnCaseSave.setPreferredSize(new java.awt.Dimension(29, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCaseDetailBtn.add(btnCaseSave, gridBagConstraints);

        btnCaseDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif")));
        btnCaseDelete.setToolTipText("Delete");
        btnCaseDelete.setMaximumSize(new java.awt.Dimension(29, 27));
        btnCaseDelete.setMinimumSize(new java.awt.Dimension(29, 27));
        btnCaseDelete.setPreferredSize(new java.awt.Dimension(29, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCaseDetailBtn.add(btnCaseDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.insets = new java.awt.Insets(10, 7, 0, 0);
        panCaseTableFieldsDetails.add(panCaseDetailBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCaseTableFields.add(panCaseTableFieldsDetails, gridBagConstraints);

        panScheduleTable.setLayout(new java.awt.GridBagLayout());

        srpCaseTable.setMinimumSize(new java.awt.Dimension(450, 200));
        srpCaseTable.setPreferredSize(new java.awt.Dimension(450, 200));
        tblCaseTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "Status", "Number", "Fill Date", "Fill Amount", "Misc Amount", "Auth Status"
        }));
        tblCaseTable.setPreferredScrollableViewportSize(new java.awt.Dimension(250, 400));
        srpCaseTable.setViewportView(tblCaseTable);

        panScheduleTable.add(srpCaseTable, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panCaseTableFields.add(panScheduleTable, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSanctionDetails_Table1.add(panCaseTableFields, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panCaseDetails.add(panSanctionDetails_Table1, gridBagConstraints);


        btnCaseNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaseNewActionPerformed(evt);
            }
        });

        btnCaseSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaseSaveActionPerformed(evt);
            }
        });

        btnCaseDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaseDeleteActionPerformed(evt);
            }
        });


        tdtlFillingDt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtlFillingDtFocusLost(evt);
            }
        });


        tblCaseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblCaseTableMousePressed(evt);
            }
        });

        srpCaseTable.setViewportView(tblCaseTable);
    }

    private void initPaddyComponents() {
//        panTable_SD.removeAll();
        lblTotalWeightVal = new com.see.truetransact.uicomponent.CLabel();
        lblTotalWeight = new com.see.truetransact.uicomponent.CLabel();
        lblPurchaseIDVal = new com.see.truetransact.uicomponent.CLabel();
        lblPurchaseID = new com.see.truetransact.uicomponent.CLabel();
        lblTransactionDateVal = new com.see.truetransact.uicomponent.CLabel();
        lblTransactionDate = new com.see.truetransact.uicomponent.CLabel();
        lblPurchaseDateVal = new com.see.truetransact.uicomponent.CLabel();
        lblPurchaseDate = new com.see.truetransact.uicomponent.CLabel();
        lblAcreageVal = new com.see.truetransact.uicomponent.CLabel();
        lblAcreage = new com.see.truetransact.uicomponent.CLabel();
        lblPurchaseAmountVal = new com.see.truetransact.uicomponent.CLabel();
        lblPurchaseAmount = new com.see.truetransact.uicomponent.CLabel();
        lblPurchaseNameVal = new com.see.truetransact.uicomponent.CLabel();
        lblPurchaseName = new com.see.truetransact.uicomponent.CLabel();
        lblTotalWeightVal.setMaximumSize(new java.awt.Dimension(100, 21));
        lblTotalWeightVal.setMinimumSize(new java.awt.Dimension(100, 21));
        lblTotalWeightVal.setPreferredSize(new java.awt.Dimension(100, 15));
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
//        panTable_SD.add(lblTotalWeightVal, gridBagConstraints);

        lblTotalWeight.setText("Total Weight");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblTotalWeight, gridBagConstraints);

        lblPurchaseIDVal.setMaximumSize(new java.awt.Dimension(100, 21));
        lblPurchaseIDVal.setMinimumSize(new java.awt.Dimension(100, 21));
        lblPurchaseIDVal.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
//        panTable_SD.add(lblPurchaseIDVal, gridBagConstraints);

        lblPurchaseID.setText("Purchase ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblPurchaseID, gridBagConstraints);
//        
//        lblTransactionDateVal.setMaximumSize(new java.awt.Dimension(100, 21));
//        lblTransactionDateVal.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblTransactionDateVal.setPreferredSize(new java.awt.Dimension(100, 15));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 3;
//        gridBagConstraints.ipadx = 20;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
//        panTable_SD.add(lblTransactionDateVal, gridBagConstraints);
//        
//        lblTransactionDate.setText("Transaction Date");
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 3;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblTransactionDate, gridBagConstraints);
//        
//        lblPurchaseDateVal.setMaximumSize(new java.awt.Dimension(100, 21));
//        lblPurchaseDateVal.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblPurchaseDateVal.setPreferredSize(new java.awt.Dimension(100, 15));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 2;
//        gridBagConstraints.ipadx = 20;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
//        panTable_SD.add(lblPurchaseDateVal, gridBagConstraints);
//        
//        lblPurchaseDate.setText("Purchase Date");
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 2;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblPurchaseDate, gridBagConstraints);
//        
//        lblAcreageVal.setMaximumSize(new java.awt.Dimension(100, 21));
//        lblAcreageVal.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblAcreageVal.setPreferredSize(new java.awt.Dimension(100, 15));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 5;
//        gridBagConstraints.ipadx = 20;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
//        panTable_SD.add(lblAcreageVal, gridBagConstraints);
//        
//        lblAcreage.setText("Acreage");
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 5;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblAcreage, gridBagConstraints);
//        
//        lblPurchaseAmountVal.setMaximumSize(new java.awt.Dimension(100, 21));
//        lblPurchaseAmountVal.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblPurchaseAmountVal.setPreferredSize(new java.awt.Dimension(100, 15));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 6;
//        gridBagConstraints.ipadx = 20;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
//        panTable_SD.add(lblPurchaseAmountVal, gridBagConstraints);
//        
//        lblPurchaseAmount.setText("Purchase Amount");
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 6;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblPurchaseAmount, gridBagConstraints);
//        
//        lblPurchaseNameVal.setMaximumSize(new java.awt.Dimension(100, 21));
//        lblPurchaseNameVal.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblPurchaseNameVal.setPreferredSize(new java.awt.Dimension(100, 15));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 1;
//        gridBagConstraints.ipadx = 20;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
//        panTable_SD.add(lblPurchaseNameVal, gridBagConstraints);
//        
//        lblPurchaseName.setText("Name");
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 1;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblPurchaseName, gridBagConstraints);
//        panTable_SD.setVisible(true);
    }

    private void initMDSComponents() {
//        panTable_SD.removeAll();
//        lblMDSMemberNo = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSMemberNoVal = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSChitAmountPaid = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSChitAmountPaidVal = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSMemberName = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSMemberTypeVal = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSMemberType = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSMemberNameVal = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSChitAmountPaidVal1 = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSChitAmountPaidVal2 = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSChitAmountPaidVal3 = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSChitAmountPaidVal4 = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSChitAmountPaidVal5 = new com.see.truetransact.uicomponent.CLabel();
//        lblMDSChitAmountPaidVal6 = new com.see.truetransact.uicomponent.CLabel();
//        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
//        lblMDSMemberNo.setText("Member No");
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 0;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSMemberNo, gridBagConstraints);
//        
//        lblMDSMemberNoVal.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblMDSMemberNoVal.setPreferredSize(new java.awt.Dimension(100, 21));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 0;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSMemberNoVal, gridBagConstraints);
//        
//        lblMDSChitAmountPaid.setText("Chit Amount Paid");
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 4;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSChitAmountPaid, gridBagConstraints);
//        
//        lblMDSChitAmountPaidVal.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblMDSChitAmountPaidVal.setPreferredSize(new java.awt.Dimension(100, 21));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 4;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSChitAmountPaidVal, gridBagConstraints);
//        
//        lblMDSMemberName.setText("Name");
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 3;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSMemberName, gridBagConstraints);
//        
//        lblMDSMemberTypeVal.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblMDSMemberTypeVal.setPreferredSize(new java.awt.Dimension(100, 21));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 1;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSMemberTypeVal, gridBagConstraints);
//        
//        lblMDSMemberType.setText("Member Type");
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 1;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSMemberType, gridBagConstraints);
//        
//        lblMDSMemberNameVal.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblMDSMemberNameVal.setPreferredSize(new java.awt.Dimension(100, 21));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 3;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSMemberNameVal, gridBagConstraints);
//        
//        lblMDSChitAmountPaidVal1.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblMDSChitAmountPaidVal1.setPreferredSize(new java.awt.Dimension(100, 21));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 6;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSChitAmountPaidVal1, gridBagConstraints);
//        
//        lblMDSChitAmountPaidVal2.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblMDSChitAmountPaidVal2.setPreferredSize(new java.awt.Dimension(100, 21));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 6;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSChitAmountPaidVal2, gridBagConstraints);
//        
//        lblMDSChitAmountPaidVal3.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblMDSChitAmountPaidVal3.setPreferredSize(new java.awt.Dimension(100, 21));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 7;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSChitAmountPaidVal3, gridBagConstraints);
//        
//        lblMDSChitAmountPaidVal4.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblMDSChitAmountPaidVal4.setPreferredSize(new java.awt.Dimension(100, 21));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 7;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSChitAmountPaidVal4, gridBagConstraints);
//        
//        lblMDSChitAmountPaidVal5.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblMDSChitAmountPaidVal5.setPreferredSize(new java.awt.Dimension(100, 21));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 5;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSChitAmountPaidVal5, gridBagConstraints);
//        
//        lblMDSChitAmountPaidVal6.setMinimumSize(new java.awt.Dimension(100, 21));
//        lblMDSChitAmountPaidVal6.setPreferredSize(new java.awt.Dimension(100, 21));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 5;
//        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panTable_SD.add(lblMDSChitAmountPaidVal6, gridBagConstraints);
//        panTable_SD.setVisible(true);
    }

    private void initRunSecurityComponents() {
        panEmpTransfer = new com.see.truetransact.uicomponent.CPanel();
        tabMasterMaintenance = new com.see.truetransact.uicomponent.CTabbedPane();
        panSalaryDetails = new com.see.truetransact.uicomponent.CPanel();
        panAllSalaryDetails = new com.see.truetransact.uicomponent.CPanel();
        lblSalaryCertificateNo = new com.see.truetransact.uicomponent.CLabel();
        lblSalaryRemark = new com.see.truetransact.uicomponent.CLabel();
        lblEmployerName = new com.see.truetransact.uicomponent.CLabel();
        lblTotalSalary = new com.see.truetransact.uicomponent.CLabel();
        lblDesignation = new com.see.truetransact.uicomponent.CLabel();
        lblMemberNum = new com.see.truetransact.uicomponent.CLabel();
        lblAddress = new com.see.truetransact.uicomponent.CLabel();
        lblPinCode = new com.see.truetransact.uicomponent.CLabel();
        lblCity = new com.see.truetransact.uicomponent.CLabel();
        lblRetirementDt = new com.see.truetransact.uicomponent.CLabel();
        lblContactNo = new com.see.truetransact.uicomponent.CLabel();
        lblNetWorth1 = new com.see.truetransact.uicomponent.CLabel();
        txtContactNo = new com.see.truetransact.uicomponent.CTextField();
        txtMemberNum = new com.see.truetransact.uicomponent.CTextField();
        txtSalaryRemark = new com.see.truetransact.uicomponent.CTextField();
        txtDesignation = new com.see.truetransact.uicomponent.CTextField();
        txtAddress = new com.see.truetransact.uicomponent.CTextField();
        txtEmployerName = new com.see.truetransact.uicomponent.CTextField();
        txtSalaryCertificateNo = new com.see.truetransact.uicomponent.CTextField();
        txtTotalSalary = new com.see.truetransact.uicomponent.CTextField();
        txtNetWorth1 = new com.see.truetransact.uicomponent.CTextField();
        txtPinCode = new com.see.truetransact.uicomponent.CTextField();
        cboCity = new com.see.truetransact.uicomponent.CComboBox();
        tdtRetirementDt = new com.see.truetransact.uicomponent.CDateField();
        panMemberTypeDetails = new com.see.truetransact.uicomponent.CPanel();
        panMemberTypeTable = new com.see.truetransact.uicomponent.CPanel();
        panSalaryTable = new com.see.truetransact.uicomponent.CPanel();
        srpMemberType = new com.see.truetransact.uicomponent.CScrollPane();
        srpSalary = new com.see.truetransact.uicomponent.CScrollPane();
        tblMemberType = new com.see.truetransact.uicomponent.CTable();
        tblSalary = new com.see.truetransact.uicomponent.CTable();
        panMemberDetails = new com.see.truetransact.uicomponent.CPanel();
        lblGahanYesNo = new com.see.truetransact.uicomponent.CLabel();
        panGahanYesNo = new com.see.truetransact.uicomponent.CPanel();
        rdoGahanYes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoGahanNo = new com.see.truetransact.uicomponent.CRadioButton();
        rdoGahanGroup = new com.see.truetransact.uicomponent.CButtonGroup();
        lblMemNo = new com.see.truetransact.uicomponent.CLabel();
        lblMemName = new com.see.truetransact.uicomponent.CLabel();
        lblMemType = new com.see.truetransact.uicomponent.CLabel();
        lblMemNetworth = new com.see.truetransact.uicomponent.CLabel();
        lblMemPriority = new com.see.truetransact.uicomponent.CLabel();
        txtMemNetworth = new com.see.truetransact.uicomponent.CTextField();
        txtMemPriority = new com.see.truetransact.uicomponent.CTextField();
        txtContactNum = new com.see.truetransact.uicomponent.CTextField();
        lblContactNum = new com.see.truetransact.uicomponent.CLabel();
        txtMemType = new com.see.truetransact.uicomponent.CTextField();
        txtMemName = new com.see.truetransact.uicomponent.CTextField();
        panMemberNumber = new com.see.truetransact.uicomponent.CPanel();
        txtMemNo = new com.see.truetransact.uicomponent.CTextField();
        btnMemNo = new com.see.truetransact.uicomponent.CButton();
        panBtnMemberType = new com.see.truetransact.uicomponent.CPanel();
        panBtnSalaryType = new com.see.truetransact.uicomponent.CPanel();
        btnMemberNew = new com.see.truetransact.uicomponent.CButton();
        btnMemberSave = new com.see.truetransact.uicomponent.CButton();
        btnMemberDelete = new com.see.truetransact.uicomponent.CButton();
        btnSalaryNew = new com.see.truetransact.uicomponent.CButton();
        btnSalarySave = new com.see.truetransact.uicomponent.CButton();
        btnSalaryDelete = new com.see.truetransact.uicomponent.CButton();
        panCollateralTypeDetails = new com.see.truetransact.uicomponent.CPanel();
        panCollateralTable = new com.see.truetransact.uicomponent.CPanel();
        panCollateralJointTable = new com.see.truetransact.uicomponent.CPanel();
        srpCollateralTable = new com.see.truetransact.uicomponent.CScrollPane();
        srpCollateralJointTable = new com.see.truetransact.uicomponent.CScrollPane();
        tblCollateral = new com.see.truetransact.uicomponent.CTable();
        tblJointCollateral = new com.see.truetransact.uicomponent.CTable();
        panCollatetalDetails = new com.see.truetransact.uicomponent.CPanel();
        lblOwnerMemberNo = new com.see.truetransact.uicomponent.CLabel();
        lblDocumentNo = new com.see.truetransact.uicomponent.CLabel();
        txtDocumentNo = new com.see.truetransact.uicomponent.CTextField();
        lblDocumentType = new com.see.truetransact.uicomponent.CLabel();
        cboDocumentType = new com.see.truetransact.uicomponent.CComboBox();
        lblDocumentDate = new com.see.truetransact.uicomponent.CLabel();
        lblRegisteredOffice = new com.see.truetransact.uicomponent.CLabel();
        txtRegisteredOffice = new com.see.truetransact.uicomponent.CTextField();
        lblOwnerMemberNname = new com.see.truetransact.uicomponent.CLabel();
        txtOwnerMemberNname = new com.see.truetransact.uicomponent.CTextField();
        tdtPledgeDate = new com.see.truetransact.uicomponent.CDateField();
        lblPledgeDate = new com.see.truetransact.uicomponent.CLabel();
        lblPledgeNo = new com.see.truetransact.uicomponent.CLabel();
        txtPledgeNo = new com.see.truetransact.uicomponent.CTextField();
        lblPledge = new com.see.truetransact.uicomponent.CLabel();
        lblVillage = new com.see.truetransact.uicomponent.CLabel();
        txtVillage = new com.see.truetransact.uicomponent.CTextField();
        lblSurveyNo = new com.see.truetransact.uicomponent.CLabel();
        txtSurveyNo = new com.see.truetransact.uicomponent.CTextField();
        lblRight = new com.see.truetransact.uicomponent.CLabel();
        lblPledgeType = new com.see.truetransact.uicomponent.CLabel();
        txtPledgeType = new com.see.truetransact.uicomponent.CTextField();
        lblPledgeAmount = new com.see.truetransact.uicomponent.CLabel();
        txtPledgeAmount = new com.see.truetransact.uicomponent.CTextField();
        tdtDocumentDate = new com.see.truetransact.uicomponent.CDateField();
        
        lblGoldSecurityExists = new com.see.truetransact.uicomponent.CLabel();
        lblGoldSecurityId = new com.see.truetransact.uicomponent.CLabel();
        lblJewelleryDetails = new com.see.truetransact.uicomponent.CLabel();
        lblGrossWeight = new com.see.truetransact.uicomponent.CLabel();
        lblNetWeight = new com.see.truetransact.uicomponent.CLabel();
        lblValueOfGold = new com.see.truetransact.uicomponent.CLabel();
        lblGoldRemarks = new com.see.truetransact.uicomponent.CLabel();

        rdoGoldSecurityExitsYes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoGoldSecurityExitsNo = new com.see.truetransact.uicomponent.CRadioButton();
        
        txtGoldSecurityId = new com.see.truetransact.uicomponent.CTextField();
        txtJewelleryDetails = new com.see.truetransact.uicomponent.CTextArea();
        txtGrossWeight = new com.see.truetransact.uicomponent.CTextField();
        txtNetWeight = new com.see.truetransact.uicomponent.CTextField();
        txtValueOfGold = new com.see.truetransact.uicomponent.CTextField();
        txtGoldRemarks = new com.see.truetransact.uicomponent.CTextField();
        
        btnGoldSecurityIdSearch = new com.see.truetransact.uicomponent.CButton();
        panGoldSecurityYesNo = new com.see.truetransact.uicomponent.CPanel();
        panGoldSecurityId = new com.see.truetransact.uicomponent.CPanel();        
        panGoldTypeDetails = new com.see.truetransact.uicomponent.CPanel();
//        lblRemarks = new com.see.truetransact.uicomponent.CLabel();
        cboNature = new com.see.truetransact.uicomponent.CComboBox();
        lblTotalArea = new com.see.truetransact.uicomponent.CLabel();
        txtTotalArea = new com.see.truetransact.uicomponent.CTextField();
        panBtnCollateralType = new com.see.truetransact.uicomponent.CPanel();
        btnCollateralNew = new com.see.truetransact.uicomponent.CButton();
        btnCollateralSave = new com.see.truetransact.uicomponent.CButton();
        btnCollateralDelete = new com.see.truetransact.uicomponent.CButton();
        srpTxtAreaParticulars = new com.see.truetransact.uicomponent.CScrollPane();
        txtAreaParticular = new com.see.truetransact.uicomponent.CTextArea();
        panOwnerMemberNumber = new com.see.truetransact.uicomponent.CPanel();
        panDocumentNumber = new com.see.truetransact.uicomponent.CPanel();
        txtOwnerMemNo = new com.see.truetransact.uicomponent.CTextField();
        btnOwnerMemNo = new com.see.truetransact.uicomponent.CButton();
        btnDocumentNo = new com.see.truetransact.uicomponent.CButton();
        cboPledge = new com.see.truetransact.uicomponent.CComboBox();
        lblNature = new com.see.truetransact.uicomponent.CLabel();
        cboRight = new com.see.truetransact.uicomponent.CComboBox();

        panOtherSecurityDetails = new com.see.truetransact.uicomponent.CPanel();
        lblDepAmount = new com.see.truetransact.uicomponent.CLabel();
        lblProductId2 = new com.see.truetransact.uicomponent.CLabel();
        lblRateOfInterest = new com.see.truetransact.uicomponent.CLabel();
        lblDepDt = new com.see.truetransact.uicomponent.CLabel();
        txtMaturityValue = new com.see.truetransact.uicomponent.CTextField();
        txtDepAmount = new com.see.truetransact.uicomponent.CTextField();
        txtRateOfInterest = new com.see.truetransact.uicomponent.CTextField();
        lblMaturityDt = new com.see.truetransact.uicomponent.CLabel();
        lblMaturityValue = new com.see.truetransact.uicomponent.CLabel();
        lblDepNo = new com.see.truetransact.uicomponent.CLabel();
        tdtDepDt = new com.see.truetransact.uicomponent.CDateField();
        btnDepositNew = new com.see.truetransact.uicomponent.CButton();
        btnDepositSave = new com.see.truetransact.uicomponent.CButton();
        btnDepositDelete = new com.see.truetransact.uicomponent.CButton();
        panBtnDeposit = new com.see.truetransact.uicomponent.CPanel();
        txtMaturityDt = new com.see.truetransact.uicomponent.CDateField();
        cboDepProdType = new com.see.truetransact.uicomponent.CComboBox();
        panDepNo = new com.see.truetransact.uicomponent.CPanel();
        btnDepNo = new com.see.truetransact.uicomponent.CButton();
        lblProductTypeSecurity = new com.see.truetransact.uicomponent.CLabel();
        cboProductTypeSecurity = new com.see.truetransact.uicomponent.CComboBox();
        panDepositType = new com.see.truetransact.uicomponent.CPanel();
        panDepositTable = new com.see.truetransact.uicomponent.CPanel();
        srpTableDeposit = new com.see.truetransact.uicomponent.CScrollPane();
        lblTotalDeposit = new com.see.truetransact.uicomponent.CLabel();
        lblTotalDepositValue = new com.see.truetransact.uicomponent.CLabel();
        txtDepNo = new com.see.truetransact.uicomponent.CTextField();
        tblDepositDetails = new com.see.truetransact.uicomponent.CTable();


        panDepositDetails = new com.see.truetransact.uicomponent.CPanel();
        lblLosName = new com.see.truetransact.uicomponent.CLabel();
        lblLosOtherInstitution = new com.see.truetransact.uicomponent.CLabel();
        lblLosSecurityNo = new com.see.truetransact.uicomponent.CLabel();
        lblLosSecurityType = new com.see.truetransact.uicomponent.CLabel();
        txtLosName = new com.see.truetransact.uicomponent.CTextField();
        txtLosSecurityNo = new com.see.truetransact.uicomponent.CTextField();
        txtLosMaturityValue = new com.see.truetransact.uicomponent.CTextField();
        lblLosIssueDate = new com.see.truetransact.uicomponent.CLabel();
        lblLosMaturityDate = new com.see.truetransact.uicomponent.CLabel();
        lblLosMaturityValue = new com.see.truetransact.uicomponent.CLabel();
        tdtLosIssueDate = new com.see.truetransact.uicomponent.CDateField();
        btnLosNew = new com.see.truetransact.uicomponent.CButton();
        btnLosSave = new com.see.truetransact.uicomponent.CButton();
        btnLosDelete = new com.see.truetransact.uicomponent.CButton();
        panLosDetails = new com.see.truetransact.uicomponent.CPanel();
        tdtLosMaturityDate = new com.see.truetransact.uicomponent.CDateField();
        cboLosOtherInstitution = new com.see.truetransact.uicomponent.CComboBox();

        lblLosRemarks = new com.see.truetransact.uicomponent.CLabel();
        cboLosSecurityType = new com.see.truetransact.uicomponent.CComboBox();
        panLosBtn = new com.see.truetransact.uicomponent.CPanel();
        panLosDetails = new com.see.truetransact.uicomponent.CPanel();
        tdtLosMaturityDt = new com.see.truetransact.uicomponent.CDateField();
        srpTableLos = new com.see.truetransact.uicomponent.CScrollPane();
        tblLosDetails = new com.see.truetransact.uicomponent.CTable();
        lblLosAmount = new com.see.truetransact.uicomponent.CLabel();
        txtLosAmount = new com.see.truetransact.uicomponent.CTextField();
        txtLosRemarks = new com.see.truetransact.uicomponent.CTextField();
        cboLosOtherInstitution = new com.see.truetransact.uicomponent.CComboBox();
        panLosTable = new com.see.truetransact.uicomponent.CPanel();
        tblVehicleType = new com.see.truetransact.uicomponent.CTable();
        panVehicleDetails = new com.see.truetransact.uicomponent.CPanel();
        panVehicleNumber = new com.see.truetransact.uicomponent.CPanel();
        txtVehicleContactNum = new com.see.truetransact.uicomponent.CTextField();
        txtVehicleContactNum.setAllowNumber(true);
        lblVehicleContactNum = new com.see.truetransact.uicomponent.CLabel();
        btnVehicleMemNo = new com.see.truetransact.uicomponent.CButton();
        btnVehicleSave = new com.see.truetransact.uicomponent.CButton();
        btnVehicleNew = new com.see.truetransact.uicomponent.CButton();
        btnVehicleDelete = new com.see.truetransact.uicomponent.CButton();
        txtVehicleDetals = new com.see.truetransact.uicomponent.CTextArea();
        txtVehicleType = new com.see.truetransact.uicomponent.CTextField();
        txtVehicleNo = new com.see.truetransact.uicomponent.CTextField();
        txtVehicleNo.setAllowAll(true);
        txtVehicleRcBookNo = new com.see.truetransact.uicomponent.CTextField();
        txtVehicleRcBookNo.setAllowAll(true);
        txtVehicleDate = new com.see.truetransact.uicomponent.CDateField(); 
        srpTxtAreaVehicledtails = new com.see.truetransact.uicomponent.CScrollPane();
        lblVehicleMemType = new com.see.truetransact.uicomponent.CLabel();
        lblVehicleMemNo = new com.see.truetransact.uicomponent.CLabel();
        lblVehicleNo = new com.see.truetransact.uicomponent.CLabel();
        lblVehicleType= new com.see.truetransact.uicomponent.CLabel();
        lblVehicleRcBookNo= new com.see.truetransact.uicomponent.CLabel();
        lblVehicleDate = new com.see.truetransact.uicomponent.CLabel();
        lblVehicleDetails = new com.see.truetransact.uicomponent.CLabel();
        panBtnVehicleType = new com.see.truetransact.uicomponent.CPanel();
        lblVehicleMemRetireDate = new com.see.truetransact.uicomponent.CLabel();
        lblVehicleMemberNum = new com.see.truetransact.uicomponent.CLabel();
        lblVehicleMemName = new com.see.truetransact.uicomponent.CLabel();
        lblVehicleNetWorth = new com.see.truetransact.uicomponent.CLabel();
        lblTotalVehicleMemSal = new com.see.truetransact.uicomponent.CLabel();
        txtVehicleMemberNum = new com.see.truetransact.uicomponent.CTextField();
        txtVehicleMemberNum.setAllowNumber(true);
        txtVehicleNetWorth = new com.see.truetransact.uicomponent.CTextField();
        txtVehicleNetWorth.setAllowNumber(true);
        txtVehicleMemSal = new com.see.truetransact.uicomponent.CTextField();
        txtVehicleMemSal.setAllowNumber(true);
        txtVehicleMemberName=new com.see.truetransact.uicomponent.CTextField();
        txtVehicleMemType=new com.see.truetransact.uicomponent.CTextField();
        srpVehicleType = new com.see.truetransact.uicomponent.CScrollPane();
        panVehicleTypeDetails = new com.see.truetransact.uicomponent.CPanel();
        panVehicleTypeTable = new com.see.truetransact.uicomponent.CPanel();
        panEmpTransfer.setLayout(new java.awt.GridBagLayout());

        panEmpTransfer.setMaximumSize(new java.awt.Dimension(650, 520));
        panEmpTransfer.setMinimumSize(new java.awt.Dimension(650, 520));
        panEmpTransfer.setPreferredSize(new java.awt.Dimension(650, 520));
        tabMasterMaintenance.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        tabMasterMaintenance.setMinimumSize(new java.awt.Dimension(400, 325));
        tabMasterMaintenance.setPreferredSize(new java.awt.Dimension(400, 325));
        //--------------------------------------------------------------------------salary
        panAllSalaryDetails.setLayout(new java.awt.GridBagLayout());
        panAllSalaryDetails.setMinimumSize(new java.awt.Dimension(400, 650));
        panAllSalaryDetails.setPreferredSize(new java.awt.Dimension(400, 650));

        panSalaryDetails.setLayout(new java.awt.GridBagLayout());
        panSalaryDetails.setMinimumSize(new java.awt.Dimension(250, 650));
        panSalaryDetails.setPreferredSize(new java.awt.Dimension(200, 650));

        lblSalaryCertificateNo.setText("Salary Certificate No");
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblSalaryCertificateNo, gridBagConstraints);

        txtSalaryCertificateNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(txtSalaryCertificateNo, gridBagConstraints);



        lblEmployerName.setText("Employer Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblEmployerName, gridBagConstraints);

        txtEmployerName.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(txtEmployerName, gridBagConstraints);

        lblAddress.setText("Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblAddress, gridBagConstraints);

        txtAddress.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(txtAddress, gridBagConstraints);

        lblCity.setText("City");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblCity, gridBagConstraints);

        cboCity.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(cboCity, gridBagConstraints);

        lblPinCode.setText("PinCode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblPinCode, gridBagConstraints);

        txtPinCode.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(txtPinCode, gridBagConstraints);

        lblDesignation.setText("Designation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblDesignation, gridBagConstraints);

        txtDesignation.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(txtDesignation, gridBagConstraints);

        lblContactNo.setText("Contact No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblContactNo, gridBagConstraints);

        txtContactNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(txtContactNo, gridBagConstraints);

        lblRetirementDt.setText("Date Of Retirement");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblRetirementDt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(tdtRetirementDt, gridBagConstraints);

        tdtRetirementDt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtRetirementDtFocusLost(evt);
            }
        });


        lblMemberNum.setText("Member No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblMemberNum, gridBagConstraints);

        txtMemberNum.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(txtMemberNum, gridBagConstraints);


        lblTotalSalary.setText("Total Salary");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblTotalSalary, gridBagConstraints);

        txtTotalSalary.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(txtTotalSalary, gridBagConstraints);

        lblNetWorth1.setText("Networth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblNetWorth1, gridBagConstraints);

        txtNetWorth1.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(txtNetWorth1, gridBagConstraints);

        lblSalaryRemark.setText("Remarks");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryDetails.add(lblSalaryRemark, gridBagConstraints);

        txtSalaryRemark.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryDetails.add(txtSalaryRemark, gridBagConstraints);


        panBtnSalaryType.setLayout(new java.awt.GridBagLayout());

        panBtnSalaryType.setMinimumSize(new java.awt.Dimension(105, 35));
        panBtnSalaryType.setPreferredSize(new java.awt.Dimension(105, 35));
        btnSalaryNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif")));
        btnSalaryNew.setToolTipText("New");
        btnSalaryNew.setMaximumSize(new java.awt.Dimension(29, 27));
        btnSalaryNew.setMinimumSize(new java.awt.Dimension(29, 27));
        btnSalaryNew.setPreferredSize(new java.awt.Dimension(29, 27));
        btnSalaryNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalaryNewActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnSalaryType.add(btnSalaryNew, gridBagConstraints);

        btnSalarySave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif")));
        btnSalarySave.setToolTipText("Save");
        btnSalarySave.setMaximumSize(new java.awt.Dimension(29, 27));
        btnSalarySave.setMinimumSize(new java.awt.Dimension(29, 27));
        btnSalarySave.setName("btnContactNoAdd");
        btnSalarySave.setPreferredSize(new java.awt.Dimension(29, 27));
        btnSalarySave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalarySaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnSalaryType.add(btnSalarySave, gridBagConstraints);

        btnSalaryDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif")));
        btnSalaryDelete.setToolTipText("Delete");
        btnSalaryDelete.setMaximumSize(new java.awt.Dimension(29, 27));
        btnSalaryDelete.setMinimumSize(new java.awt.Dimension(29, 27));
        btnSalaryDelete.setPreferredSize(new java.awt.Dimension(29, 27));
        btnSalaryDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalaryDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnSalaryType.add(btnSalaryDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = gridBagConstraints.CENTER;
        gridBagConstraints.insets = new java.awt.Insets(0, 100, 0, 0);
        panSalaryDetails.add(panBtnSalaryType, gridBagConstraints);

        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 0);
        panAllSalaryDetails.add(panSalaryDetails, gridBagConstraints);

        //------------------table
//                panMemberTypeDetails.setLayout(new java.awt.GridBagLayout());
//
//        panMemberTypeDetails.setMinimumSize(new java.awt.Dimension(300, 300));
//        panMemberTypeDetails.setPreferredSize(new java.awt.Dimension(300, 300));
        panSalaryTable.setLayout(new java.awt.GridBagLayout());

        panSalaryTable.setMinimumSize(new java.awt.Dimension(460, 210));
        panSalaryTable.setPreferredSize(new java.awt.Dimension(460, 210));
        srpSalary.setMinimumSize(new java.awt.Dimension(450, 200));
        srpSalary.setPreferredSize(new java.awt.Dimension(450, 200));
        tblSalary.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "Slno", "Certificate No", "Member No", "Name", "Contact No", "Networth"
        }));
        tblSalary.setMinimumSize(new java.awt.Dimension(375, 750));
        tblSalary.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 10000));
        tblSalary.setPreferredSize(new java.awt.Dimension(375, 750));
        tblSalary.setOpaque(false);
        tblSalary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblSalaryMousePressed(evt);
            }
        });

        srpSalary.setViewportView(tblSalary);

        panSalaryTable.add(srpSalary, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 5, 4);
        panAllSalaryDetails.add(panSalaryTable, gridBagConstraints);
//        panSalaryDetails.add(panBtnSalaryType);
        tabMasterMaintenance.addTab("Salary Details", panAllSalaryDetails);
//-------------------------------------------------------------------------------------------------------------------------------salary
        panMemberTypeDetails.setLayout(new java.awt.GridBagLayout());

        panMemberTypeDetails.setMinimumSize(new java.awt.Dimension(300, 300));
        panMemberTypeDetails.setPreferredSize(new java.awt.Dimension(300, 300));
        panMemberTypeTable.setLayout(new java.awt.GridBagLayout());

        panMemberTypeTable.setMinimumSize(new java.awt.Dimension(460, 210));
        panMemberTypeTable.setPreferredSize(new java.awt.Dimension(460, 210));
        srpMemberType.setMinimumSize(new java.awt.Dimension(450, 200));
        srpMemberType.setPreferredSize(new java.awt.Dimension(450, 200));
        tblMemberType.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "Member No", "Name", "Type of Member", "Contact No", "Networth"
        }));
        tblMemberType.setMinimumSize(new java.awt.Dimension(375, 750));
        tblMemberType.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 10000));
        tblMemberType.setPreferredSize(new java.awt.Dimension(375, 750));
        tblMemberType.setOpaque(false);
        tblMemberType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblMemberTypeMousePressed(evt);
            }
        });

        srpMemberType.setViewportView(tblMemberType);

        panMemberTypeTable.add(srpMemberType, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 5, 4);
        panMemberTypeDetails.add(panMemberTypeTable, gridBagConstraints);

        panMemberDetails.setLayout(new java.awt.GridBagLayout());

        panMemberDetails.setBorder(new javax.swing.border.TitledBorder("Member Details"));
        panMemberDetails.setMinimumSize(new java.awt.Dimension(275, 200));
        panMemberDetails.setPreferredSize(new java.awt.Dimension(275, 210));
        panMemberDetails.setRequestFocusEnabled(false);
        lblMemNo.setText("Member No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panMemberDetails.add(lblMemNo, gridBagConstraints);

        lblMemName.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panMemberDetails.add(lblMemName, gridBagConstraints);

        lblMemType.setText("Type of Member");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panMemberDetails.add(lblMemType, gridBagConstraints);

        lblMemNetworth.setText("Networth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panMemberDetails.add(lblMemNetworth, gridBagConstraints);

        lblMemPriority.setText("Priority");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panMemberDetails.add(lblMemPriority, gridBagConstraints);        
        
        txtMemPriority.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panMemberDetails.add(txtMemPriority, gridBagConstraints);
        
        txtMemNetworth.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panMemberDetails.add(txtMemNetworth, gridBagConstraints);

        txtContactNum.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panMemberDetails.add(txtContactNum, gridBagConstraints);

        lblContactNum.setText("Contact No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panMemberDetails.add(lblContactNum, gridBagConstraints);

        txtMemType.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panMemberDetails.add(txtMemType, gridBagConstraints);

        txtMemName.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panMemberDetails.add(txtMemName, gridBagConstraints);

        panMemberNumber.setLayout(new java.awt.GridBagLayout());

        txtMemNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panMemberNumber.add(txtMemNo, gridBagConstraints);

        btnMemNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif")));
        btnMemNo.setMaximumSize(new java.awt.Dimension(21, 21));
        btnMemNo.setMinimumSize(new java.awt.Dimension(21, 21));
        btnMemNo.setPreferredSize(new java.awt.Dimension(21, 21));
        btnMemNo.setEnabled(false);
        btnMemNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMemNoActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panMemberNumber.add(btnMemNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panMemberDetails.add(panMemberNumber, gridBagConstraints);

        panBtnMemberType.setLayout(new java.awt.GridBagLayout());

        panBtnMemberType.setMinimumSize(new java.awt.Dimension(95, 35));
        panBtnMemberType.setPreferredSize(new java.awt.Dimension(95, 35));
        btnMemberNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif")));
        btnMemberNew.setToolTipText("New");
        btnMemberNew.setMaximumSize(new java.awt.Dimension(29, 27));
        btnMemberNew.setMinimumSize(new java.awt.Dimension(29, 27));
        btnMemberNew.setPreferredSize(new java.awt.Dimension(29, 27));
        btnMemberNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMemberNewActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnMemberType.add(btnMemberNew, gridBagConstraints);

        btnMemberSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif")));
        btnMemberSave.setToolTipText("Save");
        btnMemberSave.setMaximumSize(new java.awt.Dimension(29, 27));
        btnMemberSave.setMinimumSize(new java.awt.Dimension(29, 27));
        btnMemberSave.setName("btnContactNoAdd");
        btnMemberSave.setPreferredSize(new java.awt.Dimension(29, 27));
        btnMemberSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMemberSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnMemberType.add(btnMemberSave, gridBagConstraints);

        btnMemberDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif")));
        btnMemberDelete.setToolTipText("Delete");
        btnMemberDelete.setMaximumSize(new java.awt.Dimension(29, 27));
        btnMemberDelete.setMinimumSize(new java.awt.Dimension(29, 27));
        btnMemberDelete.setPreferredSize(new java.awt.Dimension(29, 27));
        btnMemberDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMemberDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnMemberType.add(btnMemberDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 18);
        panMemberDetails.add(panBtnMemberType, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 50, 12, 4);
        panMemberTypeDetails.add(panMemberDetails, gridBagConstraints);

        tabMasterMaintenance.addTab("Member Type", panMemberTypeDetails);

        panCollateralTypeDetails.setLayout(new java.awt.GridBagLayout());
        //-------------------------------------------------table started-----------------------------one more table started
        panCollateralJointTable.setLayout(new java.awt.GridBagLayout());

        panCollateralJointTable.setMinimumSize(new java.awt.Dimension(460, 220));
        panCollateralJointTable.setPreferredSize(new java.awt.Dimension(460, 220));
        srpCollateralJointTable.setMinimumSize(new java.awt.Dimension(450, 180));
        srpCollateralJointTable.setPreferredSize(new java.awt.Dimension(450, 180));
        tblJointCollateral.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "Cust Id", "Name", "Constitution"
        }));
        tblJointCollateral.setMinimumSize(new java.awt.Dimension(375, 220));
        tblJointCollateral.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 10000));
        tblJointCollateral.setPreferredSize(new java.awt.Dimension(375, 220));
        tblJointCollateral.setOpaque(false);
//        tblCollateral.addMouseListener(new java.awt.event.MouseAdapter() {
//            public void mousePressed(java.awt.event.MouseEvent evt) {
//                tblCollateralMousePressed(evt);
//            }
//        });

        srpCollateralJointTable.setViewportView(tblJointCollateral);

        panCollateralJointTable.add(srpCollateralJointTable, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.0;
        gridBagConstraints.weighty = 0.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panCollateralTypeDetails.add(panCollateralJointTable, gridBagConstraints);
        ////////////////// above mine
        panCollateralTable.setLayout(new java.awt.GridBagLayout());

        panCollateralTable.setMinimumSize(new java.awt.Dimension(460, 210));
        panCollateralTable.setPreferredSize(new java.awt.Dimension(460, 210));
        srpCollateralTable.setMinimumSize(new java.awt.Dimension(450, 200));
        srpCollateralTable.setPreferredSize(new java.awt.Dimension(450, 200));
        tblCollateral.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "Member No", "Name", "Doc No", "PledgeAmt", "SurveyNo", "TotalArea"
        }));
        tblCollateral.setMinimumSize(new java.awt.Dimension(375, 750));
        tblCollateral.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 10000));
        tblCollateral.setPreferredSize(new java.awt.Dimension(375, 750));
        tblCollateral.setOpaque(false);
        tblCollateral.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblCollateralMousePressed(evt);
            }
        });

        srpCollateralTable.setViewportView(tblCollateral);

        panCollateralTable.add(srpCollateralTable, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panCollateralTypeDetails.add(panCollateralTable, gridBagConstraints);

        panCollatetalDetails.setLayout(new java.awt.GridBagLayout());
        /*  ------------------------------------------------------------- gahan --------------------------------------------------------------------------------------------------------------*/
        panCollatetalDetails.setMinimumSize(new java.awt.Dimension(300, 570));
        panCollatetalDetails.setPreferredSize(new java.awt.Dimension(300, 570));
        panCollatetalDetails.setRequestFocusEnabled(false);
        lblGahanYesNo.setText("Gahan");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCollatetalDetails.add(lblGahanYesNo, gridBagConstraints);

        panGahanYesNo.setLayout(new java.awt.GridBagLayout());
        rdoGahanYes.setText("Yes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        panGahanYesNo.add(rdoGahanYes, gridBagConstraints);
        rdoGahanYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoGahanYesActionPerformed(evt);
            }
        });
        rdoGahanNo.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panGahanYesNo.add(rdoGahanNo, gridBagConstraints);
        rdoGahanNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoGahanNoActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(panGahanYesNo, gridBagConstraints);

        //        panCollatetalDetails.setMinimumSize(new java.awt.Dimension(400, 500));
        //        panCollatetalDetails.setPreferredSize(new java.awt.Dimension(400, 500));
        //        panCollatetalDetails.setRequestFocusEnabled(false);
        lblOwnerMemberNo.setText("Owner Member No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblOwnerMemberNo, gridBagConstraints);


        lblOwnerMemberNname.setText("Owner Member Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblOwnerMemberNname, gridBagConstraints);

        txtOwnerMemberNname.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(txtOwnerMemberNname, gridBagConstraints);


        lblDocumentNo.setText("Document No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblDocumentNo, gridBagConstraints);

        panDocumentNumber.setLayout(new java.awt.GridBagLayout());

        txtDocumentNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;//1
        gridBagConstraints.gridy = 0;//3
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panDocumentNumber.add(txtDocumentNo, gridBagConstraints);
        txtDocumentNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDocumentNoFocusLost(evt);
            }
        });

//        txtDocumentNo.addActionListener(new java.awt.event. ActionListener(){
//            public void actionPerformed(java.awt.event.ActionEvent evt){
//                txtDocumentNoActionPerformed(evt);
//            }
//        });

        btnDocumentNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif")));
        btnDocumentNo.setMaximumSize(new java.awt.Dimension(21, 21));
        btnDocumentNo.setMinimumSize(new java.awt.Dimension(21, 21));
        btnDocumentNo.setPreferredSize(new java.awt.Dimension(21, 21));
        btnDocumentNo.setEnabled(false);
        btnDocumentNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDocumentNoActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;

        panDocumentNumber.add(btnDocumentNo, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;

        panCollatetalDetails.add(panDocumentNumber, gridBagConstraints);

        lblDocumentType.setText("Document Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblDocumentType, gridBagConstraints);

        cboDocumentType.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(cboDocumentType, gridBagConstraints);

        lblDocumentDate.setText("Document Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblDocumentDate, gridBagConstraints);


        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(tdtDocumentDate, gridBagConstraints);

        lblRegisteredOffice.setText("Registered Office");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblRegisteredOffice, gridBagConstraints);

        txtRegisteredOffice.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(txtRegisteredOffice, gridBagConstraints);


        // ------------------------------------------
        lblPledgeNo.setText("Pledge No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblPledgeNo, gridBagConstraints);

        txtPledgeNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(txtPledgeNo, gridBagConstraints);

        lblPledgeDate.setText("Pledge Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblPledgeDate, gridBagConstraints);


        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(tdtPledgeDate, gridBagConstraints);


        // ------------------------end----------------- -->


        lblPledgeType.setText("Pledge Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblPledgeType, gridBagConstraints);

        cboPledge.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(cboPledge, gridBagConstraints);






        //            lblPledge.setText("Pledge");
        //            gridBagConstraints = new java.awt.GridBagConstraints();
        //            gridBagConstraints.gridx = 0;
        //            gridBagConstraints.gridy = 9;
        //            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        //            gridBagConstraints.insets =  new java.awt.Insets(2, 2, 2, 2);
        //            panCollatetalDetails.add(lblPledge, gridBagConstraints);

        lblPledgeAmount.setText("Pledge Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblPledgeAmount, gridBagConstraints);

        txtPledgeAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        txtPledgeAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPledgeAmountFocusLost(evt);
            }
        });
//        txtPledgeAmount.addActionListener( new java.awt.event.ActionListener(){
//           public void actionPerformed(java.awt.event.ActionEvent evt) {
////                btnDocumentNoActionPerformed(evt);
//                txtPledgeAmountActionPerformed(evt);
//            }
//        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(txtPledgeAmount, gridBagConstraints);


        //            -----------------

        lblVillage.setText("Village");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblVillage, gridBagConstraints);

        txtVillage.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(txtVillage, gridBagConstraints);

        lblSurveyNo.setText("Survey No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblSurveyNo, gridBagConstraints);

        txtSurveyNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(txtSurveyNo, gridBagConstraints);


        lblTotalArea.setText("Total Area (In Cents)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(lblTotalArea, gridBagConstraints);

        txtTotalArea.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCollatetalDetails.add(txtTotalArea, gridBagConstraints);





//        lblRemarks.setText("Remarks");
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 0;
//        gridBagConstraints.gridy = 15;
//        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
//        panCollatetalDetails.add(lblRemarks, gridBagConstraints);

        lblNature.setText("Nature");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCollatetalDetails.add(lblNature, gridBagConstraints);


        cboNature.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panCollatetalDetails.add(cboNature, gridBagConstraints);

        lblRight.setText("Right");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCollatetalDetails.add(lblRight, gridBagConstraints);

        cboRight.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panCollatetalDetails.add(cboRight, gridBagConstraints);

        //       ---------------------------------------------------------------------------------------------------
        panBtnCollateralType.setLayout(new java.awt.GridBagLayout());

        panBtnCollateralType.setMinimumSize(new java.awt.Dimension(95, 35));
        panBtnCollateralType.setPreferredSize(new java.awt.Dimension(95, 35));
        btnCollateralNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif")));
        btnCollateralNew.setToolTipText("New");
        btnCollateralNew.setMaximumSize(new java.awt.Dimension(29, 27));
        btnCollateralNew.setMinimumSize(new java.awt.Dimension(29, 27));
        btnCollateralNew.setPreferredSize(new java.awt.Dimension(29, 27));
        btnCollateralNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCollateralNewActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnCollateralType.add(btnCollateralNew, gridBagConstraints);

        btnCollateralSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif")));
        btnCollateralSave.setToolTipText("Save");
        btnCollateralSave.setMaximumSize(new java.awt.Dimension(29, 27));
        btnCollateralSave.setMinimumSize(new java.awt.Dimension(29, 27));
        btnCollateralSave.setName("btnContactNoAdd");
        btnCollateralSave.setPreferredSize(new java.awt.Dimension(29, 27));
        btnCollateralSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCollateralSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnCollateralType.add(btnCollateralSave, gridBagConstraints);

        btnCollateralDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif")));
        btnCollateralDelete.setToolTipText("Delete");
        btnCollateralDelete.setMaximumSize(new java.awt.Dimension(29, 27));
        btnCollateralDelete.setMinimumSize(new java.awt.Dimension(29, 27));
        btnCollateralDelete.setPreferredSize(new java.awt.Dimension(29, 27));
        btnCollateralDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCollateralDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnCollateralType.add(btnCollateralDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 18);
        panCollatetalDetails.add(panBtnCollateralType, gridBagConstraints);

        srpTxtAreaParticulars.setMinimumSize(new java.awt.Dimension(150, 45));
        srpTxtAreaParticulars.setPreferredSize(new java.awt.Dimension(150, 45));
        txtAreaParticular.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txtAreaParticular.setLineWrap(true);
        txtAreaParticular.setMaximumSize(new java.awt.Dimension(2, 14));
        txtAreaParticular.setMinimumSize(new java.awt.Dimension(2, 14));
        txtAreaParticular.setPreferredSize(new java.awt.Dimension(2, 14));
        srpTxtAreaParticulars.setViewportView(txtAreaParticular);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 2;
        panCollatetalDetails.add(srpTxtAreaParticulars, gridBagConstraints);

        panOwnerMemberNumber.setLayout(new java.awt.GridBagLayout());

        txtOwnerMemNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtOwnerMemNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOwnerMemNoFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panOwnerMemberNumber.add(txtOwnerMemNo, gridBagConstraints);

        btnOwnerMemNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif")));
        btnOwnerMemNo.setMaximumSize(new java.awt.Dimension(21, 21));
        btnOwnerMemNo.setMinimumSize(new java.awt.Dimension(21, 21));
        btnOwnerMemNo.setPreferredSize(new java.awt.Dimension(21, 21));
        btnOwnerMemNo.setEnabled(false);
        btnOwnerMemNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOwnerMemNoActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panOwnerMemberNumber.add(btnOwnerMemNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panCollatetalDetails.add(panOwnerMemberNumber, gridBagConstraints);

//        cboPledge.setMinimumSize(new java.awt.Dimension(100, 21));
//        gridBagConstraints = new java.awt.GridBagConstraints();
//        gridBagConstraints.gridx = 1;
//        gridBagConstraints.gridy = 6;
//        gridBagConstraints.ipady = 2;
//        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
//        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
//        panCollatetalDetails.add(cboPledge, gridBagConstraints);




        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panCollateralTypeDetails.add(panCollatetalDetails, gridBagConstraints);

        tabMasterMaintenance.addTab("Collateral Type", panCollateralTypeDetails);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panEmpTransfer.add(tabMasterMaintenance, gridBagConstraints);

        panSecurityDetails.add(panEmpTransfer, gridBagConstraints);

        txtMemNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMemNoFocusLost(evt);
            }
        });

        txtOwnerMemNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOwnerMemNoFocusLost(evt);
            }
        });

        //Gold Type Security
        panGoldTypeDetails.setLayout(new java.awt.GridBagLayout());

        panGoldTypeDetails.setMinimumSize(new java.awt.Dimension(250, 300));
        panGoldTypeDetails.setPreferredSize(new java.awt.Dimension(250, 300));
        
        // Added by nithya on 07-03-2020 for KD-1379
        lblGoldSecurityExists.setText("Gold Security Exists");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        panGoldTypeDetails.add(lblGoldSecurityExists, gridBagConstraints);
        
        lblGoldSecurityId.setText("Gold Security Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        panGoldTypeDetails.add(lblGoldSecurityId, gridBagConstraints);
        
        /*End for gold stock details */
        
        lblJewelleryDetails.setText("Jewellery Details");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        panGoldTypeDetails.add(lblJewelleryDetails, gridBagConstraints);

        lblGrossWeight.setText("Gross Weight(grams");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        panGoldTypeDetails.add(lblGrossWeight, gridBagConstraints);

        lblNetWeight.setText("Net Weight(grams)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        panGoldTypeDetails.add(lblNetWeight, gridBagConstraints);

        lblValueOfGold.setText("Value of the Gold");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        panGoldTypeDetails.add(lblValueOfGold, gridBagConstraints);

        lblGoldRemarks.setText("Remarks");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        panGoldTypeDetails.add(lblGoldRemarks, gridBagConstraints);

        txtGoldRemarks.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panGoldTypeDetails.add(txtGoldRemarks, gridBagConstraints);

        txtValueOfGold.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panGoldTypeDetails.add(txtValueOfGold, gridBagConstraints);
        txtValueOfGold.setValidation(new CurrencyValidation());

        txtNetWeight.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panGoldTypeDetails.add(txtNetWeight, gridBagConstraints);

        txtGrossWeight.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panGoldTypeDetails.add(txtGrossWeight, gridBagConstraints);

        srpTxtAreaParticulars.setMinimumSize(new java.awt.Dimension(400, 60));
        srpTxtAreaParticulars.setPreferredSize(new java.awt.Dimension(400, 60));
        txtJewelleryDetails.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txtJewelleryDetails.setLineWrap(true);

        srpTxtAreaParticulars.setViewportView(txtJewelleryDetails);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        panGoldTypeDetails.add(srpTxtAreaParticulars, gridBagConstraints);
        
        // For gold security stock
        panGoldSecurityId.setLayout(new java.awt.GridBagLayout()); 
        txtGoldSecurityId.setSize(100,21);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        panGoldSecurityId.add(txtGoldSecurityId, gridBagConstraints); 
        btnGoldSecurityIdSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif")));
        btnGoldSecurityIdSearch.setMaximumSize(new java.awt.Dimension(21, 21));
        btnGoldSecurityIdSearch.setMinimumSize(new java.awt.Dimension(21, 21));
        btnGoldSecurityIdSearch.setPreferredSize(new java.awt.Dimension(21, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panGoldSecurityId.add(btnGoldSecurityIdSearch, gridBagConstraints);
        btnGoldSecurityIdSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoldSecurityIdSearchActionPerformed(evt);
            }
        });
        panGoldSecurityId.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panGoldTypeDetails.add(panGoldSecurityId, gridBagConstraints);
        
        panGoldSecurityYesNo.setLayout(new java.awt.GridBagLayout());        
        rdoGoldSecurityExitsYes.setText("Yes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        panGoldSecurityYesNo.add(rdoGoldSecurityExitsYes, gridBagConstraints); 
        rdoGoldSecurityExitsYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoGoldSecurityExitsYesActionPerformed(evt);
            }
        });
        rdoGoldSecurityExitsNo.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panGoldSecurityYesNo.add(rdoGoldSecurityExitsNo, gridBagConstraints);   
        rdoGoldSecurityExitsNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoGoldSecurityExitsNoActionPerformed(evt);
            }
        });
        panGoldSecurityYesNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panGoldTypeDetails.add(panGoldSecurityYesNo, gridBagConstraints);
        
        // End // Added by nithya on 07-03-2020 for KD-1379

        txtGrossWeight.setValidation(new NumericValidation(3, 2));
        txtNetWeight.setValidation(new NumericValidation(3, 2));
        txtValueOfGold.setAllowAll(true);
        txtGoldRemarks.setAllowAll(true);
        txtInstallAmount.setAllowNumber(true);
        tabMasterMaintenance.addTab("Gold Type", panGoldTypeDetails);



        tabMasterMaintenance.addTab("Gold Type", panGoldTypeDetails);


        //DepositType security

        panDepositDetails.setLayout(new java.awt.GridBagLayout());

        panDepositDetails.setMinimumSize(new java.awt.Dimension(850, 225));
        panDepositDetails.setPreferredSize(new java.awt.Dimension(850, 225));
        panDepositType.setLayout(new java.awt.GridBagLayout());

        panDepositType.setMinimumSize(new java.awt.Dimension(440, 225));
        panDepositType.setPreferredSize(new java.awt.Dimension(440, 225));
        panDepositType.setRequestFocusEnabled(false);
        lblProductId2.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        panDepositType.add(lblProductId2, gridBagConstraints);

        lblDepAmount.setText("Dep Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 25, 4);
        panDepositType.add(lblDepAmount, gridBagConstraints);

        lblRateOfInterest.setText("Rate of Interest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 4);
        panDepositType.add(lblRateOfInterest, gridBagConstraints);

        lblDepDt.setText("Dep Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        panDepositType.add(lblDepDt, gridBagConstraints);

        txtDepAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 25, 2);
        panDepositType.add(txtDepAmount, gridBagConstraints);

        txtMaturityValue.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panDepositType.add(txtMaturityValue, gridBagConstraints);

        txtRateOfInterest.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panDepositType.add(txtRateOfInterest, gridBagConstraints);

        lblMaturityDt.setText("Maturity Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 4);
        panDepositType.add(lblMaturityDt, gridBagConstraints);

        lblMaturityValue.setText("Maturity Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 4);
        panDepositType.add(lblMaturityValue, gridBagConstraints);

        lblDepNo.setText("Deposit No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        panDepositType.add(lblDepNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
        panDepositType.add(tdtDepDt, gridBagConstraints);

        panBtnDeposit.setLayout(new java.awt.GridBagLayout());

        panBtnDeposit.setMinimumSize(new java.awt.Dimension(95, 35));
        panBtnDeposit.setPreferredSize(new java.awt.Dimension(95, 35));
        btnDepositNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif")));
        btnDepositNew.setToolTipText("New");
        btnDepositNew.setMaximumSize(new java.awt.Dimension(29, 27));
        btnDepositNew.setMinimumSize(new java.awt.Dimension(29, 27));
        btnDepositNew.setPreferredSize(new java.awt.Dimension(29, 27));
        btnDepositNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepositNewActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnDeposit.add(btnDepositNew, gridBagConstraints);

        btnDepositSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif")));
        btnDepositSave.setToolTipText("Save");
        btnDepositSave.setMaximumSize(new java.awt.Dimension(29, 27));
        btnDepositSave.setMinimumSize(new java.awt.Dimension(29, 27));
        btnDepositSave.setName("btnContactNoAdd");
        btnDepositSave.setPreferredSize(new java.awt.Dimension(29, 27));
        btnDepositSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepositSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnDeposit.add(btnDepositSave, gridBagConstraints);

        btnDepositDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif")));
        btnDepositDelete.setToolTipText("Delete");
        btnDepositDelete.setMaximumSize(new java.awt.Dimension(29, 27));
        btnDepositDelete.setMinimumSize(new java.awt.Dimension(29, 27));
        btnDepositDelete.setPreferredSize(new java.awt.Dimension(29, 27));
        btnDepositDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepositDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnDeposit.add(btnDepositDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 2);
        panDepositType.add(panBtnDeposit, gridBagConstraints);

        txtMaturityDt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                //txtMaturityDtFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panDepositType.add(txtMaturityDt, gridBagConstraints);

        cboDepProdType.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"----Select----"}));
        cboDepProdType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboDepProdType.setPopupWidth(165);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
        panDepositType.add(cboDepProdType, gridBagConstraints);

        panDepNo.setLayout(new java.awt.GridBagLayout());

        txtDepNo.setAllowAll(true);
        txtDepNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panDepNo.add(txtDepNo, gridBagConstraints);

        btnDepNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif")));
        btnDepNo.setMaximumSize(new java.awt.Dimension(21, 21));
        btnDepNo.setMinimumSize(new java.awt.Dimension(21, 21));
        btnDepNo.setPreferredSize(new java.awt.Dimension(21, 21));
        btnDepNo.setEnabled(false);
        btnDepNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepNoActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panDepNo.add(btnDepNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
        panDepositType.add(panDepNo, gridBagConstraints);

        lblProductTypeSecurity.setText("Product Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        panDepositType.add(lblProductTypeSecurity, gridBagConstraints);

        cboProductTypeSecurity.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"----Select----"}));
        cboProductTypeSecurity.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProductTypeSecurity.setPopupWidth(120);
        cboProductTypeSecurity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProductTypeSecurityActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
        panDepositType.add(cboProductTypeSecurity, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panDepositDetails.add(panDepositType, gridBagConstraints);

        panDepositTable.setLayout(new java.awt.GridBagLayout());

        panDepositTable.setMinimumSize(new java.awt.Dimension(380, 220));
        panDepositTable.setPreferredSize(new java.awt.Dimension(380, 220));
        srpTableDeposit.setMinimumSize(new java.awt.Dimension(375, 160));
        srpTableDeposit.setPreferredSize(new java.awt.Dimension(375, 160));
        tblDepositDetails.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "Prod Type", "Dep No", "Dep Amt", "Matur Val"
        }));
        tblDepositDetails.setMinimumSize(new java.awt.Dimension(275, 750));
        tblDepositDetails.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 10000));
        tblDepositDetails.setPreferredSize(new java.awt.Dimension(275, 750));
        tblDepositDetails.setOpaque(false);
        tblDepositDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblDepositDetailsMousePressed(evt);
            }
        });

        srpTableDeposit.setViewportView(tblDepositDetails);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 1, 0);
        panDepositTable.add(srpTableDeposit, gridBagConstraints);

        lblTotalDeposit.setText("Total Deposit Value ");
        lblTotalDeposit.setMinimumSize(new java.awt.Dimension(160, 18));
        lblTotalDeposit.setPreferredSize(new java.awt.Dimension(160, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 4, 6);
        panDepositTable.add(lblTotalDeposit, gridBagConstraints);

        lblTotalDepositValue.setText("                          ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 5);
        panDepositTable.add(lblTotalDepositValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panDepositDetails.add(panDepositTable, gridBagConstraints);

        tabMasterMaintenance.addTab("Deposit Type", panDepositDetails);
        //Other Security Details


        panOtherSecurityDetails.setLayout(new java.awt.GridBagLayout());

        panOtherSecurityDetails.setMinimumSize(new java.awt.Dimension(850, 225));
        panOtherSecurityDetails.setPreferredSize(new java.awt.Dimension(850, 225));
        panOtherSecurityDetails.setLayout(new java.awt.GridBagLayout());
        panLosDetails.setLayout(new java.awt.GridBagLayout());
        panLosDetails.setMinimumSize(new java.awt.Dimension(440, 225));
        panLosDetails.setPreferredSize(new java.awt.Dimension(440, 225));
        panLosDetails.setRequestFocusEnabled(false);
        lblLosOtherInstitution.setText("Other Institution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        panLosDetails.add(lblLosOtherInstitution, gridBagConstraints);

        cboLosOtherInstitution.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"----Select----"}));
        cboLosOtherInstitution.setMinimumSize(new java.awt.Dimension(100, 21));
        cboLosOtherInstitution.setPopupWidth(165);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panLosDetails.add(cboLosOtherInstitution, gridBagConstraints);

        lblLosName.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        panLosDetails.add(lblLosName, gridBagConstraints);

        txtLosName.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
        panLosDetails.add(txtLosName, gridBagConstraints);

        lblLosSecurityType.setText("Security Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        panLosDetails.add(lblLosSecurityType, gridBagConstraints);



        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
        panLosDetails.add(cboLosSecurityType, gridBagConstraints);

        lblLosSecurityNo.setText("Security No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        panLosDetails.add(lblLosSecurityNo, gridBagConstraints);

        txtLosSecurityNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
        panLosDetails.add(txtLosSecurityNo, gridBagConstraints);
        txtLosSecurityNo.setAllowAll(true);

        lblLosAmount.setText("Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 25, 4);
        panLosDetails.add(lblLosAmount, gridBagConstraints);

        txtLosAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 25, 2);
        panLosDetails.add(txtLosAmount, gridBagConstraints);
        txtLosAmount.setValidation(new CurrencyValidation());

        lblLosIssueDate.setText("Issue Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 4);
        panLosDetails.add(lblLosIssueDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panLosDetails.add(tdtLosIssueDate, gridBagConstraints);

        lblLosMaturityDate.setText("Maturity Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 4);
        panLosDetails.add(lblLosMaturityDate, gridBagConstraints);

        tdtLosMaturityDt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                //tdtLosMaturityDtFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panLosDetails.add(tdtLosMaturityDt, gridBagConstraints);

        lblLosMaturityValue.setText("Maturity Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        panLosDetails.add(lblLosMaturityValue, gridBagConstraints);

        txtLosMaturityValue.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panLosDetails.add(txtLosMaturityValue, gridBagConstraints);
        txtLosMaturityValue.setValidation(new CurrencyValidation());

        lblLosRemarks.setText("Remarks");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panLosDetails.add(lblLosRemarks, gridBagConstraints);



        txtLosRemarks.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panLosDetails.add(txtLosRemarks, gridBagConstraints);

        panLosBtn.setLayout(new java.awt.GridBagLayout());

        panLosBtn.setMinimumSize(new java.awt.Dimension(95, 35));
        panLosBtn.setPreferredSize(new java.awt.Dimension(95, 35));
        btnLosNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif")));
        btnLosNew.setToolTipText("New");
        btnLosNew.setMaximumSize(new java.awt.Dimension(29, 27));
        btnLosNew.setMinimumSize(new java.awt.Dimension(29, 27));
        btnLosNew.setPreferredSize(new java.awt.Dimension(29, 27));
        btnLosNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLosNewActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLosBtn.add(btnLosNew, gridBagConstraints);

        btnLosSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif")));
        btnLosSave.setToolTipText("Save");
        btnLosSave.setMaximumSize(new java.awt.Dimension(29, 27));
        btnLosSave.setMinimumSize(new java.awt.Dimension(29, 27));
        btnLosSave.setName("btnContactNoAdd");
        btnLosSave.setPreferredSize(new java.awt.Dimension(29, 27));
        btnLosSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLosSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLosBtn.add(btnLosSave, gridBagConstraints);

        btnLosDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif")));
        btnLosDelete.setToolTipText("Delete");
        btnLosDelete.setMaximumSize(new java.awt.Dimension(29, 27));
        btnLosDelete.setMinimumSize(new java.awt.Dimension(29, 27));
        btnLosDelete.setPreferredSize(new java.awt.Dimension(29, 27));
        btnLosDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLosDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLosBtn.add(btnLosDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 2);
        panLosDetails.add(panLosBtn, gridBagConstraints);

        cboLosSecurityType.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"----Select----"}));
        cboLosSecurityType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboLosSecurityType.setPopupWidth(120);
        cboLosSecurityType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // cboLoseSecurityTypeActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panOtherSecurityDetails.add(panLosDetails, gridBagConstraints);

        panLosTable.setLayout(new java.awt.GridBagLayout());

        panLosTable.setMinimumSize(new java.awt.Dimension(380, 220));
        panLosTable.setPreferredSize(new java.awt.Dimension(380, 220));
        srpTableLos.setMinimumSize(new java.awt.Dimension(375, 160));
        srpTableLos.setPreferredSize(new java.awt.Dimension(375, 160));
        tblLosDetails.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "OtherInstitution", "Name", "Security No", "SecurityType", "Amount"
        }));
        tblLosDetails.setMinimumSize(new java.awt.Dimension(275, 750));
        tblLosDetails.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 10000));
        tblLosDetails.setPreferredSize(new java.awt.Dimension(275, 750));
        tblLosDetails.setOpaque(false);
        tblLosDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblLosDetailsMousePressed(evt);
            }
        });

        srpTableLos.setViewportView(tblLosDetails);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 1, 0);
        panLosTable.add(srpTableLos, gridBagConstraints);


        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panOtherSecurityDetails.add(panLosTable, gridBagConstraints);

        tabMasterMaintenance.addTab("Other Society Details", panOtherSecurityDetails);
         // *****************************************************************************Vehichle********************************************
        panVehicleTypeDetails.setLayout(new java.awt.GridBagLayout());

        panVehicleTypeDetails.setMinimumSize(new java.awt.Dimension(900, 650));
        panVehicleTypeDetails.setPreferredSize(new java.awt.Dimension(900, 650));
        panVehicleTypeTable.setLayout(new java.awt.GridBagLayout());

        panVehicleTypeTable.setMinimumSize(new java.awt.Dimension(460, 210));
        panVehicleTypeTable.setPreferredSize(new java.awt.Dimension(460, 210));
        srpVehicleType.setMinimumSize(new java.awt.Dimension(450, 200));
        srpVehicleType.setPreferredSize(new java.awt.Dimension(450, 200));
        tblVehicleType.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Member No", "Name", "Vehicle number","Vehicle type", "Contact No", "RC book number"
                }));
        tblVehicleType.setMinimumSize(new java.awt.Dimension(375, 750));
        tblVehicleType.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 10000));
        tblVehicleType.setPreferredSize(new java.awt.Dimension(375, 750));
        tblVehicleType.setOpaque(false);
        tblVehicleType.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblVehicleTypeMousePressed(evt);
            }
        });

        srpVehicleType.setViewportView(tblVehicleType);

        panVehicleTypeTable.add(srpVehicleType, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 5, 4);
        panVehicleTypeDetails.add(panVehicleTypeTable, gridBagConstraints);

        panVehicleDetails.setLayout(new java.awt.GridBagLayout());

        panVehicleDetails.setBorder(new javax.swing.border.TitledBorder("Vehicle Details"));
        panVehicleDetails.setMinimumSize(new java.awt.Dimension(300, 700));
        panVehicleDetails.setPreferredSize(new java.awt.Dimension(300, 700));
        panVehicleDetails.setRequestFocusEnabled(false);
        lblVehicleMemNo.setText("Vehicle Member No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblVehicleMemNo, gridBagConstraints);

        lblVehicleMemName.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblVehicleMemName, gridBagConstraints);
        lblVehicleMemRetireDate.setText("RetireMentDate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblVehicleMemRetireDate, gridBagConstraints);
        lblVehicleMemType.setText("Type of Member");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblVehicleMemType, gridBagConstraints);

        lblVehicleNo.setText("VehicleNo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblVehicleNo, gridBagConstraints);
        
        txtVehicleNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panVehicleDetails.add(txtVehicleNo, gridBagConstraints);
        
        lblVehicleType.setText("Vehicle Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblVehicleType, gridBagConstraints);
        
        txtVehicleType.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panVehicleDetails.add(txtVehicleType, gridBagConstraints);
     
        lblVehicleDetails.setText("Vehicle Details");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblVehicleDetails, gridBagConstraints);
         
        srpTxtAreaVehicledtails.setMinimumSize(new java.awt.Dimension(150, 60));
        srpTxtAreaVehicledtails.setPreferredSize(new java.awt.Dimension(150, 60));
        txtVehicleDetals.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        txtVehicleDetals.setLineWrap(true);
        srpTxtAreaVehicledtails.setViewportView(txtVehicleDetals);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        panVehicleDetails.add(srpTxtAreaVehicledtails, gridBagConstraints);

        
        lblVehicleRcBookNo.setText("Rc Book No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblVehicleRcBookNo, gridBagConstraints);
        
        txtVehicleRcBookNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panVehicleDetails.add(txtVehicleRcBookNo, gridBagConstraints);
        
        lblVehicleDate.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblVehicleDate, gridBagConstraints);
        
        txtVehicleDate.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panVehicleDetails.add(txtVehicleDate, gridBagConstraints);
        
        
        txtVehicleContactNum.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panVehicleDetails.add(txtVehicleContactNum, gridBagConstraints);

        lblVehicleContactNum.setText("Contact No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblVehicleContactNum, gridBagConstraints);

        txtVehicleMemType.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panVehicleDetails.add(txtVehicleMemType, gridBagConstraints);

        txtVehicleMemberName.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panVehicleDetails.add(txtVehicleMemberName, gridBagConstraints);

        panVehicleNumber.setLayout(new java.awt.GridBagLayout());
        lblVehicleMemRetireDate.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panVehicleDetails.add(lblVehicleMemRetireDate, gridBagConstraints);

        panVehicleNumber.setLayout(new java.awt.GridBagLayout());
        txtVehicleMemberNum.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panVehicleNumber.add(txtVehicleMemberNum, gridBagConstraints);
        lblTotalVehicleMemSal.setText("Total Salary");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblTotalVehicleMemSal, gridBagConstraints);

        txtVehicleMemSal.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panVehicleDetails.add(txtVehicleMemSal, gridBagConstraints);
        txtVehicleMemSal.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtVehicleMemSalFocusLost(evt);
            }
        });
        
        lblVehicleNetWorth.setText("Networth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panVehicleDetails.add(lblVehicleNetWorth, gridBagConstraints);

        txtVehicleNetWorth.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panVehicleDetails.add(txtVehicleNetWorth, gridBagConstraints);

        btnVehicleMemNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif")));
        btnVehicleMemNo.setMaximumSize(new java.awt.Dimension(21, 21));
        btnVehicleMemNo.setMinimumSize(new java.awt.Dimension(21, 21));
        btnVehicleMemNo.setPreferredSize(new java.awt.Dimension(21, 21));
        btnVehicleMemNo.setEnabled(false);
        btnVehicleMemNo.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVehicleMemNoActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panVehicleNumber.add(btnVehicleMemNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panVehicleDetails.add(panVehicleNumber, gridBagConstraints);

        panBtnVehicleType.setLayout(new java.awt.GridBagLayout());

        panBtnVehicleType.setMinimumSize(new java.awt.Dimension(95, 35));
        panBtnVehicleType.setPreferredSize(new java.awt.Dimension(95, 35));
        btnVehicleNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif")));
        btnVehicleNew.setToolTipText("New");
        btnVehicleNew.setMaximumSize(new java.awt.Dimension(29, 27));
        btnVehicleNew.setMinimumSize(new java.awt.Dimension(29, 27));
        btnVehicleNew.setPreferredSize(new java.awt.Dimension(29, 27));
        btnVehicleNew.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVehicleNewActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnVehicleType.add(btnVehicleNew, gridBagConstraints);

        btnVehicleSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif")));
        btnVehicleSave.setToolTipText("Save");
        btnVehicleSave.setMaximumSize(new java.awt.Dimension(29, 27));
        btnVehicleSave.setMinimumSize(new java.awt.Dimension(29, 27));
        btnVehicleSave.setName("btnContactNoAdd");
        btnVehicleSave.setPreferredSize(new java.awt.Dimension(29, 27));
        btnVehicleSave.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVehicleSaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnVehicleType.add(btnVehicleSave, gridBagConstraints);

        btnVehicleDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif")));
        btnVehicleDelete.setToolTipText("Delete");
        btnVehicleDelete.setMaximumSize(new java.awt.Dimension(29, 27));
        btnVehicleDelete.setMinimumSize(new java.awt.Dimension(29, 27));
        btnVehicleDelete.setPreferredSize(new java.awt.Dimension(29, 27));
        btnVehicleDelete.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVehicleDeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panBtnVehicleType.add(btnVehicleDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 18);
        panVehicleDetails.add(panBtnVehicleType, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 50, 12, 4);
        panVehicleTypeDetails.add(panVehicleDetails, gridBagConstraints);

       tabMasterMaintenance.addTab("Vehicle Type", panVehicleTypeDetails);

   

    }

    private void btnDepositNewActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        updateMode = false;
        observable.setDepositTypeData(true);
        enableDisableDepositPanButton(false);
        btnDepositSave.setEnabled(true);
        ClientUtil.enableDisable(panDepositType, false);
        btnDepNo.setEnabled(true);
        cboProductTypeSecurity.setEnabled(true);
        cboDepProdType.setEnabled(true);
    }

    private void btnLosNewActionPerformed(java.awt.event.ActionEvent evt) {
        updateLosMode = false;
        observable.setLosTypeData(true);
        enableDisableLosPanButton(false);
        btnLosSave.setEnabled(true);
        enabledesableLOS(true);
//        ClientUtil.enableDisable(panLType,false);

    }

    public void enabledesableLOS(boolean filag) {
        cboLosOtherInstitution.setEnabled(filag);
        txtLosName.setEnabled(filag);
        cboLosSecurityType.setEnabled(filag);
        txtLosSecurityNo.setEnabled(filag);
        txtLosAmount.setEnabled(filag);
        tdtLosIssueDate.setEnabled(filag);
        tdtLosMaturityDt.setEnabled(filag);
        txtLosMaturityValue.setEnabled(filag);
        txtLosRemarks.setEnabled(filag);
        txtLosRemarks.setEnabled(filag);
    }

    private void btnLosSaveActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            HashMap whereMap = new HashMap();
            whereMap.put("SECURITY_NO", txtLosSecurityNo.getText());
            List recordList = ClientUtil.executeQuery("checkDepositNoAlreadyinLoansLOS", whereMap);
            if ((recordList != null && recordList.size() > 0) && !updateMode) {
                ClientUtil.showMessageWindow("This Deposit has Already been Used as Security !!!");
            } else {
                updateLosTypeFields();
                observable.addLosTypeTable(updateTab, updateLosMode);
                tblLosDetails.setModel(observable.getTblLosTypeDetails());
                observable.resetLosTypeDetails();
            }
            resetLosTypeDetails();
            ClientUtil.enableDisable(panLosDetails, false);
            enableDisableLosPanButton(false);
            btnLosNew.setEnabled(true);
            //                btnDepNo.setEnabled(false);
            //                calculateTot();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void btnDepositDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        String s = CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(tblDepositDetails.getSelectedRow(), 1));
        observable.deleteDepositTableData(s, tblDepositDetails.getSelectedRow());
        observable.resetDepositTypeDetails();
        resetDepositTypeDetails();
        ClientUtil.enableDisable(panDepositType, false);
        enableDisableDepositPanButton(false);
        btnDepositNew.setEnabled(true);
        btnDepNo.setEnabled(false);
        calculateTot();
        if (tblDepositDetails.getRowCount() == 0) {
            lblTotalDepositValue.setText(CurrencyValidation.formatCrore(String.valueOf("0")));
        }
    }

    private void btnLosDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        String s = CommonUtil.convertObjToStr(tblLosDetails.getValueAt(tblLosDetails.getSelectedRow(), 2));
        observable.deleteLosTableData(s, tblLosDetails.getSelectedRow());
        observable.resetLosTypeDetails();
        resetLosTypeDetails();
        ClientUtil.enableDisable(panLosDetails, false);
        enableDisableLosPanButton(false);
        btnLosNew.setEnabled(true);

    }

    private void btnDepositSaveActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            HashMap whereMap = new HashMap();
            String prodtype = CommonUtil.convertObjToStr(cboProductTypeSecurity.getSelectedItem());
            whereMap.put("DEPOSIT_NO", txtDepNo.getText());
            List recordList = null;
            List depList = null;
            double depAmount = 0.0;
            if (prodtype.equals("TD") || prodtype.equals("Deposits")) {
                depList = ClientUtil.executeQuery("getAvailableBalForDep", whereMap);
                HashMap hmap = (HashMap) depList.get(0);
                depAmount = CommonUtil.convertObjToDouble(hmap.get("AVAILABLE_BALANCE")).doubleValue();
            } else {
                recordList = ClientUtil.executeQuery("checkDepositNoAlreadyinLoansDeposit", whereMap);
            }
            if (((recordList != null && recordList.size() > 0) || (depList != null && depList.size() > 0 && depAmount <= 0.0)) && !updateMode) {
                ClientUtil.showMessageWindow("This Deposit has Already been Used as Security !!!");
            } else {
                updateDepositTypeFields();
                observable.addDepositTypeTable(updateTab, updateMode);
                tblDepositDetails.setModel(observable.getTblDepositTypeDetails());
                observable.resetDepositTypeDetails();
            }
            resetDepositTypeDetails();
            ClientUtil.enableDisable(panDepositType, false);
            enableDisableDepositPanButton(false);
            btnDepositNew.setEnabled(true);
            btnDepNo.setEnabled(false);
            calculateTot();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void calculateTot() {
        double totDeposit = 0;
        for (int i = 0; i < tblDepositDetails.getRowCount(); i++) {
            totDeposit = totDeposit + CommonUtil.convertObjToDouble(tblDepositDetails.getValueAt(i, 2).toString()).doubleValue();
            lblTotalDepositValue.setText(CurrencyValidation.formatCrore(String.valueOf(totDeposit)));
        }
        setSizeTableData();
    }

    private void setSizeTableData() {
        tblDepositDetails.getColumnModel().getColumn(0).setPreferredWidth(60);
        tblDepositDetails.getColumnModel().getColumn(1).setPreferredWidth(100);
        tblDepositDetails.getColumnModel().getColumn(2).setPreferredWidth(70);
        tblDepositDetails.getColumnModel().getColumn(3).setPreferredWidth(70);
    }

    private void resetDepositTypeDetails() {
        txtDepNo.setText("");
        cboProductTypeSecurity.setSelectedItem("");
        cboDepProdType.setSelectedItem("");
        tdtDepDt.setDateValue("");
        txtDepAmount.setText("");
        txtRateOfInterest.setText("");
        txtMaturityValue.setText("");
        txtMaturityDt.setDateValue("");
    }

    private void resetLosTypeDetails() {
        txtLosAmount.setText("");
        cboLosOtherInstitution.setSelectedItem("");
        cboLosSecurityType.setSelectedItem("");
        tdtLosIssueDate.setDateValue("");
        txtLosRemarks.setText("");
        txtLosName.setText("");
        txtLosMaturityValue.setText("");
        tdtLosMaturityDt.setDateValue("");
        txtLosSecurityNo.setText("");
    }

    public void updateDepositTypeFields() {

        //      observable.setTxtChittalNo(txtChittalNo.getText());
        //        observable.setTxtSubNo(txtSubNo.getText());
        observable.setTxtDepNo(txtDepNo.getText());
        observable.setCboProductTypeSecurity((String) cboProductTypeSecurity.getSelectedItem());
        observable.setCboDepProdID((String) cboDepProdType.getSelectedItem());
        observable.setTdtDepDt(tdtDepDt.getDateValue());
        observable.setTxtDepAmount(txtDepAmount.getText());
        observable.setTxtMaturityDt(txtMaturityDt.getDateValue());
        observable.setTxtMaturityValue(txtMaturityValue.getText());
        observable.setTxtRateOfInterest(txtRateOfInterest.getText());
    }

    public void updateLosTypeFields() {

        //      observable.setTxtChittalNo(txtChittalNo.getText());
        //        observable.setTxtSubNo(txtSubNo.getText());
        observable.setTxtDepNo(txtDepNo.getText());
        observable.setCboLosOtherInstitution((String) cboLosOtherInstitution.getSelectedItem());
        observable.setCboLosSecurityType((String) cboLosSecurityType.getSelectedItem());
        observable.setTxtLosAmount(txtLosAmount.getText());
        observable.setTxtLosMaturityValue(txtLosMaturityValue.getText());
        observable.setTxtLosName(txtLosName.getText());
        observable.setTxtLosSecurityNo(txtLosSecurityNo.getText());
        observable.setTxtLosRemarks(txtLosRemarks.getText());
        observable.setTdtLosIssueDate(tdtLosIssueDate.getDateValue());
        observable.setTdtLosMaturityDt(tdtLosMaturityDt.getDateValue());
    }

    private void enableDisableDepositPanButton(boolean flag) {
        btnDepositNew.setEnabled(flag);
        btnDepositSave.setEnabled(flag);
        btnDepositDelete.setEnabled(flag);
    }

    private void enableDisableLosPanButton(boolean flag) {
        btnLosNew.setEnabled(flag);
        btnLosSave.setEnabled(flag);
        btnLosDelete.setEnabled(flag);
    }

    private void tblDepositDetailsMousePressed(java.awt.event.MouseEvent evt) {
        updateDepositTypeFields();
        updateMode = true;
        updateTab = tblDepositDetails.getSelectedRow();
        observable.setDepositTypeData(false);
        String depProdType = CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(tblDepositDetails.getSelectedRow(), 0));
        observable.setCbmProdTypeSecurity(depProdType);
        cboDepProdType.setModel(observable.getCbmDepProdID());
        String st = CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(tblDepositDetails.getSelectedRow(), 1));
        observable.populateDepositTypeDetails(st);
        populateDepositTypeFields();
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT
                || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW || observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE
                || observable.getActionType() == ClientConstants.ACTIONTYPE_EXCEPTION) {
            enableDisableDepositPanButton(false);
            ClientUtil.enableDisable(panDepositType, false);
        } else {

            btnDepNo.setEnabled(true);
            cboProdType.setEnabled(true);
            cboProdId.setEnabled(true);
            txtDepAmount.setEnabled(false);
            txtRateOfInterest.setEnabled(false);
            txtMaturityValue.setEnabled(false);
            txtMaturityDt.setEnabled(false);
            tdtDepDt.setEnabled(false);
            enableDisableDepositPanButton(true);
            btnDepositNew.setEnabled(false);



        }


    }

    private void tblLosDetailsMousePressed(java.awt.event.MouseEvent evt) {
        updateLosTypeFields();
        updateMode = true;
        updateTab = tblLosDetails.getSelectedRow();
        observable.setLosTypeData(false);
        String otherInstitution = CommonUtil.convertObjToStr(tblLosDetails.getValueAt(tblLosDetails.getSelectedRow(), 0));
        //             observable.setCbmProdTypeSecurity(otherInstitution);
        //             cboDepProdType.setModel(observable.getCbmDepProdID());
        cboLosOtherInstitution.setSelectedItem(otherInstitution);
        String st = CommonUtil.convertObjToStr(tblLosDetails.getValueAt(tblLosDetails.getSelectedRow(), 2));
        observable.populateLosTypeDetails(st);
        populateLosTypeFields();
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT
                || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW || observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE
                || observable.getActionType() == ClientConstants.ACTIONTYPE_EXCEPTION) {
            enableDisableLosPanButton(false);
        } else {
            enableDisableLosPanButton(true);
            btnLosNew.setEnabled(false);
        }
        ClientUtil.enableDisable(panLosDetails, false);


    }

    private void cboProductTypeSecurityActionPerformed(java.awt.event.ActionEvent evt) {
        if (cboProductTypeSecurity.getSelectedIndex() > 0) {
            String prodType = ((ComboBoxModel) cboProductTypeSecurity.getModel()).getKeyForSelected().toString();
            observable.setCbmProdTypeSecurity(prodType);
            cboDepProdType.setModel(observable.getCbmDepProdID());
            if (prodType.equals("TD")) {
                lblProductId.setText("Product Id");
                lblDepNo.setText("Deposit No");
                lblDepDt.setText("Dep Date");
                lblDepAmount.setText("Dep Amount");
                lblMaturityValue.setText("Maturity Value");
                lblMaturityDt.setText("Maturity Date");
                txtRateOfInterest.setVisible(true);
                lblRateOfInterest.setVisible(true);
            } else {
                lblProductId2.setText("Scheme Name");
                lblDepNo.setText("Chittal No");
                lblDepDt.setText("Scheme StartDt");
                lblDepAmount.setText("Inst Amount");
                lblMaturityValue.setText("Paid Amount");
                lblMaturityDt.setText("Scheme EndDt");
                txtRateOfInterest.setText("");
                txtRateOfInterest.setVisible(false);
                lblRateOfInterest.setVisible(false);
            }
        }

    }

    public void populateDepositTypeFields() {
        txtDepNo.setText(observable.getTxtDepNo());
        //        txtProductId.setText(observable.getTxtProductId());
        cboProductTypeSecurity.setSelectedItem(observable.getCboProductTypeSecurity());
        cboDepProdType.setSelectedItem(observable.getCboDepProdID());
        tdtDepDt.setDateValue(observable.getTdtDepDt());
        txtDepAmount.setText(observable.getTxtDepAmount());
        txtRateOfInterest.setText(observable.getTxtRateOfInterest());
        txtMaturityValue.setText(observable.getTxtMaturityValue());
        txtMaturityDt.setDateValue(observable.getTxtMaturityDt());
    }

    public void populateLosTypeFields() {
        txtLosSecurityNo.setText(observable.getTxtLosSecurityNo());
        //        txtProductId.setText(observable.getTxtProductId());
        cboLosOtherInstitution.setSelectedItem(observable.getCboLosOtherInstitution());
        cboLosSecurityType.setSelectedItem(observable.getCboLosSecurityType());
        tdtLosIssueDate.setDateValue(observable.getTdtLosIssueDate());
        txtLosMaturityValue.setText(observable.getTxtLosMaturityValue());
        txtLosAmount.setText(observable.getTxtLosAmount());
        txtLosName.setText(observable.getTxtLosName());
        tdtLosMaturityDt.setDateValue(observable.getTdtLosMaturityDt());
        txtLosRemarks.setText(observable.getTxtLosRemarks());
    }

    private void enableDisableSalaryBtns(boolean flag) {
        btnSalaryNew.setEnabled(flag);
        btnSalarySave.setEnabled(flag);
        btnSalaryDelete.setEnabled(flag);
    }

    private void enableDisableSalaryBtnsNew(boolean isNewEnable) {

        if (isNewEnable) {
            btnSalaryNew.setEnabled(isNewEnable);
            btnSalarySave.setEnabled(false);
            btnSalaryDelete.setEnabled(false);
        } else {
            btnSalaryNew.setEnabled(isNewEnable);
            btnSalarySave.setEnabled(true);
            btnSalaryDelete.setEnabled(true);
        }
    }

    private void enableDisableSalaryDetails(boolean flag) {
        ClientUtil.enableDisable(panSalaryDetails, flag);
    }

    //    private void enableDisableSalaryBtns(boolean flag){
    //        btnSalaryNew.setEnabled(flag);
    //        btnSalarySave.setEnabled(flag);
    //        btnSalaryDelete.setEnabled(flag);
    //
    //    }
    private void btnOwnerMemNoActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (rdoGahanYes.isSelected()) {
            popUp("OWNER_MEMBER_NO_GAHAN");
        } else {
            popUp("OWNER_MEMBER_NO");
        }
    }

    private void txtOwnerMemNoFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        if (txtOwnerMemNo.getText().length() > 0) {
            HashMap listMap = new HashMap();
            listMap.put("MEMBERSHIP_NO", txtOwnerMemNo.getText());
            java.util.List lst = ClientUtil.executeQuery("getMemeberShipDetails", listMap);
            if (lst != null && lst.size() > 0) {
                listMap = (HashMap) lst.get(0);
                viewType = "OWNER_MEMBER_NO";
                fillData(listMap);
            } else {
                ClientUtil.showAlertWindow("Invalid Member No");
                resetCollateralDetails();
                observable.setTxtOwnerMemNo("");
            }
        }
    }

    private void tblCollateralMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        //        updateCollateralFields();
        updateMode = true;
        updateTab = tblCollateral.getSelectedRow();
        observable.setCollateralTypeData(false);
        String st = CommonUtil.convertObjToStr(tblCollateral.getValueAt(tblCollateral.getSelectedRow(), 0));
        //comm by jiby
        //observable.populateCollateralDetails(st);
        observable.populateCollateralDetails(st+"_"+(updateTab+1));
        populateCollateralFields();
        collateralJointAccountDisplay(txtOwnerMemNo.getText());
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT
                || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW || observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE
                || observable.getActionType() == ClientConstants.ACTIONTYPE_EXCEPTION) {
            btnSecurityCollateral(false);
            ClientUtil.enableDisable(panCollatetalDetails, false);
        } else {
            btnSecurityCollateral(true);
            ClientUtil.enableDisable(panCollatetalDetails, true);
            btnCollateralNew.setEnabled(false);
        }
        txtOwnerMemNo.setEnabled(false);
        txtOwnerMemberNname.setEnabled(false);
        //added by jiby
         btnCollateralNew.setEnabled(true);
       // //System.out.println("iiiiiiiiiiiiii"+CommonUtil.convertObjToStr(tblCollateral.getValueAt(tblCollateral.getSelectedRow(), 4)));
        observable.setOldSurvyNo(CommonUtil.convertObjToStr(tblCollateral.getValueAt(tblCollateral.getSelectedRow(), 4)));
    }

    private void btnCollateralDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //added  by jiby
        int selRow=tblCollateral.getSelectedRow();
        //
        String s = CommonUtil.convertObjToStr(tblCollateral.getValueAt(tblCollateral.getSelectedRow(), 0));
        //observable.deleteCollateralTableData(s, tblCollateral.getSelectedRow());
        observable.deleteCollateralTableData(s+"_"+(selRow+1), tblCollateral.getSelectedRow());
        updateTab = -1;
        observable.resetCollateralDetails();
        resetCollateralDetails();
        ClientUtil.enableDisable(panCollatetalDetails, false);
        btnSecurityCollateral(false);
        btnCollateralNew.setEnabled(true);
    }

    private void txtPledgeAmountFocusLost(java.awt.event.FocusEvent evt) {
        if (rdoGahanYes.isSelected()) {

            HashMap resultMap = observable.validatePledgeAmount(CommonUtil.convertObjToStr(txtDocumentNo.getText()), CommonUtil.convertObjToDouble(txtPledgeAmount.getText()).doubleValue());
            if (resultMap != null && resultMap.size() > 0) {
                ClientUtil.displayAlert("Pledge Amount Should not Exceed available Security value");
                txtPledgeAmount.setText(CommonUtil.convertObjToStr(resultMap.get("PLEDGE_AMT")));
            }
        }

    }

    private void btnSalaryNewActionPerformed(java.awt.event.ActionEvent evt) {

        resetSalaryDetails();
        enableDisableSalaryDetails(true);
        enableDisableSalaryBtns(true);
        salarytblSelectedRow = -1;
        observable.setSalaryTypeData(true);

    }
    private void txtVehicleMemSalFocusLost(java.awt.event.FocusEvent evt) {
        HashMap whereMap = new HashMap();
        String memNo = txtVehicleMemberNum.getText();
        whereMap.put("PROD_ID", ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString());
        List custList = ClientUtil.executeQuery("selectSalSecurityLimit", whereMap);
        if (custList != null && custList.size() > 0) {
            HashMap resultMap = (HashMap) custList.get(0);
            if (resultMap.containsKey("SAL_SECURITY_LIMIT") && resultMap.get("SAL_SECURITY_LIMIT") != null) {
                double netWorth = CommonUtil.convertObjToDouble(resultMap.get("SAL_SECURITY_LIMIT")) * CommonUtil.convertObjToDouble(txtVehicleMemSal.getText());
                txtVehicleNetWorth.setText(CommonUtil.convertObjToStr(netWorth));
            }
        }
    }
    private void btnSalarySaveActionPerformed(java.awt.event.ActionEvent evt) {
        if (CommonUtil.convertObjToStr(txtSalaryCertificateNo.getText()).length() > 0) {
            updateSalaryOBFields();
            int rowcount = tblSalary.getRowCount();
            observable.setSalarySecrityTableValue(salarytblSelectedRow, rowcount);
            tblSalary.setModel(observable.getTblSalarySecrityTable());
            enableDisableSalaryDetails(false);
            resetSalaryDetails();
            enableDisableSalaryBtnsNew(true);
            salarytblSelectedRow = -1;
        } else {
            ClientUtil.displayAlert("Please Enter Salary Certificate No");
        }
    }

    private void btnSalaryDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        observable.deleteSalarySecrityTableValue(salarytblSelectedRow);
        resetSalaryDetails();
        enableDisableSalaryBtnsNew(true);
        salarytblSelectedRow = -1;
    }

    private void tblSalaryMousePressed(java.awt.event.MouseEvent evt) {
        salarytblSelectedRow = tblSalary.getSelectedRow();
        observable.setSalaryTypeData(false);
        observable.showSalaryTableValues(salarytblSelectedRow);
        enableDisableSalaryBtnsNew(false);
        if (viewType == AUTHORIZE || viewType == REJECT) {
            enableDisableSalaryBtns(false);
        }
        updateSalaryUI();





    }

    private void tdtRetirementDtFocusLost(java.awt.event.FocusEvent evt) {
        String rtDate = CommonUtil.convertObjToStr(tdtRetirementDt.getDateValue());
        if (rtDate.length() > 0 && DateUtil.dateDiff(DateUtil.getDateMMDDYYYY(rtDate), (Date) curr_dt.clone()) > 0) {
            ClientUtil.displayAlert("Retirement Date Should be in Future Date");
            tdtRetirementDt.setDateValue("");
        }
    }

    private void updateSalaryUI() {
        txtSalaryCertificateNo.setText(observable.getTxtSalaryCertificateNo());
        txtEmployerName.setText(observable.getTxtEmployerName());
        txtAddress.setText(observable.getTxtAddress());
        cboCity.setSelectedItem(observable.getCboSecurityCity());
        txtPinCode.setText(observable.getTxtPinCode());
        txtDesignation.setText(observable.getTxtDesignation());
        txtContactNo.setText(observable.getTxtContactNo());
        tdtRetirementDt.setDateValue(observable.getTdtRetirementDt());
        txtMemberNum.setText(observable.getTxtMemberNum());
        txtTotalSalary.setText(observable.getTxtTotalSalary());
        txtNetWorth1.setText(observable.getTxtNetWorth());
        txtSalaryRemark.setText(observable.getTxtSalaryRemark());
    }

    private void updateSalaryOBFields() {
        observable.setTxtSalaryCertificateNo(txtSalaryCertificateNo.getText());
        observable.setTxtEmployerName(txtEmployerName.getText());
        observable.setTxtAddress(txtAddress.getText());
        observable.setCboSecurityCity(CommonUtil.convertObjToStr(cboCity.getSelectedItem()));
        observable.setTxtPinCode(txtPinCode.getText());
        observable.setTxtDesignation(txtDesignation.getText());
        observable.setTxtContactNo(txtContactNo.getText());
        observable.setTdtRetirementDt(tdtRetirementDt.getDateValue());
        observable.setTxtMemberNum(txtMemberNum.getText());
        observable.setTxtTotalSalary(txtTotalSalary.getText());
        observable.setTxtNetWorth(txtNetWorth1.getText());
        observable.setTxtSalaryRemark(txtSalaryRemark.getText());
    }

    private void updateCropOBFields() {
        observable.setTxtAreaAcrs(txtAreaAcrs.getText());
        observable.setTxtEligibleCropAmt(txtEligibleCropAmt.getText());
    }

    private void resetSalaryDetails() {
        txtSalaryCertificateNo.setText("");
        txtEmployerName.setText("");
        txtAddress.setText("");
        cboCity.setSelectedItem("");
        txtPinCode.setText("");
        txtDesignation.setText("");
        txtContactNo.setText("");
        tdtRetirementDt.setDateValue("");
        txtMemberNum.setText("");
        txtTotalSalary.setText("");
        txtNetWorth1.setText("");
        txtSalaryRemark.setText("");

    }

    private void resetCropDetails() {
        txtAreaAcrs.setText("");
        txtEligibleCropAmt.setText("");
        cboCropName.setSelectedItem("");

    }

    private void rdoGahanYesActionPerformed(java.awt.event.ActionEvent evt) {
        //System.out.println("rdoGahanYesActionPerformed   ");
        if (rdoGahanYes.isSelected()) {
            ClientUtil.enableDisable(panCollatetalDetails, false);
            btnDocumentNo.setEnabled(true);
            txtDocumentNo.setEnabled(true);
            btnOwnerMemNo.setEnabled(false);
            panGahanYesNo.setEnabled(true);
            txtPledgeAmount.setEnabled(true);
            ClientUtil.enableDisable(panGahanYesNo, true);
            //Added By Suresh
            txtOwnerMemNo.setEnabled(true);
            btnOwnerMemNo.setEnabled(true);
            resetCollateralDetails();
        } else {
            btnDocumentNo.setEnabled(false);
            btnOwnerMemNo.setEnabled(true);
            ClientUtil.enableDisable(panCollatetalDetails, true);
        }

    }

    private void rdoGahanNoActionPerformed(java.awt.event.ActionEvent evt) {
        //System.out.println("rdoGahanNoActionPerformed   ");
        if (rdoGahanNo.isSelected()) {
//            if (tblCollateral.getRowCount() != 0) {
//                ClientUtil.displayAlert("Delete All Gahan Records From the Table then Select Gahan No Option");
//                rdoGahanYes.setSelected(true);
//                return;
//            }
            ClientUtil.enableDisable(panCollatetalDetails, true);
            btnDocumentNo.setEnabled(false);
            btnOwnerMemNo.setEnabled(true);
            ClientUtil.enableDisable(panGahanYesNo, true);
            resetCollateralDetails();
            //              panGahanYesNo.setEnabled(true);
        } else {
            btnDocumentNo.setEnabled(true);
            txtDocumentNo.setEnabled(true);
            btnOwnerMemNo.setEnabled(false);
            ClientUtil.enableDisable(panCollatetalDetails, false);
        }

    }

    private void btnDocumentNoActionPerformed(java.awt.event.ActionEvent evt) {
        //System.out.println("btnDocumentNoActionPerformed   ");
        popUp("DOCUMENT_NO");
    }

    private void txtDocumentNoFocusLost(java.awt.event.FocusEvent evt) {
        HashMap docMap = new HashMap();
        String docNo = CommonUtil.convertObjToStr(txtDocumentNo.getText());
        docMap.put("DOCUMENT_NUMBER", docNo);
        if (rdoGahanYes.isSelected()) {
            List lst = ClientUtil.executeQuery("getGahanDetailsforLoan", docMap);
            if (lst != null && lst.size() > 0) {
                viewType = "DOCUMENT_NO";
                HashMap resultDocument = (HashMap) lst.get(0);
                fillData(resultDocument);
            } else {
                ClientUtil.displayAlert("Invalid Document No");
                return;
            }
        } else if (rdoGahanNo.isSelected()) {
            List lst = ClientUtil.executeQuery("getGahanAvailableOrNot", docMap);
            if (lst != null && lst.size() > 0) {
                ClientUtil.displayAlert("Document Number already available in Gahan Details" + "\n" + "Enter different document no");
            }
            return;
        }
    }

    private void collateralJointAccountDisplay(String memNo) {
        observable.updateCollateralJointDetails(memNo);
        tblJointCollateral.setModel(observable.getTblJointCollateral());

    }

    private void btnCollateralSaveActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        try {
            HashMap securityLandMap = new HashMap();
            if (txtOwnerMemNo.getText().length() == 0) {
                ClientUtil.showAlertWindow("OwnerMember Number should not be empty");
            
            ////System.out.println("docGenIdValue==="+docGenIdValue);
//            if(!docGenIdValue.equals(""))
//            {
//               
//            securityLandMap.put("DOC_GEN_ID", docGenIdValue);
//            
//            List securityLandList = ClientUtil.executeQuery("getSelectLandSecurityPledgeAmount", securityLandMap);
//            List securityLandList1 = ClientUtil.executeQuery("getSelectGahanDocumentPledgeAmount", securityLandMap);
//            //System.out.println("securityLandList>>>" + securityLandList);
//            //System.out.println("securityLandList1>>>" + securityLandList1);
//            Double securityLandPledgeAmt = null;
//            Double gahanDocPledgeAmt = null;
//            if (securityLandList.size() <= 0 || ((HashMap) securityLandList.get(0)).get("PLEDGE_AMOUNT") == null) {
//                ClientUtil.showMessageWindow("Land Security pledge amount empty!!!!");
//                return;
//            }
//            if (securityLandList1.size() <= 0 || ((HashMap) securityLandList1.get(0)).get("PLEDGE_AMT") == null) {
//                ClientUtil.showMessageWindow("Gahan Document Details pledge amount empty!!!!");
//                return;
//            }
//            //System.out.println(securityLandList1.isEmpty() || !securityLandList1.contains("PLEDGE_AMT"));
//            HashMap resultSecurityLand = (HashMap) securityLandList.get(0);
//            HashMap resultGahanDoc = (HashMap) securityLandList1.get(0);
//            //System.out.println("resultSecurityLand>>>" + resultSecurityLand);
//            //System.out.println("resultGahanDoc>>>" + resultGahanDoc);
//            //    String acctStatus = resultSecurityLand.get("ACCT_STATUS").toString();
//            securityLandPledgeAmt = CommonUtil.convertObjToDouble(resultSecurityLand.get("PLEDGE_AMOUNT"));
//            gahanDocPledgeAmt = CommonUtil.convertObjToDouble(resultGahanDoc.get("PLEDGE_AMT"));
//            //System.out.println("securityLandPledgeAmt>>>" + securityLandPledgeAmt);
//            //System.out.println("gahanDocPledgeAmt>>>" + gahanDocPledgeAmt);
//            Double availBal = 0.0;
//            availBal = gahanDocPledgeAmt - securityLandPledgeAmt;
//            //System.out.println("availBal>>>" + availBal);
//            //System.out.println("CommonUtil.convertObjToDouble(txtPledgeAmount)>>>" + CommonUtil.convertObjToDouble(txtPledgeAmount.getText()));
//            //  a.pledge_amount,b.acct_status//txtPledgeAmount
//            if (CommonUtil.convertObjToDouble(txtLimit_SD.getText()) > availBal) {
//                ClientUtil.showAlertWindow("Pledge Amount exceeds the total gahan security value!!!!\nEntered amount Should be less than Available balance:" + availBal);
//            } }
                 }
            //added by jiby
            else if(txtSurveyNo.getText().length()==0)
            {
                ClientUtil.showAlertWindow("Survey Number should not be empty");
            }
            else {
                if(observable.getOldSurvyNo()==null ||observable.getOldSurvyNo().equals(""))
            {
                //System.out.println("getOldSurvyNo"); 
                observable.setOldSurvyNo(txtSurveyNo.getText().toString());
            }
                ///////
                updateCollateralFields();
                //added by jiby
                 rowCount=tblCollateral.getRowCount();
                //System.out.println("rowCount innnnnnnnn"+rowCount+"tblCollateral.getSelectedRow()"+tblCollateral.getSelectedRow()+"btnNew.isEnabled()"+btnNew.isEnabled());
               
                if(tblCollateral.getSelectedRow()>=0 && (btnCollateralNew.isEnabled()))
                {
                    //System.out.println("kiiiii");
                   rowCount= tblCollateral.getSelectedRow()+1;
                  
                }
                else
                {
                    //System.out.println("miiiii");
                if(rowCount==0)
                {
                    rowCount=1;
                }
                else
                {
                    rowCount=rowCount+1;
                }
                }
                //.out.println("rowCount====="+rowCount);
                observable.setRowCoun(rowCount);
                ///
                observable.addCollateralTable(updateTab, updateMode);
                tblCollateral.setModel(observable.getTblCollateralDetails());
                observable.resetCollateralDetails();
                resetCollateralDetails();
                ClientUtil.enableDisable(panCollatetalDetails, false);
                btnSecurityCollateral(false);
                btnCollateralNew.setEnabled(true);
                btnOwnerMemNo.setEnabled(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void btnCollateralNewActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        updateMode = false;
        observable.setCollateralTypeData(true);
        btnSecurityCollateral(false);
        btnCollateralSave.setEnabled(true);
        //        ClientUtil.enableDisable(panCollatetalDetails,true);
        if (rdoGahanYes.isSelected()) {
            rdoGahanYesActionPerformed(null);
        }
        if(rdoGahanNo.isSelected()){
            rdoGahanNoActionPerformed(null);
            btnOwnerMemNo.setEnabled(true);
        }
        ClientUtil.enableDisable(panGahanYesNo, true);
        txtOwnerMemberNname.setEnabled(false);
        //added by jiby
         btnOwnerMemNo.setEnabled(true);
        //System.out.println("updateMode in collateral new"+updateMode);
        observable.setOldSurvyNo("");
        updateTab=-1;
    }
   private void btnVehicleNewActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //System.out.println("Vehiclenew");
        updateMode = false;
        observable.resetVehicleTypeDetails();
        resetVehicleTypeDetails();
        observable.setVehicleTypeData(true);
        btnSecurityVehichle(false);
        btnVehicleSave.setEnabled(true);
        ClientUtil.enableDisable(panVehicleDetails, true);
        btnVehicleMemNo.setEnabled(true);
        txtVehicleMemberName.setEnabled(false);
        txtVehicleMemType.setEnabled(false);
        rdoGahanYesActionPerformed(null);
    }

    private void btnVehicleSaveActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        try {
            if (txtVehicleMemberNum.getText().length() == 0) {
                ClientUtil.showAlertWindow("Member number should not be empty");
            } else {
                int no = 0;
                int surNo = 0;
                int maxLoanNo =0;
                int loanNo=0;
                boolean flag = false;
                HashMap memMap = new HashMap();
                memMap.put("MEMBER_NO",txtVehicleMemberNum.getText());
                List suretyList = ClientUtil.executeQuery("getMaxSurety", memMap);
                if (suretyList != null && suretyList.size() > 0) {
                    HashMap surMap = (HashMap) suretyList.get(0);
                    surNo = CommonUtil.convertObjToInt(surMap.get("MAXIMUM_SURETY"));
                    if (surMap.containsKey("MAXIMUM_LOAN_PER_SURETY") && surMap.get("MAXIMUM_LOAN_PER_SURETY") != null) {
                        maxLoanNo = CommonUtil.convertObjToInt(surMap.get("MAXIMUM_LOAN_PER_SURETY"));
                    }
                    List countList = ClientUtil.executeQuery("getnoOfSecurityDetailsofMember", memMap);
                    if (countList != null && countList.size() > 0) {
                        HashMap memCountMap = (HashMap) countList.get(0);
                        no = CommonUtil.convertObjToInt(memCountMap.get("TOT_NOS"));
                    }
                    if (surNo > 0) {
                        if (no >= surNo) {
                            List custList = ClientUtil.executeQuery("getSecurityDetailsofMember", memMap);
                            for (int i = 0; i < custList.size(); i++) {
                                HashMap custMap = (HashMap) custList.get(i);
                                if (custMap.get("CUST_ID").toString().equals(txtCustID.getText().trim())) {
                                    flag = true;
                                    break;
                                }
                            }
                            if (!flag) {
                                ClientUtil.showMessageWindow("This Member already Have Maximum no of Surety!!!!");
                                return;
                            }

                        }
                    }

                    List lonCountList = ClientUtil.executeQuery("getMaxNumberOfLoaneeOfMember", memMap);
                    if (lonCountList != null && lonCountList.size() > 0) {
                        HashMap loanCountMap = (HashMap) lonCountList.get(0);
                        loanNo = CommonUtil.convertObjToInt(loanCountMap.get("TOT_NO_LOAN"));
                        if (maxLoanNo > 0 && loanNo > 0 && loanNo >= maxLoanNo) {
                            ClientUtil.showMessageWindow("This Member already Stand  surety For Maximum no of Loan !!!!");
                            return;
                        }
                    }
                }
                updateVehicleTypeFields();
                observable.addVehicleTypeTable(updateTab, updateMode);
                tblVehicleType.setModel(observable.getTblVehicleTypeDetails());
                observable.resetVehicleTypeDetails();
                resetVehicleTypeDetails();
                ClientUtil.enableDisable(panVehicleDetails, false);
                btnSecurityVehichle(false);
                btnVehicleNew.setEnabled(true);
                btnVehicleMemNo.setEnabled(false);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void btnVehicleDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String s = CommonUtil.convertObjToStr(tblVehicleType.getValueAt(tblVehicleType.getSelectedRow(), 0));
        observable.deleteVehicleTableData(s, tblVehicleType.getSelectedRow());
        observable.resetVehicleTypeDetails();
        resetVehicleTypeDetails();
        ClientUtil.enableDisable(panVehicleDetails, false);
        btnSecurityVehichle(false);
        btnVehicleNew.setEnabled(true);
    }
     public void populateVehicleTypeFields() {
       txtVehicleMemberNum.setText(observable.getTxtVehicleMemNo());
        txtVehicleMemberName.setText(observable.getTxtVehicleMembName());
        txtVehicleMemType.setText(observable.getTxtVehicleMemType());
        txtVehicleContactNum.setText(observable.getTxtVehicleContactNum());
        txtVehicleNo.setText(observable.getTxtVehicleNo());
        txtVehicleRcBookNo.setText(observable.getTxtVehicleRcBookNo());
        txtVehicleType.setText(observable.getTxtVehicleType());
        txtVehicleDate.setDateValue(observable.getTxtVehicleDate());
        txtVehicleDetals.setText(observable.getTxtVehicleDetails());
        txtVehicleMemSal.setText(CommonUtil.convertObjToStr(observable.getTxtVehicleMemSal()));
        txtVehicleNetWorth.setText(CommonUtil.convertObjToStr(observable.getTxtVehicleNetworth()));
    }
    public void updateVehicleTypeFields() {
        observable.setTxtVehicleMemNo(txtVehicleMemberNum.getText());
        observable.setTxtVehicleMembName(txtVehicleMemberName.getText());
        observable.setTxtVehicleMemType(txtVehicleMemType.getText());
        observable.setTxtVehicleContactNum(txtVehicleContactNum.getText());
        observable.setTxtVehicleDetails(txtVehicleDetals.getText());
        observable.setTxtVehicleDate(txtVehicleDate.getDateValue());
        observable.setTxtVehicleType(txtVehicleType.getText());
        observable.setTxtVehicleRcBookNo(txtVehicleRcBookNo.getText());
        observable.setTxtVehicleNo(txtVehicleNo.getText());
        observable.setTxtVehicleMemSal(CommonUtil.convertObjToDouble(txtVehicleMemSal.getText()));
        observable.setTxtVehicleNetworth(CommonUtil.convertObjToDouble(txtVehicleNetWorth.getText()));
    }
 private void btnSecurityVehichle(boolean flag) {
        btnMemberNew.setEnabled(flag);
        btnMemberSave.setEnabled(flag);
        btnMemberDelete.setEnabled(flag);
    }
 private void resetVehicleTypeDetails() {
        txtVehicleMemberNum.setText("");
        txtVehicleMemberName.setText("");
        txtVehicleMemType.setText("");
        txtVehicleContactNum.setText("");
        txtVehicleNo.setText("");
        lblVehicleMemRetireDate.setText("");
        txtVehicleType.setText("");
        txtVehicleRcBookNo.setText("");
        txtVehicleDate.setDateValue("");
        txtVehicleDetals.setText("");
        txtVehicleMemSal.setText("");
        txtVehicleNetWorth.setText("");  
    }
    private void tblVehicleTypeMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        updateVehicleTypeFields();
        updateMode = true;
        updateTab = tblVehicleType.getSelectedRow();
        observable.setVehicleTypeData(false);
        String st = CommonUtil.convertObjToStr(tblVehicleType.getValueAt(tblVehicleType.getSelectedRow(), 0));
        observable.populateVehicleTypeDetails(st);
        populateVehicleTypeFields();
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT
                || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW || observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE
                || observable.getActionType() == ClientConstants.ACTIONTYPE_EXCEPTION) {
            btnSecurityVehichle(false);
            ClientUtil.enableDisable(panVehicleDetails, false);
        } else {
            btnSecurityVehichle(true);
            ClientUtil.enableDisable(panVehicleDetails, true);
            btnVehicleNew.setEnabled(false);
        }
        txtVehicleMemberName.setEnabled(false);
        txtVehicleMemType.setEnabled(false);
        txtVehicleMemberNum.setEnabled(false);
    }

    private void tblMemberTypeMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        updateMemberTypeFields();
        updateMode = true;
        updateTab = tblMemberType.getSelectedRow();
        observable.setMemberTypeData(false);
        String st = CommonUtil.convertObjToStr(tblMemberType.getValueAt(tblMemberType.getSelectedRow(), 0));
        observable.populateMemberTypeDetails(st);
        populateMemberTypeFields();
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT
                || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW || observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE
                || observable.getActionType() == ClientConstants.ACTIONTYPE_EXCEPTION) {
            btnSecurityMember(false);
            ClientUtil.enableDisable(panMemberDetails, false);
        } else {
            btnSecurityMember(true);
            ClientUtil.enableDisable(panMemberDetails, true);
            btnMemberNew.setEnabled(false);
        }
        txtMemName.setEnabled(false);
        txtMemType.setEnabled(false);
        txtMemNo.setEnabled(false);
    }

    private double checkAvailableSecurity(String docGenId) {
        HashMap map = new HashMap();
        double availableSecurity = 0;
        if (docGenId != null) {
            map.put("DOC_GEN_ID", docGenId);
            List lst = ClientUtil.executeQuery("getGahanAvailableSecurityforLoan", map);
            if (lst != null && lst.size() > 0) {
                map = (HashMap) lst.get(0);
                availableSecurity = CommonUtil.convertObjToDouble(map.get("AVAILABLE_SECURITY_VALUE")).doubleValue();
            }
        }
        return availableSecurity;
    }
    
     private double checkAvailableGoldStockSecurity(String goldSecurityId) {
        HashMap map = new HashMap();
        double availableSecurity = 0;
        if (goldSecurityId != null) {
            map.put("GOLD_SECURITY_ID", goldSecurityId);
            List lst = ClientUtil.executeQuery("getGoldStockAvailableSecurityforLoan", map);
            if (lst != null && lst.size() > 0) {
                map = (HashMap) lst.get(0);
                availableSecurity = CommonUtil.convertObjToDouble(map.get("AVAILABLE_SECURITY_VALUE")).doubleValue();
            }
        }
        return availableSecurity;
    }
     
     public double getGoldStockPldgeAmountForLoan(String goldStockId) {
        Double gahanForLn = 0.0;
        HashMap mapDocGenId = new HashMap();
        mapDocGenId.put("GOLD_SECURITY_ID", goldStockId);
        List lstGahanForLn = ClientUtil.executeQuery("getSelectGoldStockExistsForLoan", mapDocGenId);
        if (!lstGahanForLn.isEmpty() && !lstGahanForLn.equals(null)) {
            mapDocGenId = new HashMap();
            mapDocGenId = (HashMap) lstGahanForLn.get(0);
            gahanForLn = CommonUtil.convertObjToDouble(mapDocGenId.get("PLEDGE_AMOUNT"));
        }
        return gahanForLn;
    }
     
     public double getGoldStockPldgeAmtForMds(String goldSecurityId) {
        Double gahanForMDS = 0.0;
        HashMap mapgoldSecurityId = new HashMap();
        mapgoldSecurityId.put("GOLD_SECURITY_ID", goldSecurityId);
        List lstGoldSecurityForMds = ClientUtil.executeQuery("getSelectGoldStockExistsForMds", mapgoldSecurityId);
        if (!lstGoldSecurityForMds.isEmpty() && !lstGoldSecurityForMds.equals(null)) {
            mapgoldSecurityId = new HashMap();
            mapgoldSecurityId = (HashMap) lstGoldSecurityForMds.get(0);
            gahanForMDS = CommonUtil.convertObjToDouble(mapgoldSecurityId.get("AMOUNT"));
        }
        return gahanForMDS;
    }
     
    private double getGoldStockAvailableSecurity(double maxsecurityAmt) {
        double availableSecuirty = 0;
        double sumGahanTableValue = 0;
        double loanAmt = 0;        
        sumGahanTableValue += CommonUtil.convertObjToDouble(txtValueOfGold.getText());          
        loanAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
        availableSecuirty = loanAmt - sumGahanTableValue;
        return maxsecurityAmt;
    } 

    public void populateMemberTypeFields() {
        txtMemNo.setText(observable.getTxtMemNo());
        txtMemName.setText(observable.getTxtMemName());
        txtMemType.setText(observable.getTxtMemType());
        txtContactNum.setText(observable.getTxtContactNum());
        txtMemNetworth.setText(observable.getTxtMemNetworth());
        txtMemPriority.setText(observable.getTxtMemPriority());
    }

    public void populateCollateralFields() {
        if (observable.isRdoGahanYes()) {
            rdoGahanYes.setSelected(observable.isRdoGahanYes());
        } else {
            rdoGahanNo.setSelected(observable.isRdoGahanNo());
        }
        txtOwnerMemNo.setText(observable.getTxtOwnerMemNo());
        txtOwnerMemberNname.setText(observable.getTxtOwnerMemberNname());
        txtDocumentNo.setText(observable.getTxtDocumentNo());
        cboDocumentType.setSelectedItem(observable.getCboDocumentType());
        tdtDocumentDate.setDateValue(observable.getTdtDocumentDate());
        txtRegisteredOffice.setText(observable.getTxtRegisteredOffice());
        cboPledge.setSelectedItem(CommonUtil.convertObjToStr(observable.getCboPledge()));
        tdtPledgeDate.setDateValue(observable.getTdtPledgeDate());
        txtPledgeNo.setText(observable.getTxtPledgeNo());
        txtPledgeAmount.setText(observable.getTxtPledgeAmount());
        txtVillage.setText(observable.getTxtVillage());
        txtSurveyNo.setText(observable.getTxtSurveyNo());
        txtTotalArea.setText(observable.getTxtTotalArea());
        cboNature.setSelectedItem(CommonUtil.convertObjToStr(observable.getCboNature()));
        cboRight.setSelectedItem(CommonUtil.convertObjToStr(observable.getCboRight()));
        txtAreaParticular.setText(observable.getTxtAreaParticular());
    }

    private void btnMemberDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String s = CommonUtil.convertObjToStr(tblMemberType.getValueAt(tblMemberType.getSelectedRow(), 0));
        observable.deleteMemberTableData(s, tblMemberType.getSelectedRow());
        observable.resetMemberTypeDetails();
        resetMemberTypeDetails();
        ClientUtil.enableDisable(panMemberDetails, false);
        btnSecurityMember(false);
        btnMemberNew.setEnabled(true);
    }

    private void btnMemberSaveActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        try {
            if (txtMemNo.getText().length() == 0) {
                ClientUtil.showAlertWindow("Member number should not be empty");
            } else {
                int maxLoanNo =0;
                double maxSuretyAmount = 0.0;
                int loanNo=0;
                HashMap memMap = new HashMap();
                memMap.put("MEMBER_NO", txtMemNo.getText());
                List suretyList = ClientUtil.executeQuery("getMaxSurety", memMap);
                if (suretyList != null && suretyList.size() > 0) {
                    HashMap surMap = (HashMap) suretyList.get(0);
                    if (surMap.containsKey("MAXIMUM_LOAN_PER_SURETY") && surMap.get("MAXIMUM_LOAN_PER_SURETY") != null) {
                        maxLoanNo = CommonUtil.convertObjToInt(surMap.get("MAXIMUM_LOAN_PER_SURETY"));
                    }
                    //Added by nithya for KD-2966
                    if (surMap.containsKey("MAXIMUM_SURETY_AMT") && surMap.get("MAXIMUM_SURETY_AMT") != null) {
                        maxSuretyAmount = CommonUtil.convertObjToInt(surMap.get("MAXIMUM_SURETY_AMT"));
                    }
                    List lonCountList = ClientUtil.executeQuery("getMaxNumberOfLoaneeOfMember", memMap);
                    if (lonCountList != null && lonCountList.size() > 0) {
                        HashMap loanCountMap = (HashMap) lonCountList.get(0);
                        loanNo = CommonUtil.convertObjToInt(loanCountMap.get("TOT_NO_LOAN"));
                        if (maxLoanNo > 0 && loanNo > 0 && loanNo >= maxLoanNo) {
                            ClientUtil.showMessageWindow("This Member already Stand  surety For Maximum no of Loan !!!!");
                            return;
                        }
                    }
                    
                    List loanSuertyAmtLst = ClientUtil.executeQuery("getTotAmtSetAsSuretyForMember", memMap);
                    if(loanSuertyAmtLst != null && loanSuertyAmtLst.size() > 0){
                        HashMap suretyAmtMap = (HashMap)loanSuertyAmtLst.get(0);
                        double totSuretyAmt = CommonUtil.convertObjToDouble(suretyAmtMap.get("TOT_SURETY_AMT"));
                        double networthGiven = CommonUtil.convertObjToDouble(txtMemNetworth.getText());
                        if(maxSuretyAmount > 0 && (totSuretyAmt + networthGiven) > maxSuretyAmount){
                           ClientUtil.showMessageWindow("The surety amount exceeds maximum surety amount Rs."+maxSuretyAmount+"/-for this member !!!"
                                   + "\nThis Member Stand Surety of Amt Rs. " + totSuretyAmt + "/-");
                           txtMemNetworth.setText("");
                           return;
                        }
                    }
                    
                }
                
                updateMemberTypeFields();
                observable.addMemberTypeTable(updateTab, updateMode);
                tblMemberType.setModel(observable.getTblMemberTypeDetails());
                observable.resetMemberTypeDetails();
                resetMemberTypeDetails();
                ClientUtil.enableDisable(panMemberDetails, false);
                btnSecurityMember(false);
                btnMemberNew.setEnabled(true);
                btnMemNo.setEnabled(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void updateMemberTypeFields() {
        observable.setTxtMemNo(txtMemNo.getText());
        observable.setTxtMemName(txtMemName.getText());
        observable.setTxtMemType(txtMemType.getText());
        observable.setTxtContactNum(txtContactNum.getText());
        observable.setTxtMemNetworth(txtMemNetworth.getText());
        observable.setTxtMemPriority(txtMemPriority.getText());
    }

    public void updateCollateralFields() {
        observable.setRdoGahanYes(rdoGahanYes.isSelected());
        observable.setRdoGahanNo(rdoGahanNo.isSelected());
        observable.setTxtOwnerMemNo(txtOwnerMemNo.getText());
        observable.setTxtOwnerMemberNname(txtOwnerMemberNname.getText());
        observable.setTxtDocumentNo(txtDocumentNo.getText());
        //        observable.setTxtDocumentType(txtDocumentType.getText());
        observable.setCboDocumentType(CommonUtil.convertObjToStr(cboDocumentType.getSelectedItem()));
        observable.setTdtDocumentDate(tdtDocumentDate.getDateValue());
        observable.setTxtRegisteredOffice(txtRegisteredOffice.getText());
        observable.setCboPledge(CommonUtil.convertObjToStr(cboPledge.getSelectedItem()));
        observable.setTxtPledgeType(txtPledgeType.getText());
        observable.setTdtPledgeDate(tdtPledgeDate.getDateValue());
        observable.setTxtPledgeNo(txtPledgeNo.getText());
        observable.setTxtPledgeAmount(txtPledgeAmount.getText());
        observable.setTxtVillage(txtVillage.getText());
        observable.setTxtSurveyNo(txtSurveyNo.getText());
        observable.setTxtTotalArea(txtTotalArea.getText());
        observable.setCboNature(CommonUtil.convertObjToStr(cboNature.getSelectedItem()));
        observable.setCboRight(CommonUtil.convertObjToStr(cboRight.getSelectedItem()));
        //        observable.setCboDocumentType(CommonUtil.convertObjToStr(cboDocumentType.getSelectedItem()));
        observable.setTxtAreaParticular(txtAreaParticular.getText());
    }

    private void resetMemberTypeDetails() {
        txtMemNo.setText("");
        txtMemName.setText("");
        txtMemType.setText("");
        txtContactNum.setText("");
        txtMemNetworth.setText("");
        txtMemPriority.setText("");
    }

    private void resetCollateralDetails() {
        txtOwnerMemNo.setText("");
        txtOwnerMemberNname.setText("");
        txtDocumentNo.setText("");
        //        txtDocumentType.setText("");
        cboDocumentType.setSelectedItem("");
        tdtDocumentDate.setDateValue("");
        txtRegisteredOffice.setText("");
        cboPledge.setSelectedItem("");
        tdtPledgeDate.setDateValue("");
        txtPledgeNo.setText("");
        txtPledgeAmount.setText("");
        txtVillage.setText("");
        txtSurveyNo.setText("");
        txtTotalArea.setText("");
        cboNature.setSelectedItem("");
        cboRight.setSelectedItem("");
        txtAreaParticular.setText("");
    }

    private void btnMemberNewActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        updateMode = false;
        observable.setMemberTypeData(true);
        btnSecurityMember(false);
        btnMemberSave.setEnabled(true);
        ClientUtil.enableDisable(panMemberDetails, true);
        btnMemNo.setEnabled(true);
        txtMemName.setEnabled(false);
        txtMemType.setEnabled(false);
        rdoGahanYesActionPerformed(null);
    }
 private void btnVehicleMemNoActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //        popUp("SUB_MEMBER_NO");
        viewType = "SUB_MEMBER_NO_VEHICLE";
        new CheckCustomerIdUI(this);

    }
    private void txtMemNoFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        if (txtMemNo.getText().length() > 0) {
             boolean isClosedShare = checkClosedShare(txtMemNo.getText());
            if(isClosedShare){
                ClientUtil.showAlertWindow("Share Closed");
                resetMemberTypeDetails();
                observable.setTxtMemNo("");
                return;
            }
            HashMap listMap = new HashMap();
            listMap.put("MEMBERSHIP_NO", txtMemNo.getText());
            java.util.List lst = ClientUtil.executeQuery("getMemeberShipDetails", listMap);
            if (lst != null && lst.size() > 0) {
                listMap = (HashMap) lst.get(0);
                viewType = "SUB_MEMBER_NO_FOCUS_LOST";
                fillData(listMap);
            } else {
                ClientUtil.showAlertWindow("Invalid Member No");
                resetMemberTypeDetails();
                observable.setTxtMemNo("");
            }
        }
    }
    
    // Added by nithya on 23-02-2019 for KD 396 - Issue in share -while taking as security for loan
    private boolean checkClosedShare(String shareAcctNo){
        boolean isClosedShare = false;
        HashMap statusMap = new HashMap();
        statusMap.put("MEMBERSHIP_NO", shareAcctNo);
        List statusLst = ClientUtil.executeQuery("getShareAcctClosedStatus", statusMap);
        if(statusLst != null && statusLst.size() > 0){
          statusMap = (HashMap)statusLst.get(0);
          if(statusMap.containsKey("ACCT_STATUS") && statusMap.get("ACCT_STATUS") != null){
              String shareStatus = "";
              if(CommonUtil.convertObjToStr(statusMap.get("ACCT_STATUS")).equalsIgnoreCase("CLOSED")){
                  isClosedShare = true;
              }
          }
        }
        return isClosedShare;
    }

    private void btnMemNoActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
//        popUp("SUB_MEMBER_NO");
        viewType = "SUB_MEMBER_NO";
        new CheckCustomerIdUI(this);

    }

    //  default visible false
    private void initRuntimeComponents2() {
        // Variables declaration - do not modify
        panRunTimeGuarantor = new com.see.truetransact.uicomponent.CPanel();
        lblPLIName = new com.see.truetransact.uicomponent.CLabel();
        cboPLIName = new com.see.truetransact.uicomponent.CComboBox();
        lblPLIBranch = new com.see.truetransact.uicomponent.CLabel();
        cboPLIBranch = new com.see.truetransact.uicomponent.CComboBox();
        lblGuaratNo = new com.see.truetransact.uicomponent.CLabel();
        txtGuaratNo = new com.see.truetransact.uicomponent.CTextField();
        lblGuaranDate = new com.see.truetransact.uicomponent.CLabel();
        tdtGuaranDate = new com.see.truetransact.uicomponent.CDateField();
        lblGuaranPeriodFrom = new com.see.truetransact.uicomponent.CLabel();
        tdtGuaranPeriodFrom = new com.see.truetransact.uicomponent.CDateField();

        lblGuaranPeriodTo = new com.see.truetransact.uicomponent.CLabel();
        tdtGuaranPeriodTo = new com.see.truetransact.uicomponent.CDateField();
        lblGuaranCommision = new com.see.truetransact.uicomponent.CLabel();
        txtGuaranCommision = new com.see.truetransact.uicomponent.CTextField();
        lblGuaranStatus = new com.see.truetransact.uicomponent.CLabel();
        cboGuaranStatus = new com.see.truetransact.uicomponent.CComboBox();
        lblGuaranAccNo = new com.see.truetransact.uicomponent.CLabel();
        lblStatusDate = new com.see.truetransact.uicomponent.CLabel();
        tdtStatusDate = new com.see.truetransact.uicomponent.CDateField();
        lblGuarnRemarks = new com.see.truetransact.uicomponent.CLabel();
        txtGuarnRemarks = new com.see.truetransact.uicomponent.CTextField();
        panRunTimeGuarantor.setLayout(new java.awt.GridBagLayout());
        panRunTimeGuarantor.setMinimumSize(new java.awt.Dimension(270, 235));
        panRunTimeGuarantor.setPreferredSize(new java.awt.Dimension(270, 235));
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();

        lblPLIName.setText("PLI Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(lblPLIName, gridBagConstraints);

        cboPLIName.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(cboPLIName, gridBagConstraints);

        lblPLIBranch.setText("PLI Branch");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(lblPLIBranch, gridBagConstraints);

        cboPLIBranch.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(cboPLIBranch, gridBagConstraints);

        lblGuaratNo.setText("lbl GuaratNo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(lblGuaratNo, gridBagConstraints);

        //        txtGuaratNo.setText("Guarat No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(txtGuaratNo, gridBagConstraints);

        lblGuaranDate.setText("lbl GuaratDate");
        lblGuaranDate.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(lblGuaranDate, gridBagConstraints);

        //        tdtGuaranDate .setText("Guarantor Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(tdtGuaranDate, gridBagConstraints);

        lblGuaranPeriodFrom.setText("Guaran Period From");
        lblGuaranPeriodFrom.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(lblGuaranPeriodFrom, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(tdtGuaranPeriodFrom, gridBagConstraints);

        cboPLIName.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Select---"}));
        cboPLIName.setMinimumSize(new java.awt.Dimension(100, 21));
        cboPLIName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboPLINameActionPerformed(evt);
            }
        });

        cboPLIBranch.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"---Select---"}));
        cboPLIBranch.setMinimumSize(new java.awt.Dimension(100, 21));
        cboPLIBranch.setPopupWidth(200);
        cboPLIBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboPLIBranchActionPerformed(evt);
            }
        });

        lblGuaranPeriodTo.setText("Guaran Period To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(lblGuaranPeriodTo, gridBagConstraints);

        tdtGuaranPeriodTo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantor.add(tdtGuaranPeriodTo, gridBagConstraints);


        sptGuarantorDetail_Vert.setOrientation(javax.swing.SwingConstants.VERTICAL);
        sptGuarantorDetail_Vert.setMinimumSize(new java.awt.Dimension(3, 235));
        sptGuarantorDetail_Vert.setPreferredSize(new java.awt.Dimension(3, 235));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantorDetail_Detail.add(sptGuarantorDetail_Vert, gridBagConstraints);


        /**
         * *******88888888888panRunTimeGuarantorAddr
         */
        panRunTimeGuarantorAddr = new com.see.truetransact.uicomponent.CPanel();
        panRunTimeGuarantorAddr.setLayout(new java.awt.GridBagLayout());
        panRunTimeGuarantorAddr.setMinimumSize(new java.awt.Dimension(224, 207));
        panRunTimeGuarantorAddr.setPreferredSize(new java.awt.Dimension(224, 207));

        lblGuaranCommision.setText("Guaran Commision");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantorAddr.add(lblGuaranCommision, gridBagConstraints);

        txtGuaranCommision.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantorAddr.add(txtGuaranCommision, gridBagConstraints);


        lblGuaranStatus.setText("Guaran Status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantorAddr.add(lblGuaranStatus, gridBagConstraints);

        cboGuaranStatus.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantorAddr.add(cboGuaranStatus, gridBagConstraints);

        lblStatusDate.setText("Guaran Status Dt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantorAddr.add(lblStatusDate, gridBagConstraints);

        tdtStatusDate.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantorAddr.add(tdtStatusDate, gridBagConstraints);

        lblGuarnRemarks.setText("Remarks");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantorAddr.add(lblGuarnRemarks, gridBagConstraints);

        txtGuarnRemarks.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panRunTimeGuarantorAddr.add(txtGuarnRemarks, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantorDetail_Detail.add(panRunTimeGuarantor, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantorDetail_Detail.add(panRunTimeGuarantorAddr, gridBagConstraints);
        panRunTimeGuarantor.setVisible(false);
        panRunTimeGuarantorAddr.setVisible(false);
    }
    //
    private void btnCustomerID_GDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomerID_GDActionPerformed
        // Add your handling code here:
        popUp("Guarant_Cust_Id");
    }//GEN-LAST:event_btnCustomerID_GDActionPerformed

    private void cboProdTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProdTypeActionPerformed
        // TODO add your handling code here:
        cboProdTypeActionPerformed();
    }//GEN-LAST:event_cboProdTypeActionPerformed
    private void cboPLINameActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        cboPLINameActionPerformed();
    }

    public void btnDepNoActionPerformed(java.awt.event.ActionEvent evt) {
        popUp("DEPOSIT_ACC_NO");
    }

    private void cboPLINameActionPerformed() {
        String pliName = CommonUtil.convertObjToStr(((ComboBoxModel) cboPLIName.getModel()).getKeyForSelected());
        if (pliName.length() > 0) {
            observableGuarantor.getPliBranch(pliName);
            cboPLIBranch.setModel(observableGuarantor.getCbmPLIBranch());
        }
    }

    private void cboPLIBranchActionPerformed(java.awt.event.ActionEvent evt) {
    }
    private void cboProdIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProdIdActionPerformed
        // TODO add your handling code here:
        cboProdIdActionPerformed();
    }//GEN-LAST:event_cboProdIdActionPerformed

    private void btnAccNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccNoActionPerformed
        // TODO add your handling code here:
        btnAccNoActionPerformed();
    }//GEN-LAST:event_btnAccNoActionPerformed

    private void tdtAsOn_GDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtAsOn_GDFocusLost
        // Add your handling code here:
        tdtAsOn_GDFocusLost();
    }//GEN-LAST:event_tdtAsOn_GDFocusLost

    private void allEnableDisable() {
//        setCompanyDetailsEnableDisable(false);
        setBorrowerDetailsEnableDisable(false);
        txtPeriodDifference_Days.setEnabled(false);
        txtPeriodDifference_Months.setEnabled(false);
        txtPeriodDifference_Years.setEnabled(false);
        setButtonEnableDisable();
        txtGuarantorNo.setEditable(false);
        setAllBorrowerBtnsEnableDisable(false);
        setbtnCustEnableDisable(false);
        setAllTablesEnableDisable(true);
        setAllTableBtnsEnableDisable(false); // To disable the Tool buttons Authorized Signatory
        setAllSanctionFacilityEnableDisable(false);
        setAllSanctionMainEnableDisable(false);
        setAllFacilityDetailsEnableDisable(false);
        setAllRepaymentDetailsEnableDisable(false);
        btnEMI_Calculate.setEnabled(false);
        setAllRepaymentBtnsEnableDisable(false);
        setAllGuarantorDetailsEnableDisable(false);
        setAllInstitGuarantorDetailsEnableDisable(false);
        setAllGuarantorBtnsEnableDisable(false);
        setAllDocumentDetailsEnableDisable(false);
        setDocumentToolBtnEnableDisable(false);
        setAllInterestDetailsEnableDisable(false);
        setAllInterestBtnsEnableDisable(false);
        setAllSettlmentEnableDisable(false);
        setAllClassificationDetailsEnableDisable(false);
        disableFields();
//        btnSave2_SD.setVisible(false);
//        btnNew1.setVisible(false);
//        btnDelete1.setVisible(false);
//        btnFacilitySave.setVisible(false);
    }

    private void disableFields() {
        txtPurposeDesc.setVisible(false);
        lblPurposeDesc.setVisible(false);
        lblSettlementModeAI.setVisible(false);
        cboSettlementModeAI.setVisible(false);
        chkNPAChrgAD.setVisible(false);
        lblNPAChrgAD.setVisible(false);
        lblNPA.setVisible(false);
        tdtNPAChrgAD.setVisible(false);
        txtCustID.setEditable(true);
//        btnFacilityDelete.setVisible(false);
        disableLastIntApplDate();
    }

    private void setObservable() {
        observable = TermLoanOB.getInstance();
        observable.addObserver(this);
        observable.setLoanType(loanType);
        observableBorrow = TermLoanBorrowerOB.getInstance();
        observableBorrow.addObserver(this);
        observableComp = TermLoanCompanyOB.getInstance();
        observableComp.addObserver(this);
        observableSecurity = TermLoanSecurityOB.getInstance();
        observableSecurity.addObserver(this);
        observableRepay = TermLoanRepaymentOB.getInstance();
        observableRepay.addObserver(this);
        observableInt = TermLoanInterestOB.getInstance();
        observableInt.addObserver(this);
        //        if (loanType.equals("OTHERS")) {
        observableGuarantor = TermLoanGuarantorOB.getInstance();
        observableGuarantor.addObserver(this);
        observableOtherDetails = TermLoanOtherDetailsOB.getInstance();
        observableOtherDetails.addObserver(this);
        //        }
        observableDocument = TermLoanDocumentDetailsOB.getInstance();
        observableDocument.addObserver(this);
        observableClassi = TermLoanClassificationOB.getInstance();
        observableClassi.addObserver(this);

        observableAdditionalSanctionOB = TermLoanAdditionalSanctionOB.getInstance();
        observableAdditionalSanctionOB.addObserver(this);

    }

    public void setMandatoryHashMap() {
        mandatoryMap = new HashMap();
        mandatoryMap.put("txtAcct_Name", new Boolean(true));
        mandatoryMap.put("txtRepayScheduleMode", new Boolean(true));
        mandatoryMap.put("tdtExecuteDate_DOC", new Boolean(true));
        mandatoryMap.put("tdtExpiryDate_DOC", new Boolean(true));
        mandatoryMap.put("tdtDOB_GD", new Boolean(true));
        mandatoryMap.put("tdtDisbursement_Dt", new Boolean(true));
        mandatoryMap.put("cboProdId", new Boolean(true));
        mandatoryMap.put("cboProdType", new Boolean(true));
        mandatoryMap.put("cboIntGetFrom", new Boolean(true));
        mandatoryMap.put("txtPoANo", new Boolean(true));
        mandatoryMap.put("cboRepayFreq_Repayment", new Boolean(true));
        mandatoryMap.put("cboAddrType_PoA", new Boolean(true));
        mandatoryMap.put("txtCustID", new Boolean(true));
        mandatoryMap.put("cboAccStatus", new Boolean(true));
        mandatoryMap.put("cboConstitution", new Boolean(true));
        mandatoryMap.put("cboCategory", new Boolean(true));
        mandatoryMap.put("txtReferences", new Boolean(true));
        mandatoryMap.put("txtCompanyRegisNo", new Boolean(true));
        mandatoryMap.put("tdtDateEstablishment", new Boolean(true));
        mandatoryMap.put("tdtDealingWithBankSince", new Boolean(true));
        mandatoryMap.put("txtRiskRating", new Boolean(true));
        mandatoryMap.put("cboNatureBusiness", new Boolean(true));
        mandatoryMap.put("txtRemarks__CompDetail", new Boolean(true));
        mandatoryMap.put("txtNetWorth", new Boolean(true));
        mandatoryMap.put("tdtAsOn", new Boolean(true));
        mandatoryMap.put("tdtCreditFacilityAvailSince", new Boolean(true));
        mandatoryMap.put("txtChiefExecutiveName", new Boolean(true));
        mandatoryMap.put("cboAddressType", new Boolean(true));
        mandatoryMap.put("txtStreet_CompDetail", new Boolean(true));
        mandatoryMap.put("txtArea_CompDetail", new Boolean(true));
        mandatoryMap.put("cboCity_CompDetail", new Boolean(true));
        mandatoryMap.put("cboState_CompDetail", new Boolean(true));
        mandatoryMap.put("cboCountry_CompDetail", new Boolean(true));
        mandatoryMap.put("txtPin_CompDetail", new Boolean(true));
        mandatoryMap.put("txtPhone_CompDetail", new Boolean(true));
        mandatoryMap.put("txtCustomerID", new Boolean(true));
        mandatoryMap.put("txtLimits", new Boolean(true));
        mandatoryMap.put("txtSanctionNo", new Boolean(true));
        mandatoryMap.put("txtSanctionSlNo", new Boolean(true));
        mandatoryMap.put("tdtSanctionDate", new Boolean(true));
        mandatoryMap.put("cboSanctioningAuthority", new Boolean(true));
        //mandatoryMap.put("txtSanctionRemarks", new Boolean(true));
        mandatoryMap.put("cboModeSanction", new Boolean(true));
        mandatoryMap.put("txtNoInstallments", new Boolean(true));
        mandatoryMap.put("cboRepayFreq", new Boolean(true));
        mandatoryMap.put("cboTypeOfFacility", new Boolean(true));
        mandatoryMap.put("txtLimit_SD", new Boolean(true));
        mandatoryMap.put("txtLimit_SD2", new Boolean(true));
        mandatoryMap.put("tdtFDate", new Boolean(true));
        mandatoryMap.put("tdtTDate", new Boolean(true));
        mandatoryMap.put("cboSanctionSlNo", new Boolean(true));
        mandatoryMap.put("cboProductId", new Boolean(true));
        mandatoryMap.put("rdoSecurityDetails_Unsec", new Boolean(true));
        mandatoryMap.put("chkStockInspect", new Boolean(true));
        mandatoryMap.put("chkInsurance", new Boolean(true));
        mandatoryMap.put("chkGurantor", new Boolean(true));
        mandatoryMap.put("rdoAccType_New", new Boolean(true));
        mandatoryMap.put("rdoAccLimit_Main", new Boolean(true));
        mandatoryMap.put("rdoNatureInterest_PLR", new Boolean(true));
        mandatoryMap.put("cboInterestType", new Boolean(true));
        mandatoryMap.put("rdoRiskWeight_Yes", new Boolean(true));
        mandatoryMap.put("tdtDemandPromNoteDate", new Boolean(true));
        mandatoryMap.put("tdtDemandPromNoteExpDate", new Boolean(true));
        mandatoryMap.put("tdtAODDate", new Boolean(true));
        mandatoryMap.put("rdoMultiDisburseAllow_Yes", new Boolean(true));
        mandatoryMap.put("rdoSubsidy_Yes", new Boolean(true));
        mandatoryMap.put("txtPurposeDesc", new Boolean(true));
        mandatoryMap.put("txtGroupDesc", new Boolean(true));
        mandatoryMap.put("rdoInterest_Simple", new Boolean(true));
        mandatoryMap.put("rdoRecarable_Yes", new Boolean(true));
        mandatoryMap.put("txtContactPerson", new Boolean(true));
        mandatoryMap.put("txtContactPhone", new Boolean(true));
        mandatoryMap.put("txtRemarks", new Boolean(true));
//        mandatoryMap.put("txtSecurityNo", new Boolean(true));
        mandatoryMap.put("txtCustID_Security", new Boolean(true));
        mandatoryMap.put("rdoSecurityType_Primary", new Boolean(true));
        mandatoryMap.put("txtSecurityValue", new Boolean(true));
        mandatoryMap.put("tdtAson", new Boolean(true));
        mandatoryMap.put("txtParticulars", new Boolean(true));
        mandatoryMap.put("cboNatureCharge", new Boolean(true));
        mandatoryMap.put("tdtDateCharge", new Boolean(true));
        mandatoryMap.put("chkSelCommodityItem", new Boolean(true));
        mandatoryMap.put("cboForMillIndus", new Boolean(true));
        mandatoryMap.put("tdtDateInspection", new Boolean(true));
        mandatoryMap.put("cboStockStateFreq", new Boolean(true));
        mandatoryMap.put("tdtToDate", new Boolean(true));
        mandatoryMap.put("txtMargin", new Boolean(true));
        mandatoryMap.put("txtScheduleNo", new Boolean(true));
        mandatoryMap.put("txtLaonAmt", new Boolean(true));
        mandatoryMap.put("cboRepayFreq_Repayment", new Boolean(true));
        mandatoryMap.put("cboRepayType", new Boolean(true));
        mandatoryMap.put("chkMoraGiven", new Boolean(true));
        mandatoryMap.put("chkMoratorium_Given", new Boolean(true));
        mandatoryMap.put("txtNoMonthsMora", new Boolean(true));
        mandatoryMap.put("txtFacility_Moratorium_Period", new Boolean(true));
        mandatoryMap.put("tdtFacility_Repay_Date", new Boolean(true));
        mandatoryMap.put("tdtFirstInstall", new Boolean(true));
        mandatoryMap.put("tdtLastInstall", new Boolean(true));
        mandatoryMap.put("txtTotalBaseAmt", new Boolean(true));
        mandatoryMap.put("txtAmtPenulInstall", new Boolean(true));
        mandatoryMap.put("txtAmtLastInstall", new Boolean(true));
        mandatoryMap.put("txtTotalInstallAmt", new Boolean(true));
        mandatoryMap.put("rdoDoAddSIs_Yes", new Boolean(true));
        mandatoryMap.put("rdoPostDatedCheque_Yes", new Boolean(true));
        mandatoryMap.put("rdoStatus_Repayment", new Boolean(true));
        mandatoryMap.put("txtNoInstall", new Boolean(true));
        mandatoryMap.put("txtCustomerID_GD", new Boolean(true));
        mandatoryMap.put("txtGuaranAccNo", new Boolean(true));
        mandatoryMap.put("txtGuaranName", new Boolean(true));
        mandatoryMap.put("txtAge", new Boolean(true));
        mandatoryMap.put("txtStreet_GD", new Boolean(true));
        mandatoryMap.put("txtArea_GD", new Boolean(true));
        mandatoryMap.put("cboCity_GD", new Boolean(true));
        mandatoryMap.put("txtPin_GD", new Boolean(true));
        mandatoryMap.put("cboState_GD", new Boolean(true));
        mandatoryMap.put("cboCountry_GD", new Boolean(true));
        mandatoryMap.put("txtPhone_GD", new Boolean(true));
        mandatoryMap.put("cboConstitution_GD", new Boolean(true));
        mandatoryMap.put("txtGuarantorNetWorth", new Boolean(true));
        mandatoryMap.put("tdtAsOn_GD", new Boolean(true));
        mandatoryMap.put("tdtAccountOpenDate", new Boolean(true));
        mandatoryMap.put("txtInsureCompany", new Boolean(true));
        mandatoryMap.put("txtPolicyNumber", new Boolean(true));
        mandatoryMap.put("txtPolicyAmt", new Boolean(true));
        mandatoryMap.put("tdtPolicyDate", new Boolean(true));
        mandatoryMap.put("txtPremiumAmt", new Boolean(true));
        mandatoryMap.put("tdtExpityDate", new Boolean(true));
        mandatoryMap.put("cboNatureRisk", new Boolean(true));
        mandatoryMap.put("tdtFrom", new Boolean(true));
        mandatoryMap.put("tdtTo", new Boolean(true));
        mandatoryMap.put("txtFromAmt", new Boolean(true));
        mandatoryMap.put("txtToAmt", new Boolean(true));
        mandatoryMap.put("txtInter", new Boolean(true));
        mandatoryMap.put("txtPenalInter", new Boolean(true));
        mandatoryMap.put("txtAgainstClearingInter", new Boolean(true));
        mandatoryMap.put("txtPenalStatement", new Boolean(true));
        mandatoryMap.put("txtInterExpLimit", new Boolean(true));
        mandatoryMap.put("cboCommodityCode", new Boolean(true));
        mandatoryMap.put("cboGuaranteeCoverCode", new Boolean(true));
        mandatoryMap.put("cboSectorCode1", new Boolean(true));
        mandatoryMap.put("cboHealthCode", new Boolean(true));
        mandatoryMap.put("cboTypeFacility", new Boolean(true));
        mandatoryMap.put("cboDistrictCode", new Boolean(true));
        mandatoryMap.put("cboPurposeCode", new Boolean(true));
        mandatoryMap.put("cboSectorCode2", new Boolean(true));
        mandatoryMap.put("cboIndusCode", new Boolean(true));
        mandatoryMap.put("cboRepaymentCode", new Boolean(true));
        mandatoryMap.put("cbo20Code", new Boolean(true));
        mandatoryMap.put("cboRefinancingInsti", new Boolean(true));
        mandatoryMap.put("cboGovtSchemeCode", new Boolean(true));
        mandatoryMap.put("cboAssetCode", new Boolean(true));
        mandatoryMap.put("tdtNPADate", new Boolean(true));
        mandatoryMap.put("chkDirectFinance", new Boolean(true));
        mandatoryMap.put("chkECGC", new Boolean(true));
        mandatoryMap.put("chkPrioritySector", new Boolean(true));
        mandatoryMap.put("chkDocumentcomplete", new Boolean(true));
        mandatoryMap.put("chkQIS", new Boolean(true));
        mandatoryMap.put("cboSecurityNo_Insurance", new Boolean(true));
        mandatoryMap.put("txtRemark_Insurance", new Boolean(true));
        mandatoryMap.put("txtRemarks_DocumentDetails", new Boolean(true));
        mandatoryMap.put("tdtSubmitDate_DocumentDetails", new Boolean(true));
        mandatoryMap.put("txtPeriodDifference_Years", new Boolean(true));
        mandatoryMap.put("txtPeriodDifference_Months", new Boolean(true));
        mandatoryMap.put("txtPeriodDifference_Days", new Boolean(true));
        mandatoryMap.put("txtEligibleLoan", new Boolean(true));
        mandatoryMap.put("chkChequeBookAD", new Boolean(true));
        mandatoryMap.put("chkCustGrpLimitValidationAD", new Boolean(true));
        mandatoryMap.put("chkMobileBankingAD", new Boolean(true));
        mandatoryMap.put("chkNROStatusAD", new Boolean(true));
        mandatoryMap.put("chkATMAD", new Boolean(true));
        mandatoryMap.put("txtATMNoAD", new Boolean(true));
        mandatoryMap.put("tdtATMFromDateAD", new Boolean(true));
        mandatoryMap.put("tdtATMToDateAD", new Boolean(true));
        mandatoryMap.put("chkDebitAD", new Boolean(true));
        mandatoryMap.put("txtDebitNoAD", new Boolean(true));
        mandatoryMap.put("tdtDebitFromDateAD", new Boolean(true));
        mandatoryMap.put("tdtDebitToDateAD", new Boolean(true));
        mandatoryMap.put("chkCreditAD", new Boolean(true));
        mandatoryMap.put("txtCreditNoAD", new Boolean(true));
        mandatoryMap.put("tdtCreditFromDateAD", new Boolean(true));
        mandatoryMap.put("tdtCreditToDateAD", new Boolean(true));
        mandatoryMap.put("cboSettlementModeAI", new Boolean(true));
        mandatoryMap.put("cboOpModeAI", new Boolean(true));
        mandatoryMap.put("txtAccOpeningChrgAD", new Boolean(true));
        mandatoryMap.put("txtMisServiceChrgAD", new Boolean(true));
        mandatoryMap.put("chkStopPmtChrgAD", new Boolean(true));
        mandatoryMap.put("txtChequeBookChrgAD", new Boolean(true));
        mandatoryMap.put("chkChequeRetChrgAD", new Boolean(true));
        mandatoryMap.put("txtFolioChrgAD", new Boolean(true));
        mandatoryMap.put("chkInopChrgAD", new Boolean(true));
        mandatoryMap.put("txtAccCloseChrgAD", new Boolean(true));
        mandatoryMap.put("chkStmtChrgAD", new Boolean(true));
        mandatoryMap.put("cboStmtFreqAD", new Boolean(true));
        mandatoryMap.put("chkNonMainMinBalChrgAD", new Boolean(true));
        mandatoryMap.put("txtExcessWithChrgAD", new Boolean(true));
        mandatoryMap.put("chkABBChrgAD", new Boolean(true));
        mandatoryMap.put("chkNPAChrgAD", new Boolean(true));
        mandatoryMap.put("txtABBChrgAD", new Boolean(true));
        mandatoryMap.put("tdtNPAChrgAD", new Boolean(true));
        mandatoryMap.put("txtMinActBalanceAD", new Boolean(true));
        mandatoryMap.put("tdtDebit", new Boolean(true));
        mandatoryMap.put("tdtCredit", new Boolean(true));
        mandatoryMap.put("chkPayIntOnCrBalIN", new Boolean(true));
        mandatoryMap.put("chkPayIntOnDrBalIN", new Boolean(true));
        mandatoryMap.put("cboCaseStatus", new Boolean(true));
        mandatoryMap.put("txtCaseNumber", new Boolean(true));
        mandatoryMap.put("tdtlFillingDt", new Boolean(true));
        mandatoryMap.put("txtInstallmentAmt", new Boolean(true));


        mandatoryMap.put("txtCourtOrderNo", new Boolean(true));
        mandatoryMap.put("tdtCourtOrderDate", new Boolean(true));
        mandatoryMap.put("tdtOTSDate", new Boolean(true));
        mandatoryMap.put("txtOTSRate", new Boolean(true));
        mandatoryMap.put("txtTotAmountDue", new Boolean(true));
        mandatoryMap.put("txtSettlementAmt", new Boolean(true));
        mandatoryMap.put("txtNoInstallment", new Boolean(true));
        mandatoryMap.put("cboFreq", new Boolean(true));
        mandatoryMap.put("tdtFirstInstallDt", new Boolean(true));
        mandatoryMap.put("txtPenal", new Boolean(true));
        mandatoryMap.put("cboSanRepaymentType", new Boolean(true));

    }

    public HashMap getMandatoryHashMap() {
        return mandatoryMap;
    }

    public void setHelpMessage() {
        final TermLoanMRB objMandatoryRB = new TermLoanMRB();
        txtRepayScheduleMode.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRepayScheduleMode"));
        tdtDisbursement_Dt.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDisbursement_Dt"));
        txtAcct_Name.setHelpMessage(lblMsg, objMandatoryRB.getString("txtAcct_Name"));
        cboIntGetFrom.setHelpMessage(lblMsg, objMandatoryRB.getString("cboIntGetFrom"));
        cboRepayFreq_Repayment.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRepayFreq_Repayment"));
        txtCustID.setHelpMessage(lblMsg, objMandatoryRB.getString("txtCustID"));
        cboAccStatus.setHelpMessage(lblMsg, objMandatoryRB.getString("cboAccStatus"));
        cboConstitution.setHelpMessage(lblMsg, objMandatoryRB.getString("cboConstitution"));
        cboCategory.setHelpMessage(lblMsg, objMandatoryRB.getString("cboCategory"));
//        txtReferences.setHelpMessage(lblMsg, objMandatoryRB.getString("txtReferences"));
//        txtCompanyRegisNo.setHelpMessage(lblMsg, objMandatoryRB.getString("txtCompanyRegisNo"));
//        tdtDateEstablishment.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDateEstablishment"));
//        tdtDealingWithBankSince.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDealingWithBankSince"));
//        txtRiskRating.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRiskRating"));
//        cboNatureBusiness.setHelpMessage(lblMsg, objMandatoryRB.getString("cboNatureBusiness"));
//        txtRemarks__CompDetail.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRemarks__CompDetail"));
//        txtNetWorth.setHelpMessage(lblMsg, objMandatoryRB.getString("txtNetWorth"));
//        tdtAsOn.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtAsOn"));
//        tdtCreditFacilityAvailSince.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtCreditFacilityAvailSince"));
//        txtChiefExecutiveName.setHelpMessage(lblMsg, objMandatoryRB.getString("txtChiefExecutiveName"));
//        cboAddressType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboAddressType"));
//        txtStreet_CompDetail.setHelpMessage(lblMsg, objMandatoryRB.getString("txtStreet_CompDetail"));
//        txtArea_CompDetail.setHelpMessage(lblMsg, objMandatoryRB.getString("txtArea_CompDetail"));
//        cboCity_CompDetail.setHelpMessage(lblMsg, objMandatoryRB.getString("cboCity_CompDetail"));
//        cboState_CompDetail.setHelpMessage(lblMsg, objMandatoryRB.getString("cboState_CompDetail"));
//        cboCountry_CompDetail.setHelpMessage(lblMsg, objMandatoryRB.getString("cboCountry_CompDetail"));
//        txtPin_CompDetail.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPin_CompDetail"));
//        txtPhone_CompDetail.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPhone_CompDetail"));
        txtSanctionNo.setHelpMessage(lblMsg, objMandatoryRB.getString("txtSanctionNo"));
        tdtSanctionDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtSanctionDate"));
        cboSanctioningAuthority.setHelpMessage(lblMsg, objMandatoryRB.getString("cboSanctioningAuthority"));
//        txtSanctionRemarks.setHelpMessage(lblMsg, objMandatoryRB.getString("txtSanctionRemarks"));
        cboModeSanction.setHelpMessage(lblMsg, objMandatoryRB.getString("cboModeSanction"));
        txtNoInstallments.setHelpMessage(lblMsg, objMandatoryRB.getString("txtNoInstallments"));
        cboRepayFreq.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRepayFreq"));
        cboTypeOfFacility.setHelpMessage(lblMsg, objMandatoryRB.getString("cboTypeOfFacility"));
        txtLimit_SD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtLimit_SD"));
//        txtLimit_SD2.setHelpMessage(lblMsg, objMandatoryRB.getString("txtLimit_SD2"));
        tdtFDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtFDate"));
        tdtTDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtTDate"));
        cboProductId.setHelpMessage(lblMsg, objMandatoryRB.getString("cboProductId"));
        rdoSecurityDetails_Unsec.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoSecurityDetails_Unsec"));
        chkStockInspect.setHelpMessage(lblMsg, objMandatoryRB.getString("chkStockInspect"));
        chkInsurance.setHelpMessage(lblMsg, objMandatoryRB.getString("chkInsurance"));
        chkGurantor.setHelpMessage(lblMsg, objMandatoryRB.getString("chkGurantor"));
        rdoAccLimit_Main.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoAccLimit_Main"));
        rdoNatureInterest_PLR.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoNatureInterest_PLR"));
        cboInterestType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboInterestType"));
        rdoRiskWeight_Yes.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoRiskWeight_Yes"));
        tdtDemandPromNoteDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDemandPromNoteDate"));
        tdtDemandPromNoteExpDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDemandPromNoteExpDate"));
        tdtAODDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtAODDate"));
        rdoMultiDisburseAllow_Yes.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoMultiDisburseAllow_Yes"));
        rdoSubsidy_Yes.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoSubsidy_Yes"));
        txtPurposeDesc.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPurposeDesc"));
        txtGroupDesc.setHelpMessage(lblMsg, objMandatoryRB.getString("txtGroupDesc"));
        rdoInterest_Simple.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoInterest_Simple"));
        rdoActive_Repayment.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoActive_Repayment"));
        rdoInActive_Repayment.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoInActive_Repayment"));
        txtContactPerson.setHelpMessage(lblMsg, objMandatoryRB.getString("txtContactPerson"));
        txtContactPhone.setHelpMessage(lblMsg, objMandatoryRB.getString("txtContactPhone"));
        txtScheduleNo.setHelpMessage(lblMsg, objMandatoryRB.getString("txtScheduleNo"));
        txtLaonAmt.setHelpMessage(lblMsg, objMandatoryRB.getString("txtLaonAmt"));
        cboRepayType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRepayType"));
        txtNoMonthsMora.setHelpMessage(lblMsg, objMandatoryRB.getString("txtNoMonthsMora"));
        tdtFirstInstall.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtFirstInstall"));
        tdtLastInstall.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtLastInstall"));
        txtTotalBaseAmt.setHelpMessage(lblMsg, objMandatoryRB.getString("txtTotalBaseAmt"));
        txtAmtPenulInstall.setHelpMessage(lblMsg, objMandatoryRB.getString("txtAmtPenulInstall"));
        txtAmtLastInstall.setHelpMessage(lblMsg, objMandatoryRB.getString("txtAmtLastInstall"));
        txtTotalInstallAmt.setHelpMessage(lblMsg, objMandatoryRB.getString("txtTotalInstallAmt"));
        rdoDoAddSIs_Yes.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoDoAddSIs_Yes"));
        rdoPostDatedCheque_Yes.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoPostDatedCheque_Yes"));
        txtNoInstall.setHelpMessage(lblMsg, objMandatoryRB.getString("txtNoInstall"));
        txtCustomerID_GD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtCustomerID_GD"));
        cboProdId.setHelpMessage(lblMsg, objMandatoryRB.getString("cboProdId"));
        txtGuaranAccNo.setHelpMessage(lblMsg, objMandatoryRB.getString("txtGuaranAccNo"));
        txtGuaranName.setHelpMessage(lblMsg, objMandatoryRB.getString("txtGuaranName"));
        tdtDOB_GD.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDOB_GD"));
        txtStreet_GD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtStreet_GD"));
        txtArea_GD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtArea_GD"));
        cboCity_GD.setHelpMessage(lblMsg, objMandatoryRB.getString("cboCity_GD"));
        txtPin_GD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPin_GD"));
        cboState_GD.setHelpMessage(lblMsg, objMandatoryRB.getString("cboState_GD"));
        cboCountry_GD.setHelpMessage(lblMsg, objMandatoryRB.getString("cboCountry_GD"));
        txtPhone_GD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPhone_GD"));
        cboConstitution_GD.setHelpMessage(lblMsg, objMandatoryRB.getString("cboConstitution_GD"));
        txtGuarantorNetWorth.setHelpMessage(lblMsg, objMandatoryRB.getString("txtGuarantorNetWorth"));
        tdtAsOn_GD.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtAsOn_GD"));
        tdtFrom.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtFrom"));
        tdtTo.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtTo"));
        txtFromAmt.setHelpMessage(lblMsg, objMandatoryRB.getString("txtFromAmt"));
        txtToAmt.setHelpMessage(lblMsg, objMandatoryRB.getString("txtToAmt"));
        txtInter.setHelpMessage(lblMsg, objMandatoryRB.getString("txtInter"));
        txtFacility_Moratorium_Period.setHelpMessage(lblMsg, objMandatoryRB.getString("txtFacility_Moratorium_Period"));
        tdtFacility_Repay_Date.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtFacility_Repay_Date"));
        chkMoratorium_Given.setHelpMessage(lblMsg, objMandatoryRB.getString("chkMoratorium_Given"));
        txtPenalInter.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPenalInter"));
        txtAgainstClearingInter.setHelpMessage(lblMsg, objMandatoryRB.getString("txtAgainstClearingInter"));
        txtPenalStatement.setHelpMessage(lblMsg, objMandatoryRB.getString("txtPenalStatement"));
        txtInterExpLimit.setHelpMessage(lblMsg, objMandatoryRB.getString("txtInterExpLimit"));
        cboCommodityCode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboCommodityCode"));
        cboGuaranteeCoverCode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboGuaranteeCoverCode"));
        cboSectorCode1.setHelpMessage(lblMsg, objMandatoryRB.getString("cboSectorCode1"));
        cboHealthCode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboHealthCode"));
        cboTypeFacility.setHelpMessage(lblMsg, objMandatoryRB.getString("cboTypeFacility"));
        cboDistrictCode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboDistrictCode"));
        cboPurposeCode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboPurposeCode"));
        cboIndusCode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboIndusCode"));
        cboWeakerSectionCode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboWeakerSectionCode"));
        cbo20Code.setHelpMessage(lblMsg, objMandatoryRB.getString("cbo20Code"));
        cboRefinancingInsti.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRefinancingInsti"));
        cboGovtSchemeCode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboGovtSchemeCode"));
        cboAssetCode.setHelpMessage(lblMsg, objMandatoryRB.getString("cboAssetCode"));
        tdtNPADate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtNPADate"));
        chkDirectFinance.setHelpMessage(lblMsg, objMandatoryRB.getString("chkDirectFinance"));
        chkECGC.setHelpMessage(lblMsg, objMandatoryRB.getString("chkECGC"));
        chkPrioritySector.setHelpMessage(lblMsg, objMandatoryRB.getString("chkPrioritySector"));
        chkDocumentcomplete.setHelpMessage(lblMsg, objMandatoryRB.getString("chkDocumentcomplete"));
        chkQIS.setHelpMessage(lblMsg, objMandatoryRB.getString("chkQIS"));
        tdtSubmitDate_DocumentDetails.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtSubmitDate_DocumentDetails"));
        txtRemarks_DocumentDetails.setHelpMessage(lblMsg, objMandatoryRB.getString("txtRemarks_DocumentDetails"));
        rdoYes_DocumentDetails.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoYes_DocumentDetails"));
        rdoNo_DocumentDetails.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoNo_DocumentDetails"));
        chkChequeBookAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkChequeBookAD"));
        chkCustGrpLimitValidationAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkCustGrpLimitValidationAD"));
        chkMobileBankingAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkMobileBankingAD"));
        chkNROStatusAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkNROStatusAD"));
        chkATMAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkATMAD"));
        txtATMNoAD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtATMNoAD"));
        tdtATMFromDateAD.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtATMFromDateAD"));
        tdtATMToDateAD.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtATMToDateAD"));
        chkDebitAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkDebitAD"));
        txtDebitNoAD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtDebitNoAD"));
        tdtDebitFromDateAD.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDebitFromDateAD"));
        tdtDebitToDateAD.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDebitToDateAD"));
        chkCreditAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkCreditAD"));
        txtCreditNoAD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtCreditNoAD"));
        tdtCreditFromDateAD.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtCreditFromDateAD"));
        tdtCreditToDateAD.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtCreditToDateAD"));
        cboSettlementModeAI.setHelpMessage(lblMsg, objMandatoryRB.getString("cboSettlementModeAI"));
        cboOpModeAI.setHelpMessage(lblMsg, objMandatoryRB.getString("cboOpModeAI"));
        txtAccOpeningChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtAccOpeningChrgAD"));
        txtMisServiceChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtMisServiceChrgAD"));
        chkStopPmtChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkStopPmtChrgAD"));
        txtChequeBookChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtChequeBookChrgAD"));
        chkChequeRetChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkChequeRetChrgAD"));
        txtFolioChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtFolioChrgAD"));
        chkInopChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkInopChrgAD"));
        txtAccCloseChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtAccCloseChrgAD"));
        chkStmtChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkStmtChrgAD"));
        cboStmtFreqAD.setHelpMessage(lblMsg, objMandatoryRB.getString("cboStmtFreqAD"));
        chkNonMainMinBalChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkNonMainMinBalChrgAD"));
        txtExcessWithChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtExcessWithChrgAD"));
        chkABBChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkABBChrgAD"));
        chkNPAChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("chkNPAChrgAD"));
        txtABBChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtABBChrgAD"));
        tdtNPAChrgAD.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtNPAChrgAD"));
        txtMinActBalanceAD.setHelpMessage(lblMsg, objMandatoryRB.getString("txtMinActBalanceAD"));
        tdtDebit.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtDebit"));
        tdtCredit.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtCredit"));
        chkPayIntOnCrBalIN.setHelpMessage(lblMsg, objMandatoryRB.getString("chkPayIntOnCrBalIN"));
        chkPayIntOnDrBalIN.setHelpMessage(lblMsg, objMandatoryRB.getString("chkPayIntOnDrBalIN"));
        rdoYes_Executed_DOC.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoYes_Executed_DOC"));
        rdoNo_Executed_DOC.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoNo_Executed_DOC"));
        rdoYes_Mandatory_DOC.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoYes_Mandatory_DOC"));
        rdoNo_Mandatory_DOC.setHelpMessage(lblMsg, objMandatoryRB.getString("rdoNo_Mandatory_DOC"));
        tdtExecuteDate_DOC.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtExecuteDate_DOC"));
        tdtExpiryDate_DOC.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtExpiryDate_DOC"));
        tdtAccountOpenDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtAccountOpenDate"));
        cboRecommendedByType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboRecommendedByType"));
        //Case Details
        cboCaseStatus.setHelpMessage(lblMsg, objMandatoryRB.getString("cboCaseStatus"));
        txtCaseNumber.setHelpMessage(lblMsg, objMandatoryRB.getString("txtCaseNumber"));
        tdtlFillingDt.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtlFillingDt"));
        txtFillingFees.setHelpMessage(lblMsg, objMandatoryRB.getString("txtFillingFees"));
        txtMiscCharges.setHelpMessage(lblMsg, objMandatoryRB.getString("txtMiscCharges"));
    }

    private void setFieldNames() {
        lblRepayScheduleMode.setName("lblRepayScheduleMode");
        txtRepayScheduleMode.setName("txtRepayScheduleMode");
        lblAcct_Name.setName("lblAcct_Name");
        txtAcct_Name.setName("txtAcct_Name");
        lblExpiryDate_DOC.setName("lblExpiryDate_DOC");
        tdtExpiryDate_DOC.setName("tdtExpiryDate_DOC");
        lblExecuteDate_DOC.setName("lblExecuteDate_DOC");
        tdtExecuteDate_DOC.setName("tdtExecuteDate_DOC");
        lblExecuted_DOC.setName("lblExecuted_DOC");
        rdoNo_Executed_DOC.setName("rdoNo_Executed_DOC");
        rdoYes_Executed_DOC.setName("rdoYes_Executed_DOC");
        lblMandatory_DOC.setName("lblMandatory_DOC");
        rdoNo_Mandatory_DOC.setName("rdoNo_Mandatory_DOC");
        rdoYes_Mandatory_DOC.setName("rdoYes_Mandatory_DOC");
        lblProdID_Disp_ODetails.setName("lblProdID_Disp_ODetails");
        lblProdID_ODetails.setName("lblProdID_ODetails");
        lblAcctHead_Disp_ODetails.setName("lblAcctHead_Disp_ODetails");
        lblAcctHead_ODetails.setName("lblAcctHead_ODetails");
        lblAcctNo_Disp_ODetails.setName("lblAcctNo_Disp_ODetails");
        lblAcctNo_ODetails.setName("lblAcctNo_ODetails");
        panAcctInfo_ODetails.setName("panAcctInfo_ODetails");
        lblDisbursement_Dt.setName("lblDisbursement_Dt");
        tdtDisbursement_Dt.setName("tdtDisbursement_Dt");
        PanAcc_CD.setName("PanAcc_CD");
        btnCancel.setName("btnCancel");
        btnClose.setName("btnClose");
        btnCustID.setName("btnCustID");
        btnCustomerID_GD.setName("btnCustomerID_GD");
        btnAccNo.setName("btnAccNo");
        btnNew_Borrower.setName("btnNew_Borrower");
        btnEMI_Calculate.setName("btnEMI_Calculate");
        btnDeleteBorrower.setName("btnDeleteBorrower");
        btnToMain_Borrower.setName("btnToMain_Borrower");
        btnDelete.setName("btnDelete");
//        btnDelete1.setName("btnDelete1");
//        btnDelete2_SD.setName("btnDelete2_SD");
//        btnFacilityDelete.setName("btnFacilityDelete");
        btnEdit.setName("btnEdit");
        panPeriodDifference.setName("panPeriodDifference");
        lblPeriodDifference_Years.setName("lblPeriodDifference_Years");
        txtPeriodDifference_Years.setName("txtPeriodDifference_Years");
        lblPeriodDifference_Months.setName("lblPeriodDifference_Months");
        txtPeriodDifference_Months.setName("txtPeriodDifference_Months");
        lblPeriodDifference_Days.setName("lblPeriodDifference_Days");
        txtPeriodDifference_Days.setName("txtPeriodDifference_Days");
        lblIntGetFrom.setName("lblIntGetFrom");
        cboIntGetFrom.setName("cboIntGetFrom");
        btnGuarantorDelete.setName("btnGuarantorDelete");
        btnGuarantorNew.setName("btnGuarantorNew");
        btnGuarantorSave.setName("btnGuarantorSave");
        btnInterestMaintenanceDelete.setName("btnInterestMaintenanceDelete");
        btnInterestMaintenanceNew.setName("btnInterestMaintenanceNew");
        btnInterestMaintenanceSave.setName("btnInterestMaintenanceSave");
        btnNew.setName("btnNew");
//        btnNew1.setName("btnNew1");
//        btnNew2_SD.setName("btnNew2_SD");
        btnPrint.setName("btnPrint");
        btnSave.setName("btnSave");
        btnAuthorize.setName("btnAuthorize");
        btnReject.setName("btnReject");
        btnRepayment_Delete.setName("btnRepayment_Delete");
        btnRepayment_New.setName("btnRepayment_New");
        btnRepayment_Save.setName("btnRepayment_Save");
        btnException.setName("btnException");
        btnSave_DocumentDetails.setName("btnSave_DocumentDetails");
        lblProdID_Disp_DocumentDetails.setName("lblProdID_Disp_DocumentDetails");
        lblProdID_DocumentDetails.setName("lblProdID_DocumentDetails");
        lblAcctHead_Disp_DocumentDetails.setName("lblAcctHead_Disp_DocumentDetails");
        lblAcctHead_DocumentDetails.setName("lblAcctHead_DocumentDetails");
        lblAcctNo_Disp_DocumentDetails.setName("lblAcctNo_Disp_DocumentDetails");
        lblAcctNo_DocumentDetails.setName("lblAcctNo_DocumentDetails");
        lblDocDesc_Disp_DocumentDetails.setName("lblDocDesc_Disp_DocumentDetails");
        lblDocDesc_DocumentDetails.setName("lblDocDesc_DocumentDetails");
        lblDocNo_Disp_DocumentDetails.setName("lblDocNo_Disp_DocumentDetails");
        lblDocNo_DocumentDetails.setName("lblDocNo_DocumentDetails");
        lblDocType_Disp_DocumentDetails.setName("lblDocType_Disp_DocumentDetails");
        lblDocType_DocumentDetails.setName("lblDocType_DocumentDetails");
        lblSubmitDate_DocumentDetails.setName("lblSubmitDate_DocumentDetails");
        lblSubmitted_DocumentDetails.setName("lblSubmitted_DocumentDetails");
        lblRemarks_DocumentDetails.setName("lblRemarks_DocumentDetails");
        txtRemarks_DocumentDetails.setName("txtRemarks_DocumentDetails");
        tdtSubmitDate_DocumentDetails.setName("tdtSubmitDate_DocumentDetails");
        rdoYes_DocumentDetails.setName("rdoYes_DocumentDetails");
        rdoNo_DocumentDetails.setName("rdoNo_DocumentDetails");
        srpTable_DocumentDetails.setName("srpTable_DocumentDetails");
        panTable_DocumentDetails.setName("panTable_DocumentDetails");
        tblTable_DocumentDetails.setName("tblTable_DocumentDetails");
        lblStatus_Repayment.setName("lblStatus_Repayment");
        rdoActive_Repayment.setName("rdoActive_Repayment");
        rdoInActive_Repayment.setName("rdoInActive_Repayment");
        panStatus_Repayment.setName("panStatus_Repayment");
        panGahanYesNo.setName("panGahanYesNo");
        panAcctDetails_DocumentDetails.setName("panAcctDetails_DocumentDetails");
        panSubmitted_DocumentDetails.setName("panSubmitted_DocumentDetails");
//        btnSave1.setName("btnSave1");
//        btnSave2_SD.setName("btnSave2_SD");
//        btnFacilitySave.setName("btnFacilitySave");
        cbo20Code.setName("cbo20Code");
        cboAccStatus.setName("cboAccStatus");
//        cboAddressType.setName("cboAddressType");
        cboAssetCode.setName("cboAssetCode");
        cboCategory.setName("cboCategory");
//        cboCity_CompDetail.setName("cboCity_CompDetail");
        cboCity_GD.setName("cboCity_GD");
        cboProdId.setName("cboProdId");
        cboProdType.setName("cboProdType");
        cboCommodityCode.setName("cboCommodityCode");
        cboConstitution.setName("cboConstitution");
        cboConstitution_GD.setName("cboConstitution_GD");
//        cboCountry_CompDetail.setName("cboCountry_CompDetail");
        cboCountry_GD.setName("cboCountry_GD");
        cboDistrictCode.setName("cboDistrictCode");
        cboGovtSchemeCode.setName("cboGovtSchemeCode");
        cboGuaranteeCoverCode.setName("cboGuaranteeCoverCode");
        cboHealthCode.setName("cboHealthCode");
        cboIndusCode.setName("cboIndusCode");
        cboRepayFreq_Repayment.setName("cboRepayFreq_Repayment");
        cboInterestType.setName("cboInterestType");
        cboModeSanction.setName("cboModeSanction");
//        cboNatureBusiness.setName("cboNatureBusiness");
        lblProID_CD_Disp.setName("lblProID_CD_Disp");
        lblProdID_GD_Disp.setName("lblProdID_GD_Disp");
        lblProdID_RS_Disp.setName("lblProdID_RS_Disp");
        lblRepayFromDate.setName("lblRepayFromDate");
        cboProductId.setName("cboProductId");
        cboPurposeCode.setName("cboPurposeCode");
        cboRefinancingInsti.setName("cboRefinancingInsti");
        cboRepayFreq.setName("cboRepayFreq");
        cboRepayType.setName("cboRepayType");
        cboRecommendedByType.setName("cboRecommendedByType");
        cboWeakerSectionCode.setName("cboWeakerSectionCode");
        cboSanctioningAuthority.setName("cboSanctioningAuthority");
        cboSectorCode1.setName("cboSectorCode1");
//        cboState_CompDetail.setName("cboState_CompDetail");
        cboState_GD.setName("cboState_GD");
        cboTypeFacility.setName("cboTypeFacility");
        cboTypeOfFacility.setName("cboTypeOfFacility");
        lblProdID_IM_Disp.setName("lblProdID_IM_Disp");
        chkDirectFinance.setName("chkDirectFinance");
        chkDocumentcomplete.setName("chkDocumentcomplete");
        chkECGC.setName("chkECGC");
        chkGurantor.setName("chkGurantor");
        chkInsurance.setName("chkInsurance");
        chkPrioritySector.setName("chkPrioritySector");
        chkQIS.setName("chkQIS");
        chkStockInspect.setName("chkStockInspect");
        lbl20Code.setName("lbl20Code");
        lblAODDate.setName("lblAODDate");
        lblAccHead.setName("lblAccHead");
        lblAccHead_2.setName("lblAccHead_2");
        lblAccHead_CD.setName("lblAccHead_CD");
        lblAccHead_CD_2.setName("lblAccHead_CD_2");
        lblAccHead_GD.setName("lblAccHead_GD");
        lblAccHead_GD_2.setName("lblAccHead_GD_2");
        lblAccHead_IM.setName("lblAccHead_IM");
        lblAccHead_IM_2.setName("lblAccHead_IM_2");
        lblAccHead_RS.setName("lblAccHead_RS");
        lblAccHead_RS_2.setName("lblAccHead_RS_2");
        lblAccountHead_FD.setName("lblAccountHead_FD");
        lblAccountHead_FD_Disp.setName("lblAccountHead_FD_Disp");
        lblAccLimit.setName("lblAccLimit");
        lblAccNo_CD.setName("lblAccNo_CD");
        lblAccNo_CD_2.setName("lblAccNo_CD_2");
        lblAccNo_GD.setName("lblAccNo_GD");
        lblAccNo_GD_2.setName("lblAccNo_GD_2");
        lblAccNo_IM.setName("lblAccNo_IM");
        lblAccNo_IM_2.setName("lblAccNo_IM_2");
        lblAccNo_RS.setName("lblAccNo_RS");
        lblAccNo_RS_2.setName("lblAccNo_RS_2");
        lblAccStatus.setName("lblAccStatus");
        lblAcctNo_Sanction_Disp.setName("lblAcctNo_Sanction_Disp");
        lblAcctNo_Sanction.setName("lblAcctNo_Sanction");
        lblAcctNo_FD_Disp.setName("lblAcctNo_FD_Disp");
        lblAcctNo_FD.setName("lblAcctNo_FD");
//        lblAddressType.setName("lblAddressType");
        lblAgainstClearingInter.setName("lblAgainstClearingInter");
        lblDOB_GD.setName("lblDOB_GD");
        lblAmtLastInstall.setName("lblAmtLastInstall");
        lblAmtPenulInstall.setName("lblAmtPenulInstall");
//        lblArea_CompDetail.setName("lblArea_CompDetail");
        lblArea_GD.setName("lblArea_GD");
//        lblAsOn.setName("lblAsOn");
        lblAsOn_GD.setName("lblAsOn_GD");
        lblAssetCode.setName("lblAssetCode");
        lblBorrowerNo.setName("lblBorrowerNo");
        lblBorrowerNo_2.setName("lblBorrowerNo_2");
        lblCategory.setName("lblCategory");
//        lblChiefExecutiveName.setName("lblChiefExecutiveName");
        lblCity_BorrowerProfile.setName("lblCity_BorrowerProfile");
        lblCity_BorrowerProfile_2.setName("lblCity_BorrowerProfile_2");
//        lblCity_CompDetail.setName("lblCity_CompDetail");
        lblCity_GD.setName("lblCity_GD");
        lblCommodityCode.setName("lblCommodityCode");
//        lblCompanyRegisNo.setName("lblCompanyRegisNo");
        lblConstitution.setName("lblConstitution");
        lblConstitution_GD.setName("lblConstitution_GD");
        lblContactPerson.setName("lblContactPerson");
        lblContactPhone.setName("lblContactPhone");
//        lblCountry_CompDetail.setName("lblCountry_CompDetail");
        lblCountry_GD.setName("lblCountry_GD");
//        lblCreditFacilityAvailSince.setName("lblCreditFacilityAvailSince");
        lblCustID.setName("lblCustID");
        lblCustName.setName("lblCustName");
        lblCustName_2.setName("lblCustName_2");
        lblCustomerID_GD.setName("lblCustomerID_GD");
//        lblDateEstablishment.setName("lblDateEstablishment");
//        lblDealingWithBankSince.setName("lblDealingWithBankSince");
        lblDemandPromNoteDate.setName("lblDemandPromNoteDate");
        lblDemandPromNoteExpDate.setName("lblDemandPromNoteExpDate");
        lblDirectFinance.setName("lblDirectFinance");
        lblDistrictCode.setName("lblDistrictCode");
        lblDoAddSIs.setName("lblDoAddSIs");
        lblDocumentcomplete.setName("lblDocumentcomplete");
        lblECGC.setName("lblECGC");
        lblExpiryDate.setName("lblExpiryDate");
        lblExpiryDate_2.setName("lblExpiryDate_2");
        lblFDate.setName("lblFDate");
        lblFax_BorrowerProfile.setName("lblFax_BorrowerProfile");
        lblFax_BorrowerProfile_2.setName("lblFax_BorrowerProfile_2");
        lblFirstInstall.setName("lblFirstInstall");
        lblFrom.setName("lblFrom");
        lblFromAmt.setName("lblFromAmt");
        lblGovtSchemeCode.setName("lblGovtSchemeCode");
        lblGroupDesc.setName("lblGroupDesc");
        lblProdType.setName("lblProdType");
        lblGuaranAccNo.setName("lblGuaranAccNo");
        lblGuaranName.setName("lblGuaranName");
        lblGuarantorNo.setName("lblGuarantorNo");
        lblGuaranteeCoverCode.setName("lblGuaranteeCoverCode");
        lblGuarantorNetWorth.setName("lblGuarantorNetWorth");
        lblHealthCode.setName("lblHealthCode");
        lblIndusCode.setName("lblIndusCode");
        lblRepayFreq_Repayment.setName("lblRepayFreq_Repayment");
        lblInter.setName("lblInter");
        lblInterExpLimit.setName("lblInterExpLimit");
        lblInterest.setName("lblInterest");
        lblInterestType.setName("lblInterestType");
        lblLaonAmt.setName("lblLaonAmt");
        lblLastInstall.setName("lblLastInstall");
        lblPenalStatement.setName("lblPenalStatement");
        lblLimitAmt.setName("lblLimitAmt");
        lblLimitAmt_2.setName("lblLimitAmt_2");
        lblLimit_SD.setName("lblLimit_SD");
//        lblLimit_SD2.setName("lblLimit_SD2");
        lblModeSanction.setName("lblModeSanction");
        lblMsg.setName("lblMsg");
        lblMultiDisburseAllow.setName("lblMultiDisburseAllow");
        lblNPADate.setName("lblNPADate");
//        lblNatureBusiness.setName("lblNatureBusiness");
        lblNatureInterest.setName("lblNatureInterest");
//        lblNetWorth.setName("lblNetWorth");
        lblNoInstall.setName("lblNoInstall");
        lblNoInstallments.setName("lblNoInstallments");
        lblNoMonthsMora.setName("lblNoMonthsMora");
        lblOpenDate.setName("lblOpenDate");
        lblOpenDate2.setName("lblOpenDate2");
        lblPLR_Limit.setName("lblPLR_Limit");
        lblPLR_Limit_2.setName("lblPLR_Limit_2");
        lblPenalInter.setName("lblPenalInter");
        lblPhone_BorrowerProfile.setName("lblPhone_BorrowerProfile");
        lblPhone_BorrowerProfile_2.setName("lblPhone_BorrowerProfile_2");
//        lblPhone_CompDetail.setName("lblPhone_CompDetail");
        lblPhone_GD.setName("lblPhone_GD");
        lblPin_BorrowerProfile.setName("lblPin_BorrowerProfile");
        lblPin_BorrowerProfile_2.setName("lblPin_BorrowerProfile_2");
//        lblPin_CompDetail.setName("lblPin_CompDetail");
        lblPin_GD.setName("lblPin_GD");
        lblPostDatedCheque.setName("lblPostDatedCheque");
        lblPrioritySector.setName("lblPrioritySector");
        lblProID_CD.setName("lblProID_CD");
        lblProdID_GD.setName("lblProdID_GD");
        lblProdID_IM.setName("lblProdID_IM");
        lblProdID_RS.setName("lblProdID_RS");
        lblProdId1.setName("lblProdId1");
        lblProductId.setName("lblProductId");
        lblProductID_FD.setName("lblProductID_FD");
        lblProductID_FD_Disp.setName("lblProductID_FD_Disp");
        lblPurposeCode.setName("lblPurposeCode");
        lblPurposeDesc.setName("lblPurposeDesc");
        lblQIS.setName("lblQIS");
//        lblReferences.setName("lblReferences");
        lblRefinancingInsti.setName("lblRefinancingInsti");
        //        lblRemark_FD.setName("lblRemark_FD");
//        lblRemarks.setName("lblRemarks");
//        lblRemarks__CompDetail.setName("lblRemarks__CompDetail");
        lblRepayFreq.setName("lblRepayFreq");
        lblRepayType.setName("lblRepayType");
        lblWeakerSectionCode.setName("lblWeakerSectionCode");
//        lblRiskRating.setName("lblRiskRating");
        lblRiskWeight.setName("lblRiskWeight");
        lblSancDate.setName("lblSancDate");
        lblSancDate_2.setName("lblSancDate_2");
        lblSanctionDate.setName("lblSanctionDate");
        lblSanctionDate1.setName("lblSanctionDate1");
        lblSanctionDate2.setName("lblSanctionDate2");
        lblSanctionNo.setName("lblSanctionNo");
        lblSanctionSlNo.setName("lblSanctionSlNo");
        lblSanctionNo1.setName("lblSanctionNo1");
        lblSanctionNo2.setName("lblSanctionNo2");
        lblSanctioningAuthority.setName("lblSanctioningAuthority");
        lblScheduleNo.setName("lblScheduleNo");
        lblSectorCode1.setName("lblSectorCode1");
        lblSpace1.setName("lblSpace1");
        lblSpace2.setName("lblSpace2");
        lblSpace3.setName("lblSpace3");
        lblState_BorrowerProfile.setName("lblState_BorrowerProfile");
        lblState_BorrowerProfile_2.setName("lblState_BorrowerProfile_2");
//        lblState_CompDetail.setName("lblState_CompDetail");
        lblState_GD.setName("lblState_GD");
        lblStatus.setName("lblStatus");
//        lblStreet_CompDetail.setName("lblStreet_CompDetail");
        lblStreet_GD.setName("lblStreet_GD");
        lblSubsidy.setName("lblSubsidy");
        lblTDate.setName("lblTDate");
        lblTo.setName("lblTo");
        lblToAmt.setName("lblToAmt");
        lblTotalBaseAmt.setName("lblTotalBaseAmt");
        lblTotalInstallAmt.setName("lblTotalInstallAmt");
        lblTypeFacility.setName("lblTypeFacility");
        lblTypeOfFacility.setName("lblTypeOfFacility");
        lblAccOpenDt.setName("lblAccOpenDt");
        lblAccCloseDt.setName("lblAccCloseDt");
        lblRecommandByType.setName("lblRecommandByType");
        //ADDITIONAL SANCTION DETAILS
        lblAdditionalSanctionDt.setName("lblAdditionalSanctionDt");
        tdtAdditionalSanctionDt.setName("tdtAdditionalSanctionDt");
        lblPermittedBy.setName("lblPermittedBy");
        txtPermittedBy.setName("txtPermittedBy");
        btnPermittedBy.setName("btnPermittedBy");
//        btnLTD.setName("btnLTD");
        lblName.setName("lblName");
        lblPermittedName.setName("lblPermittedName");
        lblPermittedDesignation.setName("lblPermittedDesignation");
        lblDesignatedName.setName("lblDesignatedName");
        lblAdditionalLimit.setName("lblAdditionalLimit");
        txtAdditionalLimit.setName("txtAdditionalLimit");
        rdoDP_YES.setName("rdoDP_YES");
        rdoDP_NO.setName("rdoDP_NO");
        lblDPLimit.setName("lblDPLimit");
        btnDelete_ASD.setName("btnDelete_ASD");
        btnNew_ASD.setName("btnNew_ASD");
        btnSave_ASD.setName("btnSave_ASD");

        lblTotalLimit.setName("lblTotalLimit");
        lblTotalLimitAmt.setName("lblTotalLimitAmt");
        panAdditionalkSanctionDetails.setName("panAdditionalkSanctionDetails");
        panPeakSanctionDetails_Sanction1.setName("panPeakSanctionDetails_Sanction1");
        panButton2_SD1.setName("panButton2_SD1");
        panTable_ASD.setName("panTable_ASD");
        rdoGuarnIndividual.setName("rdoGuarnIndividual");
        rdoGuarnInsititutional.setName("rdoGuarnInsititutional");
        panGuarnOption.setName("panGuarnOption");

        panPeakSanctionDetails_Sanction1.setName("panPeakSanctionDetails_Sanction1");
        tblPeakSanctionDetails.setName("tblPeakSanctionDetails");
        mbrTermLoan.setName("mbrTermLoan");
        panBorrowerTabCTable.setName("panBorrowerTabCTable");
        panBorrowerTabTools.setName("panBorrowerTabTools");
        panAccLimit.setName("panAccLimit");
        panTermLoan.setName("panTermLoan");
        panAcc_IM.setName("panAcc_IM");
        panAcc_RS.setName("panAcc_RS");
        panBorrowCompanyDetails.setName("panBorrowCompanyDetails");
        panBorrowProfile.setName("panBorrowProfile");
        panSecurityDetails.setName("panSecurityDetails");
        panBorrowProfile_CustID.setName("panBorrowProfile_CustID");
        panBorrowProfile_CustName.setName("panBorrowProfile_CustName");
//        panButton.setName("panButton");
        panButtons.setName("panButtons");
        panClassDetails.setName("panClassDetails");
        panClassDetails_Acc.setName("panClassDetails_Acc");
        panClassDetails_Details.setName("panClassDetails_Details");
        panCode.setName("panCode");
        panCode2.setName("panCode2");
//        panCompanyDetails.setName("panCompanyDetails");
//        panCompanyDetailsTrash.setName("panCompanyDetailsTrash");
//        panCompanyDetails_Addr.setName("panCompanyDetails_Addr");
        panCompanyDetails_Company.setName("panCompanyDetails_Company");
        panRepaySanctionDetails.setName("panRepaySanctionDetails");
        panDailyLoanSanctionDetails.setName("panDailyLoanSanctionDetails");
        panDate.setName("panDate");
        panDemandPromssoryDate.setName("panDemandPromssoryDate");
        panDoAddSIs.setName("panDoAddSIs");
        panDocumentDetails.setName("panDocumentDetails");
        panFDAccount.setName("panFDAccount");
        panFDDate.setName("panFDDate");
        panFacilityProdID.setName("panFacilityProdID");
        panFacilityDetails.setName("panFacilityDetails");
        panFacilityDetails_Data.setName("panFacilityDetails_Data");
//        panFacilityTools.setName("panFacilityTools");
        panGuaranAddr.setName("panGuaranAddr");
        panGuarantor.setName("panGuarantor");
        panGuarantorDetail_Detail.setName("panGuarantorDetail_Detail");
        panGuarantorDetails.setName("panGuarantorDetails");
        panGuarantorDetailsTable.setName("panGuarantorDetailsTable");
        panGuarantorInsuranceDetails.setName("panGuarantorInsuranceDetails");
        panRunTimeGuarantor.setName("panRunTimeGuarantor");
        panRunTimeGuarantorAddr.setName("panRunTimeGuarantorAddr");
        panInstall_RS.setName("panInstall_RS");
        panRepayment.setName("panRepayment");
        panInterMaintenance.setName("panInterMaintenance");
        panInterMaintenance_Acc.setName("panInterMaintenance_Acc");
        panInterMaintenance_Details.setName("panInterMaintenance_Details");
        panInterMaintenance_Table.setName("panInterMaintenance_Table");
        panInterest.setName("panInterest");
        panLimit.setName("panLimit");
        panMultiDisburseAllow.setName("panMultiDisburseAllow");
        panNatureInterest.setName("panNatureInterest");
        panPostDatedCheque.setName("panPostDatedCheque");
        panProd_CD.setName("panProd_CD");
        panProd_GD.setName("panProd_GD");
        panProd_IM.setName("panProd_IM");
        panProd_RS.setName("panProd_RS");
        panRepaymentCTable.setName("panRepaymentCTable");
        panRepaymentSchedule.setName("panRepaymentSchedule");
        panRepaymentSchedule_Details.setName("panRepaymentSchedule_Details");
        panRiskWeight.setName("panRiskWeight");
//        panSanctionDetails.setName("panSanctionDetails");
//        panSanctionDetails_Mode.setName("panSanctionDetails_Mode");
//        panSanctionDetails_Sanction.setName("panSanctionDetails_Sanction");
//        panSanctionDetails_Table.setName("panSanctionDetails_Table");
//        panSanctionDetails_Upper.setName("panSanctionDetails_Upper");
        panSchedule_RS.setName("panSchedule_RS");
        panStatus.setName("panStatus");
        panSubsidy.setName("panSubsidy");
        panTableFields.setName("panTableFields");
//        panTableFields_SD.setName("panTableFields_SD");
        panTable_IM.setName("panTable_IM");
//        panTable_SD.setName("panTable_SD");
//        panTable2_SD.setName("panTable2_SD");
        panToolBtns.setName("panToolBtns");
        panFacilityChkBoxes.setName("panFacilityChkBoxes");
        panOtherFacilityChkBoxes.setName("panOtherFacilityChkBoxes");
        rdoAccLimit_Main.setName("rdoAccLimit_Main");
        rdoAccLimit_Submit.setName("rdoAccLimit_Submit");
        rdoDoAddSIs_No.setName("rdoDoAddSIs_No");
        rdoDoAddSIs_Yes.setName("rdoDoAddSIs_Yes");
        rdoInterest_Compound.setName("rdoInterest_Compound");
        rdoInterest_Simple.setName("rdoInterest_Simple");
        rdoMultiDisburseAllow_No.setName("rdoMultiDisburseAllow_No");
        rdoMultiDisburseAllow_Yes.setName("rdoMultiDisburseAllow_Yes");
        rdoNatureInterest_NonPLR.setName("rdoNatureInterest_NonPLR");
        rdoNatureInterest_PLR.setName("rdoNatureInterest_PLR");
        rdoPostDatedCheque_No.setName("rdoPostDatedCheque_No");
        rdoPostDatedCheque_Yes.setName("rdoPostDatedCheque_Yes");
        rdoRiskWeight_No.setName("rdoRiskWeight_No");
        rdoRiskWeight_Yes.setName("rdoRiskWeight_Yes");
        rdoSecurityDetails_Fully.setName("rdoSecurityDetails_Fully");
        rdoSecurityDetails_Partly.setName("rdoSecurityDetails_Partly");
        rdoSecurityDetails_Unsec.setName("rdoSecurityDetails_Unsec");
        rdoSubsidy_No.setName("rdoSubsidy_No");
        rdoSubsidy_Yes.setName("rdoSubsidy_Yes");
        sptBorroewrProfile.setName("sptBorroewrProfile");
        sptClassDetails.setName("sptClassDetails");
        sptClassification_vertical.setName("sptClassification_vertical");
//        sptCompanyDetails.setName("sptCompanyDetails");
        sptFacilityDetails_Vert.setName("sptFacilityDetails_Vert");
        sptGuarantorDetail_Hori1.setName("sptGuarantorDetail_Hori1");
        sptGuarantorDetail_Vert.setName("sptGuarantorDetail_Vert");
        sptInterMaintenance_Hori.setName("sptInterMaintenance_Hori");
        sptInterMaintenance_Hori2.setName("sptInterMaintenance_Hori2");
        sptRepatmentSchedule_Hori.setName("sptRepatmentSchedule_Hori");
        sptRepatmentSchedule_Vert.setName("sptRepatmentSchedule_Vert");
        srpGuarantorTable.setName("srpGuarantorTable");
        srpInterMaintenance.setName("srpInterMaintenance");
        srpBorrowerTabCTable.setName("srpBorrowerTabCTable");
        srpRepaymentCTable.setName("srpRepaymentCTable");
//        srpTable2_SD.setName("srpTable2_SD");
        tabLimitAmount.setName("tabLimitAmount");
        tblBorrowerTabCTable.setName("tblBorrowerTabCTable");
        tblGuarantorTable.setName("tblGuarantorTable");
        tblInterMaintenance.setName("tblInterMaintenance");
        tblRepaymentCTable.setName("tblRepaymentCTable");
//        tblSanctionDetails2.setName("tblSanctionDetails2");
        tdtAODDate.setName("tdtAODDate");
//        tdtAsOn.setName("tdtAsOn");
        tdtAsOn_GD.setName("tdtAsOn_GD");
//        tdtCreditFacilityAvailSince.setName("tdtCreditFacilityAvailSince");
//        tdtDateEstablishment.setName("tdtDateEstablishment");
//        tdtDealingWithBankSince.setName("tdtDealingWithBankSince");
        tdtDemandPromNoteDate.setName("tdtDemandPromNoteDate");
        tdtDemandPromNoteExpDate.setName("tdtDemandPromNoteExpDate");
        tdtFDate.setName("tdtFDate");
        tdtFirstInstall.setName("tdtFirstInstall");
        tdtFrom.setName("tdtFrom");
        tdtLastInstall.setName("tdtLastInstall");
        tdtNPADate.setName("tdtNPADate");
        tdtSanctionDate.setName("tdtSanctionDate");
        tdtTDate.setName("tdtTDate");
        tdtTo.setName("tdtTo");
        tdtRepayFromDate.setName("tdtRepayFromDate");
        txtAgainstClearingInter.setName("txtAgainstClearingInter");
        tdtDOB_GD.setName("tdtDOB_GD");
        txtAmtLastInstall.setName("txtAmtLastInstall");
        txtAmtPenulInstall.setName("txtAmtPenulInstall");
//        txtArea_CompDetail.setName("txtArea_CompDetail");
        txtArea_GD.setName("txtArea_GD");
//        txtChiefExecutiveName.setName("txtChiefExecutiveName");
//        txtCompanyRegisNo.setName("txtCompanyRegisNo");
        txtContactPerson.setName("txtContactPerson");
        txtContactPhone.setName("txtContactPhone");
        txtCustID.setName("txtCustID");
        txtCustomerID_GD.setName("txtCustomerID_GD");
        txtFromAmt.setName("txtFromAmt");
        txtGroupDesc.setName("txtGroupDesc");
        txtGuaranAccNo.setName("txtGuaranAccNo");
        txtGuarantorNo.setName("txtGuarantorNo");
        txtGuaranName.setName("txtGuaranName");
        txtGuarantorNetWorth.setName("txtGuarantorNetWorth");
        txtInter.setName("txtInter");
        txtInterExpLimit.setName("txtInterExpLimit");
        txtLaonAmt.setName("txtLaonAmt");
        txtPenalStatement.setName("txtPenalStatement");
        txtLimit_SD.setName("txtLimit_SD");
        txtBalanceShare.setName("txtBalanceShare");
        chkRecovery.setName("chkRecovery");
//        txtLimit_SD2.setName("txtLimit_SD2");
//        txtNetWorth.setName("txtNetWorth");
        txtNoInstall.setName("txtNoInstall");
        txtNoInstallments.setName("txtNoInstallments");
        txtNoMonthsMora.setName("txtNoMonthsMora");
        txtPenalInter.setName("txtPenalInter");
//        txtPhone_CompDetail.setName("txtPhone_CompDetail");
        txtPhone_GD.setName("txtPhone_GD");
//        txtPin_CompDetail.setName("txtPin_CompDetail");
        txtPin_GD.setName("txtPin_GD");
        txtPurposeDesc.setName("txtPurposeDesc");
//        txtReferences.setName("txtReferences");
//        txtRemarks__CompDetail.setName("txtRemarks__CompDetail");
//        txtRiskRating.setName("txtRiskRating");
        txtSanctionNo.setName("txtSanctionNo");
        txtSanctionSlNo.setName("txtSanctionSlNo");
        txtSanctionRemarks.setName("txtSanctionRemarks");
        txtScheduleNo.setName("txtScheduleNo");
//        txtStreet_CompDetail.setName("txtStreet_CompDetail");
        txtStreet_GD.setName("txtStreet_GD");
        txtToAmt.setName("txtToAmt");
        txtTotalBaseAmt.setName("txtTotalBaseAmt");
        txtTotalInstallAmt.setName("txtTotalInstallAmt");
        tdtFacility_Repay_Date.setName("tdtFacility_Repay_Date");
        chkMoratorium_Given.setName("chkMoratorium_Given");
        txtFacility_Moratorium_Period.setName("txtFacility_Moratorium_Period");
        lblFacility_Repay_Date.setName("lblFacility_Repay_Date");
        lblMoratorium_Given.setName("lblMoratorium_Given");
        lblFacility_Moratorium_Period.setName("lblFacility_Moratorium_Period");
        cboOpModeAI.setName("cboOpModeAI");
        cboSettlementModeAI.setName("cboSettlementModeAI");
        cboStmtFreqAD.setName("cboStmtFreqAD");
        chkABBChrgAD.setName("chkABBChrgAD");
        chkATMAD.setName("chkATMAD");
        chkChequeBookAD.setName("chkChequeBookAD");
        chkChequeRetChrgAD.setName("chkChequeRetChrgAD");
        chkCreditAD.setName("chkCreditAD");
        chkCustGrpLimitValidationAD.setName("chkCustGrpLimitValidationAD");
        chkDebitAD.setName("chkDebitAD");
        chkInopChrgAD.setName("chkInopChrgAD");
        chkMobileBankingAD.setName("chkMobileBankingAD");
        chkNPAChrgAD.setName("chkNPAChrgAD");
        chkNROStatusAD.setName("chkNROStatusAD");
        chkNonMainMinBalChrgAD.setName("chkNonMainMinBalChrgAD");
        chkPayIntOnCrBalIN.setName("chkPayIntOnCrBalIN");
        chkPayIntOnDrBalIN.setName("chkPayIntOnDrBalIN");
        chkStmtChrgAD.setName("chkStmtChrgAD");
        chkStopPmtChrgAD.setName("chkStopPmtChrgAD");
        lblABB.setName("lblABB");
        lblABBChrgAD.setName("lblABBChrgAD");
        lblATMFromDateAD.setName("lblATMFromDateAD");
        lblATMNoAD.setName("lblATMNoAD");
        lblATMToDateAD.setName("lblATMToDateAD");
        lblAccCloseChrgAD.setName("lblAccCloseChrgAD");
        lblAccOpeningChrgAD.setName("lblAccOpeningChrgAD");
        lblAgClearingIN.setName("lblAgClearingIN");
        lblAgClearingValueIN.setName("lblAgClearingValueIN");
        lblChequeBookChrgAD.setName("lblChequeBookChrgAD");
        lblChequeReturn.setName("lblChequeReturn");
        lblCollectInoperative.setName("lblCollectInoperative");
        lblCrInterestRateIN.setName("lblCrInterestRateIN");
        lblCrInterestRateValueIN.setName("lblCrInterestRateValueIN");
        lblCredit.setName("lblCredit");
        lblCreditFromDateAD.setName("lblCreditFromDateAD");
        lblCreditNoAD.setName("lblCreditNoAD");
        lblCreditToDateAD.setName("lblCreditToDateAD");
        lblDebit.setName("lblDebit");
        lblDebitFromDateAD.setName("lblDebitFromDateAD");
        lblDebitNoAD.setName("lblDebitNoAD");
        lblDebitToDateAD.setName("lblDebitToDateAD");
        lblDrInterestRateIN.setName("lblDrInterestRateIN");
        lblDrInterestRateValueIN.setName("lblDrInterestRateValueIN");
        lblExcessWithChrgAD.setName("lblExcessWithChrgAD");
        lblFolioChrgAD.setName("lblFolioChrgAD");
        lblMinActBalanceAD.setName("lblMinActBalanceAD");
        lblMisServiceChrgAD.setName("lblMisServiceChrgAD");
        lblNPA.setName("lblNPA");
        lblNPAChrgAD.setName("lblNPAChrgAD");
        lblNonMaintenance.setName("lblNonMaintenance");
        lblOpModeAI.setName("lblOpModeAI");
        lblPenalInterestRateIN.setName("lblPenalInterestRateIN");
        lblPenalInterestValueIN.setName("lblPenalInterestValueIN");
        lblRateCodeIN.setName("lblRateCodeIN");
        lblRateCodeValueIN.setName("lblRateCodeValueIN");
        lblSettlementModeAI.setName("lblSettlementModeAI");
        lblStatement.setName("lblStatement");
        lblStmtFreqAD.setName("lblStmtFreqAD");
        lblStopPayment.setName("lblStopPayment");
        panAccountDetails.setName("panAccountDetails");
        panCardInfo.setName("panCardInfo");
        panDiffCharges.setName("panDiffCharges");
        panFlexiOpt.setName("panFlexiOpt");
        panInterestPayableIN.setName("panInterestPayableIN");
        panIsRequired.setName("panIsRequired");
        panLastIntApp.setName("panLastIntApp");
        panRatesIN.setName("panRatesIN");
        tdtATMFromDateAD.setName("tdtATMFromDateAD");
        tdtATMToDateAD.setName("tdtATMToDateAD");
        tdtCredit.setName("tdtCredit");
        tdtCreditFromDateAD.setName("tdtCreditFromDateAD");
        tdtCreditToDateAD.setName("tdtCreditToDateAD");
        tdtDebit.setName("tdtDebit");
        tdtDebitFromDateAD.setName("tdtDebitFromDateAD");
        tdtAccountOpenDate.setName("tdtAccountOpenDate");
        tdtAccountCloseDate.setName("tdtAccountCloseDate");
        tdtDebitToDateAD.setName("tdtDebitToDateAD");
        tdtNPAChrgAD.setName("tdtNPAChrgAD");
        txtABBChrgAD.setName("txtABBChrgAD");
        txtATMNoAD.setName("txtATMNoAD");
        txtAccCloseChrgAD.setName("txtAccCloseChrgAD");
        txtAccOpeningChrgAD.setName("txtAccOpeningChrgAD");
        txtChequeBookChrgAD.setName("txtChequeBookChrgAD");
        txtCreditNoAD.setName("txtCreditNoAD");
        txtDebitNoAD.setName("txtDebitNoAD");
        txtExcessWithChrgAD.setName("txtExcessWithChrgAD");
        txtFolioChrgAD.setName("txtFolioChrgAD");
        txtMinActBalanceAD.setName("txtMinActBalanceAD");
        txtMisServiceChrgAD.setName("txtMisServiceChrgAD");

        cboPLIName.setName("cboPLIName");
        cboPLIBranch.setName("cboPLIBranch");
        txtGuaratNo.setName("txtGuaratNo");
        tdtGuaranDate.setName("tdtGuaranDate");
        tdtGuaranPeriodFrom.setName("tdtGuaranPeriodFrom");
        tdtGuaranPeriodTo.setName("tdtGuaranPeriodTo");
        txtGuaranCommision.setName("txtGuaranCommision");
        cboGuaranStatus.setName("cboGuaranStatus");
        tdtStatusDate.setName("tdtStatusDate");
        txtGuarnRemarks.setName("txtGuarnRemarks");
        panRunTimeGuarantor.setName("panRunTimeGuarantor");
        panRunTimeGuarantorAddr.setName("panRunTimeGuarantorAddr");

        //salary details
        panBtnSalaryType.setName("panBtnSalaryType");
        btnSalaryNew.setName("btnSalaryNew");
        btnSalarySave.setName("btnSalarySave");
        btnSalaryDelete.setName("btnSalaryDelete");
        // CASE DETAILS
        lblCaseStatus.setName("lblCaseStatu");
        cboCaseStatus.setName("cboCaseStatus");
        lblCaseNumber.setName("lblCaseNumber");
        txtCaseNumber.setName("txtCaseNumber");
        lblFillingDt.setName("lblFillingDt");
        tdtlFillingDt.setName("tdtlFillingDt");
        lblFillingFees.setName("lblFillingFees");
        txtFillingFees.setName("txtFillingFees");
        lblMiscCharges.setName("lblMiscCharges");
        txtMiscCharges.setName("txtMiscCharges");

        //renewal
        lblEnhance.setName("lblEnhance");
        rdoEnhance_Yes.setName("rdoEnhance_Yes");
        rdoEnhance_No.setName("rdoEnhance_No");
        lblRenewal.setName("lblRenewal");
        rdoRenewal_Yes.setName("rdoRenewal_Yes");
        rdoRenewal_No.setName("rdoRenewal_No");
        panODEnhance.setName("panODEnhance");
        panRenewal.setName("panRenewal");


        //mobile banking
        panMobileBanking.setName("panMobileBanking");
        chkMobileBankingAD.setName("chkMobileBankingAD");
        lblMobileNo.setName("lblMobileNo");
        txtMobileNo.setName("txtMobileNo");
        lblMobileSubscribedFrom.setName("lblMobileSubscribedFrom");
        tdtMobileSubscribedFrom.setName("tdtMobileSubscribedFrom");

        //subsidy Interest rebate

        lblSubsidyAmt.setName("lblSubsidyAmt");
        txtSubsidyAmt.setName("txtSubsidyAmt");
        lblSubsidyAccHead.setName("lblSubsidyAccHead");
        txtSubsidyAccHead.setName("txtSubsidyAccHead");
        lblSubsidyAppDt.setName("lblSubsidyAppDt");
        tdtSubsidyAppDt.setName("tdtSubsidyAppDt");
        lblRebateInterest.setName("lblRebateInterest");
        rdoRebateInterest_Yes.setName("rdoRebateInterest_Yes");
        rdoRebateInterest_No.setName("rdoRebateInterest_No");
        lblRebateInterest_Amt.setName("lblRebateInterest_Amt");
        txtRebateInterest_Amt.setName("txtRebateInterest_Amt");
        lblRebateInterest_App_Dt.setName("lblRebateInterest_App_Dt");
        tdtRebateInterest_App_Dt.setName("tdtRebateInterest_App_Dt");

        txtEnteredSubsidyAmt.setName("txtEnteredSubsidyAmt");
        rdoSubsidy_add.setName("rdoSubsidy_add");
        rdoSubsidy_Minus.setName("rdoSubsidy_Minus");
        lblSubsidyAdjustedAmt.setName("lblSubsidyAdjustedAmt");
        txtSubsidyAdjustedAmt.setName("txtSubsidyAdjustedAmt");

        panDepositDetails.setName("panDepositDetails");
        panDepositTable.setName("panDepositTable");
        panDepositType.setName("panDepositType");
        panGoldTypeDetails.setName("panGoldTypeDetails");
        tblDepositDetails.setName("tblDepositDetails");
        txtDepAmount.setName("txtDepAmount");
        txtDepNo.setName("txtDepNo");
        txtGoldRemarks.setName("txtGoldRemarks");
        txtGrossWeight.setName("txtGrossWeight");
        txtJewelleryDetails.setName("txtJewelleryDetails");
        txtMaturityDt.setName("txtMaturityDt");
        txtMaturityValue.setName("txtMaturityValue");
        txtRateOfInterest.setName("txtRateOfInterest");
        txtNetWeight.setName("txtNetWeight");
        txtValueOfGold.setName("txtValueOfGold");
        panDirectRepayment.setName("panDirectRepayment");
        panRepaySanctionDetails.setName("panRepaySanctionDetails");

        lblDirectRepaymentAcctNo.setName("lblDirectRepaymentAcctNo");
        lblDirectRepaymentAcctHead.setName("lblDirectRepaymentAcctHead");
        panCourtRepaymentDetails.setName("panCourtRepaymentDetails");
        panFacilityDetails_Data1.setName("panFacilityDetails_Data1");
        lblInstallmentAmt.setName("lblInstallmentAmt");



        txtCourtOrderNo.setName("txtCourtOrderNo");
        tdtCourtOrderDate.setName("tdtCourtOrderDate");
        tdtOTSDate.setName("tdtOTSDate");
        txtOTSRate.setName("txtOTSRate");
        txtTotAmountDue.setName("txtTotAmountDue");
        txtSettlementAmt.setName("txtSettlementAmt");
        txtPrincipalAmount.setName("txtPrincipalAmount");
        txtInterestAmount.setName("txtInterestAmount");
        txtPenalInterestAmount.setName("txtPenalInterestAmount");
        txtChargeAmount.setName("txtChargeAmount");
        txtTotalAmountWrittenOff.setName("txtTotalAmountWrittenOff");
        txtNoInstallment.setName("txtNoInstallment");
        cboFreq.setName("cboFreq");
        txtInstallmentAmt.setName("txtInstallmentAmt");
        tdtFirstInstallDt.setName("tdtFirstInstallDt");
        tdtLastInstallDate.setName("tdtLastInstallDate");
        txtPenal.setName("txtPenal");
        txtRepayRemarks.setName("txtRepayRemarks");
        rdoRepaySingle_YES.setName("rdoRepaySingle_YES");
        rdoRepaySingle_NO.setName("rdoRepaySingle_NO");

        lblFirstInstallDt.setName("lblFirstInstallDt");
        lblNoInstallment.setName("lblNoInstallment");
        lblFreq.setName("lblFreq");
        lblLastInstallDate.setName("lblLastInstallDate");
        lblPenal.setName("lblPenal");
        lblNoInstallment.setName("lblNoInstallment");
        lblCourtOrderDate.setName("lblCourtOrderDate");
        lblSettlementAmt.setName("lblSettlementAmt");
        lblTotAmountDue.setName("lblTotAmountDue");
        lblOTSRate.setName("lblOTSRate");
        lblOTSDate.setName("lblOTSDate");
        lblCourtOrderNo.setName("lblCourtOrderNo");
        lblEligibleAmt.setName("lblEligibleAmt");
        chkEligibleAmt.setName("chkEligibleAmt");
        lblSanRepaymentType.setName("lblSanRepaymentType");
        cboSanRepaymentType.setName("cboSanRepaymentType");

    }

    private void internationalize() {
        java.util.Locale currentLocale = null;
        currentLocale = new java.util.Locale(TrueTransactMain.language, TrueTransactMain.country);
        resourceBundle = java.util.ResourceBundle.getBundle("com.see.truetransact.ui.termloan.TermLoanRB", currentLocale);
        lblRepayScheduleMode.setText(resourceBundle.getString("lblRepayScheduleMode"));
        lblAcct_Name.setText(resourceBundle.getString("lblAcct_Name"));
        lblExecuteDate_DOC.setText(resourceBundle.getString("lblExecuteDate_DOC"));
        lblExecuted_DOC.setText(resourceBundle.getString("lblExecuted_DOC"));
        lblExpiryDate_DOC.setText(resourceBundle.getString("lblExpiryDate_DOC"));
        lblMandatory_DOC.setText(resourceBundle.getString("lblMandatory_DOC"));
        rdoYes_Executed_DOC.setText(resourceBundle.getString("rdoYes_Executed_DOC"));
        rdoNo_Executed_DOC.setText(resourceBundle.getString("rdoNo_Executed_DOC"));
        rdoYes_Mandatory_DOC.setText(resourceBundle.getString("rdoYes_Mandatory_DOC"));
        rdoNo_Mandatory_DOC.setText(resourceBundle.getString("rdoNo_Mandatory_DOC"));
        lblProdID_Disp_ODetails.setText(resourceBundle.getString("lblProdID_Disp_ODetails"));
        lblProdID_ODetails.setText(resourceBundle.getString("lblProdID_ODetails"));
        lblAcctHead_Disp_ODetails.setText(resourceBundle.getString("lblAcctHead_Disp_ODetails"));
        lblAcctHead_ODetails.setText(resourceBundle.getString("lblAcctHead_ODetails"));
        lblAcctNo_Disp_ODetails.setText(resourceBundle.getString("lblAcctNo_Disp_ODetails"));
        lblAcctNo_ODetails.setText(resourceBundle.getString("lblAcctNo_ODetails"));
        lblDisbursement_Dt.setText(resourceBundle.getString("lblDisbursement_Dt"));
        lblPeriodDifference.setText(resourceBundle.getString("lblPeriodDifference"));
        lblPeriodDifference_Days.setText(resourceBundle.getString("lblPeriodDifference_Days"));
        lblPeriodDifference_Months.setText(resourceBundle.getString("lblPeriodDifference_Months"));
        lblPeriodDifference_Years.setText(resourceBundle.getString("lblPeriodDifference_Years"));
        lblGuarantorNo.setText(resourceBundle.getString("lblGuarantorNo"));
        lblQIS.setText(resourceBundle.getString("lblQIS"));
        lblFDate.setText(resourceBundle.getString("lblFDate"));
        lblIntGetFrom.setText(resourceBundle.getString("lblIntGetFrom"));
        rdoMultiDisburseAllow_No.setText(resourceBundle.getString("rdoMultiDisburseAllow_No"));
        lblAccStatus.setText(resourceBundle.getString("lblAccStatus"));
        lblAccLimit.setText(resourceBundle.getString("lblAccLimit"));
        lblCustName.setText(resourceBundle.getString("lblCustName"));
        chkPrioritySector.setText(resourceBundle.getString("chkPrioritySector"));
        lblPhone_BorrowerProfile.setText(resourceBundle.getString("lblPhone_BorrowerProfile"));
        lblArea_GD.setText(resourceBundle.getString("lblArea_GD"));
        lblScheduleNo.setText(resourceBundle.getString("lblScheduleNo"));
        lblRefinancingInsti.setText(resourceBundle.getString("lblRefinancingInsti"));
        lblInterExpLimit.setText(resourceBundle.getString("lblInterExpLimit"));
        lblConstitution_GD.setText(resourceBundle.getString("lblConstitution_GD"));
        lblAccHead_IM.setText(resourceBundle.getString("lblAccHead_IM"));
        btnInterestMaintenanceNew.setText(resourceBundle.getString("btnInterestMaintenanceNew"));
        lblCity_BorrowerProfile_2.setText(resourceBundle.getString("lblCity_BorrowerProfile_2"));
        chkDocumentcomplete.setText(resourceBundle.getString("chkDocumentcomplete"));
        btnInterestMaintenanceSave.setText(resourceBundle.getString("btnInterestMaintenanceSave"));
        lblContactPhone.setText(resourceBundle.getString("lblContactPhone"));
        lblCategory.setText(resourceBundle.getString("lblCategory"));
        lblAccHead_GD.setText(resourceBundle.getString("lblAccHead_GD"));
        rdoPostDatedCheque_No.setText(resourceBundle.getString("rdoPostDatedCheque_No"));
//        lblRiskRating.setText(resourceBundle.getString("lblRiskRating"));
        lblAgainstClearingInter.setText(resourceBundle.getString("lblAgainstClearingInter"));
        lblPhone_BorrowerProfile_2.setText(resourceBundle.getString("lblPhone_BorrowerProfile_2"));
        lblCountry_GD.setText(resourceBundle.getString("lblCountry_GD"));
        lblCustID.setText(resourceBundle.getString("lblCustID"));
        lblAccNo_IM.setText(resourceBundle.getString("lblAccNo_IM"));
//        btnNew1.setText(resourceBundle.getString("btnNew1"));
//        lblDateEstablishment.setText(resourceBundle.getString("lblDateEstablishment"));
        lblRepayFreq_Repayment.setText(resourceBundle.getString("lblRepayFreq_Repayment"));
        lblPenalInter.setText(resourceBundle.getString("lblPenalInter"));
        lblLastInstall.setText(resourceBundle.getString("lblLastInstall"));
        lblTotalBaseAmt.setText(resourceBundle.getString("lblTotalBaseAmt"));
        lblAccHead_RS_2.setText(resourceBundle.getString("lblAccHead_RS_2"));
        lblAccountHead_FD_Disp.setText(resourceBundle.getString("lblAccountHead_FD_Disp"));
        lblLimitAmt.setText(resourceBundle.getString("lblLimitAmt"));
        lblAmtLastInstall.setText(resourceBundle.getString("lblAmtLastInstall"));
        lblFax_BorrowerProfile.setText(resourceBundle.getString("lblFax_BorrowerProfile"));
        lblAccHead_2.setText(resourceBundle.getString("lblAccHead_2"));
        lblAcctNo_Sanction_Disp.setText(resourceBundle.getString("lblAcctNo_Sanction_Disp"));
        lblAcctNo_Sanction.setText(resourceBundle.getString("lblAcctNo_Sanction"));
        lblAcctNo_FD_Disp.setText(resourceBundle.getString("lblAcctNo_FD_Disp"));
        lblAcctNo_FD.setText(resourceBundle.getString("lblAcctNo_FD"));
        btnSave.setText(resourceBundle.getString("btnSave"));
        lblDemandPromNoteExpDate.setText(resourceBundle.getString("lblDemandPromNoteExpDate"));
        chkECGC.setText(resourceBundle.getString("chkECGC"));
        lblSanctionDate.setText(resourceBundle.getString("lblSanctionDate"));
        lblPenalStatement.setText(resourceBundle.getString("lblPenalStatement"));
        rdoInterest_Simple.setText(resourceBundle.getString("rdoInterest_Simple"));
//        btnSave1.setText(resourceBundle.getString("btnSave1"));
        lblDemandPromNoteDate.setText(resourceBundle.getString("lblDemandPromNoteDate"));
        rdoAccLimit_Submit.setText(resourceBundle.getString("rdoAccLimit_Submit"));
//        lblChiefExecutiveName.setText(resourceBundle.getString("lblChiefExecutiveName"));
        lblCommodityCode.setText(resourceBundle.getString("lblCommodityCode"));
        lblPin_GD.setText(resourceBundle.getString("lblPin_GD"));
        lblPhone_GD.setText(resourceBundle.getString("lblPhone_GD"));
        btnInterestMaintenanceDelete.setText(resourceBundle.getString("btnInterestMaintenanceDelete"));
        lblECGC.setText(resourceBundle.getString("lblECGC"));
        lblToAmt.setText(resourceBundle.getString("lblToAmt"));
//        ((javax.swing.border.TitledBorder)panCompanyDetailsTrash.getBorder()).setTitle(resourceBundle.getString("panCompanyDetailsTrash"));
        lblExpiryDate.setText(resourceBundle.getString("lblExpiryDate"));
        lblDistrictCode.setText(resourceBundle.getString("lblDistrictCode"));
        lblOpenDate2.setText(resourceBundle.getString("lblOpenDate2"));
        lblRepayFreq.setText(resourceBundle.getString("lblRepayFreq"));
        lblFromAmt.setText(resourceBundle.getString("lblFromAmt"));
        lblExpiryDate_2.setText(resourceBundle.getString("lblExpiryDate_2"));
        chkDirectFinance.setText(resourceBundle.getString("chkDirectFinance"));
        lblSpace2.setText(resourceBundle.getString("lblSpace2"));
        lblSanctionNo1.setText(resourceBundle.getString("lblSanctionNo1"));
        lblSanctionSlNo.setText(resourceBundle.getString("lblSanctionSlNo"));
        lblHealthCode.setText(resourceBundle.getString("lblHealthCode"));
        lblSpace3.setText(resourceBundle.getString("lblSpace3"));
        lblSpace1.setText(resourceBundle.getString("lblSpace1"));
        lblPostDatedCheque.setText(resourceBundle.getString("lblPostDatedCheque"));
        chkGurantor.setText(resourceBundle.getString("chkGurantor"));
        lblTypeOfFacility.setText(resourceBundle.getString("lblTypeOfFacility"));
        ((javax.swing.border.TitledBorder) panSecurityDetails_FD.getBorder()).setTitle(resourceBundle.getString("panSecurityDetails_FD"));
        lblPin_BorrowerProfile_2.setText(resourceBundle.getString("lblPin_BorrowerProfile_2"));
        lblOpenDate.setText(resourceBundle.getString("lblOpenDate"));
        lblSanctionNo2.setText(resourceBundle.getString("lblSanctionNo2"));
        lblTo.setText(resourceBundle.getString("lblTo"));
        lblTotalInstallAmt.setText(resourceBundle.getString("lblTotalInstallAmt"));
        lblProdID_RS.setText(resourceBundle.getString("lblProdID_RS"));
        lblProductID_FD.setText(resourceBundle.getString("lblProductID_FD"));
        lblProductID_FD_Disp.setText(resourceBundle.getString("lblProductID_FD_Disp"));
        lblIndusCode.setText(resourceBundle.getString("lblIndusCode"));
        lblGuarantorNetWorth.setText(resourceBundle.getString("lblGuarantorNetWorth"));
        lblAODDate.setText(resourceBundle.getString("lblAODDate"));
        chkInsurance.setText(resourceBundle.getString("chkInsurance"));
//        lblCreditFacilityAvailSince.setText(resourceBundle.getString("lblCreditFacilityAvailSince"));
        ((javax.swing.border.TitledBorder) panBorrowProfile.getBorder()).setTitle(resourceBundle.getString("panBorrowProfile"));
        lblLaonAmt.setText(resourceBundle.getString("lblLaonAmt"));
        lblGuaranAccNo.setText(resourceBundle.getString("lblGuaranAccNo"));
        lblCity_GD.setText(resourceBundle.getString("lblCity_GD"));
        lblStatus.setText(resourceBundle.getString("lblStatus"));
        btnGuarantorNew.setText(resourceBundle.getString("btnGuarantorNew"));
        lblAccHead_IM_2.setText(resourceBundle.getString("lblAccHead_IM_2"));
        btnDelete.setText(resourceBundle.getString("btnDelete"));
        lblSanctionNo.setText(resourceBundle.getString("lblSanctionNo"));
        lblAssetCode.setText(resourceBundle.getString("lblAssetCode"));
        lblInterest.setText(resourceBundle.getString("lblInterest"));
        lblNatureInterest.setText(resourceBundle.getString("lblNatureInterest"));
        rdoSubsidy_No.setText(resourceBundle.getString("rdoSubsidy_No"));
        lblState_GD.setText(resourceBundle.getString("lblState_GD"));
        lblProdId1.setText(resourceBundle.getString("lblProdId1"));
        lblPurposeCode.setText(resourceBundle.getString("lblPurposeCode"));
        lblAccHead_CD_2.setText(resourceBundle.getString("lblAccHead_CD_2"));
//        lblCountry_CompDetail.setText(resourceBundle.getString("lblCountry_CompDetail"));
//        btnDelete1.setText(resourceBundle.getString("btnDelete1"));
//        btnDelete2_SD.setText(resourceBundle.getString("btnDelete2_SD"));
//        btnFacilityDelete.setText(resourceBundle.getString("btnFacilityDelete"));
        lblStreet_GD.setText(resourceBundle.getString("lblStreet_GD"));
        lblProID_CD.setText(resourceBundle.getString("lblProID_CD"));
        btnCustID.setText(resourceBundle.getString("btnCustID"));
        lblRiskWeight.setText(resourceBundle.getString("lblRiskWeight"));
        btnClose.setText(resourceBundle.getString("btnClose"));
//        lblAddressType.setText(resourceBundle.getString("lblAddressType"));
        lblAccNo_RS_2.setText(resourceBundle.getString("lblAccNo_RS_2"));
        rdoNatureInterest_PLR.setText(resourceBundle.getString("rdoNatureInterest_PLR"));
        lblNoMonthsMora.setText(resourceBundle.getString("lblNoMonthsMora"));
        lblMsg.setText(resourceBundle.getString("lblMsg"));
        lblLimit_SD.setText(resourceBundle.getString("lblLimit_SD"));
//        lblLimit_SD2.setText(resourceBundle.getString("lblLimit_SD2"));
        lblSancDate.setText(resourceBundle.getString("lblSancDate"));
        lblSubsidy.setText(resourceBundle.getString("lblSubsidy"));
        lblPin_BorrowerProfile.setText(resourceBundle.getString("lblPin_BorrowerProfile"));
        lblBorrowerNo.setText(resourceBundle.getString("lblBorrowerNo"));
        lblSanctionDate1.setText(resourceBundle.getString("lblSanctionDate1"));
        lblModeSanction.setText(resourceBundle.getString("lblModeSanction"));
        lblAmtPenulInstall.setText(resourceBundle.getString("lblAmtPenulInstall"));
        rdoSecurityDetails_Unsec.setText(resourceBundle.getString("rdoSecurityDetails_Unsec"));
        lblDocumentcomplete.setText(resourceBundle.getString("lblDocumentcomplete"));
        lblAccNo_GD_2.setText(resourceBundle.getString("lblAccNo_GD_2"));
        lblWeakerSectionCode.setText(resourceBundle.getString("lblWeakerSectionCode"));
        lblTDate.setText(resourceBundle.getString("lblTDate"));
//        lblCity_CompDetail.setText(resourceBundle.getString("lblCity_CompDetail"));
        lblPLR_Limit.setText(resourceBundle.getString("lblPLR_Limit"));
        btnGuarantorSave.setText(resourceBundle.getString("btnGuarantorSave"));
        lblSanctioningAuthority.setText(resourceBundle.getString("lblSanctioningAuthority"));
        lblAccNo_CD_2.setText(resourceBundle.getString("lblAccNo_CD_2"));
        lblFrom.setText(resourceBundle.getString("lblFrom"));
        lblDoAddSIs.setText(resourceBundle.getString("lblDoAddSIs"));
        btnCustomerID_GD.setText(resourceBundle.getString("btnCustomerID_GD"));
        btnAccNo.setText(resourceBundle.getString("btnAccNo"));
        lblAsOn_GD.setText(resourceBundle.getString("lblAsOn_GD"));
        lblAccNo_IM_2.setText(resourceBundle.getString("lblAccNo_IM_2"));
//        lblNetWorth.setText(resourceBundle.getString("lblNetWorth"));
        btnPrint.setText(resourceBundle.getString("btnPrint"));
        lblAccHead.setText(resourceBundle.getString("lblAccHead"));
        lblNoInstallments.setText(resourceBundle.getString("lblNoInstallments"));
        rdoSubsidy_Yes.setText(resourceBundle.getString("rdoSubsidy_Yes"));
        lblAccNo_CD.setText(resourceBundle.getString("lblAccNo_CD"));
        lblLimitAmt_2.setText(resourceBundle.getString("lblLimitAmt_2"));
        lblSancDate_2.setText(resourceBundle.getString("lblSancDate_2"));
        lblPrioritySector.setText(resourceBundle.getString("lblPrioritySector"));
//        lblState_CompDetail.setText(resourceBundle.getString("lblState_CompDetail"));
        lblInter.setText(resourceBundle.getString("lblInter"));
        lblBorrowerNo_2.setText(resourceBundle.getString("lblBorrowerNo_2"));
        lblProductId.setText(resourceBundle.getString("lblProductId"));
        rdoRiskWeight_No.setText(resourceBundle.getString("rdoRiskWeight_No"));
        lblFirstInstall.setText(resourceBundle.getString("lblFirstInstall"));
//        lblPhone_CompDetail.setText(resourceBundle.getString("lblPhone_CompDetail"));
        lblRepayType.setText(resourceBundle.getString("lblRepayType"));
        lblSanctionDate2.setText(resourceBundle.getString("lblSanctionDate2"));
        lblGroupDesc.setText(resourceBundle.getString("lblGroupDesc"));
        lblAccHead_CD.setText(resourceBundle.getString("lblAccHead_CD"));
        lblSectorCode1.setText(resourceBundle.getString("lblSectorCode1"));
        rdoDoAddSIs_No.setText(resourceBundle.getString("rdoDoAddSIs_No"));
        lblGuaranName.setText(resourceBundle.getString("lblGuaranName"));
        rdoPostDatedCheque_Yes.setText(resourceBundle.getString("rdoPostDatedCheque_Yes"));
        btnNew.setText(resourceBundle.getString("btnNew"));
        lblCustomerID_GD.setText(resourceBundle.getString("lblCustomerID_GD"));
        lblProdID_IM.setText(resourceBundle.getString("lblProdID_IM"));
        lblDirectFinance.setText(resourceBundle.getString("lblDirectFinance"));
        lblAccNo_RS.setText(resourceBundle.getString("lblAccNo_RS"));
//        lblCompanyRegisNo.setText(resourceBundle.getString("lblCompanyRegisNo"));
//        lblDealingWithBankSince.setText(resourceBundle.getString("lblDealingWithBankSince"));
        lblTypeFacility.setText(resourceBundle.getString("lblTypeFacility"));
        chkQIS.setText(resourceBundle.getString("chkQIS"));
        lblInterestType.setText(resourceBundle.getString("lblInterestType"));
        rdoAccLimit_Main.setText(resourceBundle.getString("rdoAccLimit_Main"));
        lblConstitution.setText(resourceBundle.getString("lblConstitution"));
        lblAccHead_RS.setText(resourceBundle.getString("lblAccHead_RS"));
        lblAccountHead_FD.setText(resourceBundle.getString("lblAccountHead_FD"));
        rdoSecurityDetails_Fully.setText(resourceBundle.getString("rdoSecurityDetails_Fully"));
        rdoSecurityDetails_Partly.setText(resourceBundle.getString("rdoSecurityDetails_Partly"));
//        lblArea_CompDetail.setText(resourceBundle.getString("lblArea_CompDetail"));
        btnGuarantorDelete.setText(resourceBundle.getString("btnGuarantorDelete"));
        lbl20Code.setText(resourceBundle.getString("lbl20Code"));
        lblContactPerson.setText(resourceBundle.getString("lblContactPerson"));
        lblState_BorrowerProfile.setText(resourceBundle.getString("lblState_BorrowerProfile"));
        btnEdit.setText(resourceBundle.getString("btnEdit"));
        rdoDoAddSIs_Yes.setText(resourceBundle.getString("rdoDoAddSIs_Yes"));
//        lblReferences.setText(resourceBundle.getString("lblReferences"));
        rdoRiskWeight_Yes.setText(resourceBundle.getString("rdoRiskWeight_Yes"));
        rdoNatureInterest_NonPLR.setText(resourceBundle.getString("rdoNatureInterest_NonPLR"));
        lblCity_BorrowerProfile.setText(resourceBundle.getString("lblCity_BorrowerProfile"));
        lblFax_BorrowerProfile_2.setText(resourceBundle.getString("lblFax_BorrowerProfile_2"));
        chkStockInspect.setText(resourceBundle.getString("chkStockInspect"));
        lblGuaranteeCoverCode.setText(resourceBundle.getString("lblGuaranteeCoverCode"));
//        lblPin_CompDetail.setText(resourceBundle.getString("lblPin_CompDetail"));
        lblNoInstall.setText(resourceBundle.getString("lblNoInstall"));
        lblMultiDisburseAllow.setText(resourceBundle.getString("lblMultiDisburseAllow"));
        rdoMultiDisburseAllow_Yes.setText(resourceBundle.getString("rdoMultiDisburseAllow_Yes"));
//        lblRemarks__CompDetail.setText(resourceBundle.getString("lblRemarks__CompDetail"));
//        lblNatureBusiness.setText(resourceBundle.getString("lblNatureBusiness"));
//        lblStreet_CompDetail.setText(resourceBundle.getString("lblStreet_CompDetail"));
        lblCustName_2.setText(resourceBundle.getString("lblCustName_2"));
        lblProdID_GD.setText(resourceBundle.getString("lblProdID_GD"));
//        lblDepositsNo.setText(resourceBundle.getString("lblDepositsNo"));

        lblAccNo_GD.setText(resourceBundle.getString("lblAccNo_GD"));
//        lblRemarks.setText(resourceBundle.getString("lblRemarks"));
        ((javax.swing.border.TitledBorder) panDemandPromssoryDate.getBorder()).setTitle(resourceBundle.getString("panDemandPromssoryDate"));
        lblDOB_GD.setText(resourceBundle.getString("lblDOB_GD"));
        lblState_BorrowerProfile_2.setText(resourceBundle.getString("lblState_BorrowerProfile_2"));
        lblNPADate.setText(resourceBundle.getString("lblNPADate"));
//        lblAsOn.setText(resourceBundle.getString("lblAsOn"));
        lblPLR_Limit_2.setText(resourceBundle.getString("lblPLR_Limit_2"));
        rdoInterest_Compound.setText(resourceBundle.getString("rdoInterest_Compound"));

        lblAccHead_GD_2.setText(resourceBundle.getString("lblAccHead_GD_2"));
        lblPurposeDesc.setText(resourceBundle.getString("lblPurposeDesc"));
        lblGovtSchemeCode.setText(resourceBundle.getString("lblGovtSchemeCode"));
        btnCancel.setText(resourceBundle.getString("btnCancel"));
        btnNew_Borrower.setText(resourceBundle.getString("btnNew_Borrower"));
        btnToMain_Borrower.setText(resourceBundle.getString("btnToMain_Borrower"));
        btnDeleteBorrower.setText(resourceBundle.getString("btnDelete_Borrower"));
        btnRepayment_Delete.setText(resourceBundle.getString("btnRepayment_Delete"));
        btnRepayment_New.setText(resourceBundle.getString("btnRepayment_New"));
        btnRepayment_Save.setText(resourceBundle.getString("btnRepayment_Save"));
        lblFacility_Repay_Date.setText(resourceBundle.getString("lblFacility_Repay_Date"));
        lblMoratorium_Given.setText(resourceBundle.getString("lblMoratorium_Given"));
        lblFacility_Moratorium_Period.setText(resourceBundle.getString("lblFacility_Moratorium_Period"));
        lblDPLimit.setText(resourceBundle.getString("lblDPLimit"));

        //additional sanction details
        lblAdditionalSanctionDt.setText(resourceBundle.getString("lblAdditionalSanctionDt"));
        lblPermittedBy.setText(resourceBundle.getString("lblPermittedBy"));
        lblName.setText(resourceBundle.getString("lblName"));
        lblPermittedName.setText(resourceBundle.getString("lblPermittedName"));
        lblPermittedDesignation.setText(resourceBundle.getString("lblPermittedDesignation"));
        lblDesignatedName.setText(resourceBundle.getString("lblDesignatedName"));
        lblAdditionalLimit.setText(resourceBundle.getString("lblAdditionalLimit"));
        btnDelete_ASD.setText(resourceBundle.getString("btnDelete_ASD"));
        btnNew_ASD.setText(resourceBundle.getString("btnNew_ASD"));
        btnSave_ASD.setText(resourceBundle.getString("btnSave_ASD"));

        lblTotalLimit.setText(resourceBundle.getString("lblTotalLimit"));
        lblPenalInterestValueIN.setText(resourceBundle.getString("lblPenalInterestValueIN"));
        btnClose.setText(resourceBundle.getString("btnClose"));
        chkNonMainMinBalChrgAD.setText(resourceBundle.getString("chkNonMainMinBalChrgAD"));
        lblAgClearingIN.setText(resourceBundle.getString("lblAgClearingIN"));
        btnCancel.setText(resourceBundle.getString("btnCancel"));
        lblCrInterestRateIN.setText(resourceBundle.getString("lblCrInterestRateIN"));
        lblFolioChrgAD.setText(resourceBundle.getString("lblFolioChrgAD"));
        lblMinActBalanceAD.setText(resourceBundle.getString("lblMinActBalanceAD"));
        ((javax.swing.border.TitledBorder) panLastIntApp.getBorder()).setTitle(resourceBundle.getString("panLastIntApp"));
        lblPenalInterestRateIN.setText(resourceBundle.getString("lblPenalInterestRateIN"));
        lblStatement.setText(resourceBundle.getString("lblStatement"));
        chkChequeRetChrgAD.setText(resourceBundle.getString("chkChequeRetChrgAD"));
        lblDebit.setText(resourceBundle.getString("lblDebit"));
        btnException.setText(resourceBundle.getString("btnException"));
        lblATMToDateAD.setText(resourceBundle.getString("lblATMToDateAD"));
        lblCredit.setText(resourceBundle.getString("lblCredit"));
        lblNPA.setText(resourceBundle.getString("lblNPA"));
        lblATMNoAD.setText(resourceBundle.getString("lblATMNoAD"));
        lblSpace1.setText(resourceBundle.getString("lblSpace1"));
        ((javax.swing.border.TitledBorder) panFlexiOpt.getBorder()).setTitle(resourceBundle.getString("panFlexiOpt"));
        chkABBChrgAD.setText(resourceBundle.getString("chkABBChrgAD"));
        chkATMAD.setText(resourceBundle.getString("chkATMAD"));
        chkNPAChrgAD.setText(resourceBundle.getString("chkNPAChrgAD"));
        chkStmtChrgAD.setText(resourceBundle.getString("chkStmtChrgAD"));
        lblABBChrgAD.setText(resourceBundle.getString("lblABBChrgAD"));
        btnDelete.setText(resourceBundle.getString("btnDelete"));
        lblNPAChrgAD.setText(resourceBundle.getString("lblNPAChrgAD"));
        chkCreditAD.setText(resourceBundle.getString("chkCreditAD"));
        lblDebitToDateAD.setText(resourceBundle.getString("lblDebitToDateAD"));
        lblChequeBookChrgAD.setText(resourceBundle.getString("lblChequeBookChrgAD"));
        lblCreditToDateAD.setText(resourceBundle.getString("lblCreditToDateAD"));
        btnReject.setText(resourceBundle.getString("btnReject"));
        lblDebitNoAD.setText(resourceBundle.getString("lblDebitNoAD"));
        chkChequeBookAD.setText(resourceBundle.getString("chkChequeBookAD"));
        lblRateCodeValueIN.setText(resourceBundle.getString("lblRateCodeValueIN"));
        lblDebitFromDateAD.setText(resourceBundle.getString("lblDebitFromDateAD"));
        lblExcessWithChrgAD.setText(resourceBundle.getString("lblExcessWithChrgAD"));
        chkCustGrpLimitValidationAD.setText(resourceBundle.getString("chkCustGrpLimitValidationAD"));
        btnEdit.setText(resourceBundle.getString("btnEdit"));
        lblAgClearingValueIN.setText(resourceBundle.getString("lblAgClearingValueIN"));
        ((javax.swing.border.TitledBorder) panInterestPayableIN.getBorder()).setTitle(resourceBundle.getString("panInterestPayableIN"));
        lblCollectInoperative.setText(resourceBundle.getString("lblCollectInoperative"));
        btnSave.setText(resourceBundle.getString("btnSave"));
        chkPayIntOnCrBalIN.setText(resourceBundle.getString("chkPayIntOnCrBalIN"));
        btnAuthorize.setText(resourceBundle.getString("btnAuthorize"));
        lblMsg.setText(resourceBundle.getString("lblMsg"));
        lblSettlementModeAI.setText(resourceBundle.getString("lblSettlementModeAI"));
        ((javax.swing.border.TitledBorder) panIsRequired.getBorder()).setTitle(resourceBundle.getString("panIsRequired"));
        lblNonMaintenance.setText(resourceBundle.getString("lblNonMaintenance"));
        chkNROStatusAD.setText(resourceBundle.getString("chkNROStatusAD"));
        lblStmtFreqAD.setText(resourceBundle.getString("lblStmtFreqAD"));
        lblDrInterestRateIN.setText(resourceBundle.getString("lblDrInterestRateIN"));
        lblMisServiceChrgAD.setText(resourceBundle.getString("lblMisServiceChrgAD"));
        lblABB.setText(resourceBundle.getString("lblABB"));
        lblAccOpeningChrgAD.setText(resourceBundle.getString("lblAccOpeningChrgAD"));
        lblCreditFromDateAD.setText(resourceBundle.getString("lblCreditFromDateAD"));
        lblDrInterestRateValueIN.setText(resourceBundle.getString("lblDrInterestRateValueIN"));
        lblStatus.setText(resourceBundle.getString("lblStatus"));
        lblCrInterestRateValueIN.setText(resourceBundle.getString("lblCrInterestRateValueIN"));
        chkMobileBankingAD.setText(resourceBundle.getString("chkMobileBankingAD"));
        lblATMFromDateAD.setText(resourceBundle.getString("lblATMFromDateAD"));
        chkPayIntOnDrBalIN.setText(resourceBundle.getString("chkPayIntOnDrBalIN"));
        lblAccCloseChrgAD.setText(resourceBundle.getString("lblAccCloseChrgAD"));
        chkInopChrgAD.setText(resourceBundle.getString("chkInopChrgAD"));
        lblRateCodeIN.setText(resourceBundle.getString("lblRateCodeIN"));
        lblOpModeAI.setText(resourceBundle.getString("lblOpModeAI"));
        ((javax.swing.border.TitledBorder) panDiffCharges.getBorder()).setTitle(resourceBundle.getString("panDiffCharges"));
        ((javax.swing.border.TitledBorder) panCardInfo.getBorder()).setTitle(resourceBundle.getString("panCardInfo"));
        ((javax.swing.border.TitledBorder) panRatesIN.getBorder()).setTitle(resourceBundle.getString("panRatesIN"));
        lblCategory.setText(resourceBundle.getString("lblCategory"));
        lblCreditNoAD.setText(resourceBundle.getString("lblCreditNoAD"));
        lblStopPayment.setText(resourceBundle.getString("lblStopPayment"));
        chkStopPmtChrgAD.setText(resourceBundle.getString("chkStopPmtChrgAD"));
        chkDebitAD.setText(resourceBundle.getString("chkDebitAD"));
        lblChequeReturn.setText(resourceBundle.getString("lblChequeReturn"));
        lblCustName.setText(resourceBundle.getString("lblCustName"));
        lblAccOpenDt.setText(resourceBundle.getString("lblAccOpenDt"));
        lblAccCloseDt.setText(resourceBundle.getString("lblAccCloseDt"));
        lblRecommandByType.setText(resourceBundle.getString("lblRecommandByType"));
        //Case Details
        lblCaseStatus.setText(resourceBundle.getString("lblCaseStatus"));
        lblCaseNumber.setText(resourceBundle.getString("lblCaseNumber"));
        lblFillingDt.setText(resourceBundle.getString("lblFillingDt"));
        lblFillingFees.setText(resourceBundle.getString("lblFillingFees"));
        lblMiscCharges.setText(resourceBundle.getString("lblMiscCharges"));
        lblRenewal.setText(resourceBundle.getString("lblRenewal"));
        lblEnhance.setText(resourceBundle.getString("lblEnhance"));
        //subsidy Interest rebate

        lblSubsidyAmt.setText(resourceBundle.getString("lblSubsidyAmt"));
        lblSubsidyAccHead.setText(resourceBundle.getString("lblSubsidyAccHead"));
        lblSubsidyAppDt.setText(resourceBundle.getString("lblSubsidyAppDt"));
        lblRebateInterest.setText(resourceBundle.getString("lblRebateInterest"));
        rdoRebateInterest_Yes.setText(resourceBundle.getString("rdoRebateInterest_Yes"));
        rdoRebateInterest_No.setText(resourceBundle.getString("rdoRebateInterest_No"));
        lblRebateInterest_Amt.setText(resourceBundle.getString("lblRebateInterest_Amt"));
        lblRebateInterest_App_Dt.setText(resourceBundle.getString("lblRebateInterest_App_Dt"));

        rdoSubsidy_add.setText(resourceBundle.getString("rdoSubsidy_add"));
        rdoSubsidy_Minus.setText(resourceBundle.getString("rdoSubsidy_Minus"));
        lblSubsidyAdjustedAmt.setText(resourceBundle.getString("lblSubsidyAdjustedAmt"));

        lblDirectRepaymentAcctNo.setText(resourceBundle.getString("lblDirectRepaymentAcctNo"));
        lblDirectRepaymentAcctHead.setText(resourceBundle.getString("lblDirectRepaymentAcctHead"));
        lblEligibleAmt.setText(resourceBundle.getString("lblEligibleAmt"));
        lblSanRepaymentType.setText(resourceBundle.getString("lblRepayType"));


    }

    private void removeRadioButtons() {
        removeFacilityRadioBtns();
        removeRepaymentRadioBtns();
        removeDocumentRadioBtns();
        removeGuarantorRadioBtns();
        removeRenewalRadioBtns();
        removeGahanRadioButton();
        removeDirectPaymentRadioButton();
        removeCourtOrderRadioButton();
    }

    private void removeCourtOrderRadioButton() {
        rdoCourtOrderGroup.remove(rdoRepaySingle_YES);
        rdoCourtOrderGroup.remove(rdoRepaySingle_NO);
    }

    private void removeDirectPaymentRadioButton() {
        rdoDirectRepaymentGroup.remove(DirectRepayment_Yes);
        rdoDirectRepaymentGroup.remove(DirectRepayment_No);
    }

    private void removeRenewalRadioBtns() {
        rdoEnhanceGroup.remove(rdoEnhance_Yes);
        rdoEnhanceGroup.remove(rdoEnhance_No);
        rdoRenewalGroup.remove(rdoRenewal_Yes);
        rdoRenewalGroup.remove(rdoRenewal_No);

    }

    private void removeFacilityRadioBtns() {
        removeFacilitySecurityRadioBtns();
        rdoAccLimit.remove(rdoAccLimit_Main);
        rdoAccLimit.remove(rdoAccLimit_Submit);
        rdoRiskWeight.remove(rdoRiskWeight_No);
        rdoRiskWeight.remove(rdoRiskWeight_Yes);
        rdoMultiDisburseAllow.remove(rdoMultiDisburseAllow_No);
        rdoMultiDisburseAllow.remove(rdoMultiDisburseAllow_Yes);
        removeFacilityInterestNature();
        removeFacilitySubsidy();
        removeFacilityRebateInterest();
        rdoInterest.remove(rdoInterest_Compound);
        rdoInterest.remove(rdoInterest_Simple);
    }

    private void removeGuarantorRadioBtns() {
        rdoGuarnConstution.remove(rdoGuarnIndividual);
        rdoGuarnConstution.remove(rdoGuarnInsititutional);

    }

    private void removeFacilitySecurityRadioBtns() {
        rdoSecurityDetails.remove(rdoSecurityDetails_Fully);
        rdoSecurityDetails.remove(rdoSecurityDetails_Partly);
        rdoSecurityDetails.remove(rdoSecurityDetails_Unsec);
    }

    private void removeFacilitySubsidy() {
        rdoSubsidy.remove(rdoSubsidy_No);
        rdoSubsidy.remove(rdoSubsidy_Yes);
    }

    private void removeFacilityRebateInterest() {
        rdoRebateInterestGroup.remove(rdoRebateInterest_Yes);
        rdoRebateInterestGroup.remove(rdoRebateInterest_No);
    }

    private void removeFacilityInterestNature() {
        rdoNatureInterest.remove(rdoNatureInterest_NonPLR);
        rdoNatureInterest.remove(rdoNatureInterest_PLR);
    }

    private void removeRepaymentRadioBtns() {
        rdoDoAddSIs.remove(rdoDoAddSIs_No);
        rdoDoAddSIs.remove(rdoDoAddSIs_Yes);

        rdoPostDatedCheque.remove(rdoPostDatedCheque_Yes);
        rdoPostDatedCheque.remove(rdoPostDatedCheque_No);

        rdoStatus_Repayment.remove(rdoActive_Repayment);
        rdoStatus_Repayment.remove(rdoInActive_Repayment);

    }

    private void removeGahanRadioButton() {
        rdoGahanGroup.remove(rdoGahanYes);
        rdoGahanGroup.remove(rdoGahanNo);

    }

    private void removeDocumentRadioBtns() {
        removeDocSubmittRadioBtns();
        removeDocExecuteRadioBtns();
        removeDocMandatoryRadioBtns();
    }

    private void removeDocSubmittRadioBtns() {
        rdoIsSubmitted_DocumentDetails.remove(rdoYes_DocumentDetails);
        rdoIsSubmitted_DocumentDetails.remove(rdoNo_DocumentDetails);
    }

    private void removeDocExecuteRadioBtns() {
        rdoExecuted_DOC.remove(rdoYes_Executed_DOC);
        rdoExecuted_DOC.remove(rdoNo_Executed_DOC);
    }

    private void removeDocMandatoryRadioBtns() {
        rdoMandatory_DOC.remove(rdoYes_Mandatory_DOC);
        rdoMandatory_DOC.remove(rdoNo_Mandatory_DOC);
    }

    public void update(Observable observed, Object arg) {
        removeRadioButtons();
        lblStatus.setText(observable.getLblStatus());
        lblBorrowerNo_2.setText(observableBorrow.getLblBorrowerNo_2());
        lblOpenDate2.setText(observableBorrow.getLblOpenDate());
        lblCustName_2.setText(observableBorrow.getLblCustName());
        lblProdID_Disp_ODetails.setText(observableOtherDetails.getLblProdID_Disp_ODetails());
        lblAcctHead_Disp_ODetails.setText(observableOtherDetails.getLblAcctHead_Disp_ODetails());
        lblAcctNo_Disp_ODetails.setText(observableOtherDetails.getLblAcctNo_Disp_ODetails());
        lblAccHead_RS_2.setText(observableRepay.getLblAccHead_RS_2());
        lblAccountHead_FD_Disp.setText(observable.getLblAccountHead_FD_Disp());
        lblAccNo_RS_2.setText(observableRepay.getLblAccNo_RS_2());
        lblAccHead_GD_2.setText(observableGuarantor.getLblAccHead_GD_2());
        lblAccNo_GD_2.setText(observableGuarantor.getLblAccNo_GD_2());
        lblAccHead_IM_2.setText(observableInt.getLblAccHead_IM_2());
        lblAccNo_IM_2.setText(observableInt.getLblAccNo_IM_2());
        lblAccHead_CD_2.setText(observableClassi.getLblAccHead_CD_2());
        lblAccNo_CD_2.setText(observableClassi.getLblAccNo_CD_2());
        lblAcctNo_Sanction_Disp.setText(observable.getStrACNumber());
        lblAcctNo_FD_Disp.setText(observable.getStrACNumber());
        lblCity_BorrowerProfile_2.setText(observableBorrow.getLblCity());
        lblState_BorrowerProfile_2.setText(observableBorrow.getLblState());
        lblPin_BorrowerProfile_2.setText(observableBorrow.getLblPin());
        lblPhone_BorrowerProfile_2.setText(observableBorrow.getLblPhone());
        lblFax_BorrowerProfile_2.setText(observableBorrow.getLblFax());
        lblAccHead_2.setText(observable.getLblAccHead_2());
        lblLimitAmt_2.setText(observableInt.getLblLimitAmt_2());
        lblPLR_Limit_2.setText(observableInt.getLblPLR_Limit_2());
        lblSancDate_2.setText(observableInt.getLblSancDate_2());
        lblExpiryDate_2.setText(observableInt.getLblExpiryDate_2());
        lblSanctionNo2.setText(observableClassi.getLblSanctionNo2());
        lblSanctionDate2.setText(observableClassi.getLblSanctionDate2());
        txtCustID.setText(observableBorrow.getTxtCustID());
        cboConstitution.setSelectedItem(observableBorrow.getCboConstitution());
        cboCategory.setSelectedItem(observableBorrow.getCboCategory());
        txtApplicationNo.setText(observableBorrow.getTxtApplicationNo());
        if (CommonUtil.convertObjToStr(observableBorrow.getTxtSHGId()).length() > 0) {
            SHGVisible(true);
            rdoSHG_Yes.setSelected(true);
            txtSHGId.setText(observableBorrow.getTxtSHGId());
//            txtSHGId.setEnabled(false);
//            btnSHGId.setEnabled(false);
            rdoSHG_Yes.setEnabled(false);
            rdoSHG_No.setEnabled(false);
        } else {
            SHGVisible(false);
            if (observable.getActionType() != ClientConstants.ACTIONTYPE_NEW) {
                rdoSHG_Yes.setEnabled(false);
                rdoSHG_No.setEnabled(false);
            }
        }
        cboAccStatus.setSelectedItem(observable.getCboAccStatus());
        txtSanctionNo.setText(observable.getTxtSanctionNo());
        txtSanctionSlNo.setText(observable.getTxtSanctionSlNo());
        txtSanctionRemarks.setText(observable.getTxtSanctionRemarks());
        tdtSanctionDate.setDateValue(observable.getTdtSanctionDate());
        cboSanctioningAuthority.setSelectedItem(observable.getCboSanctioningAuthority());
        cboModeSanction.setSelectedItem(observable.getCboModeSanction());
        txtNoInstallments.setText(observable.getTxtNoInstallments());

        txtPeriodDifference_Days.setText(observable.getTxtPeriodDifference_Days());
        txtPeriodDifference_Months.setText(observable.getTxtPeriodDifference_Months());
        txtPeriodDifference_Years.setText(observable.getTxtPeriodDifference_Years());
        tdtFacility_Repay_Date.setDateValue(observable.getTdtFacility_Repay_Date());
        tdtDirect_Repay_Date.setDateValue(observable.getTdtTDate());
        txtFacility_Moratorium_Period.setText(observable.getTxtFacility_Moratorium_Period());
        chkMoratorium_Given.setSelected(observable.getChkMoratorium_Given());
        txtLimit_SD.setText(observable.getTxtLimit_SD());
//        txtLimit_SD2.setText(observable.getTxtLimit_SDMoneyDeposit());
        tdtFDate.setDateValue(observable.getTdtFDate());
        tdtTDate.setDateValue(observable.getTdtTDate());
        chkStockInspect.setSelected(observable.getChkStockInspect());
        chkInsurance.setSelected(observable.getChkInsurance());
        chkGurantor.setSelected(observable.getChkGurantor());
        chkEligibleAmt.setSelected(observable.isChkEligibleAmt());
        chkAuthorizedSignatory.setSelected(observable.isChkAuthorizedSignatory());
        chkPOFAttorney.setSelected(observable.isChkPOFAttorney());
        chkDocDetails.setSelected(observable.isChkDocDetails());
        chkAccountTransfer.setSelected(observable.getChkAcctTransfer());
        rdoSecurityDetails_Unsec.setSelected(observable.getRdoSecurityDetails_Unsec());
        rdoSecurityDetails_Partly.setSelected(observable.getRdoSecurityDetails_Partly());
        rdoSecurityDetails_Fully.setSelected(observable.getRdoSecurityDetails_Fully());
        rdoAccLimit_Main.setSelected(observable.getRdoAccLimit_Main());
        rdoAccLimit_Submit.setSelected(observable.getRdoAccLimit_Submit());
        rdoNatureInterest_PLR.setSelected(observable.getRdoNatureInterest_PLR());
        rdoNatureInterest_NonPLR.setSelected(observable.getRdoNatureInterest_NonPLR());
        cboInterestType.setSelectedItem(observable.getCboInterestType());
        rdoDP_YES.setSelected(observable.isRdoDP_YES());
        rdoDP_NO.setSelected(observable.isRdoDP__NO());
        rdoRiskWeight_Yes.setSelected(observable.getRdoRiskWeight_Yes());
        rdoRiskWeight_No.setSelected(observable.getRdoRiskWeight_No());
        tdtDemandPromNoteDate.setDateValue(observable.getTdtDemandPromNoteDate());
        tdtDemandPromNoteExpDate.setDateValue(observable.getTdtDemandPromNoteExpDate());
        tdtAODDate.setDateValue(observable.getTdtAODDate());
        rdoMultiDisburseAllow_Yes.setSelected(observable.getRdoMultiDisburseAllow_Yes());
        rdoMultiDisburseAllow_No.setSelected(observable.getRdoMultiDisburseAllow_No());
        rdoSubsidy_Yes.setSelected(observable.getRdoSubsidy_Yes());
        rdoSubsidy_No.setSelected(observable.getRdoSubsidy_No());
        txtPurposeDesc.setText(observable.getTxtPurposeDesc());
        txtGroupDesc.setText(observable.getTxtGroupDesc());
        rdoInterest_Simple.setSelected(observable.getRdoInterest_Simple());
        rdoInterest_Compound.setSelected(observable.getRdoInterest_Compound());
        txtContactPerson.setText(observable.getTxtContactPerson());
        txtContactPhone.setText(observable.getTxtContactPhone());
        txtAcct_Name.setText(observable.getTxtAcct_Name());
        lblProdID_RS_Disp.setText(observableRepay.getLblProdID_RS_Disp());
        lblProductID_FD_Disp.setText(observable.getLblProductID_FD_Disp());
        rdoActive_Repayment.setSelected(observableRepay.getRdoActive_Repayment());
        rdoInActive_Repayment.setSelected(observableRepay.getRdoInActive_Repayment());
        txtScheduleNo.setText(observableRepay.getTxtScheduleNo());
        txtLaonAmt.setText(observableRepay.getTxtLaonAmt());
        txtNoMonthsMora.setText(observableRepay.getTxtNoMonthsMora());
        tdtRepayFromDate.setDateValue(observableRepay.getTdtRepayFromDate());
        tdtFirstInstall.setDateValue(observableRepay.getTdtFirstInstall());
        tdtLastInstall.setDateValue(observableRepay.getTdtLastInstall());
        txtTotalBaseAmt.setText(observableRepay.getTxtTotalBaseAmt());
        txtAmtPenulInstall.setText(observableRepay.getTxtAmtPenulInstall());
        txtAmtLastInstall.setText(observableRepay.getTxtAmtLastInstall());
        txtTotalInstallAmt.setText(observableRepay.getTxtTotalInstallAmt());
        rdoDoAddSIs_Yes.setSelected(observableRepay.getRdoDoAddSIs_Yes());
        rdoDoAddSIs_No.setSelected(observableRepay.getRdoDoAddSIs_No());
        rdoPostDatedCheque_Yes.setSelected(observableRepay.getRdoPostDatedCheque_Yes());
        rdoPostDatedCheque_No.setSelected(observableRepay.getRdoPostDatedCheque_No());
        txtNoInstall.setText(observableRepay.getTxtNoInstall());
        tdtDisbursement_Dt.setDateValue(observableRepay.getTdtDisbursement_Dt());
        txtRepayScheduleMode.setText(observableRepay.getTxtRepayScheduleMode());
        lblProdID_GD_Disp.setText(observableGuarantor.getLblProdID_GD_Disp());
        tdtDOB_GD.setDateValue(observableGuarantor.getTdtDOB_GD());
        txtCustomerID_GD.setText(observableGuarantor.getTxtCustomerID_GD());
        txtGuarantorNo.setText(observableGuarantor.getTxtGuarantorNo());
        if (observableGuarantor.getMemberNo() != null && observableGuarantor.getMemberNo().length() > 0) {
            lblMemberNo_Disp.setText(observableGuarantor.getMemberNo());
            lblMemberNo.setVisible(true);
            lblMemberNo_Disp.setVisible(true);
        } else {
            lblMemberNo.setVisible(false);
            lblMemberNo_Disp.setVisible(false);
        }
        txtGuaranAccNo.setText(observableGuarantor.getTxtGuaranAccNo());
        txtGuaranName.setText(observableGuarantor.getTxtGuaranName());
        txtStreet_GD.setText(observableGuarantor.getTxtStreet_GD());
        txtArea_GD.setText(observableGuarantor.getTxtArea_GD());
        cboCity_GD.setSelectedItem(observableGuarantor.getCboCity_GD());
        txtPin_GD.setText(observableGuarantor.getTxtPin_GD());
        cboState_GD.setSelectedItem(observableGuarantor.getCboState_GD());
        cboCountry_GD.setSelectedItem(observableGuarantor.getCboCountry_GD());
        txtPhone_GD.setText(observableGuarantor.getTxtPhone_GD());
        cboConstitution_GD.setSelectedItem(observableGuarantor.getCboConstitution_GD());
        txtGuarantorNetWorth.setText(observableGuarantor.getTxtGuarantorNetWorth());
        tdtAsOn_GD.setDateValue(observableGuarantor.getTdtAsOn_GD());
        cboProdType.setSelectedItem(observableGuarantor.getCboProdType());
        cboProdId.setSelectedItem(observableGuarantor.getCboProdId());       
        rdoGuarnIndividual.setSelected(observableGuarantor.isRdoGuarnIndividual());
        rdoGuarnInsititutional.setSelected(observableGuarantor.isRdoGuarnInsititutional());


        //       ((ComboBoxModel)cboPLIName.getModel()).setKeyForSelected(CommonUtil.convertObjToStr(observableGuarantor.getCbmPLIName().getDataForKey(observableGuarantor.getCboPLIName())));
        cboPLIName.setModel(observableGuarantor.getCbmPLIName());
        cboPLIBranch.setSelectedItem(observableGuarantor.getCboPLIBranch());
        txtGuaratNo.setText(observableGuarantor.getTxtGuaratNo());
        tdtGuaranDate.setDateValue(observableGuarantor.getTdtGuaranDate());
        tdtGuaranPeriodFrom.setDateValue(observableGuarantor.getTdtGuaranPeriodFrom());
        tdtGuaranPeriodTo.setDateValue(observableGuarantor.getTdtGuaranPeriodTo());
        txtGuaranCommision.setText(observableGuarantor.getTxtGuaranCommision());
        cboGuaranStatus.setSelectedItem(observableGuarantor.getCboGuaranStatus());
        tdtStatusDate.setDateValue(observableGuarantor.getTdtStatusDate());
        txtGuarnRemarks.setText(observableGuarantor.getTxtGuarnRemarks());

        lblProdID_Disp_DocumentDetails.setText(observableDocument.getLblProdID_Disp_DocumentDetails());
        lblAcctHead_Disp_DocumentDetails.setText(observableDocument.getLblAcctHead_Disp_DocumentDetails());
        lblAcctNo_Disp_DocumentDetails.setText(observableDocument.getLblAcctNo_Disp_DocumentDetails());
        lblDocDesc_Disp_DocumentDetails.setText(observableDocument.getLblDocDesc_Disp_DocumentDetails());
        lblDocNo_Disp_DocumentDetails.setText(observableDocument.getLblDocNo_Disp_DocumentDetails());
        lblDocType_Disp_DocumentDetails.setText(observableDocument.getLblDocType_Disp_DocumentDetails());
        txtRemarks_DocumentDetails.setText(observableDocument.getTxtRemarks_DocumentDetails());
        tdtSubmitDate_DocumentDetails.setDateValue(observableDocument.getTdtSubmitDate_DocumentDetails());
        rdoYes_DocumentDetails.setSelected(observableDocument.getRdoYes_DocumentDetails());
        rdoNo_DocumentDetails.setSelected(observableDocument.getRdoNo_DocumentDetails());
        rdoYes_Executed_DOC.setSelected(observableDocument.getRdoYes_Executed_DOC());
        rdoNo_Executed_DOC.setSelected(observableDocument.getRdoNo_Executed_DOC());
        rdoYes_Mandatory_DOC.setSelected(observableDocument.getRdoYes_Mandatory_DOC());
        rdoNo_Mandatory_DOC.setSelected(observableDocument.getRdoNo_Mandatory_DOC());
        tdtExecuteDate_DOC.setDateValue(observableDocument.getTdtExecuteDate_DOC());
        tdtExpiryDate_DOC.setDateValue(observableDocument.getTdtExpiryDate_DOC());
        lblProdID_IM_Disp.setText(observableInt.getLblProdID_IM_Disp());
        tdtFrom.setDateValue(observableInt.getTdtFrom());
        tdtTo.setDateValue(observableInt.getTdtTo());
        txtFromAmt.setText(observableInt.getTxtFromAmt());
        txtToAmt.setText(observableInt.getTxtToAmt());
        txtInter.setText(observableInt.getTxtInter());
        txtPenalInter.setText(observableInt.getTxtPenalInter());
        txtAgainstClearingInter.setText(observableInt.getTxtAgainstClearingInter());
        txtPenalStatement.setText(observableInt.getTxtPenalStatement());
        txtInterExpLimit.setText(observableInt.getTxtInterExpLimit());
        lblProID_CD_Disp.setText(observableClassi.getLblProdID_CD_Disp());
        cboCommodityCode.setSelectedItem(observableClassi.getCboCommodityCode());
        cboGuaranteeCoverCode.setSelectedItem(observableClassi.getCboGuaranteeCoverCode());
        cboSectorCode1.setSelectedItem(observableClassi.getCboSectorCode1());
        cboHealthCode.setSelectedItem(observableClassi.getCboHealthCode());
        cboTypeFacility.setSelectedItem(observableClassi.getCboTypeFacility());
        cboDistrictCode.setSelectedItem(observableClassi.getCboDistrictCode());
        cboPurposeCode.setSelectedItem(observableClassi.getCboPurposeCode());
        cboIndusCode.setSelectedItem(observableClassi.getCboIndusCode());
        cboWeakerSectionCode.setSelectedItem(observableClassi.getCboWeakerSectionCode());
        cbo20Code.setSelectedItem(observableClassi.getCbo20Code());
        cboRefinancingInsti.setSelectedItem(observableClassi.getCboRefinancingInsti());
        cboGovtSchemeCode.setSelectedItem(observableClassi.getCboGovtSchemeCode());
        cboAssetCode.setSelectedItem(observableClassi.getCboAssetCode());
        tdtNPADate.setDateValue(observableClassi.getTdtNPADate());
        chkDirectFinance.setSelected(observableClassi.getChkDirectFinance());
        chkECGC.setSelected(observableClassi.getChkECGC());
        chkPrioritySector.setSelected(observableClassi.getChkPrioritySector());
        chkDocumentcomplete.setSelected(observableClassi.getChkDocumentcomplete());
        chkQIS.setSelected(observableClassi.getChkQIS());
        chkChequeBookAD.setSelected(observableOtherDetails.getChkChequeBookAD());
        chkCustGrpLimitValidationAD.setSelected(observableOtherDetails.getChkCustGrpLimitValidationAD());
        chkMobileBankingAD.setSelected(observableOtherDetails.getChkMobileBankingAD());
        chkNROStatusAD.setSelected(observableOtherDetails.getChkNROStatusAD());
        chkATMAD.setSelected(observableOtherDetails.getChkATMAD());
        txtATMNoAD.setText(observableOtherDetails.getTxtATMNoAD());
        tdtATMFromDateAD.setDateValue(observableOtherDetails.getTdtATMFromDateAD());
        tdtATMToDateAD.setDateValue(observableOtherDetails.getTdtATMToDateAD());
        chkDebitAD.setSelected(observableOtherDetails.getChkDebitAD());
        txtDebitNoAD.setText(observableOtherDetails.getTxtDebitNoAD());
        tdtDebitFromDateAD.setDateValue(observableOtherDetails.getTdtDebitFromDateAD());
        tdtDebitToDateAD.setDateValue(observableOtherDetails.getTdtDebitToDateAD());
        chkCreditAD.setSelected(observableOtherDetails.getChkCreditAD());
        txtCreditNoAD.setText(observableOtherDetails.getTxtCreditNoAD());
        tdtCreditFromDateAD.setDateValue(observableOtherDetails.getTdtCreditFromDateAD());
        tdtCreditToDateAD.setDateValue(observableOtherDetails.getTdtCreditToDateAD());
        cboSettlementModeAI.setSelectedItem(observableOtherDetails.getCboSettlementModeAI());
        cboOpModeAI.setSelectedItem(observableOtherDetails.getCboOpModeAI());
        txtAccOpeningChrgAD.setText(observableOtherDetails.getTxtAccOpeningChrgAD());
        txtMisServiceChrgAD.setText(observableOtherDetails.getTxtMisServiceChrgAD());
        chkStopPmtChrgAD.setSelected(observableOtherDetails.getChkStopPmtChrgAD());
        txtChequeBookChrgAD.setText(observableOtherDetails.getTxtChequeBookChrgAD());
        chkChequeRetChrgAD.setSelected(observableOtherDetails.getChkChequeRetChrgAD());
        txtFolioChrgAD.setText(observableOtherDetails.getTxtFolioChrgAD());
        chkInopChrgAD.setSelected(observableOtherDetails.getChkInopChrgAD());
        txtAccCloseChrgAD.setText(observableOtherDetails.getTxtAccCloseChrgAD());
        chkStmtChrgAD.setSelected(observableOtherDetails.getChkStmtChrgAD());
        cboStmtFreqAD.setSelectedItem(observableOtherDetails.getCboStmtFreqAD());
        chkNonMainMinBalChrgAD.setSelected(observableOtherDetails.getChkNonMainMinBalChrgAD());
        txtExcessWithChrgAD.setText(observableOtherDetails.getTxtExcessWithChrgAD());
        chkABBChrgAD.setSelected(observableOtherDetails.getChkABBChrgAD());
        chkNPAChrgAD.setSelected(observableOtherDetails.getChkNPAChrgAD());
        txtABBChrgAD.setText(observableOtherDetails.getTxtABBChrgAD());
        tdtNPAChrgAD.setDateValue(observableOtherDetails.getTdtNPAChrgAD());
        txtMinActBalanceAD.setText(observableOtherDetails.getTxtMinActBalanceAD());
        tdtDebit.setDateValue(observableOtherDetails.getTdtDebit());
        tdtCredit.setDateValue(observableOtherDetails.getTdtCredit());
        chkPayIntOnCrBalIN.setSelected(observableOtherDetails.getChkPayIntOnCrBalIN());
        chkPayIntOnDrBalIN.setSelected(observableOtherDetails.getChkPayIntOnDrBalIN());
        lblRateCodeValueIN.setText(observableOtherDetails.getLblRateCodeValueIN());
        lblCrInterestRateValueIN.setText(observableOtherDetails.getLblCrInterestRateValueIN());
        lblDrInterestRateValueIN.setText(observableOtherDetails.getLblDrInterestRateValueIN());
        lblPenalInterestValueIN.setText(observableOtherDetails.getLblPenalInterestValueIN());
        lblAgClearingValueIN.setText(observableOtherDetails.getLblAgClearingValueIN());
        tblBorrowerTabCTable.setModel(observableBorrow.getTblBorrower());
//        tblSanctionDetails2.setModel(observable.getTblSanctionMain());
        tblRepaymentCTable.setModel(observableRepay.getTblRepaymentTab());
        tblGuarantorTable.setModel(observableGuarantor.getTblGuarantorTab());
        tblInterMaintenance.setModel(observableInt.getTblInterestTab());
        tblTable_DocumentDetails.setModel(observableDocument.getTblDocumentTab());
        tblPeakSanctionDetails.setModel(observableAdditionalSanctionOB.getTblPeakSanctionTab());
        //System.out.println("recomment type2 in update :: " + observable.getCbmRecommendedByType2().getDataForKey("RECOMMANDED_BY2"));
        cboRecommendedByType.setSelectedItem(observable.getCboRecommendedByType());
        cboRecommendedByType2.setSelectedItem(observable.getCboRecommendedByType2());
		txtKoleLandArea.setText(observable.getTxtKoleLandArea());
        tdtAccountOpenDate.setDateValue(observable.getAccountOpenDate());
        tdtAccountCloseDate.setDateValue(observable.getAccountCloseDate());
        txtAdditionalLimit.setText(observableAdditionalSanctionOB.getAdditionalLimit());
        tdtAdditionalSanctionDt.setDateValue(observableAdditionalSanctionOB.getAdditionalSanctionDt());
        txtPermittedBy.setText(observableAdditionalSanctionOB.getPermittedBy());
        lblPermittedName.setText(observableAdditionalSanctionOB.getPermittedName());
        lblDesignatedName.setText(observableAdditionalSanctionOB.getDesignatedName());
        rdoEnhance_Yes.setSelected(observable.isRdoEnhance_Yes());
        rdoEnhance_No.setSelected(observable.isRdoEnhance_No());

        //emi

        chkDiminishing.setSelected(observable.isChkDiminishing());
//        txtPledgeType.setText(observable.getTxtPledgeType());
//        rdoRenewal_Yes.setSelected(observable.isRdoRenewal_Yes());
//        rdoRenewal_No.setSelected(observable.isRdoRenewal_No());

        txtSubsidyAmt.setText(observable.getTxtSubsidyAmt());
        txtSubsidyAccHead.setText(observable.getTxtSubsidyAccHead());
        tdtSubsidyAppDt.setDateValue(observable.getTdtSubsidyAppDt());
        rdoRebateInterest_Yes.setSelected(observable.isRdoRebateInterest_Yes());
        rdoRebateInterest_No.setSelected(observable.isRdoRebateInterest_No());
        txtRebateInterest_Amt.setText(observable.getTxtRebateInterest_Amt());
        tdtRebateInterest_App_Dt.setDateValue(observable.getTdtRebateInterest_App_Dt());
        txtSubsidyAdjustedAmt.setText(observable.getTxtSubsidyAdjustedAmt());

//        lblDepositNo.setText(observable.getLblDepositNo());
        if (observable.getCbmProductId() != null) {
            cboProductId.setModel(observable.getCbmProductId());
        }
        if (viewType.equals(AUTHORIZE) || viewType.equals(REJECT) || viewType.equals("Delete")) {
            if (observable.getCbmProductId() != null) {
                cboProductId.setModel(observable.getCbmProductId());
            }
        }
        if (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Delete")) {
            txtNoInstallmentsFocusLost();
            txtNoInstallFocusLost();
            cboProductIDActionPerformed();
        }
        chkDocDetailsActionPerformed();
        chkAuthorizedSignatoryActionPerformed();
        chkPOFAttorneyActionPerformed();
        chkGurantorActionPerformeds();
        chkAccountTransferActionPerformed();
        rdoMultiDisburseAllow_YesActionPerformed();
        FullySecuredPartlySecuredActionPerformeds();
        OTSActionPerformed();
        if (!(viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Delete"))) {
            rdoSubsidy_YesActionPerformed(null);
        }
        if (allowResetVisit) {
            tabLimitAmount.resetVisits();
        }
        rdoGahanYes.setSelected(observable.isRdoGahanYes());
        rdoGahanNo.setSelected(observable.isRdoGahanNo());


        //court order details

        txtCourtOrderNo.setText(observable.getTxtCourtOrderNo());
        tdtCourtOrderDate.setDateValue(observable.getTdtCourtOrderDate());
        tdtOTSDate.setDateValue(observable.getTdtOTSDate());
        txtOTSRate.setText(observable.getTxtOTSRate());
        txtTotAmountDue.setText(String.valueOf(observable.getTxtTotAmountDue()));
        txtSettlementAmt.setText(String.valueOf(observable.getTxtSettlementAmt()));
        txtPrincipalAmount.setText(String.valueOf(observable.getTxtPrincipalAmount()));
        txtInterestAmount.setText(String.valueOf(observable.getTxtInterestAmount()));
        txtPenalInterestAmount.setText(String.valueOf(observable.getTxtPenalInterestAmount()));
        txtChargeAmount.setText(String.valueOf(observable.getTxtChargeAmount()));
        txtPenalInterestAmount.setText(String.valueOf(observable.getTxtPenalInterestAmount()));
        txtNoInstallment.setText(observable.getTxtNoInstallment());
        txtInterestAmount.setText(String.valueOf(observable.getTxtInterestAmount()));
        txtInstallmentAmt.setText(String.valueOf(observable.getTxtInstallmentAmt()));
        rdoRepaySingle_YES.setSelected(observable.isRdoRepaySingle_YES());
        rdoRepaySingle_NO.setSelected(observable.isRdoRepaySingle_NO());
        txtPenal.setText(observable.getTxtPenal());
        txtRepayRemarks.setText(observable.getCourtRemarks());
        chkOTS.setSelected(observable.isChkOTS());
        tdtFirstInstallDt.setDateValue(observable.getFirstInstallmentDt());
        tdtLastInstallDate.setDateValue(observable.getLastInstallmentDt());

        //


        addRadioButtons();
        allowResetVisit = false;
        if (loanType.equals("LTD") && observable.getPaddyMap() != null && observable.getPaddyMap().size() > 0) {
            Map hash = observable.getPaddyMap();
            initPaddyComponents();
            observable.setDepositNo(CommonUtil.convertObjToStr(hash.get("CND_NO")));
            observable.setLblDepositNo(CommonUtil.convertObjToStr(hash.get("CND_NO")));
//            lblDepositNo.setText(CommonUtil.convertObjToStr(hash.get("CND_NO")));
            lblPurchaseIDVal.setText(CommonUtil.convertObjToStr(hash.get("PURCHASE_ID")));
            lblPurchaseNameVal.setText(CommonUtil.convertObjToStr(hash.get("PURCHASE_NAME")));
            lblTransactionDateVal.setText(CommonUtil.convertObjToStr(hash.get("TRANS_DT")));
            lblPurchaseDateVal.setText(CommonUtil.convertObjToStr(hash.get("PURCHASE_DATE")));
            lblTotalWeightVal.setText(CommonUtil.convertObjToStr(hash.get("WEIGHT")));
            lblAcreageVal.setText(CommonUtil.convertObjToStr(hash.get("ACRE")));
            lblPurchaseAmountVal.setText(CommonUtil.convertObjToStr(hash.get("AMOUNT")));
        }
        if (loanType.equals("LTD") && observable.getMdsMap() != null && observable.getMdsMap().size() > 0) {
            Map hash = observable.getMdsMap();
            initMDSComponents();
            observable.setDepositNo(CommonUtil.convertObjToStr(hash.get("CHITTAL_NO")));
            observable.setLblDepositNo(CommonUtil.convertObjToStr(hash.get("CHITTAL_NO")));
//            lblDepositNo.setText(CommonUtil.convertObjToStr(hash.get("CHITTAL_NO")));
            lblMDSMemberNoVal.setText(CommonUtil.convertObjToStr(hash.get("MEMBER_NO")));
            lblMDSMemberTypeVal.setText(CommonUtil.convertObjToStr(hash.get("MEMBER_TYPE")));
            lblMDSMemberNameVal.setText(CommonUtil.convertObjToStr(hash.get("MEMBER_NAME")));
            lblMDSChitAmountPaidVal.setText(CommonUtil.convertObjToStr(hash.get("AMOUNT")));
        }
        txtSalaryCertificateNo.setText(observable.getTxtSalaryCertificateNo());
        txtEmployerName.setText(observable.getTxtEmployerName());
        txtAddress.setText(observable.getTxtAddress());
        cboCity.setSelectedItem(observable.getCboSecurityCity());
        txtPinCode.setText(observable.getTxtPinCode());
        txtDesignation.setText(observable.getTxtDesignation());
        txtContactNo.setText(observable.getTxtContactNo());
        tdtRetirementDt.setDateValue(observable.getTdtRetirementDt());
        txtMemberNum.setText(observable.getTxtMemberNum());
        txtTotalSalary.setText(observable.getTxtTotalSalary());
        txtNetWorth1.setText(observable.getTxtNetWorth());
        txtSalaryRemark.setText(observable.getTxtSalaryRemark());
        chkMobileBankingTLAD.setSelected(observable.getIsMobileBanking());
        txtMobileNo.setText(observable.getTxtMobileNo());
        //Added By Suresh
        if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")
                && observable.getActionType() != ClientConstants.ACTIONTYPE_NEW) {
            if (txtCustID.getText().length() > 0) {
//                String salaryRecovery = CommonUtil.convertObjToStr(observable.getRdoSalaryRecovery());
//                if (salaryRecovery.equals("Y")) {
//                    rdoSalaryRecovery_Yes.setSelected(true);
//                } else {
//                    rdoSalaryRecovery_No.setSelected(true);
//                }
                String lockStatus = CommonUtil.convertObjToStr(observable.getLockStatus());
                if (lockStatus.equals("Y")) {
                    lblLockStatusVal.setText("LOCKED");
                } else {
                    lblLockStatusVal.setText("UNLOCKED");
                }
            }
        }
        if (txtCustID.getText().length() > 0) {
            String salaryRecovery = CommonUtil.convertObjToStr(observable.getRdoSalaryRecovery());
            if (salaryRecovery.equals("Y")) {
                rdoSalaryRecovery_Yes.setSelected(true);
            } else {
                rdoSalaryRecovery_No.setSelected(true);
            }
        }
        tdtMobileSubscribedFrom.setDateValue(observable.getTdtMobileSubscribedFrom());

        txtJewelleryDetails.setText(observable.getTxtJewelleryDetails());
        txtGoldRemarks.setText(observable.getTxtGoldRemarks());
        txtNetWeight.setText(observable.getTxtNetWeight());
        txtValueOfGold.setText(observable.getTxtValueOfGold());
        txtGrossWeight.setText(observable.getTxtGrossWeight());
        if(observable.getRdoGoldSecurityStockExists().equalsIgnoreCase("Y")){ // Added by nithya on 07-03-2020 for KD-1379
            rdoGoldSecurityExitsYes.setSelected(true);
            rdoGoldSecurityExitsNo.setSelected(false);
        }else{
            rdoGoldSecurityExitsYes.setSelected(false);
        }
        txtGoldSecurityId.setText(observable.getTxtGoldSecurityId());

        if (observable.getCbmDirectPaymentProdId() != null) {
            cboDirectRepaymentProdId.setModel(observable.getCbmDirectPaymentProdId());
        }
        txtDirectRepaymentLoanPeriod.setText(observable.getTxtDirectRepaymentLoanPeriod());

        DirectRepayment_Yes.setSelected(observable.isDirectRepayment_Yes());
        DirectRepayment_No.setSelected(observable.isDirectRepayment_No());
        txtDirectRepaymentAcctNo.setText(observable.getTxtDirectRepaymentAcctNo());
        txtDirectRepaymentAcctHead.setText(observable.getTxtDirectRepaymentAcctHead());
        txtSettlementAmtFocusLost(null);
        //System.out.println("cbo repay typess update"+observableRepay.getCboSanRepaymentType());
        
        if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
            if (observableRepay.getCboSanRepaymentType().equals("UNIFORM_PRINCIPLE_EMI") && observableRepay.isChkEmiUniform()) {
                cboSanRepaymentType.setSelectedItem("EMI");
            } else if (observableRepay.getCboSanRepaymentType().equals("UNIFORM_PRINCIPLE_EMI") && !observableRepay.isChkEmiUniform()) {
                cboSanRepaymentType.setSelectedItem("Uniform Principle EMI");
            }
        } else {
            cboSanRepaymentType.setSelectedItem(observableRepay.getCboSanRepaymentType());//bb
        }
        lblServiceTaxval.setText(observable.getLblServiceTaxval());
        txtDealerID.setText(observable.getTxtDealerID());//Added By Revathi.L
        displayCustName();

    }
    
    private void displayCustName() {
        if (txtDealerID.getText().length() > 0) {
            HashMap custMap = new HashMap();
            custMap.put("CUST_ID", txtDealerID.getText());
            List namelst = ClientUtil.executeQuery("getCustNameForDeposit", custMap);
            if (namelst.size() > 0) {
                custMap = (HashMap) namelst.get(0);
                lblDealerName.setText(CommonUtil.convertObjToStr(custMap.get("CUSTOMER_NAME")));
            }
        }
    }

    private void addRadioButtons() {
        addFacilityRadioBtns();
        addRepaymentRadioBtns();
        addDocumentRadioBtns();
        addGuranRadioBtns();
        addRenewalRadioBtns();
        addGahanRadioBtns();
        addDirectRepaymentBtns();
        addCourtOrderRadioButton();
    }

    void addCourtOrderRadioButton() {
        rdoCourtOrderGroup = new CButtonGroup();
        rdoCourtOrderGroup.add(rdoRepaySingle_YES);
        rdoCourtOrderGroup.add(rdoRepaySingle_NO);
    }

    private void addDirectRepaymentBtns() {
        rdoDirectRepaymentGroup = new CButtonGroup();
        rdoDirectRepaymentGroup.add(DirectRepayment_Yes);
        rdoDirectRepaymentGroup.add(DirectRepayment_No);
    }

    private void addGuranRadioBtns() {
        rdoGuarnConstution = new CButtonGroup();
        rdoGuarnConstution.add(rdoGuarnIndividual);
        rdoGuarnConstution.add(rdoGuarnInsititutional);
    }

    private void addGahanRadioBtns() {
        rdoGahanGroup = new CButtonGroup();
        rdoGahanGroup.add(rdoGahanYes);
        rdoGahanGroup.add(rdoGahanNo);
    }

    private void addRenewalRadioBtns() {
        rdoRenewalGroup = new CButtonGroup();
        //rdoEnhanceGroup.add(rdoEnhance_Yes);
        //rdoEnhanceGroup.add(rdoEnhance_No);
        rdoRenewalGroup.add(rdoRenewal_Yes);
        rdoRenewalGroup.add(rdoRenewal_No);

    }

    private void addFacilityRadioBtns() {
        addFacilitySecurityRadioBtns();
        rdoAccType = new CButtonGroup();
        rdoAccLimit = new CButtonGroup();
        rdoAccLimit.add(rdoAccLimit_Main);
        rdoAccLimit.add(rdoAccLimit_Submit);
        rdoRiskWeight = new CButtonGroup();
        rdoRiskWeight.add(rdoRiskWeight_No);
        rdoRiskWeight.add(rdoRiskWeight_Yes);
        rdoMultiDisburseAllow = new CButtonGroup();
        rdoMultiDisburseAllow.add(rdoMultiDisburseAllow_No);
        rdoMultiDisburseAllow.add(rdoMultiDisburseAllow_Yes);
        addFacilityInterestNatureBtns();
        addFacilitySubsidyRadioBtns();
        addFacilityRebateRadioBtns();
        rdoInterest = new CButtonGroup();
        rdoInterest.add(rdoInterest_Compound);
        rdoInterest.add(rdoInterest_Simple);
    }

    private void addFacilitySecurityRadioBtns() {
        rdoSecurityDetails = new CButtonGroup();
        rdoSecurityDetails.add(rdoSecurityDetails_Fully);
        rdoSecurityDetails.add(rdoSecurityDetails_Partly);
        rdoSecurityDetails.add(rdoSecurityDetails_Unsec);
    }

    private void addFacilitySubsidyRadioBtns() {
        rdoSubsidy = new CButtonGroup();
        rdoSubsidy.add(rdoSubsidy_No);
        rdoSubsidy.add(rdoSubsidy_Yes);
    }

    private void addFacilityRebateRadioBtns() {
        rdoRebateInterestGroup = new CButtonGroup();
        rdoRebateInterestGroup.add(rdoRebateInterest_Yes);
        rdoRebateInterestGroup.add(rdoRebateInterest_No);
    }

    private void addFacilityInterestNatureBtns() {
        rdoNatureInterest = new CButtonGroup();
        rdoNatureInterest.add(rdoNatureInterest_NonPLR);
        rdoNatureInterest.add(rdoNatureInterest_PLR);
    }

    private void addRepaymentRadioBtns() {
        rdoDoAddSIs = new CButtonGroup();
        rdoDoAddSIs.add(rdoDoAddSIs_No);
        rdoDoAddSIs.add(rdoDoAddSIs_Yes);

        rdoPostDatedCheque = new CButtonGroup();
        rdoPostDatedCheque.add(rdoPostDatedCheque_Yes);
        rdoPostDatedCheque.add(rdoPostDatedCheque_No);

        rdoStatus_Repayment = new CButtonGroup();
        rdoStatus_Repayment.add(rdoActive_Repayment);
        rdoStatus_Repayment.add(rdoInActive_Repayment);
    }

    private void addDocumentRadioBtns() {
        addDocSubmittRadioBtns();
        addDocExecuteRadioBtns();
        addDocMandatoryRadioBtns();
    }

    private void addDocSubmittRadioBtns() {
        rdoIsSubmitted_DocumentDetails = new CButtonGroup();
        rdoIsSubmitted_DocumentDetails.add(rdoYes_DocumentDetails);
        rdoIsSubmitted_DocumentDetails.add(rdoNo_DocumentDetails);
    }

    private void addDocExecuteRadioBtns() {
        rdoExecuted_DOC = new CButtonGroup();
        rdoExecuted_DOC.add(rdoYes_Executed_DOC);
        rdoExecuted_DOC.add(rdoNo_Executed_DOC);
    }

    private void addDocMandatoryRadioBtns() {
        rdoMandatory_DOC = new CButtonGroup();
        rdoMandatory_DOC.add(rdoYes_Mandatory_DOC);
        rdoMandatory_DOC.add(rdoNo_Mandatory_DOC);
    }

    public void updateOBFields() {
        if (!caste.equals("SC/ST") && shareLink.equals("Y")) {
            if (txtBalanceShare.getText() != null) {
                observable.setBalanceShareAmt(txtBalanceShare.getText());
                if (chkRecovery.isSelected()) {
                    //System.out.println("ijhidfi2222>>>>");
                    observable.setChkRecovery("Y");
                } else {
                    observable.setChkRecovery("N");
                }
            }
        } else {
            // ClientUtil.showMessageWindow("Caste is SC/ST");
        }
        observable.setModule(getModule());
        observable.setScreen(getScreen());
        observable.setSelectedBranchID(getSelectedBranchID());
        observableBorrow.setSelectedBranchID(getSelectedBranchID());
        observableClassi.setSelectedBranchID(getSelectedBranchID());
        observableComp.setSelectedBranchID(getSelectedBranchID());
        observableDocument.setSelectedBranchID(getSelectedBranchID());
        observableGuarantor.setSelectedBranchID(getSelectedBranchID());
        observableInt.setSelectedBranchID(getSelectedBranchID());
        observableOtherDetails.setSelectedBranchID(getSelectedBranchID());
        observableRepay.setSelectedBranchID(getSelectedBranchID());
        observableBorrow.setTxtCustID(txtCustID.getText());
        observableBorrow.setCboConstitution(CommonUtil.convertObjToStr(cboConstitution.getSelectedItem()));
        observableBorrow.setCboCategory(CommonUtil.convertObjToStr(cboCategory.getSelectedItem()));
        observableBorrow.setTxtSHGId(txtSHGId.getText());
        observableBorrow.setTxtApplicationNo(txtApplicationNo.getText());
        authSignUI.updateOBFields();
        poaUI.updateOBFields();
        observable.setCboAccStatus(CommonUtil.convertObjToStr(cboAccStatus.getSelectedItem()));
        observable.setTxtSanctionNo(txtSanctionNo.getText());
        observable.setTxtSanctionSlNo(txtSanctionSlNo.getText());
        observable.setTdtSanctionDate(tdtSanctionDate.getDateValue());
        observable.setCboSanctioningAuthority(CommonUtil.convertObjToStr(cboSanctioningAuthority.getSelectedItem()));
        observable.setTxtSanctionRemarks(txtSanctionRemarks.getText());
        observable.setCboModeSanction(CommonUtil.convertObjToStr(cboModeSanction.getSelectedItem()));
        observable.setTxtNoInstallments(txtNoInstallments.getText());
        observable.setCboRepayFreq(CommonUtil.convertObjToStr(cboRepayFreq.getSelectedItem()));
        observable.setCboTypeOfFacility(CommonUtil.convertObjToStr(cboTypeOfFacility.getSelectedItem()));
        observable.setTxtLimit_SD(txtLimit_SD.getText());
        observable.setTdtFacility_Repay_Date(tdtFacility_Repay_Date.getDateValue());
        observable.setTxtFacility_Moratorium_Period(txtFacility_Moratorium_Period.getText());
        observable.setChkMoratorium_Given(chkMoratorium_Given.isSelected());
        observable.setTdtFDate(tdtFDate.getDateValue());
        observable.setTdtTDate(tdtTDate.getDateValue());
        observable.setRdoSecurityDetails_Unsec(rdoSecurityDetails_Unsec.isSelected());
        observable.setRdoSecurityDetails_Partly(rdoSecurityDetails_Partly.isSelected());
        observable.setRdoSecurityDetails_Fully(rdoSecurityDetails_Fully.isSelected());
        observable.setChkStockInspect(chkStockInspect.isSelected());
        observable.setChkInsurance(chkInsurance.isSelected());
        observable.setChkGurantor(chkGurantor.isSelected());
        observable.setChkEligibleAmt(chkEligibleAmt.isSelected());
        observable.setAccountOpenDate(tdtAccountOpenDate.getDateValue());
        observable.setAccountCloseDate(tdtAccountCloseDate.getDateValue());
        observable.setCboRecommendedByType(CommonUtil.convertObjToStr(cboRecommendedByType.getSelectedItem()));
        observable.setCboRecommendedByType2(CommonUtil.convertObjToStr(cboRecommendedByType2.getSelectedItem()));
        observable.setTxtKoleLandArea(txtKoleLandArea.getText());
        observable.setRdoAccLimit_Main(rdoAccLimit_Main.isSelected());
        observable.setRdoAccLimit_Submit(rdoAccLimit_Submit.isSelected());
        observable.setRdoNatureInterest_PLR(rdoNatureInterest_PLR.isSelected());
        observable.setRdoNatureInterest_NonPLR(rdoNatureInterest_NonPLR.isSelected());
        observable.setCboInterestType(CommonUtil.convertObjToStr(cboInterestType.getSelectedItem()));
        observable.setRdoRiskWeight_Yes(rdoRiskWeight_Yes.isSelected());
        observable.setRdoRiskWeight_No(rdoRiskWeight_No.isSelected());
        observable.setTdtDemandPromNoteDate(tdtDemandPromNoteDate.getDateValue());
        observable.setTdtDemandPromNoteExpDate(tdtDemandPromNoteExpDate.getDateValue());
        observable.setTdtAODDate(tdtAODDate.getDateValue());
        observable.setRdoMultiDisburseAllow_Yes(rdoMultiDisburseAllow_Yes.isSelected());
        observable.setRdoMultiDisburseAllow_No(rdoMultiDisburseAllow_No.isSelected());
        observable.setRdoGahanYes(rdoGahanYes.isSelected());
        observable.setRdoGahanNo(rdoGahanNo.isSelected());
        observable.setRdoSubsidy_Yes(rdoSubsidy_Yes.isSelected());
        observable.setRdoSubsidy_No(rdoSubsidy_No.isSelected());
        observable.setTxtPledgeType(txtPledgeType.getText());
        observable.setTxtPurposeDesc(txtPurposeDesc.getText());
        observable.setTxtGroupDesc(txtGroupDesc.getText());
        observable.setRdoInterest_Simple(rdoInterest_Simple.isSelected());
        observable.setRdoInterest_Compound(rdoInterest_Compound.isSelected());
        observable.setTxtContactPerson(txtContactPerson.getText());
        observable.setTxtContactPhone(txtContactPhone.getText());
        observable.setCboIntGetFrom(CommonUtil.convertObjToStr(cboIntGetFrom.getSelectedItem()));
        observable.setRdoDP_YES(rdoDP_YES.isSelected());
        observable.setRdoDP__NO(rdoDP_NO.isSelected());
        observable.setTxtAcct_Name(txtAcct_Name.getText());
        observable.setChkAuthorizedSignatory(chkAuthorizedSignatory.isSelected());
        observable.setChkPOFAttorney(chkPOFAttorney.isSelected());
        observable.setChkDocDetails(chkDocDetails.isSelected());
        observable.setChkAcctTransfer(chkAccountTransfer.isSelected());
        observableRepay.setLblProdID_RS_Disp(lblProdID_RS_Disp.getText());
        observable.setLblProductID_FD_Disp(lblProductID_FD_Disp.getText());
        //emi
        observable.setChkDiminishing(chkDiminishing.isSelected());
        //System.out.println("asa"+cboSanRepaymentType.getSelectedItem());
        String type=(String)(((ComboBoxModel)cboSanRepaymentType.getModel()).getKeyForSelected());
        System.out.println("type11=="+type);
        observableRepay.setCboSanRepaymentType(type);//bb
        observableRepay.setTxtScheduleNo(txtScheduleNo.getText());
        observableRepay.setTxtLaonAmt(txtLaonAmt.getText());
        observableRepay.setCboRepayFreq_Repayment(CommonUtil.convertObjToStr(cboRepayFreq_Repayment.getSelectedItem()));
        observableRepay.setCboRepayType(CommonUtil.convertObjToStr(cboRepayType.getSelectedItem()));
        observableRepay.setTdtRepayFromDate(tdtRepayFromDate.getDateValue());
        observableRepay.setTdtFirstInstall(tdtFirstInstall.getDateValue());
        observableRepay.setTdtLastInstall(tdtLastInstall.getDateValue());
        observableRepay.setTxtTotalBaseAmt(txtTotalBaseAmt.getText());
        observableRepay.setTxtAmtPenulInstall(txtAmtPenulInstall.getText());
        observableRepay.setTxtAmtLastInstall(txtAmtLastInstall.getText());
        observableRepay.setTxtTotalInstallAmt(txtTotalInstallAmt.getText());
        observableRepay.setRdoDoAddSIs_Yes(rdoDoAddSIs_Yes.isSelected());
        observableRepay.setRdoDoAddSIs_No(rdoDoAddSIs_No.isSelected());
        observableRepay.setRdoPostDatedCheque_Yes(rdoPostDatedCheque_Yes.isSelected());
        observableRepay.setRdoPostDatedCheque_No(rdoPostDatedCheque_No.isSelected());
        observableRepay.setRdoActive_Repayment(rdoActive_Repayment.isSelected());
        observableRepay.setRdoInActive_Repayment(rdoInActive_Repayment.isSelected());
        observableRepay.setTxtNoInstall(txtNoInstall.getText());
        observableRepay.setTxtRepayScheduleMode(txtRepayScheduleMode.getText());
        observableRepay.setTdtDisbursement_Dt(tdtDisbursement_Dt.getDateValue());
        observableRepay.setTxtNoMonthsMora(txtNoMonthsMora.getText());
        observableRepay.setTblRepaymentTab((com.see.truetransact.clientutil.EnhancedTableModel) tblRepaymentCTable.getModel());
        observableGuarantor.setTxtGuarantorNo(txtGuarantorNo.getText());
        observableGuarantor.setMemberNo(lblMemberNo_Disp.getText());
        observableGuarantor.setLblProdID_GD_Disp(lblProdID_GD_Disp.getText());
        observableGuarantor.setTdtDOB_GD(tdtDOB_GD.getDateValue());
        observableGuarantor.setTxtCustomerID_GD(txtCustomerID_GD.getText());
        observableGuarantor.setTxtGuaranAccNo(txtGuaranAccNo.getText());
        observableGuarantor.setTxtGuaranName(txtGuaranName.getText());
        observableGuarantor.setTxtStreet_GD(txtStreet_GD.getText());
        observableGuarantor.setTxtArea_GD(txtArea_GD.getText());
        observableGuarantor.setCboCity_GD(CommonUtil.convertObjToStr(cboCity_GD.getSelectedItem()));
        observableGuarantor.setTxtPin_GD(txtPin_GD.getText());
        observableGuarantor.setCboState_GD(CommonUtil.convertObjToStr(cboState_GD.getSelectedItem()));
        observableGuarantor.setCboCountry_GD(CommonUtil.convertObjToStr(cboCountry_GD.getSelectedItem()));
        observableGuarantor.setTxtPhone_GD(txtPhone_GD.getText());
        observableGuarantor.setCboConstitution_GD(CommonUtil.convertObjToStr(cboConstitution_GD.getSelectedItem()));
        observableGuarantor.setTxtGuarantorNetWorth(txtGuarantorNetWorth.getText());
        observableGuarantor.setTdtAsOn_GD(tdtAsOn_GD.getDateValue());
        observableGuarantor.setCboProdId(CommonUtil.convertObjToStr(cboProdId.getSelectedItem()));
        observableGuarantor.setCboProdType(CommonUtil.convertObjToStr(cboProdType.getSelectedItem()));
        observableGuarantor.setRdoGuarnIndividual(rdoGuarnIndividual.isSelected());
        observableGuarantor.setRdoGuarnInsititutional(rdoGuarnInsititutional.isSelected());

        observableGuarantor.setCboPLIName(CommonUtil.convertObjToStr(cboPLIName.getSelectedItem()));
        observableGuarantor.setCboPLIBranch(CommonUtil.convertObjToStr(cboPLIBranch.getSelectedItem()));
        observableGuarantor.setTxtGuaratNo(txtGuaratNo.getText());
        observableGuarantor.setTdtGuaranDate(tdtGuaranDate.getDateValue());
        observableGuarantor.setTdtGuaranPeriodFrom(tdtGuaranPeriodFrom.getDateValue());
        observableGuarantor.setTdtGuaranPeriodTo(tdtGuaranPeriodTo.getDateValue());
        observableGuarantor.setTxtGuaranCommision(txtGuaranCommision.getText());
        observableGuarantor.setCboGuaranStatus(CommonUtil.convertObjToStr(cboGuaranStatus.getSelectedItem()));
        observableGuarantor.setTdtStatusDate(tdtStatusDate.getDateValue());
        observableGuarantor.setTxtGuarnRemarks(txtGuarnRemarks.getText());

        observableDocument.setLblProdID_Disp_DocumentDetails(lblProdID_Disp_DocumentDetails.getText());
        observableDocument.setLblAcctHead_Disp_DocumentDetails(lblAcctHead_Disp_DocumentDetails.getText());
        observableDocument.setLblAcctNo_Disp_DocumentDetails(lblAcctNo_Disp_DocumentDetails.getText());
        observableDocument.setLblDocDesc_Disp_DocumentDetails(lblDocDesc_Disp_DocumentDetails.getText());
        observableDocument.setLblDocNo_Disp_DocumentDetails(lblDocNo_Disp_DocumentDetails.getText());
        observableDocument.setLblDocType_Disp_DocumentDetails(lblDocType_Disp_DocumentDetails.getText());
        observableDocument.setTxtRemarks_DocumentDetails(txtRemarks_DocumentDetails.getText());
        observableDocument.setTdtSubmitDate_DocumentDetails(tdtSubmitDate_DocumentDetails.getDateValue());
        observableDocument.setRdoYes_DocumentDetails(rdoYes_DocumentDetails.isSelected());
        observableDocument.setRdoNo_DocumentDetails(rdoNo_DocumentDetails.isSelected());
        observableDocument.setRdoYes_Executed_DOC(rdoYes_Executed_DOC.isSelected());
        observableDocument.setRdoNo_Executed_DOC(rdoNo_Executed_DOC.isSelected());
        observableDocument.setRdoYes_Mandatory_DOC(rdoYes_Mandatory_DOC.isSelected());
        observableDocument.setRdoNo_Mandatory_DOC(rdoNo_Mandatory_DOC.isSelected());
        observableDocument.setTdtExecuteDate_DOC(tdtExecuteDate_DOC.getDateValue());
        observableDocument.setTdtExpiryDate_DOC(tdtExpiryDate_DOC.getDateValue());
        observableInt.setLblProdID_IM_Disp(lblProdID_IM_Disp.getText());
        observableInt.setTdtFrom(tdtFrom.getDateValue());
        observableInt.setTdtTo(tdtTo.getDateValue());
        observableInt.setTxtFromAmt(txtFromAmt.getText());
        observableInt.setTxtToAmt(txtToAmt.getText());
        observableInt.setTxtInter(txtInter.getText());
        observableInt.setTxtPenalInter(txtPenalInter.getText());
        observableInt.setTxtAgainstClearingInter(txtAgainstClearingInter.getText());
        observableInt.setTxtPenalStatement(txtPenalStatement.getText());
        observableInt.setTxtInterExpLimit(txtInterExpLimit.getText());
        observableClassi.setLblProdID_CD_Disp(CommonUtil.convertObjToStr(lblProID_CD_Disp.getText()));
        observableClassi.setCboCommodityCode(CommonUtil.convertObjToStr(cboCommodityCode.getSelectedItem()));
        observableClassi.setCboGuaranteeCoverCode(CommonUtil.convertObjToStr(cboGuaranteeCoverCode.getSelectedItem()));
        observableClassi.setCboSectorCode1(CommonUtil.convertObjToStr(cboSectorCode1.getSelectedItem()));
        observableClassi.setCboHealthCode(CommonUtil.convertObjToStr(cboHealthCode.getSelectedItem()));
        observableClassi.setCboTypeFacility(CommonUtil.convertObjToStr(cboTypeFacility.getSelectedItem()));
        observableClassi.setCboDistrictCode(CommonUtil.convertObjToStr(cboDistrictCode.getSelectedItem()));
        observableClassi.setCboPurposeCode(CommonUtil.convertObjToStr(cboPurposeCode.getSelectedItem()));
        observableClassi.setCboIndusCode(CommonUtil.convertObjToStr(cboIndusCode.getSelectedItem()));
        observableClassi.setCboWeakerSectionCode(CommonUtil.convertObjToStr(cboWeakerSectionCode.getSelectedItem()));
        observableClassi.setCbo20Code(CommonUtil.convertObjToStr(cbo20Code.getSelectedItem()));
        observableClassi.setCboRefinancingInsti(CommonUtil.convertObjToStr(cboRefinancingInsti.getSelectedItem()));
        observableClassi.setCboGovtSchemeCode(CommonUtil.convertObjToStr(cboGovtSchemeCode.getSelectedItem()));
        observableClassi.setCboAssetCode(CommonUtil.convertObjToStr(cboAssetCode.getSelectedItem()));
        observableClassi.setTdtNPADate(tdtNPADate.getDateValue());
        observableClassi.setChkDirectFinance(chkDirectFinance.isSelected());
        observableClassi.setChkECGC(chkECGC.isSelected());
        observableClassi.setChkPrioritySector(chkPrioritySector.isSelected());
        observableClassi.setChkDocumentcomplete(chkDocumentcomplete.isSelected());
        observableClassi.setChkQIS(chkQIS.isSelected());
        observableOtherDetails.setChkChequeBookAD(chkChequeBookAD.isSelected());
        observableOtherDetails.setChkCustGrpLimitValidationAD(chkCustGrpLimitValidationAD.isSelected());
        observableOtherDetails.setChkMobileBankingAD(chkMobileBankingAD.isSelected());
        observableOtherDetails.setChkNROStatusAD(chkNROStatusAD.isSelected());
        observableOtherDetails.setChkATMAD(chkATMAD.isSelected());
        observableOtherDetails.setTxtATMNoAD(txtATMNoAD.getText());
        observableOtherDetails.setTdtATMFromDateAD(tdtATMFromDateAD.getDateValue());
        observableOtherDetails.setTdtATMToDateAD(tdtATMToDateAD.getDateValue());
        observableOtherDetails.setChkDebitAD(chkDebitAD.isSelected());
        observableOtherDetails.setTxtDebitNoAD(txtDebitNoAD.getText());
        observableOtherDetails.setTdtDebitFromDateAD(tdtDebitFromDateAD.getDateValue());
        observableOtherDetails.setTdtDebitToDateAD(tdtDebitToDateAD.getDateValue());
        observableOtherDetails.setChkCreditAD(chkCreditAD.isSelected());
        observableOtherDetails.setTxtCreditNoAD(txtCreditNoAD.getText());
        observableOtherDetails.setTdtCreditFromDateAD(tdtCreditFromDateAD.getDateValue());
        observableOtherDetails.setTdtCreditToDateAD(tdtCreditToDateAD.getDateValue());
        observableOtherDetails.setCboSettlementModeAI(CommonUtil.convertObjToStr(cboSettlementModeAI.getSelectedItem()));
        observableOtherDetails.setCboOpModeAI(CommonUtil.convertObjToStr(cboOpModeAI.getSelectedItem()));
        observableOtherDetails.setTxtAccOpeningChrgAD(txtAccOpeningChrgAD.getText());
        observableOtherDetails.setTxtMisServiceChrgAD(txtMisServiceChrgAD.getText());
        observableOtherDetails.setChkStopPmtChrgAD(chkStopPmtChrgAD.isSelected());
        observableOtherDetails.setTxtChequeBookChrgAD(txtChequeBookChrgAD.getText());
        observableOtherDetails.setChkChequeRetChrgAD(chkChequeRetChrgAD.isSelected());
        observableOtherDetails.setTxtFolioChrgAD(txtFolioChrgAD.getText());
        observableOtherDetails.setChkInopChrgAD(chkInopChrgAD.isSelected());
        observableOtherDetails.setTxtAccCloseChrgAD(txtAccCloseChrgAD.getText());
        observableOtherDetails.setChkStmtChrgAD(chkStmtChrgAD.isSelected());
        observableOtherDetails.setCboStmtFreqAD(CommonUtil.convertObjToStr(cboStmtFreqAD.getSelectedItem()));
        observableOtherDetails.setChkNonMainMinBalChrgAD(chkNonMainMinBalChrgAD.isSelected());
        observableOtherDetails.setTxtExcessWithChrgAD(txtExcessWithChrgAD.getText());
        observableOtherDetails.setChkABBChrgAD(chkABBChrgAD.isSelected());
        observableOtherDetails.setChkNPAChrgAD(chkNPAChrgAD.isSelected());
        observableOtherDetails.setTxtABBChrgAD(txtABBChrgAD.getText());
        observableOtherDetails.setTdtNPAChrgAD(tdtNPAChrgAD.getDateValue());
        observableOtherDetails.setTxtMinActBalanceAD(txtMinActBalanceAD.getText());
        observableOtherDetails.setTdtDebit(tdtDebit.getDateValue());
        observableOtherDetails.setTdtCredit(tdtCredit.getDateValue());
        observableOtherDetails.setChkPayIntOnCrBalIN(chkPayIntOnCrBalIN.isSelected());
        observableOtherDetails.setChkPayIntOnDrBalIN(chkPayIntOnDrBalIN.isSelected());
        observableOtherDetails.setLblRateCodeValueIN(lblRateCodeValueIN.getText());
        observableOtherDetails.setLblCrInterestRateValueIN(lblCrInterestRateValueIN.getText());
        observableOtherDetails.setLblDrInterestRateValueIN(lblDrInterestRateValueIN.getText());
        observableOtherDetails.setLblPenalInterestValueIN(lblPenalInterestValueIN.getText());
        observableOtherDetails.setLblAgClearingValueIN(lblAgClearingValueIN.getText());
        observable.setLblStatus(lblStatus.getText());
        observableBorrow.setLblOpenDate(lblOpenDate2.getText());
        observableBorrow.setLblCustName(lblCustName_2.getText());
        observableBorrow.setLblCity(lblCity_BorrowerProfile_2.getText());
        observableBorrow.setLblState(lblState_BorrowerProfile_2.getText());
        observableBorrow.setLblPin(lblPin_BorrowerProfile_2.getText());
        observableBorrow.setLblPhone(lblPhone_BorrowerProfile_2.getText());
        observableBorrow.setLblFax(lblFax_BorrowerProfile_2.getText());
        observableBorrow.setLblBorrowerNo_2(lblBorrowerNo_2.getText());
        observable.setBorrowerNo(lblBorrowerNo_2.getText());
        observableOtherDetails.setLblAcctHead_Disp_ODetails(lblAcctHead_Disp_ODetails.getText());
        observableOtherDetails.setLblAcctNo_Disp_ODetails(lblAcctNo_Disp_ODetails.getText());
        observableRepay.setLblAccHead_RS_2(lblAccHead_RS_2.getText());
        observable.setLblAccountHead_FD_Disp(lblAccountHead_FD_Disp.getText());
        observableRepay.setLblAccNo_RS_2(lblAccNo_RS_2.getText());
        observableGuarantor.setLblAccHead_GD_2(lblAccHead_GD_2.getText());
        observableGuarantor.setLblAccNo_GD_2(lblAccNo_GD_2.getText());
        observableInt.setLblAccHead_IM_2(lblAccHead_IM_2.getText());
        observableInt.setLblAccNo_IM_2(lblAccNo_IM_2.getText());
        observableClassi.setLblAccHead_CD_2(lblAccHead_CD_2.getText());
        observableClassi.setLblAccNo_CD_2(lblAccNo_CD_2.getText());
        observableInt.setLblLimitAmt_2(lblLimitAmt_2.getText());
        observableInt.setLblPLR_Limit_2(lblPLR_Limit_2.getText());
        observableInt.setLblSancDate_2(lblSancDate_2.getText());
        observableInt.setLblExpiryDate_2(lblExpiryDate_2.getText());
        observableClassi.setLblSanctionNo2(lblSanctionNo2.getText());
        observableClassi.setLblSanctionDate2(lblSanctionDate2.getText());
        observable.setCboProductId(CommonUtil.convertObjToStr(cboProductId.getSelectedItem()));
        observableAdditionalSanctionOB.setAdditionalLimit(txtAdditionalLimit.getText());
        observableAdditionalSanctionOB.setAdditionalSanctionDt(tdtAdditionalSanctionDt.getDateValue());
        observableAdditionalSanctionOB.setPermittedBy(txtPermittedBy.getText());
        observableAdditionalSanctionOB.setPermittedName(lblPermittedName.getText());
        observableAdditionalSanctionOB.setDesignatedName(lblDesignatedName.getText());

        observable.setTxtSubsidyAmt(txtSubsidyAmt.getText());
        observable.setTdtSubsidyAppDt(tdtSubsidyAppDt.getDateValue());
        observable.setTxtSubsidyAccHead(txtSubsidyAccHead.getText());
        observable.setRdoRebateInterest_Yes(rdoRebateInterest_Yes.isSelected());
        observable.setRdoRebateInterest_No(rdoRebateInterest_No.isSelected());
        observable.setTxtRebateInterest_Amt(txtRebateInterest_Amt.getText());
        observable.setTdtRebateInterest_App_Dt(tdtRebateInterest_App_Dt.getDateValue());

        observable.setRdoEnhance_Yes(rdoEnhance_Yes.isSelected());
        observable.setRdoEnhance_No(rdoEnhance_No.isSelected());
        observable.setRdoRenewal_Yes(rdoRenewal_Yes.isSelected());
        observable.setRdoEnhance_No(rdoEnhance_No.isSelected());
        observable.setIsMobileBanking(chkMobileBankingTLAD.isSelected());
        observable.setTxtMobileNo(txtMobileNo.getText());
        //Added BY Suresh
         if (rdoSalaryRecovery_Yes.isSelected() == true) {
                observable.setRdoSalaryRecovery("Y");
            } else {
                observable.setRdoSalaryRecovery("N");
            }
//        if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
//            if (rdoSalaryRecovery_Yes.isSelected() == true) {
//                observable.setRdoSalaryRecovery("Y");
//            } else {
//                observable.setRdoSalaryRecovery("N");
//            }
//        } else {
//            observable.setRdoSalaryRecovery("");
//        }
        observable.setTdtMobileSubscribedFrom(tdtMobileSubscribedFrom.getDateValue());
        observable.setTxtJewelleryDetails(txtJewelleryDetails.getText());
        observable.setTxtGrossWeight(txtGrossWeight.getText());
        observable.setTxtGoldRemarks(txtGoldRemarks.getText());
        observable.setTxtValueOfGold(txtValueOfGold.getText());
        observable.setTxtNetWeight(txtNetWeight.getText());
        if(rdoGoldSecurityExitsYes.isSelected()){  // Added by nithya on 07-03-2020 for KD-1379
            observable.setRdoGoldSecurityStockExists("Y");
        }else{
            observable.setRdoGoldSecurityStockExists("N"); 
        }if(rdoGoldSecurityExitsNo.isSelected()){
           observable.setRdoGoldSecurityStockExists("N"); 
        }        
        observable.setTxtGoldSecurityId(txtGoldSecurityId.getText());
        observable.setTxtDirectRepaymentLoanPeriod(txtDirectRepaymentLoanPeriod.getText());
        observable.setDirectRepayment_Yes(DirectRepayment_Yes.isSelected());
        observable.setDirectRepayment_No(DirectRepayment_No.isSelected());
        observable.setTxtDirectRepaymentAcctNo(txtDirectRepaymentAcctNo.getText());
        observable.setTxtDirectRepaymentAcctHead(txtDirectRepaymentAcctHead.getText());

        //court order details

        observable.setTxtCourtOrderNo(txtCourtOrderNo.getText());
        observable.setTdtCourtOrderDate(tdtCourtOrderDate.getDateValue());
        observable.setTdtOTSDate(tdtOTSDate.getDateValue());
        observable.setTxtOTSRate(txtOTSRate.getText());
        observable.setTxtTotAmountDue(txtTotAmountDue.getText());
        observable.setTxtSettlementAmt(txtSettlementAmt.getText());
        observable.setTxtPrincipalAmount(CommonUtil.convertObjToDouble(txtPrincipalAmount.getText()).doubleValue());
        observable.setTxtInterestAmount(CommonUtil.convertObjToDouble(txtInterestAmount.getText()).doubleValue());
        observable.setTxtPenalInterestAmount(CommonUtil.convertObjToDouble(txtPenalInterestAmount.getText()).doubleValue());
        observable.setTxtChargeAmount(CommonUtil.convertObjToDouble(txtChargeAmount.getText()).doubleValue());
        observable.setTxtPenalInterestAmount(CommonUtil.convertObjToDouble(txtPenalInterestAmount.getText()).doubleValue());
        observable.setTxtNoInstallment(txtNoInstallment.getText());
        observable.setTxtPenalInterestAmount(CommonUtil.convertObjToDouble(txtPenalInterestAmount.getText()).doubleValue());
        observable.setTxtPenalInterestAmount(CommonUtil.convertObjToDouble(txtPenalInterestAmount.getText()).doubleValue());
        observable.setTxtInstallmentAmt(txtInstallmentAmt.getText());
        observable.setRdoRepaySingle_YES(rdoRepaySingle_YES.isSelected());
        observable.setRdoRepaySingle_NO(rdoRepaySingle_NO.isSelected());
        observable.setTxtPenal(txtPenal.getText());
        observable.setCourtRemarks(txtRepayRemarks.getText());
        observable.setChkOTS(chkOTS.isSelected());
        observable.setFirstInstallmentDt(tdtFirstInstallDt.getDateValue());
        observable.setLastInstallmentDt(tdtLastInstallDate.getDateValue());
        observable.setLblServiceTaxval(lblServiceTaxval.getText());
        observable.setServiceTax_Map(serviceTax_Map);
        observable.setTxtDealerID(txtDealerID.getText());//Added By Revathi.L
    }

    private void initComponentData() {
        cboCategory.setModel(observableBorrow.getCbmCategory());
        cboCaseStatus.setModel(observable.getCbmCaseStatus());
        cboConstitution.setModel(observableBorrow.getCbmConstitution());
//        cboAddressType.setModel(observableComp.getCbmAddressType());
//        cboNatureBusiness.setModel(observableComp.getCbmNatureBusiness());
//        cboCity_CompDetail.setModel(observableComp.getCbmCity_CompDetail());
//        cboState_CompDetail.setModel(observableComp.getCbmState_CompDetail());
//        cboCountry_CompDetail.setModel(observableComp.getCbmCountry_CompDetail());
        cboAccStatus.setModel(observable.getCbmAccStatus());
        cboSanctioningAuthority.setModel(observable.getCbmSanctioningAuthority());
        cboModeSanction.setModel(observable.getCbmModeSanction());
        cboRepayFreq.setModel(observable.getCbmRepayFreq());
        cboIntGetFrom.setModel(observable.getCbmIntGetFrom());
        cboTypeOfFacility.setModel(observable.getCbmTypeOfFacility());
        cboCity_GD.setModel(observableGuarantor.getCbmCity_GD());
        cboState_GD.setModel(observableGuarantor.getCbmState_GD());
        cboCountry_GD.setModel(observableGuarantor.getCbmCountry_GD());
        cboConstitution_GD.setModel(observableGuarantor.getCbmConstitution_GD());
        cboProdId.setModel(observableGuarantor.getCbmProdId());
        cboProdType.setModel(observableGuarantor.getCbmProdType());
        cboInterestType.setModel(observable.getCbmInterestType());
        cboProductId.setModel(observable.getCbmProductId());
        cboRepayFreq_Repayment.setModel(observableRepay.getCbmRepayFreq_Repayment());
        cboRepayType.setModel(observableRepay.getCbmRepayType());
        cboSanRepaymentType.setModel(observableRepay.getCbmSanRepaymentType());
        cboCommodityCode.setModel(observableClassi.getCbmCommodityCode());
        cboSectorCode1.setModel(observableClassi.getCbmSectorCode1());
        cboPurposeCode.setModel(observableClassi.getCbmPurposeCode());
        cboIndusCode.setModel(observableClassi.getCbmIndusCode());
        cbo20Code.setModel(observableClassi.getCbm20Code());
        cboGovtSchemeCode.setModel(observableClassi.getCbmGovtSchemeCode());
        cboGuaranteeCoverCode.setModel(observableClassi.getCbmGuaranteeCoverCode());
        cboHealthCode.setModel(observableClassi.getCbmHealthCode());
        cboDistrictCode.setModel(observableClassi.getCbmDistrictCode());
        cboWeakerSectionCode.setModel(observableClassi.getCbmWeakerSectionCode());
        cboRefinancingInsti.setModel(observableClassi.getCbmRefinancingInsti());
        cboAssetCode.setModel(observableClassi.getCbmAssetCode());
        cboTypeFacility.setModel(observableClassi.getCbmTypeFacility());
        cboOpModeAI.setModel(observableOtherDetails.getCbmOpModeAI());
        cboSettlementModeAI.setModel(observableOtherDetails.getCbmSettlementModeAI());
        cboStmtFreqAD.setModel(observableOtherDetails.getCbmStmtFreqAD());
        cboRecommendedByType.setModel(observable.getCbmRecommendedByType());
        cboRecommendedByType2.setModel(observable.getCbmRecommendedByType2());
        cboPLIName.setModel(observableGuarantor.getCbmPLIName());
        cboGuaranStatus.setModel(observableGuarantor.getCbmGuaranStatus());
        cboCity.setModel(observable.getCbmSecurityCity());
        cboNature.setModel(observable.getCbmNature());
        cboRight.setModel(observable.getCbmRight());
        cboPledge.setModel(observable.getCbmPledge());
        cboDocumentType.setModel(observable.getCbmDocumentType());
        cboProductTypeSecurity.setModel(observable.getCbmProdTypeSecurity());
        cboDepProdType.setModel(observable.getCbmDepProdID());
        cboLosSecurityType.setModel(observable.getCbmLosSecurityType());
        cboLosOtherInstitution.setModel(observable.getCbmLosInstitution());

        cboDirectRepaymentProdType.setModel(observable.getCbmDirectPaymentProdType());
        cboAgentId.setModel(observable.getCbmAgentId());
        cboDirectRepaymentLoanPeriod.setModel(observable.getCbmDirectRepaymentLoanPeriod());
        cboFreq.setModel(observable.getCbmFreq());
        cboCropName.setModel(observable.getCbmCropName());
    }

    private void setMaxLength() {
        txtSanctionSlNo.setValidation(new NumericValidation());
        txtGuarantorNo.setValidation(new NumericValidation());
        txtScheduleNo.setValidation(new NumericValidation());
        txtAcct_Name.setMaxLength(32);
        txtPeriodDifference_Days.setValidation(new NumericValidation(3, 0));
        txtPeriodDifference_Months.setValidation(new NumericValidation(3, 0));
        txtPeriodDifference_Years.setValidation(new NumericValidation(3, 0));
        txtCustID.setMaxLength(16);
        txtCustID.setAllowAll(true);

        txtDirectRepaymentAcctNo.setAllowAll(true);
        txtDirectRepaymentAcctHead.setAllowAll(true);
        txtDirectRepaymentAcctNo.setMaxLength(16);
        txtDirectRepaymentAcctHead.setMaxLength(16);
        txtDirectRepaymentLoanPeriod.setValidation(new NumericValidation());
        txtDirectRepaymentLoanPeriod.setMaxLength(3);
        txtSalaryRemark.setAllowAll(true);
        txtPinCode.setMaxLength(6);
        txtPinCode.setValidation(new NumericValidation());
        txtBalanceShare.setValidation(new NumericValidation());
        txtNetWorth1.setValidation(new NumericValidation());
        txtSubsidyAmt.setValidation(new CurrencyValidation(14, 2));
        txtEnteredSubsidyAmt.setValidation(new CurrencyValidation(14, 2));
        txtSubsidyAdjustedAmt.setValidation(new CurrencyValidation(14, 2));
        txtRebateInterest_Amt.setValidation(new CurrencyValidation(14, 2));
        txtSubsidyAccHead.setAllowAll(true);

//        txtReferences.setMaxLength(128);
//        txtReferences.setValidation(new DefaultValidation());
//        txtCompanyRegisNo.setMaxLength(16);
//        txtRiskRating.setMaxLength(3);
//        txtRiskRating.setValidation(new NumericValidation());
//        txtNetWorth.setMaxLength(16);
//        txtNetWorth.setValidation(new CurrencyValidation(14,2));
//        txtChiefExecutiveName.setMaxLength(32);
//        txtStreet_CompDetail.setMaxLength(256);
//        txtStreet_CompDetail.setValidation(new DefaultValidation());
//        txtArea_CompDetail.setMaxLength(128);
//        txtArea_CompDetail.setValidation(new DefaultValidation());
//        txtPin_CompDetail.setMaxLength(16);
//        txtPin_CompDetail.setValidation(new PincodeValidation_IN());
//        txtPhone_CompDetail.setMaxLength(32);
//        txtPhone_CompDetail.setAllowNumber(true);
//        txtRiskRating.setMaxLength(3);
//        txtRemarks__CompDetail.setMaxLength(128);
//        txtRemarks__CompDetail.setValidation(new DefaultValidation());
        txtNoInstallments.setMaxLength(3);
        txtNoInstallments.setValidation(new NumericValidation());
        txtSanctionNo.setMaxLength(16);
        txtSanctionNo.setAllowNumber(true);
        txtSanctionNo.setAllowAll(true);
//        txtSanctionRemarks.setMaxLength(128);
//        txtSanctionRemarks.setValidation(new DefaultValidation());
        txtLimit_SD.setMaxLength(16);
        txtLimit_SD.setValidation(new CurrencyValidation(14, 2));
        txtBalanceShare.setMaxLength(16);
        //  txtBalanceShare.setValidation(new CurrencyValidation(14,2));
//        txtLimit_SD2.setMaxLength(16);
//        txtLimit_SD2.setValidation(new CurrencyValidation(14,2));
        txtPurposeDesc.setMaxLength(128);
        txtPurposeDesc.setValidation(new DefaultValidation());
        txtGroupDesc.setMaxLength(128);
        txtGroupDesc.setValidation(new DefaultValidation());
        txtContactPerson.setMaxLength(32);
        txtContactPerson.setValidation(new DefaultValidation());
        txtContactPhone.setMaxLength(32);
        txtContactPhone.setAllowNumber(true);
        txtLaonAmt.setMaxLength(16);
        txtLaonAmt.setValidation(new CurrencyValidation(14, 2));
        txtNoInstall.setMaxLength(3);
        txtNoInstall.setValidation(new NumericValidation());
        txtNoMonthsMora.setMaxLength(3);
        txtNoMonthsMora.setValidation(new NumericValidation());
        txtFacility_Moratorium_Period.setMaxLength(3);
        txtFacility_Moratorium_Period.setValidation(new NumericValidation());
        txtMobileNo.setValidation(new NumericValidation());
        txtAmtPenulInstall.setMaxLength(16);
        txtAmtPenulInstall.setValidation(new CurrencyValidation(14, 2));
        txtAmtLastInstall.setMaxLength(16);
        txtAmtLastInstall.setValidation(new CurrencyValidation(14, 2));
        txtTotalInstallAmt.setMaxLength(16);
        txtTotalInstallAmt.setValidation(new CurrencyValidation(14, 2));
        txtTotalBaseAmt.setMaxLength(16);
        txtTotalBaseAmt.setValidation(new CurrencyValidation(14, 2));
        txtCustomerID_GD.setMaxLength(16);
        txtCustomerID_GD.setValidation(new DefaultValidation());
        txtCustomerID_GD.setAllowAll(true);
        txtGuaranAccNo.setMaxLength(16);
        txtGuaranName.setMaxLength(32);
        txtStreet_GD.setMaxLength(256);
        txtStreet_GD.setValidation(new DefaultValidation());
        txtArea_GD.setMaxLength(128);
        txtPin_GD.setMaxLength(16);
        txtPin_GD.setValidation(new PincodeValidation_IN());
        txtPhone_GD.setMaxLength(32);
        txtPhone_GD.setAllowNumber(true);
        txtGuarantorNetWorth.setMaxLength(16);
        txtGuarantorNetWorth.setValidation(new CurrencyValidation(14, 2));
        txtRemarks_DocumentDetails.setMaxLength(128);
        txtFromAmt.setMaxLength(16);
        txtFromAmt.setValidation(new CurrencyValidation(14, 2));
        txtToAmt.setMaxLength(16);
        txtToAmt.setValidation(new CurrencyValidation(14, 2));
        txtInter.setMaxLength(5);
        txtInter.setValidation(new PercentageValidation());
        txtPenalInter.setMaxLength(5);
        txtPenalInter.setValidation(new PercentageValidation());
        txtAgainstClearingInter.setMaxLength(5);
        txtAgainstClearingInter.setValidation(new PercentageValidation());
        txtPenalStatement.setMaxLength(5);
        txtPenalStatement.setValidation(new PercentageValidation());
        txtInterExpLimit.setMaxLength(5);
        txtInterExpLimit.setValidation(new PercentageValidation());
        txtATMNoAD.setMaxLength(16);
        txtATMNoAD.setAllowNumber(true);
        txtDebitNoAD.setMaxLength(16);
        txtDebitNoAD.setAllowNumber(true);
        txtCreditNoAD.setMaxLength(16);
        txtCreditNoAD.setAllowNumber(true);
        txtAccOpeningChrgAD.setValidation(new CurrencyValidation(14, 2));
        txtAccCloseChrgAD.setValidation(new CurrencyValidation(14, 2));
        txtMisServiceChrgAD.setValidation(new CurrencyValidation(14, 2));
        txtChequeBookChrgAD.setValidation(new CurrencyValidation(14, 2));
        txtFolioChrgAD.setValidation(new CurrencyValidation(14, 2));
        txtExcessWithChrgAD.setValidation(new CurrencyValidation(14, 2));
        txtMinActBalanceAD.setValidation(new CurrencyValidation(14, 2));
        txtABBChrgAD.setValidation(new CurrencyValidation(14, 2));
        txtAdditionalLimit.setValidation(new CurrencyValidation(14, 2));
        txtGuaratNo.setAllowAll(true);
        txtGuaranCommision.setValidation(new CurrencyValidation(14, 2));
        txtGuarnRemarks.setAllowAll(true);
        txtExistingAcctNo.setAllowAll(true);
        txtApplicationNo.setAllowAll(true);
        txtSHGId.setAllowAll(true);
        txtEditTermLoanNo.setAllowAll(true);
        txtCaseNumber.setAllowAll(true);
        txtFillingFees.setValidation(new CurrencyValidation(14, 2));
        txtMiscCharges.setValidation(new CurrencyValidation(14, 2));
        txtSalaryCertificateNo.setAllowAll(true);
        txtPinCode.setAllowAll(true);
        txtContactNo.setValidation(new NumericValidation());
        txtMemberNum.setAllowAll(true);
        txtTotalSalary.setValidation(new CurrencyValidation(14, 2));
        txtMemNo.setAllowAll(true);
        txtMemNetworth.setAllowAll(true);
        txtMemPriority.setAllowAll(true);
        txtNetWorth1.setAllowAll(true);
        txtContactNum.setValidation(new NumericValidation());
        txtOwnerMemNo.setAllowAll(true);
        txtDocumentNo.setAllowAll(true);
//        txtDocumentType.setAllowAll(true);
        txtRegisteredOffice.setAllowAll(true);
        txtPledgeNo.setAllowAll(true);
        txtPledgeAmount.setValidation(new CurrencyValidation(14, 2));
        txtVillage.setAllowAll(true);
        txtSurveyNo.setAllowAll(true);
        txtTotalArea.setAllowAll(true);
//        txtRemarks__CompDetail.setAllowAll(true);
//        txtSanctionRemarks.setAllowAll(true);
        txtTotalShareAmount.setValidation(new CurrencyValidation(14, 2));

        txtCourtOrderNo.setAllowAll(true);
        txtRepayRemarks.setAllowAll(true);
        txtOTSRate.setValidation(new NumericValidation(4, 4));
        txtTotAmountDue.setValidation(new CurrencyValidation(14, 2));
        txtSettlementAmt.setValidation(new CurrencyValidation(14, 2));
        txtPrincipalAmount.setValidation(new CurrencyValidation(14, 2));
        txtInterestAmount.setValidation(new CurrencyValidation(14, 2));
        txtPenalInterestAmount.setValidation(new CurrencyValidation(14, 2));
        txtChargeAmount.setValidation(new CurrencyValidation(14, 2));
        txtTotalAmountWrittenOff.setValidation(new CurrencyValidation(14, 2));
        txtNoInstallment.setValidation(new NumericValidation());
        txtInstallmentAmt.setValidation(new CurrencyValidation(14, 2));
        txtPenal.setValidation(new NumericValidation(4, 4));
        txtAreaAcrs.setValidation(new NumericValidation(4, 4));
        txtEligibleCropAmt.setValidation(new CurrencyValidation(14, 2));
    }

    private void setButtonEnableDisable() {
        btnNew.setEnabled(!btnNew.isEnabled());
        btnEdit.setEnabled(!btnEdit.isEnabled());
        btnDelete.setEnabled(!btnDelete.isEnabled());
        mitNew.setEnabled(btnNew.isEnabled());
        mitEdit.setEnabled(btnEdit.isEnabled());
        mitDelete.setEnabled(btnDelete.isEnabled());
        btnCancel.setEnabled(!btnNew.isEnabled());
        btnSave.setEnabled(btnCancel.isEnabled());
        mitSave.setEnabled(btnSave.isEnabled());
        mitCancel.setEnabled(btnCancel.isEnabled());
        setAuthBtnEnableDisable();
    }
    private void setButtonEnableDisable1() {
        btnNew.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        mitNew.setEnabled(true);
        mitEdit.setEnabled(true);
        mitDelete.setEnabled(true);
        btnSave.setEnabled(true);
        mitSave.setEnabled(true);
        mitCancel.setEnabled(true);
        //setAuthBtnEnableDisable();
    }

    /**
     * To Enable or Disable Authorize, Rejection and Exception Button
     */
    private void setAuthBtnEnableDisable() {
        final boolean enableDisable = !btnSave.isEnabled();
        btnAuthorize.setEnabled(enableDisable);
        btnException.setEnabled(enableDisable);
        btnReject.setEnabled(enableDisable);
        mitAuthorize.setEnabled(enableDisable);
        mitException.setEnabled(enableDisable);
        mitReject.setEnabled(enableDisable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     *
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        rdoStatus = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoSecurityDetails = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoAccType = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoAccLimit = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoNatureInterest = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoRiskWeight = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoMultiDisburseAllow = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoSubsidy = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoInterest = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoSecurityType = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoDoAddSIs = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoPostDatedCheque = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoIsSubmitted_DocumentDetails = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoStatus_Repayment = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoExecuted_DOC = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoMandatory_DOC = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoGuarnConstution = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoSHG = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoRenewalGroup = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoEnhanceGroup = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoSalaryRecovery = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoRebateInterestGroup = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoSubsidyAddMinusGroup = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoDirectRepaymentGroup = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoCourtOrderGroup = new com.see.truetransact.uicomponent.CButtonGroup();
        tbrTermLoan = new javax.swing.JToolBar();
        btnView = new com.see.truetransact.uicomponent.CButton();
        lblSpace4 = new com.see.truetransact.uicomponent.CLabel();
        btnNew = new com.see.truetransact.uicomponent.CButton();
        lblSpace17 = new com.see.truetransact.uicomponent.CLabel();
        btnEdit = new com.see.truetransact.uicomponent.CButton();
        lblSpace18 = new com.see.truetransact.uicomponent.CLabel();
        btnDelete = new com.see.truetransact.uicomponent.CButton();
        lblSpace2 = new com.see.truetransact.uicomponent.CLabel();
        btnSave = new com.see.truetransact.uicomponent.CButton();
        lblSpace19 = new com.see.truetransact.uicomponent.CLabel();
        btnCancel = new com.see.truetransact.uicomponent.CButton();
        lblSpace3 = new com.see.truetransact.uicomponent.CLabel();
        btnAuthorize = new com.see.truetransact.uicomponent.CButton();
        lblSpace20 = new com.see.truetransact.uicomponent.CLabel();
        btnException = new com.see.truetransact.uicomponent.CButton();
        lblSpace21 = new com.see.truetransact.uicomponent.CLabel();
        btnReject = new com.see.truetransact.uicomponent.CButton();
        lblspace3 = new com.see.truetransact.uicomponent.CLabel();
        btnPrint = new com.see.truetransact.uicomponent.CButton();
        lblSpace22 = new com.see.truetransact.uicomponent.CLabel();
        btnClose = new com.see.truetransact.uicomponent.CButton();
        lblSpace6 = new com.see.truetransact.uicomponent.CLabel();
        lblPanNumber1 = new com.see.truetransact.uicomponent.CLabel();
        lblSpace7 = new com.see.truetransact.uicomponent.CLabel();
        txtEditTermLoanNo = new com.see.truetransact.uicomponent.CTextField();
        lblSpace9 = new com.see.truetransact.uicomponent.CLabel();
        panStatus = new com.see.truetransact.uicomponent.CPanel();
        lblSpace1 = new com.see.truetransact.uicomponent.CLabel();
        lblStatus = new com.see.truetransact.uicomponent.CLabel();
        lblMsg = new com.see.truetransact.uicomponent.CLabel();
        panTermLoan = new com.see.truetransact.uicomponent.CPanel();
        tabLimitAmount = new com.see.truetransact.uicomponent.CTabbedPane();
        panBorrowCompanyDetails = new com.see.truetransact.uicomponent.CPanel();
        panBorrowProfile = new com.see.truetransact.uicomponent.CPanel();
        panBorrowProfile_CustName = new com.see.truetransact.uicomponent.CPanel();
        cboConstitution = new com.see.truetransact.uicomponent.CComboBox();
        lblCategory = new com.see.truetransact.uicomponent.CLabel();
        lblConstitution = new com.see.truetransact.uicomponent.CLabel();
        cboCategory = new com.see.truetransact.uicomponent.CComboBox();
        lblBorrowerNo = new com.see.truetransact.uicomponent.CLabel();
        lblBorrowerNo_2 = new com.see.truetransact.uicomponent.CLabel();
        txtCustID = new com.see.truetransact.uicomponent.CTextField();
        lblCustID = new com.see.truetransact.uicomponent.CLabel();
        btnCustID = new com.see.truetransact.uicomponent.CButton();
        panExistingCustomer = new com.see.truetransact.uicomponent.CPanel();
        rdoExistingCustomer_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoExistingCustomer_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblExistingCustomer = new com.see.truetransact.uicomponent.CLabel();
        lblExistingAcctNo = new com.see.truetransact.uicomponent.CLabel();
        txtExistingAcctNo = new com.see.truetransact.uicomponent.CTextField();
        lblMultiDisburseAllow = new com.see.truetransact.uicomponent.CLabel();
        panMultiDisburseAllow = new com.see.truetransact.uicomponent.CPanel();
        rdoMultiDisburseAllow_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoMultiDisburseAllow_No = new com.see.truetransact.uicomponent.CRadioButton();
        btnMembershipLia = new com.see.truetransact.uicomponent.CButton();
        panShareDetails = new com.see.truetransact.uicomponent.CPanel();
        lblTotalShareAmount = new com.see.truetransact.uicomponent.CLabel();
        lblTotalNoOfShare = new com.see.truetransact.uicomponent.CLabel();
        txtTotalNoOfShare = new com.see.truetransact.uicomponent.CTextField();
        txtTotalShareAmount = new com.see.truetransact.uicomponent.CTextField();
        panSHGDetails = new com.see.truetransact.uicomponent.CPanel();
        panSHG = new com.see.truetransact.uicomponent.CPanel();
        rdoSHG_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoSHG_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblSHGYesorNo = new com.see.truetransact.uicomponent.CLabel();
        lblSHGId = new com.see.truetransact.uicomponent.CLabel();
        txtSHGId = new com.see.truetransact.uicomponent.CTextField();
        btnSHGId = new com.see.truetransact.uicomponent.CButton();
        panSalaryRecovery = new com.see.truetransact.uicomponent.CPanel();
        panSalaryRecoveryValue = new com.see.truetransact.uicomponent.CPanel();
        rdoSalaryRecovery_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoSalaryRecovery_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblSalaryRecovery = new com.see.truetransact.uicomponent.CLabel();
        txtApplicationNo = new com.see.truetransact.uicomponent.CTextField();
        lblApplicationNo = new com.see.truetransact.uicomponent.CLabel();
        btnAppNo = new com.see.truetransact.uicomponent.CButton();
        panBorrowProfile_CustID = new com.see.truetransact.uicomponent.CPanel();
        panBorrowerTabCTable = new com.see.truetransact.uicomponent.CPanel();
        srpBorrowerTabCTable = new com.see.truetransact.uicomponent.CScrollPane();
        tblBorrowerTabCTable = new com.see.truetransact.uicomponent.CTable();
        panBorrowerTabTools = new com.see.truetransact.uicomponent.CPanel();
        btnNew_Borrower = new com.see.truetransact.uicomponent.CButton();
        btnToMain_Borrower = new com.see.truetransact.uicomponent.CButton();
        btnDeleteBorrower = new com.see.truetransact.uicomponent.CButton();
        panCustDetails = new com.see.truetransact.uicomponent.CPanel();
        lblOpenDate = new com.see.truetransact.uicomponent.CLabel();
        lblOpenDate2 = new com.see.truetransact.uicomponent.CLabel();
        lblCustName = new com.see.truetransact.uicomponent.CLabel();
        lblCustName_2 = new com.see.truetransact.uicomponent.CLabel();
        lblCity_BorrowerProfile = new com.see.truetransact.uicomponent.CLabel();
        lblCity_BorrowerProfile_2 = new com.see.truetransact.uicomponent.CLabel();
        lblState_BorrowerProfile = new com.see.truetransact.uicomponent.CLabel();
        lblState_BorrowerProfile_2 = new com.see.truetransact.uicomponent.CLabel();
        lblPin_BorrowerProfile = new com.see.truetransact.uicomponent.CLabel();
        lblPin_BorrowerProfile_2 = new com.see.truetransact.uicomponent.CLabel();
        lblPhone_BorrowerProfile = new com.see.truetransact.uicomponent.CLabel();
        lblPhone_BorrowerProfile_2 = new com.see.truetransact.uicomponent.CLabel();
        lblFax_BorrowerProfile = new com.see.truetransact.uicomponent.CLabel();
        lblFax_BorrowerProfile_2 = new com.see.truetransact.uicomponent.CLabel();
        panChargeDetails = new com.see.truetransact.uicomponent.CPanel();
        panLockStatus = new com.see.truetransact.uicomponent.CPanel();
        lblLockStatusVal = new com.see.truetransact.uicomponent.CLabel();
        lblLockStatus = new com.see.truetransact.uicomponent.CLabel();
        lblBalanceShare = new com.see.truetransact.uicomponent.CLabel();
        txtBalanceShare = new com.see.truetransact.uicomponent.CTextField();
        chkRecovery = new com.see.truetransact.uicomponent.CCheckBox();
        jPanel2 = new com.see.truetransact.uicomponent.CPanel();
        jLabel1 = new com.see.truetransact.uicomponent.CLabel();
        txtNextAccNo = new com.see.truetransact.uicomponent.CTextField();
        panserviceTax = new com.see.truetransact.uicomponent.CPanel();
        lblServiceTax = new com.see.truetransact.uicomponent.CLabel();
        lblServiceTaxval = new com.see.truetransact.uicomponent.CLabel();
        sptBorroewrProfile = new com.see.truetransact.uicomponent.CSeparator();
        panCompanyDetails_Company = new com.see.truetransact.uicomponent.CPanel();
        srpComp_Tab_Addr = new com.see.truetransact.uicomponent.CSeparator();
        panRepaySanctionDetails = new com.see.truetransact.uicomponent.CPanel();
        lblFacility_Moratorium_Period = new com.see.truetransact.uicomponent.CLabel();
        txtFacility_Moratorium_Period = new com.see.truetransact.uicomponent.CTextField();
        lblNoInstallments = new com.see.truetransact.uicomponent.CLabel();
        txtNoInstallments = new com.see.truetransact.uicomponent.CTextField();
        lblRepayFreq = new com.see.truetransact.uicomponent.CLabel();
        cboRepayFreq = new com.see.truetransact.uicomponent.CComboBox();
        lblFDate = new com.see.truetransact.uicomponent.CLabel();
        tdtFDate = new com.see.truetransact.uicomponent.CDateField();
        lblFacility_Repay_Date = new com.see.truetransact.uicomponent.CLabel();
        tdtFacility_Repay_Date = new com.see.truetransact.uicomponent.CDateField();
        lblTDate = new com.see.truetransact.uicomponent.CLabel();
        tdtTDate = new com.see.truetransact.uicomponent.CDateField();
        panPeriodDifference = new com.see.truetransact.uicomponent.CPanel();
        txtPeriodDifference_Years = new com.see.truetransact.uicomponent.CTextField();
        lblPeriodDifference_Years = new com.see.truetransact.uicomponent.CLabel();
        txtPeriodDifference_Months = new com.see.truetransact.uicomponent.CTextField();
        lblPeriodDifference_Months = new com.see.truetransact.uicomponent.CLabel();
        txtPeriodDifference_Days = new com.see.truetransact.uicomponent.CTextField();
        lblPeriodDifference_Days = new com.see.truetransact.uicomponent.CLabel();
        lblPeriodDifference = new com.see.truetransact.uicomponent.CLabel();
        cLabel1 = new com.see.truetransact.uicomponent.CLabel();
        txtSanctionRemarks = new com.see.truetransact.uicomponent.CTextField();
        panFacility = new com.see.truetransact.uicomponent.CPanel();
        lblTypeOfFacility2 = new com.see.truetransact.uicomponent.CLabel();
        lblTypeOfFacility = new com.see.truetransact.uicomponent.CLabel();
        cboTypeOfFacility = new com.see.truetransact.uicomponent.CComboBox();
        lblProductId = new com.see.truetransact.uicomponent.CLabel();
        cboProductId = new com.see.truetransact.uicomponent.CComboBox();
        lblAcctNo_Sanction = new com.see.truetransact.uicomponent.CLabel();
        lblAcctNo_Sanction_Disp = new com.see.truetransact.uicomponent.CLabel();
        lblAccHead = new com.see.truetransact.uicomponent.CLabel();
        lblAccHead_2 = new com.see.truetransact.uicomponent.CLabel();
        lblModeSanction = new com.see.truetransact.uicomponent.CLabel();
        cboModeSanction = new com.see.truetransact.uicomponent.CComboBox();
        lblAgentId = new com.see.truetransact.uicomponent.CLabel();
        cboAgentId = new com.see.truetransact.uicomponent.CComboBox();
        lblAgentname = new com.see.truetransact.uicomponent.CLabel();
        lblAgentnameDisplay = new com.see.truetransact.uicomponent.CLabel();
        lblRenewal = new com.see.truetransact.uicomponent.CLabel();
        lblEnhance = new com.see.truetransact.uicomponent.CLabel();
        panODEnhance = new com.see.truetransact.uicomponent.CPanel();
        rdoEnhance_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoEnhance_No = new com.see.truetransact.uicomponent.CRadioButton();
        panRenewal = new com.see.truetransact.uicomponent.CPanel();
        rdoRenewal_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoRenewal_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblEligibleAmt = new com.see.truetransact.uicomponent.CLabel();
        chkEligibleAmt = new com.see.truetransact.uicomponent.CCheckBox();
        panSanctionAuthority = new com.see.truetransact.uicomponent.CPanel();
        lblSanctioningAuthority = new com.see.truetransact.uicomponent.CLabel();
        cboSanctioningAuthority = new com.see.truetransact.uicomponent.CComboBox();
        lblInterestType = new com.see.truetransact.uicomponent.CLabel();
        cboInterestType = new com.see.truetransact.uicomponent.CComboBox();
        lblSanctionSlNo = new com.see.truetransact.uicomponent.CLabel();
        txtSanctionSlNo = new com.see.truetransact.uicomponent.CTextField();
        lblSanctionNo = new com.see.truetransact.uicomponent.CLabel();
        txtSanctionNo = new com.see.truetransact.uicomponent.CTextField();
        lblSanctionDate = new com.see.truetransact.uicomponent.CLabel();
        tdtSanctionDate = new com.see.truetransact.uicomponent.CDateField();
        lblLimit_SD = new com.see.truetransact.uicomponent.CLabel();
        txtLimit_SD = new com.see.truetransact.uicomponent.CTextField();
        lblMoratorium_Given = new com.see.truetransact.uicomponent.CLabel();
        chkMoratorium_Given = new com.see.truetransact.uicomponent.CCheckBox();
        lblSanRepaymentType = new com.see.truetransact.uicomponent.CLabel();
        cboSanRepaymentType = new com.see.truetransact.uicomponent.CComboBox();
        panCalcDiminishing = new com.see.truetransact.uicomponent.CPanel();
        lblCalcDiminshing = new com.see.truetransact.uicomponent.CLabel();
        chkDiminishing = new com.see.truetransact.uicomponent.CCheckBox();
        ResolutionSearch = new com.see.truetransact.uicomponent.CButton();
        panFacilityDetails = new com.see.truetransact.uicomponent.CPanel();
        panFacilityDetails_Data = new com.see.truetransact.uicomponent.CPanel();
        panFDAccount = new com.see.truetransact.uicomponent.CPanel();
        lblAccLimit = new com.see.truetransact.uicomponent.CLabel();
        lblRiskWeight = new com.see.truetransact.uicomponent.CLabel();
        panFacilityProdID = new javax.swing.JPanel();
        lblProductID_FD = new com.see.truetransact.uicomponent.CLabel();
        lblAccountHead_FD = new com.see.truetransact.uicomponent.CLabel();
        lblAccountHead_FD_Disp = new com.see.truetransact.uicomponent.CLabel();
        lblProductID_FD_Disp = new com.see.truetransact.uicomponent.CLabel();
        lblAcctNo_FD = new com.see.truetransact.uicomponent.CLabel();
        lblAcctNo_FD_Disp = new com.see.truetransact.uicomponent.CLabel();
        lblAccStatus = new com.see.truetransact.uicomponent.CLabel();
        cboAccStatus = new com.see.truetransact.uicomponent.CComboBox();
        lblAccOpenDt = new com.see.truetransact.uicomponent.CLabel();
        tdtAccountOpenDate = new com.see.truetransact.uicomponent.CDateField();
        lblAccCloseDt = new com.see.truetransact.uicomponent.CLabel();
        tdtAccountCloseDate = new com.see.truetransact.uicomponent.CDateField();
        panSecurityDetails_FD = new com.see.truetransact.uicomponent.CPanel();
        rdoSecurityDetails_Unsec = new com.see.truetransact.uicomponent.CRadioButton();
        rdoSecurityDetails_Partly = new com.see.truetransact.uicomponent.CRadioButton();
        rdoSecurityDetails_Fully = new com.see.truetransact.uicomponent.CRadioButton();
        panOtherFacilityChkBoxes = new com.see.truetransact.uicomponent.CPanel();
        chkDocDetails = new com.see.truetransact.uicomponent.CCheckBox();
        chkAuthorizedSignatory = new com.see.truetransact.uicomponent.CCheckBox();
        chkPOFAttorney = new com.see.truetransact.uicomponent.CCheckBox();
        chkAccountTransfer = new com.see.truetransact.uicomponent.CCheckBox();
        panFacilityChkBoxes = new com.see.truetransact.uicomponent.CPanel();
        chkInsurance = new com.see.truetransact.uicomponent.CCheckBox();
        chkGurantor = new com.see.truetransact.uicomponent.CCheckBox();
        chkStockInspect = new com.see.truetransact.uicomponent.CCheckBox();
        chkOTS = new com.see.truetransact.uicomponent.CCheckBox();
        panAccLimit = new com.see.truetransact.uicomponent.CPanel();
        rdoAccLimit_Main = new com.see.truetransact.uicomponent.CRadioButton();
        rdoAccLimit_Submit = new com.see.truetransact.uicomponent.CRadioButton();
        panRiskWeight = new com.see.truetransact.uicomponent.CPanel();
        rdoRiskWeight_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoRiskWeight_No = new com.see.truetransact.uicomponent.CRadioButton();
        panMobileBanking = new com.see.truetransact.uicomponent.CPanel();
        chkMobileBankingTLAD = new com.see.truetransact.uicomponent.CCheckBox();
        lblMobileNo = new com.see.truetransact.uicomponent.CLabel();
        txtMobileNo = new com.see.truetransact.uicomponent.CTextField();
        tdtMobileSubscribedFrom = new com.see.truetransact.uicomponent.CDateField();
        lblMobileSubscribedFrom = new com.see.truetransact.uicomponent.CLabel();
        panAgentDealerDetails = new com.see.truetransact.uicomponent.CPanel();
        lblDealerID = new com.see.truetransact.uicomponent.CLabel();
        txtDealerID = new com.see.truetransact.uicomponent.CTextField();
        lblDealerName = new com.see.truetransact.uicomponent.CLabel();
        btnDealer = new com.see.truetransact.uicomponent.CButton();
        sptFacilityDetails_Vert = new com.see.truetransact.uicomponent.CSeparator();
        panFDDate = new com.see.truetransact.uicomponent.CPanel();
        panDemandPromssoryDate = new com.see.truetransact.uicomponent.CPanel();
        lblDemandPromNoteDate = new com.see.truetransact.uicomponent.CLabel();
        tdtDemandPromNoteDate = new com.see.truetransact.uicomponent.CDateField();
        lblDemandPromNoteExpDate = new com.see.truetransact.uicomponent.CLabel();
        tdtDemandPromNoteExpDate = new com.see.truetransact.uicomponent.CDateField();
        lblBlank2 = new com.see.truetransact.uicomponent.CLabel();
        tdtAODDate = new com.see.truetransact.uicomponent.CDateField();
        lblAODDate = new com.see.truetransact.uicomponent.CLabel();
        lblSubsidy = new com.see.truetransact.uicomponent.CLabel();
        panSubsidy = new com.see.truetransact.uicomponent.CPanel();
        rdoSubsidy_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoSubsidy_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblPurposeDesc = new com.see.truetransact.uicomponent.CLabel();
        txtPurposeDesc = new com.see.truetransact.uicomponent.CTextField();
        lblGroupDesc = new com.see.truetransact.uicomponent.CLabel();
        txtGroupDesc = new com.see.truetransact.uicomponent.CTextField();
        lblNatureInterest = new com.see.truetransact.uicomponent.CLabel();
        panNatureInterest = new com.see.truetransact.uicomponent.CPanel();
        rdoNatureInterest_PLR = new com.see.truetransact.uicomponent.CRadioButton();
        rdoNatureInterest_NonPLR = new com.see.truetransact.uicomponent.CRadioButton();
        lblDPLimit = new com.see.truetransact.uicomponent.CLabel();
        panInterest = new com.see.truetransact.uicomponent.CPanel();
        rdoInterest_Simple = new com.see.truetransact.uicomponent.CRadioButton();
        rdoInterest_Compound = new com.see.truetransact.uicomponent.CRadioButton();
        panInterest1 = new com.see.truetransact.uicomponent.CPanel();
        rdoDP_YES = new com.see.truetransact.uicomponent.CRadioButton();
        rdoDP_NO = new com.see.truetransact.uicomponent.CRadioButton();
        lblContactPerson = new com.see.truetransact.uicomponent.CLabel();
        txtContactPerson = new com.see.truetransact.uicomponent.CTextField();
        lblContactPhone = new com.see.truetransact.uicomponent.CLabel();
        txtContactPhone = new com.see.truetransact.uicomponent.CTextField();
        cboRecommendedByType = new com.see.truetransact.uicomponent.CComboBox();
        txtAcct_Name = new com.see.truetransact.uicomponent.CTextField();
        lblAcct_Name = new com.see.truetransact.uicomponent.CLabel();
        lblRecommandByType = new com.see.truetransact.uicomponent.CLabel();
        lblInterest = new com.see.truetransact.uicomponent.CLabel();
        txtSubsidyAmt = new com.see.truetransact.uicomponent.CTextField();
        lblSubsidyAmt = new com.see.truetransact.uicomponent.CLabel();
        lblSubsidyAccHead = new com.see.truetransact.uicomponent.CLabel();
        lblRebateInterest = new com.see.truetransact.uicomponent.CLabel();
        txtRebateInterest_Amt = new com.see.truetransact.uicomponent.CTextField();
        tdtRebateInterest_App_Dt = new com.see.truetransact.uicomponent.CDateField();
        panSubsidy1 = new com.see.truetransact.uicomponent.CPanel();
        rdoRebateInterest_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoRebateInterest_No = new com.see.truetransact.uicomponent.CRadioButton();
        tdtSubsidyAppDt = new com.see.truetransact.uicomponent.CDateField();
        lblRebateInterest_App_Dt = new com.see.truetransact.uicomponent.CLabel();
        lblSubsidyAppDt = new com.see.truetransact.uicomponent.CLabel();
        lblRebateInterest_Amt = new com.see.truetransact.uicomponent.CLabel();
        lblSubsidy1 = new com.see.truetransact.uicomponent.CLabel();
        panSubsidy2 = new com.see.truetransact.uicomponent.CPanel();
        rdoSubsidy_add = new com.see.truetransact.uicomponent.CRadioButton();
        rdoSubsidy_Minus = new com.see.truetransact.uicomponent.CRadioButton();
        txtEnteredSubsidyAmt = new com.see.truetransact.uicomponent.CTextField();
        lblSubsidyAdjustedAmt = new com.see.truetransact.uicomponent.CLabel();
        txtSubsidyAdjustedAmt = new com.see.truetransact.uicomponent.CTextField();
        panSubsidyAchead = new com.see.truetransact.uicomponent.CPanel();
        txtSubsidyAccHead = new com.see.truetransact.uicomponent.CTextField();
        btnGLAchd = new com.see.truetransact.uicomponent.CButton();
        cboRecommendedByType2 = new com.see.truetransact.uicomponent.CComboBox();
        lblKoleLandArea = new com.see.truetransact.uicomponent.CLabel();
        txtKoleLandArea = new com.see.truetransact.uicomponent.CTextField();
        panAdditionalSanctionDetails = new com.see.truetransact.uicomponent.CPanel();
        panAdditionalkSanctionDetails = new com.see.truetransact.uicomponent.CPanel();
        panPeakSanctionDetails_Sanction1 = new com.see.truetransact.uicomponent.CPanel();
        lblPermittedBy = new com.see.truetransact.uicomponent.CLabel();
        tdtAdditionalSanctionDt = new com.see.truetransact.uicomponent.CDateField();
        txtPermittedBy = new com.see.truetransact.uicomponent.CTextField();
        btnPermittedBy = new com.see.truetransact.uicomponent.CButton();
        txtAdditionalLimit = new com.see.truetransact.uicomponent.CTextField();
        lblAdditionalLimit = new com.see.truetransact.uicomponent.CLabel();
        lblAdditionalSanctionDt = new com.see.truetransact.uicomponent.CLabel();
        lblName = new com.see.truetransact.uicomponent.CLabel();
        lblPermittedDesignation = new com.see.truetransact.uicomponent.CLabel();
        lblPermittedName = new com.see.truetransact.uicomponent.CLabel();
        lblDesignatedName = new com.see.truetransact.uicomponent.CLabel();
        panButton2_SD1 = new com.see.truetransact.uicomponent.CPanel();
        btnNew_ASD = new com.see.truetransact.uicomponent.CButton();
        btnSave_ASD = new com.see.truetransact.uicomponent.CButton();
        btnDelete_ASD = new com.see.truetransact.uicomponent.CButton();
        panPeakSanctionDetails_Table = new com.see.truetransact.uicomponent.CPanel();
        panTableFields_SD1 = new com.see.truetransact.uicomponent.CPanel();
        lblTypeOfFacility1 = new com.see.truetransact.uicomponent.CLabel();
        cboTypeOfFacility1 = new com.see.truetransact.uicomponent.CComboBox();
        lblLimit_SD1 = new com.see.truetransact.uicomponent.CLabel();
        txtLimit_SD1 = new com.see.truetransact.uicomponent.CTextField();
        lblFDate1 = new com.see.truetransact.uicomponent.CLabel();
        tdtFDate1 = new com.see.truetransact.uicomponent.CDateField();
        lblTDate1 = new com.see.truetransact.uicomponent.CLabel();
        tdtTDate1 = new com.see.truetransact.uicomponent.CDateField();
        panButton1 = new com.see.truetransact.uicomponent.CPanel();
        btnNew2 = new com.see.truetransact.uicomponent.CButton();
        btnSave2 = new com.see.truetransact.uicomponent.CButton();
        btnDelete2 = new com.see.truetransact.uicomponent.CButton();
        lblNoInstallments1 = new com.see.truetransact.uicomponent.CLabel();
        txtNoInstallments1 = new com.see.truetransact.uicomponent.CTextField();
        lblRepayFreq1 = new com.see.truetransact.uicomponent.CLabel();
        cboRepayFreq1 = new com.see.truetransact.uicomponent.CComboBox();
        cboProductId1 = new com.see.truetransact.uicomponent.CComboBox();
        lblProductId1 = new com.see.truetransact.uicomponent.CLabel();
        lblAccHead1 = new com.see.truetransact.uicomponent.CLabel();
        lblAccHead_3 = new com.see.truetransact.uicomponent.CLabel();
        lblAcctNo_Sanction1 = new com.see.truetransact.uicomponent.CLabel();
        lblAcctNo_Sanction_Disp1 = new com.see.truetransact.uicomponent.CLabel();
        lblFacility_Repay_Date1 = new com.see.truetransact.uicomponent.CLabel();
        tdtFacility_Repay_Date1 = new com.see.truetransact.uicomponent.CDateField();
        chkMoratorium_Given1 = new com.see.truetransact.uicomponent.CCheckBox();
        lblMoratorium_Given1 = new com.see.truetransact.uicomponent.CLabel();
        lblFacility_Moratorium_Period1 = new com.see.truetransact.uicomponent.CLabel();
        txtFacility_Moratorium_Period1 = new com.see.truetransact.uicomponent.CTextField();
        lblPeriodDifference1 = new com.see.truetransact.uicomponent.CLabel();
        panPeriodDifference1 = new com.see.truetransact.uicomponent.CPanel();
        txtPeriodDifference_Years1 = new com.see.truetransact.uicomponent.CTextField();
        lblPeriodDifference_Years1 = new com.see.truetransact.uicomponent.CLabel();
        txtPeriodDifference_Months1 = new com.see.truetransact.uicomponent.CTextField();
        lblPeriodDifference_Months1 = new com.see.truetransact.uicomponent.CLabel();
        txtPeriodDifference_Days1 = new com.see.truetransact.uicomponent.CTextField();
        lblPeriodDifference_Days1 = new com.see.truetransact.uicomponent.CLabel();
        panTable_SD1 = new com.see.truetransact.uicomponent.CPanel();
        srpTable_SD1 = new com.see.truetransact.uicomponent.CScrollPane();
        tblSanctionDetails1 = new com.see.truetransact.uicomponent.CTable();
        panTable_ASD = new com.see.truetransact.uicomponent.CPanel();
        srpTable_ASD = new com.see.truetransact.uicomponent.CScrollPane();
        tblPeakSanctionDetails = new com.see.truetransact.uicomponent.CTable();
        lblTotalLimit = new com.see.truetransact.uicomponent.CLabel();
        lblTotalLimitAmt = new com.see.truetransact.uicomponent.CLabel();
        panSecurityDetails = new com.see.truetransact.uicomponent.CPanel();
        panGuarantorInsuranceDetails = new com.see.truetransact.uicomponent.CPanel();
        panGuarantorDetails = new com.see.truetransact.uicomponent.CPanel();
        panProd_GD = new com.see.truetransact.uicomponent.CPanel();
        lblProdID_GD = new com.see.truetransact.uicomponent.CLabel();
        lblProdID_GD_Disp = new com.see.truetransact.uicomponent.CLabel();
        lblAccHead_GD = new com.see.truetransact.uicomponent.CLabel();
        lblAccHead_GD_2 = new com.see.truetransact.uicomponent.CLabel();
        lblAccNo_GD = new com.see.truetransact.uicomponent.CLabel();
        lblAccNo_GD_2 = new com.see.truetransact.uicomponent.CLabel();
        panGuarantorDetail_Detail = new com.see.truetransact.uicomponent.CPanel();
        panToolBtns = new com.see.truetransact.uicomponent.CPanel();
        btnGuarantorNew = new com.see.truetransact.uicomponent.CButton();
        btnGuarantorSave = new com.see.truetransact.uicomponent.CButton();
        btnGuarantorDelete = new com.see.truetransact.uicomponent.CButton();
        panGuarantorDetailsTable = new com.see.truetransact.uicomponent.CPanel();
        srpGuarantorTable = new com.see.truetransact.uicomponent.CScrollPane();
        tblGuarantorTable = new com.see.truetransact.uicomponent.CTable();
        sptGuarantorDetail_Hori1 = new com.see.truetransact.uicomponent.CSeparator();
        panGuarnOption = new com.see.truetransact.uicomponent.CPanel();
        rdoGuarnIndividual = new com.see.truetransact.uicomponent.CRadioButton();
        rdoGuarnInsititutional = new com.see.truetransact.uicomponent.CRadioButton();
        lblMemberNo = new com.see.truetransact.uicomponent.CLabel();
        lblMemberNo_Disp = new com.see.truetransact.uicomponent.CLabel();
        panInterMaintenance = new com.see.truetransact.uicomponent.CPanel();
        panInterMaintenance_Acc = new com.see.truetransact.uicomponent.CPanel();
        panProd_IM = new com.see.truetransact.uicomponent.CPanel();
        lblProdID_IM = new com.see.truetransact.uicomponent.CLabel();
        lblProdID_IM_Disp = new com.see.truetransact.uicomponent.CLabel();
        lblIntGetFrom = new com.see.truetransact.uicomponent.CLabel();
        cboIntGetFrom = new com.see.truetransact.uicomponent.CComboBox();
        panAcc_IM = new com.see.truetransact.uicomponent.CPanel();
        lblAccHead_IM = new com.see.truetransact.uicomponent.CLabel();
        lblAccHead_IM_2 = new com.see.truetransact.uicomponent.CLabel();
        lblAccNo_IM = new com.see.truetransact.uicomponent.CLabel();
        lblAccNo_IM_2 = new com.see.truetransact.uicomponent.CLabel();
        sptInterMaintenance_Hori = new com.see.truetransact.uicomponent.CSeparator();
        panInterMaintenance_Details = new com.see.truetransact.uicomponent.CPanel();
        panLimit = new com.see.truetransact.uicomponent.CPanel();
        lblLimitAmt = new com.see.truetransact.uicomponent.CLabel();
        lblLimitAmt_2 = new com.see.truetransact.uicomponent.CLabel();
        lblPLR_Limit = new com.see.truetransact.uicomponent.CLabel();
        lblPLR_Limit_2 = new com.see.truetransact.uicomponent.CLabel();
        panDate = new com.see.truetransact.uicomponent.CPanel();
        lblSancDate = new com.see.truetransact.uicomponent.CLabel();
        lblSancDate_2 = new com.see.truetransact.uicomponent.CLabel();
        lblExpiryDate = new com.see.truetransact.uicomponent.CLabel();
        lblExpiryDate_2 = new com.see.truetransact.uicomponent.CLabel();
        sptInterMaintenance_Hori2 = new com.see.truetransact.uicomponent.CSeparator();
        panInterMaintenance_Table = new com.see.truetransact.uicomponent.CPanel();
        panTableFields = new com.see.truetransact.uicomponent.CPanel();
        lblFrom = new com.see.truetransact.uicomponent.CLabel();
        tdtFrom = new com.see.truetransact.uicomponent.CDateField();
        lblTo = new com.see.truetransact.uicomponent.CLabel();
        tdtTo = new com.see.truetransact.uicomponent.CDateField();
        lblFromAmt = new com.see.truetransact.uicomponent.CLabel();
        txtFromAmt = new com.see.truetransact.uicomponent.CTextField();
        lblToAmt = new com.see.truetransact.uicomponent.CLabel();
        txtToAmt = new com.see.truetransact.uicomponent.CTextField();
        lblInter = new com.see.truetransact.uicomponent.CLabel();
        txtInter = new com.see.truetransact.uicomponent.CTextField();
        lblPenalInter = new com.see.truetransact.uicomponent.CLabel();
        txtPenalInter = new com.see.truetransact.uicomponent.CTextField();
        lblAgainstClearingInter = new com.see.truetransact.uicomponent.CLabel();
        txtAgainstClearingInter = new com.see.truetransact.uicomponent.CTextField();
        lblPenalStatement = new com.see.truetransact.uicomponent.CLabel();
        txtPenalStatement = new com.see.truetransact.uicomponent.CTextField();
        lblInterExpLimit = new com.see.truetransact.uicomponent.CLabel();
        txtInterExpLimit = new com.see.truetransact.uicomponent.CTextField();
        panButtons = new com.see.truetransact.uicomponent.CPanel();
        btnInterestMaintenanceNew = new com.see.truetransact.uicomponent.CButton();
        btnInterestMaintenanceSave = new com.see.truetransact.uicomponent.CButton();
        btnInterestMaintenanceDelete = new com.see.truetransact.uicomponent.CButton();
        panTable_IM = new com.see.truetransact.uicomponent.CPanel();
        srpInterMaintenance = new com.see.truetransact.uicomponent.CScrollPane();
        tblInterMaintenance = new com.see.truetransact.uicomponent.CTable();
        panAccountDetails = new com.see.truetransact.uicomponent.CPanel();
        panIsRequired = new com.see.truetransact.uicomponent.CPanel();
        chkChequeBookAD = new com.see.truetransact.uicomponent.CCheckBox();
        chkCustGrpLimitValidationAD = new com.see.truetransact.uicomponent.CCheckBox();
        chkMobileBankingAD = new com.see.truetransact.uicomponent.CCheckBox();
        chkNROStatusAD = new com.see.truetransact.uicomponent.CCheckBox();
        panCardInfo = new com.see.truetransact.uicomponent.CPanel();
        chkATMAD = new com.see.truetransact.uicomponent.CCheckBox();
        lblATMNoAD = new com.see.truetransact.uicomponent.CLabel();
        txtATMNoAD = new com.see.truetransact.uicomponent.CTextField();
        lblATMFromDateAD = new com.see.truetransact.uicomponent.CLabel();
        tdtATMFromDateAD = new com.see.truetransact.uicomponent.CDateField();
        lblATMToDateAD = new com.see.truetransact.uicomponent.CLabel();
        tdtATMToDateAD = new com.see.truetransact.uicomponent.CDateField();
        chkDebitAD = new com.see.truetransact.uicomponent.CCheckBox();
        lblDebitNoAD = new com.see.truetransact.uicomponent.CLabel();
        txtDebitNoAD = new com.see.truetransact.uicomponent.CTextField();
        lblDebitFromDateAD = new com.see.truetransact.uicomponent.CLabel();
        tdtDebitFromDateAD = new com.see.truetransact.uicomponent.CDateField();
        lblDebitToDateAD = new com.see.truetransact.uicomponent.CLabel();
        tdtDebitToDateAD = new com.see.truetransact.uicomponent.CDateField();
        chkCreditAD = new com.see.truetransact.uicomponent.CCheckBox();
        lblCreditNoAD = new com.see.truetransact.uicomponent.CLabel();
        txtCreditNoAD = new com.see.truetransact.uicomponent.CTextField();
        lblCreditFromDateAD = new com.see.truetransact.uicomponent.CLabel();
        tdtCreditFromDateAD = new com.see.truetransact.uicomponent.CDateField();
        lblCreditToDateAD = new com.see.truetransact.uicomponent.CLabel();
        tdtCreditToDateAD = new com.see.truetransact.uicomponent.CDateField();
        panFlexiOpt = new com.see.truetransact.uicomponent.CPanel();
        cboSettlementModeAI = new com.see.truetransact.uicomponent.CComboBox();
        lblSettlementModeAI = new com.see.truetransact.uicomponent.CLabel();
        lblOpModeAI = new com.see.truetransact.uicomponent.CLabel();
        cboOpModeAI = new com.see.truetransact.uicomponent.CComboBox();
        panDiffCharges = new com.see.truetransact.uicomponent.CPanel();
        lblAccOpeningChrgAD = new com.see.truetransact.uicomponent.CLabel();
        txtAccOpeningChrgAD = new com.see.truetransact.uicomponent.CTextField();
        lblMisServiceChrgAD = new com.see.truetransact.uicomponent.CLabel();
        txtMisServiceChrgAD = new com.see.truetransact.uicomponent.CTextField();
        chkStopPmtChrgAD = new com.see.truetransact.uicomponent.CCheckBox();
        lblChequeBookChrgAD = new com.see.truetransact.uicomponent.CLabel();
        txtChequeBookChrgAD = new com.see.truetransact.uicomponent.CTextField();
        chkChequeRetChrgAD = new com.see.truetransact.uicomponent.CCheckBox();
        lblFolioChrgAD = new com.see.truetransact.uicomponent.CLabel();
        txtFolioChrgAD = new com.see.truetransact.uicomponent.CTextField();
        chkInopChrgAD = new com.see.truetransact.uicomponent.CCheckBox();
        lblAccCloseChrgAD = new com.see.truetransact.uicomponent.CLabel();
        txtAccCloseChrgAD = new com.see.truetransact.uicomponent.CTextField();
        chkStmtChrgAD = new com.see.truetransact.uicomponent.CCheckBox();
        lblStmtFreqAD = new com.see.truetransact.uicomponent.CLabel();
        cboStmtFreqAD = new com.see.truetransact.uicomponent.CComboBox();
        chkNonMainMinBalChrgAD = new com.see.truetransact.uicomponent.CCheckBox();
        lblExcessWithChrgAD = new com.see.truetransact.uicomponent.CLabel();
        txtExcessWithChrgAD = new com.see.truetransact.uicomponent.CTextField();
        chkABBChrgAD = new com.see.truetransact.uicomponent.CCheckBox();
        chkNPAChrgAD = new com.see.truetransact.uicomponent.CCheckBox();
        lblABBChrgAD = new com.see.truetransact.uicomponent.CLabel();
        txtABBChrgAD = new com.see.truetransact.uicomponent.CTextField();
        lblNPAChrgAD = new com.see.truetransact.uicomponent.CLabel();
        tdtNPAChrgAD = new com.see.truetransact.uicomponent.CDateField();
        lblMinActBalanceAD = new com.see.truetransact.uicomponent.CLabel();
        txtMinActBalanceAD = new com.see.truetransact.uicomponent.CTextField();
        lblStopPayment = new com.see.truetransact.uicomponent.CLabel();
        lblChequeReturn = new com.see.truetransact.uicomponent.CLabel();
        lblCollectInoperative = new com.see.truetransact.uicomponent.CLabel();
        lblStatement = new com.see.truetransact.uicomponent.CLabel();
        lblNonMaintenance = new com.see.truetransact.uicomponent.CLabel();
        lblABB = new com.see.truetransact.uicomponent.CLabel();
        lblNPA = new com.see.truetransact.uicomponent.CLabel();
        panLastIntApp = new com.see.truetransact.uicomponent.CPanel();
        lblDebit = new com.see.truetransact.uicomponent.CLabel();
        tdtDebit = new com.see.truetransact.uicomponent.CDateField();
        lblCredit = new com.see.truetransact.uicomponent.CLabel();
        tdtCredit = new com.see.truetransact.uicomponent.CDateField();
        panRatesIN = new com.see.truetransact.uicomponent.CPanel();
        lblRateCodeIN = new com.see.truetransact.uicomponent.CLabel();
        lblRateCodeValueIN = new com.see.truetransact.uicomponent.CLabel();
        lblCrInterestRateIN = new com.see.truetransact.uicomponent.CLabel();
        lblCrInterestRateValueIN = new com.see.truetransact.uicomponent.CLabel();
        lblDrInterestRateIN = new com.see.truetransact.uicomponent.CLabel();
        lblDrInterestRateValueIN = new com.see.truetransact.uicomponent.CLabel();
        lblPenalInterestRateIN = new com.see.truetransact.uicomponent.CLabel();
        lblPenalInterestValueIN = new com.see.truetransact.uicomponent.CLabel();
        lblAgClearingIN = new com.see.truetransact.uicomponent.CLabel();
        lblAgClearingValueIN = new com.see.truetransact.uicomponent.CLabel();
        panInterestPayableIN = new com.see.truetransact.uicomponent.CPanel();
        chkPayIntOnCrBalIN = new com.see.truetransact.uicomponent.CCheckBox();
        chkPayIntOnDrBalIN = new com.see.truetransact.uicomponent.CCheckBox();
        panAcctInfo_ODetails = new com.see.truetransact.uicomponent.CPanel();
        lblProdID_ODetails = new com.see.truetransact.uicomponent.CLabel();
        lblProdID_Disp_ODetails = new com.see.truetransact.uicomponent.CLabel();
        lblAcctHead_ODetails = new com.see.truetransact.uicomponent.CLabel();
        lblAcctHead_Disp_ODetails = new com.see.truetransact.uicomponent.CLabel();
        lblAcctNo_ODetails = new com.see.truetransact.uicomponent.CLabel();
        lblAcctNo_Disp_ODetails = new com.see.truetransact.uicomponent.CLabel();
        panDocumentDetails = new com.see.truetransact.uicomponent.CPanel();
        panTable_DocumentDetails = new com.see.truetransact.uicomponent.CPanel();
        srpTable_DocumentDetails = new com.see.truetransact.uicomponent.CScrollPane();
        tblTable_DocumentDetails = new com.see.truetransact.uicomponent.CTable();
        panAcctDetails_DocumentDetails = new com.see.truetransact.uicomponent.CPanel();
        lblProdID_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        lblProdID_Disp_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        lblAcctHead_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        lblAcctHead_Disp_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        lblAcctNo_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        lblAcctNo_Disp_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        panTabDetails_DocumentDetails = new com.see.truetransact.uicomponent.CPanel();
        lblDocType_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        lblDocType_Disp_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        lblDocNo_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        lblDocNo_Disp_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        lblDocDesc_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        lblDocDesc_Disp_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        lblSubmitted_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        panSubmitted_DocumentDetails = new com.see.truetransact.uicomponent.CPanel();
        rdoYes_DocumentDetails = new com.see.truetransact.uicomponent.CRadioButton();
        rdoNo_DocumentDetails = new com.see.truetransact.uicomponent.CRadioButton();
        lblSubmitDate_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        tdtSubmitDate_DocumentDetails = new com.see.truetransact.uicomponent.CDateField();
        lblRemarks_DocumentDetails = new com.see.truetransact.uicomponent.CLabel();
        txtRemarks_DocumentDetails = new com.see.truetransact.uicomponent.CTextField();
        btnSave_DocumentDetails = new com.see.truetransact.uicomponent.CButton();
        lblMandatory_DOC = new com.see.truetransact.uicomponent.CLabel();
        panMandatory_DOC = new com.see.truetransact.uicomponent.CPanel();
        rdoYes_Mandatory_DOC = new com.see.truetransact.uicomponent.CRadioButton();
        rdoNo_Mandatory_DOC = new com.see.truetransact.uicomponent.CRadioButton();
        lblExecuted_DOC = new com.see.truetransact.uicomponent.CLabel();
        panExecuted_DOC = new com.see.truetransact.uicomponent.CPanel();
        rdoYes_Executed_DOC = new com.see.truetransact.uicomponent.CRadioButton();
        rdoNo_Executed_DOC = new com.see.truetransact.uicomponent.CRadioButton();
        lblExecuteDate_DOC = new com.see.truetransact.uicomponent.CLabel();
        tdtExecuteDate_DOC = new com.see.truetransact.uicomponent.CDateField();
        lblExpiryDate_DOC = new com.see.truetransact.uicomponent.CLabel();
        tdtExpiryDate_DOC = new com.see.truetransact.uicomponent.CDateField();
        panClassDetails = new com.see.truetransact.uicomponent.CPanel();
        panClassDetails_Acc = new com.see.truetransact.uicomponent.CPanel();
        panProd_CD = new com.see.truetransact.uicomponent.CPanel();
        lblProID_CD = new com.see.truetransact.uicomponent.CLabel();
        lblSanctionNo1 = new com.see.truetransact.uicomponent.CLabel();
        lblSanctionNo2 = new com.see.truetransact.uicomponent.CLabel();
        lblProID_CD_Disp = new com.see.truetransact.uicomponent.CLabel();
        PanAcc_CD = new com.see.truetransact.uicomponent.CPanel();
        lblAccHead_CD = new com.see.truetransact.uicomponent.CLabel();
        lblAccHead_CD_2 = new com.see.truetransact.uicomponent.CLabel();
        lblAccNo_CD = new com.see.truetransact.uicomponent.CLabel();
        lblAccNo_CD_2 = new com.see.truetransact.uicomponent.CLabel();
        lblSanctionDate1 = new com.see.truetransact.uicomponent.CLabel();
        lblSanctionDate2 = new com.see.truetransact.uicomponent.CLabel();
        sptClassDetails = new com.see.truetransact.uicomponent.CSeparator();
        panClassDetails_Details = new com.see.truetransact.uicomponent.CPanel();
        panCode = new com.see.truetransact.uicomponent.CPanel();
        lblCommodityCode = new com.see.truetransact.uicomponent.CLabel();
        cboCommodityCode = new com.see.truetransact.uicomponent.CComboBox();
        lblGuaranteeCoverCode = new com.see.truetransact.uicomponent.CLabel();
        cboGuaranteeCoverCode = new com.see.truetransact.uicomponent.CComboBox();
        lblSectorCode1 = new com.see.truetransact.uicomponent.CLabel();
        cboSectorCode1 = new com.see.truetransact.uicomponent.CComboBox();
        lblHealthCode = new com.see.truetransact.uicomponent.CLabel();
        cboHealthCode = new com.see.truetransact.uicomponent.CComboBox();
        lblTypeFacility = new com.see.truetransact.uicomponent.CLabel();
        cboTypeFacility = new com.see.truetransact.uicomponent.CComboBox();
        lblDistrictCode = new com.see.truetransact.uicomponent.CLabel();
        cboDistrictCode = new com.see.truetransact.uicomponent.CComboBox();
        lblPurposeCode = new com.see.truetransact.uicomponent.CLabel();
        cboPurposeCode = new com.see.truetransact.uicomponent.CComboBox();
        lblIndusCode = new com.see.truetransact.uicomponent.CLabel();
        cboIndusCode = new com.see.truetransact.uicomponent.CComboBox();
        lblWeakerSectionCode = new com.see.truetransact.uicomponent.CLabel();
        cboWeakerSectionCode = new com.see.truetransact.uicomponent.CComboBox();
        sptClassification_vertical = new com.see.truetransact.uicomponent.CSeparator();
        panCode2 = new com.see.truetransact.uicomponent.CPanel();
        lbl20Code = new com.see.truetransact.uicomponent.CLabel();
        lblRefinancingInsti = new com.see.truetransact.uicomponent.CLabel();
        cboRefinancingInsti = new com.see.truetransact.uicomponent.CComboBox();
        lblGovtSchemeCode = new com.see.truetransact.uicomponent.CLabel();
        cboGovtSchemeCode = new com.see.truetransact.uicomponent.CComboBox();
        lblAssetCode = new com.see.truetransact.uicomponent.CLabel();
        cboAssetCode = new com.see.truetransact.uicomponent.CComboBox();
        lblNPADate = new com.see.truetransact.uicomponent.CLabel();
        tdtNPADate = new com.see.truetransact.uicomponent.CDateField();
        lblDirectFinance = new com.see.truetransact.uicomponent.CLabel();
        chkDirectFinance = new com.see.truetransact.uicomponent.CCheckBox();
        lblECGC = new com.see.truetransact.uicomponent.CLabel();
        chkECGC = new com.see.truetransact.uicomponent.CCheckBox();
        lblPrioritySector = new com.see.truetransact.uicomponent.CLabel();
        chkPrioritySector = new com.see.truetransact.uicomponent.CCheckBox();
        lblDocumentcomplete = new com.see.truetransact.uicomponent.CLabel();
        chkDocumentcomplete = new com.see.truetransact.uicomponent.CCheckBox();
        lblQIS = new com.see.truetransact.uicomponent.CLabel();
        chkQIS = new com.see.truetransact.uicomponent.CCheckBox();
        cbo20Code = new com.see.truetransact.uicomponent.CComboBox();
        panCaseDetails = new com.see.truetransact.uicomponent.CPanel();
        panSanctionDetails_Table1 = new com.see.truetransact.uicomponent.CPanel();
        panCaseTableFields = new com.see.truetransact.uicomponent.CPanel();
        panRepaymentSchedule = new com.see.truetransact.uicomponent.CPanel();
        panRepayment = new com.see.truetransact.uicomponent.CPanel();
        sptRepatmentSchedule_Hori = new com.see.truetransact.uicomponent.CSeparator();
        panRepaymentSchedule_Details = new com.see.truetransact.uicomponent.CPanel();
        panSchedule_RS = new com.see.truetransact.uicomponent.CPanel();
        lblScheduleNo = new com.see.truetransact.uicomponent.CLabel();
        txtScheduleNo = new com.see.truetransact.uicomponent.CTextField();
        lblLaonAmt = new com.see.truetransact.uicomponent.CLabel();
        txtLaonAmt = new com.see.truetransact.uicomponent.CTextField();
        lblRepayType = new com.see.truetransact.uicomponent.CLabel();
        cboRepayType = new com.see.truetransact.uicomponent.CComboBox();
        lblRepayFreq_Repayment = new com.see.truetransact.uicomponent.CLabel();
        cboRepayFreq_Repayment = new com.see.truetransact.uicomponent.CComboBox();
        lblNoMonthsMora = new com.see.truetransact.uicomponent.CLabel();
        txtNoMonthsMora = new com.see.truetransact.uicomponent.CTextField();
        txtNoInstall = new com.see.truetransact.uicomponent.CTextField();
        lblNoInstall = new com.see.truetransact.uicomponent.CLabel();
        tdtFirstInstall = new com.see.truetransact.uicomponent.CDateField();
        lblFirstInstall = new com.see.truetransact.uicomponent.CLabel();
        lblLastInstall = new com.see.truetransact.uicomponent.CLabel();
        tdtLastInstall = new com.see.truetransact.uicomponent.CDateField();
        lblDisbursement_Dt = new com.see.truetransact.uicomponent.CLabel();
        tdtDisbursement_Dt = new com.see.truetransact.uicomponent.CDateField();
        tdtRepayFromDate = new com.see.truetransact.uicomponent.CDateField();
        lblRepayFromDate = new com.see.truetransact.uicomponent.CLabel();
        sptRepatmentSchedule_Vert = new com.see.truetransact.uicomponent.CSeparator();
        panInstall_RS = new com.see.truetransact.uicomponent.CPanel();
        lblTotalBaseAmt = new com.see.truetransact.uicomponent.CLabel();
        txtTotalBaseAmt = new com.see.truetransact.uicomponent.CTextField();
        lblAmtPenulInstall = new com.see.truetransact.uicomponent.CLabel();
        txtAmtPenulInstall = new com.see.truetransact.uicomponent.CTextField();
        lblAmtLastInstall = new com.see.truetransact.uicomponent.CLabel();
        txtAmtLastInstall = new com.see.truetransact.uicomponent.CTextField();
        lblTotalInstallAmt = new com.see.truetransact.uicomponent.CLabel();
        txtTotalInstallAmt = new com.see.truetransact.uicomponent.CTextField();
        lblDoAddSIs = new com.see.truetransact.uicomponent.CLabel();
        panDoAddSIs = new com.see.truetransact.uicomponent.CPanel();
        rdoDoAddSIs_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoDoAddSIs_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblPostDatedCheque = new com.see.truetransact.uicomponent.CLabel();
        panPostDatedCheque = new com.see.truetransact.uicomponent.CPanel();
        rdoPostDatedCheque_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoPostDatedCheque_No = new com.see.truetransact.uicomponent.CRadioButton();
        panStatus_Repayment = new com.see.truetransact.uicomponent.CPanel();
        rdoActive_Repayment = new com.see.truetransact.uicomponent.CRadioButton();
        rdoInActive_Repayment = new com.see.truetransact.uicomponent.CRadioButton();
        lblStatus_Repayment = new com.see.truetransact.uicomponent.CLabel();
        lblRepayScheduleMode = new com.see.truetransact.uicomponent.CLabel();
        txtRepayScheduleMode = new com.see.truetransact.uicomponent.CTextField();
        txtInstallAmount = new com.see.truetransact.uicomponent.CTextField();
        lblInstallmentAmount = new com.see.truetransact.uicomponent.CLabel();
        panProd_RS = new com.see.truetransact.uicomponent.CPanel();
        lblProdID_RS = new com.see.truetransact.uicomponent.CLabel();
        lblProdID_RS_Disp = new com.see.truetransact.uicomponent.CLabel();
        panAcc_RS = new com.see.truetransact.uicomponent.CPanel();
        lblAccHead_RS = new com.see.truetransact.uicomponent.CLabel();
        lblAccHead_RS_2 = new com.see.truetransact.uicomponent.CLabel();
        lblAccNo_RS = new com.see.truetransact.uicomponent.CLabel();
        lblAccNo_RS_2 = new com.see.truetransact.uicomponent.CLabel();
        panRepaymentToolBtns = new com.see.truetransact.uicomponent.CPanel();
        btnRepayment_New = new com.see.truetransact.uicomponent.CButton();
        btnRepayment_Save = new com.see.truetransact.uicomponent.CButton();
        btnRepayment_Delete = new com.see.truetransact.uicomponent.CButton();
        panRepaymentCTable = new com.see.truetransact.uicomponent.CPanel();
        srpRepaymentCTable = new com.see.truetransact.uicomponent.CScrollPane();
        tblRepaymentCTable = new com.see.truetransact.uicomponent.CTable();
        btnEMI_Calculate = new com.see.truetransact.uicomponent.CButton();
        mbrTermLoan = new com.see.truetransact.uicomponent.CMenuBar();
        mnuProcess = new javax.swing.JMenu();
        mitNew = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        sptProcess = new javax.swing.JSeparator();
        mitSave = new javax.swing.JMenuItem();
        mitCancel = new javax.swing.JMenuItem();
        sptCancel = new javax.swing.JSeparator();
        mitAuthorize = new javax.swing.JMenuItem();
        mitException = new javax.swing.JMenuItem();
        mitReject = new javax.swing.JMenuItem();
        sptException = new javax.swing.JSeparator();
        mitPrint = new javax.swing.JMenuItem();
        sptPrint = new javax.swing.JSeparator();
        mitClose = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Term Loan Account");
        setMinimumSize(new java.awt.Dimension(860, 663));
        setPreferredSize(new java.awt.Dimension(860, 663));

        tbrTermLoan.setMinimumSize(new java.awt.Dimension(345, 29));

        btnView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_Summary.gif"))); // NOI18N
        btnView.setToolTipText("Enquiry");
        btnView.setEnabled(false);
        btnView.setMinimumSize(new java.awt.Dimension(29, 27));
        btnView.setPreferredSize(new java.awt.Dimension(29, 27));
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        tbrTermLoan.add(btnView);

        lblSpace4.setText("     ");
        tbrTermLoan.add(lblSpace4);

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif"))); // NOI18N
        btnNew.setToolTipText("New");
        btnNew.setEnabled(false);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        tbrTermLoan.add(btnNew);

        lblSpace17.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace17.setText("     ");
        lblSpace17.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace17.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace17.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermLoan.add(lblSpace17);

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_EDIT.gif"))); // NOI18N
        btnEdit.setToolTipText("Edit");
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        tbrTermLoan.add(btnEdit);

        lblSpace18.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace18.setText("     ");
        lblSpace18.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace18.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace18.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermLoan.add(lblSpace18);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif"))); // NOI18N
        btnDelete.setToolTipText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        tbrTermLoan.add(btnDelete);

        lblSpace2.setText("     ");
        tbrTermLoan.add(lblSpace2);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif"))); // NOI18N
        btnSave.setToolTipText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        tbrTermLoan.add(btnSave);

        lblSpace19.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace19.setText("     ");
        lblSpace19.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace19.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace19.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermLoan.add(lblSpace19);

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CANCEL.gif"))); // NOI18N
        btnCancel.setToolTipText("Cancel");
        btnCancel.setFocusable(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        tbrTermLoan.add(btnCancel);

        lblSpace3.setText("     ");
        tbrTermLoan.add(lblSpace3);

        btnAuthorize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_AUTHORIZE.gif"))); // NOI18N
        btnAuthorize.setEnabled(false);
        btnAuthorize.setMaximumSize(new java.awt.Dimension(29, 27));
        btnAuthorize.setMinimumSize(new java.awt.Dimension(29, 27));
        btnAuthorize.setPreferredSize(new java.awt.Dimension(29, 27));
        btnAuthorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAuthorizeActionPerformed(evt);
            }
        });
        tbrTermLoan.add(btnAuthorize);

        lblSpace20.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace20.setText("     ");
        lblSpace20.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace20.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace20.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermLoan.add(lblSpace20);

        btnException.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_EXCEPTION.gif"))); // NOI18N
        btnException.setEnabled(false);
        btnException.setMaximumSize(new java.awt.Dimension(29, 27));
        btnException.setMinimumSize(new java.awt.Dimension(29, 27));
        btnException.setPreferredSize(new java.awt.Dimension(29, 27));
        btnException.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExceptionActionPerformed(evt);
            }
        });
        tbrTermLoan.add(btnException);

        lblSpace21.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace21.setText("     ");
        lblSpace21.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace21.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace21.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermLoan.add(lblSpace21);

        btnReject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_REJECT.gif"))); // NOI18N
        btnReject.setEnabled(false);
        btnReject.setMaximumSize(new java.awt.Dimension(29, 27));
        btnReject.setMinimumSize(new java.awt.Dimension(29, 27));
        btnReject.setPreferredSize(new java.awt.Dimension(29, 27));
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        tbrTermLoan.add(btnReject);

        lblspace3.setMaximumSize(new java.awt.Dimension(15, 15));
        lblspace3.setMinimumSize(new java.awt.Dimension(15, 15));
        lblspace3.setPreferredSize(new java.awt.Dimension(15, 15));
        tbrTermLoan.add(lblspace3);

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_PRINT.gif"))); // NOI18N
        btnPrint.setToolTipText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        tbrTermLoan.add(btnPrint);

        lblSpace22.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace22.setText("     ");
        lblSpace22.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace22.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace22.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrTermLoan.add(lblSpace22);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CLOSE.gif"))); // NOI18N
        btnClose.setToolTipText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        tbrTermLoan.add(btnClose);

        lblSpace6.setText("     ");
        lblSpace6.setMinimumSize(new java.awt.Dimension(200, 18));
        lblSpace6.setPreferredSize(new java.awt.Dimension(200, 18));
        tbrTermLoan.add(lblSpace6);

        lblPanNumber1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPanNumber1.setText("Account No");
        lblPanNumber1.setMinimumSize(new java.awt.Dimension(72, 16));
        tbrTermLoan.add(lblPanNumber1);

        lblSpace7.setText("     ");
        tbrTermLoan.add(lblSpace7);

        txtEditTermLoanNo.setMinimumSize(new java.awt.Dimension(100, 18));
        txtEditTermLoanNo.setPreferredSize(new java.awt.Dimension(100, 18));
        txtEditTermLoanNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEditTermLoanNoFocusLost(evt);
            }
        });
        tbrTermLoan.add(txtEditTermLoanNo);

        lblSpace9.setText("     ");
        tbrTermLoan.add(lblSpace9);

        getContentPane().add(tbrTermLoan, java.awt.BorderLayout.NORTH);

        panStatus.setLayout(new java.awt.GridBagLayout());

        lblSpace1.setText(" Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblSpace1, gridBagConstraints);

        lblStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblStatus.setText("                      ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblStatus, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblMsg, gridBagConstraints);

        getContentPane().add(panStatus, java.awt.BorderLayout.SOUTH);

        panTermLoan.setMinimumSize(new java.awt.Dimension(850, 650));
        panTermLoan.setPreferredSize(new java.awt.Dimension(850, 650));
        panTermLoan.setLayout(new java.awt.GridBagLayout());

        tabLimitAmount.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        tabLimitAmount.setMinimumSize(new java.awt.Dimension(850, 650));
        tabLimitAmount.setPreferredSize(new java.awt.Dimension(850, 650));

        panBorrowCompanyDetails.setMinimumSize(new java.awt.Dimension(850, 545));
        panBorrowCompanyDetails.setPreferredSize(new java.awt.Dimension(850, 545));
        panBorrowCompanyDetails.setLayout(new java.awt.GridBagLayout());

        panBorrowProfile.setBorder(javax.swing.BorderFactory.createTitledBorder("Borrower's Profile"));
        panBorrowProfile.setMinimumSize(new java.awt.Dimension(815, 320));
        panBorrowProfile.setPreferredSize(new java.awt.Dimension(815, 320));
        panBorrowProfile.setLayout(new java.awt.GridBagLayout());

        panBorrowProfile_CustName.setMaximumSize(new java.awt.Dimension(330, 290));
        panBorrowProfile_CustName.setMinimumSize(new java.awt.Dimension(330, 290));
        panBorrowProfile_CustName.setPreferredSize(new java.awt.Dimension(330, 290));
        panBorrowProfile_CustName.setLayout(new java.awt.GridBagLayout());

        cboConstitution.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboConstitution.setMinimumSize(new java.awt.Dimension(100, 21));
        cboConstitution.setPopupWidth(235);
        cboConstitution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboConstitutionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        panBorrowProfile_CustName.add(cboConstitution, gridBagConstraints);

        lblCategory.setText("Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 6, 1, 4);
        panBorrowProfile_CustName.add(lblCategory, gridBagConstraints);

        lblConstitution.setText("Constitution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 6, 1, 4);
        panBorrowProfile_CustName.add(lblConstitution, gridBagConstraints);

        cboCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboCategory.setMinimumSize(new java.awt.Dimension(100, 21));
        cboCategory.setPopupWidth(225);
        cboCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboCategoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        panBorrowProfile_CustName.add(cboCategory, gridBagConstraints);

        lblBorrowerNo.setText("Borrower No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panBorrowProfile_CustName.add(lblBorrowerNo, gridBagConstraints);

        lblBorrowerNo_2.setMaximumSize(new java.awt.Dimension(100, 16));
        lblBorrowerNo_2.setMinimumSize(new java.awt.Dimension(100, 16));
        lblBorrowerNo_2.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        panBorrowProfile_CustName.add(lblBorrowerNo_2, gridBagConstraints);

        txtCustID.setMinimumSize(new java.awt.Dimension(100, 21));
        txtCustID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustIDActionPerformed(evt);
            }
        });
        txtCustID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustIDFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        panBorrowProfile_CustName.add(txtCustID, gridBagConstraints);

        lblCustID.setText("Customer Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 6, 1, 4);
        panBorrowProfile_CustName.add(lblCustID, gridBagConstraints);

        btnCustID.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnCustID.setToolTipText("Select Customer");
        btnCustID.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCustID.setMaximumSize(new java.awt.Dimension(22, 21));
        btnCustID.setMinimumSize(new java.awt.Dimension(22, 21));
        btnCustID.setPreferredSize(new java.awt.Dimension(22, 21));
        btnCustID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustIDActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panBorrowProfile_CustName.add(btnCustID, gridBagConstraints);

        panExistingCustomer.setMinimumSize(new java.awt.Dimension(100, 16));
        panExistingCustomer.setPreferredSize(new java.awt.Dimension(100, 18));
        panExistingCustomer.setLayout(new java.awt.GridBagLayout());

        rdoExistingCustomer_Yes.setText("Yes");
        rdoExistingCustomer_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoExistingCustomer_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoExistingCustomer_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoExistingCustomer_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExistingCustomer_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExistingCustomer.add(rdoExistingCustomer_Yes, gridBagConstraints);

        rdoExistingCustomer_No.setText("No");
        rdoExistingCustomer_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoExistingCustomer_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoExistingCustomer_No.setNextFocusableComponent(txtExistingAcctNo);
        rdoExistingCustomer_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoExistingCustomer_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoExistingCustomer_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panExistingCustomer.add(rdoExistingCustomer_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panBorrowProfile_CustName.add(panExistingCustomer, gridBagConstraints);

        lblExistingCustomer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExistingCustomer.setText("Existing Customer");
        lblExistingCustomer.setMaximumSize(new java.awt.Dimension(110, 16));
        lblExistingCustomer.setMinimumSize(new java.awt.Dimension(110, 16));
        lblExistingCustomer.setPreferredSize(new java.awt.Dimension(110, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 2);
        panBorrowProfile_CustName.add(lblExistingCustomer, gridBagConstraints);

        lblExistingAcctNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblExistingAcctNo.setText("Member No / Acc No");
        lblExistingAcctNo.setMaximumSize(new java.awt.Dimension(140, 16));
        lblExistingAcctNo.setMinimumSize(new java.awt.Dimension(140, 16));
        lblExistingAcctNo.setPreferredSize(new java.awt.Dimension(140, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panBorrowProfile_CustName.add(lblExistingAcctNo, gridBagConstraints);

        txtExistingAcctNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtExistingAcctNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtExistingAcctNoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        panBorrowProfile_CustName.add(txtExistingAcctNo, gridBagConstraints);

        lblMultiDisburseAllow.setText("Multi Disbursement");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panBorrowProfile_CustName.add(lblMultiDisburseAllow, gridBagConstraints);

        panMultiDisburseAllow.setLayout(new java.awt.GridBagLayout());

        rdoMultiDisburseAllow.add(rdoMultiDisburseAllow_Yes);
        rdoMultiDisburseAllow_Yes.setText("Yes");
        rdoMultiDisburseAllow_Yes.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoMultiDisburseAllow_Yes.setPreferredSize(new java.awt.Dimension(65, 21));
        rdoMultiDisburseAllow_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoMultiDisburseAllow_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panMultiDisburseAllow.add(rdoMultiDisburseAllow_Yes, gridBagConstraints);

        rdoMultiDisburseAllow.add(rdoMultiDisburseAllow_No);
        rdoMultiDisburseAllow_No.setText("No");
        rdoMultiDisburseAllow_No.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoMultiDisburseAllow_No.setPreferredSize(new java.awt.Dimension(65, 21));
        rdoMultiDisburseAllow_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoMultiDisburseAllow_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panMultiDisburseAllow.add(rdoMultiDisburseAllow_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        panBorrowProfile_CustName.add(panMultiDisburseAllow, gridBagConstraints);

        btnMembershipLia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/members2.jpg"))); // NOI18N
        btnMembershipLia.setToolTipText("View MemberShip Liability");
        btnMembershipLia.setMaximumSize(new java.awt.Dimension(30, 30));
        btnMembershipLia.setMinimumSize(new java.awt.Dimension(30, 30));
        btnMembershipLia.setPreferredSize(new java.awt.Dimension(30, 30));
        btnMembershipLia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMembershipLiaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panBorrowProfile_CustName.add(btnMembershipLia, gridBagConstraints);

        panShareDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Share Details"));
        panShareDetails.setMinimumSize(new java.awt.Dimension(265, 60));
        panShareDetails.setPreferredSize(new java.awt.Dimension(265, 60));
        panShareDetails.setLayout(new java.awt.GridBagLayout());

        lblTotalShareAmount.setText("Total Share Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 6, 4);
        panShareDetails.add(lblTotalShareAmount, gridBagConstraints);

        lblTotalNoOfShare.setText("Total No Of Share");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 44, 2, 4);
        panShareDetails.add(lblTotalNoOfShare, gridBagConstraints);

        txtTotalNoOfShare.setEditable(false);
        txtTotalNoOfShare.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtTotalNoOfShare.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 4);
        panShareDetails.add(txtTotalNoOfShare, gridBagConstraints);

        txtTotalShareAmount.setEditable(false);
        txtTotalShareAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTotalShareAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 5, 4);
        panShareDetails.add(txtTotalShareAmount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panBorrowProfile_CustName.add(panShareDetails, gridBagConstraints);

        panSHGDetails.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        panSHGDetails.setMinimumSize(new java.awt.Dimension(305, 30));
        panSHGDetails.setPreferredSize(new java.awt.Dimension(305, 30));
        panSHGDetails.setLayout(new java.awt.GridBagLayout());

        panSHG.setMinimumSize(new java.awt.Dimension(100, 16));
        panSHG.setPreferredSize(new java.awt.Dimension(100, 18));
        panSHG.setLayout(new java.awt.GridBagLayout());

        rdoSHG.add(rdoSHG_Yes);
        rdoSHG_Yes.setText("Yes");
        rdoSHG_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoSHG_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoSHG_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        rdoSHG_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSHG_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panSHG.add(rdoSHG_Yes, gridBagConstraints);

        rdoSHG.add(rdoSHG_No);
        rdoSHG_No.setText("No");
        rdoSHG_No.setMaximumSize(new java.awt.Dimension(45, 18));
        rdoSHG_No.setMinimumSize(new java.awt.Dimension(45, 18));
        rdoSHG_No.setPreferredSize(new java.awt.Dimension(45, 18));
        rdoSHG_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSHG_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        panSHG.add(rdoSHG_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 0);
        panSHGDetails.add(panSHG, gridBagConstraints);

        lblSHGYesorNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSHGYesorNo.setText("SHG");
        lblSHGYesorNo.setMinimumSize(new java.awt.Dimension(80, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panSHGDetails.add(lblSHGYesorNo, gridBagConstraints);

        lblSHGId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSHGId.setText("SHG ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panSHGDetails.add(lblSHGId, gridBagConstraints);

        txtSHGId.setMinimumSize(new java.awt.Dimension(100, 21));
        txtSHGId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSHGIdFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 0);
        panSHGDetails.add(txtSHGId, gridBagConstraints);

        btnSHGId.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnSHGId.setToolTipText("Select Customer");
        btnSHGId.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSHGId.setMaximumSize(new java.awt.Dimension(22, 21));
        btnSHGId.setMinimumSize(new java.awt.Dimension(22, 21));
        btnSHGId.setPreferredSize(new java.awt.Dimension(22, 21));
        btnSHGId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSHGIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panSHGDetails.add(btnSHGId, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panBorrowProfile_CustName.add(panSHGDetails, gridBagConstraints);

        panSalaryRecovery.setMinimumSize(new java.awt.Dimension(305, 22));
        panSalaryRecovery.setPreferredSize(new java.awt.Dimension(305, 22));
        panSalaryRecovery.setLayout(new java.awt.GridBagLayout());

        panSalaryRecoveryValue.setMinimumSize(new java.awt.Dimension(95, 27));
        panSalaryRecoveryValue.setPreferredSize(new java.awt.Dimension(95, 27));
        panSalaryRecoveryValue.setLayout(new java.awt.GridBagLayout());

        rdoSalaryRecovery.add(rdoSalaryRecovery_Yes);
        rdoSalaryRecovery_Yes.setText("Yes");
        rdoSalaryRecovery_Yes.setMaximumSize(new java.awt.Dimension(50, 18));
        rdoSalaryRecovery_Yes.setMinimumSize(new java.awt.Dimension(50, 18));
        rdoSalaryRecovery_Yes.setPreferredSize(new java.awt.Dimension(50, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panSalaryRecoveryValue.add(rdoSalaryRecovery_Yes, gridBagConstraints);

        rdoSalaryRecovery.add(rdoSalaryRecovery_No);
        rdoSalaryRecovery_No.setText("No");
        rdoSalaryRecovery_No.setMaximumSize(new java.awt.Dimension(44, 18));
        rdoSalaryRecovery_No.setMinimumSize(new java.awt.Dimension(44, 18));
        rdoSalaryRecovery_No.setPreferredSize(new java.awt.Dimension(44, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panSalaryRecoveryValue.add(rdoSalaryRecovery_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        panSalaryRecovery.add(panSalaryRecoveryValue, gridBagConstraints);

        lblSalaryRecovery.setText("Salary Recovery");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panSalaryRecovery.add(lblSalaryRecovery, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        panBorrowProfile_CustName.add(panSalaryRecovery, gridBagConstraints);

        txtApplicationNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtApplicationNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApplicationNoActionPerformed(evt);
            }
        });
        txtApplicationNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtApplicationNoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 0);
        panBorrowProfile_CustName.add(txtApplicationNo, gridBagConstraints);

        lblApplicationNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblApplicationNo.setText("Application No");
        lblApplicationNo.setMaximumSize(new java.awt.Dimension(120, 16));
        lblApplicationNo.setMinimumSize(new java.awt.Dimension(120, 16));
        lblApplicationNo.setPreferredSize(new java.awt.Dimension(120, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panBorrowProfile_CustName.add(lblApplicationNo, gridBagConstraints);

        btnAppNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnAppNo.setToolTipText("Select Customer");
        btnAppNo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAppNo.setMaximumSize(new java.awt.Dimension(22, 21));
        btnAppNo.setMinimumSize(new java.awt.Dimension(22, 21));
        btnAppNo.setPreferredSize(new java.awt.Dimension(22, 21));
        btnAppNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAppNoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panBorrowProfile_CustName.add(btnAppNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        panBorrowProfile.add(panBorrowProfile_CustName, gridBagConstraints);

        panBorrowProfile_CustID.setMaximumSize(new java.awt.Dimension(435, 300));
        panBorrowProfile_CustID.setMinimumSize(new java.awt.Dimension(435, 300));
        panBorrowProfile_CustID.setPreferredSize(new java.awt.Dimension(435, 300));
        panBorrowProfile_CustID.setLayout(new java.awt.GridBagLayout());

        panBorrowerTabCTable.setMinimumSize(new java.awt.Dimension(425, 80));
        panBorrowerTabCTable.setPreferredSize(new java.awt.Dimension(425, 80));
        panBorrowerTabCTable.setLayout(new java.awt.GridBagLayout());

        srpBorrowerTabCTable.setMinimumSize(new java.awt.Dimension(425, 80));
        srpBorrowerTabCTable.setPreferredSize(new java.awt.Dimension(425, 80));

        tblBorrowerTabCTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblBorrowerTabCTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblBorrowerTabCTableMousePressed(evt);
            }
        });
        srpBorrowerTabCTable.setViewportView(tblBorrowerTabCTable);

        panBorrowerTabCTable.add(srpBorrowerTabCTable, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panBorrowProfile_CustID.add(panBorrowerTabCTable, gridBagConstraints);

        panBorrowerTabTools.setMinimumSize(new java.awt.Dimension(228, 28));
        panBorrowerTabTools.setPreferredSize(new java.awt.Dimension(228, 28));
        panBorrowerTabTools.setLayout(new java.awt.GridBagLayout());

        btnNew_Borrower.setText("New");
        btnNew_Borrower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNew_BorrowerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panBorrowerTabTools.add(btnNew_Borrower, gridBagConstraints);

        btnToMain_Borrower.setText("To Main");
        btnToMain_Borrower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToMain_BorrowerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panBorrowerTabTools.add(btnToMain_Borrower, gridBagConstraints);

        btnDeleteBorrower.setText("Delete");
        btnDeleteBorrower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBorrowerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panBorrowerTabTools.add(btnDeleteBorrower, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panBorrowProfile_CustID.add(panBorrowerTabTools, gridBagConstraints);

        panCustDetails.setMinimumSize(new java.awt.Dimension(228, 1));
        panCustDetails.setPreferredSize(new java.awt.Dimension(228, 1));
        panCustDetails.setLayout(new java.awt.GridBagLayout());

        lblOpenDate.setText("Opening Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblOpenDate, gridBagConstraints);

        lblOpenDate2.setText("x");
        lblOpenDate2.setMaximumSize(new java.awt.Dimension(100, 21));
        lblOpenDate2.setMinimumSize(new java.awt.Dimension(100, 21));
        lblOpenDate2.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblOpenDate2, gridBagConstraints);

        lblCustName.setText("Customer Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 44, 2, 4);
        panCustDetails.add(lblCustName, gridBagConstraints);

        lblCustName_2.setText("Prithvi Ram");
        lblCustName_2.setMaximumSize(new java.awt.Dimension(100, 21));
        lblCustName_2.setMinimumSize(new java.awt.Dimension(100, 21));
        lblCustName_2.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblCustName_2, gridBagConstraints);

        lblCity_BorrowerProfile.setText("City");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblCity_BorrowerProfile, gridBagConstraints);

        lblCity_BorrowerProfile_2.setText("Bangalore");
        lblCity_BorrowerProfile_2.setMaximumSize(new java.awt.Dimension(100, 21));
        lblCity_BorrowerProfile_2.setMinimumSize(new java.awt.Dimension(100, 21));
        lblCity_BorrowerProfile_2.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblCity_BorrowerProfile_2, gridBagConstraints);

        lblState_BorrowerProfile.setText("State");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblState_BorrowerProfile, gridBagConstraints);

        lblState_BorrowerProfile_2.setText("Karnataka");
        lblState_BorrowerProfile_2.setMaximumSize(new java.awt.Dimension(100, 21));
        lblState_BorrowerProfile_2.setMinimumSize(new java.awt.Dimension(100, 21));
        lblState_BorrowerProfile_2.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblState_BorrowerProfile_2, gridBagConstraints);

        lblPin_BorrowerProfile.setText("Pincode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblPin_BorrowerProfile, gridBagConstraints);

        lblPin_BorrowerProfile_2.setText("560 025");
        lblPin_BorrowerProfile_2.setMaximumSize(new java.awt.Dimension(100, 21));
        lblPin_BorrowerProfile_2.setMinimumSize(new java.awt.Dimension(100, 21));
        lblPin_BorrowerProfile_2.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblPin_BorrowerProfile_2, gridBagConstraints);

        lblPhone_BorrowerProfile.setText("Phone");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblPhone_BorrowerProfile, gridBagConstraints);

        lblPhone_BorrowerProfile_2.setText("2434433");
        lblPhone_BorrowerProfile_2.setMaximumSize(new java.awt.Dimension(100, 21));
        lblPhone_BorrowerProfile_2.setMinimumSize(new java.awt.Dimension(100, 21));
        lblPhone_BorrowerProfile_2.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblPhone_BorrowerProfile_2, gridBagConstraints);

        lblFax_BorrowerProfile.setText("Fax");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblFax_BorrowerProfile, gridBagConstraints);

        lblFax_BorrowerProfile_2.setText("1");
        lblFax_BorrowerProfile_2.setMaximumSize(new java.awt.Dimension(100, 21));
        lblFax_BorrowerProfile_2.setMinimumSize(new java.awt.Dimension(100, 21));
        lblFax_BorrowerProfile_2.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCustDetails.add(lblFax_BorrowerProfile_2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 1, 0);
        panBorrowProfile_CustID.add(panCustDetails, gridBagConstraints);

        panChargeDetails.setMinimumSize(new java.awt.Dimension(425, 90));
        panChargeDetails.setPreferredSize(new java.awt.Dimension(425, 90));
        panChargeDetails.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 9;
        panBorrowProfile_CustID.add(panChargeDetails, gridBagConstraints);

        panLockStatus.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        panLockStatus.setMinimumSize(new java.awt.Dimension(435, 22));
        panLockStatus.setPreferredSize(new java.awt.Dimension(435, 22));
        panLockStatus.setLayout(new java.awt.GridBagLayout());

        lblLockStatusVal.setForeground(new java.awt.Color(0, 51, 204));
        lblLockStatusVal.setFont(new java.awt.Font("MS Sans Serif", 1, 13)); // NOI18N
        lblLockStatusVal.setMaximumSize(new java.awt.Dimension(80, 18));
        lblLockStatusVal.setMinimumSize(new java.awt.Dimension(80, 18));
        lblLockStatusVal.setPreferredSize(new java.awt.Dimension(80, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 1, 1);
        panLockStatus.add(lblLockStatusVal, gridBagConstraints);

        lblLockStatus.setText("Lock Status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 1, 1);
        panLockStatus.add(lblLockStatus, gridBagConstraints);

        lblBalanceShare.setText("Share recoverd");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        panLockStatus.add(lblBalanceShare, gridBagConstraints);

        txtBalanceShare.setMaximumSize(new java.awt.Dimension(100, 21));
        txtBalanceShare.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        panLockStatus.add(txtBalanceShare, gridBagConstraints);

        chkRecovery.setText("Recovery");
        chkRecovery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRecoveryActionPerformed(evt);
            }
        });
        panLockStatus.add(chkRecovery, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panBorrowProfile_CustID.add(panLockStatus, gridBagConstraints);

        jPanel2.setMinimumSize(new java.awt.Dimension(290, 25));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setForeground(new java.awt.Color(51, 102, 255));
        jLabel1.setText("Next Account Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(jLabel1, gridBagConstraints);

        txtNextAccNo.setEditable(false);
        txtNextAccNo.setEnabled(false);
        txtNextAccNo.setPreferredSize(new java.awt.Dimension(150, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(txtNextAccNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        panBorrowProfile_CustID.add(jPanel2, gridBagConstraints);

        panserviceTax.setMinimumSize(new java.awt.Dimension(350, 20));
        panserviceTax.setLayout(new java.awt.GridBagLayout());

        lblServiceTax.setText("Service Tax");
        lblServiceTax.setMaximumSize(new java.awt.Dimension(100, 18));
        lblServiceTax.setMinimumSize(new java.awt.Dimension(100, 18));
        lblServiceTax.setPreferredSize(new java.awt.Dimension(100, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 11);
        panserviceTax.add(lblServiceTax, gridBagConstraints);

        lblServiceTaxval.setMaximumSize(new java.awt.Dimension(100, 18));
        lblServiceTaxval.setMinimumSize(new java.awt.Dimension(100, 18));
        lblServiceTaxval.setPreferredSize(new java.awt.Dimension(100, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        panserviceTax.add(lblServiceTaxval, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        panBorrowProfile_CustID.add(panserviceTax, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        panBorrowProfile.add(panBorrowProfile_CustID, gridBagConstraints);

        sptBorroewrProfile.setOrientation(javax.swing.SwingConstants.VERTICAL);
        sptBorroewrProfile.setMinimumSize(new java.awt.Dimension(1, 12));
        sptBorroewrProfile.setPreferredSize(new java.awt.Dimension(1, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        panBorrowProfile.add(sptBorroewrProfile, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panBorrowCompanyDetails.add(panBorrowProfile, gridBagConstraints);

        panCompanyDetails_Company.setBorder(javax.swing.BorderFactory.createTitledBorder("Sanction Details"));
        panCompanyDetails_Company.setMinimumSize(new java.awt.Dimension(815, 230));
        panCompanyDetails_Company.setPreferredSize(new java.awt.Dimension(815, 230));
        panCompanyDetails_Company.setLayout(new java.awt.GridBagLayout());

        srpComp_Tab_Addr.setOrientation(javax.swing.SwingConstants.VERTICAL);
        srpComp_Tab_Addr.setPreferredSize(new java.awt.Dimension(3, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 15, 1, 10);
        panCompanyDetails_Company.add(srpComp_Tab_Addr, gridBagConstraints);

        panRepaySanctionDetails.setMinimumSize(new java.awt.Dimension(250, 200));
        panRepaySanctionDetails.setPreferredSize(new java.awt.Dimension(250, 200));
        panRepaySanctionDetails.setLayout(new java.awt.GridBagLayout());

        lblFacility_Moratorium_Period.setText("Moratorium Period");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 3, 4);
        panRepaySanctionDetails.add(lblFacility_Moratorium_Period, gridBagConstraints);

        txtFacility_Moratorium_Period.setMaximumSize(new java.awt.Dimension(100, 21));
        txtFacility_Moratorium_Period.setMinimumSize(new java.awt.Dimension(100, 21));
        txtFacility_Moratorium_Period.setNextFocusableComponent(txtNoInstallments);
        txtFacility_Moratorium_Period.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFacility_Moratorium_PeriodFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 3, 4);
        panRepaySanctionDetails.add(txtFacility_Moratorium_Period, gridBagConstraints);

        lblNoInstallments.setText("No. of Installments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panRepaySanctionDetails.add(lblNoInstallments, gridBagConstraints);

        txtNoInstallments.setMinimumSize(new java.awt.Dimension(100, 21));
        txtNoInstallments.setNextFocusableComponent(cboRepayFreq);
        txtNoInstallments.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNoInstallmentsFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panRepaySanctionDetails.add(txtNoInstallments, gridBagConstraints);

        lblRepayFreq.setText("Repay Frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panRepaySanctionDetails.add(lblRepayFreq, gridBagConstraints);

        cboRepayFreq.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboRepayFreq.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRepayFreq.setNextFocusableComponent(tdtFDate);
        cboRepayFreq.setPopupWidth(200);
        cboRepayFreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRepayFreqActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panRepaySanctionDetails.add(cboRepayFreq, gridBagConstraints);

        lblFDate.setText("From Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panRepaySanctionDetails.add(lblFDate, gridBagConstraints);

        tdtFDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtFDate.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtFDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tdtFDateMouseExited(evt);
            }
        });
        tdtFDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtFDateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panRepaySanctionDetails.add(tdtFDate, gridBagConstraints);

        lblFacility_Repay_Date.setText("Repayment Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panRepaySanctionDetails.add(lblFacility_Repay_Date, gridBagConstraints);

        tdtFacility_Repay_Date.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtFacility_Repay_Date.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtFacility_Repay_Date.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtFacility_Repay_DateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panRepaySanctionDetails.add(tdtFacility_Repay_Date, gridBagConstraints);

        lblTDate.setText("To Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panRepaySanctionDetails.add(lblTDate, gridBagConstraints);

        tdtTDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtTDate.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtTDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtTDateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panRepaySanctionDetails.add(tdtTDate, gridBagConstraints);

        panPeriodDifference.setMinimumSize(new java.awt.Dimension(135, 20));
        panPeriodDifference.setPreferredSize(new java.awt.Dimension(135, 20));
        panPeriodDifference.setLayout(new java.awt.GridBagLayout());

        txtPeriodDifference_Years.setMinimumSize(new java.awt.Dimension(20, 20));
        txtPeriodDifference_Years.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        panPeriodDifference.add(txtPeriodDifference_Years, gridBagConstraints);

        lblPeriodDifference_Years.setText("YY");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panPeriodDifference.add(lblPeriodDifference_Years, gridBagConstraints);

        txtPeriodDifference_Months.setMinimumSize(new java.awt.Dimension(20, 20));
        txtPeriodDifference_Months.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panPeriodDifference.add(txtPeriodDifference_Months, gridBagConstraints);

        lblPeriodDifference_Months.setText("MM");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panPeriodDifference.add(lblPeriodDifference_Months, gridBagConstraints);

        txtPeriodDifference_Days.setMinimumSize(new java.awt.Dimension(20, 20));
        txtPeriodDifference_Days.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panPeriodDifference.add(txtPeriodDifference_Days, gridBagConstraints);

        lblPeriodDifference_Days.setText("DD");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panPeriodDifference.add(lblPeriodDifference_Days, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 5);
        panRepaySanctionDetails.add(panPeriodDifference, gridBagConstraints);

        lblPeriodDifference.setText("Period Difference");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panRepaySanctionDetails.add(lblPeriodDifference, gridBagConstraints);

        cLabel1.setText("Remarks");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        panRepaySanctionDetails.add(cLabel1, gridBagConstraints);

        txtSanctionRemarks.setMinimumSize(new java.awt.Dimension(120, 21));
        txtSanctionRemarks.setPreferredSize(new java.awt.Dimension(120, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        panRepaySanctionDetails.add(txtSanctionRemarks, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        panCompanyDetails_Company.add(panRepaySanctionDetails, gridBagConstraints);

        panFacility.setMinimumSize(new java.awt.Dimension(300, 650));
        panFacility.setPreferredSize(new java.awt.Dimension(300, 650));
        panFacility.setLayout(new java.awt.GridBagLayout());

        lblTypeOfFacility2.setText("Type of Facility");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panFacility.add(lblTypeOfFacility2, gridBagConstraints);

        lblTypeOfFacility.setText("Type of Facility");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panFacility.add(lblTypeOfFacility, gridBagConstraints);

        cboTypeOfFacility.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboTypeOfFacility.setMinimumSize(new java.awt.Dimension(100, 21));
        cboTypeOfFacility.setNextFocusableComponent(cboProductId);
        cboTypeOfFacility.setPopupWidth(150);
        cboTypeOfFacility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTypeOfFacilityActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(cboTypeOfFacility, gridBagConstraints);

        lblProductId.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(lblProductId, gridBagConstraints);

        cboProductId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboProductId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProductId.setNextFocusableComponent(cboModeSanction);
        cboProductId.setPopupWidth(250);
        cboProductId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProductIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(cboProductId, gridBagConstraints);

        lblAcctNo_Sanction.setText("Loan Account No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(lblAcctNo_Sanction, gridBagConstraints);

        lblAcctNo_Sanction_Disp.setForeground(new java.awt.Color(0, 51, 204));
        lblAcctNo_Sanction_Disp.setFont(new java.awt.Font("MS Sans Serif", 1, 13)); // NOI18N
        lblAcctNo_Sanction_Disp.setMaximumSize(new java.awt.Dimension(100, 15));
        lblAcctNo_Sanction_Disp.setMinimumSize(new java.awt.Dimension(100, 15));
        lblAcctNo_Sanction_Disp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lblAcctNo_Sanction_DispFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(lblAcctNo_Sanction_Disp, gridBagConstraints);

        lblAccHead.setText("Account Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(lblAccHead, gridBagConstraints);

        lblAccHead_2.setForeground(new java.awt.Color(0, 51, 204));
        lblAccHead_2.setFont(new java.awt.Font("MS Sans Serif", 1, 13)); // NOI18N
        lblAccHead_2.setMaximumSize(new java.awt.Dimension(100, 15));
        lblAccHead_2.setMinimumSize(new java.awt.Dimension(100, 15));
        lblAccHead_2.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(lblAccHead_2, gridBagConstraints);

        lblModeSanction.setText("Mode of Sanction Communication");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(lblModeSanction, gridBagConstraints);

        cboModeSanction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboModeSanction.setMinimumSize(new java.awt.Dimension(100, 21));
        cboModeSanction.setNextFocusableComponent(cboSanctioningAuthority);
        cboModeSanction.setPopupWidth(115);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(cboModeSanction, gridBagConstraints);

        lblAgentId.setText("Agent");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(lblAgentId, gridBagConstraints);

        cboAgentId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboAgentId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboAgentId.setNextFocusableComponent(cboSanctioningAuthority);
        cboAgentId.setPopupWidth(115);
        cboAgentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboAgentIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(cboAgentId, gridBagConstraints);

        lblAgentname.setText("Agent Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(lblAgentname, gridBagConstraints);

        lblAgentnameDisplay.setForeground(new java.awt.Color(0, 51, 204));
        lblAgentnameDisplay.setFont(new java.awt.Font("MS Sans Serif", 1, 13)); // NOI18N
        lblAgentnameDisplay.setMaximumSize(new java.awt.Dimension(100, 15));
        lblAgentnameDisplay.setMinimumSize(new java.awt.Dimension(100, 15));
        lblAgentnameDisplay.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(lblAgentnameDisplay, gridBagConstraints);

        lblRenewal.setText("Renewal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(lblRenewal, gridBagConstraints);

        lblEnhance.setText("EnhanceMeant");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(lblEnhance, gridBagConstraints);

        panODEnhance.setMinimumSize(new java.awt.Dimension(140, 21));
        panODEnhance.setPreferredSize(new java.awt.Dimension(140, 21));
        panODEnhance.setLayout(new java.awt.GridBagLayout());

        rdoEnhanceGroup.add(rdoEnhance_Yes);
        rdoEnhance_Yes.setText("Yes");
        rdoEnhance_Yes.setMaximumSize(new java.awt.Dimension(75, 21));
        rdoEnhance_Yes.setMinimumSize(new java.awt.Dimension(75, 21));
        rdoEnhance_Yes.setPreferredSize(new java.awt.Dimension(75, 21));
        rdoEnhance_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoEnhance_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panODEnhance.add(rdoEnhance_Yes, gridBagConstraints);

        rdoEnhanceGroup.add(rdoEnhance_No);
        rdoEnhance_No.setText("No");
        rdoEnhance_No.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoEnhance_No.setPreferredSize(new java.awt.Dimension(65, 21));
        rdoEnhance_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoEnhance_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panODEnhance.add(rdoEnhance_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(panODEnhance, gridBagConstraints);

        panRenewal.setLayout(new java.awt.GridBagLayout());

        rdoRenewalGroup.add(rdoRenewal_Yes);
        rdoRenewal_Yes.setText("Yes");
        rdoRenewal_Yes.setMaximumSize(new java.awt.Dimension(75, 21));
        rdoRenewal_Yes.setMinimumSize(new java.awt.Dimension(75, 21));
        rdoRenewal_Yes.setPreferredSize(new java.awt.Dimension(75, 21));
        rdoRenewal_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewal_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panRenewal.add(rdoRenewal_Yes, gridBagConstraints);

        rdoRenewalGroup.add(rdoRenewal_No);
        rdoRenewal_No.setText("No");
        rdoRenewal_No.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoRenewal_No.setPreferredSize(new java.awt.Dimension(65, 21));
        rdoRenewal_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRenewal_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panRenewal.add(rdoRenewal_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFacility.add(panRenewal, gridBagConstraints);

        lblEligibleAmt.setText("Calculate  Eligible Loan Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        panFacility.add(lblEligibleAmt, gridBagConstraints);

        chkEligibleAmt.setNextFocusableComponent(txtFacility_Moratorium_Period);
        chkEligibleAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEligibleAmtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 3, 0);
        panFacility.add(chkEligibleAmt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        panCompanyDetails_Company.add(panFacility, gridBagConstraints);

        panSanctionAuthority.setMinimumSize(new java.awt.Dimension(250, 450));
        panSanctionAuthority.setPreferredSize(new java.awt.Dimension(250, 450));
        panSanctionAuthority.setLayout(new java.awt.GridBagLayout());

        lblSanctioningAuthority.setText("Sanctioning Authority");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(lblSanctioningAuthority, gridBagConstraints);

        cboSanctioningAuthority.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboSanctioningAuthority.setMinimumSize(new java.awt.Dimension(100, 21));
        cboSanctioningAuthority.setNextFocusableComponent(cboInterestType);
        cboSanctioningAuthority.setPopupWidth(200);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(cboSanctioningAuthority, gridBagConstraints);

        lblInterestType.setText("Interest Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 35, 2, 0);
        panSanctionAuthority.add(lblInterestType, gridBagConstraints);

        cboInterestType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboInterestType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboInterestType.setNextFocusableComponent(txtSanctionNo);
        cboInterestType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboInterestTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(cboInterestType, gridBagConstraints);

        lblSanctionSlNo.setText("Sl No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(lblSanctionSlNo, gridBagConstraints);

        txtSanctionSlNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtSanctionSlNo.setNextFocusableComponent(txtSanctionNo);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(txtSanctionSlNo, gridBagConstraints);

        lblSanctionNo.setText("Sanction No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(lblSanctionNo, gridBagConstraints);

        txtSanctionNo.setMinimumSize(new java.awt.Dimension(94, 21));
        txtSanctionNo.setNextFocusableComponent(tdtSanctionDate);
        txtSanctionNo.setPreferredSize(new java.awt.Dimension(94, 21));
        txtSanctionNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSanctionNoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(txtSanctionNo, gridBagConstraints);

        lblSanctionDate.setText("Sanction Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(lblSanctionDate, gridBagConstraints);

        tdtSanctionDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtSanctionDate.setNextFocusableComponent(txtLimit_SD);
        tdtSanctionDate.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(tdtSanctionDate, gridBagConstraints);

        lblLimit_SD.setText("Limit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(lblLimit_SD, gridBagConstraints);

        txtLimit_SD.setMaximumSize(new java.awt.Dimension(100, 21));
        txtLimit_SD.setMinimumSize(new java.awt.Dimension(100, 21));
        txtLimit_SD.setNextFocusableComponent(chkMoratorium_Given);
        txtLimit_SD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLimit_SDFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(txtLimit_SD, gridBagConstraints);

        lblMoratorium_Given.setText("Moratorium to be Given");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(lblMoratorium_Given, gridBagConstraints);

        chkMoratorium_Given.setNextFocusableComponent(txtFacility_Moratorium_Period);
        chkMoratorium_Given.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkMoratorium_GivenStateChanged(evt);
            }
        });
        chkMoratorium_Given.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkMoratorium_GivenItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 3, 0);
        panSanctionAuthority.add(chkMoratorium_Given, gridBagConstraints);

        lblSanRepaymentType.setText("Install Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 35, 2, 2);
        panSanctionAuthority.add(lblSanRepaymentType, gridBagConstraints);

        cboSanRepaymentType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboSanRepaymentType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboSanRepaymentType.setNextFocusableComponent(txtSanctionNo);
        cboSanRepaymentType.setPopupWidth(150);
        cboSanRepaymentType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSanRepaymentTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        panSanctionAuthority.add(cboSanRepaymentType, gridBagConstraints);

        panCalcDiminishing.setMinimumSize(new java.awt.Dimension(350, 30));
        panCalcDiminishing.setPreferredSize(new java.awt.Dimension(350, 30));
        panCalcDiminishing.setLayout(new java.awt.GridBagLayout());

        lblCalcDiminshing.setText("Calculate in Uniform Principle method");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        panCalcDiminishing.add(lblCalcDiminshing, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        panCalcDiminishing.add(chkDiminishing, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        panSanctionAuthority.add(panCalcDiminishing, gridBagConstraints);

        ResolutionSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        ResolutionSearch.setEnabled(false);
        ResolutionSearch.setMaximumSize(new java.awt.Dimension(21, 21));
        ResolutionSearch.setMinimumSize(new java.awt.Dimension(21, 21));
        ResolutionSearch.setPreferredSize(new java.awt.Dimension(21, 21));
        ResolutionSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResolutionSearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        panSanctionAuthority.add(ResolutionSearch, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        panCompanyDetails_Company.add(panSanctionAuthority, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 15;
        panBorrowCompanyDetails.add(panCompanyDetails_Company, gridBagConstraints);

        tabLimitAmount.addTab("Borrower & Sanction Details", panBorrowCompanyDetails);

        panFacilityDetails.setMinimumSize(new java.awt.Dimension(795, 550));
        panFacilityDetails.setPreferredSize(new java.awt.Dimension(795, 550));
        panFacilityDetails.setLayout(new java.awt.GridBagLayout());

        panFacilityDetails_Data.setMaximumSize(new java.awt.Dimension(800, 600));
        panFacilityDetails_Data.setMinimumSize(new java.awt.Dimension(800, 600));
        panFacilityDetails_Data.setPreferredSize(new java.awt.Dimension(800, 600));
        panFacilityDetails_Data.setLayout(new java.awt.GridBagLayout());

        panFDAccount.setMinimumSize(new java.awt.Dimension(400, 570));
        panFDAccount.setPreferredSize(new java.awt.Dimension(400, 570));
        panFDAccount.setLayout(new java.awt.GridBagLayout());

        lblAccLimit.setText("Account Limit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 89, 0, 0);
        panFDAccount.add(lblAccLimit, gridBagConstraints);

        lblRiskWeight.setText("Risk Weight");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 98, 0, 0);
        panFDAccount.add(lblRiskWeight, gridBagConstraints);

        panFacilityProdID.setMinimumSize(new java.awt.Dimension(430, 180));
        panFacilityProdID.setPreferredSize(new java.awt.Dimension(430, 180));
        panFacilityProdID.setLayout(new java.awt.GridBagLayout());

        lblProductID_FD.setText("Product ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        panFacilityProdID.add(lblProductID_FD, gridBagConstraints);

        lblAccountHead_FD.setText("Account Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        panFacilityProdID.add(lblAccountHead_FD, gridBagConstraints);

        lblAccountHead_FD_Disp.setMaximumSize(new java.awt.Dimension(100, 15));
        lblAccountHead_FD_Disp.setMinimumSize(new java.awt.Dimension(100, 15));
        lblAccountHead_FD_Disp.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 0, 10);
        panFacilityProdID.add(lblAccountHead_FD_Disp, gridBagConstraints);

        lblProductID_FD_Disp.setMaximumSize(new java.awt.Dimension(100, 100));
        lblProductID_FD_Disp.setMinimumSize(new java.awt.Dimension(121, 15));
        lblProductID_FD_Disp.setPreferredSize(new java.awt.Dimension(121, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = -21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 10);
        panFacilityProdID.add(lblProductID_FD_Disp, gridBagConstraints);

        lblAcctNo_FD.setText("Account No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panFacilityProdID.add(lblAcctNo_FD, gridBagConstraints);

        lblAcctNo_FD_Disp.setForeground(new java.awt.Color(0, 51, 204));
        lblAcctNo_FD_Disp.setFont(new java.awt.Font("MS Sans Serif", 1, 13)); // NOI18N
        lblAcctNo_FD_Disp.setMaximumSize(new java.awt.Dimension(100, 15));
        lblAcctNo_FD_Disp.setMinimumSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panFacilityProdID.add(lblAcctNo_FD_Disp, gridBagConstraints);

        lblAccStatus.setText("Account Status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        panFacilityProdID.add(lblAccStatus, gridBagConstraints);

        cboAccStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboAccStatus.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 10);
        panFacilityProdID.add(cboAccStatus, gridBagConstraints);

        lblAccOpenDt.setText("Account Open Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 0, 0, 0);
        panFacilityProdID.add(lblAccOpenDt, gridBagConstraints);

        tdtAccountOpenDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtAccountOpenDate.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtAccountOpenDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtAccountOpenDateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 6, 0, 10);
        panFacilityProdID.add(tdtAccountOpenDate, gridBagConstraints);

        lblAccCloseDt.setText("Account Open Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 0, 0, 0);
        panFacilityProdID.add(lblAccCloseDt, gridBagConstraints);

        tdtAccountCloseDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtAccountCloseDate.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 6, 0, 10);
        panFacilityProdID.add(tdtAccountCloseDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = -200;
        gridBagConstraints.ipady = -20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panFDAccount.add(panFacilityProdID, gridBagConstraints);

        panSecurityDetails_FD.setBorder(javax.swing.BorderFactory.createTitledBorder("Security Details"));
        panSecurityDetails_FD.setMinimumSize(new java.awt.Dimension(140, 100));
        panSecurityDetails_FD.setPreferredSize(new java.awt.Dimension(140, 100));
        panSecurityDetails_FD.setLayout(new java.awt.GridBagLayout());

        rdoSecurityDetails.add(rdoSecurityDetails_Unsec);
        rdoSecurityDetails_Unsec.setText("Unsecured");
        rdoSecurityDetails_Unsec.setMinimumSize(new java.awt.Dimension(89, 16));
        rdoSecurityDetails_Unsec.setPreferredSize(new java.awt.Dimension(89, 16));
        rdoSecurityDetails_Unsec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSecurityDetails_UnsecActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSecurityDetails_FD.add(rdoSecurityDetails_Unsec, gridBagConstraints);

        rdoSecurityDetails.add(rdoSecurityDetails_Partly);
        rdoSecurityDetails_Partly.setText("Partly Secured");
        rdoSecurityDetails_Partly.setMinimumSize(new java.awt.Dimension(123, 16));
        rdoSecurityDetails_Partly.setPreferredSize(new java.awt.Dimension(123, 16));
        rdoSecurityDetails_Partly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSecurityDetails_PartlyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSecurityDetails_FD.add(rdoSecurityDetails_Partly, gridBagConstraints);

        rdoSecurityDetails.add(rdoSecurityDetails_Fully);
        rdoSecurityDetails_Fully.setText("Fully Secured");
        rdoSecurityDetails_Fully.setMinimumSize(new java.awt.Dimension(105, 16));
        rdoSecurityDetails_Fully.setPreferredSize(new java.awt.Dimension(105, 16));
        rdoSecurityDetails_Fully.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSecurityDetails_FullyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSecurityDetails_FD.add(rdoSecurityDetails_Fully, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 0, 0);
        panFDAccount.add(panSecurityDetails_FD, gridBagConstraints);

        panOtherFacilityChkBoxes.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panOtherFacilityChkBoxes.setMinimumSize(new java.awt.Dimension(654, 60));
        panOtherFacilityChkBoxes.setPreferredSize(new java.awt.Dimension(654, 60));
        panOtherFacilityChkBoxes.setLayout(new java.awt.GridBagLayout());

        chkDocDetails.setText("DocDetails");
        chkDocDetails.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkDocDetails.setMaximumSize(new java.awt.Dimension(107, 16));
        chkDocDetails.setMinimumSize(new java.awt.Dimension(107, 16));
        chkDocDetails.setPreferredSize(new java.awt.Dimension(107, 16));
        chkDocDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDocDetailsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        panOtherFacilityChkBoxes.add(chkDocDetails, gridBagConstraints);

        chkAuthorizedSignatory.setText("AuthSignatory");
        chkAuthorizedSignatory.setMaximumSize(new java.awt.Dimension(117, 16));
        chkAuthorizedSignatory.setMinimumSize(new java.awt.Dimension(117, 16));
        chkAuthorizedSignatory.setPreferredSize(new java.awt.Dimension(117, 16));
        chkAuthorizedSignatory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAuthorizedSignatoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 10, 0, 0);
        panOtherFacilityChkBoxes.add(chkAuthorizedSignatory, gridBagConstraints);

        chkPOFAttorney.setText("POFAttorny");
        chkPOFAttorney.setMaximumSize(new java.awt.Dimension(107, 16));
        chkPOFAttorney.setMinimumSize(new java.awt.Dimension(107, 16));
        chkPOFAttorney.setPreferredSize(new java.awt.Dimension(107, 16));
        chkPOFAttorney.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPOFAttorneyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 10, 0, 0);
        panOtherFacilityChkBoxes.add(chkPOFAttorney, gridBagConstraints);

        chkAccountTransfer.setText("Account Transfer");
        chkAccountTransfer.setMaximumSize(new java.awt.Dimension(117, 16));
        chkAccountTransfer.setMinimumSize(new java.awt.Dimension(117, 16));
        chkAccountTransfer.setPreferredSize(new java.awt.Dimension(117, 16));
        chkAccountTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAccountTransferActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 10, 14, 0);
        panOtherFacilityChkBoxes.add(chkAccountTransfer, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.ipadx = -504;
        gridBagConstraints.ipady = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(28, 6, 0, 0);
        panFDAccount.add(panOtherFacilityChkBoxes, gridBagConstraints);

        panFacilityChkBoxes.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panFacilityChkBoxes.setMinimumSize(new java.awt.Dimension(154, 100));
        panFacilityChkBoxes.setPreferredSize(new java.awt.Dimension(154, 100));
        panFacilityChkBoxes.setLayout(new java.awt.GridBagLayout());

        chkInsurance.setText("Insurance");
        chkInsurance.setMaximumSize(new java.awt.Dimension(63, 21));
        chkInsurance.setMinimumSize(new java.awt.Dimension(83, 16));
        chkInsurance.setPreferredSize(new java.awt.Dimension(83, 16));
        chkInsurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkInsuranceActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFacilityChkBoxes.add(chkInsurance, gridBagConstraints);

        chkGurantor.setText("Guarantor");
        chkGurantor.setMinimumSize(new java.awt.Dimension(69, 16));
        chkGurantor.setPreferredSize(new java.awt.Dimension(119, 16));
        chkGurantor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGurantorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFacilityChkBoxes.add(chkGurantor, gridBagConstraints);

        chkStockInspect.setText("Stock / Inspection");
        chkStockInspect.setMinimumSize(new java.awt.Dimension(134, 16));
        chkStockInspect.setPreferredSize(new java.awt.Dimension(134, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFacilityChkBoxes.add(chkStockInspect, gridBagConstraints);

        chkOTS.setText("OTS");
        chkOTS.setMinimumSize(new java.awt.Dimension(69, 16));
        chkOTS.setPreferredSize(new java.awt.Dimension(119, 16));
        chkOTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkOTSActionPerformed(evt);
            }
        });
        chkOTS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                chkOTSFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFacilityChkBoxes.add(chkOTS, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 40, 0, 0);
        panFDAccount.add(panFacilityChkBoxes, gridBagConstraints);

        panAccLimit.setMinimumSize(new java.awt.Dimension(175, 21));
        panAccLimit.setPreferredSize(new java.awt.Dimension(175, 21));
        panAccLimit.setLayout(new java.awt.GridBagLayout());

        rdoAccLimit.add(rdoAccLimit_Main);
        rdoAccLimit_Main.setText("Main");
        rdoAccLimit_Main.setMaximumSize(new java.awt.Dimension(74, 27));
        rdoAccLimit_Main.setMinimumSize(new java.awt.Dimension(74, 27));
        rdoAccLimit_Main.setPreferredSize(new java.awt.Dimension(74, 27));
        rdoAccLimit_Main.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        rdoAccLimit_Main.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoAccLimit_MainActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panAccLimit.add(rdoAccLimit_Main, gridBagConstraints);

        rdoAccLimit.add(rdoAccLimit_Submit);
        rdoAccLimit_Submit.setText("Sub-Limit");
        rdoAccLimit_Submit.setMaximumSize(new java.awt.Dimension(95, 27));
        rdoAccLimit_Submit.setMinimumSize(new java.awt.Dimension(95, 27));
        rdoAccLimit_Submit.setPreferredSize(new java.awt.Dimension(95, 27));
        rdoAccLimit_Submit.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panAccLimit.add(rdoAccLimit_Submit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 0, 0);
        panFDAccount.add(panAccLimit, gridBagConstraints);

        panRiskWeight.setMinimumSize(new java.awt.Dimension(175, 21));
        panRiskWeight.setPreferredSize(new java.awt.Dimension(175, 21));
        panRiskWeight.setLayout(new java.awt.GridBagLayout());

        rdoRiskWeight.add(rdoRiskWeight_Yes);
        rdoRiskWeight_Yes.setText("Yes");
        rdoRiskWeight_Yes.setMaximumSize(new java.awt.Dimension(74, 27));
        rdoRiskWeight_Yes.setMinimumSize(new java.awt.Dimension(74, 27));
        rdoRiskWeight_Yes.setPreferredSize(new java.awt.Dimension(60, 27));
        panRiskWeight.add(rdoRiskWeight_Yes, new java.awt.GridBagConstraints());

        rdoRiskWeight.add(rdoRiskWeight_No);
        rdoRiskWeight_No.setText("No");
        rdoRiskWeight_No.setMaximumSize(new java.awt.Dimension(95, 27));
        rdoRiskWeight_No.setMinimumSize(new java.awt.Dimension(95, 27));
        rdoRiskWeight_No.setPreferredSize(new java.awt.Dimension(95, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panRiskWeight.add(rdoRiskWeight_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 4, 0);
        panFDAccount.add(panRiskWeight, gridBagConstraints);

        panMobileBanking.setBorder(javax.swing.BorderFactory.createTitledBorder("Mobile Banking"));
        panMobileBanking.setMinimumSize(new java.awt.Dimension(350, 100));
        panMobileBanking.setPreferredSize(new java.awt.Dimension(350, 100));
        panMobileBanking.setLayout(new java.awt.GridBagLayout());

        chkMobileBankingTLAD.setText("Required");
        chkMobileBankingTLAD.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkMobileBankingTLAD.setMinimumSize(new java.awt.Dimension(80, 21));
        chkMobileBankingTLAD.setPreferredSize(new java.awt.Dimension(80, 21));
        chkMobileBankingTLAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMobileBankingTLADActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 9, 0);
        panMobileBanking.add(chkMobileBankingTLAD, gridBagConstraints);

        lblMobileNo.setText("Mob No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        panMobileBanking.add(lblMobileNo, gridBagConstraints);

        txtMobileNo.setAllowAll(true);
        txtMobileNo.setMaxLength(16);
        txtMobileNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtMobileNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMobileNoFocusLost(evt);
            }
        });
        txtMobileNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMobileNoKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 9, 0);
        panMobileBanking.add(txtMobileNo, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 3, 9, 9);
        panMobileBanking.add(tdtMobileSubscribedFrom, gridBagConstraints);

        lblMobileSubscribedFrom.setText("Sub From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        panMobileBanking.add(lblMobileSubscribedFrom, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 12;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.ipady = -50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panFDAccount.add(panMobileBanking, gridBagConstraints);

        panAgentDealerDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Dealer Details"));
        panAgentDealerDetails.setMinimumSize(new java.awt.Dimension(350, 95));
        panAgentDealerDetails.setPreferredSize(new java.awt.Dimension(350, 95));
        panAgentDealerDetails.setLayout(new java.awt.GridBagLayout());

        lblDealerID.setText("Dealer ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        panAgentDealerDetails.add(lblDealerID, gridBagConstraints);

        txtDealerID.setAllowAll(true);
        txtDealerID.setMaxLength(16);
        txtDealerID.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        panAgentDealerDetails.add(txtDealerID, gridBagConstraints);

        lblDealerName.setForeground(new java.awt.Color(0, 0, 255));
        lblDealerName.setFont(new java.awt.Font("MS Sans Serif", 1, 13)); // NOI18N
        lblDealerName.setMaximumSize(new java.awt.Dimension(180, 21));
        lblDealerName.setMinimumSize(new java.awt.Dimension(180, 21));
        lblDealerName.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panAgentDealerDetails.add(lblDealerName, gridBagConstraints);

        btnDealer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnDealer.setToolTipText("Select Customer");
        btnDealer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDealer.setMaximumSize(new java.awt.Dimension(22, 21));
        btnDealer.setMinimumSize(new java.awt.Dimension(22, 21));
        btnDealer.setPreferredSize(new java.awt.Dimension(22, 21));
        btnDealer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDealerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panAgentDealerDetails.add(btnDealer, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 12;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.ipady = -50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDAccount.add(panAgentDealerDetails, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFacilityDetails_Data.add(panFDAccount, gridBagConstraints);

        sptFacilityDetails_Vert.setOrientation(javax.swing.SwingConstants.VERTICAL);
        sptFacilityDetails_Vert.setMinimumSize(new java.awt.Dimension(5, 0));
        sptFacilityDetails_Vert.setPreferredSize(new java.awt.Dimension(5, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFacilityDetails_Data.add(sptFacilityDetails_Vert, gridBagConstraints);

        panFDDate.setFocusable(false);
        panFDDate.setMaximumSize(new java.awt.Dimension(370, 650));
        panFDDate.setMinimumSize(new java.awt.Dimension(370, 650));
        panFDDate.setPreferredSize(new java.awt.Dimension(370, 650));
        panFDDate.setLayout(new java.awt.GridBagLayout());

        panDemandPromssoryDate.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Demand Promissory Note", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11))); // NOI18N
        panDemandPromssoryDate.setMinimumSize(new java.awt.Dimension(260, 70));
        panDemandPromssoryDate.setPreferredSize(new java.awt.Dimension(260, 70));
        panDemandPromssoryDate.setLayout(new java.awt.GridBagLayout());

        lblDemandPromNoteDate.setText("Issue Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 54, 4, 4);
        panDemandPromssoryDate.add(lblDemandPromNoteDate, gridBagConstraints);

        tdtDemandPromNoteDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtDemandPromNoteDate.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDemandPromssoryDate.add(tdtDemandPromNoteDate, gridBagConstraints);

        lblDemandPromNoteExpDate.setText("Expiry Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 54, 4, 4);
        panDemandPromssoryDate.add(lblDemandPromNoteExpDate, gridBagConstraints);

        tdtDemandPromNoteExpDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtDemandPromNoteExpDate.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDemandPromssoryDate.add(tdtDemandPromNoteExpDate, gridBagConstraints);

        lblBlank2.setMinimumSize(new java.awt.Dimension(12, 15));
        lblBlank2.setPreferredSize(new java.awt.Dimension(12, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDemandPromssoryDate.add(lblBlank2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 4, 4);
        panFDDate.add(panDemandPromssoryDate, gridBagConstraints);

        tdtAODDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtAODDate.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtAODDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtAODDateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFDDate.add(tdtAODDate, gridBagConstraints);

        lblAODDate.setText("AOD Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 2);
        panFDDate.add(lblAODDate, gridBagConstraints);

        lblSubsidy.setText("Subsidy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblSubsidy, gridBagConstraints);

        panSubsidy.setLayout(new java.awt.GridBagLayout());

        rdoSubsidy.add(rdoSubsidy_Yes);
        rdoSubsidy_Yes.setText("Yes");
        rdoSubsidy_Yes.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoSubsidy_Yes.setPreferredSize(new java.awt.Dimension(65, 21));
        rdoSubsidy_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSubsidy_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panSubsidy.add(rdoSubsidy_Yes, gridBagConstraints);

        rdoSubsidy.add(rdoSubsidy_No);
        rdoSubsidy_No.setText("No");
        rdoSubsidy_No.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoSubsidy_No.setPreferredSize(new java.awt.Dimension(65, 21));
        rdoSubsidy_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSubsidy_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panSubsidy.add(rdoSubsidy_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(panSubsidy, gridBagConstraints);

        lblPurposeDesc.setText("Purpose Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFDDate.add(lblPurposeDesc, gridBagConstraints);

        txtPurposeDesc.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFDDate.add(txtPurposeDesc, gridBagConstraints);

        lblGroupDesc.setText("Group Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFDDate.add(lblGroupDesc, gridBagConstraints);

        txtGroupDesc.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFDDate.add(txtGroupDesc, gridBagConstraints);

        lblNatureInterest.setText("Nature of Interest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 35, 4, 4);
        panFDDate.add(lblNatureInterest, gridBagConstraints);

        panNatureInterest.setMaximumSize(new java.awt.Dimension(175, 21));
        panNatureInterest.setMinimumSize(new java.awt.Dimension(175, 21));
        panNatureInterest.setPreferredSize(new java.awt.Dimension(175, 21));
        panNatureInterest.setLayout(new java.awt.GridBagLayout());

        rdoNatureInterest.add(rdoNatureInterest_PLR);
        rdoNatureInterest_PLR.setText("PLR");
        rdoNatureInterest_PLR.setMaximumSize(new java.awt.Dimension(74, 27));
        rdoNatureInterest_PLR.setMinimumSize(new java.awt.Dimension(74, 25));
        rdoNatureInterest_PLR.setPreferredSize(new java.awt.Dimension(74, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panNatureInterest.add(rdoNatureInterest_PLR, gridBagConstraints);

        rdoNatureInterest.add(rdoNatureInterest_NonPLR);
        rdoNatureInterest_NonPLR.setText("Non-PLR");
        rdoNatureInterest_NonPLR.setMaximumSize(new java.awt.Dimension(95, 27));
        rdoNatureInterest_NonPLR.setMinimumSize(new java.awt.Dimension(95, 27));
        rdoNatureInterest_NonPLR.setPreferredSize(new java.awt.Dimension(95, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        panNatureInterest.add(rdoNatureInterest_NonPLR, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFDDate.add(panNatureInterest, gridBagConstraints);

        lblDPLimit.setText("DP equal to Sanction Limit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblDPLimit, gridBagConstraints);

        panInterest.setMaximumSize(new java.awt.Dimension(180, 21));
        panInterest.setMinimumSize(new java.awt.Dimension(180, 21));
        panInterest.setPreferredSize(new java.awt.Dimension(180, 21));
        panInterest.setLayout(new java.awt.GridBagLayout());

        rdoInterest.add(rdoInterest_Simple);
        rdoInterest_Simple.setText("Simple");
        rdoInterest_Simple.setMaximumSize(new java.awt.Dimension(74, 27));
        rdoInterest_Simple.setMinimumSize(new java.awt.Dimension(74, 27));
        rdoInterest_Simple.setPreferredSize(new java.awt.Dimension(74, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panInterest.add(rdoInterest_Simple, gridBagConstraints);

        rdoInterest.add(rdoInterest_Compound);
        rdoInterest_Compound.setText("Compound");
        rdoInterest_Compound.setMaximumSize(new java.awt.Dimension(95, 27));
        rdoInterest_Compound.setMinimumSize(new java.awt.Dimension(95, 27));
        rdoInterest_Compound.setPreferredSize(new java.awt.Dimension(95, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panInterest.add(rdoInterest_Compound, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFDDate.add(panInterest, gridBagConstraints);

        panInterest1.setMaximumSize(new java.awt.Dimension(130, 21));
        panInterest1.setMinimumSize(new java.awt.Dimension(130, 21));
        panInterest1.setPreferredSize(new java.awt.Dimension(130, 21));
        panInterest1.setLayout(new java.awt.GridBagLayout());

        rdoInterest.add(rdoDP_YES);
        rdoDP_YES.setText("Yes");
        rdoDP_YES.setMaximumSize(new java.awt.Dimension(65, 21));
        rdoDP_YES.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoDP_YES.setPreferredSize(new java.awt.Dimension(65, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panInterest1.add(rdoDP_YES, gridBagConstraints);

        rdoInterest.add(rdoDP_NO);
        rdoDP_NO.setText("No");
        rdoDP_NO.setMaximumSize(new java.awt.Dimension(65, 21));
        rdoDP_NO.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoDP_NO.setPreferredSize(new java.awt.Dimension(65, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panInterest1.add(rdoDP_NO, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(panInterest1, gridBagConstraints);

        lblContactPerson.setText("Contact Person");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblContactPerson, gridBagConstraints);

        txtContactPerson.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(txtContactPerson, gridBagConstraints);

        lblContactPhone.setText("Contact Phone No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblContactPhone, gridBagConstraints);

        txtContactPhone.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(txtContactPhone, gridBagConstraints);

        cboRecommendedByType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboRecommendedByType.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(cboRecommendedByType, gridBagConstraints);

        txtAcct_Name.setMaximumSize(new java.awt.Dimension(100, 21));
        txtAcct_Name.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panFDDate.add(txtAcct_Name, gridBagConstraints);

        lblAcct_Name.setText("Account Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panFDDate.add(lblAcct_Name, gridBagConstraints);

        lblRecommandByType.setText("Recommended By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblRecommandByType, gridBagConstraints);

        lblInterest.setText("Interest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFDDate.add(lblInterest, gridBagConstraints);

        txtSubsidyAmt.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(txtSubsidyAmt, gridBagConstraints);

        lblSubsidyAmt.setText("Total Subsidy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblSubsidyAmt, gridBagConstraints);

        lblSubsidyAccHead.setText("Adjustment Achd");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblSubsidyAccHead, gridBagConstraints);

        lblRebateInterest.setText("cLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblRebateInterest, gridBagConstraints);

        txtRebateInterest_Amt.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(txtRebateInterest_Amt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(tdtRebateInterest_App_Dt, gridBagConstraints);

        panSubsidy1.setLayout(new java.awt.GridBagLayout());

        rdoRebateInterestGroup.add(rdoRebateInterest_Yes);
        rdoRebateInterest_Yes.setText("Yes");
        rdoRebateInterest_Yes.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoRebateInterest_Yes.setPreferredSize(new java.awt.Dimension(65, 21));
        rdoRebateInterest_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRebateInterest_YesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panSubsidy1.add(rdoRebateInterest_Yes, gridBagConstraints);

        rdoRebateInterestGroup.add(rdoRebateInterest_No);
        rdoRebateInterest_No.setText("No");
        rdoRebateInterest_No.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoRebateInterest_No.setPreferredSize(new java.awt.Dimension(65, 21));
        rdoRebateInterest_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRebateInterest_NoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panSubsidy1.add(rdoRebateInterest_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panFDDate.add(panSubsidy1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(tdtSubsidyAppDt, gridBagConstraints);

        lblRebateInterest_App_Dt.setText("cLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblRebateInterest_App_Dt, gridBagConstraints);

        lblSubsidyAppDt.setText("Subsidy Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblSubsidyAppDt, gridBagConstraints);

        lblRebateInterest_Amt.setText("cLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblRebateInterest_Amt, gridBagConstraints);

        lblSubsidy1.setText("Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblSubsidy1, gridBagConstraints);

        panSubsidy2.setMinimumSize(new java.awt.Dimension(260, 21));
        panSubsidy2.setPreferredSize(new java.awt.Dimension(260, 21));
        panSubsidy2.setLayout(new java.awt.GridBagLayout());

        rdoSubsidyAddMinusGroup.add(rdoSubsidy_add);
        rdoSubsidy_add.setText("Add");
        rdoSubsidy_add.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoSubsidy_add.setPreferredSize(new java.awt.Dimension(65, 21));
        rdoSubsidy_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSubsidy_addActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panSubsidy2.add(rdoSubsidy_add, gridBagConstraints);

        rdoSubsidyAddMinusGroup.add(rdoSubsidy_Minus);
        rdoSubsidy_Minus.setText("Minus");
        rdoSubsidy_Minus.setMinimumSize(new java.awt.Dimension(65, 21));
        rdoSubsidy_Minus.setPreferredSize(new java.awt.Dimension(65, 21));
        rdoSubsidy_Minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSubsidy_MinusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panSubsidy2.add(rdoSubsidy_Minus, gridBagConstraints);

        txtEnteredSubsidyAmt.setMinimumSize(new java.awt.Dimension(60, 21));
        txtEnteredSubsidyAmt.setPreferredSize(new java.awt.Dimension(60, 21));
        txtEnteredSubsidyAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEnteredSubsidyAmtActionPerformed(evt);
            }
        });
        txtEnteredSubsidyAmt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEnteredSubsidyAmtFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSubsidy2.add(txtEnteredSubsidyAmt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(panSubsidy2, gridBagConstraints);

        lblSubsidyAdjustedAmt.setText("Adjusted Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(lblSubsidyAdjustedAmt, gridBagConstraints);

        txtSubsidyAdjustedAmt.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(txtSubsidyAdjustedAmt, gridBagConstraints);

        panSubsidyAchead.setMinimumSize(new java.awt.Dimension(120, 21));
        panSubsidyAchead.setPreferredSize(new java.awt.Dimension(120, 21));
        panSubsidyAchead.setLayout(new java.awt.GridBagLayout());

        txtSubsidyAccHead.setMinimumSize(new java.awt.Dimension(100, 21));
        txtSubsidyAccHead.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSubsidyAccHeadFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panSubsidyAchead.add(txtSubsidyAccHead, gridBagConstraints);

        btnGLAchd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnGLAchd.setToolTipText("Select Customer");
        btnGLAchd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGLAchd.setMaximumSize(new java.awt.Dimension(22, 21));
        btnGLAchd.setMinimumSize(new java.awt.Dimension(22, 21));
        btnGLAchd.setPreferredSize(new java.awt.Dimension(22, 21));
        btnGLAchd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGLAchdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panSubsidyAchead.add(btnGLAchd, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panFDDate.add(panSubsidyAchead, gridBagConstraints);

        cboRecommendedByType2.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        panFDDate.add(cboRecommendedByType2, gridBagConstraints);

        lblKoleLandArea.setText("Kole Land Area");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        panFDDate.add(lblKoleLandArea, gridBagConstraints);

        txtKoleLandArea.setAllowNumber(true);
        txtKoleLandArea.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panFDDate.add(txtKoleLandArea, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFacilityDetails_Data.add(panFDDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panFacilityDetails.add(panFacilityDetails_Data, gridBagConstraints);

        tabLimitAmount.addTab("Facility Details", panFacilityDetails);

        panAdditionalSanctionDetails.setMinimumSize(new java.awt.Dimension(820, 550));
        panAdditionalSanctionDetails.setPreferredSize(new java.awt.Dimension(820, 550));
        panAdditionalSanctionDetails.setLayout(new java.awt.GridBagLayout());

        panAdditionalkSanctionDetails.setMinimumSize(new java.awt.Dimension(475, 130));
        panAdditionalkSanctionDetails.setPreferredSize(new java.awt.Dimension(475, 130));
        panAdditionalkSanctionDetails.setLayout(new java.awt.GridBagLayout());

        panPeakSanctionDetails_Sanction1.setMinimumSize(new java.awt.Dimension(179, 82));
        panPeakSanctionDetails_Sanction1.setPreferredSize(new java.awt.Dimension(179, 82));
        panPeakSanctionDetails_Sanction1.setLayout(new java.awt.GridBagLayout());

        lblPermittedBy.setText("Permitted By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panPeakSanctionDetails_Sanction1.add(lblPermittedBy, gridBagConstraints);

        tdtAdditionalSanctionDt.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtAdditionalSanctionDt.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtAdditionalSanctionDt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtAdditionalSanctionDtFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panPeakSanctionDetails_Sanction1.add(tdtAdditionalSanctionDt, gridBagConstraints);

        txtPermittedBy.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panPeakSanctionDetails_Sanction1.add(txtPermittedBy, gridBagConstraints);

        btnPermittedBy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnPermittedBy.setToolTipText("Select Customer");
        btnPermittedBy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPermittedBy.setMaximumSize(new java.awt.Dimension(35, 25));
        btnPermittedBy.setMinimumSize(new java.awt.Dimension(35, 25));
        btnPermittedBy.setPreferredSize(new java.awt.Dimension(35, 21));
        btnPermittedBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPermittedByActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panPeakSanctionDetails_Sanction1.add(btnPermittedBy, gridBagConstraints);

        txtAdditionalLimit.setMinimumSize(new java.awt.Dimension(100, 21));
        txtAdditionalLimit.setNextFocusableComponent(btnSave_ASD);
        txtAdditionalLimit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAdditionalLimitFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panPeakSanctionDetails_Sanction1.add(txtAdditionalLimit, gridBagConstraints);

        lblAdditionalLimit.setText("Additional Limit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panPeakSanctionDetails_Sanction1.add(lblAdditionalLimit, gridBagConstraints);

        lblAdditionalSanctionDt.setText("Additional Sanction Dt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panPeakSanctionDetails_Sanction1.add(lblAdditionalSanctionDt, gridBagConstraints);

        lblName.setText("Name");
        lblName.setMaximumSize(new java.awt.Dimension(100, 15));
        lblName.setMinimumSize(new java.awt.Dimension(35, 15));
        lblName.setPreferredSize(new java.awt.Dimension(35, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 4);
        panPeakSanctionDetails_Sanction1.add(lblName, gridBagConstraints);

        lblPermittedDesignation.setText("Designation");
        lblPermittedDesignation.setMaximumSize(new java.awt.Dimension(60, 15));
        lblPermittedDesignation.setMinimumSize(new java.awt.Dimension(60, 15));
        lblPermittedDesignation.setPreferredSize(new java.awt.Dimension(70, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panPeakSanctionDetails_Sanction1.add(lblPermittedDesignation, gridBagConstraints);

        lblPermittedName.setMaximumSize(new java.awt.Dimension(100, 15));
        lblPermittedName.setMinimumSize(new java.awt.Dimension(100, 15));
        lblPermittedName.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panPeakSanctionDetails_Sanction1.add(lblPermittedName, gridBagConstraints);

        lblDesignatedName.setMaximumSize(new java.awt.Dimension(100, 15));
        lblDesignatedName.setMinimumSize(new java.awt.Dimension(100, 15));
        lblDesignatedName.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panPeakSanctionDetails_Sanction1.add(lblDesignatedName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panAdditionalkSanctionDetails.add(panPeakSanctionDetails_Sanction1, gridBagConstraints);

        panButton2_SD1.setMinimumSize(new java.awt.Dimension(215, 33));
        panButton2_SD1.setPreferredSize(new java.awt.Dimension(215, 33));
        panButton2_SD1.setLayout(new java.awt.GridBagLayout());

        btnNew_ASD.setText("New");
        btnNew_ASD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNew_ASDActionPerformed(evt);
            }
        });
        btnNew_ASD.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                btnNew_ASDComponentShown(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButton2_SD1.add(btnNew_ASD, gridBagConstraints);

        btnSave_ASD.setText("Save");
        btnSave_ASD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave_ASDActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButton2_SD1.add(btnSave_ASD, gridBagConstraints);

        btnDelete_ASD.setText("Delete");
        btnDelete_ASD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete_ASDActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButton2_SD1.add(btnDelete_ASD, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAdditionalkSanctionDetails.add(panButton2_SD1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAdditionalSanctionDetails.add(panAdditionalkSanctionDetails, gridBagConstraints);

        panPeakSanctionDetails_Table.setBorder(javax.swing.BorderFactory.createTitledBorder("Facility Details"));
        panPeakSanctionDetails_Table.setMinimumSize(new java.awt.Dimension(775, 310));
        panPeakSanctionDetails_Table.setPreferredSize(new java.awt.Dimension(775, 310));
        panPeakSanctionDetails_Table.setLayout(new java.awt.GridBagLayout());

        panTableFields_SD1.setMinimumSize(new java.awt.Dimension(475, 300));
        panTableFields_SD1.setPreferredSize(new java.awt.Dimension(475, 300));
        panTableFields_SD1.setLayout(new java.awt.GridBagLayout());

        lblTypeOfFacility1.setText("Type of Facility");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblTypeOfFacility1, gridBagConstraints);

        cboTypeOfFacility1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboTypeOfFacility1.setMinimumSize(new java.awt.Dimension(100, 21));
        cboTypeOfFacility1.setPopupWidth(150);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(cboTypeOfFacility1, gridBagConstraints);

        lblLimit_SD1.setText("Limit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblLimit_SD1, gridBagConstraints);

        txtLimit_SD1.setMinimumSize(new java.awt.Dimension(100, 21));
        txtLimit_SD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLimit_SD1ActionPerformed(evt);
            }
        });
        txtLimit_SD1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLimit_SD1FocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(txtLimit_SD1, gridBagConstraints);

        lblFDate1.setText("From Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblFDate1, gridBagConstraints);

        tdtFDate1.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtFDate1.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(tdtFDate1, gridBagConstraints);

        lblTDate1.setText("To Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblTDate1, gridBagConstraints);

        tdtTDate1.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtTDate1.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(tdtTDate1, gridBagConstraints);

        panButton1.setLayout(new java.awt.GridBagLayout());

        btnNew2.setText("New");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButton1.add(btnNew2, gridBagConstraints);

        btnSave2.setText("Save");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButton1.add(btnSave2, gridBagConstraints);

        btnDelete2.setText("Delete");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButton1.add(btnDelete2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields_SD1.add(panButton1, gridBagConstraints);

        lblNoInstallments1.setText("No. of Installments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblNoInstallments1, gridBagConstraints);

        txtNoInstallments1.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(txtNoInstallments1, gridBagConstraints);

        lblRepayFreq1.setText("Repay Frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblRepayFreq1, gridBagConstraints);

        cboRepayFreq1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboRepayFreq1.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(cboRepayFreq1, gridBagConstraints);

        cboProductId1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboProductId1.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProductId1.setPopupWidth(250);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(cboProductId1, gridBagConstraints);

        lblProductId1.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblProductId1, gridBagConstraints);

        lblAccHead1.setText("Account Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblAccHead1, gridBagConstraints);

        lblAccHead_3.setMaximumSize(new java.awt.Dimension(100, 15));
        lblAccHead_3.setMinimumSize(new java.awt.Dimension(100, 15));
        lblAccHead_3.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblAccHead_3, gridBagConstraints);

        lblAcctNo_Sanction1.setText("Account No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblAcctNo_Sanction1, gridBagConstraints);

        lblAcctNo_Sanction_Disp1.setText("LA0000000034324");
        lblAcctNo_Sanction_Disp1.setMaximumSize(new java.awt.Dimension(100, 15));
        lblAcctNo_Sanction_Disp1.setMinimumSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblAcctNo_Sanction_Disp1, gridBagConstraints);

        lblFacility_Repay_Date1.setText("Repayment Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblFacility_Repay_Date1, gridBagConstraints);

        tdtFacility_Repay_Date1.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtFacility_Repay_Date1.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(tdtFacility_Repay_Date1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        panTableFields_SD1.add(chkMoratorium_Given1, gridBagConstraints);

        lblMoratorium_Given1.setText("Moratorium to be Given");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblMoratorium_Given1, gridBagConstraints);

        lblFacility_Moratorium_Period1.setText("Moratorium Period");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblFacility_Moratorium_Period1, gridBagConstraints);

        txtFacility_Moratorium_Period1.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(txtFacility_Moratorium_Period1, gridBagConstraints);

        lblPeriodDifference1.setText("Period Difference");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTableFields_SD1.add(lblPeriodDifference1, gridBagConstraints);

        panPeriodDifference1.setMinimumSize(new java.awt.Dimension(135, 20));
        panPeriodDifference1.setPreferredSize(new java.awt.Dimension(135, 20));
        panPeriodDifference1.setLayout(new java.awt.GridBagLayout());

        txtPeriodDifference_Years1.setMinimumSize(new java.awt.Dimension(20, 20));
        txtPeriodDifference_Years1.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        panPeriodDifference1.add(txtPeriodDifference_Years1, gridBagConstraints);

        lblPeriodDifference_Years1.setText("YY");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panPeriodDifference1.add(lblPeriodDifference_Years1, gridBagConstraints);

        txtPeriodDifference_Months1.setMinimumSize(new java.awt.Dimension(20, 20));
        txtPeriodDifference_Months1.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panPeriodDifference1.add(txtPeriodDifference_Months1, gridBagConstraints);

        lblPeriodDifference_Months1.setText("MM");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panPeriodDifference1.add(lblPeriodDifference_Months1, gridBagConstraints);

        txtPeriodDifference_Days1.setMinimumSize(new java.awt.Dimension(20, 20));
        txtPeriodDifference_Days1.setPreferredSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panPeriodDifference1.add(txtPeriodDifference_Days1, gridBagConstraints);

        lblPeriodDifference_Days1.setText("DD");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panPeriodDifference1.add(lblPeriodDifference_Days1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 0);
        panTableFields_SD1.add(panPeriodDifference1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panPeakSanctionDetails_Table.add(panTableFields_SD1, gridBagConstraints);

        panTable_SD1.setLayout(new java.awt.GridBagLayout());

        srpTable_SD1.setMinimumSize(new java.awt.Dimension(330, 300));
        srpTable_SD1.setPreferredSize(new java.awt.Dimension(330, 300));

        tblSanctionDetails1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblSanctionDetails1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        srpTable_SD1.setViewportView(tblSanctionDetails1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panTable_SD1.add(srpTable_SD1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panPeakSanctionDetails_Table.add(panTable_SD1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAdditionalSanctionDetails.add(panPeakSanctionDetails_Table, gridBagConstraints);

        panTable_ASD.setLayout(new java.awt.GridBagLayout());

        srpTable_ASD.setMinimumSize(new java.awt.Dimension(330, 140));
        srpTable_ASD.setPreferredSize(new java.awt.Dimension(330, 140));

        tblPeakSanctionDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPeakSanctionDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblPeakSanctionDetailsMousePressed(evt);
            }
        });
        srpTable_ASD.setViewportView(tblPeakSanctionDetails);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        panTable_ASD.add(srpTable_ASD, gridBagConstraints);

        lblTotalLimit.setText("TOTAL LIMIT");
        lblTotalLimit.setMaximumSize(new java.awt.Dimension(100, 15));
        lblTotalLimit.setMinimumSize(new java.awt.Dimension(100, 15));
        lblTotalLimit.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTable_ASD.add(lblTotalLimit, gridBagConstraints);

        lblTotalLimitAmt.setMaximumSize(new java.awt.Dimension(100, 15));
        lblTotalLimitAmt.setMinimumSize(new java.awt.Dimension(100, 15));
        lblTotalLimitAmt.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        panTable_ASD.add(lblTotalLimitAmt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAdditionalSanctionDetails.add(panTable_ASD, gridBagConstraints);

        tabLimitAmount.addTab("Additional Sanction Details", panAdditionalSanctionDetails);

        panSecurityDetails.setMinimumSize(new java.awt.Dimension(814, 320));
        panSecurityDetails.setPreferredSize(new java.awt.Dimension(814, 320));
        panSecurityDetails.setLayout(new java.awt.GridBagLayout());
        tabLimitAmount.addTab("Security Details", panSecurityDetails);

        panGuarantorInsuranceDetails.setMinimumSize(new java.awt.Dimension(830, 540));
        panGuarantorInsuranceDetails.setPreferredSize(new java.awt.Dimension(830, 540));
        panGuarantorInsuranceDetails.setLayout(new java.awt.GridBagLayout());

        panGuarantorDetails.setMinimumSize(new java.awt.Dimension(830, 400));
        panGuarantorDetails.setPreferredSize(new java.awt.Dimension(830, 400));
        panGuarantorDetails.setLayout(new java.awt.GridBagLayout());

        panProd_GD.setMaximumSize(new java.awt.Dimension(720, 25));
        panProd_GD.setMinimumSize(new java.awt.Dimension(720, 25));
        panProd_GD.setPreferredSize(new java.awt.Dimension(720, 25));
        panProd_GD.setLayout(new java.awt.GridBagLayout());

        lblProdID_GD.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 40, 0, 4);
        panProd_GD.add(lblProdID_GD, gridBagConstraints);

        lblProdID_GD_Disp.setText("P1000");
        lblProdID_GD_Disp.setMaximumSize(new java.awt.Dimension(100, 15));
        lblProdID_GD_Disp.setMinimumSize(new java.awt.Dimension(100, 15));
        lblProdID_GD_Disp.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panProd_GD.add(lblProdID_GD_Disp, gridBagConstraints);

        lblAccHead_GD.setText("Account Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 76, 0, 4);
        panProd_GD.add(lblAccHead_GD, gridBagConstraints);

        lblAccHead_GD_2.setMaximumSize(new java.awt.Dimension(110, 15));
        lblAccHead_GD_2.setMinimumSize(new java.awt.Dimension(110, 15));
        lblAccHead_GD_2.setPreferredSize(new java.awt.Dimension(110, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panProd_GD.add(lblAccHead_GD_2, gridBagConstraints);

        lblAccNo_GD.setText("Account No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 12, 0, 4);
        panProd_GD.add(lblAccNo_GD, gridBagConstraints);

        lblAccNo_GD_2.setForeground(new java.awt.Color(0, 51, 204));
        lblAccNo_GD_2.setText("4321");
        lblAccNo_GD_2.setFont(new java.awt.Font("MS Sans Serif", 1, 13)); // NOI18N
        lblAccNo_GD_2.setMaximumSize(new java.awt.Dimension(110, 15));
        lblAccNo_GD_2.setMinimumSize(new java.awt.Dimension(110, 15));
        lblAccNo_GD_2.setPreferredSize(new java.awt.Dimension(110, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panProd_GD.add(lblAccNo_GD_2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panGuarantorDetails.add(panProd_GD, gridBagConstraints);

        panGuarantorDetail_Detail.setMinimumSize(new java.awt.Dimension(513, 240));
        panGuarantorDetail_Detail.setPreferredSize(new java.awt.Dimension(521, 240));
        panGuarantorDetail_Detail.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarantorDetails.add(panGuarantorDetail_Detail, gridBagConstraints);

        panToolBtns.setLayout(new java.awt.GridBagLayout());

        btnGuarantorNew.setText("New");
        btnGuarantorNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuarantorNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panToolBtns.add(btnGuarantorNew, gridBagConstraints);

        btnGuarantorSave.setText("Save");
        btnGuarantorSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuarantorSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panToolBtns.add(btnGuarantorSave, gridBagConstraints);

        btnGuarantorDelete.setText("Delete");
        btnGuarantorDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuarantorDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panToolBtns.add(btnGuarantorDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 39, 0, 4);
        panGuarantorDetails.add(panToolBtns, gridBagConstraints);

        panGuarantorDetailsTable.setMinimumSize(new java.awt.Dimension(275, 250));
        panGuarantorDetailsTable.setPreferredSize(new java.awt.Dimension(275, 250));
        panGuarantorDetailsTable.setLayout(new java.awt.GridBagLayout());

        srpGuarantorTable.setMinimumSize(new java.awt.Dimension(275, 250));
        srpGuarantorTable.setPreferredSize(new java.awt.Dimension(275, 250));

        tblGuarantorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sl No.", "Cust ID", "Name", "A/C Head", "A/C No."
            }
        ));
        tblGuarantorTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblGuarantorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblGuarantorTableMousePressed(evt);
            }
        });
        srpGuarantorTable.setViewportView(tblGuarantorTable);

        panGuarantorDetailsTable.add(srpGuarantorTable, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panGuarantorDetails.add(panGuarantorDetailsTable, gridBagConstraints);

        sptGuarantorDetail_Hori1.setMinimumSize(new java.awt.Dimension(800, 3));
        sptGuarantorDetail_Hori1.setPreferredSize(new java.awt.Dimension(800, 3));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panGuarantorDetails.add(sptGuarantorDetail_Hori1, gridBagConstraints);

        panGuarnOption.setMaximumSize(new java.awt.Dimension(720, 25));
        panGuarnOption.setMinimumSize(new java.awt.Dimension(720, 25));
        panGuarnOption.setPreferredSize(new java.awt.Dimension(720, 25));
        panGuarnOption.setLayout(new java.awt.GridBagLayout());

        rdoGuarnConstution.add(rdoGuarnIndividual);
        rdoGuarnIndividual.setText("Individual");
        rdoGuarnIndividual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoGuarnIndividualActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        panGuarnOption.add(rdoGuarnIndividual, gridBagConstraints);

        rdoGuarnConstution.add(rdoGuarnInsititutional);
        rdoGuarnInsititutional.setText("Institutional");
        rdoGuarnInsititutional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoGuarnInsititutionalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        panGuarnOption.add(rdoGuarnInsititutional, gridBagConstraints);

        lblMemberNo.setText("Member No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarnOption.add(lblMemberNo, gridBagConstraints);

        lblMemberNo_Disp.setMaximumSize(new java.awt.Dimension(100, 15));
        lblMemberNo_Disp.setMinimumSize(new java.awt.Dimension(100, 15));
        lblMemberNo_Disp.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
        panGuarnOption.add(lblMemberNo_Disp, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panGuarantorDetails.add(panGuarnOption, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panGuarantorInsuranceDetails.add(panGuarantorDetails, gridBagConstraints);

        tabLimitAmount.addTab("Guarantor Details", panGuarantorInsuranceDetails);

        panInterMaintenance.setLayout(new java.awt.GridBagLayout());

        panInterMaintenance_Acc.setMinimumSize(new java.awt.Dimension(650, 60));
        panInterMaintenance_Acc.setPreferredSize(new java.awt.Dimension(650, 60));
        panInterMaintenance_Acc.setLayout(new java.awt.GridBagLayout());

        panProd_IM.setMaximumSize(new java.awt.Dimension(210, 52));
        panProd_IM.setMinimumSize(new java.awt.Dimension(210, 52));
        panProd_IM.setPreferredSize(new java.awt.Dimension(210, 52));
        panProd_IM.setLayout(new java.awt.GridBagLayout());

        lblProdID_IM.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 4);
        panProd_IM.add(lblProdID_IM, gridBagConstraints);

        lblProdID_IM_Disp.setText("            ");
        lblProdID_IM_Disp.setMaximumSize(new java.awt.Dimension(100, 15));
        lblProdID_IM_Disp.setMinimumSize(new java.awt.Dimension(100, 15));
        lblProdID_IM_Disp.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProd_IM.add(lblProdID_IM_Disp, gridBagConstraints);

        lblIntGetFrom.setText("Interest Get From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 4);
        panProd_IM.add(lblIntGetFrom, gridBagConstraints);

        cboIntGetFrom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboIntGetFrom.setMaximumSize(new java.awt.Dimension(100, 21));
        cboIntGetFrom.setMinimumSize(new java.awt.Dimension(100, 21));
        cboIntGetFrom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboIntGetFromMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cboIntGetFromMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cboIntGetFromMouseReleased(evt);
            }
        });
        cboIntGetFrom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboIntGetFromItemStateChanged(evt);
            }
        });
        cboIntGetFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboIntGetFromActionPerformed(evt);
            }
        });
        cboIntGetFrom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cboIntGetFromFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProd_IM.add(cboIntGetFrom, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 30, 4);
        panInterMaintenance_Acc.add(panProd_IM, gridBagConstraints);

        panAcc_IM.setMinimumSize(new java.awt.Dimension(303, 52));
        panAcc_IM.setPreferredSize(new java.awt.Dimension(303, 52));
        panAcc_IM.setLayout(new java.awt.GridBagLayout());

        lblAccHead_IM.setText("Account Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 6);
        panAcc_IM.add(lblAccHead_IM, gridBagConstraints);

        lblAccHead_IM_2.setText("SBI");
        lblAccHead_IM_2.setMaximumSize(new java.awt.Dimension(146, 15));
        lblAccHead_IM_2.setMinimumSize(new java.awt.Dimension(146, 15));
        lblAccHead_IM_2.setPreferredSize(new java.awt.Dimension(146, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcc_IM.add(lblAccHead_IM_2, gridBagConstraints);

        lblAccNo_IM.setText("Account No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 6);
        panAcc_IM.add(lblAccNo_IM, gridBagConstraints);

        lblAccNo_IM_2.setText("4321");
        lblAccNo_IM_2.setMaximumSize(new java.awt.Dimension(146, 15));
        lblAccNo_IM_2.setMinimumSize(new java.awt.Dimension(146, 15));
        lblAccNo_IM_2.setPreferredSize(new java.awt.Dimension(146, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcc_IM.add(lblAccNo_IM_2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 25, 30, 4);
        panInterMaintenance_Acc.add(panAcc_IM, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 53, 4, 4);
        panInterMaintenance.add(panInterMaintenance_Acc, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInterMaintenance.add(sptInterMaintenance_Hori, gridBagConstraints);

        panInterMaintenance_Details.setMinimumSize(new java.awt.Dimension(650, 77));
        panInterMaintenance_Details.setPreferredSize(new java.awt.Dimension(650, 77));
        panInterMaintenance_Details.setLayout(new java.awt.GridBagLayout());

        panLimit.setMinimumSize(new java.awt.Dimension(150, 46));
        panLimit.setPreferredSize(new java.awt.Dimension(150, 46));
        panLimit.setLayout(new java.awt.GridBagLayout());

        lblLimitAmt.setText("Limit Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLimit.add(lblLimitAmt, gridBagConstraints);

        lblLimitAmt_2.setText("100000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLimit.add(lblLimitAmt_2, gridBagConstraints);

        lblPLR_Limit.setText("PLR");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLimit.add(lblPLR_Limit, gridBagConstraints);

        lblPLR_Limit_2.setText("14");
        lblPLR_Limit_2.setMaximumSize(new java.awt.Dimension(36, 15));
        lblPLR_Limit_2.setMinimumSize(new java.awt.Dimension(36, 15));
        lblPLR_Limit_2.setPreferredSize(new java.awt.Dimension(36, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panLimit.add(lblPLR_Limit_2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 1, 4, 4);
        panInterMaintenance_Details.add(panLimit, gridBagConstraints);

        panDate.setMinimumSize(new java.awt.Dimension(280, 46));
        panDate.setPreferredSize(new java.awt.Dimension(280, 46));
        panDate.setLayout(new java.awt.GridBagLayout());

        lblSancDate.setText("Sanction Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDate.add(lblSancDate, gridBagConstraints);

        lblSancDate_2.setText("24/07/2002");
        lblSancDate_2.setMaximumSize(new java.awt.Dimension(146, 15));
        lblSancDate_2.setMinimumSize(new java.awt.Dimension(146, 15));
        lblSancDate_2.setPreferredSize(new java.awt.Dimension(146, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDate.add(lblSancDate_2, gridBagConstraints);

        lblExpiryDate.setText("Expiry Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDate.add(lblExpiryDate, gridBagConstraints);

        lblExpiryDate_2.setText("23/07/2003");
        lblExpiryDate_2.setMaximumSize(new java.awt.Dimension(146, 15));
        lblExpiryDate_2.setMinimumSize(new java.awt.Dimension(146, 15));
        lblExpiryDate_2.setPreferredSize(new java.awt.Dimension(146, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDate.add(lblExpiryDate_2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInterMaintenance_Details.add(panDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 53, 4, 4);
        panInterMaintenance.add(panInterMaintenance_Details, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInterMaintenance.add(sptInterMaintenance_Hori2, gridBagConstraints);

        panInterMaintenance_Table.setLayout(new java.awt.GridBagLayout());

        panTableFields.setLayout(new java.awt.GridBagLayout());

        lblFrom.setText("From Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(lblFrom, gridBagConstraints);

        tdtFrom.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtFrom.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtFrom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtFromFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(tdtFrom, gridBagConstraints);

        lblTo.setText("To Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(lblTo, gridBagConstraints);

        tdtTo.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtTo.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtToFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(tdtTo, gridBagConstraints);

        lblFromAmt.setText("From Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(lblFromAmt, gridBagConstraints);

        txtFromAmt.setMinimumSize(new java.awt.Dimension(100, 21));
        txtFromAmt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFromAmtFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(txtFromAmt, gridBagConstraints);

        lblToAmt.setText("To Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(lblToAmt, gridBagConstraints);

        txtToAmt.setMinimumSize(new java.awt.Dimension(100, 21));
        txtToAmt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtToAmtFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(txtToAmt, gridBagConstraints);

        lblInter.setText("Interest %");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(lblInter, gridBagConstraints);

        txtInter.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(txtInter, gridBagConstraints);

        lblPenalInter.setText("Penal Interest %");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(lblPenalInter, gridBagConstraints);

        txtPenalInter.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(txtPenalInter, gridBagConstraints);

        lblAgainstClearingInter.setText("Against Clearing Interest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(lblAgainstClearingInter, gridBagConstraints);

        txtAgainstClearingInter.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(txtAgainstClearingInter, gridBagConstraints);

        lblPenalStatement.setText("Limit Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(lblPenalStatement, gridBagConstraints);

        txtPenalStatement.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(txtPenalStatement, gridBagConstraints);

        lblInterExpLimit.setText("Interest For Expiry of Limit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(lblInterExpLimit, gridBagConstraints);

        txtInterExpLimit.setMinimumSize(new java.awt.Dimension(100, 21));
        txtInterExpLimit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtInterExpLimitFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(txtInterExpLimit, gridBagConstraints);

        panButtons.setLayout(new java.awt.GridBagLayout());

        btnInterestMaintenanceNew.setText("New");
        btnInterestMaintenanceNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInterestMaintenanceNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButtons.add(btnInterestMaintenanceNew, gridBagConstraints);

        btnInterestMaintenanceSave.setText("Save");
        btnInterestMaintenanceSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInterestMaintenanceSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButtons.add(btnInterestMaintenanceSave, gridBagConstraints);

        btnInterestMaintenanceDelete.setText("Delete");
        btnInterestMaintenanceDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInterestMaintenanceDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButtons.add(btnInterestMaintenanceDelete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTableFields.add(panButtons, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInterMaintenance_Table.add(panTableFields, gridBagConstraints);

        panTable_IM.setLayout(new java.awt.GridBagLayout());

        srpInterMaintenance.setMinimumSize(new java.awt.Dimension(470, 293));
        srpInterMaintenance.setPreferredSize(new java.awt.Dimension(470, 293));

        tblInterMaintenance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sl No.", "From Date", "To Date", "From Amount", "To Amount", "Interest"
            }
        ));
        tblInterMaintenance.setPreferredScrollableViewportSize(new java.awt.Dimension(450, 100));
        tblInterMaintenance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblInterMaintenanceMousePressed(evt);
            }
        });
        srpInterMaintenance.setViewportView(tblInterMaintenance);

        panTable_IM.add(srpInterMaintenance, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInterMaintenance_Table.add(panTable_IM, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInterMaintenance.add(panInterMaintenance_Table, gridBagConstraints);

        tabLimitAmount.addTab("Interest Maintenance", panInterMaintenance);

        panAccountDetails.setLayout(new java.awt.GridBagLayout());

        panIsRequired.setBorder(javax.swing.BorderFactory.createTitledBorder("Is Required ?"));
        panIsRequired.setLayout(new java.awt.GridBagLayout());

        chkChequeBookAD.setText("Cheque Book");
        chkChequeBookAD.setMinimumSize(new java.awt.Dimension(100, 21));
        chkChequeBookAD.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panIsRequired.add(chkChequeBookAD, gridBagConstraints);

        chkCustGrpLimitValidationAD.setText("Cust. Group Limit Validation");
        chkCustGrpLimitValidationAD.setMinimumSize(new java.awt.Dimension(181, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panIsRequired.add(chkCustGrpLimitValidationAD, gridBagConstraints);

        chkMobileBankingAD.setText("Mobile Banking");
        chkMobileBankingAD.setMinimumSize(new java.awt.Dimension(111, 21));
        chkMobileBankingAD.setPreferredSize(new java.awt.Dimension(111, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panIsRequired.add(chkMobileBankingAD, gridBagConstraints);

        chkNROStatusAD.setText("NRO Status");
        chkNROStatusAD.setMinimumSize(new java.awt.Dimension(90, 21));
        chkNROStatusAD.setPreferredSize(new java.awt.Dimension(90, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panIsRequired.add(chkNROStatusAD, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        panAccountDetails.add(panIsRequired, gridBagConstraints);

        panCardInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Card Info."));
        panCardInfo.setMaximumSize(new java.awt.Dimension(497, 100));
        panCardInfo.setMinimumSize(new java.awt.Dimension(497, 100));
        panCardInfo.setPreferredSize(new java.awt.Dimension(497, 100));
        panCardInfo.setLayout(new java.awt.GridBagLayout());

        chkATMAD.setText("ATM");
        chkATMAD.setMinimumSize(new java.awt.Dimension(50, 21));
        chkATMAD.setPreferredSize(new java.awt.Dimension(50, 21));
        chkATMAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkATMADActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panCardInfo.add(chkATMAD, gridBagConstraints);

        lblATMNoAD.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panCardInfo.add(lblATMNoAD, gridBagConstraints);

        txtATMNoAD.setMaxLength(16);
        txtATMNoAD.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panCardInfo.add(txtATMNoAD, gridBagConstraints);

        lblATMFromDateAD.setText("Valid From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panCardInfo.add(lblATMFromDateAD, gridBagConstraints);

        tdtATMFromDateAD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtATMFromDateADFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 4);
        panCardInfo.add(tdtATMFromDateAD, gridBagConstraints);

        lblATMToDateAD.setText("To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 2, 4);
        panCardInfo.add(lblATMToDateAD, gridBagConstraints);

        tdtATMToDateAD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtATMToDateADFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 4);
        panCardInfo.add(tdtATMToDateAD, gridBagConstraints);

        chkDebitAD.setText("Debit");
        chkDebitAD.setMinimumSize(new java.awt.Dimension(54, 21));
        chkDebitAD.setPreferredSize(new java.awt.Dimension(54, 21));
        chkDebitAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDebitADActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCardInfo.add(chkDebitAD, gridBagConstraints);

        lblDebitNoAD.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCardInfo.add(lblDebitNoAD, gridBagConstraints);

        txtDebitNoAD.setMaxLength(16);
        txtDebitNoAD.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCardInfo.add(txtDebitNoAD, gridBagConstraints);

        lblDebitFromDateAD.setText("Valid From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCardInfo.add(lblDebitFromDateAD, gridBagConstraints);

        tdtDebitFromDateAD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtDebitFromDateADFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        panCardInfo.add(tdtDebitFromDateAD, gridBagConstraints);

        lblDebitToDateAD.setText("To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panCardInfo.add(lblDebitToDateAD, gridBagConstraints);

        tdtDebitToDateAD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtDebitToDateADFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 4);
        panCardInfo.add(tdtDebitToDateAD, gridBagConstraints);

        chkCreditAD.setText("Credit");
        chkCreditAD.setMinimumSize(new java.awt.Dimension(59, 21));
        chkCreditAD.setPreferredSize(new java.awt.Dimension(59, 21));
        chkCreditAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCreditADActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 4, 4);
        panCardInfo.add(chkCreditAD, gridBagConstraints);

        lblCreditNoAD.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 4, 4);
        panCardInfo.add(lblCreditNoAD, gridBagConstraints);

        txtCreditNoAD.setMaxLength(16);
        txtCreditNoAD.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 4, 4);
        panCardInfo.add(txtCreditNoAD, gridBagConstraints);

        lblCreditFromDateAD.setText("Valid From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 4, 4);
        panCardInfo.add(lblCreditFromDateAD, gridBagConstraints);

        tdtCreditFromDateAD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtCreditFromDateADFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 4, 4);
        panCardInfo.add(tdtCreditFromDateAD, gridBagConstraints);

        lblCreditToDateAD.setText("To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 4, 4);
        panCardInfo.add(lblCreditToDateAD, gridBagConstraints);

        tdtCreditToDateAD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtCreditToDateADFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 4, 4);
        panCardInfo.add(tdtCreditToDateAD, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        panAccountDetails.add(panCardInfo, gridBagConstraints);

        panFlexiOpt.setBorder(javax.swing.BorderFactory.createTitledBorder("Mode of Operation"));
        panFlexiOpt.setMaximumSize(new java.awt.Dimension(633, 40));
        panFlexiOpt.setMinimumSize(new java.awt.Dimension(633, 40));
        panFlexiOpt.setPreferredSize(new java.awt.Dimension(633, 40));
        panFlexiOpt.setLayout(new java.awt.GridBagLayout());

        cboSettlementModeAI.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panFlexiOpt.add(cboSettlementModeAI, gridBagConstraints);

        lblSettlementModeAI.setText("Settlement Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 225, 4, 4);
        panFlexiOpt.add(lblSettlementModeAI, gridBagConstraints);

        lblOpModeAI.setText("Mode of Operation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panFlexiOpt.add(lblOpModeAI, gridBagConstraints);

        cboOpModeAI.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panFlexiOpt.add(cboOpModeAI, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        panAccountDetails.add(panFlexiOpt, gridBagConstraints);

        panDiffCharges.setBorder(javax.swing.BorderFactory.createTitledBorder("Different Charges"));
        panDiffCharges.setMaximumSize(new java.awt.Dimension(483, 220));
        panDiffCharges.setMinimumSize(new java.awt.Dimension(483, 220));
        panDiffCharges.setPreferredSize(new java.awt.Dimension(483, 220));
        panDiffCharges.setLayout(new java.awt.GridBagLayout());

        lblAccOpeningChrgAD.setText("Account Opening");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panDiffCharges.add(lblAccOpeningChrgAD, gridBagConstraints);

        txtAccOpeningChrgAD.setMaxLength(32);
        txtAccOpeningChrgAD.setMinimumSize(new java.awt.Dimension(100, 21));
        txtAccOpeningChrgAD.setValidation(new com.see.truetransact.uivalidation.CurrencyValidation());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panDiffCharges.add(txtAccOpeningChrgAD, gridBagConstraints);

        lblMisServiceChrgAD.setText("Misc. Service");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblMisServiceChrgAD, gridBagConstraints);

        txtMisServiceChrgAD.setMaxLength(32);
        txtMisServiceChrgAD.setMinimumSize(new java.awt.Dimension(100, 21));
        txtMisServiceChrgAD.setValidation(new com.see.truetransact.uivalidation.CurrencyValidation());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(txtMisServiceChrgAD, gridBagConstraints);

        chkStopPmtChrgAD.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkStopPmtChrgAD.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(chkStopPmtChrgAD, gridBagConstraints);

        lblChequeBookChrgAD.setText("Cheque Book");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblChequeBookChrgAD, gridBagConstraints);

        txtChequeBookChrgAD.setMaxLength(32);
        txtChequeBookChrgAD.setMinimumSize(new java.awt.Dimension(100, 21));
        txtChequeBookChrgAD.setValidation(new com.see.truetransact.uivalidation.CurrencyValidation());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(txtChequeBookChrgAD, gridBagConstraints);

        chkChequeRetChrgAD.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkChequeRetChrgAD.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(chkChequeRetChrgAD, gridBagConstraints);

        lblFolioChrgAD.setText("Folio");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblFolioChrgAD, gridBagConstraints);

        txtFolioChrgAD.setMaxLength(32);
        txtFolioChrgAD.setMinimumSize(new java.awt.Dimension(100, 21));
        txtFolioChrgAD.setValidation(new com.see.truetransact.uivalidation.CurrencyValidation());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(txtFolioChrgAD, gridBagConstraints);

        chkInopChrgAD.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkInopChrgAD.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(chkInopChrgAD, gridBagConstraints);

        lblAccCloseChrgAD.setText("Account Closing");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblAccCloseChrgAD, gridBagConstraints);

        txtAccCloseChrgAD.setMaxLength(32);
        txtAccCloseChrgAD.setMinimumSize(new java.awt.Dimension(100, 21));
        txtAccCloseChrgAD.setValidation(new com.see.truetransact.uivalidation.CurrencyValidation());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(txtAccCloseChrgAD, gridBagConstraints);

        chkStmtChrgAD.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkStmtChrgAD.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(chkStmtChrgAD, gridBagConstraints);

        lblStmtFreqAD.setText("Statement Frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panDiffCharges.add(lblStmtFreqAD, gridBagConstraints);

        cboStmtFreqAD.setMinimumSize(new java.awt.Dimension(75, 21));
        cboStmtFreqAD.setPreferredSize(new java.awt.Dimension(75, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 2, 4);
        panDiffCharges.add(cboStmtFreqAD, gridBagConstraints);

        chkNonMainMinBalChrgAD.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkNonMainMinBalChrgAD.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkNonMainMinBalChrgAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNonMainMinBalChrgADActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(chkNonMainMinBalChrgAD, gridBagConstraints);

        lblExcessWithChrgAD.setText("Excess Withdrawal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblExcessWithChrgAD, gridBagConstraints);

        txtExcessWithChrgAD.setMaxLength(32);
        txtExcessWithChrgAD.setMinimumSize(new java.awt.Dimension(100, 21));
        txtExcessWithChrgAD.setValidation(new com.see.truetransact.uivalidation.CurrencyValidation());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(txtExcessWithChrgAD, gridBagConstraints);

        chkABBChrgAD.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkABBChrgAD.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkABBChrgAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkABBChrgADActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(chkABBChrgAD, gridBagConstraints);

        chkNPAChrgAD.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chkNPAChrgAD.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkNPAChrgAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNPAChrgADActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(chkNPAChrgAD, gridBagConstraints);

        lblABBChrgAD.setText("ABB");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblABBChrgAD, gridBagConstraints);

        txtABBChrgAD.setMaxLength(32);
        txtABBChrgAD.setMinimumSize(new java.awt.Dimension(100, 21));
        txtABBChrgAD.setValidation(new com.see.truetransact.uivalidation.CurrencyValidation());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(txtABBChrgAD, gridBagConstraints);

        lblNPAChrgAD.setText("NPA Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblNPAChrgAD, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(tdtNPAChrgAD, gridBagConstraints);

        lblMinActBalanceAD.setText("Minimum Account Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblMinActBalanceAD, gridBagConstraints);

        txtMinActBalanceAD.setMaxLength(32);
        txtMinActBalanceAD.setMinimumSize(new java.awt.Dimension(100, 21));
        txtMinActBalanceAD.setValidation(new com.see.truetransact.uivalidation.CurrencyValidation());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(txtMinActBalanceAD, gridBagConstraints);

        lblStopPayment.setText("Stop Payment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblStopPayment, gridBagConstraints);

        lblChequeReturn.setText("Cheque Return");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblChequeReturn, gridBagConstraints);

        lblCollectInoperative.setText("Collect Inoperative");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblCollectInoperative, gridBagConstraints);

        lblStatement.setText("Statement");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblStatement, gridBagConstraints);

        lblNonMaintenance.setText("Non-maintenance of Min Bal.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblNonMaintenance, gridBagConstraints);

        lblABB.setText("ABB");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblABB, gridBagConstraints);

        lblNPA.setText("NPA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panDiffCharges.add(lblNPA, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        panAccountDetails.add(panDiffCharges, gridBagConstraints);

        panLastIntApp.setBorder(javax.swing.BorderFactory.createTitledBorder("Last Interest Application Date"));
        panLastIntApp.setPreferredSize(new java.awt.Dimension(430, 49));
        panLastIntApp.setLayout(new java.awt.GridBagLayout());

        lblDebit.setText("Debit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panLastIntApp.add(lblDebit, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panLastIntApp.add(tdtDebit, gridBagConstraints);

        lblCredit.setText("Credit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panLastIntApp.add(lblCredit, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panLastIntApp.add(tdtCredit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        panAccountDetails.add(panLastIntApp, gridBagConstraints);

        panRatesIN.setBorder(javax.swing.BorderFactory.createTitledBorder("Rate Details"));
        panRatesIN.setLayout(new java.awt.GridBagLayout());

        lblRateCodeIN.setText("Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panRatesIN.add(lblRateCodeIN, gridBagConstraints);

        lblRateCodeValueIN.setText("100");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panRatesIN.add(lblRateCodeValueIN, gridBagConstraints);

        lblCrInterestRateIN.setText("Credit Interest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panRatesIN.add(lblCrInterestRateIN, gridBagConstraints);

        lblCrInterestRateValueIN.setText("10%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panRatesIN.add(lblCrInterestRateValueIN, gridBagConstraints);

        lblDrInterestRateIN.setText("Debit Interest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panRatesIN.add(lblDrInterestRateIN, gridBagConstraints);

        lblDrInterestRateValueIN.setText("10%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panRatesIN.add(lblDrInterestRateValueIN, gridBagConstraints);

        lblPenalInterestRateIN.setText("Penal Interest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panRatesIN.add(lblPenalInterestRateIN, gridBagConstraints);

        lblPenalInterestValueIN.setText("10%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panRatesIN.add(lblPenalInterestValueIN, gridBagConstraints);

        lblAgClearingIN.setText("Ag Clearing");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panRatesIN.add(lblAgClearingIN, gridBagConstraints);

        lblAgClearingValueIN.setText("10%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        panRatesIN.add(lblAgClearingValueIN, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        panAccountDetails.add(panRatesIN, gridBagConstraints);

        panInterestPayableIN.setBorder(javax.swing.BorderFactory.createTitledBorder("Interest"));
        panInterestPayableIN.setMaximumSize(new java.awt.Dimension(394, 36));
        panInterestPayableIN.setMinimumSize(new java.awt.Dimension(394, 36));
        panInterestPayableIN.setPreferredSize(new java.awt.Dimension(394, 36));
        panInterestPayableIN.setLayout(new java.awt.GridBagLayout());

        chkPayIntOnCrBalIN.setText("Pay Interest on Credit Balanace");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 2);
        panInterestPayableIN.add(chkPayIntOnCrBalIN, gridBagConstraints);

        chkPayIntOnDrBalIN.setText("Receive Interest on Debit Balanace");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 4);
        panInterestPayableIN.add(chkPayIntOnDrBalIN, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        panAccountDetails.add(panInterestPayableIN, gridBagConstraints);

        panAcctInfo_ODetails.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panAcctInfo_ODetails.setLayout(new java.awt.GridBagLayout());

        lblProdID_ODetails.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctInfo_ODetails.add(lblProdID_ODetails, gridBagConstraints);

        lblProdID_Disp_ODetails.setMaximumSize(new java.awt.Dimension(100, 15));
        lblProdID_Disp_ODetails.setMinimumSize(new java.awt.Dimension(100, 15));
        lblProdID_Disp_ODetails.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctInfo_ODetails.add(lblProdID_Disp_ODetails, gridBagConstraints);

        lblAcctHead_ODetails.setText("Account Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 65, 4, 4);
        panAcctInfo_ODetails.add(lblAcctHead_ODetails, gridBagConstraints);

        lblAcctHead_Disp_ODetails.setMaximumSize(new java.awt.Dimension(110, 15));
        lblAcctHead_Disp_ODetails.setMinimumSize(new java.awt.Dimension(110, 15));
        lblAcctHead_Disp_ODetails.setPreferredSize(new java.awt.Dimension(110, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctInfo_ODetails.add(lblAcctHead_Disp_ODetails, gridBagConstraints);

        lblAcctNo_ODetails.setText("Account No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 56, 4, 4);
        panAcctInfo_ODetails.add(lblAcctNo_ODetails, gridBagConstraints);

        lblAcctNo_Disp_ODetails.setMaximumSize(new java.awt.Dimension(110, 15));
        lblAcctNo_Disp_ODetails.setMinimumSize(new java.awt.Dimension(110, 15));
        lblAcctNo_Disp_ODetails.setPreferredSize(new java.awt.Dimension(110, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctInfo_ODetails.add(lblAcctNo_Disp_ODetails, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panAccountDetails.add(panAcctInfo_ODetails, gridBagConstraints);

        tabLimitAmount.addTab("Other Details", panAccountDetails);

        panDocumentDetails.setMinimumSize(new java.awt.Dimension(795, 550));
        panDocumentDetails.setPreferredSize(new java.awt.Dimension(795, 550));
        panDocumentDetails.setLayout(new java.awt.GridBagLayout());

        panTable_DocumentDetails.setMaximumSize(new java.awt.Dimension(425, 320));
        panTable_DocumentDetails.setMinimumSize(new java.awt.Dimension(425, 320));
        panTable_DocumentDetails.setPreferredSize(new java.awt.Dimension(425, 320));
        panTable_DocumentDetails.setLayout(new java.awt.GridBagLayout());

        srpTable_DocumentDetails.setMaximumSize(new java.awt.Dimension(425, 320));
        srpTable_DocumentDetails.setMinimumSize(new java.awt.Dimension(425, 320));
        srpTable_DocumentDetails.setPreferredSize(new java.awt.Dimension(425, 320));

        tblTable_DocumentDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTable_DocumentDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblTable_DocumentDetailsMousePressed(evt);
            }
        });
        srpTable_DocumentDetails.setViewportView(tblTable_DocumentDetails);

        panTable_DocumentDetails.add(srpTable_DocumentDetails, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDocumentDetails.add(panTable_DocumentDetails, gridBagConstraints);

        panAcctDetails_DocumentDetails.setMinimumSize(new java.awt.Dimension(685, 23));
        panAcctDetails_DocumentDetails.setPreferredSize(new java.awt.Dimension(685, 23));
        panAcctDetails_DocumentDetails.setLayout(new java.awt.GridBagLayout());

        lblProdID_DocumentDetails.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctDetails_DocumentDetails.add(lblProdID_DocumentDetails, gridBagConstraints);

        lblProdID_Disp_DocumentDetails.setMaximumSize(new java.awt.Dimension(100, 15));
        lblProdID_Disp_DocumentDetails.setMinimumSize(new java.awt.Dimension(100, 15));
        lblProdID_Disp_DocumentDetails.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctDetails_DocumentDetails.add(lblProdID_Disp_DocumentDetails, gridBagConstraints);

        lblAcctHead_DocumentDetails.setText("Account Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 65, 4, 4);
        panAcctDetails_DocumentDetails.add(lblAcctHead_DocumentDetails, gridBagConstraints);

        lblAcctHead_Disp_DocumentDetails.setMaximumSize(new java.awt.Dimension(110, 15));
        lblAcctHead_Disp_DocumentDetails.setMinimumSize(new java.awt.Dimension(110, 15));
        lblAcctHead_Disp_DocumentDetails.setPreferredSize(new java.awt.Dimension(110, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctDetails_DocumentDetails.add(lblAcctHead_Disp_DocumentDetails, gridBagConstraints);

        lblAcctNo_DocumentDetails.setText("Account No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 56, 4, 4);
        panAcctDetails_DocumentDetails.add(lblAcctNo_DocumentDetails, gridBagConstraints);

        lblAcctNo_Disp_DocumentDetails.setMaximumSize(new java.awt.Dimension(110, 15));
        lblAcctNo_Disp_DocumentDetails.setMinimumSize(new java.awt.Dimension(110, 15));
        lblAcctNo_Disp_DocumentDetails.setPreferredSize(new java.awt.Dimension(110, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctDetails_DocumentDetails.add(lblAcctNo_Disp_DocumentDetails, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDocumentDetails.add(panAcctDetails_DocumentDetails, gridBagConstraints);

        panTabDetails_DocumentDetails.setMaximumSize(new java.awt.Dimension(260, 350));
        panTabDetails_DocumentDetails.setMinimumSize(new java.awt.Dimension(260, 350));
        panTabDetails_DocumentDetails.setPreferredSize(new java.awt.Dimension(260, 350));
        panTabDetails_DocumentDetails.setLayout(new java.awt.GridBagLayout());

        lblDocType_DocumentDetails.setText("Document Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblDocType_DocumentDetails, gridBagConstraints);

        lblDocType_Disp_DocumentDetails.setMaximumSize(new java.awt.Dimension(100, 15));
        lblDocType_Disp_DocumentDetails.setMinimumSize(new java.awt.Dimension(100, 15));
        lblDocType_Disp_DocumentDetails.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblDocType_Disp_DocumentDetails, gridBagConstraints);

        lblDocNo_DocumentDetails.setText("Document Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblDocNo_DocumentDetails, gridBagConstraints);

        lblDocNo_Disp_DocumentDetails.setMaximumSize(new java.awt.Dimension(100, 15));
        lblDocNo_Disp_DocumentDetails.setMinimumSize(new java.awt.Dimension(100, 15));
        lblDocNo_Disp_DocumentDetails.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblDocNo_Disp_DocumentDetails, gridBagConstraints);

        lblDocDesc_DocumentDetails.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblDocDesc_DocumentDetails, gridBagConstraints);

        lblDocDesc_Disp_DocumentDetails.setMaximumSize(new java.awt.Dimension(100, 15));
        lblDocDesc_Disp_DocumentDetails.setMinimumSize(new java.awt.Dimension(100, 15));
        lblDocDesc_Disp_DocumentDetails.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblDocDesc_Disp_DocumentDetails, gridBagConstraints);

        lblSubmitted_DocumentDetails.setText("Is Submitted?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblSubmitted_DocumentDetails, gridBagConstraints);

        panSubmitted_DocumentDetails.setLayout(new java.awt.GridBagLayout());

        rdoIsSubmitted_DocumentDetails.add(rdoYes_DocumentDetails);
        rdoYes_DocumentDetails.setText("Yes");
        rdoYes_DocumentDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoYes_DocumentDetailsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        panSubmitted_DocumentDetails.add(rdoYes_DocumentDetails, gridBagConstraints);

        rdoIsSubmitted_DocumentDetails.add(rdoNo_DocumentDetails);
        rdoNo_DocumentDetails.setText("No");
        rdoNo_DocumentDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoNo_DocumentDetailsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        panSubmitted_DocumentDetails.add(rdoNo_DocumentDetails, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(panSubmitted_DocumentDetails, gridBagConstraints);

        lblSubmitDate_DocumentDetails.setText("Submitted Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblSubmitDate_DocumentDetails, gridBagConstraints);

        tdtSubmitDate_DocumentDetails.setMaximumSize(new java.awt.Dimension(100, 21));
        tdtSubmitDate_DocumentDetails.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtSubmitDate_DocumentDetails.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtSubmitDate_DocumentDetails.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtSubmitDate_DocumentDetailsFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(tdtSubmitDate_DocumentDetails, gridBagConstraints);

        lblRemarks_DocumentDetails.setText("Remarks");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblRemarks_DocumentDetails, gridBagConstraints);

        txtRemarks_DocumentDetails.setMaximumSize(new java.awt.Dimension(100, 21));
        txtRemarks_DocumentDetails.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(txtRemarks_DocumentDetails, gridBagConstraints);

        btnSave_DocumentDetails.setText("Save");
        btnSave_DocumentDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave_DocumentDetailsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(btnSave_DocumentDetails, gridBagConstraints);

        lblMandatory_DOC.setText(" Is Mandatory?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblMandatory_DOC, gridBagConstraints);

        panMandatory_DOC.setLayout(new java.awt.GridBagLayout());

        rdoMandatory_DOC.add(rdoYes_Mandatory_DOC);
        rdoYes_Mandatory_DOC.setText("Yes");
        panMandatory_DOC.add(rdoYes_Mandatory_DOC, new java.awt.GridBagConstraints());

        rdoMandatory_DOC.add(rdoNo_Mandatory_DOC);
        rdoNo_Mandatory_DOC.setText("No");
        panMandatory_DOC.add(rdoNo_Mandatory_DOC, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(panMandatory_DOC, gridBagConstraints);

        lblExecuted_DOC.setText(" Is Executed?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblExecuted_DOC, gridBagConstraints);

        panExecuted_DOC.setLayout(new java.awt.GridBagLayout());

        rdoExecuted_DOC.add(rdoYes_Executed_DOC);
        rdoYes_Executed_DOC.setText("Yes");
        rdoYes_Executed_DOC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoYes_Executed_DOCActionPerformed(evt);
            }
        });
        panExecuted_DOC.add(rdoYes_Executed_DOC, new java.awt.GridBagConstraints());

        rdoExecuted_DOC.add(rdoNo_Executed_DOC);
        rdoNo_Executed_DOC.setText("No");
        rdoNo_Executed_DOC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoNo_Executed_DOCActionPerformed(evt);
            }
        });
        panExecuted_DOC.add(rdoNo_Executed_DOC, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(panExecuted_DOC, gridBagConstraints);

        lblExecuteDate_DOC.setText("Executed Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblExecuteDate_DOC, gridBagConstraints);

        tdtExecuteDate_DOC.setMaximumSize(new java.awt.Dimension(100, 21));
        tdtExecuteDate_DOC.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtExecuteDate_DOC.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(tdtExecuteDate_DOC, gridBagConstraints);

        lblExpiryDate_DOC.setText("Expiry Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(lblExpiryDate_DOC, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panTabDetails_DocumentDetails.add(tdtExpiryDate_DOC, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDocumentDetails.add(panTabDetails_DocumentDetails, gridBagConstraints);

        tabLimitAmount.addTab("Document Details", panDocumentDetails);

        panClassDetails.setLayout(new java.awt.GridBagLayout());

        panClassDetails_Acc.setLayout(new java.awt.GridBagLayout());

        panProd_CD.setLayout(new java.awt.GridBagLayout());

        lblProID_CD.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProd_CD.add(lblProID_CD, gridBagConstraints);

        lblSanctionNo1.setText("Sanction No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProd_CD.add(lblSanctionNo1, gridBagConstraints);

        lblSanctionNo2.setMinimumSize(new java.awt.Dimension(100, 21));
        lblSanctionNo2.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProd_CD.add(lblSanctionNo2, gridBagConstraints);

        lblProID_CD_Disp.setText("P1001");
        lblProID_CD_Disp.setMaximumSize(new java.awt.Dimension(100, 15));
        lblProID_CD_Disp.setMinimumSize(new java.awt.Dimension(100, 15));
        lblProID_CD_Disp.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProd_CD.add(lblProID_CD_Disp, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 55, 4, 4);
        panClassDetails_Acc.add(panProd_CD, gridBagConstraints);

        PanAcc_CD.setLayout(new java.awt.GridBagLayout());

        lblAccHead_CD.setText("Account Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        PanAcc_CD.add(lblAccHead_CD, gridBagConstraints);

        lblAccHead_CD_2.setText("SB Saving Bank Account");
        lblAccHead_CD_2.setMinimumSize(new java.awt.Dimension(139, 21));
        lblAccHead_CD_2.setPreferredSize(new java.awt.Dimension(139, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        PanAcc_CD.add(lblAccHead_CD_2, gridBagConstraints);

        lblAccNo_CD.setText("Account No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        PanAcc_CD.add(lblAccNo_CD, gridBagConstraints);

        lblAccNo_CD_2.setText("4325");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        PanAcc_CD.add(lblAccNo_CD_2, gridBagConstraints);

        lblSanctionDate1.setText("Sanction Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        PanAcc_CD.add(lblSanctionDate1, gridBagConstraints);

        lblSanctionDate2.setMinimumSize(new java.awt.Dimension(100, 21));
        lblSanctionDate2.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        PanAcc_CD.add(lblSanctionDate2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 48, 4, 4);
        panClassDetails_Acc.add(PanAcc_CD, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panClassDetails.add(panClassDetails_Acc, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panClassDetails.add(sptClassDetails, gridBagConstraints);

        panClassDetails_Details.setLayout(new java.awt.GridBagLayout());

        panCode.setLayout(new java.awt.GridBagLayout());

        lblCommodityCode.setText("Commodity Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(lblCommodityCode, gridBagConstraints);

        cboCommodityCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboCommodityCode.setMinimumSize(new java.awt.Dimension(180, 21));
        cboCommodityCode.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(cboCommodityCode, gridBagConstraints);

        lblGuaranteeCoverCode.setText("Guarantee Cover Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(lblGuaranteeCoverCode, gridBagConstraints);

        cboGuaranteeCoverCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboGuaranteeCoverCode.setMinimumSize(new java.awt.Dimension(180, 21));
        cboGuaranteeCoverCode.setPopupWidth(120);
        cboGuaranteeCoverCode.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(cboGuaranteeCoverCode, gridBagConstraints);

        lblSectorCode1.setText("Sector Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(lblSectorCode1, gridBagConstraints);

        cboSectorCode1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboSectorCode1.setMinimumSize(new java.awt.Dimension(180, 21));
        cboSectorCode1.setPopupWidth(130);
        cboSectorCode1.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(cboSectorCode1, gridBagConstraints);

        lblHealthCode.setText("Health Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(lblHealthCode, gridBagConstraints);

        cboHealthCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboHealthCode.setMinimumSize(new java.awt.Dimension(180, 21));
        cboHealthCode.setPopupWidth(200);
        cboHealthCode.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(cboHealthCode, gridBagConstraints);

        lblTypeFacility.setText("Type of Facility");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(lblTypeFacility, gridBagConstraints);

        cboTypeFacility.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboTypeFacility.setMinimumSize(new java.awt.Dimension(180, 21));
        cboTypeFacility.setPopupWidth(300);
        cboTypeFacility.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(cboTypeFacility, gridBagConstraints);

        lblDistrictCode.setText("District Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(lblDistrictCode, gridBagConstraints);

        cboDistrictCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboDistrictCode.setMinimumSize(new java.awt.Dimension(180, 21));
        cboDistrictCode.setPopupWidth(120);
        cboDistrictCode.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(cboDistrictCode, gridBagConstraints);

        lblPurposeCode.setText("Purpose Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(lblPurposeCode, gridBagConstraints);

        cboPurposeCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboPurposeCode.setMinimumSize(new java.awt.Dimension(180, 21));
        cboPurposeCode.setPopupWidth(230);
        cboPurposeCode.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(cboPurposeCode, gridBagConstraints);

        lblIndusCode.setText("Industry Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(lblIndusCode, gridBagConstraints);

        cboIndusCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboIndusCode.setMinimumSize(new java.awt.Dimension(180, 21));
        cboIndusCode.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(cboIndusCode, gridBagConstraints);

        lblWeakerSectionCode.setText(" Weaker Section Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(lblWeakerSectionCode, gridBagConstraints);

        cboWeakerSectionCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboWeakerSectionCode.setMinimumSize(new java.awt.Dimension(180, 21));
        cboWeakerSectionCode.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode.add(cboWeakerSectionCode, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panClassDetails_Details.add(panCode, gridBagConstraints);

        sptClassification_vertical.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panClassDetails_Details.add(sptClassification_vertical, gridBagConstraints);

        panCode2.setLayout(new java.awt.GridBagLayout());

        lbl20Code.setText("20 Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(lbl20Code, gridBagConstraints);

        lblRefinancingInsti.setText("Refinancing Institution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(lblRefinancingInsti, gridBagConstraints);

        cboRefinancingInsti.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboRefinancingInsti.setMinimumSize(new java.awt.Dimension(180, 21));
        cboRefinancingInsti.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(cboRefinancingInsti, gridBagConstraints);

        lblGovtSchemeCode.setText("Govt. Scheme Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(lblGovtSchemeCode, gridBagConstraints);

        cboGovtSchemeCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboGovtSchemeCode.setMinimumSize(new java.awt.Dimension(180, 21));
        cboGovtSchemeCode.setPreferredSize(new java.awt.Dimension(180, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(cboGovtSchemeCode, gridBagConstraints);

        lblAssetCode.setText("Asset Status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(lblAssetCode, gridBagConstraints);

        cboAssetCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboAssetCode.setMinimumSize(new java.awt.Dimension(180, 21));
        cboAssetCode.setPopupWidth(115);
        cboAssetCode.setPreferredSize(new java.awt.Dimension(180, 21));
        cboAssetCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboAssetCodeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(cboAssetCode, gridBagConstraints);

        lblNPADate.setText("NPA Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(lblNPADate, gridBagConstraints);

        tdtNPADate.setMinimumSize(new java.awt.Dimension(180, 21));
        tdtNPADate.setPreferredSize(new java.awt.Dimension(180, 21));
        tdtNPADate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtNPADateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(tdtNPADate, gridBagConstraints);

        lblDirectFinance.setText("Direct Finance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(lblDirectFinance, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(chkDirectFinance, gridBagConstraints);

        lblECGC.setText("ECGC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(lblECGC, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(chkECGC, gridBagConstraints);

        lblPrioritySector.setText("Priority Sector");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(lblPrioritySector, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(chkPrioritySector, gridBagConstraints);

        lblDocumentcomplete.setText("Document Complete");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(lblDocumentcomplete, gridBagConstraints);

        chkDocumentcomplete.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkDocumentcompleteStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(chkDocumentcomplete, gridBagConstraints);

        lblQIS.setText("QIS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(lblQIS, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCode2.add(chkQIS, gridBagConstraints);

        cbo20Code.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cbo20Code.setMinimumSize(new java.awt.Dimension(180, 21));
        cbo20Code.setPopupWidth(200);
        cbo20Code.setPreferredSize(new java.awt.Dimension(180, 21));
        panCode2.add(cbo20Code, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panClassDetails_Details.add(panCode2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panClassDetails.add(panClassDetails_Details, gridBagConstraints);

        tabLimitAmount.addTab("Classification Details", panClassDetails);

        panCaseDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panCaseDetails.setMinimumSize(new java.awt.Dimension(820, 550));
        panCaseDetails.setPreferredSize(new java.awt.Dimension(820, 550));
        panCaseDetails.setLayout(new java.awt.GridBagLayout());

        panSanctionDetails_Table1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panSanctionDetails_Table1.setMinimumSize(new java.awt.Dimension(775, 320));
        panSanctionDetails_Table1.setPreferredSize(new java.awt.Dimension(775, 320));
        panSanctionDetails_Table1.setLayout(new java.awt.GridBagLayout());

        panCaseTableFields.setBorder(javax.swing.BorderFactory.createTitledBorder("Case Details"));
        panCaseTableFields.setMinimumSize(new java.awt.Dimension(800, 350));
        panCaseTableFields.setPreferredSize(new java.awt.Dimension(800, 350));
        panCaseTableFields.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSanctionDetails_Table1.add(panCaseTableFields, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCaseDetails.add(panSanctionDetails_Table1, gridBagConstraints);

        tabLimitAmount.addTab("Case Details", panCaseDetails);

        panRepaymentSchedule.setMinimumSize(new java.awt.Dimension(830, 556));
        panRepaymentSchedule.setPreferredSize(new java.awt.Dimension(830, 556));
        panRepaymentSchedule.setLayout(new java.awt.GridBagLayout());

        panRepayment.setMinimumSize(new java.awt.Dimension(580, 350));
        panRepayment.setPreferredSize(new java.awt.Dimension(580, 350));
        panRepayment.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panRepayment.add(sptRepatmentSchedule_Hori, gridBagConstraints);

        panRepaymentSchedule_Details.setMinimumSize(new java.awt.Dimension(596, 290));
        panRepaymentSchedule_Details.setPreferredSize(new java.awt.Dimension(596, 290));
        panRepaymentSchedule_Details.setLayout(new java.awt.GridBagLayout());

        panSchedule_RS.setMinimumSize(new java.awt.Dimension(265, 280));
        panSchedule_RS.setPreferredSize(new java.awt.Dimension(265, 280));
        panSchedule_RS.setLayout(new java.awt.GridBagLayout());

        lblScheduleNo.setText("Schedule No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(lblScheduleNo, gridBagConstraints);

        txtScheduleNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtScheduleNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtScheduleNoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(txtScheduleNo, gridBagConstraints);

        lblLaonAmt.setText("Loan Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(lblLaonAmt, gridBagConstraints);

        txtLaonAmt.setMinimumSize(new java.awt.Dimension(100, 21));
        txtLaonAmt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLaonAmtFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(txtLaonAmt, gridBagConstraints);

        lblRepayType.setText("Repayment Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(lblRepayType, gridBagConstraints);

        cboRepayType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboRepayType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRepayType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRepayTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(cboRepayType, gridBagConstraints);

        lblRepayFreq_Repayment.setText("Repayment Frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(lblRepayFreq_Repayment, gridBagConstraints);

        cboRepayFreq_Repayment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---Select---" }));
        cboRepayFreq_Repayment.setMinimumSize(new java.awt.Dimension(100, 21));
        cboRepayFreq_Repayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRepayFreq_RepaymentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(cboRepayFreq_Repayment, gridBagConstraints);

        lblNoMonthsMora.setText("No. of Months for Moratorium");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(lblNoMonthsMora, gridBagConstraints);

        txtNoMonthsMora.setMinimumSize(new java.awt.Dimension(100, 21));
        txtNoMonthsMora.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNoMonthsMoraFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(txtNoMonthsMora, gridBagConstraints);

        txtNoInstall.setMinimumSize(new java.awt.Dimension(100, 21));
        txtNoInstall.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNoInstallFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(txtNoInstall, gridBagConstraints);

        lblNoInstall.setText("No. of Installments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(lblNoInstall, gridBagConstraints);

        tdtFirstInstall.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtFirstInstall.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtFirstInstall.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtFirstInstallFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(tdtFirstInstall, gridBagConstraints);

        lblFirstInstall.setText("First Installment Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(lblFirstInstall, gridBagConstraints);

        lblLastInstall.setText("Last Installment Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(lblLastInstall, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(tdtLastInstall, gridBagConstraints);

        lblDisbursement_Dt.setText("Disbursement Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(lblDisbursement_Dt, gridBagConstraints);

        tdtDisbursement_Dt.setMaximumSize(new java.awt.Dimension(100, 21));
        tdtDisbursement_Dt.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtDisbursement_Dt.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(tdtDisbursement_Dt, gridBagConstraints);

        tdtRepayFromDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtRepayFromDate.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtRepayFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtRepayFromDateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(tdtRepayFromDate, gridBagConstraints);

        lblRepayFromDate.setText("From Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSchedule_RS.add(lblRepayFromDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panRepaymentSchedule_Details.add(panSchedule_RS, gridBagConstraints);

        sptRepatmentSchedule_Vert.setOrientation(javax.swing.SwingConstants.VERTICAL);
        sptRepatmentSchedule_Vert.setMinimumSize(new java.awt.Dimension(2, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panRepaymentSchedule_Details.add(sptRepatmentSchedule_Vert, gridBagConstraints);

        panInstall_RS.setMinimumSize(new java.awt.Dimension(298, 280));
        panInstall_RS.setPreferredSize(new java.awt.Dimension(298, 280));
        panInstall_RS.setLayout(new java.awt.GridBagLayout());

        lblTotalBaseAmt.setText("Total Base Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(lblTotalBaseAmt, gridBagConstraints);

        txtTotalBaseAmt.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(txtTotalBaseAmt, gridBagConstraints);

        lblAmtPenulInstall.setText("Amount for Penultimate Installments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(lblAmtPenulInstall, gridBagConstraints);

        txtAmtPenulInstall.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(txtAmtPenulInstall, gridBagConstraints);

        lblAmtLastInstall.setText("Amount for Last Installment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(lblAmtLastInstall, gridBagConstraints);

        txtAmtLastInstall.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(txtAmtLastInstall, gridBagConstraints);

        lblTotalInstallAmt.setText("Total Installment Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(lblTotalInstallAmt, gridBagConstraints);

        txtTotalInstallAmt.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(txtTotalInstallAmt, gridBagConstraints);

        lblDoAddSIs.setText("Do You Want to Add SIs?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(lblDoAddSIs, gridBagConstraints);

        panDoAddSIs.setLayout(new java.awt.GridBagLayout());

        rdoDoAddSIs.add(rdoDoAddSIs_Yes);
        rdoDoAddSIs_Yes.setText("Yes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panDoAddSIs.add(rdoDoAddSIs_Yes, gridBagConstraints);

        rdoDoAddSIs.add(rdoDoAddSIs_No);
        rdoDoAddSIs_No.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panDoAddSIs.add(rdoDoAddSIs_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panInstall_RS.add(panDoAddSIs, gridBagConstraints);

        lblPostDatedCheque.setText("Post Dated Cheques Allowed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(lblPostDatedCheque, gridBagConstraints);

        panPostDatedCheque.setLayout(new java.awt.GridBagLayout());

        rdoPostDatedCheque.add(rdoPostDatedCheque_Yes);
        rdoPostDatedCheque_Yes.setText("Yes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panPostDatedCheque.add(rdoPostDatedCheque_Yes, gridBagConstraints);

        rdoPostDatedCheque.add(rdoPostDatedCheque_No);
        rdoPostDatedCheque_No.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panPostDatedCheque.add(rdoPostDatedCheque_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panInstall_RS.add(panPostDatedCheque, gridBagConstraints);

        panStatus_Repayment.setLayout(new java.awt.GridBagLayout());

        rdoActive_Repayment.setText("Active");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panStatus_Repayment.add(rdoActive_Repayment, gridBagConstraints);

        rdoInActive_Repayment.setText("Inactive");
        rdoInActive_Repayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoInActive_RepaymentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panStatus_Repayment.add(rdoInActive_Repayment, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panInstall_RS.add(panStatus_Repayment, gridBagConstraints);

        lblStatus_Repayment.setText("Status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(lblStatus_Repayment, gridBagConstraints);

        lblRepayScheduleMode.setText("Schedule Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(lblRepayScheduleMode, gridBagConstraints);

        txtRepayScheduleMode.setMaximumSize(new java.awt.Dimension(100, 21));
        txtRepayScheduleMode.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(txtRepayScheduleMode, gridBagConstraints);

        txtInstallAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panInstall_RS.add(txtInstallAmount, gridBagConstraints);

        lblInstallmentAmount.setText("Installment Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panInstall_RS.add(lblInstallmentAmount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panRepaymentSchedule_Details.add(panInstall_RS, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panRepayment.add(panRepaymentSchedule_Details, gridBagConstraints);

        panProd_RS.setMinimumSize(new java.awt.Dimension(150, 23));
        panProd_RS.setPreferredSize(new java.awt.Dimension(150, 23));
        panProd_RS.setLayout(new java.awt.GridBagLayout());

        lblProdID_RS.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProd_RS.add(lblProdID_RS, gridBagConstraints);

        lblProdID_RS_Disp.setText("P1000");
        lblProdID_RS_Disp.setMaximumSize(new java.awt.Dimension(100, 15));
        lblProdID_RS_Disp.setMinimumSize(new java.awt.Dimension(100, 15));
        lblProdID_RS_Disp.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProd_RS.add(lblProdID_RS_Disp, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 100, 4, 4);
        panRepayment.add(panProd_RS, gridBagConstraints);

        panAcc_RS.setMinimumSize(new java.awt.Dimension(190, 42));
        panAcc_RS.setPreferredSize(new java.awt.Dimension(190, 42));
        panAcc_RS.setLayout(new java.awt.GridBagLayout());

        lblAccHead_RS.setText("Account Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcc_RS.add(lblAccHead_RS, gridBagConstraints);

        lblAccHead_RS_2.setMaximumSize(new java.awt.Dimension(100, 16));
        lblAccHead_RS_2.setMinimumSize(new java.awt.Dimension(100, 16));
        lblAccHead_RS_2.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcc_RS.add(lblAccHead_RS_2, gridBagConstraints);

        lblAccNo_RS.setText("Account No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcc_RS.add(lblAccNo_RS, gridBagConstraints);

        lblAccNo_RS_2.setText("4321");
        lblAccNo_RS_2.setMaximumSize(new java.awt.Dimension(100, 16));
        lblAccNo_RS_2.setMinimumSize(new java.awt.Dimension(100, 16));
        lblAccNo_RS_2.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcc_RS.add(lblAccNo_RS_2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 25, 4, 4);
        panRepayment.add(panAcc_RS, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panRepaymentSchedule.add(panRepayment, gridBagConstraints);

        panRepaymentToolBtns.setMinimumSize(new java.awt.Dimension(215, 33));
        panRepaymentToolBtns.setPreferredSize(new java.awt.Dimension(215, 33));
        panRepaymentToolBtns.setLayout(new java.awt.GridBagLayout());

        btnRepayment_New.setText("New");
        btnRepayment_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepayment_NewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panRepaymentToolBtns.add(btnRepayment_New, gridBagConstraints);

        btnRepayment_Save.setText("Save");
        btnRepayment_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepayment_SaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panRepaymentToolBtns.add(btnRepayment_Save, gridBagConstraints);

        btnRepayment_Delete.setText("Delete");
        btnRepayment_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepayment_DeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panRepaymentToolBtns.add(btnRepayment_Delete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panRepaymentSchedule.add(panRepaymentToolBtns, gridBagConstraints);

        panRepaymentCTable.setMinimumSize(new java.awt.Dimension(230, 395));
        panRepaymentCTable.setPreferredSize(new java.awt.Dimension(230, 395));
        panRepaymentCTable.setLayout(new java.awt.GridBagLayout());

        srpRepaymentCTable.setMinimumSize(new java.awt.Dimension(230, 360));
        srpRepaymentCTable.setPreferredSize(new java.awt.Dimension(230, 360));
        srpRepaymentCTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                srpRepaymentCTableMouseClicked(evt);
            }
        });

        tblRepaymentCTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sanction No.", "Loan Amount"
            }
        ));
        tblRepaymentCTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblRepaymentCTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblRepaymentCTableMousePressed(evt);
            }
        });
        srpRepaymentCTable.setViewportView(tblRepaymentCTable);

        panRepaymentCTable.add(srpRepaymentCTable, new java.awt.GridBagConstraints());

        btnEMI_Calculate.setText("Schedule Calculator");
        btnEMI_Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEMI_CalculateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panRepaymentCTable.add(btnEMI_Calculate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panRepaymentSchedule.add(panRepaymentCTable, gridBagConstraints);

        tabLimitAmount.addTab("Repayment Schedule", panRepaymentSchedule);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panTermLoan.add(tabLimitAmount, gridBagConstraints);

        getContentPane().add(panTermLoan, java.awt.BorderLayout.CENTER);

        mnuProcess.setText("Process");
        mnuProcess.setMinimumSize(new java.awt.Dimension(73, 19));

        mitNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mitNew.setMnemonic('N');
        mitNew.setText("New");
        mitNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitNewActionPerformed(evt);
            }
        });
        mnuProcess.add(mitNew);

        mitEdit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        mitEdit.setMnemonic('E');
        mitEdit.setText("Edit");
        mitEdit.setEnabled(false);
        mitEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitEditActionPerformed(evt);
            }
        });
        mnuProcess.add(mitEdit);

        mitDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        mitDelete.setMnemonic('D');
        mitDelete.setText("Delete");
        mitDelete.setEnabled(false);
        mitDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitDeleteActionPerformed(evt);
            }
        });
        mnuProcess.add(mitDelete);
        mnuProcess.add(sptProcess);

        mitSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mitSave.setMnemonic('S');
        mitSave.setText("Save");
        mitSave.setEnabled(false);
        mitSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitSaveActionPerformed(evt);
            }
        });
        mnuProcess.add(mitSave);

        mitCancel.setMnemonic('C');
        mitCancel.setText("Cancel");
        mitCancel.setEnabled(false);
        mitCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitCancelActionPerformed(evt);
            }
        });
        mnuProcess.add(mitCancel);
        mnuProcess.add(sptCancel);

        mitAuthorize.setText("Authorize");
        mitAuthorize.setEnabled(false);
        mitAuthorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitAuthorizeActionPerformed(evt);
            }
        });
        mnuProcess.add(mitAuthorize);

        mitException.setText("Exception");
        mitException.setEnabled(false);
        mitException.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitExceptionActionPerformed(evt);
            }
        });
        mnuProcess.add(mitException);

        mitReject.setText("Rejection");
        mitReject.setEnabled(false);
        mitReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitRejectActionPerformed(evt);
            }
        });
        mnuProcess.add(mitReject);
        mnuProcess.add(sptException);

        mitPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        mitPrint.setMnemonic('P');
        mitPrint.setText("Print");
        mitPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitPrintActionPerformed(evt);
            }
        });
        mnuProcess.add(mitPrint);
        mnuProcess.add(sptPrint);

        mitClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        mitClose.setMnemonic('l');
        mitClose.setText("Close");
        mitClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitCloseActionPerformed(evt);
            }
        });
        mnuProcess.add(mitClose);

        mbrTermLoan.add(mnuProcess);

        setJMenuBar(mbrTermLoan);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboSanRepaymentTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSanRepaymentTypeActionPerformed
        // TODO add your handling code here:

        String repayType = CommonUtil.convertObjToStr(cboSanRepaymentType.getSelectedItem());

        if (repayType.length() > 0) {
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
                if (repayType.equals("EMI")) {
                    // When the Repayment type is EMI the Repayment Frequency
                    // must be Monthly

                    cboRepayFreq.setSelectedItem("Monthly");
                } else if (repayType.equals("EQI")) {
                    // When the Repayment type is EQI the Repayment Frequency
                    // must be Quaterly
                    cboRepayFreq.setSelectedItem("Quaterly");
                } else if (repayType.equals("EHI")) {
                    cboRepayFreq.setSelectedItem("Half Yearly");
                } else if (repayType.equals("EYI")) {
                    cboRepayFreq.setSelectedItem("Yearly");
                } else if (repayType.equals("Uniform Principle EMI")) { //This block added by Rajesh
                    if (cboRepayFreq.getSelectedIndex() == 0) {	//bb1
                        cboRepayFreq.setSelectedItem("Monthly");
                    } else if (!observable.isDailyLoan()) {
                        cboRepayFreq.setSelectedItem(cboRepayFreq.getSelectedItem().toString());
                    } else if (observable.isDailyLoan()) {
                        cboRepayFreq.setSelectedItem("Monthly");
                    }
                    // if(cboRepayFreq.getSelectedItem().equals("") || cboRepayFreq.getSelectedItem() ==null)
                    //     cboRepayFreq.setSelectedItem("Monthly");
                }
            }
            if (repayType.equals("EMI") && observable.isChkDiminishing()) {
                chkDiminishing.setSelected(true);
            } else {
                chkDiminishing.setSelected(false);
            }
            if (cboSanRepaymentType.getSelectedItem().equals("User Defined") || cboRepayFreq.getSelectedItem().equals("User Defined")) {
                if ((cboSanRepaymentType.getSelectedItem().equals("User Defined") && cboRepayFreq.getSelectedItem().equals("User Defined"))) {
                    tdtTDate.setEnabled(false);
                    tdtFDate.setEnabled(false);
                    tdtFacility_Repay_Date.setEnabled(true);
                } else {
                    tdtTDate.setEnabled(true);
                    tdtFDate.setEnabled(true);
                }
            }
            System.out.println("OOOO ====" + observable.isDailyLoan() + "AAAA ===" + repayType);
            // if(observable.isDailyLoan() && repayType.equals("Uniform Principle EMI"))
            // {
            //    cboRepayType.setSelectedItem("User Defined");
            //   cboRepayFreq.setSelectedItem("User Defined");
            //  }
        }
    }//GEN-LAST:event_cboSanRepaymentTypeActionPerformed

    private void chkEligibleAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEligibleAmtActionPerformed
        // TODO add your handling code here:
        if (chkEligibleAmt.isSelected()) {
            tabLimitAmount.add(panCropTotalPanel, "Loan Amt Eligibility Details");
        } else {
            tabLimitAmount.remove(panCropTotalPanel);
        }

    }//GEN-LAST:event_chkEligibleAmtActionPerformed

    private void chkOTSFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkOTSFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_chkOTSFocusLost
    private void OTSActionPerformed() {
        if (chkOTS.isSelected()) {
            tabLimitAmount.add("OTS Details", panOTSDetails);
        } else {
            tabLimitAmount.remove(panOTSDetails);
        }
    }
    private void txtApplicationNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtApplicationNoFocusLost
        // TODO add your handling code here:
        // TODO add your handling code here:
        //Added By Suresh
        if (txtApplicationNo.getText().length() > 0) {
            HashMap executeMap = new HashMap();
            executeMap.put("APPLICATION_NO", txtApplicationNo.getText());
            List appLst = ClientUtil.executeQuery("getLoanApplicationNo", executeMap);
            if (appLst != null && appLst.size() > 0) {
                viewType = "APPLICATION_NO";
                executeMap = (HashMap) appLst.get(0);
                fillData(executeMap);
                appLst = null;
                executeMap = null;
            } else {
                ClientUtil.showAlertWindow("Application Number Already Sanctioned / Invalid Application Number !!! ");
                txtApplicationNo.setText("");
                return;
            }
        }
        HashMap purposeMap = new HashMap();
        String purpose = "";
        purposeMap.put("APPNO", txtApplicationNo.getText());
        List purposeList = ClientUtil.executeQuery("getSelectPurposeCodeFromLoanApplRegstr", purposeMap);
        //System.out.println("purposeList>>>>" + purposeList);
        if (purposeList != null && purposeList.size() > 0) {
            purposeMap = (HashMap) purposeList.get(0);
            purpose = CommonUtil.convertObjToStr(purposeMap.get("PURPOSE_CODE"));
        }
        //System.out.println("purpose>>>>" + purpose);
        if (purpose != null) {
            cboPurposeCode.setSelectedItem(purpose);
        }
    }//GEN-LAST:event_txtApplicationNoFocusLost

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponentsforCourtOrder() {
        java.awt.GridBagConstraints gridBagConstraints;

        cInternalFrame1 = new com.see.truetransact.uicomponent.CInternalFrame();
        panOTSDetails = new com.see.truetransact.uicomponent.CPanel();
        panFacilityDetails_Data1 = new com.see.truetransact.uicomponent.CPanel();
        panCourtOrder = new com.see.truetransact.uicomponent.CPanel();
        lblCourtOrderNo = new com.see.truetransact.uicomponent.CLabel();
        lblOTSDate = new com.see.truetransact.uicomponent.CLabel();
        lblOTSRate = new com.see.truetransact.uicomponent.CLabel();
        lblTotAmountDue = new com.see.truetransact.uicomponent.CLabel();
        lblSettlementAmt = new com.see.truetransact.uicomponent.CLabel();
        lblCourtOrderDate = new com.see.truetransact.uicomponent.CLabel();
        txtCourtOrderNo = new com.see.truetransact.uicomponent.CTextField();
        txtOTSRate = new com.see.truetransact.uicomponent.CTextField();
        tdtCourtOrderDate = new com.see.truetransact.uicomponent.CDateField();
        tdtOTSDate = new com.see.truetransact.uicomponent.CDateField();
        txtTotAmountDue = new com.see.truetransact.uicomponent.CTextField();
        txtSettlementAmt = new com.see.truetransact.uicomponent.CTextField();
        panAmountWrittenOff = new com.see.truetransact.uicomponent.CPanel();
        lblTotalAmountWrittenOff = new com.see.truetransact.uicomponent.CLabel();
        lblInterestAmount = new com.see.truetransact.uicomponent.CLabel();
        lblPrincipalAmount = new com.see.truetransact.uicomponent.CLabel();
        txtTotalAmountWrittenOff = new com.see.truetransact.uicomponent.CTextField();
        txtPenalInterestAmount = new com.see.truetransact.uicomponent.CTextField();
        txtInterestAmount = new com.see.truetransact.uicomponent.CTextField();
        txtPrincipalAmount = new com.see.truetransact.uicomponent.CTextField();
        lblPenalInterestAmount = new com.see.truetransact.uicomponent.CLabel();
        lblChargeAmount = new com.see.truetransact.uicomponent.CLabel();
        txtChargeAmount = new com.see.truetransact.uicomponent.CTextField();
        panCourtRepaymentDetails = new com.see.truetransact.uicomponent.CPanel();
        lblFirstInstallDt = new com.see.truetransact.uicomponent.CLabel();
        lblNoInstallment = new com.see.truetransact.uicomponent.CLabel();
        cLabel14 = new com.see.truetransact.uicomponent.CLabel();
        txtNoInstallment = new com.see.truetransact.uicomponent.CTextField();
        lblFreq = new com.see.truetransact.uicomponent.CLabel();
        lblInstallmentAmt = new com.see.truetransact.uicomponent.CLabel();
        txtInstallmentAmt = new com.see.truetransact.uicomponent.CTextField();
        panCourtInterest = new com.see.truetransact.uicomponent.CPanel();
        rdoRepaySingle_YES = new com.see.truetransact.uicomponent.CRadioButton();
        rdoRepaySingle_NO = new com.see.truetransact.uicomponent.CRadioButton();
        tdtFirstInstallDt = new com.see.truetransact.uicomponent.CDateField();
        tdtLastInstallDate = new com.see.truetransact.uicomponent.CDateField();
        lblPenal = new com.see.truetransact.uicomponent.CLabel();
        lblRepayRemarks = new com.see.truetransact.uicomponent.CLabel();
        lblLastInstallDate = new com.see.truetransact.uicomponent.CLabel();
        txtPenal = new com.see.truetransact.uicomponent.CTextField();
        txtRepayRemarks = new com.see.truetransact.uicomponent.CTextField();
        cboFreq = new com.see.truetransact.uicomponent.CComboBox();
        btnSavePan = new com.see.truetransact.uicomponent.CPanel();
        btnCourtOrderNew = new com.see.truetransact.uicomponent.CButton();
        btnCourtOrderSave = new com.see.truetransact.uicomponent.CButton();
        btnCourtOrderDel = new com.see.truetransact.uicomponent.CButton();

//        addWindowListener(new java.awt.event.WindowAdapter() {
//            public void windowClosing(java.awt.event.WindowEvent evt) {
//                exitForm(evt);
//            }
//        });

        cInternalFrame1.setMinimumSize(new java.awt.Dimension(850, 545));
        cInternalFrame1.setPreferredSize(new java.awt.Dimension(850, 545));
        cInternalFrame1.setVisible(true);
        panOTSDetails.setLayout(new java.awt.GridBagLayout());

        panOTSDetails.setMinimumSize(new java.awt.Dimension(795, 550));
        panOTSDetails.setPreferredSize(new java.awt.Dimension(795, 550));
        panFacilityDetails_Data1.setLayout(new java.awt.GridBagLayout());

        panFacilityDetails_Data1.setMaximumSize(new java.awt.Dimension(800, 590));
        panFacilityDetails_Data1.setMinimumSize(new java.awt.Dimension(800, 590));
        panFacilityDetails_Data1.setPreferredSize(new java.awt.Dimension(800, 590));
        panCourtOrder.setLayout(new java.awt.GridBagLayout());

        panCourtOrder.setBorder(new javax.swing.border.TitledBorder("Court Order Details"));
        panCourtOrder.setMinimumSize(new java.awt.Dimension(290, 200));
        panCourtOrder.setPreferredSize(new java.awt.Dimension(290, 200));
        lblCourtOrderNo.setText("Court/Arbitrator Order No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtOrder.add(lblCourtOrderNo, gridBagConstraints);

        lblOTSDate.setText("OTS Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtOrder.add(lblOTSDate, gridBagConstraints);

        lblOTSRate.setText("Rate of Interest to be applied");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        panCourtOrder.add(lblOTSRate, gridBagConstraints);

        lblTotAmountDue.setText("Total amount due");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCourtOrder.add(lblTotAmountDue, gridBagConstraints);

        lblSettlementAmt.setText("Settlement Amount ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCourtOrder.add(lblSettlementAmt, gridBagConstraints);

        lblCourtOrderDate.setText("Court/Arbitrator  Order Date ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtOrder.add(lblCourtOrderDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtOrder.add(txtCourtOrderNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtOrder.add(txtOTSRate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtOrder.add(tdtCourtOrderDate, gridBagConstraints);
        tdtCourtOrderDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtCourtOrderDateFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtOrder.add(tdtOTSDate, gridBagConstraints);
        tdtOTSDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtOTSDateFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtOrder.add(txtTotAmountDue, gridBagConstraints);
        txtTotAmountDue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTotAmountDueFocusLost(evt);
            }
        });
        //         txtTotAmountDue.addActionListener(new java.awt.event.ActionListener() {
        //            public void actionPerformed(java.awt.event.ActionEvent evt) {
        //                txtTotAmountDueActionPerformed(evt);
        //            }
        //        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtOrder.add(txtSettlementAmt, gridBagConstraints);
        txtSettlementAmt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSettlementAmtFocusLost(evt);
            }
        });
        //         txtSettlementAmt.addActionListener(new java.awt.event.ActionListener() {
        //            public void actionPerformed(java.awt.event.ActionEvent evt) {
        //                txtSettlementAmtActionPerformed(evt);
        //            }
        //        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        panFacilityDetails_Data1.add(panCourtOrder, gridBagConstraints);

        panAmountWrittenOff.setLayout(new java.awt.GridBagLayout());

        panAmountWrittenOff.setBorder(new javax.swing.border.TitledBorder("Amount Written Off"));
        panAmountWrittenOff.setMinimumSize(new java.awt.Dimension(290, 200));
        panAmountWrittenOff.setPreferredSize(new java.awt.Dimension(290, 200));
        lblTotalAmountWrittenOff.setText("Total  amount written off ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panAmountWrittenOff.add(lblTotalAmountWrittenOff, gridBagConstraints);

        lblInterestAmount.setText("Interest amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panAmountWrittenOff.add(lblInterestAmount, gridBagConstraints);

        lblPrincipalAmount.setText("Principal amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panAmountWrittenOff.add(lblPrincipalAmount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panAmountWrittenOff.add(txtTotalAmountWrittenOff, gridBagConstraints);
        txtNoInstallment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNoInstallmentActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panAmountWrittenOff.add(txtPenalInterestAmount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panAmountWrittenOff.add(txtInterestAmount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panAmountWrittenOff.add(txtPrincipalAmount, gridBagConstraints);

        lblPenalInterestAmount.setText("Penal interest amount ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panAmountWrittenOff.add(lblPenalInterestAmount, gridBagConstraints);

        lblChargeAmount.setText("Charges amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panAmountWrittenOff.add(lblChargeAmount, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panAmountWrittenOff.add(txtChargeAmount, gridBagConstraints);

        txtChargeAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtChargeAmountFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panFacilityDetails_Data1.add(panAmountWrittenOff, gridBagConstraints);

        panCourtRepaymentDetails.setLayout(new java.awt.GridBagLayout());

        panCourtRepaymentDetails.setBorder(new javax.swing.border.TitledBorder("Repayment Details"));
        panCourtRepaymentDetails.setMinimumSize(new java.awt.Dimension(450, 270));
        panCourtRepaymentDetails.setPreferredSize(new java.awt.Dimension(450, 270));
        lblFirstInstallDt.setText("First Installment  Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(lblFirstInstallDt, gridBagConstraints);

        lblNoInstallment.setText("No. of Installments ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(lblNoInstallment, gridBagConstraints);

        cLabel14.setText("Repayment  in  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(cLabel14, gridBagConstraints);

        txtNoInstallment.setMaximumSize(new java.awt.Dimension(100, 21));
        txtNoInstallment.setMinimumSize(new java.awt.Dimension(100, 21));
        txtNoInstallment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNoInstallmentActionPerformed(evt);
            }
        });
        txtNoInstallment.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNoInstallmentFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(txtNoInstallment, gridBagConstraints);

        lblFreq.setText("Frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCourtRepaymentDetails.add(lblFreq, gridBagConstraints);

        lblInstallmentAmt.setText("Installment amount ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(lblInstallmentAmt, gridBagConstraints);

        txtInstallmentAmt.setMaximumSize(new java.awt.Dimension(100, 21));
        txtInstallmentAmt.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(txtInstallmentAmt, gridBagConstraints);

        panCourtInterest.setLayout(new java.awt.GridBagLayout());

        panCourtInterest.setMaximumSize(new java.awt.Dimension(320, 21));
        panCourtInterest.setMinimumSize(new java.awt.Dimension(320, 21));
        panCourtInterest.setPreferredSize(new java.awt.Dimension(320, 21));
        rdoRepaySingle_YES.setText("Single Installment");
        rdoRepaySingle_YES.setMaximumSize(new java.awt.Dimension(130, 21));
        rdoRepaySingle_YES.setMinimumSize(new java.awt.Dimension(130, 21));
        rdoRepaySingle_YES.setPreferredSize(new java.awt.Dimension(130, 21));
        rdoRepaySingle_YES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRepaySingle_YESActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panCourtInterest.add(rdoRepaySingle_YES, gridBagConstraints);

        rdoRepaySingle_NO.setText("Multiple Installment");
        rdoRepaySingle_NO.setMaximumSize(new java.awt.Dimension(140, 21));
        rdoRepaySingle_NO.setMinimumSize(new java.awt.Dimension(140, 21));
        rdoRepaySingle_NO.setPreferredSize(new java.awt.Dimension(140, 21));
        rdoRepaySingle_NO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRepaySingle_NOActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        panCourtInterest.add(rdoRepaySingle_NO, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(panCourtInterest, gridBagConstraints);

        tdtFirstInstallDt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtFirstInstallDtFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(tdtFirstInstallDt, gridBagConstraints);

        tdtLastInstallDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtLastInstallDateFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(tdtLastInstallDate, gridBagConstraints);

        lblPenal.setText("Penal Interest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(lblPenal, gridBagConstraints);

        lblRepayRemarks.setText("Remarks");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(lblRepayRemarks, gridBagConstraints);

        lblLastInstallDate.setText("Last Installment  Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(lblLastInstallDate, gridBagConstraints);

        txtPenal.setMaximumSize(new java.awt.Dimension(100, 21));
        txtPenal.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(txtPenal, gridBagConstraints);

        txtRepayRemarks.setMaximumSize(new java.awt.Dimension(100, 21));
        txtRepayRemarks.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(txtRepayRemarks, gridBagConstraints);

        cboFreq.setMaximumSize(new java.awt.Dimension(100, 21));
        cboFreq.setMinimumSize(new java.awt.Dimension(100, 21));
        cboFreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFreqActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        panCourtRepaymentDetails.add(cboFreq, gridBagConstraints);

        btnCourtOrderNew.setText("New");
        btnCourtOrderNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourtOrderNewActionPerformed(evt);
            }
        });

        btnSavePan.add(btnCourtOrderNew);

        btnCourtOrderSave.setText("Modify");
        btnCourtOrderSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourtOrderSaveActionPerformed(evt);
            }
        });
        btnSavePan.add(btnCourtOrderSave);

        btnCourtOrderDel.setText("Delete");
        btnCourtOrderDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourtOrderDelActionPerformed(evt);
            }
        });

        btnSavePan.add(btnCourtOrderDel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        panCourtRepaymentDetails.add(btnSavePan, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        panFacilityDetails_Data1.add(panCourtRepaymentDetails, gridBagConstraints);

        panOTSDetails.add(panFacilityDetails_Data1, new java.awt.GridBagConstraints());

//        cInternalFrame1.getContentPane().add(panOTSDetails, java.awt.BorderLayout.CENTER);

//        getContentPane().add(cInternalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }

    private void txtTotAmountDueFocusLost(java.awt.event.FocusEvent evt) {
        calculateWrittenOffAmt();
    }

    private void txtSettlementAmtFocusLost(java.awt.event.FocusEvent evt) {
        calculateWrittenOffAmt();
    }

    private void btnCourtOrderDelActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        observable.editDeleteCourtDetails(true);
        resetCourtDetails();
        enableDisableCourtDetails(false, false);
    }

    private void btnCourtOrderSaveActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        observable.editDeleteCourtDetails(false);
        //        resetCourtDetails();
        enableDisableCourtDetails(true, true);
        observable.setUpdateCourtDetails(true);
    }

    private void btnCourtOrderNewActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        resetCourtDetails();
    }

    private void txtNoInstallmentFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        setOTSLastInstallmentDate();
    }

    private void txtChargeAmountFocusLost(java.awt.event.FocusEvent evt) {
        double settlementAmt = CommonUtil.convertObjToDouble(txtSettlementAmt.getText());
        if (settlementAmt > 0) {
        }
    }

    private void txtNoInstallmentActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void cboFreqActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        setOTSLastInstallmentDate();
    }

    private void tdtLastInstallDateFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
    }

    private void tdtFirstInstallDtFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        setOTSLastInstallmentDate();
        String date = CommonUtil.convertObjToStr(tdtFirstInstallDt.getDateValue());
        if (date.length() > 0) {
            if (DateUtil.dateDiff(curr_dt, DateUtil.getDateMMDDYYYY(date)) < 0) {
                ClientUtil.showMessageWindow("Please Enter Date should be Greater Than or Equal to Today Date");
                tdtFirstInstallDt.setDateValue("");

            }
        }
    }

    private void tdtCourtOrderDateFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        String date = CommonUtil.convertObjToStr(tdtCourtOrderDate.getDateValue());
        if (date.length() > 0 && validateDate(date)) {
            tdtCourtOrderDate.setDateValue("");
        }

    }

    private void tdtOTSDateFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        String date = CommonUtil.convertObjToStr(tdtOTSDate.getDateValue());
        if (date.length() > 0 && validateDate(date)) {
            tdtOTSDate.setDateValue("");
        }
    }

    private boolean validateDate(String date) {
        if (date.length() > 0) {
            if (DateUtil.dateDiff(curr_dt, DateUtil.getDateMMDDYYYY(date)) > 0) {
                ClientUtil.showMessageWindow("Please Enter Date should be Less Than or Equal to Today Date");
                return true;
            } else {
                return false;
            }
        }
        return true;
    }

    private void rdoRepaySingle_NOActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        txtNoInstallment.setText("");
        txtInstallmentAmt.setText("");
        txtNoInstallment.setEnabled(true);
        enableDisableCourtDetails(true, true);
    }

    private void rdoRepaySingle_YESActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        txtNoInstallment.setText("1");
        txtInstallmentAmt.setText(txtSettlementAmt.getText());
        enableDisableCourtDetails(true, true);
        txtNoInstallment.setEnabled(false);
    }

    private void calculateWrittenOffAmt() {
        double amtDue = CommonUtil.convertObjToDouble(txtTotAmountDue.getText()).doubleValue();
        double settlementamt = CommonUtil.convertObjToDouble(txtSettlementAmt.getText()).doubleValue();
        if (amtDue > 0 && settlementamt > 0) {
            txtTotalAmountWrittenOff.setText(String.valueOf(amtDue - settlementamt));
        }
    }

    private void setOTSLastInstallmentDate() {
        Date last_date = null;
        String firstInstallDate = CommonUtil.convertObjToStr(tdtFirstInstallDt.getDateValue());
        int noInstall = CommonUtil.convertObjToInt(txtNoInstallment.getText());
        int freq = CommonUtil.convertObjToInt(((ComboBoxModel) cboFreq.getModel()).getKeyForSelected());
        if (firstInstallDate.length() > 0 && noInstall > 0 && freq > 0) {
            last_date = DateUtil.getDateMMDDYYYY(firstInstallDate);
            int freqMonths = freq / 30;
            for (int i = 0; i < noInstall - 1; i++) {
                for (int j = 0; j < freqMonths; j++) {
                    last_date = (Date) DateUtil.addDays(last_date, 30);
                }
            }
            tdtLastInstallDate.setDateValue(DateUtil.getStringDate(last_date));
        }
    }

    private void resetCourtDetails() {
        txtCourtOrderNo.setText("");
        tdtCourtOrderDate.setDateValue("");
        tdtOTSDate.setDateValue("");
        txtOTSRate.setText("");
        txtTotAmountDue.setText("");
        txtSettlementAmt.setText("");
        txtPrincipalAmount.setText("");
        txtInterestAmount.setText("");
        txtPenalInterestAmount.setText("");
        txtChargeAmount.setText("");
        txtPenalInterestAmount.setText("");
        txtNoInstallment.setText("");
        txtInterestAmount.setText("");
        txtInstallmentAmt.setText("");
        rdoRepaySingle_YES.setSelected(false);
        rdoRepaySingle_NO.setSelected(false);
        txtPenal.setText("");
        txtRepayRemarks.setText("");

    }

    private void chkOTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkOTSActionPerformed
        // TODO add your handling code here:
        OTSActionPerformed();
    }//GEN-LAST:event_chkOTSActionPerformed

    private void cboAgentIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboAgentIdActionPerformed
        // TODO add your handling code here:
        if (cboAgentId.getSelectedIndex() > 0) {
//            if (/*chkLoadFromFile.isSelected() &&*/ !tblClicked) {
//                setDataToTable();
//            } else {
//                observable.setCboAgentType((String) cboAgentType.getSelectedItem());
            observable.setDailyLoan(true);
            lblAgentnameDisplay.setText(CommonUtil.convertObjToStr(observable.getCbmAgentId().getKeyForSelected()));
//            HashMap agentMap = new HashMap();
//            agentMap.put("AGENT_ID", cboAgentId.getSelectedItem());
//            List lst = ClientUtil.executeQuery("getAgentDetailsName", agentMap);
//            agentMap = null;
//            if (lst != null && lst.size() > 0) {
//                agentMap = (HashMap) lst.get(0);
//                lblAgentnameDisplay.setText(CommonUtil.convertObjToStr(agentMap.get("AGENT_NAME")));
//
//            } else {
//                ClientUtil.showAlertWindow("Agent code found...");
//                return;
//            }
//            }

        }else{
            observable.setDailyLoan(false);
        }

    }//GEN-LAST:event_cboAgentIdActionPerformed

    private void updateDirectRepaymentDates() {
        tdtTDate.setDateValue(observable.getTdtTDate());
        tdtFacility_Repay_Date.setDateValue(observable.getTdtFacility_Repay_Date());
        tdtDirect_Repay_Date.setDateValue(observable.getTdtFacility_Repay_Date());
        tdtDirect_Repay_Date.setEnabled(false);
    }

    private void checkDirectRepaymentDate() {
        try {
            if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW || observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
                double noDays = CommonUtil.convertObjToDouble(txtDirectRepaymentLoanPeriod.getText()).doubleValue();
                String strPeriod = CommonUtil.convertObjToStr(((ComboBoxModel) cboDirectRepaymentLoanPeriod.getModel()).getKeyForSelected());
                if (noDays > 0 && strPeriod.length() > 0) {
                    if (observable.checkDirectRepaymentTODate(noDays, strPeriod)) {
                        observable.setDailyLoanComponentValue();
                        return;
                    }
                }
                updateDirectRepaymentDates();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void initComponentsCropLoan() {
        java.awt.GridBagConstraints gridBagConstraints;

        panCropTotalPanel = new com.see.truetransact.uicomponent.CPanel();
        panCropDataDetails = new com.see.truetransact.uicomponent.CPanel();
        panCropDetails = new com.see.truetransact.uicomponent.CPanel();
        lblAreaAcrs = new com.see.truetransact.uicomponent.CLabel();
        txtAreaAcrs = new com.see.truetransact.uicomponent.CTextField();
        txtEligibleCropAmt = new com.see.truetransact.uicomponent.CTextField();
        lblEligibleCropAmt = new com.see.truetransact.uicomponent.CLabel();
        lblCropName = new com.see.truetransact.uicomponent.CLabel();
        cboCropName = new com.see.truetransact.uicomponent.CComboBox();
        panButton_Crop = new com.see.truetransact.uicomponent.CPanel();
        btnCrop_New = new com.see.truetransact.uicomponent.CButton();
        btnCrop_Save = new com.see.truetransact.uicomponent.CButton();
        btnCrop_Delete = new com.see.truetransact.uicomponent.CButton();
        panTable_Crop = new com.see.truetransact.uicomponent.CPanel();
        srpTable_Crop = new com.see.truetransact.uicomponent.CScrollPane();
        tblCropDetails = new com.see.truetransact.uicomponent.CTable();
        lblTotalCropLimit = new com.see.truetransact.uicomponent.CLabel();
        lblTotalCropLimitAmt = new com.see.truetransact.uicomponent.CLabel();

        //        getContentPane().setLayout(new java.awt.GridBagLayout());

        //        addWindowListener(new java.awt.event.WindowAdapter() {
        //            public void windowClosing(java.awt.event.WindowEvent evt) {
        //                exitForm(evt);
        //            }
        //        });

        panCropTotalPanel.setLayout(new java.awt.GridBagLayout());

        panCropTotalPanel.setMinimumSize(new java.awt.Dimension(821, 199));
        panCropTotalPanel.setPreferredSize(new java.awt.Dimension(821, 199));
        panCropDataDetails.setLayout(new java.awt.GridBagLayout());

        panCropDataDetails.setMaximumSize(new java.awt.Dimension(475, 100));
        panCropDataDetails.setMinimumSize(new java.awt.Dimension(475, 100));
        panCropDataDetails.setPreferredSize(new java.awt.Dimension(475, 100));
        panCropDetails.setLayout(new java.awt.GridBagLayout());

        panCropDetails.setMaximumSize(new java.awt.Dimension(179, 50));
        panCropDetails.setMinimumSize(new java.awt.Dimension(179, 50));
        panCropDetails.setPreferredSize(new java.awt.Dimension(179, 50));
        lblAreaAcrs.setText("Area  Under Cultivation (Acres)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCropDetails.add(lblAreaAcrs, gridBagConstraints);

        txtAreaAcrs.setMinimumSize(new java.awt.Dimension(100, 21));
        txtAreaAcrs.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAreaAcrsFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCropDetails.add(txtAreaAcrs, gridBagConstraints);

        txtEligibleCropAmt.setMinimumSize(new java.awt.Dimension(100, 21));
        txtEligibleCropAmt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEligibleCropAmtFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCropDetails.add(txtEligibleCropAmt, gridBagConstraints);

        lblEligibleCropAmt.setText("Amount Eligible");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCropDetails.add(lblEligibleCropAmt, gridBagConstraints);

        lblCropName.setText("Crop Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panCropDetails.add(lblCropName, gridBagConstraints);

        cboCropName.setMinimumSize(new java.awt.Dimension(100, 21));
        cboCropName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboCropNameActionPerformed(evt);
            }
        });

        panCropDetails.add(cboCropName, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panCropDataDetails.add(panCropDetails, gridBagConstraints);

        panButton_Crop.setLayout(new java.awt.GridBagLayout());

        panButton_Crop.setMinimumSize(new java.awt.Dimension(215, 33));
        panButton_Crop.setPreferredSize(new java.awt.Dimension(215, 33));
        btnCrop_New.setText("New");
        btnCrop_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrop_NewActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButton_Crop.add(btnCrop_New, gridBagConstraints);

        btnCrop_Save.setText("Save");
        btnCrop_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrop_SaveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButton_Crop.add(btnCrop_Save, gridBagConstraints);

        btnCrop_Delete.setText("Delete");
        btnCrop_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrop_DeleteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panButton_Crop.add(btnCrop_Delete, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panCropDataDetails.add(panButton_Crop, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panCropTotalPanel.add(panCropDataDetails, gridBagConstraints);

        panTable_Crop.setLayout(new java.awt.GridBagLayout());

        srpTable_Crop.setMinimumSize(new java.awt.Dimension(330, 140));
        srpTable_Crop.setPreferredSize(new java.awt.Dimension(330, 140));
        tblCropDetails.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "Title 1", "Title 2", "Title 3", "Title 4"
        }));
        tblCropDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCropDetailsMouseClicked(evt);
            }
        });

        srpTable_Crop.setViewportView(tblCropDetails);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        panTable_Crop.add(srpTable_Crop, gridBagConstraints);

        lblTotalCropLimit.setText("TOTAL LIMIT");
        lblTotalCropLimit.setMaximumSize(new java.awt.Dimension(100, 15));
        lblTotalCropLimit.setMinimumSize(new java.awt.Dimension(100, 15));
        lblTotalCropLimit.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panTable_Crop.add(lblTotalCropLimit, gridBagConstraints);

        lblTotalCropLimitAmt.setMaximumSize(new java.awt.Dimension(100, 15));
        lblTotalCropLimitAmt.setMinimumSize(new java.awt.Dimension(100, 15));
        lblTotalCropLimitAmt.setPreferredSize(new java.awt.Dimension(100, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panTable_Crop.add(lblTotalCropLimitAmt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panCropTotalPanel.add(panTable_Crop, gridBagConstraints);

        //        getContentPane().add(panCropTotalPanel, new java.awt.GridBagConstraints());
        //
        //        pack();
    }

    private void tblCropDetailsMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void btnCrop_DeleteActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void btnCrop_SaveActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //           if(CommonUtil.convertObjToStr(txtSalaryCertificateNo.getText()).length()>0){


        updateCropOBFields();

        int rowcount = tblCropDetails.getRowCount();
        observable.setSalarySecrityTableValue(salarytblSelectedRow, rowcount);
        enableDisableSalaryDetails(false);
        resetCropDetails();
        enableDisableSalaryBtnsNew(true);
        salarytblSelectedRow = -1;
        //        }else{
        //            ClientUtil.displayAlert("Please Enter Salary Certificate No");
        //        }
    }

    private void btnCrop_NewActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void txtEligibleCropAmtFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
    }

    private void txtAreaAcrsFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        HashMap dataMap = new HashMap();
        dataMap.put("CURR_DATE", curr_dt);
//        dataMap.put("CROP_TYPE",CommonUtil.convertObjToStr((ComboBoxModel)cboCropName.getModel()).get);

    }

    private void cboCropNameActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void clearProdFields() {
        txtDirectRepaymentAcctHead.setText("");
        txtDirectRepaymentAcctNo.setText("");


    }

    // To display the All the Product Id's which r having status as
    // created or updated, in a table...
//        private void popUp(int field) {
//            HashMap viewMap = new HashMap();
//            HashMap whereMap = new HashMap();
//            viewType = field;
////            if(field==EDIT || field==DELETE || field==VIEW ){   //Edit=0 and Delete=1
////                ArrayList lst = new ArrayList();
////                lst.add("TRANS_ID");
////                viewMap.put(ClientConstants.RECORD_KEY_COL, lst);
////                lst = null;
////                viewMap.put(CommonConstants.MAP_NAME, "viewCashTransaction");//mapped statement: viewCashTransaction---> result map should be a Hashmap...
////                whereMap.put("INIT_BRANCH", TrueTransactMain.selBranch);
////                viewMap.put(CommonConstants.MAP_WHERE, whereMap);
////            } else if (field == ACCNO ) {
////                updateOBFields();
////                if(observable.getProdType().equals("TD") || observable.getProdType().equals("TL")) {
////                    if(rdoTransactionType_Debit.isSelected()) {
////                        if(observable.getProdType().equals("TL")){
////                            whereMap.put("PAYMENT","PAYMENT");
////                            viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountList"
////                            + ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString());
////                        }
////                        else{
////                            viewMap.put(CommonConstants.MAP_NAME, "getDepositHoldersInterest");
////                            
////                            transDetails.setIsDebitSelect(true);
////                        }
////                    } else if(rdoTransactionType_Credit.isSelected()){
////                        if(observable.getProdType().equals("TL"))
////                            whereMap.put("RECEIPT","RECEIPT");                        
////                        viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountList"
////                        + ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString());
////                    } else {
////                        ClientUtil.showMessageWindow("Select Payment or Receipt ");
////                        return;
////                    }
////                } else {
//                    viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountList"
//                    + ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString());
////                }
//                whereMap.put("PROD_ID", ((ComboBoxModel) cboProdId.getModel()).getKeyForSelected());
////            }
//           
//          
////             else{
//                 whereMap.put("BRANCH_CODE",ProxyParameters.BRANCH_ID);
//                whereMap.put("CURRENT_DT", curr_dt);
////                viewMap.put(CommonConstants.MAP_NAME, "TellerEntryDetails");
////                viewMap.put(CommonConstants.MAP_WHERE, whereMap);
////             }
////            if(whereMap.get("SELECTED_BRANCH")==null)
////                whereMap.put("SELECTED_BRANCH",ProxyParameters.BRANCH_ID);
////            else
////            if (field == ACCNO ){
//                whereMap.put("SELECTED_BRANCH", TrueTransactMain.selBranch);
//                setSelectedBranchID(TrueTransactMain.selBranch);
////            }
////            else
////                whereMap.put("SELECTED_BRANCH", getSelectedBranchID());
//            
//            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
//            new ViewAll(this, viewMap).show();
//           
//        }
    private void tdtFacility_Repay_DateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtFacility_Repay_DateFocusLost
        // TODO add your handling code here:
        if (tdtFacility_Repay_Date.getDateValue().length() > 0) { //To Date
            java.util.GregorianCalendar gCalendar = new java.util.GregorianCalendar();
            gCalendar.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
            gCalendar.setTime(DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
            int dateVal = observable.getIncrementType();
            int incVal = observable.getInstallNo(String.valueOf(CommonUtil.convertObjToDouble(txtNoInstallments.getText()).doubleValue() - 1), dateVal);
            date = new java.util.Date();
            date = DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue());
            if (txtNoInstallments.getText().equals("1")) {
                date = DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue());
            }
            if (dateVal <= 7) {
                gCalendar.add(gCalendar.DATE, incVal);
            } else if (dateVal >= 30) {
                gCalendar.add(gCalendar.MONTH, incVal);
            }
            tdtTDate.setDateValue(DateUtil.getStringDate(gCalendar.getTime()));
            observable.setTdtTDate(tdtTDate.getDateValue());
            if(tdtTDate.getDateValue().length() > 0){
                populatePeriodDifference();
            }
        }
    }//GEN-LAST:event_tdtFacility_Repay_DateFocusLost
    private void txtSubsidyAccHeadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSubsidyAccHeadFocusLost
        // TODO add your handling code here:
        String acHead = CommonUtil.convertObjToStr(txtSubsidyAccHead.getText());
        if (acHead.length() > 0) {
            HashMap paramMap = new HashMap();
            paramMap.put("AC_HEAD", acHead);
            List lst = ClientUtil.executeQuery("Cash.getSelectAcctHead", paramMap);
            if (lst != null && lst.size() > 0) {
                paramMap = (HashMap) lst.get(0);
                txtSubsidyAccHead.setText(CommonUtil.convertObjToStr(paramMap.get("A/C HEAD")));
            } else {
                ClientUtil.showMessageWindow("Enter Correct Ac head Id");
                txtSubsidyAccHead.setText("");
                return;
            }
        }

    }//GEN-LAST:event_txtSubsidyAccHeadFocusLost

    private void btnGLAchdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGLAchdActionPerformed
        // TODO add your handling code here:
        viewType = SUBSIDY_GL;
        final HashMap viewMap = new HashMap();
        viewMap.put(CommonConstants.MAP_NAME, "Cash.getSelectAcctHead");
        new ViewAll(this, viewMap).show();
    }//GEN-LAST:event_btnGLAchdActionPerformed

    private void txtEnteredSubsidyAmtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEnteredSubsidyAmtFocusLost
        // TODO add your handling code here:

        double enteredSusbsidyAmt = CommonUtil.convertObjToDouble(txtEnteredSubsidyAmt.getText()).doubleValue();
        double totalSusbsidyAmt = CommonUtil.convertObjToDouble(txtSubsidyAmt.getText()).doubleValue();
        double susbsidyAdjustedAmt = CommonUtil.convertObjToDouble(txtSubsidyAdjustedAmt.getText()).doubleValue();
        if (rdoSubsidy_add.isSelected()) {
            totalSusbsidyAmt += enteredSusbsidyAmt;

        } else if (rdoSubsidy_Minus.isSelected()) {
            if ((totalSusbsidyAmt - enteredSusbsidyAmt) < susbsidyAdjustedAmt) {
                ClientUtil.showMessageWindow("Entered Subsidy Amount should not less than Adjusted Subsidy Amount");
                return;
            }
            totalSusbsidyAmt -= enteredSusbsidyAmt;

        }
        txtSubsidyAmt.setText(String.valueOf(totalSusbsidyAmt));

    }//GEN-LAST:event_txtEnteredSubsidyAmtFocusLost

    private void txtEnteredSubsidyAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEnteredSubsidyAmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEnteredSubsidyAmtActionPerformed

    private void rdoSubsidy_MinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSubsidy_MinusActionPerformed
        // TODO add your handling code here:
        txtEnteredSubsidyAmt.setEnabled(true);
        if(!addSubsidy){
            displayAlert("Add subsidy amount first!!");
            addSubsidy=false;
            return;
        }
    }//GEN-LAST:event_rdoSubsidy_MinusActionPerformed

    private void rdoSubsidy_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSubsidy_addActionPerformed
        // TODO add your handling code here:
        txtEnteredSubsidyAmt.setEnabled(true);
        addSubsidy=true;
    }//GEN-LAST:event_rdoSubsidy_addActionPerformed

    private void rdoRebateInterest_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRebateInterest_NoActionPerformed
        // TODO add your handling code here:
        enableDisableRebate(false);
    }//GEN-LAST:event_rdoRebateInterest_NoActionPerformed

    private void rdoRebateInterest_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRebateInterest_YesActionPerformed
        // TODO add your handling code here:
        enableDisableRebate(true);
    }//GEN-LAST:event_rdoRebateInterest_YesActionPerformed

    private void chkMobileBankingTLADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMobileBankingTLADActionPerformed
        // TODO add your handling code here:
        if (chkMobileBankingTLAD.isSelected()) {
            if(txtCustID.getText().length()>0){
                long mobileNo = observable.getMobileNo(CommonUtil.convertObjToStr(txtCustID.getText()));
                if(mobileNo != 0){
                    txtMobileNo.setText(CommonUtil.convertObjToStr(mobileNo));
                    tdtMobileSubscribedFrom.setDateValue(CommonUtil.convertObjToStr(curr_dt.clone()));
                }
            }
            EnableDisbleMobileBanking(true);
        } else {
            EnableDisbleMobileBanking(false);
            txtMobileNo.setText("");
            tdtMobileSubscribedFrom.setDateValue("");
        }
    }//GEN-LAST:event_chkMobileBankingTLADActionPerformed

    private void EnableDisbleMobileBanking(boolean flag) {
        txtMobileNo.setEnabled(flag);
        tdtMobileSubscribedFrom.setEnabled(flag);
    }
    private void btnMembershipLiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMembershipLiaActionPerformed
        // TODO add your handling code here:
        if (txtCustID.getText().length() > 0) {
            new MembershipLiabilityUI(CommonUtil.convertObjToStr(txtCustID.getText()), CommonUtil.convertObjToStr(txtExistingAcctNo.getText())).show();
        }
    }//GEN-LAST:event_btnMembershipLiaActionPerformed

    private void rdoRenewal_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewal_NoActionPerformed
        // TODO add your handling code here:
        enableDisableSanctionBaseRenewal();
        tdtFDate.setDateValue(fromdateEdit1);
        tdtTDate.setDateValue(todateEdit1);
        ClientUtil.enableDisable(panRepaySanctionDetails, true);
        allEnableDisable();
        
        btnNew.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnCancel.setEnabled(true);
        btnSave.setEnabled(false);
        btnAuthorize.setEnabled(false);
        btnException.setEnabled(false);
        btnReject.setEnabled(false);
    

    }//GEN-LAST:event_rdoRenewal_NoActionPerformed

    private void rdoEnhance_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoEnhance_NoActionPerformed
        // TODO add your handling code here:
        enableDisableSanctionBaseRenewal();
        txtLimit_SD.setEnabled(false);
    }//GEN-LAST:event_rdoEnhance_NoActionPerformed

    private void enableDisableSanctionBaseRenewal() {
        if (rdoEnhance_No.isSelected() || rdoEnhance_Yes.isSelected()) {
//             ClientUtil.disableAll(panCompanyDetails_Company,false);//
            ClientUtil.enableDisable(panODEnhance, true);
            ClientUtil.enableDisable(panRenewal, true);
        }
    }
    private void rdoRenewal_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRenewal_YesActionPerformed
        // TODO add your handling code here:
        if (rdoRenewal_Yes.isSelected()) {
            //added by sreekrishnan for kcc renewal validation
            //checkRenewalLimit();
            HashMap kccMap = new HashMap();
            int renewlCount=0;
            int kccProductCount=0;
            kccMap.put("BRANCH", TrueTransactMain.BRANCH_ID);
            kccMap.put("ACTNUM", lblAcctNo_Sanction_Disp.getText());
            kccMap.put("PROD_ID", observable.getCbmProductId().getKeyForSelected());
            List lst = ClientUtil.executeQuery("getKCCrenewalCount", kccMap);
            List lst1 = ClientUtil.executeQuery("getKCCproductCount", kccMap);
            if (lst != null && lst.size() > 0) {
                kccMap = (HashMap) lst.get(0);
                renewlCount = CommonUtil.convertObjToInt(kccMap.get("COUNT"));
            }
            if (lst1 != null && lst1.size() > 0) {
                kccMap = (HashMap) lst1.get(0);
                kccProductCount = CommonUtil.convertObjToInt(kccMap.get("TOT_KCC_LIMIT"));
            } 
            //System.out.println("renewlCount######"+renewlCount);
            //System.out.println("kccProductCount######"+kccProductCount);
            if(kccProductCount <= renewlCount){
                System.out.println("if case######");
                tdtFDate.setDateValue(fromdateEdit1);
                tdtTDate.setDateValue(todateEdit1);
                rdoRenewal_No.setSelected(true);
                rdoRenewal_Yes.setEnabled(false);
                rdoRenewal_No.setEnabled(false);
                btnCheck();
                allEnableDisable();
                rdoRenewal_NoActionPerformed(null);
                ClientUtil.showMessageWindow("Maximum Renewal!!!!");
                return;
                //btnCancelActionPerformed(null);
            } 
            
            String todate = CommonUtil.convertObjToStr(tdtTDate.getDateValue());
            tdtFDate.setDateValue(todate);
            tdtTDate.setDateValue("");
            System.out.println("todate#####"+todate);
            System.out.println("curr_dt#####"+curr_dt);
            System.out.println("dateDiff#####"+DateUtil.dateDiff(curr_dt, DateUtil.getDateMMDDYYYY(todate)));
            if (todate.length() > 0 && DateUtil.dateDiff(curr_dt, DateUtil.getDateMMDDYYYY(todate)) <= 0) {
               //rdoEnhance_No.setSelected(true);
               ClientUtil.disableAll(panCompanyDetails_Company, true);
               cboTypeOfFacility.setEnabled(false);
               cboProductId.setEnabled(false);
               observable.setKccFlag(true);
               System.out.println("isKccFlag#####"+observable.isKccFlag());
               setButtonEnableDisable1();
            } else {
                ClientUtil.showMessageWindow("Limit not yet Expired. Do an Enhancement");
                rdoRenewal_No.setSelected(true);
                rdoRenewal_Yes.setEnabled(false);
                rdoRenewal_No.setEnabled(false);
                tdtFDate.setDateValue(fromdateEdit1);
                tdtTDate.setDateValue(todateEdit1);
                btnCheck();
            }
         }
        
    }//GEN-LAST:event_rdoRenewal_YesActionPerformed

    private void checkRenewalLimit() {
        HashMap kccMap = new HashMap();
        int renewlCount=0;
        int kccProductCount=0;
          kccMap.put("BRANCH", TrueTransactMain.BRANCH_ID);
            kccMap.put("ACTNUM", lblAcctNo_Sanction_Disp.getText());
            kccMap.put("PROD_ID", observable.getCbmProductId().getKeyForSelected());
            List lst = ClientUtil.executeQuery("getKCCrenewalCount", kccMap);
            List lst1 = ClientUtil.executeQuery("getKCCproductCount", kccMap);
            if (lst != null && lst.size() > 0) {
                kccMap = (HashMap) lst.get(0);
                renewlCount = CommonUtil.convertObjToInt(kccMap.get("COUNT"));
            }
            if (lst1 != null && lst1.size() > 0) {
                kccMap = (HashMap) lst1.get(0);
                kccProductCount = CommonUtil.convertObjToInt(kccMap.get("TOT_KCC_LIMIT"));
            } 
            //System.out.println("renewlCount######"+renewlCount);
            //System.out.println("kccProductCount######"+kccProductCount);
            if(kccProductCount <= renewlCount){
                //System.out.println("if case######");
                tdtFDate.setDateValue(fromdateEdit1);
                tdtTDate.setDateValue(todateEdit1);
                rdoRenewal_No.setSelected(true);
                rdoRenewal_Yes.setEnabled(false);
                rdoRenewal_No.setEnabled(false);
                btnCheck();
                allEnableDisable();
                rdoRenewal_NoActionPerformed(null);
                ClientUtil.showMessageWindow("Maximum Renewal!!!!");
                //btnCancelActionPerformed(null);
            } 
            return;
    }
    //commented by sreekrishnan
    private void rdoEnhance_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoEnhance_YesActionPerformed
        // TODO add your handling code here:
       // if (rdoEnhance_Yes.isSelected()) {
        //    String todate = CommonUtil.convertObjToStr(tdtTDate.getDateValue());
         //   if (todate.length() > 0 && DateUtil.dateDiff(curr_dt, DateUtil.getDateMMDDYYYY(todate)) >= 0) {
          //      rdoRenewal_No.setSelected(true);
//            ClientUtil.disableAll(panCompanyDetails_Company,false);//
            //    ClientUtil.enableDisable(panODEnhance, true);
            //    ClientUtil.enableDisable(panRenewal, true);
              //  txtLimit_SD.setEnabled(true);
           // } else {
            //    ClientUtil.showMessageWindow("Limit Already Exipired Renew the Limit !!!");
             //   rdoEnhance_No.setSelected(true);
           // }
        //}
    }//GEN-LAST:event_rdoEnhance_YesActionPerformed

    private void rdoSubsidy_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSubsidy_NoActionPerformed
        // TODO add your handling code here:
        if (rdoSubsidy_No.isSelected()) {
            enableDisableSubsidy(false);
        } else {
            enableDisableSubsidy(true);
        }
    }//GEN-LAST:event_rdoSubsidy_NoActionPerformed

    private void rdoSubsidy_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSubsidy_YesActionPerformed
        // TODO add your handling code here:
        if (rdoSubsidy_Yes.isSelected()) {
            enableDisableSubsidy(true);
        } else {
            enableDisableSubsidy(false);
        }

    }//GEN-LAST:event_rdoSubsidy_YesActionPerformed
    private void enableDisableSubsidy(boolean flag) {
        txtSubsidyAmt.setEnabled(false);
        txtSubsidyAdjustedAmt.setEnabled(false);
        txtSubsidyAccHead.setEnabled(flag);
        tdtSubsidyAppDt.setEnabled(false);
        rdoSubsidy_add.setEnabled(flag);
        rdoSubsidy_Minus.setEnabled(flag);
        txtEnteredSubsidyAmt.setEnabled(flag);
        btnGLAchd.setEnabled(flag);
    }

    private void enableDisableRebate(boolean flag) {
        txtRebateInterest_Amt.setEnabled(false);
      //  tdtRebateInterest_App_Dt.setEnabled(false);
        tdtSubsidyAppDt.setEnabled(false);
    }

    private void enableDisableGoldType(boolean flag) {
        txtJewelleryDetails.setEnabled(true);
        txtGoldRemarks.setEnabled(flag);
        txtValueOfGold.setEnabled(flag);
        txtNetWeight.setEnabled(flag);
        txtGrossWeight.setEnabled(flag);
        btnGoldSecurityIdSearch.setEnabled(flag);
        rdoGoldSecurityExitsYes.setEnabled(true);
        rdoGoldSecurityExitsNo.setEnabled(true);
    }
    private void txtSHGIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSHGIdFocusLost
        // TODO add your handling code here:
        if (txtSHGId.getText().length() > 0) {
            HashMap whereMap = new HashMap();
            whereMap.put("SHG_ID", txtSHGId.getText());
            List lst = ClientUtil.executeQuery("getSHGIDDetails", whereMap);
            if (lst != null && lst.size() > 0) {
                viewType = "SHG_ID";
                whereMap = (HashMap) lst.get(0);
                fillData(whereMap);
                lst = null;
                whereMap = null;
            } else {
                ClientUtil.displayAlert("Invalid Group ID !!! ");
                txtSHGId.setText("");
            }
        }
    }//GEN-LAST:event_txtSHGIdFocusLost

    private void btnSHGIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSHGIdActionPerformed
        // TODO add your handling code here:
        callView("SHG_ID");
        txtCustID.setText("");
    }//GEN-LAST:event_btnSHGIdActionPerformed

    private void rdoSHG_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSHG_NoActionPerformed
        // TODO add your handling code here:
//        ClientUtil.clearAll(this);
        observableBorrow.resetBorrowerTabCTable();
        tblBorrowerTabCTable.setModel(observableBorrow.getTblBorrower());
        SHGVisible(false);
        btnSHGId.setEnabled(false);
    }//GEN-LAST:event_rdoSHG_NoActionPerformed

    private void rdoSHG_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSHG_YesActionPerformed
        // TODO add your handling code here:
//        ClientUtil.clearAll(this);
        observableBorrow.resetBorrowerTabCTable();
        tblBorrowerTabCTable.setModel(observableBorrow.getTblBorrower());
        SHGVisible(true);
        btnSHGId.setEnabled(true);
    }//GEN-LAST:event_rdoSHG_YesActionPerformed

    public void updateCaseDetailFields() {
    }
    private void chkMoratorium_GivenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkMoratorium_GivenItemStateChanged
        // TODO add your handling code here:
        chkMoratorium_GivenStateChanged();
    }//GEN-LAST:event_chkMoratorium_GivenItemStateChanged

    private void txtExistingAcctNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExistingAcctNoFocusLost
        // TODO add your handling code here:
        callView("EXISTING_CUSTOMER");
    }//GEN-LAST:event_txtExistingAcctNoFocusLost

    private void txtCustomerID_GDFocusLost(java.awt.event.FocusEvent evt) {
        // TODO add your handling code here:
        txtCustomerID_GDFocusLost();
    }

    private void txtCustomerID_GDFocusLost() {
        if (txtCustomerID_GD.getText().length() > 0) {
            HashMap existingMap = new HashMap();
//            existingMap.put("ACT_NUM",txtCustomerID_GD.getText());
            existingMap.put("CUST_ID", txtCustomerID_GD.getText());
            List mapDataList = ClientUtil.executeQuery("getCustomers", existingMap);
            //System.out.println("#### mapDataList :" + mapDataList);
            if (mapDataList != null && mapDataList.size() > 0) {
                existingMap = (HashMap) mapDataList.get(0);
                viewType = "Guarant_Cust_Id";
                fillData(existingMap);
            } else {
                ClientUtil.showAlertWindow("Invalid Customer Id !!!");
                txtCustomerID_GD.setText("");
                return;
            }
        }
    }

    private void rdoExistingCustomer_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExistingCustomer_NoActionPerformed
        // TODO add your handling code here:
        rdoExistingCustomer_Yes.setSelected(false);
        rdoExistingCustomer_No.setSelected(true);
        txtExistingAcctNo.setVisible(false);
        lblExistingAcctNo.setVisible(false);

        if (rdoExistingCustomer_No.isSelected() == true) {
            txtExistingAcctNo.setText("");
            txtCustID.setText("");
            // lblCustName.setText("");
            // nomineeUi.setMainCustomerId(txtCustID.getText());
            // lblSecurityCustNameValue.setText("");
            //lblDocumentCustNameValue.setText("");
            lblExistingAcctNo.setVisible(false);
            txtExistingAcctNo.setVisible(false);
            //tblBorrowerTabCTable.revalidate();
            txtCustID.setEnabled(true);
            individualCustUI = new IndividualCustUI();
            com.see.truetransact.ui.TrueTransactMain.showScreen(individualCustUI);
            individualCustUI.loanCreationCustId(this);
           
        }
    }//GEN-LAST:event_rdoExistingCustomer_NoActionPerformed

    private void rdoExistingCustomer_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoExistingCustomer_YesActionPerformed
        // TODO add your handling code here:
        rdoExistingCustomer_Yes.setSelected(true);
        rdoExistingCustomer_No.setSelected(false);
        txtExistingAcctNo.setVisible(true);
        lblExistingAcctNo.setVisible(true);
    }//GEN-LAST:event_rdoExistingCustomer_YesActionPerformed

    private void txtEditTermLoanNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEditTermLoanNoFocusLost
        // TODO add your handling code here:
        if (txtEditTermLoanNo.getText().length() > 0) {
            HashMap termLoanMap = new HashMap();
            termLoanMap.put("ACCT_NUMBER", txtEditTermLoanNo.getText());
            termLoanMap.put("BRANCH_ID", getSelectedBranchID());
            List lst = ClientUtil.executeQuery("viewTermLoan", termLoanMap);
            if (lst != null && lst.size() > 0) {
                termLoanMap = (HashMap) lst.get(0);
                termLoanMap.put("ACCOUNTNO", txtEditTermLoanNo.getText());
                termLoanMap.put("BRANCH_CODE", getSelectedBranchID());
                viewType = "Edit";
                fillData(termLoanMap);
                btnView.setEnabled(false);
                btnPrint.setEnabled(false);
                panExistingCustomer.setVisible(false);
                lblExistingCustomer.setVisible(false);
                txtExistingAcctNo.setVisible(false);
                lblExistingAcctNo.setVisible(false);
                btnNew.setEnabled(false);
                btnEdit.setEnabled(true);
                btnDelete.setEnabled(false);
                btnCancel.setEnabled(true);
                btnSave.setEnabled(false);
                btnReject.setEnabled(false);
                btnAuthorize.setEnabled(false);
                btnException.setEnabled(false);
                ClientUtil.enableDisable(this, false);
            } else {
                ClientUtil.showAlertWindow("Invalid Member No / Account No");
                btnCancelActionPerformed(null);
                txtEditTermLoanNo.setText("");
                return;
            }
        }
    }//GEN-LAST:event_txtEditTermLoanNoFocusLost

    private void txtScheduleNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtScheduleNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtScheduleNoActionPerformed

    private void chkAccountTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAccountTransferActionPerformed
        // TODO add your handling code here:
        if (!chkAccountTransfer.isSelected()) {
        }
        chkAccountTransferActionPerformed();
    }//GEN-LAST:event_chkAccountTransferActionPerformed
    private void chkAccountTransferActionPerformed() {
        if (chkAccountTransfer.isSelected()) {
            //            tabLimitAmount.add(actTransUI, "Account Transfer");
        } else {
            //            tabLimitAmount.remove(actTransUI);
        }
    }
    private void txtInterExpLimitFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInterExpLimitFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInterExpLimitFocusLost

    private void rdoGuarnInsititutionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoGuarnInsititutionalActionPerformed
        // TODO add your handling code here:
        if (rdoGuarnInsititutional.isSelected()) {
            if (tblGuarantorTable.getRowCount() > 0) {
                ClientUtil.displayAlert("Delete Table Records then you can change !!!");
                rdoGuarnIndividual.setSelected(true);
                return;
            }
            panRunTimeGuarantor.setVisible(true);
            panRunTimeGuarantorAddr.setVisible(true);
            panGuaranAddr.setVisible(false);
            sptGuarantorDetail_Vert.setVisible(false);
            panGuarantor.setVisible(false);
        }
    }//GEN-LAST:event_rdoGuarnInsititutionalActionPerformed

    private void rdoGuarnIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoGuarnIndividualActionPerformed
        // TODO add your handling code here:
        if (rdoGuarnIndividual.isSelected()) {
            if (tblGuarantorTable.getRowCount() > 0) {
                ClientUtil.displayAlert("Delete Table Records then you can change !!!");
                rdoGuarnInsititutional.setSelected(true);
                return;
            }
            panRunTimeGuarantor.setVisible(false);
            panRunTimeGuarantorAddr.setVisible(false);
            panGuaranAddr.setVisible(true);
            sptGuarantorDetail_Vert.setVisible(true);
            panGuarantor.setVisible(true);

        } else {
            panRunTimeGuarantor.setVisible(true);
            panRunTimeGuarantorAddr.setVisible(true);
            panGuaranAddr.setVisible(false);
            sptGuarantorDetail_Vert.setVisible(false);
            panGuarantor.setVisible(false);


        }
    }//GEN-LAST:event_rdoGuarnIndividualActionPerformed

    private void tdtRepayFromDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtRepayFromDateFocusLost
        // TODO add your handling code here:
        txtNoInstallFocusLost();
    }//GEN-LAST:event_tdtRepayFromDateFocusLost

    private void rdoMultiDisburseAllow_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoMultiDisburseAllow_NoActionPerformed
        // TODO add your handling code here:
        if (rdoMultiDisburseAllow_No.isSelected()) {
            tabLimitAmount.remove(loanDisbursementUI);
        }
    }//GEN-LAST:event_rdoMultiDisburseAllow_NoActionPerformed

    private void rdoMultiDisburseAllow_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoMultiDisburseAllow_YesActionPerformed
        rdoMultiDisburseAllow_YesActionPerformed();
    }//GEN-LAST:event_rdoMultiDisburseAllow_YesActionPerformed
    private void rdoMultiDisburseAllow_YesActionPerformed() {
        if (rdoMultiDisburseAllow_Yes.isSelected()) {
            //              tabLimitAmount.add("Disbursement Schedule",loanDisbursementUI);

            if (!(viewType.equals("Edit") || viewType.equals(AUTHORIZE))) {
                loanDisbursementUI.enableDisableSubLimitNewButton(false);
            }
            if (enableControls == true) {
                loanDisbursementUI.enableDisableSubLimitNewButton(false);
            }
        } else {
            tabLimitAmount.remove(loanDisbursementUI);
            //            observable.setChkStockInspect(false);

        }

    }
    private void cboIntGetFromItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboIntGetFromItemStateChanged
        // TODO add your handling code here:
        //System.out.println("cboIntGetFromItemStateChanged ");
        //System.out.println("!! cboIntGetFrom.getSelectedItem() : " + cboIntGetFrom.getSelectedItem());

    }//GEN-LAST:event_cboIntGetFromItemStateChanged

    private void cboIntGetFromFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cboIntGetFromFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_cboIntGetFromFocusLost

    private void cboIntGetFromMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboIntGetFromMouseExited
        // TODO add your handling code here:
        //System.out.println("cboIntGetFromMouseExited");
        //System.out.println("3cboIntGetFrom.getSelectedItem() : " + cboIntGetFrom.getSelectedItem());

    }//GEN-LAST:event_cboIntGetFromMouseExited

    private void cboIntGetFromMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboIntGetFromMouseReleased
        // TODO add your handling code here:
        //System.out.println("cboIntGetFromMouseReleased");
        //System.out.println("2cboIntGetFrom.getSelectedItem() : " + cboIntGetFrom.getSelectedItem());
    }//GEN-LAST:event_cboIntGetFromMouseReleased

    private void cboIntGetFromMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboIntGetFromMouseClicked
        // TODO add your handling code here:
        //System.out.println("cboIntGetFromMouseClicked");
        //System.out.println("1cboIntGetFrom.getSelectedItem() : " + cboIntGetFrom.getSelectedItem());
        if (!(viewType.equals("Delete") || viewType.equals(AUTHORIZE))) {
            if (loanType.equals("LTD")) {
                //                String evtName=evt.getActionCommand();
                //                 //System.out.println("evtName####"+evtName);
                //                int iscon= evt.ACTION_FIRST;
                //
                //                //System.out.println("evtName##11##"+iscon);
                //                long ec=evt.HIERARCHY_EVENT_MASK;
                //                 //System.out.println("evtName##11ec##"+ec);
                //                 int typeId=evt.getID();
                //                  //System.out.println("typeId##11ec##"+typeId);
                if (sanDetailMousePressedForLTD
                        && CommonUtil.convertObjToStr(cboIntGetFrom.getSelectedItem()).length() > 0) {
                    populateInterestRateForLTD();
                    sanDetailMousePressedForLTD = false;
                }
                return;
            }
            //            if (evt.getModifiers()==16)
            //            cboIntGetFromActionPerformed();
        }
    }//GEN-LAST:event_cboIntGetFromMouseClicked

    private void chkPOFAttorneyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPOFAttorneyActionPerformed
        // TODO add your handling code here:
        if (!chkPOFAttorney.isSelected()) {
            if (observable.getPOARecord() > 0) {
                ClientUtil.showMessageWindow("Delete record from Power of Attorney Details");
                chkPOFAttorney.setSelected(true);
                return;
            }
        }
        chkPOFAttorneyActionPerformed();

    }//GEN-LAST:event_chkPOFAttorneyActionPerformed
    private void chkPOFAttorneyActionPerformed() {
        if (chkPOFAttorney.isSelected()) {
            tabLimitAmount.add("Power of Attorney", poaUI);
        } else {
            tabLimitAmount.remove(poaUI);
            observable.setChkPOFAttorney(false);
        }

    }
    private void chkAuthorizedSignatoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAuthorizedSignatoryActionPerformed
        // TODO add your handling code here:
        if (!chkAuthorizedSignatory.isSelected()) {
            if (observable.getAuthorizeSigantoryRecord() > 0) {
                ClientUtil.showMessageWindow("Delete record from Authorized Signatory Details");
                chkAuthorizedSignatory.setSelected(true);
                return;
            }
        }
        chkAuthorizedSignatoryActionPerformed();
    }//GEN-LAST:event_chkAuthorizedSignatoryActionPerformed
    private void chkAuthorizedSignatoryActionPerformed() {
        if (chkAuthorizedSignatory.isSelected()) {
            tabLimitAmount.add(authSignUI, "Authorized Signatory");
            if (viewType.equals("AUTHORIZE")) {
                authSignUI.setAllAuthEnableDisable(false);
            } else {
                authSignUI.setAllAuthEnableDisable(true);
            }
        } else {
            tabLimitAmount.remove(authSignUI);
            observable.setChkAuthorizedSignatory(false);
        }


    }
    private void chkDocDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDocDetailsActionPerformed
        // TODO add your handling code here:
        chkDocDetailsActionPerformed();
    }//GEN-LAST:event_chkDocDetailsActionPerformed
    private void chkDocDetailsActionPerformed() {
        if (chkDocDetails.isSelected()) {
            tabLimitAmount.add(panDocumentDetails, "Document Details");

        } else {
            tabLimitAmount.remove(panDocumentDetails);
            observable.setChkDocDetails(false);
        }
    }
    private void tdtAccountOpenDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtAccountOpenDateFocusLost
        // TODO add your handling code here:
        String acct_open_dt = CommonUtil.convertObjToStr(tdtAccountOpenDate.getDateValue());
        String sanction_dt = CommonUtil.convertObjToStr(tdtSanctionDate.getDateValue());
        if (acct_open_dt.length() > 0 && sanction_dt.length() > 0) {
            ClientUtil.validateToDate(tdtAccountOpenDate, sanction_dt, true);
            return;
        }
    }//GEN-LAST:event_tdtAccountOpenDateFocusLost

    private void btnNew_ASDComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_btnNew_ASDComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNew_ASDComponentShown

    private void txtLimit_SD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLimit_SD1ActionPerformed
        // TODO add your handling code here:
        String mainLimit = CommonUtil.convertObjToStr(txtLimit_SD1.getText());
        if (mainLimit.length() > 0) {
            double limit = Double.parseDouble(mainLimit);
            if ((limit % 1) < 1) {
                ClientUtil.showMessageWindow("Enter Rounding Only");
            }
        }
    }//GEN-LAST:event_txtLimit_SD1ActionPerformed

    private void txtLimit_SD1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLimit_SD1FocusLost
        // TODO add your handling code here:
        //        String mainLimit=CommonUtil.convertObjToStr(txtLimit_SD1.getText());
        //        if(mainLimit.length()>0){
        //            double limit=Double.parseDouble(mainLimit);
        //            if((limit%1) <1)
        //                ClientUtil.showMessageWindow("Enter Rounding Only");
        //        }
    }//GEN-LAST:event_txtLimit_SD1FocusLost

    private void tdtAdditionalSanctionDtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtAdditionalSanctionDtFocusLost
        // TODO add your handling code here:
        String additionalSanctionDt = DateUtil.getStringDate(curr_dt);
        //        ClientUtil.validateLTDate(tdtAdditionalSanctionDt, additionalSanctionDt);
        ClientUtil.validateLTDate(tdtAdditionalSanctionDt);
        //        if(additionalSanctionDt.length()>0){
        ////          ClientUtil.validateToDate(
        //                ToDateValidation toDate= new ToDateValidation(ClientUtil.getCurrentDate(),true);
        //                toDate.setComponent(tdtAdditionalSanctionDt);
        //                //System.out.println(toDate.validate());
        //                if(!toDate.validate()){
        //                    toDate.setErrorMessage("To date should be greater than from date");
        //                    tdtAdditionalSanctionDt.setDateValue("");
        ////                    message=toDate.getErrorMessage();
        //
        //                }
        //
        //        }

    }//GEN-LAST:event_tdtAdditionalSanctionDtFocusLost

    private void txtAdditionalLimitFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAdditionalLimitFocusLost
        // TODO add your handling code here:
        String addLimit = CommonUtil.convertObjToStr(txtAdditionalLimit.getText());
        rupeesValidation(addLimit);
    }//GEN-LAST:event_txtAdditionalLimitFocusLost

    private void btnPermittedByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPermittedByActionPerformed
        // TODO add your handling code here:
        viewType = "EMP_ID";
        HashMap viewMap = new HashMap();
        HashMap mapwhere = new HashMap();
        viewMap.put(CommonConstants.MAP_NAME, "getEmployeeName");
        mapwhere.put(CommonConstants.BRANCH_ID, TrueTransactMain.BRANCH_ID);
        viewMap.put(CommonConstants.MAP_WHERE, mapwhere);
        new ViewAll(this, "", viewMap).show();
        mapwhere = null;
        mapwhere = null;

    }//GEN-LAST:event_btnPermittedByActionPerformed

    private void tblPeakSanctionDetailsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPeakSanctionDetailsMousePressed
        // TODO add your handling code here:
        addSanctionPosition = tblPeakSanctionDetails.getSelectedRow();
        observableAdditionalSanctionOB.populateDocumentDetails(addSanctionPosition);
        additionalSanMousePress = true;
        additionalSanctionNewEnableDisable(true);
        additionalSanctionEnableDisable(true);

        if (observableAdditionalSanctionOB.getExistStatusMap() != null
                && observableAdditionalSanctionOB.getExistStatusMap().containsKey("AUTHORIZE STATUS")
                && observableAdditionalSanctionOB.getExistStatusMap().get(("AUTHORIZE STATUS")).equals("AUTHORIZED")) {
            additionalSanctionEnableDisable(false);
            additionalSanctionbtnEnableDisable(true);
            btnDelete_ASD.setEnabled(false);
            btnSave_ASD.setEnabled(false);
        }
        if (viewType.equals("AUTHORIZE") || viewType.equals("REJECT")) {
            additionalSanctionNewEnableDisable(false);
            btnNew_ASD.setEnabled(false);
            additionalSanctionEnableDisable(false);

        }
    }//GEN-LAST:event_tblPeakSanctionDetailsMousePressed
    private void setTotalMainAdditionalSanction() {
        double totalLimit = 0;
        ArrayList resultList = (ArrayList) observableAdditionalSanctionOB.getTblPeakSanctionTab().getDataArrayList();
        double mainLimit = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
        if (resultList.size() > 0) {
            for (int i = 0; i < resultList.size(); i++) {
                ArrayList singleList = (ArrayList) resultList.get(i);
                totalLimit += CommonUtil.convertObjToDouble(singleList.get(2)).doubleValue();
            }
        }
        lblTotalLimitAmt.setText(String.valueOf(totalLimit + mainLimit));
    }
    private void btnDelete_ASDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete_ASDActionPerformed
        // TODO add your handling code here:
        addSanctionPosition = tblPeakSanctionDetails.getSelectedRow();
        ArrayList list = (ArrayList) observableAdditionalSanctionOB.getTblPeakSanctionTab().getDataArrayList().get(addSanctionPosition);
        //System.out.println("list    " + list);
        String authStatus = CommonUtil.convertObjToStr(list.get(5));
        if (authStatus.length() > 0) {
            return;
        }
        observableAdditionalSanctionOB.deleteAdditionalSanctionDetails(addSanctionPosition);
        setemtyValue();
        setTotalMainAdditionalSanction();
        additionalSanctionNewEnableDisable(false);
        setTotalMainAdditionalSanction();
    }//GEN-LAST:event_btnDelete_ASDActionPerformed

    private void btnSave_ASDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave_ASDActionPerformed
        // TODO add your handling code here:
        updateOBFields();
        HashMap transactionMap = new HashMap();
        if (rdoMultiDisburseAllow_No.isSelected()) {
            ClientUtil.showMessageWindow("Choose Multiple Disbursement Yes In Facility"
                    + "Details");
            return;
        }
//        String depositNo=CommonUtil.convertObjToStr(lblDepositNo.getText());
        if (observableAdditionalSanctionOB.getAdditionalLimit().length() > 0) {
//            if(depositNo.length()>0){
//                transactionMap.put("prodId", observable.getCbmProductId().getKeyForSelected());
//                transactionMap.put("PROD_ID", observable.getCbmProductId().getKeyForSelected());
////                transactionMap.put("ACCOUNT_NO",depositNo);
//                transactionMap.put("NEW_SANCTION_AMT",observableAdditionalSanctionOB.getAdditionalLimit());
//                if(observableAdditionalSanctionOB.marginValidation(transactionMap)){
//                    txtAdditionalLimit.setText("");
//                    return;
//                }
//            }
        } else {
            ClientUtil.showMessageWindow("Enter Additional Sanction Amt");
            return;
        }
        observableAdditionalSanctionOB.addAdditionalSanctionDetails(addSanctionPosition, additionalSanMousePress);
        observable.ttNotifyObservers();
        setemtyValue();
        additionalSanctionNewEnableDisable(false);
        additionalSanctionEnableDisable(false);
        additionalSanMousePress = false;
        addSanctionPosition = -1;
        setTotalMainAdditionalSanction();
    }//GEN-LAST:event_btnSave_ASDActionPerformed

    private void btnNew_ASDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNew_ASDActionPerformed
        // TODO add your handling code here:
        setemtyValue();
        //        additionalSanctionNewEnableDisable(true);
        //        additionalSanctionEnableDisable(true);
        observableAdditionalSanctionOB.setExistStatusMap(new HashMap());
        if (observableAdditionalSanctionOB.checktblRecordValidation()) {
            additionalSanctionNewEnableDisable(true);
            additionalSanctionEnableDisable(true);
            additionalSanMousePress = false;
            addSanctionPosition = -1;
        } else {
            return;
        }



    }//GEN-LAST:event_btnNew_ASDActionPerformed
    private void setemtyValue() {
        tdtAdditionalSanctionDt.setDateValue("");
        txtPermittedBy.setText("");
        txtAdditionalLimit.setText("");
        lblPermittedName.setText("");
        lblDesignatedName.setText("");
        observableAdditionalSanctionOB.setAdditionalSanctionDt("");
        observableAdditionalSanctionOB.setPermittedBy("");
        observableAdditionalSanctionOB.setAdditionalLimit("");
        observableAdditionalSanctionOB.setPermittedName("");
        observableAdditionalSanctionOB.setDesignatedName("");
    }

    private void additionalSanctionEnableDisable(boolean val) {
        tdtAdditionalSanctionDt.setEnabled(val);
        txtPermittedBy.setEnabled(val);
        txtAdditionalLimit.setEnabled(val);
        lblPermittedName.setEnabled(val);
        lblDesignatedName.setEnabled(val);
        btnPermittedBy.setEnabled(val);
    }

    private void additionalSanctionNewEnableDisable(boolean val) {
        btnNew_ASD.setEnabled(!val);
        btnSave_ASD.setEnabled(val);
        btnDelete_ASD.setEnabled(val);

    }

    private void additionalSanctionbtnEnableDisable(boolean val) {
        btnNew_ASD.setEnabled(val);
        btnSave_ASD.setEnabled(val);
        btnDelete_ASD.setEnabled(val);

    }

    private void txtNoMonthsMoraFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNoMonthsMoraFocusLost
        // TODO add your handling code here:
        calculateRepaymentToDate();
    }//GEN-LAST:event_txtNoMonthsMoraFocusLost

    private void tdtFDateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tdtFDateMouseExited
        // TODO add your handling code here:
        //        txtNoInstallmentsFocusLost();
    }//GEN-LAST:event_tdtFDateMouseExited

    private void tdtNPADateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtNPADateFocusLost
        // TODO add your handling code here:
        observableClassi.setLblAccNo_CD_2(lblAccNo_CD_2.getText());
        //        observableClassi.setTdtNPAChangeDt(tdtNPADate.getDateValue());
        //        observableClassi.updateAssetStatus();
        observableClassi.setTdtNPAChangeDt("");
    }//GEN-LAST:event_tdtNPADateFocusLost

    private void txtCustIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCustIDFocusLost
        // TODO add your handling code here:
        txtCustIDActionPerform();
        HashMap purposeMap = new HashMap();
        String purpose = "";
        purposeMap.put("APPNO", txtApplicationNo.getText());
        List purposeList = ClientUtil.executeQuery("getSelectPurposeCodeFromLoanApplRegstr", purposeMap);
        if (purposeList != null && purposeList.size() > 0) {
            purposeMap = (HashMap) purposeList.get(0);
            purpose = CommonUtil.convertObjToStr(purposeMap.get("PURPOSE_CODE"));
        }
        if (purpose != null) {
            cboPurposeCode.setSelectedItem(purpose);
        }
    }//GEN-LAST:event_txtCustIDFocusLost

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_VIEW);
        observable.setStatus();
        lblStatus.setText(observable.getLblStatus());
        popUp("Enquirystatus");
        btnCheck();
    }//GEN-LAST:event_btnViewActionPerformed

    private void cboInterestTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboInterestTypeActionPerformed
        // TODO add your handling code here:
        String interstType = CommonUtil.convertObjToStr(((ComboBoxModel) cboInterestType.getModel()).getKeyForSelected());
        if (CommonUtil.convertObjToStr(((ComboBoxModel) cboInterestType.getModel()).getKeyForSelected()).equals("FLAT_RATE")) {
            if (rdoInterest_Simple.isSelected()) {
            } else if (rdoInterest_Compound.isSelected()) {
                ClientUtil.showMessageWindow("Compounding interest does not allow to flat_rate");
                ((ComboBoxModel) cboInterestType.getModel()).setKeyForSelected("");
            } else {
                ClientUtil.showMessageWindow("Select interest type SIMPLE OR COMPOUND");
            }
        }

    }//GEN-LAST:event_cboInterestTypeActionPerformed

    private void rdoAccLimit_MainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoAccLimit_MainActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoAccLimit_MainActionPerformed

    private void cboAssetCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboAssetCodeActionPerformed
        // TODO add your handling code here:
        observableClassi.setLblAccNo_CD_2(lblAccNo_CD_2.getText());
        String actNum = lblAccNo_CD_2.getText();
        //        //System.out.println("actNum   ###"+actNum);
        if (actNum != null && actNum.length() > 0) {
            observableClassi.updateAssetStatus(tdtNPADate);
        }

    }//GEN-LAST:event_cboAssetCodeActionPerformed

    private void txtCustIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustIDActionPerformed

        
    }//GEN-LAST:event_txtCustIDActionPerformed
    private void txtCustIDActionPerform() {


        // TODO add your handling code here:
        String cust_id = CommonUtil.convertObjToStr(txtCustID.getText());
        List lst = null;
        HashMap executeMap = new HashMap();
        HashMap custMap = new HashMap();
        if (cust_id.length() > 0) {
            if (tblBorrowerTabCTable.getRowCount() > 0) {
                for (int i = 0; i < tblBorrowerTabCTable.getRowCount(); i++) {
                    custMap.put(tblBorrowerTabCTable.getValueAt(i, 1), "");
                }
            }
            if (custMap.containsKey(cust_id)) {
                return;
            }
            executeMap.put("BRANCH_CODE", getSelectedBranchID());
            executeMap.put("CUST_ID", new String(cust_id));
            viewType = "CUSTOMER ID";
            if (txtSHGId.getText().length() > 0) {
                executeMap.put("SHG_ID", txtSHGId.getText());
                lst = ClientUtil.executeQuery("getSelectCustListForSHG", executeMap);
            } else {
                if (loanType.equals("LTD")) {
                    lst = ClientUtil.executeQuery("getSelectCustListForLTD", executeMap);
                } else {
                    lst = ClientUtil.executeQuery("getSelectLoanAccInfoList", executeMap);
                }
            }
            if (lst != null && lst.size() > 0) {
                executeMap = (HashMap) lst.get(0);
                fillData(executeMap);
                lst = null;
                executeMap = null;
            } else {
                if (txtSHGId.getText().length() > 0) {
                    ClientUtil.showAlertWindow("Customer Number Not Found In This Group !!! ");
                    txtCustID.setText("");
                    return;
                } else {
                    ClientUtil.displayAlert("Invalid Customer Number");
                    txtCustID.setText("");
                }
            }
        }
    }
    private void mitRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitRejectActionPerformed
        // TODO add your handling code here:
        btnRejectActionPerformed(evt);
    }//GEN-LAST:event_mitRejectActionPerformed

    private void mitExceptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitExceptionActionPerformed
        // TODO add your handling code here:
        btnExceptionActionPerformed(evt);
    }//GEN-LAST:event_mitExceptionActionPerformed

    private void mitAuthorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitAuthorizeActionPerformed
        // TODO add your handling code here:
        btnAuthorizeActionPerformed(evt);
    }//GEN-LAST:event_mitAuthorizeActionPerformed
    private void cboInterestTypeItemStateChanged() {
        String strInterestTypeKey = CommonUtil.convertObjToStr(((ComboBoxModel) cboInterestType.getModel()).getKeyForSelected());
        if (rdoNatureInterest_NonPLR.isSelected() && strInterestTypeKey.equals(FLOATING_RATE)) {
            cboInterestType.setSelectedItem("");
        }
        strInterestTypeKey = null;
    }
    private void chkDocumentcompleteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkDocumentcompleteStateChanged
        // TODO add your handling code here:
        chkDocumentcompleteStateChanged();
    }//GEN-LAST:event_chkDocumentcompleteStateChanged
    private void btnCheck() {
        btnCancel.setEnabled(true);
        btnSave.setEnabled(false);
        btnNew.setEnabled(false);
        btnDelete.setEnabled(false);
        btnAuthorize.setEnabled(false);
        btnReject.setEnabled(false);
        btnException.setEnabled(false);
        btnEdit.setEnabled(false);
    }

    private void chkDocumentcompleteStateChanged() {
        // TODO add your handling code here:
        if (chkDocumentcomplete.isSelected()) {
            if (!observableDocument.isDocumentCompleted()) {
                chkDocumentcomplete.setSelected(false);
                observableClassi.setChkDocumentcomplete(false);
            }
        }
    }

    private void rdoNo_Executed_DOCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoNo_Executed_DOCActionPerformed
        // TODO add your handling code here:
        rdoNo_Executed_DOCActionPerformed();
    }//GEN-LAST:event_rdoNo_Executed_DOCActionPerformed
    private void rdoNo_Executed_DOCActionPerformed() {
        // TODO add your handling code here:
        if (rdoNo_Executed_DOC.isSelected()) {
            observableDocument.setTdtExecuteDate_DOC("");
            tdtExecuteDate_DOC.setDateValue("");
            tdtExecuteDate_DOC.setEnabled(false);
        }
    }
    private void rdoYes_Executed_DOCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoYes_Executed_DOCActionPerformed
        // TODO add your handling code here:
        rdoYes_Executed_DOCActionPerformed();
    }//GEN-LAST:event_rdoYes_Executed_DOCActionPerformed
    private void rdoYes_Executed_DOCActionPerformed() {
        // TODO add your handling code here:
        if (rdoYes_Executed_DOC.isSelected()) {
            tdtExecuteDate_DOC.setEnabled(true);
        }
    }
    private void txtLaonAmtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLaonAmtFocusLost
        // TODO add your handling code here:

        txtLaonAmtFocusLost();
    }//GEN-LAST:event_txtLaonAmtFocusLost
    private boolean isLoanAmtExceedLimit() {
        //        if (loanType.equals("OTHERS"))
        if (rdoActive_Repayment.isSelected() && !updateRepayment && CommonUtil.convertObjToDouble(observableRepay.getStrLimitAmt()).doubleValue() < (observableRepay.getActiveLoanAmt() + CommonUtil.convertObjToDouble(txtLaonAmt.getText()).doubleValue())) {
            observableRepay.repayTabWarning("loanExceedLimitWarning");
            txtLaonAmt.setText("");
            return false;
        } else {
            return true;
        }
        //        else
        //            return true;
    }

    private void txtLaonAmtFocusLost() {
        // If the Loan amount is less than or equal to limit amount then calculate total base amt
        //outstanding based repayment purpose we comment
        if (loanType.equals("LTD") || (CommonUtil.convertObjToDouble(txtLaonAmt.getText()).doubleValue() <= CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue()) || outStandingAmtRepayment == true) {
            // To chk the Total Loan amount doesn't exceed limit amt
            if (outStandingAmtRepayment) {
            } else if ((loanType.equals("OTHERS")) && !cboRepayType.getSelectedItem().equals("User Defined")&& !isLoanAmtExceedLimit()) {
                observableRepay.resetRepaymentSchedule();
                //                observable.ttNotifyObservers();
                return;
            }
            //            if(!outStandingAmtRepayment){//put by bala regarding outstanding based repayment schedule
            String totalLimit = CommonUtil.convertObjToStr(lblTotalLimitAmt.getText());
            if (loanType.equals("LTD")) {

                if (totalLimit.length() > 0) {
                    observableRepay.setTxtLaonAmt(totalLimit);
                }
            } else {
                observableRepay.setTxtLaonAmt(txtLaonAmt.getText());
            }
            // The following block commented because in Co-operative banks no interest should be
            // added for the moratorium period  // by Rajesh
            //            if (chkMoratorium_Given.isSelected()){
            //                calculateTotalBaseAmount();
            //                txtTotalBaseAmt.setText(observableRepay.getTxtTotalBaseAmt());
            //            }else{
            if (loanType.equals("LTD")) {
                if (totalLimit.length() > 0) {
                    observableRepay.setTxtTotalBaseAmt(totalLimit);
                }
                txtTotalBaseAmt.setText(totalLimit);
            } else {
                observableRepay.setTxtTotalBaseAmt(txtLaonAmt.getText());
                txtTotalBaseAmt.setText(txtLaonAmt.getText());
            }
            //            }
            //            }
        } else {
            txtLaonAmt.setText("");
            observableRepay.setTxtTotalBaseAmt("");
            txtTotalBaseAmt.setText("");
            observableRepay.setTxtAmtPenulInstall("");
            txtAmtPenulInstall.setText("");
            observableRepay.setTxtAmtLastInstall("");
            txtAmtLastInstall.setText("");
            observableRepay.setTxtTotalInstallAmt("");
            txtTotalInstallAmt.setText("");
        }
    }
    private void chkNPAChrgADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNPAChrgADActionPerformed
        // TODO add your handling code here:
        chkNPAChrgADActionPerformed();
    }//GEN-LAST:event_chkNPAChrgADActionPerformed
    private void chkNPAChrgADActionPerformed() {
        /* we have to show the NPA charge date only if the corresponding
         * check box has been selected
         */
        tdtNPAChrgAD.setEnabled(chkNPAChrgAD.isSelected());
        tdtNPAChrgAD.setDateValue("");
        observableOtherDetails.setTdtNPAChrgAD("");
    }
    private void chkABBChrgADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkABBChrgADActionPerformed
        // TODO add your handling code here:
        chkABBChrgADActionPerformed();
    }//GEN-LAST:event_chkABBChrgADActionPerformed
    private void chkABBChrgADActionPerformed() {
        /* we have to show the ABBA charge text box only if the corresponding
         * check box has been selected
         */
        boolean isSelected = chkABBChrgAD.isSelected();
        txtABBChrgAD.setEditable(isSelected);
        txtABBChrgAD.setEnabled(isSelected);
        if (!isSelected) {
            txtABBChrgAD.setText("");
            observableOtherDetails.setTxtABBChrgAD("");
        }
    }    
    private void chkNonMainMinBalChrgADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNonMainMinBalChrgADActionPerformed
        // TODO add your handling code here:
        chkNonMainMinBalChrgADActionPerformed();
    }//GEN-LAST:event_chkNonMainMinBalChrgADActionPerformed
    private void chkNonMainMinBalChrgADActionPerformed() {
        /* we have to show the Non maintenance of minimum balance charge text box
         * only if the corresponding check box has been selected
         */
        boolean isSelected = chkNonMainMinBalChrgAD.isSelected();
        txtMinActBalanceAD.setEditable(isSelected);
        txtMinActBalanceAD.setEnabled(isSelected);
        if (!isSelected) {
            txtMinActBalanceAD.setText("");
            observableOtherDetails.setTxtMinActBalanceAD("");
        }
    }
    private void tdtCreditToDateADFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtCreditToDateADFocusLost
        // TODO add your handling code here:
        ClientUtil.validateToDate(tdtCreditToDateAD, tdtCreditFromDateAD.getDateValue());
    }//GEN-LAST:event_tdtCreditToDateADFocusLost

    private void tdtCreditFromDateADFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtCreditFromDateADFocusLost
        // TODO add your handling code here:
        ClientUtil.validateFromDate(tdtCreditFromDateAD, tdtCreditToDateAD.getDateValue());
    }//GEN-LAST:event_tdtCreditFromDateADFocusLost

    private void tdtDebitToDateADFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtDebitToDateADFocusLost
        // TODO add your handling code here:
        ClientUtil.validateToDate(tdtDebitToDateAD, tdtDebitFromDateAD.getDateValue());
    }//GEN-LAST:event_tdtDebitToDateADFocusLost

    private void tdtDebitFromDateADFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtDebitFromDateADFocusLost
        // TODO add your handling code here:
        ClientUtil.validateFromDate(tdtDebitFromDateAD, tdtDebitToDateAD.getDateValue());
    }//GEN-LAST:event_tdtDebitFromDateADFocusLost

    private void tdtATMToDateADFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtATMToDateADFocusLost
        // TODO add your handling code here:
        ClientUtil.validateToDate(tdtATMToDateAD, tdtATMFromDateAD.getDateValue());
    }//GEN-LAST:event_tdtATMToDateADFocusLost

    private void tdtATMFromDateADFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtATMFromDateADFocusLost
        // TODO add your handling code here:
        ClientUtil.validateFromDate(tdtATMFromDateAD, tdtATMToDateAD.getDateValue());
    }//GEN-LAST:event_tdtATMFromDateADFocusLost

    private void chkCreditADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCreditADActionPerformed
        // TODO add your handling code here:
        chkCreditADActionPerformed();
    }//GEN-LAST:event_chkCreditADActionPerformed
    private void chkCreditADActionPerformed() {
        /* we have to enable the Credit card No., text field and the validity date
         * only when the user selected the credit card option
         */
        boolean isSelected = chkCreditAD.isSelected();
        txtCreditNoAD.setEditable(isSelected);
        txtCreditNoAD.setEnabled(isSelected);
        tdtCreditFromDateAD.setEnabled(isSelected);
        tdtCreditToDateAD.setEnabled(isSelected);
        //        chkCreditAD.setEnabled(isSelected);
        if (!isSelected) {
            observableOtherDetails.setTxtCreditNoAD("");
            observableOtherDetails.setTdtCreditToDateAD("");
            observableOtherDetails.setTdtCreditFromDateAD("");
            txtCreditNoAD.setText("");
            tdtCreditFromDateAD.setDateValue("");
            tdtCreditToDateAD.setDateValue("");
        }
    }
    private void chkDebitADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDebitADActionPerformed
        // TODO add your handling code here:
        chkDebitADActionPerformed();
    }//GEN-LAST:event_chkDebitADActionPerformed
    private void chkDebitADActionPerformed() {
        /* we have to enable the debit card No., text field and the validity date
         * only when the user selected the debit card option
         */
        boolean isSelected = chkDebitAD.isSelected();
        txtDebitNoAD.setEditable(isSelected);
        txtDebitNoAD.setEnabled(isSelected);
        tdtDebitToDateAD.setEnabled(isSelected);
        tdtDebitFromDateAD.setEnabled(isSelected);
        //        chkDebitAD.setEnabled(isSelected);
        if (!isSelected) {
            observableOtherDetails.setTxtDebitNoAD("");
            observableOtherDetails.setTdtDebitToDateAD("");
            observableOtherDetails.setTdtDebitFromDateAD("");
            txtDebitNoAD.setText("");
            tdtDebitToDateAD.setDateValue("");
            tdtDebitFromDateAD.setDateValue("");
        }
    }
    private void chkATMADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkATMADActionPerformed
        // TODO add your handling code here:
        chkATMADActionPerformed();
    }//GEN-LAST:event_chkATMADActionPerformed
    private void chkATMADActionPerformed() {
        /* we have to enable the ATM No., text field and the validity date
         * only when the user selected the ATM card option
         */
        boolean isSelected = chkATMAD.isSelected();
        txtATMNoAD.setEditable(isSelected);
        txtATMNoAD.setEnabled(isSelected);
        tdtATMToDateAD.setEnabled(isSelected);
        tdtATMFromDateAD.setEnabled(isSelected);
        //        chkATMAD.setEnabled(isSelected);
        if (!isSelected) {
            observableOtherDetails.setTxtATMNoAD("");
            observableOtherDetails.setTdtATMToDateAD("");
            observableOtherDetails.setTdtATMFromDateAD("");
            txtATMNoAD.setText("");
            tdtATMToDateAD.setDateValue("");
            tdtATMFromDateAD.setDateValue("");
        }
    }

    private void cboProdIdActionPerformed() {
        String strOldProdId = observableGuarantor.getCboProdId();
        String prodId = CommonUtil.convertObjToStr(cboProdId.getSelectedItem());
        if (cboProdId.getSelectedIndex() > 0 && !strOldProdId.equals(prodId)) {
            txtGuaranAccNo.setText("");
            observableGuarantor.setTxtGuaranAccNo(txtGuaranAccNo.getText());
        }
    }

    private void btnAccNoActionPerformed() {
        popUp("GUARANTOR_ACCT_NO");
    }

    private void cboProdTypeActionPerformed() {
        String oldProdTypeVal = observableGuarantor.getCboProdType();
        String prodTypeVal = CommonUtil.convertObjToStr(cboProdType.getSelectedItem());
        String prodType = CommonUtil.convertObjToStr(((ComboBoxModel) cboProdType.getModel()).getKeyForSelected());

        if (cboProdType.getSelectedIndex() > 0) {

            observableGuarantor.setCboProdType(prodTypeVal);
            if (prodType.equals("GL")) {
                observableGuarantor.removeAllProdID();
                cboProdId.setModel(observableGuarantor.getCbmProdId());
                txtGuaranAccNo.setText("");
                setProdEnable(false);
            }

            if (!prodType.equals("GL")) {
                if (!oldProdTypeVal.equals(prodTypeVal)) {
                    txtGuaranAccNo.setText("");
                }
                setProdEnable(true);
                observableGuarantor.setCbmProdId(prodType);
                cboProdId.setModel(observableGuarantor.getCbmProdId());
            }
        }
    }

    private void setProdEnable(boolean isEnable) {
        cboProdId.setEnabled(isEnable);
        txtGuaranAccNo.setEditable(false);
        txtGuaranAccNo.setEnabled(isEnable);
        btnAccNo.setEnabled(isEnable);
    }

    private void cboRepayFreq_RepaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRepayFreq_RepaymentActionPerformed
        // TODO add your handling code here:
        cboRepayFreq_RepaymentActionPerformed();
    }//GEN-LAST:event_cboRepayFreq_RepaymentActionPerformed
    private void cboRepayFreq_RepaymentActionPerformed() {
        observableRepay.setRepaymentFrequency(CommonUtil.convertObjToStr(cboRepayFreq_Repayment.getSelectedItem()));
       // cboRepayType.setSelectedItem(observableRepay.getCboRepayType());
    }
    private void cboIntGetFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboIntGetFromActionPerformed
        // TODO add your handling code here:
        //System.out.println("cboIntGetFromActionPerformed" + cboIntGetFrom.getSelectedItem());
        if (!(viewType.equals("Delete") || viewType.equals(AUTHORIZE))) {
            //            if (loanType.equals("LTD")) {
            //                String evtName=evt.getActionCommand();
            //                 //System.out.println("evtName####"+evtName);
            //                int iscon= evt.ACTION_FIRST;
            //
            //                //System.out.println("evtName##11##"+iscon);
            //                long ec=evt.HIERARCHY_EVENT_MASK;
            //                 //System.out.println("evtName##11ec##"+ec);
            //                 int typeId=evt.getID();
            //                  //System.out.println("typeId##11ec##"+typeId);
            //                if (sanDetailMousePressedForLTD && evt.getModifiers()==16
            //                && CommonUtil.convertObjToStr(cboIntGetFrom.getSelectedItem()).length()>0) {
            //                    populateInterestRateForLTD();
            //                    sanDetailMousePressedForLTD = false;
            //                }
            //                return;
            //            }
            if (evt.getModifiers() == 16 && observable.getLblProductID_FD_Disp().length() > 0) {
                cboIntGetFromActionPerformed();
            }
        }
    }//GEN-LAST:event_cboIntGetFromActionPerformed

    private java.sql.Timestamp getTimestamp(java.util.Date date) {
        return new java.sql.Timestamp(date.getYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);
    }

    private java.math.BigDecimal getBigDecimal(double doubleValue) {
        return new java.math.BigDecimal(doubleValue);
    }
    private Date setProperDtFormat(Date dt) {
        Date tempDt = (Date) curr_dt.clone();
        if (dt != null) {
            tempDt.setDate(dt.getDate());
            tempDt.setMonth(dt.getMonth());
            tempDt.setYear(dt.getYear());
            return tempDt;
        }
        return null;
    }
    private void cboIntGetFromActionPerformed() {
        String strOldValue = observable.getCboIntGetFrom();
        String strSelectedKey = CommonUtil.convertObjToStr(((ComboBoxModel) cboIntGetFrom.getModel()).getKeyForSelected());
        String strSelectedVal = CommonUtil.convertObjToStr(cboIntGetFrom.getSelectedItem());
        //System.out.println("getcbogetintgetform" + strOldValue + "selectedkey" + strSelectedKey + "strselectedval" + strSelectedVal);
        observable.setTxtLimit_SD(txtLimit_SD.getText());
        if (observable.getStrACNumber().length() <= 0 || strOldValue.equals(strSelectedVal)) {
            if (observable.getLoanType().equals("OTHERS")) {//loan
                deleteAllInterestDetails();
                observableInt.resetInterestDetails();
                updateInterestDetails();
            }
            if (strSelectedKey.equals(ACT)) {
                setInterestDetailsOnlyNewEnabled();
            }
            //            if(!strOldValue.equals("Product"))
            //                return;
        } else if (strOldValue.length() > 0 && tblRepaymentCTable.getRowCount() > 0) {
            observable.repaymentExistingWarning();
            cboIntGetFrom.setSelectedItem(observable.getCboIntGetFrom());
            return;
        } else if (strOldValue.length() > 0 && tblRepaymentCTable.getRowCount() == 0) {
            observableRepay.setTxtTotalBaseAmt("");
            txtTotalBaseAmt.setText(observableRepay.getTxtTotalBaseAmt());
        }
        if (strOldValue.length() > 0 && strSelectedKey.equals(PROD)) {
            if ((tblInterMaintenance.getRowCount() > 0) && observable.interestGetFromValChangeWarn() == 1) {

                // if no is selected then reset the value
                cboIntGetFrom.setSelectedItem(strOldValue);
                return;
            } else {
                HashMap whereMap = new HashMap();
                whereMap.put("CATEGORY_ID", observableBorrow.getCbmCategory().getKeyForSelected());
                if (CommonUtil.convertObjToDouble(observable.getTxtLimit_SD()).doubleValue() > 0) {
                    whereMap.put("AMOUNT", getBigDecimal(CommonUtil.convertObjToDouble(observable.getTxtLimit_SD()).doubleValue()));
                } else {
                    whereMap.put("AMOUNT", getBigDecimal(CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue()));
                }
                whereMap.put("PROD_ID", observable.getLblProductID_FD_Disp());
                if (tdtFDate.getDateValue().length() == 0) {
                    tdtFDate.setDateValue(observable.getTdtFDate());
                }
                whereMap.put("FROM_DATE", setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue())));
                if (tdtTDate.getDateValue().length() == 0) {
                    tdtTDate.setDateValue(observable.getTdtTDate());
                }
                whereMap.put("TO_DATE", setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue())));
                deleteAllInterestDetails();
                observableInt.resetInterestDetails();
                updateInterestDetails();
                // Populate the values
                //                String interestType=CommonUtil.convertObjToStr(((ComboBoxModel)cboInterestType).getKeyForSelected().toString());
                String interestType = (String) (((ComboBoxModel) cboInterestType.getModel()).getKeyForSelected()).toString();
                ArrayList interestList = null;
                //System.out.println("interestType" + interestType);
                if (interestType != null && interestType.equals("FLOATING_RATE")) {
                    interestList = (java.util.ArrayList) ClientUtil.executeQuery("getSelectProductTermLoanInterestFloatTO", whereMap);
                } else {
                    interestList = (java.util.ArrayList) ClientUtil.executeQuery("getSelectProductTermLoanInterestTO", whereMap);
                }
                if (interestList != null && interestList.size() > 0) {
                    observableInt.setTermLoanInterestTO(interestList, null);
                } else {
                    displayAlert("Interest rates not created for this product...");
                    strSelectedVal = "";
                    //                    cboIntGetFrom.setSelectedItem("");
                }
            }
        } else if (strOldValue.length() > 0 && strSelectedKey.equals(ACT)) { //&& (!strSelectedVal.equals(strOldValue))
            if (observable.getStrACNumber().length() > 0) {
                observableInt.destroyObjects();
                observableInt.createObject();
                observableInt.resetInterestDetails();
                updateInterestDetails();
                observableInt.resetInterestDetails();
                setInterestDetailsOnlyNewEnabled();
                ArrayList interestList = null;
                HashMap whereMap = new HashMap();
                whereMap.put(CommonConstants.MAP_WHERE, observable.getStrACNumber());
                interestList = (java.util.ArrayList) ClientUtil.executeQuery("getSelectTermLoanInterestTO", whereMap);
                if (interestList != null && interestList.size() > 0) {
                    observableInt.setTermLoanInterestTO(interestList, null);
                }
            }
        } else if (strOldValue.length() == 0 && strSelectedKey.equals(PROD)) {
            HashMap whereMap = new HashMap();
            //System.out.println("categoryyy" + cboCategory.getSelectedItem().toString());
            //System.out.println("iddddd" + observableBorrow.getCbmCategory().getKeys());
            String cat_id = "";
            if (observableBorrow.getCbmCategory().getKeyForSelected().equals("") || observableBorrow.getCbmCategory().getKeyForSelected() == null) {
                cat_id = "GENERAL_CATEGORY";
            } else {
                cat_id = observableBorrow.getCbmCategory().getKeyForSelected().toString();
            }
            whereMap.put("CATEGORY_ID", cat_id);
            whereMap.put("AMOUNT", getBigDecimal(CommonUtil.convertObjToDouble(observable.getTxtLimit_SD()).doubleValue()));
            whereMap.put("PROD_ID", observable.getLblProductID_FD_Disp());
            whereMap.put("FROM_DATE", setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue())));
            whereMap.put("TO_DATE", setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue())));
            deleteAllInterestDetails();
            observableInt.resetInterestDetails();
            updateInterestDetails();
            // Populate the values
            String interestType = (String) (((ComboBoxModel) cboInterestType.getModel()).getKeyForSelected()).toString();
            ArrayList interestList = null;
            //System.out.println("interestType" + interestType);
            if (interestType != null && interestType.equals("FLOATING_RATE")) {
                interestList = (java.util.ArrayList) ClientUtil.executeQuery("getSelectProductTermLoanInterestFloatTO", whereMap);
            } else {
                interestList = (java.util.ArrayList) ClientUtil.executeQuery("getSelectProductTermLoanInterestTO", whereMap);
            }
            if (interestList != null && interestList.size() > 0) {
                observableInt.setTermLoanInterestTO(interestList, null);
            } else {
                displayAlert("Interest rates not created for this product...");
                strSelectedVal = "";
                //                cboIntGetFrom.setSelectedItem("");
            }
        } else if (strOldValue.length() > 0 && strSelectedKey.equals("")) {
            deleteAllInterestDetails();
            observableInt.resetInterestDetails();
            updateInterestDetails();
            setAllInterestBtnsEnableDisable(false);
            setAllInterestDetailsEnableDisable(false);
        }

        if ((strSelectedKey.equals(PROD)) || (strSelectedKey.equals("")) || (observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION)) || viewType.equals(REJECT)) {
            // If the interest is from Product level or nothing selected
            // If the record is populated for Delete or Authorization
            setAllInterestDetailsEnableDisable(false);
            setAllInterestBtnsEnableDisable(false);
        } else if (strSelectedKey.equals(ACT)) {
            setAllInterestDetailsEnableDisable(false);
            setInterestDetailsOnlyNewEnabled();
        }
        observable.setCboIntGetFrom(CommonUtil.convertObjToStr(strSelectedVal));
    }

    private void updateInterestDetails() {
        tdtFrom.setDateValue(observableInt.getTdtFrom());
        tdtTo.setDateValue(observableInt.getTdtTo());
        txtFromAmt.setText(observableInt.getTxtFromAmt());
        txtToAmt.setText(observableInt.getTxtToAmt());
        txtInter.setText(observableInt.getTxtInter());
        txtPenalInter.setText(observableInt.getTxtPenalInter());
        txtAgainstClearingInter.setText(observableInt.getTxtAgainstClearingInter());
        txtPenalStatement.setText(observableInt.getTxtPenalStatement());
        txtInterExpLimit.setText(observableInt.getTxtInterExpLimit());
    }
    private void rdoInActive_RepaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoInActive_RepaymentActionPerformed
        // TODO add your handling code here:
        rdoInActive_RepaymentActionPerformed();
    }//GEN-LAST:event_rdoInActive_RepaymentActionPerformed
    private void rdoInActive_RepaymentActionPerformed() {
        if (rdoInActive_Repayment.isSelected()) {
            if (observable.getClearBalance() == 0) {
                ClientUtil.displayAlert("Disbursement Not Yet done " + "\n"
                        + "Cant Make it as Inactive");
                rdoActive_Repayment.setSelected(true);
                return;
            }
            txtRepayScheduleMode.setText(CommonConstants.REPAY_SCHEDULE_MODE_INACTIVE);
            observableRepay.setTxtRepayScheduleMode(CommonConstants.REPAY_SCHEDULE_MODE_INACTIVE);
            setRdoRepaymentStatusDisable();
        }
    }

    private void setRdoRepaymentStatusDisable() {
        rdoActive_Repayment.setEnabled(false);
        rdoInActive_Repayment.setEnabled(false);
    }
    private void btnEMI_CalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEMI_CalculateActionPerformed
        // TODO add your handling code here:
        TermLoanInstallmentUI.fromDate = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tdtRepayFromDate.getDateValue()));
        //KD-3422
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
          if (!tdtFirstInstall.getDateValue().equals("") && !cboRepayFreq_Repayment.getSelectedItem().equals("") && cboRepayFreq_Repayment.getSelectedItem().equals("User Defined") && !txtNoInstall.getText().equals("")) {
              TermLoanInstallmentUI.fromDate = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(tdtFacility_Repay_Date.getDateValue()));        
          }
        }
        btnEMI_CalculateActionPerformed();
    }//GEN-LAST:event_btnEMI_CalculateActionPerformed
    private void btnEMI_CalculateActionPerformed() {      
        if (tblInterMaintenance.getRowCount() > 0) {
            updateOBFields();
            calculateRepaymentToDate();
            if (observableRepay.getRepaymentisActive()) {
                deleteInstallment = true;
            }
            if (!existRecord) {
                if (checkRepaymentType(true)) {
                    return;
                }
            }
            HashMap repayData = new HashMap();
            HashMap prodLevelValues = observable.getCompFreqRoundOffValues();
            repayData.put("ACT_NO", lblAccNo_RS_2.getText());
            if (repayNewMode) {
                repayData.put("NEW_INSTALLMENT", "NEW_INSTALLMENT");
            }
            if (CommonUtil.convertObjToDouble(txtInstallAmount.getText()) > 0) {
                repayData.put("INSTALLMENT_AMOUNT", CommonUtil.convertObjToDouble(txtInstallAmount.getText()));
            }
            //Regarding outstanding amount based on repayment schedule
            if (outStandingAmtRepayment) {
                // If OPERATE_MODE is IMPLEMENTATION firstInstallment date may be older date
                if (!CommonUtil.convertObjToStr(CommonConstants.OPERATE_MODE).equals(CommonConstants.IMPLEMENTATION)) {
                    if (DateUtil.dateDiff(DateUtil.getDateMMDDYYYY(tdtFirstInstall.getDateValue()), ClientUtil.getCurrentDate()) > 0) {
                        ClientUtil.showMessageWindow("First Installment Date should be greater than or equal to currDate");
                        return;
                    }
                }
//                if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
                System.out.println("rishad,,,,"+rdoSalaryRecovery_Yes.isSelected());
                  if (rdoSalaryRecovery_Yes.isSelected() == true) {
                    if (chkMoratorium_Given.isSelected() == false) {
                        repayData.put("FROM_DATE", DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue()));
                        //System.out.println("outside"+DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
                    } else {
                        java.util.GregorianCalendar gCalendar = new java.util.GregorianCalendar();
                        gCalendar.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtSanctionDate.getDateValue()));
                        gCalendar.setTime(DateUtil.getDateMMDDYYYY(tdtSanctionDate.getDateValue()));
                        int incVal = CommonUtil.convertObjToInt(txtFacility_Moratorium_Period.getText());
                        gCalendar.add(gCalendar.MONTH, incVal);
                        repayData.put("FROM_DATE", DateUtil.getDateMMDDYYYY(DateUtil.getStringDate(gCalendar.getTime())));
                        //System.out.println("inside"+DateUtil.getDateMMDDYYYY(DateUtil.getStringDate(gCalendar.getTime())));
                    }
                } else {
                    repayData.put("FROM_DATE", repayFromdate);//tdtFirstInstall.getDateValue()));
                }
                repayData.put("REPAYMENT_START_DT", DateUtil.getDateMMDDYYYY(tdtFirstInstall.getDateValue()));
                repayData.put("TO_DATE", DateUtil.getDateMMDDYYYY(tdtLastInstall.getDateValue()));
                repayData.put("NO_INSTALL", txtNoInstall.getText());
                repayData.put("ISDURATION_DDMMYY", "YES");
                repayData.put("INTEREST_TYPE", "COMPOUND");
                repayData.put("DURATION_YY", txtNoInstall.getText());
                repayData.put("COMPOUNDING_PERIOD", observableRepay.getCbmRepayFreq_Repayment().getKeyForSelected());//CommonUtil.convertObjToStr(prodLevelValues.get("DEBITINT_COMP_FREQ")));
                System.out.println("sssjjj sai daily"+observable.isDailyLoan());
                if(cboRepayType.getSelectedItem()==null && observable.isDailyLoan()){
                    cboRepayType.setSelectedItem("User Defined");
                }
                if (cboRepayType.getSelectedItem().equals("User Defined")) {
                    repayData.put("REPAYMENT_TYPE", observableRepay.getCbmRepayType().getKeyForSelected());
                } else {
                    repayData.put("REPAYMENT_TYPE", observableRepay.getCbmRepayType().getKeyForSelected());
                }
                repayData.put("PRINCIPAL_AMOUNT", txtLaonAmt.getText());
                repayData.put("ROUNDING_FACTOR", "1_RUPEE");
                repayData.put("ROUNDING_TYPE", CommonUtil.convertObjToStr(prodLevelValues.get("DEBIT_INT_ROUNDOFF")));
                repayData.put("REPAYMENT_FREQUENCY", observableRepay.getCbmRepayFreq_Repayment().getKeyForSelected());
            } else {
                  System.out.println("rishad,,,,"+rdoSalaryRecovery_Yes.isSelected());
                    if(rdoSalaryRecovery_Yes.isSelected()==true){
                    if(chkMoratorium_Given.isSelected()==false){
                        repayData.put("FROM_DATE", DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue()));
                        System.out.println("outside"+DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
                    }else{
                        java.util.GregorianCalendar gCalendar = new java.util.GregorianCalendar();
                        gCalendar.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtSanctionDate.getDateValue()));
                        gCalendar.setTime(DateUtil.getDateMMDDYYYY(tdtSanctionDate.getDateValue()));
                        int incVal = CommonUtil.convertObjToInt(txtFacility_Moratorium_Period.getText());
                        gCalendar.add(gCalendar.MONTH, incVal);
                        repayData.put("FROM_DATE", DateUtil.getDateMMDDYYYY(DateUtil.getStringDate(gCalendar.getTime())));
                        System.out.println("inside"+DateUtil.getDateMMDDYYYY(DateUtil.getStringDate(gCalendar.getTime())));
                    }
                } else if (repayFromdate != null) {
                    repayData.put("FROM_DATE", DateUtil.getDateMMDDYYYY(DateUtil.getStringDate(repayFromdate)));
                } else if (loanType.equals("LTD")) {
                    repayData.put("FROM_DATE", DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue()));
                } else {
                    repayData.put("FROM_DATE", DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
                }
                repayData.put("TO_DATE", DateUtil.getDateMMDDYYYY(tdtLastInstall.getDateValue()));
                repayData.put("REPAYMENT_START_DT", DateUtil.getDateMMDDYYYY(tdtFirstInstall.getDateValue()));
                repayData.put("NO_INSTALL", txtNoInstall.getText());
                repayData.put("ISDURATION_DDMMYY", "YES");
                repayData.put("INTEREST_TYPE", "COMPOUND");
                repayData.put("DURATION_YY", txtNoInstall.getText());
                if (rdoSalaryRecovery_Yes.isSelected() == true) {
                    repayData.put("SALARY_RECOVERY", "Y");
                } else {
                    repayData.put("SALARY_RECOVERY", "N");
                }
                if(rdoSubsidy_Yes.isSelected()){
                  repayData.put("SUBSIDY_EXISTS","Y");
                  repayData.put("SUBSIDY_AMOUNT",txtSubsidyAmt.getText());
                }else{
                  repayData.put("SUBSIDY_EXISTS","N");
                  repayData.put("SUBSIDY_AMOUNT",0.0);  
                }
                //            date=null;
                repayData.put("COMPOUNDING_PERIOD", observableRepay.getCbmRepayFreq_Repayment().getKeyForSelected());//CommonUtil.convertObjToStr(prodLevelValues.get("DEBITINT_COMP_FREQ")));
                String repay = CommonUtil.convertObjToStr(cboRepayType.getSelectedItem());
               if((repay == null || repay.equals("") || repay.equals(null)) && observable.isDailyLoan()){
                    cboRepayType.setSelectedItem("User Defined");
                }
                if (cboRepayType.getSelectedItem()!=null && !cboRepayType.getSelectedItem().equals("") &&  cboRepayType.getSelectedItem().equals("User Defined")) {
                    repayData.put("REPAYMENT_TYPE", observableRepay.getCbmRepayType().getKeyForSelected());
                } else {
                    repayData.put("REPAYMENT_TYPE", observableRepay.getCbmRepayType().getKeyForSelected());
                }
                repayData.put("PRINCIPAL_AMOUNT", txtTotalBaseAmt.getText());
                repayData.put("ROUNDING_FACTOR", "1_RUPEE");
                repayData.put("ROUNDING_TYPE", CommonUtil.convertObjToStr(prodLevelValues.get("DEBIT_INT_ROUNDOFF")));
                repayData.put("REPAYMENT_FREQUENCY", observableRepay.getCbmRepayFreq_Repayment().getKeyForSelected());
                if (observable.isDailyLoan()) {
                    repayData.put("TO_DATE", DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue()));
                }
            }
            //added by rishad for flat rate purpose  20/09/2016
            if (emi_flat_rate != null && emi_flat_rate.equals("Y")) {
                repayData.put("PROD_ID", (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
                if (tdtFDate.getDateValue() != null && !tdtFDate.getDateValue().equals("")) {
                    repayData.put("EMIF_DATE", DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue()));
                }
            }
            if (tblRepaymentCTable.getRowCount() > 0 && tblRepaymentCTable.getSelectedRow() != -1)//purpose existing installment taking from oracle table
            {
                repayData.put("SCHEDULE_ID", tblRepaymentCTable.getValueAt(tblRepaymentCTable.getSelectedRow(), 0));
            }

            //
            java.util.ArrayList interestList = new ArrayList();
            if (loanType.equals("LTD")) {
                interestList = observableInt.getInterestDetails(tdtFDate.getDateValue(), tdtTDate.getDateValue(), DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue()), DateUtil.getDateMMDDYYYY(tdtFirstInstall.getDateValue()));
            } else if (txtNoInstallments.getText().equals("1")) {
                interestList = observableInt.getInterestDetails(tdtFDate.getDateValue(), tdtTDate.getDateValue(), DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue()), DateUtil.getDateMMDDYYYY(tdtFirstInstall.getDateValue()));
            } else {
                interestList = observableInt.getInterestDetails(tdtFacility_Repay_Date.getDateValue(), tdtTDate.getDateValue(), DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue()), DateUtil.getDateMMDDYYYY(tdtFirstInstall.getDateValue()));
            }
            if (interestList != null && interestList.size() > 0) {
                repayData.put("INTEREST", ((HashMap) interestList.get(0)).get("INTEREST"));
                repayData.put("VARIOUS_INTEREST_RATE", interestList);
                repayData.put(loanType, "");
                ArrayList deletedRepaySchNosList = observableRepay.getDeletedRepaymentScheduleNos();

                StringBuffer deletedScheduleNos = new StringBuffer();
                int delCount = deletedRepaySchNosList.size();
                if (delCount != 0) {
                    for (int i = 0; i < delCount; i++) {
                        if (i == 0 || i == delCount) {
                            deletedScheduleNos.append(CommonUtil.convertObjToDouble(deletedRepaySchNosList.get(i)));
                        } else {
                            deletedScheduleNos.append("," + CommonUtil.convertObjToDouble(deletedRepaySchNosList.get(i)));
                        }
                    }
                    repayData.put("DELETEDSCHEDULES", deletedScheduleNos);
                }
                deletedRepaySchNosList = null;
                //                if(updateRepayment){
                //                    showExistingInstallment(repayData);
                //                    return;
                //                }
                //commented by abi need not to show installment details
                int installmentCount = CommonUtil.convertObjToInt(ClientUtil.executeQuery("getCountOfInstallments", repayData).get(0));
                int installmentCountTL = CommonUtil.convertObjToInt(ClientUtil.executeQuery("getCountOfInstallmentsTL", repayData).get(0));
                if (installmentCount > 0 || installmentCountTL == 0 || deleteInstallment || repayNewMode) {
                    if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
                        new TermLoanInstallmentUI(this, repayData).show();
                    } else {
                        new TermLoanInstallmentUI(this, repayData);
                    }
                } else {
                    if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
                        new TermLoanInstallmentUI(this, repayData, true).show();
                    } else {
                        new TermLoanInstallmentUI(this, repayData, true);
                    }
                }
            } else {
                displayAlert(resourceBundle.getString("interestDetailsWarning"));
            }
            repayData = null;
        } else {
            displayAlert(resourceBundle.getString("interestDetailsWarning"));
        }
    }
    private void rdoNo_DocumentDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoNo_DocumentDetailsActionPerformed
        // TODO add your handling code here:
        rdoNo_DocumentDetailsActionPerformed();
    }//GEN-LAST:event_rdoNo_DocumentDetailsActionPerformed
    private void rdoNo_DocumentDetailsActionPerformed() {
        if (rdoNo_DocumentDetails.isSelected()) {
            observableDocument.setTdtSubmitDate_DocumentDetails("");
            tdtSubmitDate_DocumentDetails.setDateValue("");
            tdtSubmitDate_DocumentDetails.setEnabled(false);
        }
    }
    private void rdoYes_DocumentDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoYes_DocumentDetailsActionPerformed
        // TODO add your handling code here:
        rdoYes_DocumentDetailsActionPerformed();
    }//GEN-LAST:event_rdoYes_DocumentDetailsActionPerformed
    private void rdoYes_DocumentDetailsActionPerformed() {
        if (rdoYes_DocumentDetails.isSelected()) {
            tdtSubmitDate_DocumentDetails.setEnabled(true);
        }
    }
    private void tdtSubmitDate_DocumentDetailsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtSubmitDate_DocumentDetailsFocusLost
        // TODO add your handling code here:
        tdtSubmitDate_DocumentDetailsFocusLost();
    }//GEN-LAST:event_tdtSubmitDate_DocumentDetailsFocusLost
    private void tdtSubmitDate_DocumentDetailsFocusLost() {
        // To check whether the Submitted Date is not future date
        ClientUtil.validateLTDate(tdtSubmitDate_DocumentDetails);
    }
    private void btnSave_DocumentDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave_DocumentDetailsActionPerformed
        // TODO add your handling code here:
        btnSave_DocumentDetailsActionPerformed();
    }//GEN-LAST:event_btnSave_DocumentDetailsActionPerformed
    private void btnSave_DocumentDetailsActionPerformed() {
        String strWarnMsg = isMandatoryEnteredNDocDetails();
        if (strWarnMsg.length() != 0) {
            displayAlert(strWarnMsg);
        } else {
            updateOBFields();
            observableDocument.saveDocumentTab(rowDocument);
            observableDocument.resetDocumentDetails();
            observable.ttNotifyObservers();
            chkDocumentcompleteStateChanged();
            setAllDocumentDetailsEnableDisable(false);
            rowDocument = -1;
            updateDocument = false;
        }
    }

    private String isMandatoryEnteredNDocDetails() {
        StringBuffer stbWarnMsg = new StringBuffer("");
        TermLoanMRB termLoanMRB = new TermLoanMRB();
        if (rdoYes_Executed_DOC.isSelected() && tdtExecuteDate_DOC.getDateValue().length() <= 0) {
            stbWarnMsg.append(termLoanMRB.getString("tdtExecuteDate_DOC"));
        }
        if (rdoYes_DocumentDetails.isSelected() && tdtSubmitDate_DocumentDetails.getDateValue().length() <= 0) {
            stbWarnMsg.append(termLoanMRB.getString("tdtSubmitDate_DocumentDetails"));
        }
        termLoanMRB = null;
        return stbWarnMsg.toString();
    }
    private void tblTable_DocumentDetailsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTable_DocumentDetailsMousePressed
        // TODO add your handling code here:
        tblTable_DocumentDetailsMousePressed();
    }//GEN-LAST:event_tblTable_DocumentDetailsMousePressed

    private void tblTable_DocumentDetailsMousePressed() {
        if (tblTable_DocumentDetails.getSelectedRow() >= 0) {
            updateOBFields();
            removeDocumentRadioBtns();
            addDocumentRadioBtns();
            observableDocument.resetDocumentDetails();
            observableDocument.populateDocumentDetails((tblTable_DocumentDetails.getSelectedRow()));
            if ((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Enquirystatus"))) {
                // If the record is populated for Delete or Authorization
                setAllDocumentDetailsEnableDisable(false);
                setDocumentToolBtnEnableDisable(false);
            } else {
                setAllDocumentDetailsEnableDisable(true);
                setDocumentToolBtnEnableDisable(true);
                if (observableDocument.getRdoNo_DocumentDetails()) {
                    tdtSubmitDate_DocumentDetails.setEnabled(false);
                }
                updateDocument = true;
            }
            rowDocument = tblTable_DocumentDetails.getSelectedRow();
            observable.ttNotifyObservers();
        }
    }

    private void txtFacility_Moratorium_PeriodFocusLost() {
        if (chkMoratorium_Given.isSelected()) {
            int period = CommonUtil.convertObjToInt(txtFacility_Moratorium_Period.getText());
            String periodStr = CommonUtil.convertObjToStr(txtFacility_Moratorium_Period.getText());
            if ((!periodStr.equals("")) && period <= 0) {
                ClientUtil.showAlertWindow("Morotorium Period should be More than Zero");
                txtFacility_Moratorium_Period.setText("");
                return;
            }
        }
        tdtFDateFocusLost();
        tdtTDateFocusLost();
        observable.setTxtFacility_Moratorium_Period(txtFacility_Moratorium_Period.getText());
    }

    private void moratorium_Given_Calculation() {
        if (!tdtFDate.getDateValue().equals("") && !cboRepayFreq.getSelectedItem().equals("") && !(txtNoInstallments.getText().length() == 0)) {
            if (chkMoratorium_Given.isSelected()) {
                java.util.GregorianCalendar gCalendar = new java.util.GregorianCalendar();
                gCalendar.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue()));
                gCalendar.setTime(DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue()));
                int incVal = CommonUtil.convertObjToInt(txtFacility_Moratorium_Period.getText());
                gCalendar.add(gCalendar.MONTH, incVal);
                tdtFacility_Repay_Date.setDateValue(DateUtil.getStringDate(gCalendar.getTime()));
                observable.setTdtFacility_Repay_Date(tdtFacility_Repay_Date.getDateValue());
                gCalendar = null;
            } else {
                if (loanType.equals("LTD")) {
                    tdtFacility_Repay_Date.setDateValue(tdtTDate.getDateValue());
                    observable.setTdtFacility_Repay_Date(tdtFacility_Repay_Date.getDateValue());
                }
                if (!loanType.equals("LTD")) {
                    tdtFacility_Repay_Date.setDateValue(tdtFDate.getDateValue());
                    observable.setTdtFacility_Repay_Date(tdtFacility_Repay_Date.getDateValue());
                }
            }
        }
    }

    private void moratorium_Given_RepayscheduleCalculation() {
        if (!tdtRepayFromDate.getDateValue().equals("") && !cboRepayFreq.getSelectedItem().equals("") && !(txtNoInstallments.getText().length() == 0)) {//tdtFirstInstall
            if (CommonUtil.convertObjToInt(txtNoMonthsMora.getText()) > 0)//if (chkMoratorium_Given.isSelected())
            {
                java.util.GregorianCalendar gCalendar = new java.util.GregorianCalendar();
                gCalendar.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtRepayFromDate.getDateValue()));//tdtFirstInstall.getDateValue()));
                gCalendar.setTime(DateUtil.getDateMMDDYYYY(tdtRepayFromDate.getDateValue()));//tdtFirstInstall.getDateValue()));
                int incVal = CommonUtil.convertObjToInt(txtNoMonthsMora.getText());
                observableRepay.setTxtNoMonthsMora(txtNoMonthsMora.getText());
                gCalendar.add(gCalendar.MONTH, incVal);
                tdtFirstInstall.setDateValue(DateUtil.getStringDate(gCalendar.getTime()));
                observableRepay.setTdtFirstInstall(tdtFirstInstall.getDateValue());
                gCalendar = null;
                repayMorotoruimavailable = true;
            } else {
                if (!loanType.equals("LTD")) {
                    repayMorotoruimavailable = false;
                    tdtFirstInstall.setDateValue(tdtRepayFromDate.getDateValue());
                    observableRepay.setTdtFirstInstall(tdtFirstInstall.getDateValue());
                }
            }
        }
    }

    private void txtFacility_Moratorium_PeriodFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFacility_Moratorium_PeriodFocusLost
        // TODO add your handling code here:
        txtFacility_Moratorium_PeriodFocusLost();
    }//GEN-LAST:event_txtFacility_Moratorium_PeriodFocusLost
    private void chkMoratorium_GivenStateChanged() {
        if (chkMoratorium_Given.isSelected()) {
            txtFacility_Moratorium_Period.setEnabled(true);
            tdtTDateFocusLost();
        } else {
            txtFacility_Moratorium_Period.setEnabled(false);
            txtFacility_Moratorium_Period.setText("");
            observable.setTxtFacility_Moratorium_Period("");
            tdtFDateFocusLost();
        }
    }
    private void chkMoratorium_GivenStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkMoratorium_GivenStateChanged
        // TODO add your handling code here:
        //        chkMoratorium_GivenStateChanged();
    }//GEN-LAST:event_chkMoratorium_GivenStateChanged
                                                                                                                        private void txtNoInstallFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNoInstallFocusLost
                                                                                                                            // TODO add your handling code here:
                                                                                                                            txtNoInstallFocusLost();
    }//GEN-LAST:event_txtNoInstallFocusLost
    private void txtNoInstallFocusLost() {
        calculateRepayToDate();
        calculateRepaymentToDate();//BALA REPAYMENT OUTSTANDING AMT BASED
        observableRepay.setTxtNoInstall(txtNoInstall.getText());
    }

    private void calculateRepayToDate() {
        if (!tdtRepayFromDate.getDateValue().equals("") && !cboRepayFreq_Repayment.getSelectedItem().equals("") && !txtNoInstall.getText().equals("")) {//tdtFirstInstall
            moratorium_Given_Calculation();
            java.util.GregorianCalendar gCalendar = new java.util.GregorianCalendar();
            gCalendar.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtRepayFromDate.getDateValue()));//tdtFirstInstall.getDateValue()));
            gCalendar.setTime(DateUtil.getDateMMDDYYYY(tdtRepayFromDate.getDateValue()));//tdtFirstInstall.getDateValue()));
            int dateVal = observableRepay.getRepayIncrementType();
            int incVal = observable.getInstallNo(txtNoInstall.getText(), dateVal);
            if (dateVal <= 7) {
                gCalendar.add(gCalendar.DATE, incVal);
            } else if (dateVal >= 30) {
                gCalendar.add(gCalendar.MONTH, incVal);
            }
            //            tdtLastInstall.setDateValue(DateUtil.getStringDate(gCalendar.getTime()));
            //            observableRepay.setTdtLastInstall(tdtLastInstall.getDateValue());
            //            gCalendar = null;
            //            tdtLastInstallFocusLost();
            //            if (tdtLastInstall.getDateValue().length() == 0){
            //                txtNoInstall.setText("");
            //                observableRepay.setTxtNoInstall(txtNoInstall.getText());
            //            }
        } else {
            //            tdtLastInstall.setDateValue("");
            //            observableRepay.setTdtLastInstall("");
        }
    }
    private void tdtAODDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtAODDateFocusLost
        // TODO add your handling code here:
        tdtAODDateFocusLost();
    }//GEN-LAST:event_tdtAODDateFocusLost
    private void tdtAODDateFocusLost() {
        // AOD date have to fall within Demand Promissory Note Issue Date and Expiry Date
        ClientUtil.validateFromDate(tdtAODDate, tdtDemandPromNoteExpDate.getDateValue());
        ClientUtil.validateToDate(tdtAODDate, DateUtil.getStringDate(DateUtil.addDays((Date) curr_dt.clone(), -1)));
    }

    private void txtNoInstallmentsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNoInstallmentsFocusLost
        // TODO add your handling code here:
        txtNoInstallmentsFocusLost();
    }//GEN-LAST:event_txtNoInstallmentsFocusLost
    private void txtNoInstallmentsFocusLost() {
        System.out.println("cboRepayFreq.getSelectedItem()&$$$&"+cboRepayFreq.getSelectedItem());
        if (cboRepayFreq.getSelectedItem().equals("User Defined") || cboRepayFreq.getSelectedItem().equals("Lump Sum")) {
            moratorium_Given_Calculation();
        } else {
            calculateSanctionToDate();
        }
        populatePeriodDifference();
    }
    private void txtLimit_SDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLimit_SDFocusLost
        // TODO add your handling code here:
        if (!CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
            setImbpSettings();//this line added by Anju Anand for Mantid Id: 0010365
        }
               //added by rishad 
                HashMap  whereShareMap=new HashMap();
                double maxShareValue=0;
                String shareNo = txtExistingAcctNo.getText();
                whereShareMap.put("SHARE_ACCT_NO", shareNo);
                List resultList = ClientUtil.executeQuery("getShareValueProdDetails", whereShareMap);
               if (resultList != null && resultList.size() > 0) {
               HashMap resultMap = (HashMap) resultList.get(0);
              if (resultMap.containsKey("MAX_SHARE_VALUE") && resultMap.get("MAX_SHARE_VALUE") != null) {
                maxShareValue = CommonUtil.convertObjToDouble(resultMap.get("MAX_SHARE_VALUE"));
                }
              }
        String mainLimit = CommonUtil.convertObjToStr(txtLimit_SD.getText());
        //deposit lien shoude be changed while limit is changed
        if (loanType.equals("LTD")) {
            if (observable.getProductCategory().equals("OTHER_LOAN")) {//&& observable.getStrACNumber().length()>0)
                if (mainLimitMarginValidation(mainLimit)) {
                    return;
                }
            } else {
                if (eligibleAmt < CommonUtil.convertObjToDouble(mainLimit).doubleValue()) {
                    ClientUtil.showAlertWindow("Limit amount should not exceed " + eligibleAmt);
                    txtLimit_SD.setText(String.valueOf(eligibleAmt));
                    return;
                }
            }
            morotoriumEnableDisable(false);
        }
        //
        rupeesValidation(mainLimit);
        txtLimit_SDFocusLost();
        //od balance check
        txtLimit_SDFocusLostOD(true);
        //vivek
        HashMap casteMap = new HashMap();
        casteMap.put("CUSTID", txtCustID.getText());
        String caste = "";
        double borrowerShare = 0.0;
        List casteList = ClientUtil.executeQuery("getSelectCasteForLoanAppl", casteMap);
        if (casteList != null && casteList.size() > 0) {
            casteMap = (HashMap) casteList.get(0);
            caste = CommonUtil.convertObjToStr(casteMap.get("CASTE"));
        }
        HashMap scStMap = new HashMap();
        scStMap.put("PROD_ID", observable.getCbmProductId().getKeyForSelected());

        List scStList = ClientUtil.executeQuery("getSelectExcludeScStFromLoansProduct", scStMap);
        if (scStList != null && scStList.size() > 0) {
            scStMap = (HashMap) scStList.get(0);
            excludeScSt = CommonUtil.convertObjToStr(scStMap.get("EXCLUDE_SC_ST"));
        }
        HashMap shareLinkMap = new HashMap();
        shareLinkMap.put("PROD_ID", observable.getCbmProductId().getKeyForSelected());
        List shareLinkList = ClientUtil.executeQuery("getSelectShareLinkFromLoansProduct", shareLinkMap);
        if (shareLinkList != null && shareLinkList.size() > 0) {
            shareLinkMap = (HashMap) shareLinkList.get(0);
            shareLink = CommonUtil.convertObjToStr(shareLinkMap.get("SHARE_LINKING"));
            if(CommonUtil.convertObjToStr(shareLinkMap.get("LOAN_RENEWAL_ALLOWED")).equals("Y")){ // Added by nithya on 03-01-2021 for loan renewal purpose
                loanRenewalAllowedForProduct = true;
            }
            if(CommonUtil.convertObjToStr(shareLinkMap.get("LOAN_RECEIPT_IN_RENEWAL")).equals("Y")){ // Added by nithya on 03-01-2021 for loan renewal purpose
                loanReceiptInRenewal = true;
            }
        }
        if (shareLink.equals("Y")) {
            if (excludeScSt.equals("Y") && caste.equals("SC/ST")) {
                ClientUtil.showMessageWindow("Caste is SC/ST.. SC/ST is excluded in share linking");
                return;
            } else {
            double oneShareAmt = 0.0;
            HashMap casteMap1 = new HashMap();
            casteMap1.put("CUST_ID", txtCustID.getText());
            casteMap1.put("PROD_ID", observable.getCbmProductId().getKeyForSelected());
            List casteList1 = ClientUtil.executeQuery("getSelectMaxShareBorrower", casteMap1);
            if (casteList1 != null && casteList1.size() > 0) {
                HashMap m1 = new HashMap();
                m1 = (HashMap) casteList1.get(0);
                borrowerShare = CommonUtil.convertObjToDouble(m1.get("MAX_SHARE_BORROWER"));
            }
            if (borrowerShare != 0.0) {
                double loanAmt = 0.0;
                    double loanAmt1 = 0.0;
                    String behaveslikeOD = "";
                    HashMap hash2 = new HashMap();
                    hash2.put("CUST_ID", CommonUtil.convertObjToStr(txtCustID.getText()));
                    List behaveslike = ClientUtil.executeQuery("getSelectBehavesLikeForODFrmAdvanceProdct", hash2);
                    if (behaveslike != null && behaveslike.size() > 0) {
                        hash2 = (HashMap) behaveslike.get(0);
                        behaveslikeOD = hash2.get("BEHAVES_LIKE").toString();
                 }
                if (!behaveslikeOD.equals("OD")) {
                    HashMap loanMap = new HashMap();
                    loanMap.put("CUSTID", txtCustID.getText());
                    List loanList = ClientUtil.executeQuery("getSelectTotalPendingLoanAmount", loanMap);
                    if (loanList != null && loanList.size() > 0) {
                        loanMap = (HashMap) loanList.get(0);
                        if (loanMap.get("TOT_BAL") != null) {
                            loanAmt = CommonUtil.convertObjToDouble(loanMap.get("TOT_BAL"));
                            loanAmt = Math.abs(loanAmt);
                            ClientUtil.showMessageWindow("Old loan amount for the customer is " + loanAmt);
                        }
                    }
                }
                    if (behaveslikeOD.equals("OD")) {
                        HashMap loanMap1 = new HashMap();
                        loanMap1.put("CUSTID", txtCustID.getText());
                        List loanList1 = ClientUtil.executeQuery("getSelectLimitAmtForOD", loanMap1);
                        if (loanList1 != null && loanList1.size() > 0) {
                            loanMap1 = (HashMap) loanList1.get(0);
                            if (loanMap1.get("LIMIT") != null) {
                                loanAmt1 = CommonUtil.convertObjToDouble(loanMap1.get("LIMIT"));
                                loanAmt1 = Math.abs(loanAmt1);
                                ClientUtil.showMessageWindow("Old loan amount for the customer having OD is " + loanAmt1);
                            }
                        }
                    }
                    double amt = 0.0;
                    if (behaveslikeOD.equals("OD")) {
                        amt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()) + loanAmt1;
                    } else {
                        amt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()) + loanAmt;
                    }
                double bamt = amt * borrowerShare / 100;
                balanceShare = bamt - CommonUtil.convertObjToDouble(txtTotalShareAmount.getText());
                double totalshare = CommonUtil.convertObjToDouble(txtTotalShareAmount.getText());
                double totalShareNo = CommonUtil.convertObjToDouble(txtTotalNoOfShare.getText());
                oneShareAmt = totalshare / totalShareNo;
                if (balanceShare > maxShareValue) {                    
                    balnoShare = (CommonUtil.convertObjToDouble(maxShareValue) - CommonUtil.convertObjToDouble(txtTotalShareAmount.getText())) / oneShareAmt;
                    balnoShare = Math.ceil(balnoShare);
                        if (balnoShare < 0) {
                            ClientUtil.showMessageWindow("No share to recover!");
                            //return;
                        }
                        if(balnoShare > 0)
                            txtBalanceShare.setText(CommonUtil.convertObjToStr(balnoShare));
                } else {                    
                    balnoShare = balanceShare / oneShareAmt;
                    balnoShare = Math.ceil(balnoShare);
                        if (balnoShare < 0) {
                            ClientUtil.showMessageWindow("No share to recover!");
                            //return;
                        }
                        if(balnoShare > 0)
                             txtBalanceShare.setText(CommonUtil.convertObjToStr(balnoShare));
                }
            } else {
                ClientUtil.showMessageWindow("Borrower Share is 0");
            }
            }
        } else {
            ClientUtil.showMessageWindow("Share Linking is not set in product!!!");
        }
        if (!CommonUtil.convertObjToStr(txtLimit_SD.getText()).equals(CommonUtil.convertObjToStr(observable.getTxtLimit_SD()))) {
            if (loanType.equals("LTD") && tblRepaymentCTable.getRowCount() > 0 && (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW
                    || observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT)) {
                if (tblRepaymentCTable.getRowCount() > 0) {
                    sanMousePress = true;
                    updateOBFields();
                    tblRepaymentCTableMousePressed();
                    btnRepayment_DeleteActionPerformed();
                    btnRepayment_NewActionPerformed();
                    btnEMI_CalculateActionPerformed();
                    btnRepayment_SaveActionPerformed();
                }
            }
        }
        if (!loanType.equals("LTD") && observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
            if (CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue() > 0) {
                double shareSanctionAmt = 0.0;
                double totalShareSanctionAmt = 0.0;
                double finalTotalSanctionAmt = 0.0;
                HashMap shareMap = new HashMap();
                String loanType = "";
                String displayStr = "";
                shareMap.put("CUST_ID", txtCustID.getText());
                shareMap.put("PRODUCT_ID", CommonUtil.convertObjToStr(((ComboBoxModel) cboProductId.getModel()).getKeyForSelected()));
                List shareLimitLst = ClientUtil.executeQuery("getShareLoanLimitPercentage", shareMap);
                if (shareLimitLst != null && shareLimitLst.size() > 0) {
                    for (int i = 0; i < shareLimitLst.size(); i++) {
                        double percentage = 0.0;
                        double totalSanctionAmt = 0.0;
                        shareMap = (HashMap) shareLimitLst.get(i);
                        percentage = CommonUtil.convertObjToDouble(shareMap.get("BORROWER_SHARE_PERCENTAGE")).doubleValue();
                        loanType = CommonUtil.convertObjToStr(shareMap.get("LOAN_TYPE"));
                        double maxLoanAmt = CommonUtil.convertObjToDouble(shareMap.get("MAX_LOAN_AMT")).doubleValue();
                        if (loanType.equals("OTHER_LOAN")) {
                            totalSanctionAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
                        }
                        HashMap loanSanctionMap = new HashMap();
                        loanSanctionMap.put("CUST_ID", txtCustID.getText());
                        loanSanctionMap.put("AUTHORIZE_REMARK", loanType);
                        List list = null;
                        if (loanType.equals("OTHER_LOAN")) {
                            list = ClientUtil.executeQuery("getAllLimitAmountsForOtherLoans", loanSanctionMap);
                        } else {
                            list = ClientUtil.executeQuery("getAllLimitAmountsForGoldLoans", loanSanctionMap);
                        }
                        if (list != null && list.size() > 0) {
                            HashMap hmap = (HashMap) list.get(0);
                            double limitAmt = CommonUtil.convertObjToDouble(hmap.get("SANCTION")).doubleValue();
                            double limit = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
                            limitAmt = limitAmt + limit;
                            if (maxLoanAmt > 0.0) {
                                if (limitAmt > maxLoanAmt) {
                                    ClientUtil.showMessageWindow("Exceeds  Maximum Loan Limit Specified");
                                    txtLimit_SD.setText("");
                                    txtLimit_SD.requestDefaultFocus();
                                    return;
                                }
                            }
                        }
                        List loanSanctionLst = ClientUtil.executeQuery("getTotalSanctionAmount", loanSanctionMap);
                        if (loanSanctionLst != null && loanSanctionLst.size() > 0) {
                            loanSanctionMap = new HashMap();
                            for (int j = 0; j < loanSanctionLst.size(); j++) {
                                loanSanctionMap = (HashMap) loanSanctionLst.get(j);
                                totalSanctionAmt = totalSanctionAmt + CommonUtil.convertObjToDouble(loanSanctionMap.get("OUTSTANDING_AMOUNT")).doubleValue();
                                displayStr += "Existing Loan No  : " + loanSanctionMap.get("ACCT_NUM") + "\n"
                                        + "Limit                     : Rs " + loanSanctionMap.get("SANCTION_AMOUNT") + "\n"
                                        + "OUTSTANDING AMOUNT                    : Rs " + loanSanctionMap.get("OUTSTANDING_AMOUNT") + "\n";
                            }
                            finalTotalSanctionAmt = finalTotalSanctionAmt + totalSanctionAmt;
                            shareSanctionAmt = totalSanctionAmt * percentage / 100;
                        }
                        totalShareSanctionAmt = totalShareSanctionAmt + shareSanctionAmt;
                    }
                    if (finalTotalSanctionAmt > 0) {
                        finalTotalSanctionAmt = finalTotalSanctionAmt - CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
                    } else {
                        HashMap whereMap = new HashMap();
                        whereMap.put("PRODUCT_ID", CommonUtil.convertObjToStr(((ComboBoxModel) cboProductId.getModel()).getKeyForSelected()));
                        whereMap.put("CUST_ID", txtCustID.getText());
                        List shareLimitNewLst = ClientUtil.executeQuery("getShareLoanLimitPercentage", whereMap);
                        double percentage = 0.0;
                        if (shareLimitNewLst != null && shareLimitNewLst.size() > 0) {
                            shareMap = (HashMap) shareLimitNewLst.get(0);
                            percentage = CommonUtil.convertObjToDouble(shareMap.get("BORROWER_SHARE_PERCENTAGE")).doubleValue();
                            loanType = CommonUtil.convertObjToStr(shareMap.get("LOAN_TYPE"));
                            double maxLoanAmt = CommonUtil.convertObjToDouble(shareMap.get("MAX_LOAN_AMT")).doubleValue();
                            shareSanctionAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue() * percentage / 100;
                            totalShareSanctionAmt = shareSanctionAmt;
                        }
                    }
                    double shortFallAmt = 0.0;
                    if (CommonUtil.convertObjToDouble(txtTotalShareAmount.getText()).doubleValue() >= totalShareSanctionAmt) {
                        shortFallAmt = 0;
                    } else {
                        shortFallAmt = totalShareSanctionAmt - CommonUtil.convertObjToDouble(txtTotalShareAmount.getText()).doubleValue();
                    }
                    Rounding rod = new Rounding();
                    shortFallAmt = (double) rod.getNearest((long) (shortFallAmt * 100), 100) / 100;
                    if (CommonUtil.convertObjToDouble(txtTotalShareAmount.getText()).doubleValue() >=maxShareValue) {
                        totalShareSanctionAmt = maxShareValue;
                        shortFallAmt = 0;
                    }
                       displayStr += "Total Limits                                      : Rs " + finalTotalSanctionAmt + "\n";
                        displayStr += "Share Value to be Subscribed         : Rs " + totalShareSanctionAmt + "\n";
                        displayStr += "Present Share Amount Subscribed : Rs " + txtTotalShareAmount.getText() + "\n";
                        displayStr += "Shortfall                                          : Rs " + shortFallAmt;
                    if (CommonUtil.convertObjToDouble(txtTotalShareAmount.getText()).doubleValue() < totalShareSanctionAmt) {
                        if (!displayStr.equals("")) {
                            ClientUtil.showMessageWindow("" + displayStr);
                        }
                        int c = ClientUtil.confirmationAlert("Do you want to Continue");
                        int d = 0;
                        if (c != d) {
                            return;
                        }
                    } else {
                        if (!displayStr.equals("")) {
                            ClientUtil.showMessageWindow("" + displayStr);
                        }
                    }
                }
            }
        }
        //Added By Suresh
        if (!loanType.equals("LTD") && observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {  //IMBP
            HashMap whereMap = new HashMap();
            whereMap.put("CUST_ID", txtCustID.getText());
            List imbpLst = ClientUtil.executeQuery("getShareIMBPAmount", whereMap);
            if (imbpLst != null && imbpLst.size() > 0) {
                String displayStr = "";
                double imbpAmt = 0.0;
                double totalSanctionAmt = 0.0;
                double finalTotalSanctionAmt = 0.0;
                whereMap = (HashMap) imbpLst.get(0);
                imbpAmt = CommonUtil.convertObjToDouble(whereMap.get("IMBP_AMOUNT")).doubleValue();
                double sanctionAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
                if (imbpAmt > 0) {
                    HashMap loanSanctionMap = new HashMap();
                    loanSanctionMap.put("CUST_ID", txtCustID.getText());
                    List loanSanctionLst = ClientUtil.executeQuery("getTotalSanctionAmountOnlyTL", loanSanctionMap);
                    if (loanSanctionLst != null && loanSanctionLst.size() > 0) {
                        loanSanctionMap = new HashMap();
                        for (int j = 0; j < loanSanctionLst.size(); j++) {
                            loanSanctionMap = (HashMap) loanSanctionLst.get(j);
                            totalSanctionAmt += CommonUtil.convertObjToDouble(loanSanctionMap.get("SANCTION_AMOUNT")).doubleValue();
                            displayStr += "Existing Loan No  : " + loanSanctionMap.get("ACCT_NUM") + "\n"
                                    + "Limit                     : Rs " + loanSanctionMap.get("SANCTION_AMOUNT") + "\n";
                        }
                        finalTotalSanctionAmt = totalSanctionAmt + sanctionAmt;
                        if (imbpAmt < finalTotalSanctionAmt) {
                            displayStr += "IMBP Amount                           :  Rs " + imbpAmt + "\n";
                            displayStr += "Total Sanction Amount            :  Rs " + totalSanctionAmt + "\n";
                            displayStr += "IMBP Balance Amount             :  Rs " + (imbpAmt - totalSanctionAmt);
                            if (!displayStr.equals("")) {
                                ClientUtil.showMessageWindow("" + displayStr);
                            }
                            txtLimit_SD.setText("");
                            return;
                        }
                    }
                }
            }
        }
        //Added By Suresh
        if (!loanType.equals("LTD") && observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {    // Loan Charges
            prodDesc = CommonUtil.convertObjToStr(cboProductId.getModel().getSelectedItem());
            chrgTableEnableDisable();
            createChargeTable(prodDesc);
            chargeAmount();
        }
        //added by rishad for closing Existing loan of  this customer --purpose that is closing exing one sanctioing new one
        //if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
          if (loanRenewalAllowedForProduct) {
            boolean continueForRenewal = false;  
            String AcctNum = "";
            HashMap resultMap = new HashMap();
            prodDesc = CommonUtil.convertObjToStr(cboProductId.getModel().getSelectedItem());
            HashMap whereMap = new HashMap();
            whereMap.put("CUSTID", txtCustID.getText());
            whereMap.put("PROD_DESC", prodDesc);
            whereMap.put("BRANCH_CODE",TrueTransactMain.BRANCH_ID);
            List acctList = ClientUtil.executeQuery("getLoanAcctNum", whereMap);
            if (acctList != null && acctList.size() > 0) {
                resultMap = (HashMap) acctList.get(0);
                if (resultMap != null && resultMap.containsKey("ACCT_NUM")) {
                    AcctNum = CommonUtil.convertObjToStr(resultMap.get("ACCT_NUM"));
                }
            }
            //  int message = ClientUtil.confirmationAlert("Do You Want to Close the Existing Loan A/c?"
            // if (message == 0) {
           if (AcctNum!=null && AcctNum.length() > 0) {
               oldLoanNo = AcctNum;
               if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
                   ClientUtil.showMessageWindow("Loan exists for the customer :" + AcctNum +"\n Closing the account for sanctioning new loan.");
                   continueForRenewal = true;
               } else {
                   int confirm = ClientUtil.confirmationAlert("Do You Want to Close the Existing Loan A/c - " +AcctNum +" ?");
                   if (confirm == 0) {
                     continueForRenewal = true;  
                   }
               }
               if(continueForRenewal){
                HashMap whereSus = new HashMap();
                whereSus.put("PROD_ID", observable.getCbmProductId().getKeyForSelected());
                whereSus.put("BRANCH_CODE",TrueTransactMain.BRANCH_ID);
                List acctListSus = ClientUtil.executeQuery("getLoanAdjSA", whereSus);
                if (acctListSus != null && acctListSus.size() > 0) {
                    resultMap = (HashMap) acctListSus.get(0);
                    if (resultMap != null && resultMap.containsKey("ACCT_NUM")) {
                        suspenseActNum = CommonUtil.convertObjToStr(resultMap.get("ACCT_NUM"));
                    }
                }
                HashMap hash = new HashMap();
                CInternalFrame frm = new com.see.truetransact.ui.operativeaccount.AccountClosingUI("TermLoan");
                frm.setSelectedBranchID(getSelectedBranchID());
                TrueTransactMain.showScreen(frm);
                loanRenewal = true;
                hash.put("FROM_TRANSACTION_SCREEN", "FROM_TRANSACTION_SCREEN");
                hash.put("ACCOUNT NUMBER", AcctNum);
                hash.put("DEBIT_NUMBER", suspenseActNum);
                hash.put("PROD_TYPE", "SA");
                hash.put("LOAN_RENEWAL", "LOAN_RENEWAL");
                System.out.println("prod id" + CommonUtil.convertObjToStr(cboProductId.getSelectedItem()));
                hash.put("PROD_ID", prodDesc);
                frm.fillData(hash);
                loannaration = "Old Loan AcctNo:" + AcctNum + "Closing Amount:";
            }
       }
           
            List oldActList = ClientUtil.executeQuery("getCustomerRenewedLoanNo", whereMap);
            if (oldActList != null && oldActList.size() > 0) {
                resultMap = (HashMap) oldActList.get(0);
                if (resultMap != null && resultMap.containsKey("CLOSING_LOAN_NO")) {
                    closingInProgress = true;
                    oldLoanNo = CommonUtil.convertObjToStr(resultMap.get("CLOSING_LOAN_NO"));
                    oldloanAmt = CommonUtil.convertObjToDouble(resultMap.get("CLOSING_AMOUNT"));
                    suspenseActNum = CommonUtil.convertObjToStr(resultMap.get("DEBIT_ACT_NUM"));
                    loannaration = "Old Loan AcctNo:" + oldLoanNo + "Closing Amount:";
                }
            }
           
       }
//end
     //  }       
    }//GEN-LAST:event_txtLimit_SDFocusLost
    //Added By Suresh CHARGE_AMOUNT_START
    private void createChargeTable(String prodDesc) {
        HashMap tableMap = buildData(prodDesc);
        ArrayList dataList = new ArrayList();
        dataList = (ArrayList) tableMap.get("DATA");
        if (dataList != null && dataList.size() > 0) {
            tableFlag = true;
            ArrayList headers;
            panChargeDetails.setVisible(true);
            SimpleTableModel stm = new SimpleTableModel((ArrayList) tableMap.get("DATA"), (ArrayList) tableMap.get("HEAD"));
            table = new JTable(stm);
            table.setSize(430, 110);
            table.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tableMouseClicked(evt);
                }
            });
           
            // Added by nithya on 27-04-2016 for 4305
            srpChargeDetails = new javax.swing.JScrollPane(table,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);           
            Dimension d = new Dimension(430, 800);
            table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            table.setPreferredSize(d);
            table.setPreferredScrollableViewportSize(d);
            // End
            srpChargeDetails.setMinimumSize(new java.awt.Dimension(430, 110));
            srpChargeDetails.setPreferredSize(new java.awt.Dimension(430, 110));
            panChargeDetails.add(srpChargeDetails, new java.awt.GridBagConstraints());
            table.getColumnModel().getColumn(0).setPreferredWidth(15);
            table.getColumnModel().getColumn(1).setPreferredWidth(35);
            table.getColumnModel().getColumn(2).setPreferredWidth(50);
            table.getColumnModel().getColumn(3).setPreferredWidth(30);
            table.getColumnModel().getColumn(4).setPreferredWidth(20);
            table.getColumnModel().getColumn(5).setPreferredWidth(20);
            table.revalidate();
        } else {
            tableFlag = false;
            chrgTableEnableDisable();
        }
    }
    
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {         
        int column = CommonUtil.convertObjToInt(table.getSelectedColumn());
        boolean checked = false;
        String desc = CommonUtil.convertObjToStr(table.getValueAt(table.getSelectedRow(), 1));
        System.out.println("column"+column+"desc"+desc);
        if (column == 0 && desc != null && !desc.equals("") && desc.equals("Estimation Fee")) {
            checked = new Boolean(CommonUtil.convertObjToStr(table.getValueAt(table.getSelectedRow(), 0))).booleanValue();
            System.out.println("checked"+checked);
            if (checked) {
                SuspenceAcctSearchUI suspenceAcctSearchUI = new SuspenceAcctSearchUI(this);
                suspenceAcctSearchUI.show();
                if(observable.isTableCheck()){
                    table.setValueAt(false, table.getSelectedRow(), 0);
                    table.updateUI();
                }
            } else {
                observable.setSuspenceAccountNo("");
                observable.setSuspenceProductID("");
            }
            checked = false;
        }
        /* Code commented start---- nithya*/
//        if (serviceTaxApplMap != null && serviceTaxApplMap.size() > 0) {
//            double chrgamt = 0;
//            for(int i=0;i<table.getRowCount();i++){
//                
//            
//            boolean checkFlag = new Boolean(CommonUtil.convertObjToStr(table.getValueAt(i, 0))).booleanValue();
//             String descVal = CommonUtil.convertObjToStr(table.getValueAt(i, 1));
//            if (checkFlag && CommonUtil.convertObjToStr(serviceTaxApplMap.get(descVal)).equals("Y")) {
//                if (checkFlag) {
//                    chrgamt = chrgamt+ CommonUtil.convertObjToDouble(CommonUtil.convertObjToStr(table.getValueAt(i, 3)));
//                } 
//            }
//			 if (chrgamt > 0) {
//                    HashMap ser_Tax_Val = new HashMap();
//                    ser_Tax_Val.put(ServiceTaxCalculation.CURR_DT, ClientUtil.getCurrentDate());
//                    ser_Tax_Val.put(ServiceTaxCalculation.TOT_AMOUNT, CommonUtil.convertObjToStr(chrgamt));
//                    ser_Tax_Val.put("SERVICE_TAX_ID",serviceTaxIdMap.get(descVal));
//                    try {
//                        objServiceTax = new ServiceTaxCalculation();
//                        serviceTax_Map = objServiceTax.calculateServiceTax(ser_Tax_Val);
//                        if (serviceTax_Map != null && serviceTax_Map.containsKey(ServiceTaxCalculation.TOT_TAX_AMT)) {
//                            String amt = CommonUtil.convertObjToStr(serviceTax_Map.get(ServiceTaxCalculation.TOT_TAX_AMT));
//                            lblServiceTaxval.setText(objServiceTax.roundOffAmt(amt, "NEAREST_VALUE"));
//                            serviceTax_Map.put(ServiceTaxCalculation.TOT_TAX_AMT, objServiceTax.roundOffAmt(amt, "NEAREST_VALUE"));
//                        } else {
//                            lblServiceTaxval.setText("0.00");
//                        }
//
//                    } catch (Exception ex) {
//                        ex.printStackTrace();
//                    }
//
//                }else{
//                lblServiceTaxval.setText("0.00");
//                }
//            }
//        }
        /*Code commented ends -- nithya*/
        
        if (serviceTaxApplMap != null && serviceTaxApplMap.size() > 0) {                
                List taxSettingsList = new ArrayList();              
                for (int i = 0; i < table.getRowCount(); i++) {
                      double chrgamt = 0;
                    HashMap serviceTaSettingsMap = new HashMap();
                    boolean checkFlag = new Boolean(CommonUtil.convertObjToStr(table.getValueAt(i, 0))).booleanValue();
                    String descVal = CommonUtil.convertObjToStr(table.getValueAt(i, 1));
                    System.out.println("checkFlag"+checkFlag);
                    if (checkFlag && CommonUtil.convertObjToStr(serviceTaxApplMap.get(descVal)).equals("Y") && CommonUtil.convertObjToStr(serviceTaxIdMap.get(descVal)).length() > 0 ) {
                         System.out.println("entered"+descVal);
                        chrgamt = CommonUtil.convertObjToDouble(CommonUtil.convertObjToStr(table.getValueAt(i, 3)));
                         if (chrgamt > 0) {   
                        serviceTaSettingsMap.put("SETTINGS_ID",serviceTaxIdMap.get(descVal));
                        serviceTaSettingsMap.put(ServiceTaxCalculation.TOT_AMOUNT,CommonUtil.convertObjToStr(chrgamt));
                        //serviceTaSettingsMap.put(serviceTaxIdMap.get(descVal), CommonUtil.convertObjToStr(chrgamt));    
                        taxSettingsList.add(serviceTaSettingsMap);
                    } 
                    }
                   
                }
                System.out.println("serviceTaSettingsMap :: "+ taxSettingsList);
                try {
                    objServiceTax = new ServiceTaxCalculation();
                    HashMap ser_Tax_Val = new HashMap();
                    ser_Tax_Val.put(ServiceTaxCalculation.CURR_DT, ClientUtil.getCurrentDate());
                   // ser_Tax_Val.put(ServiceTaxCalculation.TOT_AMOUNT, CommonUtil.convertObjToStr(chrgamt));
                    ser_Tax_Val.put("SERVICE_TAX_DATA", taxSettingsList);
                    serviceTax_Map = objServiceTax.calculateServiceTax(ser_Tax_Val);
                    if (serviceTax_Map != null && serviceTax_Map.containsKey(ServiceTaxCalculation.TOT_TAX_AMT)) {
                        String amt = CommonUtil.convertObjToStr(serviceTax_Map.get(ServiceTaxCalculation.TOT_TAX_AMT));
//                        lblServiceTaxval.setText(objServiceTax.roundOffAmt(amt, "NEAREST_VALUE"));
//                        serviceTax_Map.put(ServiceTaxCalculation.TOT_TAX_AMT, objServiceTax.roundOffAmt(amt, "NEAREST_VALUE"));
                        lblServiceTaxval.setText(amt);
                        serviceTax_Map.put(ServiceTaxCalculation.TOT_TAX_AMT, amt);
                    } else {
                        lblServiceTaxval.setText("0.00");
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        
    }

    private void chrgTableEnableDisable() {
        tableFlag = false;
        panChargeDetails.removeAll();
        panChargeDetails.setVisible(false);
    }

    private HashMap buildData(String prodDesc) {
        HashMap whereMap = new HashMap();
        whereMap.put("SCHEME_ID", prodDesc);
        whereMap.put("DEDUCTION_ACCU", "O");
        List list = ClientUtil.executeQuery("getChargeDetailsData", whereMap);
        boolean _isAvailable = list.size() > 0 ? true : false;
        ArrayList _heading = null;
        ArrayList data = new ArrayList();
        ArrayList colData = new ArrayList();
        HashMap map;
        Iterator iterator = null;
        if (_isAvailable) {
            map = (HashMap) list.get(0);
            iterator = map.keySet().iterator();
        }
        if (_isAvailable && _heading == null) {
            _heading = new ArrayList();
            _heading.add("Select");
            while (iterator.hasNext()) {
                _heading.add((String) iterator.next());
            }
        }

        String cellData = "", keyData = "";
        Object obj = null;
        for (int i = 0, j = list.size(); i < j; i++) {
            map = (HashMap) list.get(i);
            colData = new ArrayList();
            iterator = map.values().iterator();
            if (CommonUtil.convertObjToStr(map.get("M")).equals("Y")) {
                colData.add(new Boolean(true));
            } else {
                colData.add(new Boolean(false));
            }
            while (iterator.hasNext()) {
                obj = iterator.next();
                //                if (obj != null) {
                colData.add(CommonUtil.convertObjToStr(obj));
                //                } else {
                //                    colData.add("");
                //                }
            }
            data.add(colData);
        }
        map = new HashMap();
        map.put("HEAD", _heading);
        map.put("DATA", data);
        return map;
    }
    
    //this function added by Anju Anand for Mantid Id: 0010365: IMBP Limit Setting
    private void setImbpSettings() {
        if (cboProductId.getSelectedItem().equals("") || txtCustID.getText().equals("")) {
            ClientUtil.showMessageWindow("Please enter all the necessary details..!!!");
            txtLimit_SD.setText("");
            return;
        } else {
            String prodId = "";
            prodId = CommonUtil.convertObjToStr(((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
            HashMap dataMap = new HashMap();
            dataMap.put("PROD_ID", prodId);
            List prodList = null;
            prodList = ClientUtil.executeQuery("getImbpType", dataMap);
            if (prodList != null && prodList.size() > 0) {
                HashMap prodMap = new HashMap();
                prodMap = (HashMap) prodList.get(0);
                String imbpType = "";
                imbpType = CommonUtil.convertObjToStr(prodMap.get("IMBP_TYPE"));
                if (imbpType != null && !imbpType.equals("")) {
                    dataMap.put("IMBP_TYPE", imbpType);
                    String custId = "";
                    custId = txtCustID.getText();
                    String shareNo = "";
                    shareNo = txtExistingAcctNo.getText();
                    dataMap.put("SHARE_ACCT_NO", shareNo);
                    List shareList = null;
                    shareList = ClientUtil.executeQuery("selectShareType", dataMap);
                    if (shareList != null && shareList.size() > 0) {
                        HashMap newMap = new HashMap();
                        newMap = (HashMap) shareList.get(0);
                        String shareType = "";
                        shareType = CommonUtil.convertObjToStr(newMap.get("SHARE_TYPE"));
                        if (shareType != null && !shareType.equals("")) {
                            dataMap.put("SHARE_TYPE", shareType);
                        } else {
                            dataMap.put("SHARE_TYPE", " ");
                        }
                    } else {
                        dataMap.put("SHARE_TYPE", " ");
                    }
                    List imbpList = null;
                    imbpList = ClientUtil.executeQuery("getMaxImbpLoanAmt", dataMap);
                    if (imbpList != null && imbpList.size() > 0) {
                        HashMap imbpMap = new HashMap();
                        imbpMap = (HashMap) imbpList.get(0);
                        double maxImbpAmt = 0;
                        maxImbpAmt = CommonUtil.convertObjToDouble(imbpMap.get("MAX_LOAN_AMOUNT"));
                        // Added by nithya on 21-07-2016 for 4922
                        int maxNoOfLoans = 0;
                        if (imbpMap.containsKey("MAX_NO_OF_LOANS") && imbpMap.get("MAX_NO_OF_LOANS") != null && !imbpMap.get("MAX_NO_OF_LOANS").equals("")) {
                            maxNoOfLoans = CommonUtil.convertObjToInt(imbpMap.get("MAX_NO_OF_LOANS"));
                        }
                        // End
                        double loanAmt = 0;
                        loanAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText());
                        dataMap.put("CUST_ID", custId);
                        List list = null;
                        list = ClientUtil.executeQuery("getLoanDetails", dataMap);
                        if (list != null && list.size() > 0) {                            
                            double clearBal = 0;
                            double shadowDebit = 0;
                            double shadowCredit = 0;
                            double totalAmt = 0;  
                            // Added for loop by nithya on 21-07-2016 for 4922
                            for (int i = 0; i < list.size(); i++) {
                                HashMap resultMap = new HashMap();
                                resultMap = (HashMap) list.get(i);
                                clearBal = clearBal + CommonUtil.convertObjToDouble(resultMap.get("CLEAR_BALANCE"));
                                shadowDebit = shadowDebit + CommonUtil.convertObjToDouble(resultMap.get("SHADOW_DEBIT"));
                                shadowCredit = shadowCredit + CommonUtil.convertObjToDouble(resultMap.get("SHADOW_CREDIT"));
                            }                            
                            if (shadowDebit > 0 || shadowCredit > 0) {
                                ClientUtil.showMessageWindow("Authorization pending for this Customer...Hence new loan cannot be created!!");
                                ClientUtil.clearAll(panBorrowProfile);
                                txtLimit_SD.setText("");
                            } else {
                                if (clearBal < 0) {
                                    clearBal = clearBal * (-1);
                                }
                                totalAmt = clearBal + loanAmt;
                                // Added if block by nithya on 21-07-2016 for 4922
                                if (maxNoOfLoans > 0) {
                                    List countList = ClientUtil.executeQuery("getParticularLoanCountForCustomer", dataMap);
                                    if (countList != null && countList.size() > 0) {
                                        HashMap countResultMap = new HashMap();
                                        countResultMap = (HashMap) countList.get(0);
                                        if (countResultMap.containsKey("NO_OF_LOANS") && countResultMap.get("NO_OF_LOANS") != null) {
                                            int loanCount = CommonUtil.convertObjToInt(countResultMap.get("NO_OF_LOANS"));
                                            if (loanCount + 1 > maxNoOfLoans) {
                                                ClientUtil.showMessageWindow("This customer cannot be given more than " + maxNoOfLoans + " loans\n Currently " + loanCount + " Loans exist");
                                                txtLimit_SD.setText("");
                                            }else if (totalAmt > maxImbpAmt) {
                                                if (clearBal > maxImbpAmt) {
                                                    ClientUtil.showMessageWindow("This customer cannot be given loan as his/her outstanding amount already exceeds the IMBP limit..!!");
                                                } else if (clearBal < maxImbpAmt) {
                                                    double amount = 0;
                                                    amount = maxImbpAmt - clearBal;
                                                    String amt = CurrencyValidation.formatCrore(CommonUtil.convertObjToStr(amount));
                                                    ClientUtil.showMessageWindow("The amount entered exceeds IMBP limit amount...This customer can be given loan only for a maximum amount of Rs. " + amt + "/-");
                                                }
                                                txtLimit_SD.setText("");
                                            }
                                        }
                                    }

                                }
                                else if (totalAmt > maxImbpAmt) {
                                    if (clearBal > maxImbpAmt) {
                                        ClientUtil.showMessageWindow("This customer cannot be given loan as his/her outstanding amount already exceeds the IMBP limit..!!");
                                    } else if (clearBal < maxImbpAmt) {
                                        double amount = 0;
                                        amount = maxImbpAmt - clearBal;
                                        String amt = CurrencyValidation.formatCrore(CommonUtil.convertObjToStr(amount));
                                        ClientUtil.showMessageWindow("The amount entered exceeds IMBP limit amount...This customer can be given loan only for a maximum amount of Rs. " + amt + "/-");
                                    }
                                    txtLimit_SD.setText("");
                                }
                            }
                        } else {
                            if (loanAmt > maxImbpAmt) {
                                String imbpAmt = CurrencyValidation.formatCrore(CommonUtil.convertObjToStr(maxImbpAmt));
                                ClientUtil.showMessageWindow("The loan amount exceeds the IMBP limit amount...Please enter an amount less than Rs. " + imbpAmt + "/-");
                                txtLimit_SD.setText("");
                            }
                        }
                    }
                }
            }
        }
    }

   
    public class SimpleTableModel extends AbstractTableModel {

        private ArrayList dataVector;
        private ArrayList headingVector;

        public SimpleTableModel(ArrayList dataVector, ArrayList headingVector) {
            this.dataVector = dataVector;
            this.headingVector = headingVector;
        }

        public int getColumnCount() {
            return headingVector.size();
        }

        public int getRowCount() {
            return dataVector.size();
        }

        public Object getValueAt(int row, int col) {
            ArrayList rowVector = (ArrayList) dataVector.get(row);
            return rowVector.get(col);
        }

        public String getColumnName(int column) {
            return headingVector.get(column).toString();
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        public boolean isCellEditable(int row, int col) {
            if (col == 0 && (CommonUtil.convertObjToStr(getValueAt(row, col + 4)).equals("Y"))) {
                return false;
            } else {
                if (col != 0) {
                    //return false;
                    if (col == 3 && (CommonUtil.convertObjToStr(getValueAt(row, col + 2)).equals("Y"))) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return true;
                }
            }

        }

        public void setValueAt(Object aValue, int row, int col) {
            ArrayList rowVector = (ArrayList) dataVector.get(row);
            rowVector.set(col, aValue);
        }
    }

    private void chargeAmount() {
        HashMap appraiserMap = new HashMap();
        appraiserMap.put("SCHEME_ID", prodDesc);
        appraiserMap.put("DEDUCTION_ACCU", "O");
        chargelst = ClientUtil.executeQuery("getAllChargeDetailsData", appraiserMap);
        HashMap chargeMap = new HashMap();
        serviceTaxApplMap = new HashMap();
        serviceTaxIdMap = new HashMap();
        if (chargelst != null && chargelst.size() > 0) {
            for (int i = 0; i < chargelst.size(); i++) {
                String accHead = "";
                String editable = "";
                chargeMap = (HashMap) chargelst.get(i);
                accHead = CommonUtil.convertObjToStr(chargeMap.get("CHARGE_ID"));
                editable = CommonUtil.convertObjToStr(chargeMap.get("CHARGE_EDITABLE"));
                if (TrueTransactMain.SERVICE_TAX_REQ.equalsIgnoreCase("Y")) {
                    String accHead_No = CommonUtil.convertObjToStr(chargeMap.get("ACC_HEAD"));
                    if (accHead_No != null && accHead_No.length() > 0) {
                        HashMap whereMap = new HashMap();
                        whereMap.put("AC_HD_ID", accHead_No);
                        List accHeadList = ClientUtil.executeQuery("getCheckServiceTaxApplicableForShare", whereMap);
                        if (accHeadList != null && accHeadList.size() > 0) {
                            HashMap accHeadMap = (HashMap) accHeadList.get(0);
                            if (accHeadMap != null && accHeadMap.containsKey("SERVICE_TAX_APPLICABLE")) {
                            String   checkFlag = CommonUtil.convertObjToStr(accHeadMap.get("SERVICE_TAX_APPLICABLE"));
                            String serviceTaxId = CommonUtil.convertObjToStr(accHeadMap.get("SERVICE_TAX_ID"));
                            serviceTaxApplMap.put(accHead,checkFlag);
                            serviceTaxIdMap.put(accHead,serviceTaxId);
                            }
                        }
                    }
                }
                for (int j = 0; j < table.getRowCount(); j++) {
                    //System.out.println("$#@@$ accHead inside table " + table.getValueAt(j, 1));
                    if (CommonUtil.convertObjToStr(table.getValueAt(j, 1)).equals(accHead)) {
                        double chargeAmt = 0;
                        if (CommonUtil.convertObjToStr(chargeMap.get("CHARGE_BASE")).equals("Sanction Amount")) {
                            chargeAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue()
                                    * CommonUtil.convertObjToDouble(CommonUtil.convertObjToStr(chargeMap.get("CHARGE_RATE"))).doubleValue() / 100;
                            float newchrgAmt = (float)chargeAmt;
                            long roundOffType = getRoundOffType(CommonUtil.convertObjToStr(chargeMap.get("ROUND_OFF_TYPE")));
                            if (roundOffType != 0) {
                                chargeAmt = rd.getNearest((long) (newchrgAmt * roundOffType), roundOffType) / roundOffType;
                            }else{
                                chargeAmt = newchrgAmt;
                            }
                            double minAmt = CommonUtil.convertObjToDouble(chargeMap.get("MIN_CHARGE_AMOUNT")).doubleValue();
                            double maxAmt = CommonUtil.convertObjToDouble(chargeMap.get("MAX_CHARGE_AMOUNT")).doubleValue();
                            if (chargeAmt < minAmt) {
                                chargeAmt = minAmt;
                            }
                            if (chargeAmt > maxAmt) {
                                chargeAmt = maxAmt;
                            }
                            table.setValueAt(String.valueOf(chargeAmt), j, 3);
                        } else if (CommonUtil.convertObjToStr(chargeMap.get("CHARGE_BASE")).equals("Amount Range")) {

                            List chargeslabLst = ClientUtil.executeQuery("getSelectLoanSlabChargesTO", chargeMap);
                            double limit = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
                            if (chargeslabLst != null && chargeslabLst.size() > 0) {
                                double minAmt = 0;
                                double maxAmt = 0;
                                for (int k = 0; k < chargeslabLst.size(); k++) {
                                    LoanSlabChargesTO objLoanSlabChargesTO = (LoanSlabChargesTO) chargeslabLst.get(k);

                                    double minAmtRange = CommonUtil.convertObjToDouble(objLoanSlabChargesTO.getFromSlabAmt()).doubleValue();
                                    double maxAmtRange = CommonUtil.convertObjToDouble(objLoanSlabChargesTO.getToSlabAmt()).doubleValue();
                                    if (limit >= minAmtRange && limit <= maxAmtRange) {
                                        double chargeRate = CommonUtil.convertObjToDouble(objLoanSlabChargesTO.getChargeRate()).doubleValue();
                                        minAmt = CommonUtil.convertObjToDouble(objLoanSlabChargesTO.getMinChargeAmount()).doubleValue();
                                        maxAmt = CommonUtil.convertObjToDouble(objLoanSlabChargesTO.getMaxChargeAmount()).doubleValue();

                                        chargeAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue() * chargeRate / 100;
                                        if (chargeAmt < minAmt) {
                                            chargeAmt = minAmt;
                                        }
                                        if (chargeAmt > maxAmt) {
                                            chargeAmt = maxAmt;
                                        }
                                        break;
                                    }
                                }

                            }


                            table.setValueAt(String.valueOf(chargeAmt), j, 3);

                        } else if (CommonUtil.convertObjToStr(chargeMap.get("CHARGE_BASE")).equals("Flat Charge")) {
                            chargeAmt = CommonUtil.convertObjToDouble(CommonUtil.convertObjToStr(chargeMap.get("FLAT_CHARGE"))).doubleValue();
                        }
                        chargeMap.put("CHARGE_AMOUNT", String.valueOf(chargeAmt));
                    }
                    if (editable.equals("Y")) {
                        double chargeAmt1 = CommonUtil.convertObjToDouble(table.getValueAt(j, 3));
                        chargeMap.put("CHARGE_AMOUNT", String.valueOf(chargeAmt1));
                    }
                }
            }
           //System.out.println("#$#$$# chargeMap:" + chargeMap);
          //System.out.println("#$#$$# chargelst:" + chargelst);
            table.revalidate();
            table.updateUI();
            //------------Comment the code ---- need to check -- Start
//            if (serviceTaxApplMap != null && serviceTaxApplMap.size() > 0) {
//                double chrgamt = 0;
//                for (int i = 0; i < table.getRowCount(); i++) {
//
//
//                    boolean checkFlag = new Boolean(CommonUtil.convertObjToStr(table.getValueAt(i, 0))).booleanValue();
//                    String descVal = CommonUtil.convertObjToStr(table.getValueAt(i, 1));
//                    if (checkFlag && CommonUtil.convertObjToStr(serviceTaxApplMap.get(descVal)).equals("Y")) {
//                        //if (checkFlag) {
//                        chrgamt = chrgamt + CommonUtil.convertObjToDouble(CommonUtil.convertObjToStr(table.getValueAt(i, 3)));
//                        // } 
//                    }
//                    if (chrgamt > 0) {
//                        HashMap ser_Tax_Val = new HashMap();
//                        ser_Tax_Val.put(ServiceTaxCalculation.CURR_DT, ClientUtil.getCurrentDate());
//                        ser_Tax_Val.put(ServiceTaxCalculation.TOT_AMOUNT, CommonUtil.convertObjToStr(chrgamt));
//                        ser_Tax_Val.put("SERVICE_TAX_ID",serviceTaxIdMap.get(descVal));
//                        try {
//                            objServiceTax = new ServiceTaxCalculation();
//                            serviceTax_Map = objServiceTax.calculateServiceTax(ser_Tax_Val);
//                            if (serviceTax_Map != null && serviceTax_Map.containsKey(ServiceTaxCalculation.TOT_TAX_AMT)) {
//                                String amt = CommonUtil.convertObjToStr(serviceTax_Map.get(ServiceTaxCalculation.TOT_TAX_AMT));
//                                lblServiceTaxval.setText(objServiceTax.roundOffAmt(amt, "NEAREST_VALUE"));
//                                serviceTax_Map.put(ServiceTaxCalculation.TOT_TAX_AMT, objServiceTax.roundOffAmt(amt, "NEAREST_VALUE"));
//                            } else {
//                                lblServiceTaxval.setText("0.00");
//                            }
//
//                        } catch (Exception ex) {
//                            ex.printStackTrace();
//                        }
//
//                    } else {
//                        lblServiceTaxval.setText("0.00");
//                    }
//                }
//            }
            //------------Comment the code ---- need to check -- Ends
            System.out.println("serviceTaxIdMap :: " + serviceTaxIdMap);
            //serviceTaxIdMap :: {CHRG000001=STG00005, CHRG000002=STG00005}
            if (serviceTaxApplMap != null && serviceTaxApplMap.size() > 0) {                
                List taxSettingsList = new ArrayList();
                double chrgamt = 0;
                for (int i = 0; i < table.getRowCount(); i++) {
                    HashMap serviceTaSettingsMap = new HashMap();
                    boolean checkFlag = new Boolean(CommonUtil.convertObjToStr(table.getValueAt(i, 0))).booleanValue();
                    String descVal = CommonUtil.convertObjToStr(table.getValueAt(i, 1));
                    if (checkFlag && CommonUtil.convertObjToStr(serviceTaxApplMap.get(descVal)).equals("Y") && CommonUtil.convertObjToStr(serviceTaxIdMap.get(descVal)).length() > 0) {
                        chrgamt = CommonUtil.convertObjToDouble(CommonUtil.convertObjToStr(table.getValueAt(i, 3)));
                    }
                    if (chrgamt > 0) {   
                        serviceTaSettingsMap.put("SETTINGS_ID",serviceTaxIdMap.get(descVal));
                        serviceTaSettingsMap.put(ServiceTaxCalculation.TOT_AMOUNT,CommonUtil.convertObjToStr(chrgamt));
                        //serviceTaSettingsMap.put(serviceTaxIdMap.get(descVal), CommonUtil.convertObjToStr(chrgamt));    
                        taxSettingsList.add(serviceTaSettingsMap);
                    } 
                }
                System.out.println("serviceTaSettingsMap :: "+ taxSettingsList);
                try {
                    objServiceTax = new ServiceTaxCalculation();
                    HashMap ser_Tax_Val = new HashMap();
                    ser_Tax_Val.put(ServiceTaxCalculation.CURR_DT, ClientUtil.getCurrentDate());
                    ser_Tax_Val.put(ServiceTaxCalculation.TOT_AMOUNT, CommonUtil.convertObjToStr(chrgamt));
                    ser_Tax_Val.put("SERVICE_TAX_DATA", taxSettingsList);
                    serviceTax_Map = objServiceTax.calculateServiceTax(ser_Tax_Val);
                    if (serviceTax_Map != null && serviceTax_Map.containsKey(ServiceTaxCalculation.TOT_TAX_AMT)) {
                        String amt = CommonUtil.convertObjToStr(serviceTax_Map.get(ServiceTaxCalculation.TOT_TAX_AMT));
//                        lblServiceTaxval.setText(objServiceTax.roundOffAmt(amt, "NEAREST_VALUE"));
//                        serviceTax_Map.put(ServiceTaxCalculation.TOT_TAX_AMT, objServiceTax.roundOffAmt(amt, "NEAREST_VALUE"));
                        lblServiceTaxval.setText(amt);
                        serviceTax_Map.put(ServiceTaxCalculation.TOT_TAX_AMT, amt);
                    } else {
                        lblServiceTaxval.setText("0.00");
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
        System.out.println("serviceTax_Map--- "+ serviceTax_Map);
    }

    private int getRoundOffType(String roundOff) {
        int returnVal = 0;
        if (roundOff.equals("Nearest Value")) {
            returnVal = 1 * 100;
        } else if (roundOff.equals("Nearest Hundreds")) {
            returnVal = 100 * 100;
        } else if (roundOff.equals("Nearest Tens")) {
            returnVal = 10 * 100;
        }
        return returnVal;
    }

    private void editChargeTable() {
        HashMap tableMap = editBuildData(prodDesc);
        ArrayList dataList = new ArrayList();
        dataList = (ArrayList) tableMap.get("DATA");
        if (dataList != null && dataList.size() > 0) {
            tableFlag = true;
            ArrayList headers;
            panChargeDetails.setVisible(true);
            SimpleTableModel stm = new SimpleTableModel((ArrayList) tableMap.get("DATA"), (ArrayList) tableMap.get("HEAD"));
            table = new JTable(stm);
            table.setSize(430, 110);
            // Added by nithya on 27-04-2016 for 4305
            srpChargeDetails = new javax.swing.JScrollPane(table,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            Dimension d = new Dimension(430, 800);
            table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            table.setPreferredSize(d);
            table.setPreferredScrollableViewportSize(d);
            // End
            srpChargeDetails.setMinimumSize(new java.awt.Dimension(430, 110));
            srpChargeDetails.setPreferredSize(new java.awt.Dimension(430, 110));
            panChargeDetails.add(srpChargeDetails, new java.awt.GridBagConstraints());
            table.revalidate();
        } else {
            tableFlag = false;
            chrgTableEnableDisable();
        }
    }

    private HashMap editBuildData(String prodDesc) {
        HashMap whereMap = new HashMap();
        whereMap.put("SCHEME_ID", prodDesc);
        whereMap.put("DEDUCTION_ACCU", "O");
        List list = ClientUtil.executeQuery("getChargeDetailsData", whereMap);
        boolean _isAvailable = list.size() > 0 ? true : false;
        ArrayList _heading = null;
        ArrayList data = new ArrayList();
        ArrayList colData = new ArrayList();
        HashMap map;
        Iterator iterator = null;
        if (_isAvailable) {
            map = (HashMap) list.get(0);
            iterator = map.keySet().iterator();
        }
        if (_isAvailable && _heading == null) {
            _heading = new ArrayList();
            while (iterator.hasNext()) {
                _heading.add((String) iterator.next());
            }
        }

        String cellData = "", keyData = "";
        Object obj = null;
        for (int i = 0, j = list.size(); i < j; i++) {
            map = (HashMap) list.get(i);
            colData = new ArrayList();
            iterator = map.values().iterator();            
            while (iterator.hasNext()) {
                obj = iterator.next();
                colData.add(CommonUtil.convertObjToStr(obj));
            }
            data.add(colData);
        }
        map = new HashMap();
        map.put("HEAD", _heading);
        map.put("DATA", data);
        return map;
    }

    private void editChargeAmount() {
        HashMap appraiserMap = new HashMap();
        appraiserMap.put("SCHEME_ID", prodDesc);
        appraiserMap.put("DEDUCTION_ACCU", "O");
        chargelst = ClientUtil.executeQuery("getAllChargeDetailsData", appraiserMap);
        HashMap chargeMap = new HashMap();
        serviceTaxApplMap= new HashMap();
        if (chargelst != null && chargelst.size() > 0) {
            for (int i = 0; i < chargelst.size(); i++) {
                String accHead = "";
                chargeMap = (HashMap) chargelst.get(i);
                accHead = CommonUtil.convertObjToStr(chargeMap.get("CHARGE_ID"));
                //System.out.println("$#@@$ accHead" + accHead);
                 if (TrueTransactMain.SERVICE_TAX_REQ.equalsIgnoreCase("Y")) {
                    String accHead_No = CommonUtil.convertObjToStr(chargeMap.get("ACC_HEAD"));
                    if (accHead_No != null && accHead_No.length() > 0) {
                        HashMap whereMap = new HashMap();
                        whereMap.put("AC_HD_ID", accHead_No);
                        List accHeadList = ClientUtil.executeQuery("getCheckServiceTaxApplicableForShare", whereMap);
                        if (accHeadList != null && accHeadList.size() > 0) {
                            HashMap accHeadMap = (HashMap) accHeadList.get(0);
                            if (accHeadMap != null && accHeadMap.containsKey("SERVICE_TAX_APPLICABLE")) {
                            String   checkFlag = CommonUtil.convertObjToStr(accHeadMap.get("SERVICE_TAX_APPLICABLE"));
                            serviceTaxApplMap.put(accHead,checkFlag);
                            }
                        }
                    }
                }
                for (int j = 0; j < table.getRowCount(); j++) {
                    //System.out.println("$#@@$ accHead inside table " + table.getValueAt(j, 0));
                    if (CommonUtil.convertObjToStr(table.getValueAt(j, 0)).equals(accHead)) {
                        double chargeAmt = 0;
                        if (CommonUtil.convertObjToStr(chargeMap.get("CHARGE_BASE")).equals("Sanction Amount")) {
                            chargeAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue()
                                    * CommonUtil.convertObjToDouble(CommonUtil.convertObjToStr(chargeMap.get("CHARGE_RATE"))).doubleValue() / 100;
                            long roundOffType = getRoundOffType(CommonUtil.convertObjToStr(chargeMap.get("ROUND_OFF_TYPE")));
                            if (roundOffType != 0) {
                                chargeAmt = rd.getNearest((long) (chargeAmt * roundOffType), roundOffType) / roundOffType;
                            }
                            double minAmt = CommonUtil.convertObjToDouble(chargeMap.get("MIN_CHARGE_AMOUNT")).doubleValue();
                            double maxAmt = CommonUtil.convertObjToDouble(chargeMap.get("MAX_CHARGE_AMOUNT")).doubleValue();
                            if (chargeAmt < minAmt) {
                                chargeAmt = minAmt;
                            }
                            if (chargeAmt > maxAmt) {
                                chargeAmt = maxAmt;
                            }
                            table.setValueAt(String.valueOf(chargeAmt), j, 2);
                        } else if (CommonUtil.convertObjToStr(chargeMap.get("CHARGE_BASE")).equals("Amount Range")) {
                            List chargeslabLst = ClientUtil.executeQuery("getSelectLoanSlabChargesTO", chargeMap);
                            double limit = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
                            if (chargeslabLst != null && chargeslabLst.size() > 0) {
                                double minAmt = 0;
                                double maxAmt = 0;
                                for (int k = 0; k < chargeslabLst.size(); k++) {
                                    LoanSlabChargesTO objLoanSlabChargesTO = (LoanSlabChargesTO) chargeslabLst.get(k);

                                    double minAmtRange = CommonUtil.convertObjToDouble(objLoanSlabChargesTO.getFromSlabAmt()).doubleValue();
                                    double maxAmtRange = CommonUtil.convertObjToDouble(objLoanSlabChargesTO.getToSlabAmt()).doubleValue();
                                    if (limit >= minAmtRange && limit <= maxAmtRange) {
                                        double chargeRate = CommonUtil.convertObjToDouble(objLoanSlabChargesTO.getChargeRate()).doubleValue();
                                        minAmt = CommonUtil.convertObjToDouble(objLoanSlabChargesTO.getMinChargeAmount()).doubleValue();
                                        maxAmt = CommonUtil.convertObjToDouble(objLoanSlabChargesTO.getMaxChargeAmount()).doubleValue();

                                        chargeAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue() * chargeRate / 100;
                                        if (chargeAmt < minAmt) {
                                            chargeAmt = minAmt;
                                        }
                                        if (chargeAmt > maxAmt) {
                                            chargeAmt = maxAmt;
                                        }
                                        break;
                                    }
                                }

                            }

//                             chargeAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue() *
//                             CommonUtil.convertObjToDouble(CommonUtil.convertObjToStr(chargeMap.get("CHARGE_RATE"))).doubleValue()/100;
                            table.setValueAt(String.valueOf(chargeAmt), j, 2);
                        } else if (CommonUtil.convertObjToStr(chargeMap.get("CHARGE_BASE")).equals("Flat Charge")) {
                            chargeAmt = CommonUtil.convertObjToDouble(CommonUtil.convertObjToStr(chargeMap.get("FLAT_CHARGE"))).doubleValue();
                        }
                        chargeMap.put("CHARGE_AMOUNT", String.valueOf(chargeAmt));
                    }
                }
            }
            //System.out.println("#$#$$# chargeMap:" + chargeMap);
            //System.out.println("#$#$$# chargelst:" + chargelst);
            table.revalidate();
            table.updateUI();
        }
    }     // CHARGE_AMOUNT_END

    private boolean mainLimitMarginValidation(String mainLimit) {
        HashMap transactionMap = new HashMap();
        //        if(observable.getDepositNo().length()>0 && observable.getStrACNumber().length()==0)
        //            lblDepositNo.setText(observable.getDepositNo());
        //        String depositNo=CommonUtil.convertObjToStr(lblDepositNo.getText());
        //
        //        if(depositNo.length()>0){
        //            transactionMap.put("prodId", observable.getCbmProductId().getKeyForSelected());
        //            transactionMap.put("PROD_ID", observable.getCbmProductId().getKeyForSelected());
        //            transactionMap.put("ACCOUNT_NO",depositNo);
        //            transactionMap.put("NEW_SANCTION_AMT",mainLimit);
        //            if(observableAdditionalSanctionOB.marginValidation(transactionMap)){
        //                txtLimit_SD.setText("");
        //                morotoriumEnableDisable(false);
        //                return true;
        //            }
        //        }
        return false;
    }

    private void txtLimit_SDFocusLost() {
        if (!txtLimit_SD.getText().equals("")) {
            if (!observable.checkLimitValue(txtLimit_SD.getText())) {
                String message = new String("The Limit value must fall within " + observable.getMinLimitValue().toString() + " and  " + observable.getMaxLimitValue().toString());
                displayAlert(message);
                observable.setTxtLimit_SD("");
                txtLimit_SD.setText(observable.getTxtLimit_SD());
                message = null;
            }
        }
    }

    private void txtLimit_SDFocusLostOD(boolean isTrue) {
        if (!txtLimit_SD.getText().equals("") && observable.getStrACNumber() != null && observable.getStrACNumber().length() > 0) {
            HashMap totbalancemap = new HashMap();
            HashMap newLiablityMap = new HashMap();
            //System.out.println("txtLimit_SD.getText()###" + txtLimit_SD.getText());
            double limit = Double.parseDouble(txtLimit_SD.getText());
            totbalancemap.put("ACT_NUM", observable.getStrACNumber());
            List totbalance = ClientUtil.executeQuery("getActDataAD", totbalancemap);
            if (totbalance != null && totbalance.size() > 0 && isTrue) {
                totbalancemap = (HashMap) totbalance.get(0);
                double clearbal = CommonUtil.convertObjToDouble(totbalancemap.get("CLEAR_BALANCE")).doubleValue();
                observable.setBEHAVES_LIKE(CommonUtil.convertObjToStr(totbalancemap.get("BEHAVES_LIKE")));
                clearbal *= (-1);
                if (limit <= clearbal) {
                    int result = ClientUtil.confirmationAlert("Sanction Amount is Less than Liablity" + "\n"
                            + "Liablity balance is" + CommonUtil.convertObjToStr(totbalancemap.get("CLEAR_BALANCE"))
                            + "Shall I continue");
                    if (result == 0) {
                        newLiablityMap.put("CLEAR_BALANCE", new Double(clearbal));
                        newLiablityMap.put("LIMIT", new Double(limit));
                        newLiablityMap.put("ACCT_NUM", observable.getStrACNumber());
                        newLiablityMap.put("DIFFERENT_AMT", new Double(clearbal - limit));
                        newLiablityMap.put("PROD_ID", totbalancemap.get("PROD_ID"));
                        newLiablityMap.put("USER_ID", TrueTransactMain.USER_ID);
                        //                    observable.setAdvanceLiablityMap(newLiablityMap.put);
                        observable.setAdvanceLiablityMap(new HashMap());
                        observable.getAdvanceLiablityMap().putAll(newLiablityMap);
                        //                        txtLimit_SD.setText("");
                        return;
                    } else {
                        observable.setAdvanceLiablityMap(new HashMap());
                    }

                }
                observable.setRenewAvailableBalance(String.valueOf(limit - clearbal));
            }
        }
    }

    private void rupeesValidation(String mainLimit) {
        if (mainLimit.length() > 0) {
            double limit = Double.parseDouble(mainLimit);
            if ((limit % 1) < 1 && (limit % 1) != 0) {
                ClientUtil.showMessageWindow("Enter The Amount  in Rupees");
                txtLimit_SD.setText("");
            }

        }
    }
    private void btnRepayment_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepayment_DeleteActionPerformed
        // TODO add your handling code here:
        btnRepayment_DeleteActionPerformed();
    }//GEN-LAST:event_btnRepayment_DeleteActionPerformed
    private void btnRepayment_DeleteActionPerformed() {
        // TODO add your handling code here
        if (DateUtil.dateDiff(curr_dt, DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue())) < 0) {
            ClientUtil.displayAlert(resourceBundle.getString("repayDeleteAfterrepayStarted"));
            ClientUtil.enableDisable(panStatus_Repayment, true);
            return;
        }
        if (transCount != 0) {
            int yes_no = ClientUtil.confirmationAlert(resourceBundle.getString("repayDeleteAfterDisbursement"));
            //            int yes_no=ClientUtil.confirmationAlert("Already Disbursement Over " +"\n"+
            //            "Make it as INACTIVE" +"\n"+ "Shoude you delete record");
            if (yes_no == 1) {
                return;
            }
        }
        updateOBFields();
        setRepaymentNewOnlyEnable();
        setAllRepaymentDetailsEnableDisable(false);
        setRepaymentBtnsEnableDisable(true);
        observableRepay.deleteRepaymentTabRecord(rowRepayment);
        observableRepay.resetRepaymentSchedule();
        rowRepayment = -1;
        dumRowRepay = -1;
        updateRepayment = false;
        deleteInstallment = true;
        observable.ttNotifyObservers();
    }
    private void btnRepayment_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepayment_SaveActionPerformed
        // TODO add your handling code here:
        btnRepayment_SaveActionPerformed();
    }//GEN-LAST:event_btnRepayment_SaveActionPerformed
    private void btnRepayment_SaveActionPerformed() {
        //            observable.doAction(3);
        // TODO add your handling code here:
        /* mandatoryMessage1 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
        final String mandatoryMessage1 = new MandatoryCheck().checkMandatory(getClass().getName(), panSchedule_RS);
        String mandatoryMessage2 = "";
        //        if (loanType.equals("OTHERS"))
        repayNewMode = false;
        mandatoryMessage2 = new MandatoryCheck().checkMandatory(getClass().getName(), panInstall_RS);
        /* mandatoryMessage2 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
        if (mandatoryMessage1.length() > 0 || mandatoryMessage2.length() > 0 || CommonUtil.convertObjToDouble(txtTotalInstallAmt.getText()).doubleValue() <= 0) {
            //            displayAlert(mandatoryMessage1+mandatoryMessage2+"\n\nPress EMI Calculator to get above details...");
            displayAlert("\n\nPress EMI Calculator to Generate Repayment Schedule ");
        } else {
            if (accNumMap.containsKey(lblAccNo_RS_2.getText())) {
                accNumMap.remove(lblAccNo_RS_2.getText());
            }
            String strActiveScheduleWarn = observableRepay.validateActiveSchedules(rdoActive_Repayment.isSelected(), txtRepayScheduleMode.getText(), rowRepayment);
            if (strActiveScheduleWarn.length() <= 0) {
                if (((tblRepaymentCTable.getRowCount() > 1) && allowMultiRepay && updateRepayment) || (allowMultiRepay && !updateRepayment)
                        || (allowMultiRepay && updateRepayment && dumRowRepay == 0) || (!allowMultiRepay && updateRepayment && tblRepaymentCTable.getRowCount() == 1)
                        || ((tblRepaymentCTable.getRowCount() == 0) && !updateRepayment)) {
                    // To allow more than one Repayment schedule the repayment type is not as Lump Sum
                    updateOBFields();
                    if (observableRepay.addRepaymentDetails(rowRepayment, updateRepayment) == 1) {
                        // Donot reset the fields when return value is 1(Option is No for replacing the existing record)
                    } else {
                        // To reset the Fields
                        setRepaymentNewOnlyEnable();
                        observableRepay.resetRepaymentSchedule();
                        setAllRepaymentDetailsEnableDisable(false);
                    }
                    observable.ttNotifyObservers();
                    rowRepayment = -1;
                    dumRowRepay = -1;
                    updateRepayment = false;
                } else {
                    // Give warning message if the the repayment type is Lump Sum with more than one Repayment Schedule
                    observableRepay.repayTabWarning("existanceRepayLumpSumWarning");
                }
            } else {
                observableRepay.repayTabWarning(strActiveScheduleWarn);
            }
            strActiveScheduleWarn = null;
            outStandingAmtRepayment = false;
        }
    }
    private void btnRepayment_NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepayment_NewActionPerformed
        // TODO add your handling code here:
        // Don't allow the user to create the schedule, if there is no interest details
        //        HashMap map =new HashMap();
        //        map.put("ACCT_NUM",observable.getStrACNumber());
        //        List lst=ClientUtil.executeQuery("getMinimaminstallmentTL",map);
        //        if(!(lst==null ||lst.isEmpty()))
        ArrayList deletedList = new ArrayList();
        HashMap oneRecord;
        existRecord = false;
        for (int i = observableRepay.getTableUtilRepayment().getRemovedValues().size() - 1, j = 0; i >= 0; --i, ++j) {
            oneRecord = (HashMap) observableRepay.getTableUtilRepayment().getRemovedValues().get(j);
            if (oneRecord.containsKey("ACCOUNT_NO")
                    && CommonUtil.convertObjToStr(oneRecord.get("ACCOUNT_NO")).equals(observable.getStrACNumber())) {
                existRecord = true;
                break;
            }
        }
        for (int i = observableRepay.getTableUtilRepayment().getTableValues().size() - 1, j = 0; i >= 0; --i, ++j) {
            java.util.LinkedHashMap map = new java.util.LinkedHashMap();
            map = (java.util.LinkedHashMap) observableRepay.getTableUtilRepayment().getAllValues();
            java.util.Set keySet = map.keySet();
            Object objKeySet[] = (Object[]) keySet.toArray();
            for (int t = 0; t < map.size(); t++) {
                oneRecord = (HashMap) map.get(objKeySet[t]);
                if (CommonUtil.convertObjToStr(observable.getStrACNumber()).length() > 0
                        && CommonUtil.convertObjToStr(oneRecord.get("ACTIVE_STATUS")).equals("N")) {
                    existRecord = true;
                    break;
                }

            }
            //            if(oneRecord.containsKey("ACCOUNT_NO") &&
            //            CommonUtil.convertObjToStr(oneRecord.get("ACCOUNT_NO")).equals(observable.getStrACNumber())){
            //                existRecord=true;
            //                break;
            //            }
        }

        if (existRecord && observable.getClearBalance() < 0) {
            if (loanType.equals("OTHERS")) {
                String obj1[] = {"Reschedule", "Restructring With UptoDt interest"};
                int amtOption = COptionPane.showOptionDialog(null, ("Select The Desired Option"), ("Term Loan Repayment Schedule "),
                        COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj1, obj1[0]);

                String actNum = CommonUtil.convertObjToStr(lblAccNo_RS_2.getText());
                //Reschdule Based on outstanding Amt
                int yes_no = -1;
                //        if(amtOption==1)
                if (!actNum.equals("")) {
                    double clear_balance = 0;
                    HashMap transMap = new HashMap();
                    transMap.put("ACT_NUM", actNum);
                    transMap.put("BRANCH_CODE", getSelectedBranchID());
                    List lst = (List) ClientUtil.executeQuery("getNoOfDaysinLoan", transMap);
                    if (lst != null && lst.size() > 0) {
                        HashMap recordMap = (HashMap) lst.get(0);
                        if (recordMap != null && recordMap.size() > 0) {
                            clear_balance = CommonUtil.convertObjToDouble(recordMap.get("TOTAL_BALANCE")).doubleValue();
                            //                            if(clear_balance<0){
                            //                                yes_no=ClientUtil.confirmationAlert("Already Disbursement Over !"+"\n"+" " +
                            //                                "Do U Want to Continue Reschedule ");
                            //                                //                        if(yes_no==1)
                            //                                //                            return;
                            //                            }

                        }
                        yes_no = 0;
                        if (yes_no == 0) {
                            if (amtOption != 1) {
                                String[] obj = {"Repayment Schedule Based on sanction Amt", "Repayment Schedule Based on OutStanding Amt","Repayment Schedule Based on Disbursement Amt"};
                                int option = COptionPane.showOptionDialog(null, ("Select The Desired Option"), ("Term Loan Repayment Schedule Option"),
                                        COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj, obj[1]);
                                if (option == 1) {
                                    txtLaonAmt.setText(String.valueOf(-clear_balance));
                                    observableRepay.setTxtLaonAmt(String.valueOf(-clear_balance));
                                    outStandingAmtRepayment = true;

                                } 
                                else if (option == 2) {
                                    List disList = ClientUtil.executeQuery("getDisburseAMt", transMap);
                                    if (disList != null && disList.size() > 0) {
                                        HashMap DisMap = (HashMap) disList.get(0);
                                        if (DisMap != null && DisMap.size() > 0) {
                                            txtLaonAmt.setText(CommonUtil.convertObjToStr(DisMap.get("PRINCIPAL")));
                                            observableRepay.setTxtLaonAmt(CommonUtil.convertObjToStr(DisMap.get("PRINCIPAL")));
                                            outStandingAmtRepayment = true;
                                        }
                                    }
                                }
                                else {
                                    observableRepay.setTxtLaonAmt(observable.getTxtLimit_SD());
                                    txtLaonAmt.setText(observableRepay.getTxtLaonAmt());
                                    outStandingAmtRepayment = true;
                                }
                            }
                            if (amtOption == 1) {//option
                                //for intererst Calcultion
                                transMap.put("LOAN_ACCOUNT_CLOSING", "LOAN_ACCOUNT_CLOSING");
                                transMap.put("BRANCH_ID", getSelectedBranchID());
                                transMap.put("BRANCH_CODE", getSelectedBranchID());
                                transMap.put("LAST_INT_CALC_DT", recordMap.get("LAST_INT_CALC_DT"));
                                transMap.put("WHERE", lblAccNo_RS_2.getText());
                                transMap.put("PROD_ID", lblProdID_RS_Disp.getText());
                                transMap.put("CURR_DATE", (Date) curr_dt.clone());

                                HashMap interestMap = new HashMap();
                                StringBuffer buf = new StringBuffer();
                                interestMap.put("WHERE", transMap);
                                lst = ClientUtil.executeQuery("", interestMap);
                                //System.out.println("lst######" + lst);
                                if (lst != null && lst.size() > 0) {
                                    interestMap = (HashMap) lst.get(0);
                                    double interestAmt = CommonUtil.convertObjToDouble(interestMap.get("AMOUNT")).doubleValue();
                                    double penalInterestAmt = 0;
                                    buf.append("Out Standing LoanAmt" + clear_balance + "\n");
                                    buf.append("Upto Date Interest" + interestAmt + "\n");
                                    if (interestMap.containsKey("LOAN_CLOSING_PENAL_INT")) {
                                        penalInterestAmt = CommonUtil.convertObjToDouble(interestMap.get("LOAN_CLOSING_PENAL_INT")).doubleValue();
                                        buf.append("Upto Date Penal Interest" + penalInterestAmt + "\n");
                                    }
                                    ClientUtil.showMessageWindow(buf.toString());

                                    txtLaonAmt.setText(String.valueOf(interestAmt + (-clear_balance)));
                                    observableRepay.setTxtLaonAmt(String.valueOf(interestAmt + (-clear_balance)));
                                    transMap.put("INTEREST_AMT", new Double(interestAmt + penalInterestAmt));
                                    outStandingAmtRepayment = true;
                                    try {
                                        //                                        if(interestAmt>=1){
                                        transMap.put("INT_TRANSACTION_REPAYMENT", "INT_TRANSACTION_REPAYMENT");
                                        observableRepay.setUptoDtInterestMap(transMap);
                                        txtRepayScheduleMode.setText(CommonConstants.REPAY_SCHEDULE_MODE_REPHASE);
                                        //                              //              observable.interestTransaction(transMap);
                                        //                                        }else
                                        //                                            ClientUtil.showMessageWindow("Interest Amt should be More than zero ");
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        }
                    }

                }
            }
        }
        if (tblInterMaintenance.getRowCount() > 0) {
            boolean chekAmt = false;
            boolean acttodate = true;
            //commented by abi demo
            //            if(cboIntGetFrom.getSelectedItem().equals("Account")){
            //                ArrayList arryList=((EnhancedTableModel)tblInterMaintenance.getModel()).getDataArrayList();
            //                ArrayList nextList=new ArrayList();
            //                for(int i=0;i<arryList.size();i++){
            //                    ArrayList listRec= (ArrayList)arryList.get(i);
            //                    if(arryList.size()-1 ==i+1){
            //                          nextList=(ArrayList)arryList.get(i+1);
            //                    }
            //                    double toAmt =CommonUtil.convertObjToDouble(listRec.get(4)).doubleValue();
            //                    //                    double limitAmt=CommonUtil.convertObjToDouble(observable.getTxtLimit_SD()).doubleValue();
            //                    double limitAmt=99999999;
            //                    if(limitAmt<=toAmt){
            //                        Date toDate=null;
            //                        Date nextToDt=null;
            //                        String todate =CommonUtil.convertObjToStr(listRec.get(2));
            //                        String nextRecToDt=CommonUtil.convertObjToStr(nextList.get(2));
            //                        if(todate !=null &&todate.length()>0){
            //                            toDate=DateUtil.getDateMMDDYYYY(todate);
            //                             if(nextRecToDt !=null && nextRecToDt.length()>0)
            //                            nextToDt=DateUtil.getDateMMDDYYYY(nextRecToDt);
            //                            Date sanToDate=DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue());
            //                            //System.out.println("DateUtil.dateDiff(toDate,sanToDate)"+ DateUtil.dateDiff(toDate,sanToDate));
            //                            String interestType=CommonUtil.convertObjToStr((((ComboBoxModel)cboInterestType.getModel()).getKeyForSelected()).toString());
            //                            if(DateUtil.dateDiff(toDate,sanToDate)>0 && (nextToDt!=null && DateUtil.dateDiff(nextToDt,sanToDate)>0) && (!interestType.equals("FLOATING_RATE"))){
            //                                if(nextToDt!=null && DateUtil.dateDiff(nextToDt,sanToDate)>0)
            //                                    displayAlert(resourceBundle.getString("interestDetailsWarningDate"));
            //                                return;
            //                                //                                     chekAmt=false;
            //                                //                                    acttodate=false;
            //                            }
            //                        }
            //                        //                             else
            //                        //                                 acttodate=false;
            //                    }  if(limitAmt <= toAmt){
            //                        chekAmt=true;
            //                        break;
            //                    }
            //                }
            //                //                   String strRecordKey = CommonUtil.convertObjToStr(((ArrayList) (tblInterestTab.getDataArrayList().get(recordPosition))).get(4));
            //                if(chekAmt || loanType.equals("LTD"))
            //                    btnRepayment_NewActionPerformed();
            //
            //                else //if(acttodate)
            //                    displayAlert(resourceBundle.getString("interestDetailsWarningAmt"));
            //            }else
            btnRepayment_NewActionPerformed();
          //  cboRepayFreq.setEnabled(true);
          //  //System.out.println("   here is ena"+cboRepayFreq.isEnabled());
            ClientUtil.enableDisable(panStatus_Repayment, false);
            String repayType = CommonUtil.convertObjToStr(((ComboBoxModel) cboRepayFreq.getModel()).getKeyForSelected());
            String repaySelectedItem = CommonUtil.convertObjToStr(cboRepayFreq.getSelectedItem());
            String repayItem = CommonUtil.convertObjToStr(cboRepayFreq_Repayment.getSelectedItem());

            if (observable.getClearBalance() == 0) {//!existRecord
                // Following lines commented by Rajesh
//                if(!repayType.equals("30"))
//                    cboRepayType.setEnabled(false);
                if (!repayItem.equals(repaySelectedItem)) {
                    ClientUtil.displayAlert("SanctionLevel frequency Declared as " + repaySelectedItem);
                    cboRepayType.setSelectedItem("");
                }
            }
        } else {
            displayAlert(resourceBundle.getString("interestDetailsWarning"));
        }
        //        outStandingAmtRepayment=false;
    }//GEN-LAST:event_btnRepayment_NewActionPerformed
    private void calculateRepaymentToDate() {
        //Added BY Suresh   //modified by rishad 16 oct 2018
//      if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
         if (rdoSalaryRecovery_Yes.isSelected() == true) {
            tdtFirstInstall.setDateValue(tdtFacility_Repay_Date.getDateValue());
            observableRepay.setTdtFirstInstall(tdtFacility_Repay_Date.getDateValue());
        } else if (!tdtFirstInstall.getDateValue().equals("") && !cboRepayFreq_Repayment.getSelectedItem().equals("") && !cboRepayFreq_Repayment.getSelectedItem().equals("User Defined") && !txtNoInstall.getText().equals("")) {
            moratorium_Given_RepayscheduleCalculation();
            java.util.GregorianCalendar gCalendar = new java.util.GregorianCalendar();
            java.util.GregorianCalendar gCalendarrepaydt = new java.util.GregorianCalendar(); //forrepaydate shoude change from first dt
            gCalendar.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtFirstInstall.getDateValue()));//tdtFirstInstall.getDateValue()));
            gCalendar.setTime(DateUtil.getDateMMDDYYYY(tdtFirstInstall.getDateValue()));//tdtFirstInstall.getDateValue()));
            gCalendarrepaydt.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtFirstInstall.getDateValue()));//tdtFirstInstall.getDateValue()));
            gCalendarrepaydt.setTime(DateUtil.getDateMMDDYYYY(tdtFirstInstall.getDateValue())); //tdtFirstInstall.getDateValue()));
            int dateVal = observableRepay.getRepayScheduleIncrementType();
            int incVal = observable.getInstallNo(txtNoInstall.getText(), dateVal);
            repayFromdate = new java.util.Date();
            if (repayMorotoruimavailable) {
                repayFromdate = DateUtil.getDateMMDDYYYY(tdtFirstInstall.getDateValue());//tdtFirstInstall.getDateValue());
            } else {
                repayFromdate = DateUtil.getDateMMDDYYYY(tdtRepayFromDate.getDateValue());
            }
            if (txtNoInstallments.getText().equals("1")) {
                date = DateUtil.getDateMMDDYYYY(tdtRepayFromDate.getDateValue());//tdtFirstInstall.getDateValue());
            }
            //System.out.println("Date##" + date);
            if (dateVal <= 7) {
                gCalendar.add(gCalendar.DATE, incVal);
            } else if (dateVal >= 30) {
                gCalendar.add(gCalendar.MONTH, incVal);
                int firstInstall = dateVal / 30;
                gCalendarrepaydt.add(gCalendarrepaydt.MONTH, firstInstall);//for repaydate
            }
            tdtLastInstall.setDateValue(DateUtil.getStringDate(gCalendar.getTime()));
            observableRepay.setTdtLastInstall(tdtLastInstall.getDateValue());
            tdtFirstInstall.setDateValue(DateUtil.getStringDate(gCalendarrepaydt.getTime()));
            observableRepay.setTdtFirstInstall(tdtFirstInstall.getDateValue());
            gCalendar = null;
            gCalendarrepaydt = null;
        }
         
        //Added by nithya on 27-07-2022 for KD-3422 
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT) {
          if (!tdtFirstInstall.getDateValue().equals("") && !cboRepayFreq_Repayment.getSelectedItem().equals("") && cboRepayFreq_Repayment.getSelectedItem().equals("User Defined") && !txtNoInstall.getText().equals("")) {
              repayFromdate = DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue());
              tdtRepayFromDate.setDateValue(tdtFacility_Repay_Date.getDateValue());
          }
         }  
         
    }

    private void btnRepayment_NewActionPerformed() {
        // TODO add your handling code here:
        updateOBFields();
        repayNewMode = true;
        observableRepay.resetRepaymentSchedule();
        if (loanType.equals("LTD")) {
            setTotalMainAdditionalSanction();
        }

        setRepayDefaultValueNewBtnPressed();
        setAllRepaymentDetailsEnableDisable(true);
        setRepaymentDeleteOnlyDisbale();
        rowRepayment = -1;
        dumRowRepay = -1;
        updateRepayment = false;
        observable.ttNotifyObservers();
    }

    private void setRepayDefaultValueNewBtnPressed() {
        String totalLimit = CommonUtil.convertObjToStr(lblTotalLimitAmt.getText());
        if (loanType.equals("LTD")) {
            //            String totalLimit=CommonUtil.convertObjToStr(lblTotalLimitAmt.getText());
            if (totalLimit.length() > 0) {
                observableRepay.setTxtTotalBaseAmt(totalLimit);
                observableRepay.setTxtLaonAmt(totalLimit);
            } else {
                observableRepay.setTxtTotalBaseAmt(observable.getTxtLimit_SD());
            }
        }
        if (!outStandingAmtRepayment) {
            if (loanType.equals("LTD") && totalLimit.length() > 0) {
                observableRepay.setTxtLaonAmt(totalLimit);
            } else {
                observableRepay.setTxtLaonAmt(observable.getTxtLimit_SD());
            }
            txtLaonAmt.setText(observableRepay.getTxtLaonAmt());
        } else {
            if (totalLimit.length() > 0) {
                observableRepay.setTxtLaonAmt(totalLimit);
            } else {
                observableRepay.setTxtLaonAmt(txtLaonAmt.getText());
            }
            txtLaonAmt.setText(observableRepay.getTxtLaonAmt());
        }
        //         if (loanType.equals("OTHERS")) commented by abi for not need
        observableRepay.setTdtRepayFromDate(observable.getTdtFDate());
        observableRepay.setTdtFirstInstall(observable.getTdtFacility_Repay_Date());
        observableRepay.setTdtLastInstall(observable.getTdtTDate());
        observableRepay.setTxtNoMonthsMora(observable.getTxtFacility_Moratorium_Period());
        observableRepay.setTxtNoInstall(observable.getTxtNoInstallments());
        observableRepay.setCboRepayFreq_Repayment(CommonUtil.convertObjToStr(cboRepayFreq.getSelectedItem()));
        if (outStandingAmtRepayment) {
            observableRepay.setTdtDisbursement_Dt(tdtAccountOpenDate.getDateValue());
        } else {
            observableRepay.setTdtDisbursement_Dt(DateUtil.getStringDate((Date) curr_dt.clone()));
        }
        observableRepay.setTxtRepayScheduleMode(CommonConstants.REPAY_SCHEDULE_MODE_REGULAR);
        cboRepayFreq_Repayment.setSelectedItem(cboRepayFreq.getSelectedItem());
        removeRepaymentRadioBtns();
        observableRepay.setRdoDoAddSIs_Yes(true);
        rdoDoAddSIs_Yes.setSelected(observableRepay.getRdoDoAddSIs_Yes());
        observableRepay.setRdoDoAddSIs_No(false);
        rdoDoAddSIs_No.setSelected(observableRepay.getRdoDoAddSIs_No());
        observableRepay.setRdoPostDatedCheque_Yes(true);
        rdoPostDatedCheque_Yes.setSelected(observableRepay.getRdoPostDatedCheque_Yes());
        observableRepay.setRdoPostDatedCheque_No(false);
        rdoPostDatedCheque_No.setSelected(observableRepay.getRdoPostDatedCheque_No());
        observableRepay.setRdoActive_Repayment(true);
        rdoActive_Repayment.setSelected(observableRepay.getRdoActive_Repayment());
        observableRepay.setRdoInActive_Repayment(false);
        rdoInActive_Repayment.setSelected(observableRepay.getRdoInActive_Repayment());
        addRepaymentRadioBtns();
        txtLaonAmtFocusLost();
    }

    private void calculateTotalBaseAmount() {
        HashMap repayData = new HashMap();
        HashMap prodLevelValues = observable.getCompFreqRoundOffValues();
        repayData.put("ACT_NO", lblAccNo_RS_2.getText());
        //        repayData.put("TO_DATE", tdtFirstInstall.getDateValue());
        //        if(!(repayData.get("TO_DATE")!=null))//commentedby abi for componet not having date value
        repayData.put("TO_DATE", observableRepay.getTdtFirstInstall());
        repayData.put("ISDURATION_DDMMYY", "NO");
        //        if (rdoInterest_Compound.isSelected()){
        repayData.put("INTEREST_TYPE", "COMPOUND");
        //        }else if (rdoInterest_Simple.isSelected()){
        //            repayData.put("INTEREST_TYPE", "SIMPLE");
        //        }
        repayData.put("COMPOUNDING_PERIOD", observableRepay.getCbmRepayFreq_Repayment().getKeyForSelected());//CommonUtil.convertObjToStr(prodLevelValues.get("DEBITINT_COMP_FREQ")));
        repayData.put("REPAYMENT_TYPE", "MORATORIUM");
        repayData.put("COMPOUNDING_TYPE", "REPAYMENT");
        repayData.put("PRINCIPAL_AMOUNT", txtLaonAmt.getText());
        repayData.put("ROUNDING_FACTOR", "1_RUPEE");
        repayData.put("ROUNDING_TYPE", CommonUtil.convertObjToStr(prodLevelValues.get("DEBIT_INT_ROUNDOFF")));
        repayData.put("REPAYMENT_FREQUENCY", observableRepay.getCbmRepayFreq_Repayment().getKeyForSelected());
        java.util.ArrayList interestList = observableInt.getInterestDetails(tdtSanctionDate.getDateValue(), tdtFacility_Repay_Date.getDateValue(), DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue()), DateUtil.getDateMMDDYYYY(observableRepay.getTdtFirstInstall()));
        if (interestList.size() > 0) {
            repayData.put("INTEREST", ((HashMap) interestList.get(0)).get("INTEREST"));
            repayData.put("VARIOUS_INTEREST_RATE", interestList);
            repayData.put("FROM_DATE", tdtFDate.getDateValue());
            observableRepay.calculateTotalBaseAmount(repayData);
        } else {
            displayAlert(resourceBundle.getString("interestDetailsWarning"));
        }
        repayData = null;
    }
    private void tblRepaymentCTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRepaymentCTableMousePressed
        // TODO add your handling code here:
        tblRepaymentCTableMousePressed();
    }//GEN-LAST:event_tblRepaymentCTableMousePressed
    private void tblRepaymentCTableMousePressed() {
        // TODO add your handling code here:

        if (tblRepaymentCTable.getSelectedRow() >= 0 || sanMousePress) {
            // If the table is in editable mode
            repayNewMode = false;
            if (sanMousePress && loanType.equals("LTD")) //ADD BY BALA
            {
                dumRowRepay = 0;
            } else {
                dumRowRepay = tblRepaymentCTable.getSelectedRow();
            }
            if (sanValueChanged) {
                dumRowRepay = 0;
            }
            updateOBFields();
            //            setAllRepaymentBtnsEnableDisable(true);
            //            setAllRepaymentDetailsEnableDisable(true);
            removeRepaymentRadioBtns();
            addRepaymentRadioBtns();
            observableRepay.resetRepaymentSchedule();
            //            observableRepay.populateRepaymentDetails(tblRepaymentCTable.getSelectedRow());
            observableRepay.populateRepaymentDetails(dumRowRepay);

            //            txtNoMonthsMora.setText(txtFacility_Moratorium_Period.getText());
            //            observableRepay.setTxtNoMonthsMora(txtNoMonthsMora.getText());  //REPAY MOROTORIUM TAKING FROM ENTERING REPAYMENT SCHEUDLE


            if ((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) || (observable.getCboAccStatus().equals("Closed")))) {
                // If the record is populated for Delete or Authorization
                setAllRepaymentBtnsEnableDisable(false);
                setAllRepaymentDetailsEnableDisable(false);
                //                btnEMI_Calculate.setEnabled(false); need for authorization
                if (loanType.equals("OTHERS")) {
                    btnEMI_Calculate.setEnabled(true);
                }
                updateRepayment = true;
            } else {
                if (enableControls) {
                    setAllRepaymentBtnsEnableDisable(true);
                    setAllRepaymentDetailsEnableDisable(true);
                    cboRepayTypeActionPerformed();
                    setRepaymentBtnsEnableDisable(false);
                    cboRepayType.setEnabled(false);
                    ClientUtil.enableDisable(panStatus_Repayment, false);
                } else {
                    setAllRepaymentBtnsEnableDisable(false);
                    setAllRepaymentDetailsEnableDisable(false);
                    if (loanType.equals("OTHERS")) {
                        btnEMI_Calculate.setEnabled(true);
                    }
                }
            }
            updateRepayment = true;
            rowRepayment = dumRowRepay;
            observable.ttNotifyObservers();
        }
        if (tdtDirect_Repay_Date.getDateValue() != null) {
            //System.out.println("tdtDirect_Repay_Date.getDateValue()>>>" + tdtDirect_Repay_Date.getDateValue());
            tdtLastInstall.setDateValue(tdtDirect_Repay_Date.getDateValue());
        }
    }

    private void tdtDateEstablishmentFocusLost() {
        // TODO add your handling code here:
        // To check the entered date is less than or equal to current date
//        ClientUtil.validateLTDate(tdtDateEstablishment);
    }

    private void tdtCreditFacilityAvailSinceFocusLost() {
        // TODO add your handling code here:
        // To check the entered date is less than or equal to current date
//        ClientUtil.validateLTDate(tdtCreditFacilityAvailSince);
    }
    private void srpRepaymentCTableMouseClicked(java.awt.event.MouseEvent  evt)
    {
        
    }

    private void tdtDealingWithBankSinceFocusLost() {
        // To check the entered date is less than or equal to current date
//        ClientUtil.validateLTDate(tdtDealingWithBankSince);
    }
    private void cboTypeOfFacilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTypeOfFacilityActionPerformed
        // Add your handling code here:
        cboTypeOfFacilityActionPerformed();
    }//GEN-LAST:event_cboTypeOfFacilityActionPerformed
    private void cboTypeOfFacilityActionPerformed() {
        // Account Head should be resetted since its value will be changed
        // based on Type of Facility and Product ID
        observable.setLblAccHead_2("");
        lblAccHead_2.setText(observable.getLblAccHead_2());
        // update the Type of Facility in Observable
        String strFacilityType = getCboTypeOfFacilityKeyForSelected();
        if (strFacilityType.equals(LOANS_AGAINST_DEPOSITS)) {
            //            if (!observable.isThisCustDepositAcctHolder(txtCustID.getText())){
            //                clearFieldsForDefaultFacilityType();  // Commented by Rajesh
            //                return;
            //            }
            morotoriumEnableDisable(false);
        } else if (!strFacilityType.equals(LOANS_AGAINST_DEPOSITS)) {
            morotoriumEnableDisable(true);
            if (strFacilityType.length() > 0) {
                observable.setProductFacilityType(strFacilityType);
                if (rowSanctionFacility == -1) {
                    if (strFacilityType.equals("SI_BEARING")) {
                        rdoInterest_Simple.setSelected(true);
                        rdoInterest_Compound.setSelected(false);
                    } else {
                        rdoInterest_Simple.setSelected(false);
                        rdoInterest_Compound.setSelected(true);
                    }
                }

                if (!observable.isThisCustShareHolder(txtCustID.getText())) {
                    clearFieldsForDefaultFacilityType();
                    return;
                }
            }
        }
        observable.setCboTypeOfFacility(CommonUtil.convertObjToStr(cboTypeOfFacility.getSelectedItem()));
        if (strFacilityType.equals("CC") || strFacilityType.equals("OD")) {
            changesInUIForAdvanceProducts();
            if (!(viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Delete"))) {
                changesInUIExceptLoanAgainstDeposit();
            }
        } else {
            changesInUIForLoanProducts();
            if (strFacilityType.equals(LOANS_AGAINST_DEPOSITS)) {
                changesInUIForLoanAgainstDeposit();
            } else if (!(viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Delete"))) {
                changesInUIExceptLoanAgainstDeposit();
            }
        }
        // Set the Product ID model according to the Type of Facility
        if (observable.getCboTypeOfFacility().length() > 0) {
            observable.setFacilityProductID();
        } else {
            observable.setProdIDAsBlank();
        }
        // Update Product ID in the Observer thru Product ID ComboBoxModel
        cboProductId.setModel(observable.getCbmProductId());
        //        if (strFacilityType.equals(LOANS_AGAINST_DEPOSITS)){
        //            if (cboProductId.getItemCount() > 1)
        //                cboProductId.setSelectedIndex(1);
        //        }
        strFacilityType = null;
        // Populate the Product ID which is in the existing record
        if (sandetail) {
            observable.populateSanctionTabProdID(rowSanctionFacility);
        }
        //        else
        //            observable.populateSanctionTabProdID(tblSanctionDetails.getSelectedRow());
        // Update the selected Item
        //        cboProductId.setSelectedItem(observable.getCboProductId());
        //        lblAccHead_2.setText(observable.getLblAccHead_2());


    }

    private String getCboTypeOfFacilityKeyForSelected() {
        return CommonUtil.convertObjToStr(((ComboBoxModel) cboTypeOfFacility.getModel()).getKeyForSelected());
    }

    private void clearFieldsForDefaultFacilityType() {
        //        cboTypeOfFacility.setSelectedItem("");
        observable.getCbmTypeOfFacility().setKeyForSelected("");
        observable.setProdIDAsBlank();
        cboProductId.setModel(observable.getCbmProductId());
        observable.getCbmProductId().setKeyForSelected("");
        //        observable.setCboProductId("");
        //        cboProductId.setSelectedItem(observable.getCboProductId());
        if (!(viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Delete"))) {
            changesInUIExceptLoanAgainstDeposit();
        }
    }

    private void morotoriumEnableDisable(boolean val) {
        chkMoratorium_Given.setEnabled(val);
        //        txtFacility_Moratorium_Period.setEnabled(val);
    }

    private void changesInUIForAdvanceProducts() {
        tabLimitAmount.add(panAccountDetails, "Other Details");
        //        tabLimitAmount.remove(settlementUI);
        fieldsToHideBasedOnAccount(false);
        lblNoInstallments.setText(resourceBundle.getString("lblNoInstallments_PROD"));
        lblRepayFreq.setText("Period");
        lblRepayFreq.setName("Period");
        lblTDate.setText("Expiry Dt");
        lblTDate.setName("Expiry Dt");
        lblFDate.setText("Start Dt");
        lblFDate.setName("Start Dt");
        if (!(viewType.equals(AUTHORIZE) || viewType.equals("Delete"))) {
            observable.setCbmRepayFreq(observable.getCbmRepayFreq_ADVANCE());
            cboRepayFreq.setModel(observable.getCbmRepayFreq());
        }
        if ((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT))) {//(observable.getStrACNumber().length() <= 0) || 
            ClientUtil.enableDisable(panAccountDetails, false);
        } else {
            ClientUtil.enableDisable(panAccountDetails, true);
            disableLastIntApplDate();
        }
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
            odRenewalVisibleComp(false);
        } else {
            odRenewalVisibleComp(true);
        }
        tabLimitAmount.remove(panRepaymentSchedule);
        tabLimitAmount.remove(panCaseDetails); //case detail pane
    }

    private void disableLastIntApplDate() {
        tdtDebit.setEnabled(false);
        tdtCredit.setEnabled(false);
    }

    private void changesInUIForLoanProducts() {
        fieldsToHideBasedOnAccount(true);
        if (!(observable.getActionType() == ClientConstants.ACTIONTYPE_NEW)) {
            tabLimitAmount.addTab("Case Details", panCaseDetails);
            tabLimitAmount.add(panRepaymentSchedule, "Repayment Schedule", 5);
        }
        tabLimitAmount.remove(panAccountDetails);
        lblFDate.setText(resourceBundle.getString("lblFDate"));
        lblTDate.setText(resourceBundle.getString("lblTDate"));
        lblFDate.setName(resourceBundle.getString("lblFDate"));
        lblTDate.setName(resourceBundle.getString("lblTDate"));
        //        tabLimitAmount.add(panCaseDetails); //case detail pane
        //        tabLimitAmount.add("Settlement",settlementUI);//dontdelete
        //        tabLimitAmount.remove(panAccountDetails);
        lblNoInstallments.setText(resourceBundle.getString("lblNoInstallments"));
        lblRepayFreq.setText(resourceBundle.getString("lblRepayFreq"));
        if (!(viewType.equals(AUTHORIZE) || viewType.equals("Delete"))) {
            observable.setCbmRepayFreq(observable.getCbmRepayFreq_LOAN());
            cboRepayFreq.setModel(observable.getCbmRepayFreq());
        }
    }

    private void changesInUIForLoanAgainstDeposit() {
        HashMap whereMap = new HashMap();
        HashMap keyMap = new HashMap();
        HashMap depositName = null;
        boolean haveData = false;

        if (observable.getStrACNumber().length() > 0 && observable.getProductCategory().equals("")) {
            keyMap.put("ACCT_NO", observable.getStrACNumber());

            whereMap.put(CommonConstants.MAP_NAME, "getDepositLienDetails");
            whereMap.put(CommonConstants.MAP_WHERE, keyMap);
            java.util.List lst = ClientUtil.executeQuery("getDepositLienHolderName", keyMap);
            if (lst.size() > 0) {
                depositName = (HashMap) lst.get(0);
//                haveData = ClientUtil.setTableModel(whereMap, tblSecurityTable, false);
//                observableSecurity.setLblCustName_Security_Display(CommonUtil.convertObjToStr(depositName.get("NAME")));
//                lblCustName_Security_Display.setText(CommonUtil.convertObjToStr(depositName.get("NAME")));
            } else {
                ClientUtil.showMessageWindow("Deposit Lien details not found...");
            }
        }

        if (!haveData) {
//            observableSecurity.setTblDepositSecurityTable();
//            tblSecurityTable.setModel(observableSecurity.getTblSecurityTab());
            tabLimitAmount.add(panSecurityDetails, "Security Details", 2);
        } else {
//            observable.setDepositNo(CommonUtil.convertObjToStr(tblSecurityTable.getValueAt(0,0)));
//            observableSecurity.setTblSecurityTab((com.see.truetransact.clientutil.EnhancedTableModel)tblSecurityTable.getModel());
        }

        whereMap = null;
        keyMap = null;
//        setAllSecurityDetailsEnableDisable(false);
//        setAllSecurityBtnsEnableDisable(false);
//        tblSecurityTable.setEnabled(false);
    }

    private void changesInUIExceptLoanAgainstDeposit() {
//        observableSecurity.setTblSecurityTable();
//        tblSecurityTable.setModel(observableSecurity.getTblSecurityTab());
//        tblSecurityTable.setEnabled(true);
    }

    private void fieldsToHideBasedOnAccount(boolean val) {
        lblMoratorium_Given.setVisible(val);
        chkMoratorium_Given.setVisible(val);
        txtFacility_Moratorium_Period.setVisible(val);
        lblFacility_Moratorium_Period.setVisible(val);
        lblFacility_Repay_Date.setVisible(val);
        tdtFacility_Repay_Date.setVisible(val);
        lblMultiDisburseAllow.setVisible(val);
        rdoMultiDisburseAllow_No.setVisible(val);
        rdoMultiDisburseAllow_Yes.setVisible(val);
        rdoDP_YES.setVisible(!val);
        rdoDP_NO.setVisible(!val);
        lblDPLimit.setVisible(!val);
    }                                                                                                                                                    private void txtToAmtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToAmtFocusLost
            // Add your handling code here:
            txtToAmtFocusLost();
    }//GEN-LAST:event_txtToAmtFocusLost
    private void txtToAmtFocusLost() {
        // To check whether the From amount is less than the To amount
        updateFromToAmountOB();
        if (!txtFromAmt.getText().equals("")) {
            if (CommonUtil.convertObjToInt(txtFromAmt.getText()) > CommonUtil.convertObjToInt(txtToAmt.getText())) {
                observableInt.setTxtToAmt("");
            }
        }
        updateFromToAmount();
    }
    private void txtFromAmtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromAmtFocusLost
        // Add your handling code here:
        txtFromAmtFocusLost();
    }//GEN-LAST:event_txtFromAmtFocusLost
    private void txtFromAmtFocusLost() {
        // To check whether the From amount is less than the To amount
        updateFromToAmountOB();
        if (!txtToAmt.getText().equals("")) {
            if (CommonUtil.convertObjToInt(txtFromAmt.getText()) > CommonUtil.convertObjToInt(txtToAmt.getText())) {
                observableInt.setTxtFromAmt("");
            }
        }
        updateFromToAmount();
    }

    private void updateFromToAmountOB() {
        observableInt.setTxtFromAmt(txtFromAmt.getText());
        observableInt.setTxtToAmt(txtToAmt.getText());
    }

    private void updateFromToAmount() {
        txtFromAmt.setText(observableInt.getTxtFromAmt());
        txtToAmt.setText(observableInt.getTxtToAmt());
    }

    private void tdtAsOnFocusLost() {
        // To check the entered date is less than or equal to current date
//        ClientUtil.validateLTDate(tdtAsOn);
    }

    private void tdtTDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtTDateFocusLost
        // Add your handling code here:
        tdtTDateFocusLost();
    }//GEN-LAST:event_tdtTDateFocusLost
    private void tdtTDateFocusLost() {
        // To check whether this To date is greater than this details From date
        ClientUtil.validateToDate(tdtTDate, tdtFDate.getDateValue());
        // To check whether this To date is greater than this details repayment date
        int installmentInt = 0;
        if ((!txtNoInstallments.getText().equals(""))) {
            String instNo = txtNoInstallments.getText();
            installmentInt = Integer.parseInt(instNo);
        }
        if (loanType.equals("OTHERS")) {
            if (cboRepayFreq.getSelectedItem().equals("Lump Sum")) {
                tdtFacility_Repay_Date.setDateValue(tdtTDate.getDateValue());
            } else if (installmentInt > 1) {
                ClientUtil.validateToDate(tdtTDate, tdtFacility_Repay_Date.getDateValue());
            }
            tdtTDate.setEnabled(true);
        } else {
            tdtTDate.setEnabled(false);
        }
        populatePeriodDifference();
    }
    private void tdtFDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtFDateFocusLost
        // Add your handling code here:
        tdtFDateFocusLost();
        //        txtNoInstallmentsFocusLost();
    }//GEN-LAST:event_tdtFDateFocusLost
    private void tdtFDateFocusLost() {
        // To check whether this From date is less than this details To date
        ClientUtil.validateFromDate(tdtFDate, tdtTDate.getDateValue());
        // To check whether this From date is greater than the sanction date
        if (!tdtFDate.getDateValue().equals(tdtSanctionDate.getDateValue())) {
            ClientUtil.validateToDate(tdtFDate, tdtSanctionDate.getDateValue());
        }
        if (cboRepayFreq.getSelectedItem().equals("User Defined") || cboRepayFreq.getSelectedItem().equals("Lump Sum")) {
            moratorium_Given_Calculation();
        } else {
            calculateSanctionToDate();
        }
        populatePeriodDifference();
        txtNoMonthsMora.setText(txtFacility_Moratorium_Period.getText());
        observableRepay.setTxtNoMonthsMora(txtNoMonthsMora.getText());
    }

    private void calculateSanctionToDate() {
        String facilityType = CommonUtil.convertObjToStr(((ComboBoxModel) cboTypeOfFacility.getModel()).getKeyForSelected());
        if (!(viewType.equals(AUTHORIZE) || (viewType.equals("Edit") && observable.getClearBalance() == 0) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Delete")) || (!facilityType.equals("OD"))) {
            if (!tdtFDate.getDateValue().equals("") && !cboRepayFreq.getSelectedItem().equals("") && !txtNoInstallments.getText().equals("")) {
                moratorium_Given_Calculation();
                java.util.GregorianCalendar gCalendar = new java.util.GregorianCalendar();
                java.util.GregorianCalendar gCalendarrepaydt = new java.util.GregorianCalendar(); //forrepaydate shoude change from first dt
                if (CommonUtil.convertObjToStr(tdtFacility_Repay_Date.getDateValue()).equals("")) {
                    tdtFacility_Repay_Date.setDateValue(tdtFDate.getDateValue());
                }
                gCalendar.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
                gCalendar.setTime(DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
                gCalendarrepaydt.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
                gCalendarrepaydt.setTime(DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
                int dateVal = observable.getIncrementType();
                int incVal = observable.getInstallNo(txtNoInstallments.getText(), dateVal);
                date = new java.util.Date();
                date = DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue());
                if (txtNoInstallments.getText().equals("1")) {
                    date = DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue());
                }
                //System.out.println("Date##" + date);
                if (dateVal <= 7) {
                    gCalendar.add(gCalendar.DATE, incVal);
                } else if (dateVal >= 30) {
                    gCalendar.add(gCalendar.MONTH, incVal);
                    int firstInstall = dateVal / 30;
                    gCalendarrepaydt.add(gCalendarrepaydt.MONTH, firstInstall);//for repaydate
                }
                tdtTDate.setDateValue(DateUtil.getStringDate(gCalendar.getTime()));

                observable.setTdtTDate(tdtTDate.getDateValue());
                //Added BY Suresh  //modified by rishad 15/10/2018 for  recovery purpose
//                if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")){
                      if(rdoSalaryRecovery_Yes.isSelected()==true){
                    HashMap whereMap = new HashMap();
                    if ((observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) || (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT)) {
                        tdtFDate.setEnabled(false);
                        tdtFacility_Repay_Date.setEnabled(true);
                    }
                    List recoveryParameterList = ClientUtil.executeQuery("getRecoveryParameters", whereMap);
                    if (recoveryParameterList != null & recoveryParameterList.size() > 0) {
                        whereMap = (HashMap) recoveryParameterList.get(0);
                        int firstDay = 0;
                        int sanctionDay = 0;
                        int installmentStartDay = 0;
                        Date sancDt = DateUtil.getDateMMDDYYYY(tdtSanctionDate.getDateValue());
                        Date instDate = DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue());
                        firstDay = CommonUtil.convertObjToInt(whereMap.get("FIRST_DAY"));
                        sanctionDay = sancDt.getDate();
                        installmentStartDay = instDate.getDate();
                        //System.out.println("###### firstDay : " + firstDay);
                        //System.out.println("###### sanctionDay : " + sanctionDay);
                        GregorianCalendar cal = new GregorianCalendar((sancDt.getYear() + 1900), sancDt.getMonth(), sancDt.getDate());
                        GregorianCalendar instCal = new GregorianCalendar((instDate.getYear() + 1900), instDate.getMonth(), instDate.getDate());
                        int lastDayOfMonth = cal.getActualMaximum(cal.DAY_OF_MONTH);
                        int lastDayOfInstMonth = instCal.getActualMaximum(instCal.DAY_OF_MONTH);
                        Date dt = cal.getTime();
                        Date insDt = instCal.getTime();
                        if(chkMoratorium_Given.isSelected()== false){
                            if (sanctionDay <= firstDay) {
                                cal.set(dt.getYear() + 1900, dt.getMonth(), lastDayOfMonth);
                                dt = cal.getTime();
                                //System.out.println("###### Current Month gCalendarrepaydt : " + dt);
                            } else {
                                cal.set(dt.getYear() + 1900, dt.getMonth() + 1, dt.getDate());
                                lastDayOfMonth = cal.getActualMaximum(cal.DAY_OF_MONTH);
                                dt = cal.getTime();
                                dt.setDate(lastDayOfMonth);
                                //System.out.println("###### Next Month gCalendarrepaydt : " + dt);
                            }
                            tdtFacility_Repay_Date.setDateValue(DateUtil.getStringDate(dt));
                            gCalendarrepaydt.set(dt.getYear() + 1900, dt.getMonth(), dt.getDate());
                            observableRepay.setTdtFirstInstall(tdtFacility_Repay_Date.getDateValue());
                            tdtRepayFromDate.setDateValue(tdtFacility_Repay_Date.getDateValue());
                            repaymentDate = (Date) dt;
                            //To Date
                            gCalendar = new java.util.GregorianCalendar();
                            gCalendar.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
                            gCalendar.setTime(DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
                            dateVal = observable.getIncrementType();
                            incVal = observable.getInstallNo(String.valueOf(CommonUtil.convertObjToDouble(txtNoInstallments.getText()).doubleValue() - 1), dateVal);
                            date = new java.util.Date();
                            date = DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue());
                            if (txtNoInstallments.getText().equals("1")) {
                                date = DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue());
                            }
                            if (dateVal <= 7) {
                                gCalendar.add(gCalendar.DATE, incVal);
                            } else if (dateVal >= 30) {
                                gCalendar.add(gCalendar.MONTH, incVal);
                            }
                            tdtTDate.setDateValue(DateUtil.getStringDate(gCalendar.getTime()));
                            Date tdtFacDt = DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue());
                            if (tdtFacDt.getDate() > 10) {
                                GregorianCalendar gc = new GregorianCalendar();
                                gc.set(tdtFacDt.getYear() + 1900, tdtFacDt.getMonth(), 1);
                                java.util.Date monthStartDate = new java.util.Date(gc.getTime().getTime());
                                System.out.println("monthStartDate :" + monthStartDate);
                                Calendar calendar = Calendar.getInstance();
                                calendar.setTime(monthStartDate);
                                calendar.add(calendar.MONTH, 1);
                                calendar.add(calendar.DAY_OF_MONTH, -1);
                                java.util.Date monthEndDate = new java.util.Date(calendar.getTime().getTime());
                                tdtTDate.setDateValue(DateUtil.getStringDate(monthEndDate));
                                System.out.println("monthEndDate :" + monthEndDate);
                            }

                            observable.setTdtTDate(tdtTDate.getDateValue());
                        }
                    
                        if (chkMoratorium_Given.isSelected() == true) {
                            if (installmentStartDay <= firstDay) {
                                instCal.set(insDt.getYear() + 1900, insDt.getMonth(), lastDayOfInstMonth);
                                insDt = instCal.getTime();
                                //System.out.println("###### Current Month gCalendarrepaydt : " + dt);
                            } else {
                                instCal.set(insDt.getYear() + 1900, insDt.getMonth() + 1, insDt.getDate());
                                lastDayOfInstMonth = instCal.getActualMaximum(instCal.DAY_OF_MONTH);
                                insDt = instCal.getTime();
                                insDt.setDate(lastDayOfInstMonth);
                                //System.out.println("###### Next Month gCalendarrepaydt : " + dt);
                            }
                            tdtFacility_Repay_Date.setDateValue(DateUtil.getStringDate(insDt));
                            gCalendarrepaydt.set(insDt.getYear() + 1900, insDt.getMonth(), insDt.getDate());
                            observableRepay.setTdtFirstInstall(tdtFacility_Repay_Date.getDateValue());
                            tdtRepayFromDate.setDateValue(tdtFacility_Repay_Date.getDateValue());
                            repaymentDate = (Date) insDt;
                            //To Date
                            gCalendar = new java.util.GregorianCalendar();
                            gCalendar.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
                            gCalendar.setTime(DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue()));
                            dateVal = observable.getIncrementType();
                            incVal = observable.getInstallNo(String.valueOf(CommonUtil.convertObjToDouble(txtNoInstallments.getText()).doubleValue() - 1), dateVal);
                            date = new java.util.Date();
                            date = DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue());
                            if (txtNoInstallments.getText().equals("1")) {
                                date = DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue());
                            }
                            if (dateVal <= 7) {
                                gCalendar.add(gCalendar.DATE, incVal);
                            } else if (dateVal >= 30) {
                                gCalendar.add(gCalendar.MONTH, incVal);
                            }
                            tdtTDate.setDateValue(DateUtil.getStringDate(gCalendar.getTime()));
                            observable.setTdtTDate(tdtTDate.getDateValue());
                        }
                    } else {
                        ClientUtil.showMessageWindow("Pls Enter Recovery Parameter Details");
                        return;
                    }
                } 
                else {
                    if ((observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) || (observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT)) {
                        tdtFDate.setEnabled(true);
                        tdtFacility_Repay_Date.setEnabled(false);
                    }
                }
                tdtFirstInstall.setDateValue(tdtFacility_Repay_Date.getDateValue());//repay
                tdtFacility_Repay_Date.setDateValue(DateUtil.getStringDate(gCalendarrepaydt.getTime()));
                observable.setTdtFacility_Repay_Date(tdtFacility_Repay_Date.getDateValue()); //for repaydate
                gCalendar = null;
                gCalendarrepaydt = null;
            } else {
                tdtTDate.setDateValue("");
                observable.setTdtTDate("");
                tdtFacility_Repay_Date.setDateValue("");
                observable.setTdtFacility_Repay_Date("");
                observable.setTxtPeriodDifference_Days("");
                observable.setTxtPeriodDifference_Months("");
                observable.setTxtPeriodDifference_Years("");
                updatePeriodDifference();
            }
        }
    }

    private void populatePeriodDifference() {
        if (!tdtFDate.getDateValue().equals("") && !tdtTDate.getDateValue().equals("") && !tdtFacility_Repay_Date.getDateValue().equals("") && !cboRepayFreq.getSelectedItem().equals("") && !txtNoInstallments.getText().equals("")) {
            if (CommonUtil.convertObjToStr(((ComboBoxModel) cboRepayFreq.getModel()).getKeyForSelected()).equals("0")) {
                observable.populatePeriodDifference(tdtFDate.getDateValue(), tdtTDate.getDateValue());
            } else {
                observable.populatePeriodDifference(txtNoInstallments.getText(), CommonUtil.convertObjToStr(((ComboBoxModel) cboRepayFreq.getModel()).getKeyForSelected()), txtFacility_Moratorium_Period.getText());
            }
            updatePeriodDifference();
        } else {
            observable.setTxtPeriodDifference_Days("");
            observable.setTxtPeriodDifference_Months("");
            observable.setTxtPeriodDifference_Years("");
            updatePeriodDifference();
        }
    }

    private void updatePeriodDifference() {
        txtPeriodDifference_Days.setText(observable.getTxtPeriodDifference_Days());
        txtPeriodDifference_Months.setText(observable.getTxtPeriodDifference_Months());
        txtPeriodDifference_Years.setText(observable.getTxtPeriodDifference_Years());
    }

    private void tdtDemandPromNoteExpDateFocusLost() {
        // To check whether this To date is greater than this details From date
        ClientUtil.validateToDate(tdtDemandPromNoteExpDate, tdtDemandPromNoteDate.getDateValue());
    }

    private void tdtDemandPromNoteDateFocusLost() {
        // To check whether this From date is less than this details To date
        ClientUtil.validateFromDate(tdtDemandPromNoteDate, tdtDemandPromNoteExpDate.getDateValue());
        if (observable.getStrACNumber().equals("")) {
            calculateDPNExpDate();
        }
    }

    private void calculateDPNExpDate() {
        if (tdtDemandPromNoteDate.getDateValue().length() > 0) {
            java.util.GregorianCalendar gCalendar = new java.util.GregorianCalendar();
            gCalendar.setGregorianChange(DateUtil.getDateMMDDYYYY(tdtDemandPromNoteDate.getDateValue()));
            gCalendar.setTime(DateUtil.getDateMMDDYYYY(tdtDemandPromNoteDate.getDateValue()));
            gCalendar.add(gCalendar.YEAR, 3);
            tdtDemandPromNoteExpDate.setDateValue(DateUtil.getStringDate(DateUtil.addDays(gCalendar.getTime(), -1)));
            observable.setTdtDemandPromNoteExpDate(CommonUtil.convertObjToStr(tdtDemandPromNoteExpDate.getDateValue()));
            gCalendar = null;
        }
    }

    private void tdtToDateFocusLost() {
        // To check whether this To date is greater than this details From date
        //        ClientUtil.validateToDate(tdtToDate, tdtFromDate.getDateValue());
    }

    private void tdtFromDateFocusLost() {
        // To check whether this From date is less than this details To date
        //        ClientUtil.validateFromDate(tdtFromDate, tdtToDate.getDateValue());
    }

    private void tdtAsOn_GDFocusLost() {
        // To check the entered date is less than or equal to current date
        ClientUtil.validateLTDate(tdtAsOn_GD);
    }

    private void tdtLastInstallFocusLost() {
        // To check whether this To date is greater than this details From date
        ClientUtil.validateToDate(tdtLastInstall, tdtRepayFromDate.getDateValue());// tdtFirstInstall.getDateValue());
        // To check whether this To date is fall within Facility details To date
        if (!tdtLastInstall.getDateValue().equals(tdtTDate.getDateValue())) {
            ClientUtil.validateFromDate(tdtLastInstall, tdtTDate.getDateValue());
        }
        // To check whether this To date is fall within Facility details From date
        ClientUtil.validateToDate(tdtLastInstall, tdtFDate.getDateValue());
        // To check whether this To date is fall within Facility details Repayment date
        ClientUtil.validateToDate(tdtLastInstall, tdtFacility_Repay_Date.getDateValue());
    }
    private void tdtFirstInstallFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtFirstInstallFocusLost
        // Add your handling code here:
        tdtFirstInstallFocusLost();
    }//GEN-LAST:event_tdtFirstInstallFocusLost
    private void tdtFirstInstallFocusLost() {
        if (!outStandingAmtRepayment) {
            // To check whether this From date is less than this details To date
            //            ClientUtil.validateFromDate(tdtFirstInstall, tdtLastInstall.getDateValue());tdtRepayFromDate
            ClientUtil.validateFromDate(tdtRepayFromDate, tdtLastInstall.getDateValue());
            // To check whether this From date is less than Facility details To date
            ClientUtil.validateFromDate(tdtRepayFromDate, tdtTDate.getDateValue());
            ClientUtil.validateFromDate(tdtRepayFromDate, tdtTDate.getDateValue());
            // To check whether this From date is greater than Facility details From date
            ClientUtil.validateToDate(tdtFirstInstall, tdtFDate.getDateValue());
            ClientUtil.validateToDate(tdtFirstInstall, tdtFDate.getDateValue());
            // To check whether this From date is greater than Facility details Repayment date
            if (!tdtFirstInstall.getDateValue().equals(tdtFacility_Repay_Date.getDateValue())) {
                ClientUtil.validateToDate(tdtFirstInstall, tdtFacility_Repay_Date.getDateValue());
            }
        }
        calculateRepayToDate();
    }
    private void btnDeleteBorrowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBorrowerActionPerformed
        // Add your handling code here:
        if (poaUI.checkCustIDExistInJointAcctAndPoA(CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(tblBorrowerTabCTable.getSelectedRow(), 1)))) {
            btnDeleteBorrowerActionPerformed();
        }
    }//GEN-LAST:event_btnDeleteBorrowerActionPerformed
    private void btnDeleteBorrowerActionPerformed() {
        updateOBFields();
        setBorrowerNewOnlyEnable();
        String strCustIDToDel = CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(tblBorrowerTabCTable.getSelectedRow(), 1));
        observableBorrow.deleteJointAccntHolder(strCustIDToDel, tblBorrowerTabCTable.getSelectedRow());
        observableBorrow.resetBorrowerTabCustomer();
        authSignUI.removeAcctLevelCustomer(strCustIDToDel);
        strCustIDToDel = null;
        observable.ttNotifyObservers();
    }
    private void btnDelete_BorrowerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDelete_BorrowerMousePressed
        // Add your handling code here:
    }//GEN-LAST:event_btnDelete_BorrowerMousePressed

    private void btnToMain_BorrowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToMain_BorrowerActionPerformed
        // Add your handling code here:
        btnToMain_BorrowerActionPerformed();
    }//GEN-LAST:event_btnToMain_BorrowerActionPerformed
    private void btnToMain_BorrowerActionPerformed() {
        updateOBFields();
        setBorrowerNewOnlyEnable();
        observableComp.resetCustomerDetails();
        observableBorrow.moveToMain(CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(0, 1)), CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(tblBorrowerTabCTable.getSelectedRow(), 1)), tblBorrowerTabCTable.getSelectedRow());
        observable.ttNotifyObservers();
    }
//GEN-FIRST:event_btnDelete_BorrowerActionPerformed
//GEN-LAST:event_btnDelete_BorrowerActionPerformed
                                                                                                                                                    private void btnNew_BorrowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNew_BorrowerActionPerformed
                                                                                                                                                        // Add your handling code here:
                                                                                                                                                        if (tblBorrowerTabCTable.getRowCount() != 0) {
                                                                                                                                                            // If the Main Accnt Holder is selected,
                                                                                                                                                            //                                                                                                                                                    callView("JOINT ACCOUNT");
                                                                                                                                                            viewType = "JOINT ACCOUNT";
                                                                                                                                                            new CheckCustomerIdUI(this);
                                                                                                                                                            // Allow the user to add Jnt Acct Holder
                                                                                                                                                        } else {
                                                                                                                                                            // Else if the Main Acct Holder is not selected, prompt the user to select
                                                                                                                                                            // the Main Acct. holder
                                                                                                                                                            observableBorrow.mainCustDoesntExistWarn();
                                                                                                                                                            btnCustID.requestFocus(true);
                                                                                                                                                        }
    }//GEN-LAST:event_btnNew_BorrowerActionPerformed

    private void tblBorrowerTabCTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBorrowerTabCTableMousePressed
        // Add your handling code here:

        observableBorrow.btnPressed = true;
        observableBorrow.resetBorrowerTabCustomer();
        if ((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT))) {
            // Don't do anything if the record is in Delete or Authroization mode
            setAllBorrowerBtnsEnableDisable(false);
//            setCompanyDetailsEnableDisable(false);
            setBorrowerDetailsEnableDisable(false);
            HashMap cust = new HashMap();
            cust.put("CUST_ID", tblBorrowerTabCTable.getValueAt(tblBorrowerTabCTable.getSelectedRow(), 1));
            observableBorrow.populateBorrowerTabCustomerDetails(cust, true, loanType);
            updateBorrowerTabCustDetails();
            cust = null;
            if (tblBorrowerTabCTable.getSelectedRowCount() > 0 && evt.getClickCount() == 2) {
                new CustomerDetailsScreenUI(CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(tblBorrowerTabCTable.getSelectedRow(), 1))).show();
            }
        } else {
            if (tblBorrowerTabCTable.getSelectedRowCount() > 0 && evt.getClickCount() == 2) {
                new CustomerDetailsScreenUI(CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(tblBorrowerTabCTable.getSelectedRow(), 1))).show();
            }
            tblBorrowerTabCTableMousePressed(tblBorrowerTabCTable.getSelectedRow());
        }
    }//GEN-LAST:event_tblBorrowerTabCTableMousePressed
    private void tblBorrowerTabCTableMousePressed(int rowSelected) {
        if (tblBorrowerTabCTable.getSelectedRow() != 0) {
            if ((((ComboBoxModel) cboConstitution.getModel()).getKeyForSelected()).equals(JOINT_ACCOUNT)) {
                setAllBorrowerBtnsEnableDisable(true);
            } else {
                setAllBorrowerBtnsEnableDisable(false);
            }
        } else {
            if ((((ComboBoxModel) cboConstitution.getModel()).getKeyForSelected()).equals(JOINT_ACCOUNT)) {
                setBorrowerNewOnlyEnable();
            } else {
                setAllBorrowerBtnsEnableDisable(false);
            }
        }
        HashMap cust = new HashMap();
        cust.put("CUST_ID", tblBorrowerTabCTable.getValueAt(tblBorrowerTabCTable.getSelectedRow(), 1));
        observableBorrow.populateBorrowerTabCustomerDetails(cust, true, loanType);
        updateBorrowerTabCustDetails();
        cust = null;
    }
    private void cboConstitutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboConstitutionActionPerformed
        // Add your handling code here:
        observableBorrow.setCboConstitution(CommonUtil.convertObjToStr(cboConstitution.getSelectedItem()));
        if (observableBorrow.getCboConstitution().length() > 0) {
            cboConstitutionActionPerformed();
            validateConstitutionCustID();
        }
    }//GEN-LAST:event_cboConstitutionActionPerformed
    private void cboConstitutionActionPerformed() {
        if (observableBorrow.getCbmConstitution().getKeyForSelected().equals(JOINT_ACCOUNT)) {
            setBorrowerNewOnlyEnable();
        } else {
            // To delete all the Customer(Excluding Main) Records
            // when Constitution is not Joint Account
            checkJointAccntHolderForData();
        }
    }

    private String isJointAcctHavingAtleastOneCust() {
        StringBuffer stbWarnMsg = new StringBuffer("");
        if (observableBorrow.getCbmConstitution().getKeyForSelected().equals(JOINT_ACCOUNT) && tblBorrowerTabCTable.getRowCount() <= 1) {
            stbWarnMsg.append("\n");
            stbWarnMsg.append(resourceBundle.getString("jointAcctDontHaveProperCustDetailsWarning"));
        }
        return stbWarnMsg.toString();
    }

    private void addCustIDNAuthSignatory() {
        int borrowerTabRowCount = tblBorrowerTabCTable.getRowCount();
        for (int i = borrowerTabRowCount - 1, j = 0; i >= 0; --i, ++j) {
            authSignUI.addAcctLevelCustomer(CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(j, 1)));
        }
    }

    private void removedJointAcctCustIDNAuthSignatory() {
        int borrowerTabRowCount = tblBorrowerTabCTable.getRowCount();
        for (int i = borrowerTabRowCount - 1, j = 1; i >= 1; --i, ++j) {
            authSignUI.removeAcctLevelCustomer(CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(j, 1)));
        }
    }

    private void checkJointAccntHolderForData() {
        if (tblBorrowerTabCTable.getRowCount() > 1) {
            int reset = observableBorrow.jointAcctWarn();
            if (reset == 0) {
                removedJointAcctCustIDNAuthSignatory();
                observableBorrow.resetBorrowerTabCTable();
                custInfoDisplay(txtCustID.getText(), loanType);
                poaUI.resetPoACustID(txtCustID.getText());
                observableBorrow.resetBorrowerTabCustomer();
                updateBorrowerTabCustDetails();
                setAllBorrowerBtnsEnableDisable(false);
                poaUI.setCboPoACustModel();
            } else if (reset == 1) {
                observableBorrow.setCboConstitution(CommonUtil.convertObjToStr(observableBorrow.getCbmConstitution().getDataForKey(JOINT_ACCOUNT)));
                cboConstitution.setSelectedItem(observableBorrow.getCboConstitution());
            }
        } else {
            //            custInfoDisplay(txtCustID.getText(), loanType);
            setAllBorrowerBtnsEnableDisable(false);
        }
    }

    public void callView(String currField) {
        viewType = currField;
        authSignUI.setViewType(viewType);
        poaUI.setViewType(viewType);
        // If Customer Id is selected OR JointAccnt New is clciked, show the popup Screen of Customer Table
        if ((currField.equals("CUSTOMER ID")) || (currField.equals("JOINT ACCOUNT"))) {
            HashMap viewMap = new HashMap();
            StringBuffer presentCust = new StringBuffer();
            int jntAccntTablRow = tblBorrowerTabCTable.getRowCount();
            if (tblBorrowerTabCTable.getRowCount() != 0) {
                for (int i = 0, sizeJointAcctAll = tblBorrowerTabCTable.getRowCount(); i < sizeJointAcctAll; i++) {
                    if (i == 0 || i == sizeJointAcctAll) {
                        presentCust.append("'" + CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(i, 1)) + "'");
                    } else {
                        presentCust.append("," + "'" + CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(i, 1)) + "'");
                    }
                }
            }
            HashMap whereMap = new HashMap();
            if (txtSHGId.getText().length() > 0) {
                whereMap.put("SHG_ID", txtSHGId.getText());
                viewMap.put("MAPNAME", "getSelectCustListForSHG");
            } else {
                if (loanType.equals("LTD")) {
                    viewMap.put("MAPNAME", "getSelectCustListForLTD");
                } else {
                    viewMap.put("MAPNAME", "getSelectLoanAccInfoList");
                }
            }
            whereMap.put("CUSTOMER_ID", presentCust);
            //            String strSelectedProdType = CommonUtil.convertObjToStr(((ComboBoxModel)cboProdType.getModel()).getKeyForSelected());
            //            if (!strSelectedProdType.equals(LOANS_AGAINST_DEPOSITS)){
            //                // If the Product is not Loan against Term Deposit
            //                // then the customer should be a share holder
            //                // else the customer should be Term Deposit Holder
            //                whereMap.put(IS_COOPERATIVE, CommonConstants.IS_COOPERATIVE);
            //            }
            whereMap.put(CommonConstants.BRANCH_ID, getSelectedBranchID());
            whereMap.put("CURR_DT", (Date) curr_dt.clone());
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
            presentCust = null;
        } else if (currField.equals("DISBURSEMENT_DETAILS")) {
            HashMap viewMap = new HashMap();
            viewMap.put("MAPNAME", "getDisbursementDetails");
            HashMap whereMap = new HashMap();
            whereMap.put("ACT_NUM", observable.getStrACNumber());
            HashMap statusMap = observableRepay.getActiveAndInActiveScheduleNo();
            if (statusMap.containsKey("INACTIVE_NO")) {
                whereMap.put("REPAYMENT_SCHEDULE_NO", statusMap.get("INACTIVE_NO"));
            }
            if (statusMap.containsKey("ACTIVE_NO")) {
                whereMap.put("DISBURSEMENT_ID", statusMap.get("ACTIVE_NO"));
            }
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        } else if (currField.equals("DEPOSIT_CUSTOMER")) {
            HashMap viewMap = new HashMap();
            viewMap.put("MAPNAME", "getSelectDepositCustListForLTD");
            HashMap whereMap = new HashMap();
            Date currDt = (Date) curr_dt.clone();
            Date sancDt = DateUtil.getDateMMDDYYYY(tdtSanctionDate.getDateValue());
            currDt.setDate(sancDt.getDate());
            currDt.setMonth(sancDt.getMonth());
            currDt.setYear(sancDt.getYear());
            whereMap.put("CURR_DT", currDt);
            whereMap.put("LOAN_PROD_ID", CommonUtil.convertObjToStr(observable.getCbmProductId().getKeyForSelected()));

            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        } else if (currField.equals("PADDY_CUSTOMER")) {
            HashMap viewMap = new HashMap();
            viewMap.put("MAPNAME", "getSelectPaddyCustDetails");
            HashMap whereMap = new HashMap();
            Date currDt = (Date) curr_dt.clone();
            Date sancDt = DateUtil.getDateMMDDYYYY(tdtSanctionDate.getDateValue());
            currDt.setDate(sancDt.getDate());
            currDt.setMonth(sancDt.getMonth());
            currDt.setYear(sancDt.getYear());
            whereMap.put("CURR_DT", currDt);
            whereMap.put("LOAN_PROD_ID", CommonUtil.convertObjToStr(observable.getCbmProductId().getKeyForSelected()));

            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        } else if (currField.equals("MDS_CUSTOMER")) {
            HashMap viewMap = new HashMap();
            viewMap.put("MAPNAME", "getSelectMDSCustDetails");
            HashMap whereMap = new HashMap();
            Date currDt = (Date) curr_dt.clone();
            Date sancDt = DateUtil.getDateMMDDYYYY(tdtSanctionDate.getDateValue());
            currDt.setDate(sancDt.getDate());
            currDt.setMonth(sancDt.getMonth());
            currDt.setYear(sancDt.getYear());
            whereMap.put("CURR_DT", currDt);
            whereMap.put("LOAN_PROD_ID", CommonUtil.convertObjToStr(observable.getCbmProductId().getKeyForSelected()));

            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        } else if (currField.equals("SHG_ID")) {
            HashMap viewMap = new HashMap();
            viewMap.put(CommonConstants.MAP_NAME, "getSHGIDDetails");
            new ViewAll(this, viewMap).show();
        } else if (currField.equals("EXISTING_CUSTOMER") && txtExistingAcctNo.getText().length() > 0) {
            HashMap existingMap = new HashMap();
            existingMap.put("ACT_NUM", txtExistingAcctNo.getText());
            List mapDataList = null;
            if (txtSHGId.getText().length() > 0) {
                existingMap.put("SHG_ID", txtSHGId.getText());
                mapDataList = ClientUtil.executeQuery("getSelectSHGCustId", existingMap);
            } else {
                mapDataList = ClientUtil.executeQuery("getSelectExistingCustId", existingMap);
            }
            //System.out.println("#### mapDataList :" + mapDataList);
            if (mapDataList != null && mapDataList.size() > 0) {
                existingMap = (HashMap) mapDataList.get(0);
                if(existingMap.containsKey("ACCT_STATUS")){
                    if(existingMap.get("ACCT_STATUS").equals("CLOSED")){
                        ClientUtil.showAlertWindow("Share Account is closed !!! ");
                        txtExistingAcctNo.setText("");
                        return;
                    }
                }
                existingMap.put("ACT_NUM", txtExistingAcctNo.getText());
                fillData(existingMap);
            } else {
                if (txtSHGId.getText().length() > 0) {
                    ClientUtil.showAlertWindow("Member No Not Found In This Group !!! ");
                    txtExistingAcctNo.setText("");
                    return;
                } else {
                    ClientUtil.showAlertWindow("Invalid Member No / Account No");
                    txtExistingAcctNo.setText("");
                    return;
                }
            }
        } else if (currField.equals("APPLICATION_NOS")) {
            HashMap viewMap = new HashMap();
            viewMap.put(CommonConstants.MAP_NAME, "getLoanApplicationNoAction");
            new ViewAll(this, viewMap).show();
        }else if (currField.equals("RESOLUTIONNO")) {
             HashMap viewMap = new HashMap();
          viewMap.put(CommonConstants.MAP_NAME, "getBoardResolutionAuth"); 
           new ViewAll(this, viewMap).show();
        }else if (currField.equals("DEALER_ID")) {//Added By Revathi.L
            HashMap viewMap = new HashMap();
            HashMap whereMap = new HashMap();
            whereMap.put("BRANCH_ID", TrueTransactMain.BRANCH_ID);
            whereMap.put("TYPE", "D");
            whereMap.put("DEALER", "DEALER");
            viewMap.put(CommonConstants.MAP_NAME, "getDealerDetails");
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
            new ViewAll(this, viewMap).show();
        }
    }
    private void tdtToFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtToFocusLost
        // Add your handling code here:
        tdtToFocusLost();
    }//GEN-LAST:event_tdtToFocusLost
    private void tdtToFocusLost() {
        // The to date should not be later than the sanction to date for the facility
        //        if (!tdtTo.getDateValue().equals(tdtTDate.getDateValue())){
        //            // To check whether this To date is fall within Facility details To date
        //            ClientUtil.validateFromDate(tdtTo, tdtTDate.getDateValue());
        //        }
        //        // To check whether this To date is fall within Facility details From date
        //        ClientUtil.validateToDate(tdtTo, tdtFDate.getDateValue());
        //        // Check for the last interest payment date
        //        if (tblInterMaintenance.getRowCount() > 0){
        //            if (updateInterest && tblInterMaintenance.getSelectedRow() > 0){
        //                ClientUtil.validateToDate(tdtTo, observableInt.checkLastInterestDate(tblInterMaintenance.getSelectedRow()));
        //            }else if (!updateInterest){
        //                ClientUtil.validateToDate(tdtTo, observableInt.checkLastInterestDate(tblInterMaintenance.getRowCount()));
        //            }
        //        }
        // To check whether this To date is greater than this details From date
        ClientUtil.validateToDate(tdtTo, tdtFrom.getDateValue());
        //         if(cboIntGetFrom.getSelectedItem().equals("Account")){
        //             tdtTo.setDateValue("");
        //         }
    }
    private void tdtFromFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtFromFocusLost
        // Add your handling code here:
        tdtFromFocusLost();
    }//GEN-LAST:event_tdtFromFocusLost
    private void tdtFromFocusLost() {
        ClientUtil.validateFromDate(tdtFrom, tdtTo.getDateValue());
    }
    private void cboRepayTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRepayTypeActionPerformed
        // Add your handling code here:
        if (evt.getModifiers() == 16 && CommonUtil.convertObjToStr(cboRepayType.getSelectedItem()).length() > 0) {
            cboRepayTypeActionPerformed();
            calculateRepaymentToDate();
            checkRepaymentType(false);

        }
    }//GEN-LAST:event_cboRepayTypeActionPerformed
    private boolean checkRepaymentType(boolean flag) {
        if (!(observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE || observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT || observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE || observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW_MODE)) //          if(!existRecord){
        {
            if (tblRepaymentCTable.getRowCount() == 0 && (!outStandingAmtRepayment)) {
                String repaySelectedItem = CommonUtil.convertObjToStr(cboRepayFreq.getSelectedItem());
                String repayItem = CommonUtil.convertObjToStr(cboRepayFreq_Repayment.getSelectedItem());
                if (!repayItem.equals(repaySelectedItem)) {
                    if (!flag) {
                        if (repaySelectedItem.equals("Monthly")) {
                            ClientUtil.displayAlert("For Repayment Type, Select EMI or UNIFORM PRINCIPAL EMI  ");
                        } else {
                            ClientUtil.displayAlert("In Loan Sanction Details Screen,  Repay Frequency  is  " + repaySelectedItem + "\n" + "Hence In Repayment Schedule Select Repayment Type as  :" + getSanctionFrequency());
                        }
                    }

                    if (flag) {

                        ClientUtil.displayAlert("In Loan Sanction Details Screen,  Repay Frequency  is  " + repaySelectedItem + "\n" + "Hence In Repayment Schedule Select Repayment Type as  :" + getSanctionFrequency());
                    }
                    ((ComboBoxModel) cboRepayType.getModel()).setKeyForSelected("");
                    return true;
                }
            }
        }
        return false;
    }

    private String getSanctionFrequency() {
        String sanFreq = CommonUtil.convertObjToStr(((ComboBoxModel) cboRepayFreq.getModel()).getKeyForSelected());
        if (sanFreq.equals("365")) {
            return "EYI";
        }
        if (sanFreq.equals("30")) {
            return "EMI";
        }
        if (sanFreq.equals("180")) {
            return "EHI";
        }
        if (sanFreq.equals("90")) {
            return "EQI";
        }
        return "";
    }

    private void cboRepayTypeActionPerformed() {
        //System.out.println("cborepaytypeaction#####" + repayNewMode);
        if ((cboRepayType.getSelectedItem().equals("Lump Sum")) && (observableRepay.checkRepayLumpSumRecCount(tblRepaymentCTable.getRowCount(), repayNewMode))) {
            observableRepay.setCboRepayType("");
            cboRepayType.setSelectedItem(observableRepay.getCboRepayType());
            observableRepay.setCboRepayFreq_Repayment("");
            cboRepayFreq_Repayment.setSelectedItem(observableRepay.getCboRepayFreq_Repayment());
            return;
        } else {
            observableRepay.setCboRepayType(CommonUtil.convertObjToStr(cboRepayType.getSelectedItem()));
        }
        observableRepay.setCboRepayFreq_Repayment(CommonUtil.convertObjToStr(cboRepayFreq_Repayment.getSelectedItem()));
        //System.out.println("repay freq"+observableRepay.getCboRepayType());
        if (observableRepay.getCboRepayType().length() > 0) {
            if (observableRepay.getCboRepayType().equals("Lump Sum")) {
                // When the Repayment Type is Lump Sum the No of Installments
                // must be "1"
                txtNoInstall.setEditable(false);
                txtNoInstall.setText("1");
                // To set the First and Last installment date
                observableRepay.setFirstInstallDate();
                tdtFirstInstall.setEnabled(false);
                //                if (!((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE)))){
                //                    cboRepayFreq_Repayment.setEnabled(true);
                //                }
                tdtFirstInstall.setDateValue(observableRepay.getTdtFirstInstall());
                tdtLastInstall.setDateValue(observableRepay.getTdtLastInstall());
                observableRepay.setCboRepayFreq_Repayment("Lump Sum");
                allowMultiRepay = false;
            } else if (observableRepay.getCboRepayType().equals("User Defined")) {
                // When the Repayment type is User Defined the Repayment Frequency
                // must be User Defined
                observableRepay.setCboRepayFreq_Repayment("User Defined");
               // cboRepayFreq_Repayment.setEnabled(false);
                //                if (!((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE)))){
                //                    txtNoInstall.setEditable(true);
                //                    tdtFirstInstall.setEnabled(true);
                //                }
                if ((tblRepaymentCTable.getRowCount() < 1 && allowMultiRepay) || (dumRowRepay == 0) || (tblRepaymentCTable.getRowCount() == 0)) {
                    allowMultiRepay = true;
                }
                //The following line commented and changed as below line by Rajesh
//            }else if (observableRepay.getCboRepayType().equals("EMI") || observableRepay.getCboRepayType().equals("Uniform Principle EMI")){
            } else if (observableRepay.getCboRepayType().equals("EMI")) {
                // When the Repayment type is EMI the Repayment Frequency
                // must be Monthly
                if(observable.getActionType()==ClientConstants.ACTIONTYPE_EDIT){
                observableRepay.setCboSanRepaymentType((String)((ComboBoxModel)cboRepayType.getModel()).getKeyForSelected());//bb
                }
                observableRepay.setCboRepayFreq_Repayment("Monthly");
                //cboRepayFreq_Repayment.setEnabled(false);
                //                if (!((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE)))){
                //                    txtNoInstall.setEditable(true);
                //                    tdtFirstInstall.setEnabled(true);
                //                }
                if ((tblRepaymentCTable.getRowCount() < 1 && allowMultiRepay) || (dumRowRepay == 0) || (tblRepaymentCTable.getRowCount() == 0)) {
                    allowMultiRepay = true;
                }
            } else if (observableRepay.getCboRepayType().equals("EQI")) {
                // When the Repayment type is EQI the Repayment Frequency
                // must be Quaterly
                 if(observable.getActionType()==ClientConstants.ACTIONTYPE_EDIT){
                observableRepay.setCboSanRepaymentType((String)((ComboBoxModel)cboRepayType.getModel()).getKeyForSelected());//bb
                 }
                observableRepay.setCboRepayFreq_Repayment("Quaterly");
              //  cboRepayFreq_Repayment.setEnabled(false);
                //                if (!((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE)))){
                //                    txtNoInstall.setEditable(true);
                //                    tdtFirstInstall.setEnabled(true);
                //                }
                if ((tblRepaymentCTable.getRowCount() < 1 && allowMultiRepay) || (dumRowRepay == 0) || (tblRepaymentCTable.getRowCount() == 0)) {
                    allowMultiRepay = true;
                }
            } else if (observableRepay.getCboRepayType().equals("EHI")) {
                // When the Repayment type is EHI the Repayment Frequency
                // must be Half Yearly
                 if(observable.getActionType()==ClientConstants.ACTIONTYPE_EDIT){
                observableRepay.setCboSanRepaymentType((String)((ComboBoxModel)cboRepayType.getModel()).getKeyForSelected());//bb
                 }
                observableRepay.setCboRepayFreq_Repayment("Half Yearly");
               // cboRepayFreq_Repayment.setEnabled(false);
                //                if (!((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE)))){
                //                    txtNoInstall.setEditable(true);
                //                    tdtFirstInstall.setEnabled(true);
                //                }
                if ((tblRepaymentCTable.getRowCount() < 1 && allowMultiRepay) || (dumRowRepay == 0) || (tblRepaymentCTable.getRowCount() == 0)) {
                    allowMultiRepay = true;
                }
            } else if (observableRepay.getCboRepayType().equals("EYI")) {
                // When the Repayment type is EYI the Repayment Frequency
                // must be Yearly
                 if(observable.getActionType()==ClientConstants.ACTIONTYPE_EDIT){
                observableRepay.setCboSanRepaymentType((String)((ComboBoxModel)cboRepayType.getModel()).getKeyForSelected());//bb
                 }
                observableRepay.setCboRepayFreq_Repayment("Yearly");
               // cboRepayFreq_Repayment.setEnabled(false);
                //                if (!((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE)))){
                //                    txtNoInstall.setEditable(true);
                //                    tdtFirstInstall.setEnabled(true);
                //                }
                if ((tblRepaymentCTable.getRowCount() < 1 && allowMultiRepay) || (dumRowRepay == 0) || (tblRepaymentCTable.getRowCount() == 0)) {
                    allowMultiRepay = true;
                }
            } else if (observableRepay.getCboRepayType().equals("Uniform Principle EMI")) { //This block added by Rajesh
                // When the Repayment type is EMI the Repayment Frequency
                // must be Monthly
                //System.out.println("repayment freq"+(String) cboRepayFreq.getSelectedItem());
                observableRepay.setCboRepayFreq_Repayment((String) cboRepayFreq.getSelectedItem());
               // cboRepayFreq_Repayment.setEnabled(false);
                //                if (!((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE)))){
                //                    txtNoInstall.setEditable(true);
                //                    tdtFirstInstall.setEnabled(true);
                //                }
                if ((tblRepaymentCTable.getRowCount() < 1 && allowMultiRepay) || (dumRowRepay == 0) || (tblRepaymentCTable.getRowCount() == 0)) {
                    allowMultiRepay = true;
                }
            } else {
                //                if (!((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE)))){
                //                    tdtFirstInstall.setEnabled(true);
                //                    txtNoInstall.setEditable(true);
                //                    cboRepayFreq_Repayment.setEnabled(false);
                //                }
                if ((tblRepaymentCTable.getRowCount() < 1 && allowMultiRepay) || (dumRowRepay == 0) || (tblRepaymentCTable.getRowCount() == 0)) {
                    allowMultiRepay = true;
                }
            }
        }
        cboRepayFreq_Repayment.setSelectedItem(observableRepay.getCboRepayFreq_Repayment());//bala
        calculateRepaymentToDate();//calculateRepayToDate();
       // //System.out.println("repay type in act"+cboSanRepaymentType.getSelectedItem().toString());
    }
    private void chkGurantorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGurantorActionPerformed
        // Add your handling code here:
        if (!chkGurantor.isSelected()) {
            if (observableGuarantor.getTblGuarantorTab().getDataArrayList().size() > 0) {
                ClientUtil.showMessageWindow("Delete record from Guarantor Details");
                chkGurantor.setSelected(true);
                return;
            }
        }
        chkGurantorActionPerformeds();
        chkGuarantorActionPerformed();
    }//GEN-LAST:event_chkGurantorActionPerformed
    private void chkGurantorActionPerformeds() {
        if (chkGurantor.isSelected()) {
            tabLimitAmount.add(panGuarantorDetails, "Guarantor Details");
            ClientUtil.enableDisable(panGuarnOption, true);
            //            chkGuarantorActionPerformed();
        } else {
            tabLimitAmount.remove(panGuarantorDetails);
        }

    }

    private void FullySecuredPartlySecuredActionPerformeds() {
        if (rdoSecurityDetails_Fully.isSelected() || rdoSecurityDetails_Partly.isSelected()) {
            tabLimitAmount.add(panSecurityDetails, "Security Details", 2);
        } else {
            tabLimitAmount.remove(panSecurityDetails);
        }

    }

    private void chkGuarantorActionPerformed() {
        updateOBFields();
        if (chkGurantor.isSelected()) {
            if (!(observable.getStrACNumber().equals(""))) {
                rowGuarantor = -1;
                updateGuarantor = false;
                setGuarantorDetailsNewOnlyEnabled();

            } else {
                rowGuarantor = -1;
                updateGuarantor = false;
                deleteAllGuarantorDetails();
                observableGuarantor.resetGuarantorDetails();
                observableGuarantor.resetInstitGuarantorDetails();
                setAllGuarantorBtnsEnableDisable(false);
                setAllGuarantorDetailsEnableDisable(false);
                setAllInstitGuarantorDetailsEnableDisable(false);
                setGuarantorDetailsNewOnlyEnabled();
            }
        } else {
            rowGuarantor = -1;
            updateGuarantor = false;
            deleteAllGuarantorDetails();
            observableGuarantor.resetGuarantorDetails();
            observableGuarantor.resetInstitGuarantorDetails();
            setAllGuarantorBtnsEnableDisable(false);
            setAllGuarantorDetailsEnableDisable(false);
            setAllInstitGuarantorDetailsEnableDisable(false);
        }
        observable.ttNotifyObservers();
    }

    private void deleteAllGuarantorDetails() {
        // To delete all the Guarantor Records when Guarantor Check Box is not selected
        for (int i = tblGuarantorTable.getRowCount() - 1; i >= 0; --i) {
            observableGuarantor.deleteGuarantorTabRecord(i);
        }
    }

    private void deleteAllInterestDetails() {
        for (int i = tblInterMaintenance.getRowCount() - 1; i >= 0; --i) {
            observableInt.deleteInterestTabRecord(i);
        }
    }
    private void chkInsuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkInsuranceActionPerformed
        // Add your handling code here:
        chkinsuranceActionPerformed();
    }//GEN-LAST:event_chkInsuranceActionPerformed
    private void chkinsuranceActionPerformed() {
        //        updateOBFields();
        //        if (chkInsurance.isSelected()){
        //            if (!(observable.getStrACNumber().equals(""))){
        //                // If the Account Number exist then enable Insurance Tab New Button
        //            }else{
        //
        //            }
        //        }else{
        //
        //        }
        //        observable.ttNotifyObservers();
    }
    private void rdoSecurityDetails_FullyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSecurityDetails_FullyActionPerformed
        // Add your handling code here:
        rdoFullySecuredActionPerformed();
    }//GEN-LAST:event_rdoSecurityDetails_FullyActionPerformed
    private void rdoFullySecuredActionPerformed() {
        if (rdoSecurityDetails_Fully.isSelected()) {
            chkStockInspect.setEnabled(true);
            chkInsurance.setEnabled(true);
            String strFacilityType = getCboTypeOfFacilityKeyForSelected();
            tabLimitAmount.add(panSecurityDetails, "Security Details", 2);
            if (!(strFacilityType.equals(LOANS_AGAINST_DEPOSITS))) {//(observable.getStrACNumber().length() > 0) &&
//                if(!viewType.equals("Edit"))
//                    setSecurityBtnsOnlyNewEnable();
//                if(enableControls==true)
//                    setSecurityBtnsOnlyNewEnable();
            }
            strFacilityType = null;
            btnSecurityCollateral(true);
            enableDisableSalaryBtnsNew(true);
        } else if (rdoSecurityDetails_Unsec.isSelected()) {
            tabLimitAmount.remove(panSecurityDetails);
            btnSecurityCollateral(false);
            enableDisableSalaryBtnsNew(false);
        }
    }
    private void rdoSecurityDetails_PartlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSecurityDetails_PartlyActionPerformed
        // Add your handling code here:
        rdoPartlySecuredActionPerformed();
    }//GEN-LAST:event_rdoSecurityDetails_PartlyActionPerformed
    private void rdoPartlySecuredActionPerformed() {
        if (rdoSecurityDetails_Partly.isSelected()) {
            chkStockInspect.setEnabled(true);
            chkInsurance.setEnabled(true);
            String strFacilityType = getCboTypeOfFacilityKeyForSelected();
            tabLimitAmount.add(panSecurityDetails, "Security Details", 2);
            if (!(strFacilityType.equals(LOANS_AGAINST_DEPOSITS))) {//(observable.getStrACNumber().length() > 0) &&
                // If the account number is there then Enable New Button in Security Tab
//                if(!viewType.equals("Edit"))
//                    setSecurityBtnsOnlyNewEnable();
//                if(enableControls==true)
//                    setSecurityBtnsOnlyNewEnable(); 
            }
            strFacilityType = null;
            btnSecurityCollateral(true);
            enableDisableSalaryDetails(false);
            enableDisableSalaryBtnsNew(true);
        } else if (rdoSecurityDetails_Unsec.isSelected()
                || (!(rdoSecurityDetails_Unsec.isSelected() && rdoSecurityDetails_Fully.isSelected() && rdoSecurityDetails_Fully.isSelected()))) {
            tabLimitAmount.remove(panSecurityDetails);
            btnSecurityCollateral(false);
            enableDisableSalaryDetails(false);
            enableDisableSalaryBtnsNew(false);
        }
    }
    private void rdoSecurityDetails_UnsecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSecurityDetails_UnsecActionPerformed
        // Add your handling code here:
//        if(tblSecurityTable.getRowCount()>0){
//            ClientUtil.showMessageWindow("Delete record from Security Details");
//            if(observable.getRdoSecurityDetails_Partly()){
//                rdoSecurityDetails_Partly.setSelected(true);
//            }
//            else
//                rdoSecurityDetails_Fully.setSelected(true);
//            return;
//        }
        rdoUnsecuredActionPerformed();
    }//GEN-LAST:event_rdoSecurityDetails_UnsecActionPerformed
    private void rdoUnsecuredActionPerformed() {
        // If the Unsecured Button is selected
        // Enable and Disable the corresponding fields and Tabs
        updateOBFields();
        if (rdoSecurityDetails_Unsec.isSelected()) {
            chkStockInspect.setEnabled(false);
            observable.setChkStockInspect(false);
            tabLimitAmount.remove(panSecurityDetails);
            chkStockInspect.setSelected(observable.getChkStockInspect());
            chkInsurance.setEnabled(false);
            observable.setChkInsurance(false);
            chkInsurance.setSelected(observable.getChkInsurance());
//            setAllSecurityDetailsEnableDisable(false);
//            setAllSecurityBtnsEnableDisable(false);
//            observableSecurity.resetSecurityDetails();
            if (!(observable.getStrACNumber().equals(""))) {
                // To delete all the records in Security table
                // if Unsecured RadioButton is selected(When the account number is an existing one)
//                deleteAllSecurityDetails();
                rowSecurity = -1;
                updateSecurity = false;
            }
        }
        observable.ttNotifyObservers();
    }

//    private void deleteAllSecurityDetails(){
//        for (int i = tblSecurityTable.getRowCount() - 1;i >= 0;--i){
//            observableSecurity.deleteSecurityTabRecord(i);
//        }
//    }
    private void btnInterestMaintenanceDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInterestMaintenanceDeleteActionPerformed
        // Add your handling code here:
        btninterestDeletedActionPerformed();
    }//GEN-LAST:event_btnInterestMaintenanceDeleteActionPerformed
    private void btninterestDeletedActionPerformed() {
        updateOBFields();
        ArrayList singleList = (ArrayList) ((EnhancedTableModel) observableInt.getTblInterestTab()).getDataArrayList().get(rowInterest);
        String strIntGetFrom=CommonUtil.convertObjToStr( cboIntGetFrom.getSelectedItem());
        if (singleList != null) {
            String authStatus = CommonUtil.convertObjToStr(singleList.get(7));
            if(strIntGetFrom!=null && !strIntGetFrom.equals("Account")){
                if (authStatus.length() > 0) {
                    ClientUtil.showMessageWindow("Can not Delete Authorize Record");
                    return;
                }
            }
        }
        if (observable.getLast_int_calc_dt() != null) {
            String intDt = CommonUtil.convertObjToStr(((EnhancedTableModel) observableInt.getTblInterestTab()).getDataArrayList().get(rowInterest));
        }
        //System.out.println("rowInterest -----------"+rowInterest);
        observableInt.deleteInterestTabRecord(rowInterest);
        observable.setDelIntFlag("N");
        if(strIntGetFrom!=null && strIntGetFrom.equals("Account")){
            observable.setDelIntFlag("Y");
        }
        //System.out.println("rowInterest ---1212--------"+rowInterest);
        observableInt.slabBasedEnableDisable(true);
        setAllInterestDetailsEnableDisable(false);
        setInterestDetailsOnlyNewEnabled();
        rowInterest = -1;
        updateInterest = false;
        observableInt.resetInterestDetails();
        observable.ttNotifyObservers();
    }
    private void btnInterestMaintenanceSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInterestMaintenanceSaveActionPerformed
        // Add your handling code here:
        StringBuffer mandatoryMessage = new StringBuffer("");
        mandatoryMessage.append(new MandatoryCheck().checkMandatory(getClass().getName(), panTableFields));
        /* mandatoryMessage length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
//        if(CommonUtil.convertObjToDouble(txtPenalInter.getText()).doubleValue() > CommonUtil.convertObjToDouble(txtInter.getText()).doubleValue()){
//            mandatoryMessage.append(resourceBundle.getString("PENAL_ROI_WARNING")+"\n");
//        }
        if (mandatoryMessage.length() > 0) {
            displayAlert(mandatoryMessage.toString());
        } else {
            btninterestSaveActionPerformed();
        }
    }//GEN-LAST:event_btnInterestMaintenanceSaveActionPerformed
    private void btninterestSaveActionPerformed() {
        updateOBFields();
        if (observableInt.addInterestDetails(rowInterest, updateInterest) == 1) {
            // Donot reset the fields when return value is 1(Option is No for replacing the existing record)
        } else {
            // To reset the Fields
            setAllInterestDetailsEnableDisable(false);
            setInterestDetailsOnlyNewEnabled();
            updateInterest = false;
            observableInt.slabBasedEnableDisable(false);
            observableInt.resetInterestDetails();
//            if (!observable.getProductCategory().equals("OTHER_LOAN")) {
//                if (tblRepaymentCTable.getRowCount()==0) {
//                    btnRepayment_NewActionPerformed(null);
//                    btnEMI_CalculateActionPerformed(null);
//                    btnRepayment_SaveActionPerformed(null);
//                }
//            }
        }
        observable.ttNotifyObservers();
    }
    private void btnInterestMaintenanceNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInterestMaintenanceNewActionPerformed
        // Add your handling code here:
        btninterestNewActionPerformed();
    }//GEN-LAST:event_btnInterestMaintenanceNewActionPerformed
    private void btninterestNewActionPerformed() {
        updateOBFields();
        observableInt.resetInterestDetails();
        rowInterest = -1;
        updateInterest = false;

        //        setAllInterestDetailsEnableDisable(true);
        setAllInterestDetailsEnableDisableBased(true);
        observableInt.setTxtPenalInter(observableInt.getPenalInter());
        if (observableInt.getEnableInterExpLimit()) {
            txtInterExpLimit.setEnabled(true);
        } else {
            txtInterExpLimit.setEnabled(false);
            observableInt.setTxtInterExpLimit("");
        }
        if (observableInt.setNextValue()) {
            txtFromAmt.setEnabled(false);
            tdtFrom.setEnabled(true);
        } else {
            txtFromAmt.setEnabled(false);
            tdtFrom.setEnabled(false);
        }
        observable.ttNotifyObservers();
        setInterestDetailsOnlyDeleteDisabled();
        if (((EnhancedTableModel) observableInt.getTblInterestTab()).getRowCount() == 0) {
            tdtFrom.setEnabled(false);
            tdtFrom.setDateValue(tdtSanctionDate.getDateValue());
        }
        observableInt.setIntAuthStatusMap(new HashMap());
        if (loanType.endsWith("LTD")) {
            setInterestDefaultValues();
            txtInter.requestFocus();
        } else {
            txtInter.requestFocus();
        }
    }

    private void setAllInterestDetailsEnableDisableBased(boolean val) {
        tdtFrom.setEnabled(val);
        tdtTo.setEnabled(val);
        txtFromAmt.setEnabled(val);
        txtFromAmt.setEditable(val);
        txtToAmt.setEnabled(val);
        txtToAmt.setEditable(val);
        txtInter.setEnabled(val);
        txtInter.setEditable(val);
        txtPenalInter.setEnabled(val);
        txtPenalInter.setEditable(val);
        txtAgainstClearingInter.setEnabled(val);
        txtAgainstClearingInter.setEditable(val);
        txtPenalStatement.setEnabled(val);
        txtPenalStatement.setEditable(val);
        txtInterExpLimit.setEnabled(val);
        txtInterExpLimit.setEditable(val);
        //        ClientUtil.enableDisable(panTableFields, val);
        tdtTo.setEnabled(false);
    }

    private void setInterestDefaultValues() {
        txtToAmt.setText("999999999");
//        tdtTo.setDateValue(tdtToDate.getDateValue());
    }
    private void tblInterMaintenanceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInterMaintenanceMousePressed
        // Add your handling code here:
        tblinterestDetailsMousePressed();
    }//GEN-LAST:event_tblInterMaintenanceMousePressed
    private void tblinterestDetailsMousePressed() {
        if (tblInterMaintenance.getSelectedRow() >= 0) {
            updateOBFields();
            // If the table is in editable mode
            setAllInterestDetailsEnableDisable(false);
            setAllInterestBtnsEnableDisable(false);
            observableInt.populateInterestDetails(tblInterMaintenance.getSelectedRow());
            if (((observable.getCbmIntGetFrom().getKeyForSelected().equals(PROD))
                    || (observable.getCbmIntGetFrom().getKeyForSelected().equals(""))
                    || (observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3]))
                    || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Enquirystatus"))
                    || loanType.equals("LTD") || observable.getCboAccStatus().equals("Closed"))) {
                // If the interest is from Product level or nothing selected
                // If the record is populated for Delete or Authorization
                setAllInterestDetailsEnableDisable(false);
                setAllInterestBtnsEnableDisable(false);
                observable.ttNotifyObservers();
            } else {
                setAllInterestDetailsEnableDisable(true);
                if (observableInt.getIntAuthStatusMap() != null
                        && observableInt.getIntAuthStatusMap().get("AUTHORIZE_STATUS") != null) {
                    setAllInterestDetailsEnableDisable(false);
                    setInterestDetailsOnlyNewEnabled();
                }
                txtFromAmt.setEnabled(false);
                if (observableInt.getEnableInterExpLimit()) {
                    txtInterExpLimit.setEnabled(true);
                } else {
                    txtInterExpLimit.setEnabled(false);
                    observableInt.setTxtInterExpLimit("");
                }
                //                if (tblInterMaintenance.getSelectedRow() > 0){
                //                    tdtFrom.setEnabled(false);
                //                }
                //                if (!((observable.getCbmIntGetFrom().getKeyForSelected().equals(PROD)) || (observable.getCbmIntGetFrom().getKeyForSelected().equals(""))) && tblInterMaintenance.getSelectedRow() == (tblInterMaintenance.getRowCount()-1)){
                //                    tdtTo.setEnabled(true);
                //                }else{
                //                    tdtTo.setEnabled(false);
                //                }
                String acctGetFrom =CommonUtil.convertObjToStr(cboIntGetFrom.getSelectedItem());
                if(acctGetFrom!=null && !acctGetFrom.equals("Account")){
                	updateInterest = true;
                }
                if (observableInt.getIntAuthStatusMap() != null
                        && observableInt.getIntAuthStatusMap().get("AUTHORIZE_STATUS") != null) {
                    setAllInterestDetailsEnableDisable(false);
                    setInterestDetailsOnlyNewEnabled();
                    updateInterest = false;
                } else if (enableControls) {
                    setAllInterestBtnsEnableDisable(true);
                    setAllInterestDetailsEnableDisable(true);
                    if (observableInt.getEnableInterExpLimit()) {
                        txtInterExpLimit.setEnabled(true);
                    } else {
                        txtInterExpLimit.setEnabled(false);
                        observableInt.setTxtInterExpLimit("");
                    }
                }
                txtFromAmt.setEnabled(false);
                observable.ttNotifyObservers();
            }
            rowInterest = tblInterMaintenance.getSelectedRow();
            String acctGetFrom =CommonUtil.convertObjToStr(cboIntGetFrom.getSelectedItem());
            if(acctGetFrom!=null && acctGetFrom.equals("Account")){
                 btnInterestMaintenanceDelete.setEnabled(true);
            }
        }
    }
    private void tblGuarantorTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGuarantorTableMousePressed
        // Add your handling code here:
        tblguarantorTableMousePressed();
        tabLimitAmount.setSelectedComponent(panGuarantorDetails);
    }//GEN-LAST:event_tblGuarantorTableMousePressed
    // Actions have to be taken when a record from Guarantor Details have been chosen

    private void tblguarantorTableMousePressed() {

        if (tblGuarantorTable.getSelectedRow() >= 0) {
            // If the table is in editable mode
            btnCustomerID_GD.setEnabled(false);
            btnAccNo.setEnabled(false);
            setAllGuarantorDetailsEnableDisable(true);
            setAllInstitGuarantorDetailsEnableDisable(true);
            setAllGuarantorBtnsEnableDisable(true);
            String acct_status = CommonUtil.convertObjToStr(((ComboBoxModel) cboAccStatus.getModel()).getKeyForSelected());
            //            String acct_status=CommonUtil.convertObjToStr((ComboBoxModel)cboAccStatus.getModel().getKSelectedItem());

            if (rdoGuarnInsititutional.isSelected()) {

                panRunTimeGuarantor.setVisible(true);
                panRunTimeGuarantorAddr.setVisible(true);
                panGuaranAddr.setVisible(false);
                sptGuarantorDetail_Vert.setVisible(false);
                panGuarantor.setVisible(false);
                observableGuarantor.populateInstitGuarantorDetails(tblGuarantorTable.getSelectedRow());
            } else {

                panRunTimeGuarantor.setVisible(false);
                panRunTimeGuarantorAddr.setVisible(false);
                panGuaranAddr.setVisible(true);
                sptGuarantorDetail_Vert.setVisible(true);
                panGuarantor.setVisible(true);
                observableGuarantor.populateGuarantorDetails(tblGuarantorTable.getSelectedRow());
            }
            if ((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Enquirystatus") || acct_status.equals("CLOSED"))) {
                // If the record is populated for Delete or Authorization
                setAllGuarantorDetailsEnableDisable(false);
                setAllInstitGuarantorDetailsEnableDisable(false);
                setAllGuarantorBtnsEnableDisable(false);
                ClientUtil.enableDisable(panGuarnOption, false);
                btnAccNo.setEnabled(false);

                if (acct_status.equals("CLOSED")) {
                    btnAccNo.setEnabled(false);
                    txtGuaranAccNo.setEnabled(false);
                    cboProdId.setEnabled(false);
                }
            } else {
                setAllGuarantorDetailsEnableDisable(true);
                setAllInstitGuarantorDetailsEnableDisable(true);
                setAllGuarantorBtnsEnableDisable(true);
                ClientUtil.enableDisable(panGuarnOption, true);
                btnAccNo.setEnabled(true);
                updateGuarantor = true;
            }
            rowGuarantor = tblGuarantorTable.getSelectedRow();
        }
    }
    private void btnGuarantorDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuarantorDeleteActionPerformed
        // Add your handling code here:
        btnguarantorDeleteActionPerformed();
    }//GEN-LAST:event_btnGuarantorDeleteActionPerformed
    private void btnguarantorDeleteActionPerformed() {
        updateOBFields();
        observableGuarantor.deleteGuarantorTabRecord(rowGuarantor);
        setAllGuarantorDetailsEnableDisable(false);
        setAllInstitGuarantorDetailsEnableDisable(false);
        setGuarantorDetailsNewOnlyEnabled();
        rowGuarantor = -1;
        updateGuarantor = false;
        observableGuarantor.resetGuarantorDetails();
        observableGuarantor.resetInstitGuarantorDetails();
        observable.ttNotifyObservers();
    }
    private void btnGuarantorSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuarantorSaveActionPerformed
        // Add your handling code here:
        String mandatoryMessage1 = "", mandatoryMessage2 = "";
        if (!rdoGuarnInsititutional.isSelected()) {
            mandatoryMessage1 = new MandatoryCheck().checkMandatory(getClass().getName(), panGuarantor);
            /* mandatoryMessage1 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/

            mandatoryMessage2 = new MandatoryCheck().checkMandatory(getClass().getName(), panGuaranAddr);
            /* mandatoryMessage2 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
        } else {
            mandatoryMessage1 = new MandatoryCheck().checkMandatory(getClass().getName(), panRunTimeGuarantor);
            /* mandatoryMessage1 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/

            mandatoryMessage2 = new MandatoryCheck().checkMandatory(getClass().getName(), panRunTimeGuarantorAddr);
            /* mandatoryMessage2 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/

        }
        if (mandatoryMessage1.length() > 0 || mandatoryMessage2.length() > 0) {
            displayAlert(mandatoryMessage1 + mandatoryMessage2);
        } else {
            guarantorSaveBtnPressed();
            updateGuarantor = false;
        }
        tabLimitAmount.setSelectedComponent(panGuarantorDetails);

    }//GEN-LAST:event_btnGuarantorSaveActionPerformed
    // Actions have to be taken when Guarantor Details Save button pressed

    private void guarantorSaveBtnPressed() {
        updateOBFields();
        if (rdoGuarnIndividual.isSelected()) {
            if (observableGuarantor.addGuarantorDetails(rowGuarantor, updateGuarantor) == 1) {
                // Donot reset the fields when return value is 1(Option is No for replacing the existing record)
            } else {
                // To reset the Fields
                setAllGuarantorDetailsEnableDisable(false);
                setAllInstitGuarantorDetailsEnableDisable(false);
                setGuarantorDetailsNewOnlyEnabled();
                observableGuarantor.resetGuarantorDetails();
                observableGuarantor.resetInstitGuarantorDetails();
                btnCustomerID_GD.setEnabled(false);
                btnAccNo.setEnabled(false);
            }
        } else {
            if (observableGuarantor.addInstitGuarantorDetails(rowGuarantor, updateGuarantor) == 1) {
                // Donot reset the fields when return value is 1(Option is No for replacing the existing record)
            } else {
                // To reset the Fields
                setAllGuarantorDetailsEnableDisable(false);
                setAllInstitGuarantorDetailsEnableDisable(false);
                setGuarantorDetailsNewOnlyEnabled();
                observableGuarantor.resetGuarantorDetails();
                observableGuarantor.resetInstitGuarantorDetails();
                btnCustomerID_GD.setEnabled(false);
                btnAccNo.setEnabled(false);
            }
        }
        observable.ttNotifyObservers();
    }
    private void btnGuarantorNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuarantorNewActionPerformed
        // Add your handling code here:
        guarantorNewBtnPressed();
    }//GEN-LAST:event_btnGuarantorNewActionPerformed
    private void guarantorNewBtnPressed() {
        updateOBFields();
        if (rdoGuarnIndividual.isSelected() || rdoGuarnInsititutional.isSelected()) {
            observableGuarantor.resetGuarantorDetails();
            observableGuarantor.resetInstitGuarantorDetails();
            btnCustomerID_GD.setEnabled(true);
            btnAccNo.setEnabled(false);
            rowGuarantor = -1;
            updateGuarantor = false;
            setAllGuarantorDetailsEnableDisable(true);
            setAllInstitGuarantorDetailsEnableDisable(true);
            setGuarantorDetailsDeleteOnlyDisabled();
            observable.ttNotifyObservers();
            tabLimitAmount.setSelectedComponent(panGuarantorDetails);
        } else {
            ClientUtil.displayAlert("Choose Individual or Instituational");
            return;
        }
    }
    private void btnExceptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExceptionActionPerformed
        // Add your handling code here:
        authEnableDisable();
        authorizeActionPerformed(CommonConstants.STATUS_EXCEPTION);
    }//GEN-LAST:event_btnExceptionActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // Add your handling code here:
        authEnableDisable();
        authorizeActionPerformed(CommonConstants.STATUS_REJECTED);
    }//GEN-LAST:event_btnRejectActionPerformed

    private void btnAuthorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAuthorizeActionPerformed
        // Add your handling code here:
        authEnableDisable();
        authorizeActionPerformed(CommonConstants.STATUS_AUTHORIZED);
        tabLimitAmount.add(panSecurityDetails, "Security Details", 2);
    }//GEN-LAST:event_btnAuthorizeActionPerformed
    public void authorizeStatus(String auth) {
        authorizeActionPerformed(auth);
    }

    private void authEnableDisable() {
        setAllBorrowerBtnsEnableDisable(false);
        setbtnCustEnableDisable(false);
        setAllTablesEnableDisable(true);
        setAllTableBtnsEnableDisable(false); // To disable the Tool buttons Authorized Signatory
        setAllSanctionFacilityEnableDisable(false);

        setAllSanctionMainEnableDisable(false);
        setAllFacilityDetailsEnableDisable(false);
//        setAllSecurityDetailsEnableDisable(false);
        setAllRepaymentDetailsEnableDisable(false);
        btnEMI_Calculate.setEnabled(false);
        //        setAllInsuranceDetailsEnableDisable(false);
        //        setAllInsuranceBtnsEnableDisable(false);
        setAllRepaymentBtnsEnableDisable(false);
        setAllGuarantorDetailsEnableDisable(false);
        setAllGuarantorBtnsEnableDisable(false);
        setAllDocumentDetailsEnableDisable(false);
        setDocumentToolBtnEnableDisable(false);
        setAllInterestDetailsEnableDisable(false);
        setAllInterestBtnsEnableDisable(false);
        setAllSettlmentEnableDisable(false);
        setAllClassificationDetailsEnableDisable(false);
        txtCustID.setEnabled(false);
        //        txtCustomerID.setEnabled(false);
//        txtSecurityNo.setEditable(false);
    }

    // Actions have to be taken when Authorize button is pressed
    private void authorizeActionPerformed(String authorizeStatus) {
        //        tblSanctionDetails.setEnabled(false);
        if ((viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT)) && isFilled) {

            if (TrueTransactMain.CASHIER_AUTH_ALLOWED != null && TrueTransactMain.CASHIER_AUTH_ALLOWED.equals("Y")) {
                HashMap countMap = new HashMap();
                //System.out.println("observable.getIRNo()asssobservable.getStrACNumber()>>>>>" + observable.getStrACNumber());
                countMap.put("IRID", observable.getStrACNumber());
                List countList = ClientUtil.executeQuery("getCountForReceiptCashierAuthorize", countMap);
                if (countList != null && countList.size() > 0) {
                    //System.out.println("nnnjdj>>>???");
                    countMap = new HashMap();
                    countMap = (HashMap) countList.get(0);
                    //System.out.println("countMap234>>>"+countMap.get("COUNT"));
                    if(CommonUtil.convertObjToInt(countMap.get("COUNT"))!=0) {
                        //System.out.println("nnnjdj4566>>>???");
                    //    ClientUtil.showMessageWindow("Receipt cash transaction authorization for the Account No is pending\nPlease authorize the pending receipt cash transactions for the Account No first");
                    //    return;
                    }
                }
            }

            // If a record is populated for authorize
            final HashMap singleAuthorizeMap = new HashMap();
            java.util.ArrayList arrList = new java.util.ArrayList();
            HashMap authDataMap = new HashMap();

            authDataMap.put("ACCT_NUM", observable.getStrACNumber());


            if (tblDepositDetails != null && tblDepositDetails.getRowCount() > 0) {
                ArrayList lienList = new ArrayList();
                for (int i = 0; i < tblDepositDetails.getRowCount(); i++) {
                    HashMap hmap = new HashMap();
                    String depNo = CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(i, 1));
                    hmap.put("DEPOSIT_NO", depNo);
                    hmap.put("CHITTAL_NO", lblAcctNo_Sanction_Disp.getText());

                    List list = ClientUtil.executeQuery("getLientAmountForMDS", hmap);
                    if (list != null && list.size() > 0) {
                        hmap = (HashMap) list.get(0);
                        double lienAmt = CommonUtil.convertObjToDouble(hmap.get("LIEN_AMOUNT")).doubleValue();
                        hmap.put("STATUS", authorizeStatus);
                        if (authorizeStatus.equals("AUTHORIZED")) {
                            hmap.put("LIENAMOUNT", new Double(lienAmt));
                        } else {
                            hmap.put("LIENAMOUNT", new Double(0.0));
                        }
                        hmap.put("SHADOWLIEN", hmap.get("LIEN_AMOUNT"));
                        hmap.put("DEPOSIT_ACT_NUM", depNo);
                        hmap.put("SUBNO", CommonUtil.convertObjToInt("1"));
                        hmap.put("CHITTAL_NO", lblAcctNo_Sanction_Disp.getText());
                        hmap.put("AUTHORIZED_BY", TrueTransactMain.USER_ID);
                        hmap.put("AUTHORIZED_DT", ClientUtil.getCurrentDateWithTime());
                        hmap.put("USER_ID", TrueTransactMain.USER_ID);

                        lienList.add(hmap);
                    }
                }
                if (lienList != null && lienList.size() > 0) {
                    authDataMap.put("LIEN_DETAILS", lienList);
                }
            }
            arrList.add(authDataMap);
            ///OD TODAUTHORIZE
            HashMap todMap = new HashMap();
            HashMap finalMap = new HashMap();
            HashMap finalMap1 = new HashMap();
            todMap.put("ACCT_NUM", observable.getStrACNumber());
            todMap.put("CURR_DT", (Date) curr_dt.clone());
            List lst = ClientUtil.executeQuery("getSelectExistAccountListUI", todMap);
            if (lst != null && lst.size() > 0) {
                ArrayList todauthList = new ArrayList();
                HashMap todExist = (HashMap) lst.get(0);
                todExist.put("AUTHORIZED_BY", TrueTransactMain.USER_ID);
                todauthList.add(todExist);
                //                finalMap.put(CommonConstants.AUTHORIZEDATA,todauthList);
                finalMap1.put("AUTHORIZESTATUS", "AUTHORIZED");
                finalMap1.put(CommonConstants.AUTHORIZEDATA, todauthList);
                finalMap1.put("TermLoanUI", "TermLoanUI");
                finalMap.put("AUTHORIZEMAP", finalMap1);
                finalMap.put("ACCT_NUM", observable.getStrACNumber());
                //                finalMap1.put(CommonConstants.AUTHORIZEDATA,todauthList);
                finalMap.put("MODE", null);
                finalMap.put(CommonConstants.USER_ID, TrueTransactMain.USER_ID);
                finalMap.put(CommonConstants.BRANCH_ID, TrueTransactMain.BRANCH_ID);





                //System.out.println("finalMap1$$$$$" + finalMap);
                observable.setAdvanceLiablityMap(finalMap);
            }

            /*validate select screen lock
             *
             */
            if (validateScreenLock()) {
                return;
            }

            //
            singleAuthorizeMap.put(CommonConstants.AUTHORIZESTATUS, authorizeStatus);
            singleAuthorizeMap.put(CommonConstants.AUTHORIZEDATA, arrList);







            if (viewType.equals(REJECT)) {
                observable.setPartReject("PARTIALLY_REJECT");
            } else {
                observable.setPartReject("");
            }
            if(TrueTransactMain.SERVICE_TAX_REQ.equalsIgnoreCase("Y")){
                singleAuthorizeMap.put("SERVICE_TAX_AUTH","SERVICE_TAX_AUTH");
            }
            //authorize(singleAuthorizeMap);
            //            ClientUtil.enableDisable(this, false);
            //Added by sreekrishnan
            CommonUtil comm = new CommonUtil();
            final JDialog loading = comm.addProgressBar();
            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() throws InterruptedException /** Execute some operation */
                {
                    try {
                        authorize(singleAuthorizeMap);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    return null;
                }

                @Override
                protected void done() {
                    loading.dispose();
                }
            };
            worker.execute();
            loading.show();
            try {
                worker.get();
            } catch (Exception e1) {
                e1.printStackTrace();
            }
            observable.setAuthorizeMap(null);
        } else {
            // If no record is populated for authorize
            HashMap mapParam = new HashMap();

            HashMap authorizeMapCondition = new HashMap();
            authorizeMapCondition.put("STATUS_BY", TrueTransactMain.USER_ID);
            authorizeMapCondition.put("BRANCH_ID", getSelectedBranchID());
            authorizeMapCondition.put("AUTHORIZE_REMARK", "= 'GOLD_LOAN'");
            authorizeMapCondition.put(CommonConstants.AUTHORIZESTATUS, authorizeStatus);
            authorizeMapCondition.put("CASHIER_AUTH_ALLOWED", TrueTransactMain.CASHIER_AUTH_ALLOWED);
            authorizeMapCondition.put("TRANS_DT", ClientUtil.getCurrentDate());
            mapParam.put(CommonConstants.MAP_WHERE, authorizeMapCondition);
            if (loanType.equals("LTD")) {
                if (TrueTransactMain.CASHIER_AUTH_ALLOWED != null && TrueTransactMain.CASHIER_AUTH_ALLOWED.equals("Y")) {
                    authorizeMapCondition.put("AUTH_TRANS_TYPE", "DEBIT");
                    mapParam.put(CommonConstants.MAP_NAME, "getSelectTermLoanCashierAuthorizeTOListForLTD");
                } else {
                    mapParam.put(CommonConstants.MAP_NAME, "getSelectTermLoanAuthorizeTOListForLTD");
                }
            } else {
                if (TrueTransactMain.CASHIER_AUTH_ALLOWED != null && TrueTransactMain.CASHIER_AUTH_ALLOWED.equals("Y")) {
                    authorizeMapCondition.put("AUTH_TRANS_TYPE", "DEBIT");
                    mapParam.put(CommonConstants.MAP_NAME, "getSelectTermLoanCashierAuthorizeTOList");
                } else {
                    mapParam.put(CommonConstants.MAP_NAME, "getSelectTermLoanAuthorizeTOList");
                }
            }
            if (authorizeStatus.equals(CommonConstants.STATUS_AUTHORIZED)) {
                viewType = AUTHORIZE;
            } else if (authorizeStatus.equals(CommonConstants.STATUS_EXCEPTION)) {
                viewType = EXCEPTION;
            } else if (authorizeStatus.equals(CommonConstants.STATUS_REJECTED)) {
                viewType = REJECT;
            }
            authSignUI.setViewType(viewType);
            poaUI.setViewType(viewType);
            observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
            isFilled = false;
            tabLimitAmount.resetVisits();
            AuthorizeUI authorizeUI = new AuthorizeUI(this, mapParam);
            authorizeUI.show();
            btnSaveDisable();
            setAuthBtnEnableDisable();
            if (viewType.equals(AUTHORIZE) || viewType.equals(REJECT)) {
                if (viewType.equals(AUTHORIZE)) {
                    this.btnReject.setEnabled(false);
                    this.btnException.setEnabled(false);
                }
            }
            if (viewType.equals(REJECT)) {
                this.btnAuthorize.setEnabled(false);
                this.btnException.setEnabled(false);
            }
            authorizeMapCondition = null;
            //__ If there's no data to be Authorized, call Cancel action...
            if (!isModified()) {
                setButtonEnableDisable();
                btnCancelActionPerformed(null);
            }
        }

    }

    private boolean validateScreenLock() {
        HashMap authDataMap = new HashMap();
        authDataMap.put("TRANS_ID", observable.getStrACNumber());
        authDataMap.put("USER_ID", ProxyParameters.USER_ID);
        authDataMap.put("TRANS_DT", ClientUtil.getCurrentDate());
        authDataMap.put("INITIATED_BRANCH", ProxyParameters.BRANCH_ID);

        List lst = ClientUtil.executeQuery("selectauthorizationLock", authDataMap);
        StringBuffer open = new StringBuffer();
        if (lst != null && lst.size() > 0) {
            for (int i = 0; i < lst.size(); i++) {
                HashMap map = (HashMap) lst.get(i);
                open.append("\n" + "User Id  :" + " ");
                open.append(CommonUtil.convertObjToStr(map.get("OPEN_BY")) + "\n");
                open.append("Mode Of Operation  :" + " ");
                open.append(CommonUtil.convertObjToStr(map.get("MODE_OF_OPERATION")) + " ");
            }
            ClientUtil.showMessageWindow("Already opened by" + open);
            return true;
        }
        return false;
    }

    private void deletescreenLock() {
        HashMap map = new HashMap();
        map.put("USER_ID", ProxyParameters.USER_ID);
        map.put("TRANS_DT", ClientUtil.getCurrentDate());
        map.put("INITIATED_BRANCH", ProxyParameters.BRANCH_ID);
        ClientUtil.execute("DELETE_SCREEN_LOCK", map);
    }

    private void btnSaveDisable() {
        btnSave.setEnabled(false);
        mitSave.setEnabled(false);
    }

    public void authorize(HashMap map) {
        String strWarnMsg = null;
        // kerla bank not required to visit all tabs
//        strWarnMsg = tabLimitAmount.isAllTabsVisited();
//        if (strWarnMsg.length() > 0){
//            displayAlert(strWarnMsg);
//            return;
//        }

        //        if(strWarnMsg==null || strWarnMsg.length()==0)
        //            return;
        strWarnMsg = null;
        tabLimitAmount.resetVisits();
        observable.setAuthorizeMap(map);
        observable.doAction(4);
        if (observable.getResult() != ClientConstants.ACTIONTYPE_FAILED) {
            super.setOpenForEditBy(observable.getStatusBy());
            super.removeEditLock(lblBorrowerNo_2.getText());
            isFilled = false;
            if (fromNewAuthorizeUI) {
                newauthorizeListUI.removeSelectedRow();
                this.dispose();
                newauthorizeListUI.setFocusToTable();
                newauthorizeListUI.displayDetails("Loans/Advances Account Opening");
            }
            if (fromAuthorizeUI) {
                authorizeListUI.removeSelectedRow();
                this.dispose();
                authorizeListUI.setFocusToTable();
                authorizeListUI.displayDetails("Loans/Advances Account Opening");
            }
            if (fromManagerAuthorizeUI) {
                ManagerauthorizeListUI.removeSelectedRow();
                this.dispose();
                ManagerauthorizeListUI.setFocusToTable();
            }
            removeEditLock();
            btnCancelActionPerformed(null);
        }
        observable.setResultStatus();
    }

    // Actions have to be taken when a record of Facility Details is selected in Facility Table(Sanction Details)
    private void sanctionFacilityTabPressed() {
        int selRow = -1;
        if (loanType.equals("LTD")) {
            selRow = 0;
        } else if (sanfacTab) {
            selRow = rowfactab;
        }
        //        else{
        //            selRow = tblSanctionDetails.getSelectedRow();
        //            rowfactab=selRow;
        //        }
        sanfacTab = false;
        if (selRow >= 0) {
            // If the the table is in editable mode
            updateSecurity = false;
            updateRepayment = false;
            updateGuarantor = false;
            updateInterest = false;
            updateDocument = false;
            if (loanType.equals("OTHERS") && !viewType.equals(CommonConstants.STATUS_AUTHORIZED)) {
                observableOtherDetails.resetOtherDetailsFields();
                observableRepay.resetAllRepayment();
                observableRepay.resetRepaymentCTable();
                observableGuarantor.resetGuarantorDetails();
                observableGuarantor.resetInstitGuarantorDetails();
                observableGuarantor.resetGuarantorCTable();
                observableDocument.resetAllDocumentDetails();
                observableDocument.resetDocCTable();
                observableInt.resetAllInterestDetails();
                observableClassi.resetClassificationDetails();
                observable.ttNotifyObservers();
            }
            observable.setFacilityAcctHead();
            observable.populateFacilityDetails(rowSanctionMain, selRow);
            //            if ((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || (observable.getCboAccStatus().equals("Closed")))){
            //                // If the record is populated for Delete and Authorize
            setAllFacilityDetailsEnableDisable(false);
            setFacilityBtnsEnableDisable(false);
            //                setAllInsuranceBtnsEnableDisable(false);
            setAllGuarantorBtnsEnableDisable(false);
            setDocumentToolBtnEnableDisable(false);
            additionalSanctionbtnEnableDisable(false);
            //            }else{
            //                // If the record is populated for Edit mode
            //                setAllFacilityDetailsEnableDisable(true);
            //                setFacilityBtnsEnableDisable(true);
            //                additionalSanctionbtnEnableDisable(true);
            //            }
            displayTabsByAccountNumber();
            rowFacilityTabFacility = selRow;
        }
        observable.setFacilityProdID(selRow);
        observable.ttNotifyObservers();
        String strFacilityType = getCboTypeOfFacilityKeyForSelected();
        if (strFacilityType.equals(LOANS_AGAINST_DEPOSITS)) {
            changesInUIForLoanAgainstDeposit();
            if (observable.getStrACNumber().length() > 0) {
                if (loanType.equals("LTD")) {
                    if (facilitySaved && btnNewPressed) {
                        populateInterestRateForLTD();
                        btnNewPressed = false;
                    }
                }
            }
            strFacilityType = null;
            if (loanType.equals("LTD")) {
                rdoInterest_Simple.setEnabled(false);
                rdoInterest_Compound.setEnabled(false);
                //            if (observable.isLienChanged())
                //                tabLimitAmount.setSelectedIndex(5);
                //            else
                //                tabLimitAmount.setSelectedIndex(4);
            }
        }
    }

    private boolean populateInterestRateForLTD() {
        if (tblInterMaintenance.getRowCount() < 1) {
            HashMap whereMap = new HashMap();
            whereMap.put("CATEGORY_ID", observableBorrow.getCbmCategory().getKeyForSelected());
            if (CommonUtil.convertObjToDouble(observable.getTxtLimit_SD()).doubleValue() > 0) {
                whereMap.put("AMOUNT", getBigDecimal(CommonUtil.convertObjToDouble(observable.getTxtLimit_SD()).doubleValue()));
            } else {
                whereMap.put("AMOUNT", getBigDecimal(CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue()));
            }
            whereMap.put("PROD_ID", CommonUtil.convertObjToStr(observable.getCbmProductId().getKeyForSelected()));//observable.getLblProductID_FD_Disp());
            whereMap.put("FROM_DATE", setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue())));
            whereMap.put("TO_DATE", setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue())));
            deleteAllInterestDetails();
            observableInt.resetInterestDetails();
            updateInterestDetails();
            // Populate the values
            ArrayList interestList = (java.util.ArrayList) ClientUtil.executeQuery("getSelectProductTermLoanInterestTO", whereMap);
            observableInt.setIsNew(true);
            if (interestList != null && interestList.size() > 0) {
                //                if (observable.getStrACNumber().length() > 0){
                observableInt.setLoanType(loanType);
                observable.setLoanType(loanType);
                observableInt.setTermLoanInterestTO(interestList, null);
                observable.setCboIntGetFrom("");
                cboIntGetFrom.setSelectedItem("Account");

                //                }
            } else {
                displayAlert("Interest rates not created for this product...");
                cboIntGetFrom.setSelectedItem("");
                return true;
            }
            if (tblRepaymentCTable.getRowCount() < 1) {
                //                observable.ttNotifyObservers();
                btnRepayment_NewActionPerformed();
                btnEMI_CalculateActionPerformed();
                btnRepayment_SaveActionPerformed();
            }
            observableInt.setIsNew(false);
        } else if (tblRepaymentCTable.getRowCount() > 0) {
            HashMap where = new HashMap();
            where.put("ACT_NO", lblAccNo_RS_2.getText());
            int installmentCount = CommonUtil.convertObjToInt(ClientUtil.executeQuery("getCountOfInstallments", where).get(0));
            if (installmentCount <= 0) {
                sanMousePress = true;
                tblRepaymentCTableMousePressed();
                btnEMI_CalculateActionPerformed();
                btnRepayment_SaveActionPerformed();
            }
            where = null;
        }
        return false;
    }

    private boolean checkInterestRateForLTD() {
        HashMap whereMap = new HashMap();
        whereMap.put("CATEGORY_ID", observableBorrow.getCbmCategory().getKeyForSelected());
        if (CommonUtil.convertObjToDouble(observable.getTxtLimit_SD()).doubleValue() > 0) {
            whereMap.put("AMOUNT", getBigDecimal(CommonUtil.convertObjToDouble(observable.getTxtLimit_SD()).doubleValue()));
        } else {
            whereMap.put("AMOUNT", getBigDecimal(CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue()));
        }
        whereMap.put("PROD_ID", CommonUtil.convertObjToStr(observable.getCbmProductId().getKeyForSelected()));//observable.getLblProductID_FD_Disp());
        whereMap.put("FROM_DATE", setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue())));
        whereMap.put("TO_DATE", setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue())));
        //            deleteAllInterestDetails();
        //            observableInt.resetInterestDetails();
        //            updateInterestDetails();
        // Populate the values
        ArrayList interestList = (java.util.ArrayList) ClientUtil.executeQuery("getSelectProductTermLoanInterestTO", whereMap);
        //        observableInt.setIsNew(true);
        if (interestList == null || interestList.size() == 0) {
            displayAlert("Interest rates not created for this product...");
            return true;
        }
        return false;
    }

    // Security Details, Repayment Schedule will be populated on the basis of Account Number
    private void displayTabsByAccountNumber() {
        final HashMap hash = new HashMap();
        updateOBFields();
        if (observable.getStrACNumber().length() > 0) {
            // Retrieve the values on the basis of Account Number
            hash.put("WHERE", observable.getStrACNumber());
            hash.put("KEY_VALUE", "ACCOUNT_NUMBER");

            observable.populateData(hash, authSignUI.getAuthorizedSignatoryOB(), poaUI.getPowerOfAttorneyOB());

        } else {
            btnsDisableBasedOnAccountNumber();
            setDefaultValB4AcctCreation();
            observableClassi.populateClassiDetailsFromProd();
            observableClassi.setClassifiDetails(CommonConstants.TOSTATUS_INSERT);
            observableOtherDetails.setOtherDetailsMode(CommonConstants.TOSTATUS_INSERT);
            updateProdClassiFields();
            ClientUtil.enableDisable(panAccountDetails, false);
        }
        authSignUI.resetDisableNoOfAuthSign(true);
        // This will populate the customer details in account level tabs
        populateCustomerProdLeveFields();
        observable.ttNotifyObservers();
    }

    private void populateCustomerProdLeveFields() {
        // This will populate Group description field
        observable.populateCustomerProdLeveFields();
    }

    private void enableDisableGetIntFrom(boolean val) {
        cboIntGetFrom.setEnabled(val);
    }

    private void setSanctionProductDetailsDisable() {
        cboTypeOfFacility.setEnabled(false);
        cboProductId.setEnabled(false);
    }

    private void setDefaultValB4AcctCreation() {
        observable.setDefaultValB4AcctCreation();
        tdtDemandPromNoteDate.setDateValue(observable.getTdtDemandPromNoteDate());
        calculateDPNExpDate();
        observableClassi.setDefaultValB4AcctCreation();
        observableOtherDetails.populateProdLevelValB4AcctCreation(CommonUtil.convertObjToStr(((ComboBoxModel) cboProductId.getModel()).getKeyForSelected()));
    }

    private void btnsDisableBasedOnAccountNumber() {
        enableDisableGetIntFrom(false);
        tdtAODDate.setEnabled(false);
        setAllRepaymentDetailsEnableDisable(false);
        btnEMI_Calculate.setEnabled(false);
        setAllRepaymentBtnsEnableDisable(false);
        setAllGuarantorDetailsEnableDisable(false);
        setAllInstitGuarantorDetailsEnableDisable(false);
        setAllGuarantorBtnsEnableDisable(false);
        setAllDocumentDetailsEnableDisable(false);
        setDocumentToolBtnEnableDisable(false);
        setAllInterestDetailsEnableDisable(false);
        setAllInterestBtnsEnableDisable(false);
        setAllSettlmentEnableDisable(false);
        setAllClassificationDetailsEnableDisable(false);
        additionalSanctionbtnEnableDisable(false);
        additionalSanctionEnableDisable(false);
    }

    private void resetTabsDependsOnAccountNumber() {
        observableOtherDetails.resetOtherDetailsFields();
        observableRepay.resetAllRepayment();
        observableRepay.resetRepaymentCTable();
        observableGuarantor.resetAllGuarantorDetails();
        observableGuarantor.resetGuarantorCTable();
        observableDocument.resetAllDocumentDetails();
        observableDocument.resetDocCTable();
        observableInt.resetAllInterestDetails();
        observableInt.resetInterestCTable();
        observableClassi.resetClassificationDetails();
    }
    private void cboProductIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProductIdActionPerformed
        // Add your handling code here:
        if (cboProductId.getSelectedIndex() > 0) {
            HashMap checkMap = new HashMap();
            checkMap.put("BRANCH_ID", TrueTransactMain.BRANCH_ID);
            checkMap.put("PROD_ID", (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
            List actList = (List) (ClientUtil.executeQuery("getAccountMaintenanceCount", checkMap));
            if (actList != null && actList.size() > 0) {
                checkMap = (HashMap) actList.get(0);
                int cnt = CommonUtil.convertObjToInt(checkMap.get("CNT"));
                if (cnt == 0) {
                    ClientUtil.displayAlert("Branch Account Number Settings Not Done. Please Check !!!");
                    btnCancelActionPerformed(null);
                }
            }
        }
        
        txtLimit_SD.setText("");//this line added by Anju Anand for Mantid Id: 0010365
        List chargeList = null;
        List repaymentTypeList = null;
        HashMap whereMap = new HashMap();
        whereMap.put("BRANCH_ID", TrueTransactMain.BRANCH_ID);
        whereMap.put("PRODUCT_ID", (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
        chargeList = (List) (ClientUtil.executeQuery("getSelectNextAccNo", whereMap));
        List emiInSimpleinterestList = ClientUtil.executeQuery("getEmiInSimpleinterest", whereMap);
        // -- Added by nithya
        repaymentTypeList = (List)ClientUtil.executeQuery("getLoanRepaymentType",whereMap);
        //System.out.println("TermLoanUI :: cboProductIdActionPerformed() : "+ whereMap.get("PRODUCT_ID"));       
        //System.out.println("TermLoanUI :: cboProductIdActionPerformed() : "+ repaymentTypeList.get(0));        
        populateRepaymentTypeCombo(repaymentTypeList);        
        // --End
        String EMI_IN_SIMPLEINTEREST = "";
        if(emiInSimpleinterestList!=null && emiInSimpleinterestList.size()>0){
            for(int i = 0 ; i < emiInSimpleinterestList.size() ; i++){
                HashMap emiInSimpleinterestMap = (HashMap) emiInSimpleinterestList.get(i);
                if(emiInSimpleinterestMap!=null && emiInSimpleinterestMap.containsKey("EMI_IN_SIMPLEINTEREST")){
                   // System.out.println("inside here");
                    EMI_IN_SIMPLEINTEREST = CommonUtil.convertObjToStr(emiInSimpleinterestMap.get("EMI_IN_SIMPLEINTEREST"));
                }
            }
        }
        if(EMI_IN_SIMPLEINTEREST.equals("Y")){
            panCalcDiminishing.setVisible(true);
            cboSanRepaymentType.setSelectedItem("EMI");
            cboSanRepaymentTypeActionPerformed(null);
            observable.setChkDiminishing(true);
        }else{
            panCalcDiminishing.setVisible(false);
            observable.setChkDiminishing(false);
        }
        if (chargeList != null && chargeList.size() > 0) {
            accountClosingCharge = CommonUtil.convertObjToStr((chargeList.get(0)));
            txtNextAccNo.setText(String.valueOf(accountClosingCharge));
        }
        chargeList = null;
        // commented by nithya
        //babu added 2-06-2014 set rep freq in product level default montly
        //cboRepayFreq.setSelectedItem(((ComboBoxModel) cboRepayFreq.getModel()).getDataForKey("30"));
        // end
        HashMap loanPeriodMultMap = new HashMap();
        //HashMap retrieve;
        loanPeriodMultMap.put("prodId", (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
        List loanPeriodList = ClientUtil.executeQuery("TermLoan.getLoanPeriodMultiples", loanPeriodMultMap);
        if (loanPeriodList.size() > 0){
            loanPeriodMultMap = (HashMap) loanPeriodList.get(0);
            if (loanPeriodMultMap.containsKey("LOAN_PERIODS_MULTIPLES")){
                int loanPeriod=CommonUtil.convertObjToInt(loanPeriodMultMap.get("LOAN_PERIODS_MULTIPLES"));
                if(loanPeriod >0){
                    cboRepayFreq.setSelectedItem(((ComboBoxModel) cboRepayFreq.getModel()).getDataForKey(
                            CommonUtil.convertObjToStr(loanPeriod)));
                }
                else{
                    cboRepayFreq.setSelectedItem(((ComboBoxModel) cboRepayFreq.getModel()).getDataForKey("30"));
                }
              }
        }
        cboProductIDActionPerformed();
        populateRepaymentFreqCombo(repaymentTypeList);
        if (cboCategory.getSelectedIndex() == 0) {
            cboCategory.setSelectedItem(observableBorrow.getCbmCategory().getDataForKey("GENERAL_CATEGORY"));
        }
    }//GEN-LAST:event_cboProductIdActionPerformed
   
    
     // Added by nithya
    private void populateRepaymentTypeCombo(List repaymentTypeList){
         
        //System.out.println("Inside populateRepaymentTypeCombo");
        String repaymentTypeForProduct = null;
        HashMap repaymentTypeListItemMap = null;  
        if(repaymentTypeList != null && repaymentTypeList.size() > 0){      
               // for(int i = 0; i < repaymentTypeList.size(); i++ ){
                    repaymentTypeListItemMap = (HashMap) repaymentTypeList.get(0); 
                    if(repaymentTypeListItemMap != null && repaymentTypeListItemMap.containsKey("REPAYMENT_TYPE")){
                        repaymentTypeForProduct = CommonUtil.convertObjToStr(repaymentTypeListItemMap.get("REPAYMENT_TYPE"));
                        //System.out.println("populateRepaymentTypeCombo :: repaymentTypeForProduct :" + repaymentTypeForProduct);
                    }
                    if(repaymentTypeListItemMap != null && repaymentTypeListItemMap.containsKey("EMI_FLAT_RATE")){
                       emi_flat_rate = CommonUtil.convertObjToStr(repaymentTypeListItemMap.get("EMI_FLAT_RATE"));
                        //System.out.println("EMI_FLAT_RATE:" + emi_flat_rate);
                    }
               // }              
        }       
        //cboRepayFreq.setSelectedItem(((ComboBoxModel) cboRepayFreq.getModel()).getDataForKey("30"));
        int repaymentTypeCount = cboSanRepaymentType.getItemCount();
        //System.out.println("cboSanRepaymentType size :" + cboSanRepaymentType.getItemCount());       
//        for(int i=0; i<repaymentTypeCount; i++){
//            if(cboSanRepaymentType.getItemAt(i).toString().equalsIgnoreCase(repaymentTypeForProduct)){
//                cboSanRepaymentType.setSelectedIndex(i);
//            }           
//        } 
        cboSanRepaymentType.setSelectedItem(((ComboBoxModel) cboSanRepaymentType.getModel()).getDataForKey(repaymentTypeForProduct));
        //cboRepayFreq
        
    }
    
    private void populateRepaymentFreqCombo(List repaymentFreqList){
        
        //System.out.println("Inside populateRepaymentFreqCombo");
        int repaymentFreqForProduct = 0;
        HashMap repaymentFreqListItemMap = null;
        boolean foundFreq = false;
        if(repaymentFreqList != null && repaymentFreqList.size() > 0){
            for(int i=0; i < repaymentFreqList.size(); i++ ){
                repaymentFreqListItemMap = (HashMap)repaymentFreqList.get(i);
                if(repaymentFreqListItemMap != null && repaymentFreqListItemMap.containsKey("REPAYMENT_FREQ")){
                    repaymentFreqForProduct = CommonUtil.convertObjToInt(repaymentFreqListItemMap.get("REPAYMENT_FREQ"));
                }
            }
        }
       
        //System.out.println("Inside populateRepaymentFreqCombo:: repaymentFreqForProduct =" + repaymentFreqForProduct);        
        String repayFreq = getRepaymentFrequency(repaymentFreqForProduct);
        //System.out.println("Inside populateRepaymentFreqCombo:: repayFreq =" + repayFreq);
        

        int repayFreqCount = cboRepayFreq.getItemCount();
        //System.out.println("Inside populateRepaymentFreqCombo:: repayFreqCount = "+ repayFreqCount);
        for(int i=0; i < repayFreqCount ;i++){
            //System.out.println("Inside for:: repayFreqCount = "+ cboRepayFreq.getItemAt(i).toString()+"-"+i);
            if(cboRepayFreq.getItemAt(i).toString().equalsIgnoreCase(repayFreq)){
                //System.out.println("Inside if:: repayFreqCount = "+ cboRepayFreq.getItemAt(i).toString()+"-"+i);
                cboRepayFreq.setSelectedIndex(i);
            } 
        }
    }
    
    
    private String getRepaymentFrequency(int repaymentFreqForProduct){
        
        String repayFreq = null;
        System.out.println("Inside populateRepaymentFreqCombo:: getRepaymentFrequency =" + repaymentFreqForProduct);
        if(repaymentFreqForProduct == 365){
            repayFreq = "Yearly";
        }
        else if(repaymentFreqForProduct == 30){
            repayFreq = "Monthly";
        }
        else if(repaymentFreqForProduct == 90){
            repayFreq = "Quaterly";
        }
        else if(repaymentFreqForProduct == 180){
            repayFreq = "Half Yearly";
        }
        else 
            repayFreq = "";
        
        return repayFreq;
        
    }
    // end
    
    
    
    private void cboProductIDActionPerformed() {
        observable.setCboProductId(CommonUtil.convertObjToStr(cboProductId.getSelectedItem()));
        //        observable.setCbmProductId(((ComboBoxModel)cboProductId).getKeyForSelected().toString());
        observable.getCbmProductId().setKeyForSelected(((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
        if (observable.getCboProductId().length() > 0) {
            observable.setFacilityAcctHead();
            HashMap whereMap = new HashMap();
            whereMap.put("PRODUCT_ID", (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
            List chargeList = (List) (ClientUtil.executeQuery("getLoanProdCategory", whereMap));
            if (chargeList != null && chargeList.size() > 0) {
                whereMap = (HashMap) (chargeList.get(0));
                if (CommonUtil.convertObjToStr(whereMap.get("AUTHORIZE_REMARK")).length() > 0 /*&& CommonUtil.convertObjToStr(whereMap.get("AUTHORIZE_REMARK")).equals("DAILY_LOAN")*/) {
                    dailyLoanVisibleComp(true);
                    setEnableDisableDirectPayment(false);
                    panRepaySanctionDetails.setEnabled(true);
                    panDirectRepayment.setVisible(true);
                    //                 panRepaySanctionDetails.setVisible(false);
                    //                 panDirectRepayment.setVisible(true);
                } else {
                    dailyLoanVisibleComp(false);
                }

            }
            rdoNatureInterest_PLR.setSelected(observable.getRdoNatureInterest_PLR());
            rdoNatureInterest_NonPLR.setSelected(observable.getRdoNatureInterest_NonPLR());
            if (loanType.equals("LTD")) {
                setDefaultValuesForSpecificLoans();
            }
            if (observable.getStrACNumber().equals("")) {
                if (tblBorrowerTabCTable.getRowCount() > 0) {
                    observable.setFacilityContactDetails(CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(0, 1)));
                    txtContactPerson.setText(observable.getTxtContactPerson());
                    txtContactPhone.setText(observable.getTxtContactPhone());
                }
                observableClassi.populateClassiDetailsFromProd();
                updateProdClassiFields();
                observableOtherDetails.populateProdLevelValB4AcctCreation(CommonUtil.convertObjToStr(((ComboBoxModel) cboProductId.getModel()).getKeyForSelected()));
                updateOtherDetailsTab();
                //FOR CHECK SHARE HOLDER OR NOT
                checkShareHolder();
            } else {
                observableInt.setValByProdID();
            }
        } else {
            observable.setLblAccHead_2("");
            updateRdoSubsidyAndInterestNature();
        }
        lblAccHead_2.setText(observable.getLblAccHead_2());
        updateAccHead_ProdID();
    }

    private void setDefaultValuesForSpecificLoans() {
        if (observable.getProductCategory().equals("PADDY_LOAN")) {
//            lblDepositsNo.setText("C & D No");
//            panTable_SD.removeAll();
            initPaddyComponents();
        } else if (observable.getProductCategory().equals("MDS_LOAN")) {
//            lblDepositsNo.setText("Chittal No");
//            panTable_SD.removeAll();
            initMDSComponents();
        } else if (observable.getProductCategory().equals("OTHER_LOAN")) {
//            panTable_SD.removeAll();
//            lblDepositsNo.setText("Deposit No");
//            panTable_SD.setVisible(false);
        }
        if (!observable.getProductCategory().equals("OTHER_LOAN")) {
            tabLimitAmount.remove(panAdditionalSanctionDetails);
            tabLimitAmount.remove(panSecurityDetails);
            rdoMultiDisburseAllow_No.setSelected(true);
            rdoSecurityDetails_Unsec.setSelected(true);
        } else {
            tabLimitAmount.addTab("Additional Sanction Details", panAdditionalSanctionDetails);
            tabLimitAmount.add(panSecurityDetails, "Security Details", 2);
            rdoMultiDisburseAllow_Yes.setSelected(true);
        }
        rdoInterest_Simple.setSelected(true);
        rdoAccLimit_Main.setSelected(true);
        rdoRiskWeight_No.setSelected(true);
        cboInterestType.setSelectedIndex(1);
    }

    private void checkShareHolder() {
        String selectKey = CommonUtil.convertObjToStr(((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
        HashMap shareMap = new HashMap();
        //shareMap.put("PROD_ID", selectKey);
        shareMap.put("PROD_ID", observable.getProductCategory());// Added by nithya on 14-02-2019 for KD 403 0019830: SHARE NOT ELIGIABLE FOR LOAN SANCTION 
        String sharetype = "NOMINAL";        
        List shareList = ClientUtil.executeQuery("getSelectShareProductLoanAcct", shareMap);
        if (shareList != null && shareList.size() > 0) {
            //            if(CommonUtil.convertObjToStr(((ComboBoxModel)cboConstitution.getModel()).getKeyForSelected()).equals("JOINT_ACCOUNT") && tblBorrowerTabCTable.getRowCount()>0)

            shareMap.put("CUST_ID", txtCustID.getText());
            shareMap.put("SHARE_ACCT_NO",txtExistingAcctNo.getText());
            //List share = ClientUtil.executeQuery("getShareAccInfoDataForLoan", shareMap);
            List share = ClientUtil.executeQuery("getShareAccInfoEligibilityDetailsForLoan", shareMap);// Added by nithya on 14-02-2019 for KD 403 0019830: SHARE NOT ELIGIABLE FOR LOAN SANCTION 
            if (share != null && share.size() > 0) {
                shareMap = (HashMap) share.get(0);
                String notElegibleLoan = CommonUtil.convertObjToStr(shareMap.get("NOT_ELIGIBLE_LOAN"));
                 // Commented by nithya on 06-08-2019 for KD 579
//                if (notElegibleLoan != null && notElegibleLoan.equals("Y") && shareMap.get("NOT_ELIGIBLE_DT") != null) {
//                    Date eligibal_dt = DateUtil.getDateMMDDYYYY(CommonUtil.convertObjToStr(shareMap.get("NOT_ELIGIBLE_DT")));
//                    if (DateUtil.dateDiff(eligibal_dt, (Date) curr_dt.clone()) < 0) {
//                        //ClientUtil.showMessageWindow(" Eligible Date is Not Expiry");
//                        ClientUtil.showMessageWindow(" Customer is not eligible for loan till  " + DateUtil.getStringDate(eligibal_dt));// Added by nithya on 14-02-2019 for KD 403 0019830: SHARE NOT ELIGIABLE FOR LOAN SANCTION 
//                    }
//                    return;
//
//
//                }
                if (notElegibleLoan != null && notElegibleLoan.equals("Y")){ // Added by nithya on 06-08-2019 for KD 579
                    ClientUtil.showMessageWindow(" Customer is not eligible for loan");
                    btnCancelActionPerformed(null);
                    return;
                }
                else if (shareMap.get("SHARE_TYPE") != null && sharetype.equals(CommonUtil.convertObjToStr(shareMap.get("SHARE_TYPE")))) {
                    ClientUtil.showMessageWindow("Share Type is NOMINAL");
                    return;
                }
                //            ClientUtil.showMessageWindow("This account Holder Not Having Share");
            }
        }
    }

    private void updateProdClassiFields() {
        removeFacilitySecurityRadioBtns();
        rdoSecurityDetails_Fully.setSelected(observable.getRdoSecurityDetails_Fully());
        rdoSecurityDetails_Partly.setSelected(observable.getRdoSecurityDetails_Partly());
        rdoSecurityDetails_Unsec.setSelected(observable.getRdoSecurityDetails_Unsec());
        addFacilitySecurityRadioBtns();

        cboCommodityCode.setSelectedItem(observableClassi.getCboCommodityCode());
        cboGuaranteeCoverCode.setSelectedItem(observableClassi.getCboGuaranteeCoverCode());
        cboSectorCode1.setSelectedItem(observableClassi.getCboSectorCode1());
        cboHealthCode.setSelectedItem(observableClassi.getCboHealthCode());
        cboTypeFacility.setSelectedItem(observableClassi.getCboTypeFacility());
        cboPurposeCode.setSelectedItem(observableClassi.getCboPurposeCode());
        cboIndusCode.setSelectedItem(observableClassi.getCboIndusCode());
        cboWeakerSectionCode.setSelectedItem(observableClassi.getCboWeakerSectionCode());
        cbo20Code.setSelectedItem(observableClassi.getCbo20Code());
        cboRefinancingInsti.setSelectedItem(observableClassi.getCboRefinancingInsti());
        cboGovtSchemeCode.setSelectedItem(observableClassi.getCboGovtSchemeCode());
        //        cboAssetCode.setSelectedItem(observableClassi.getCboAssetCode());
        chkDirectFinance.setSelected(observableClassi.getChkDirectFinance());
        chkECGC.setSelected(observableClassi.getChkECGC());
        chkPrioritySector.setSelected(observableClassi.getChkPrioritySector());
        chkQIS.setSelected(observableClassi.getChkQIS());
    }

    private void updateAccHead_ProdID() {
        lblProdID_Disp_DocumentDetails.setText(observableDocument.getLblProdID_Disp_DocumentDetails());
        lblProdID_Disp_ODetails.setText(observableOtherDetails.getLblProdID_Disp_ODetails());
        lblProductID_FD_Disp.setText(observable.getLblProductID_FD_Disp());
        lblAcctHead_Disp_DocumentDetails.setText(observableDocument.getLblAcctHead_Disp_DocumentDetails());
        lblAcctHead_Disp_ODetails.setText(observableOtherDetails.getLblAcctHead_Disp_ODetails());
        lblAccountHead_FD_Disp.setText(observable.getLblAccountHead_FD_Disp());
//        lblAccHeadSec_2.setText(observableSecurity.getLblAccHeadSec_2());
        lblAccHead_RS_2.setText(observableRepay.getLblAccHead_RS_2());
        lblAccHead_GD_2.setText(observableGuarantor.getLblAccHead_GD_2());
        lblAccHead_IM_2.setText(observableInt.getLblAccHead_IM_2());
        lblAccHead_CD_2.setText(observableClassi.getLblAccHead_CD_2());
//        lblProdId_Disp.setText(observableSecurity.getLblProdId_Disp());
        lblProdID_RS_Disp.setText(observableRepay.getLblProdID_RS_Disp());
        lblProdID_GD_Disp.setText(observableGuarantor.getLblProdID_GD_Disp());
        lblProdID_IM_Disp.setText(observableInt.getLblProdID_IM_Disp());
        lblProID_CD_Disp.setText(observableClassi.getLblProdID_CD_Disp());
    }

    private void updateOtherDetailsTab() {
        chkChequeBookAD.setSelected(observableOtherDetails.getChkChequeBookAD());
        chkCustGrpLimitValidationAD.setSelected(observableOtherDetails.getChkCustGrpLimitValidationAD());
        chkMobileBankingAD.setSelected(observableOtherDetails.getChkMobileBankingAD());
        chkNROStatusAD.setSelected(observableOtherDetails.getChkNROStatusAD());
        chkATMAD.setSelected(observableOtherDetails.getChkATMAD());
        txtATMNoAD.setText(observableOtherDetails.getTxtATMNoAD());
        tdtATMFromDateAD.setDateValue(observableOtherDetails.getTdtATMFromDateAD());
        tdtATMToDateAD.setDateValue(observableOtherDetails.getTdtATMToDateAD());
        chkDebitAD.setSelected(observableOtherDetails.getChkDebitAD());
        txtDebitNoAD.setText(observableOtherDetails.getTxtDebitNoAD());
        tdtDebitFromDateAD.setDateValue(observableOtherDetails.getTdtDebitFromDateAD());
        tdtDebitToDateAD.setDateValue(observableOtherDetails.getTdtDebitToDateAD());
        chkCreditAD.setSelected(observableOtherDetails.getChkCreditAD());
        txtCreditNoAD.setText(observableOtherDetails.getTxtCreditNoAD());
        tdtCreditFromDateAD.setDateValue(observableOtherDetails.getTdtCreditFromDateAD());
        tdtCreditToDateAD.setDateValue(observableOtherDetails.getTdtCreditToDateAD());
        cboSettlementModeAI.setSelectedItem(observableOtherDetails.getCboSettlementModeAI());
        cboOpModeAI.setSelectedItem(observableOtherDetails.getCboOpModeAI());
        txtAccOpeningChrgAD.setText(observableOtherDetails.getTxtAccOpeningChrgAD());
        txtMisServiceChrgAD.setText(observableOtherDetails.getTxtMisServiceChrgAD());
        chkStopPmtChrgAD.setSelected(observableOtherDetails.getChkStopPmtChrgAD());
        txtChequeBookChrgAD.setText(observableOtherDetails.getTxtChequeBookChrgAD());
        chkChequeRetChrgAD.setSelected(observableOtherDetails.getChkChequeRetChrgAD());
        txtFolioChrgAD.setText(observableOtherDetails.getTxtFolioChrgAD());
        chkInopChrgAD.setSelected(observableOtherDetails.getChkInopChrgAD());
        txtAccCloseChrgAD.setText(observableOtherDetails.getTxtAccCloseChrgAD());
        chkStmtChrgAD.setSelected(observableOtherDetails.getChkStmtChrgAD());
        cboStmtFreqAD.setSelectedItem(observableOtherDetails.getCboStmtFreqAD());
        chkNonMainMinBalChrgAD.setSelected(observableOtherDetails.getChkNonMainMinBalChrgAD());
        txtExcessWithChrgAD.setText(observableOtherDetails.getTxtExcessWithChrgAD());
        chkABBChrgAD.setSelected(observableOtherDetails.getChkABBChrgAD());
        chkNPAChrgAD.setSelected(observableOtherDetails.getChkNPAChrgAD());
        txtABBChrgAD.setText(observableOtherDetails.getTxtABBChrgAD());
        tdtNPAChrgAD.setDateValue(observableOtherDetails.getTdtNPAChrgAD());
        txtMinActBalanceAD.setText(observableOtherDetails.getTxtMinActBalanceAD());
        tdtDebit.setDateValue(observableOtherDetails.getTdtDebit());
        tdtCredit.setDateValue(observableOtherDetails.getTdtCredit());
        chkPayIntOnCrBalIN.setSelected(observableOtherDetails.getChkPayIntOnCrBalIN());
        chkPayIntOnDrBalIN.setSelected(observableOtherDetails.getChkPayIntOnDrBalIN());
        lblRateCodeValueIN.setText(observableOtherDetails.getLblRateCodeValueIN());
        lblCrInterestRateValueIN.setText(observableOtherDetails.getLblCrInterestRateValueIN());
        lblDrInterestRateValueIN.setText(observableOtherDetails.getLblDrInterestRateValueIN());
        lblPenalInterestValueIN.setText(observableOtherDetails.getLblPenalInterestValueIN());
        lblAgClearingValueIN.setText(observableOtherDetails.getLblAgClearingValueIN());
    }

    private void btnFacilityDeletePressed() {
        if (allCTablesNotNull()) {
            observable.deleteFacilityRecord(rowFacilityTabSanction, rowFacilityTabFacility);
            deleteAllGuarantorDetails();
            deleteAllInterestDetails();
            observable.resetAllFacilityDetails();
            updateCboTypeOfFacility();
            observable.ttNotifyObservers();
            updateOBFields();
            observableClassi.setClassifiDetails(CommonConstants.TOSTATUS_DELETE);
            observableOtherDetails.setOtherDetailsMode(CommonConstants.TOSTATUS_DELETE);
            observable.setActionType(ClientConstants.ACTIONTYPE_EDIT);
            observable.doAction(3);
            authSignUI.setLblStatus(observable.getLblStatus());
            poaUI.setLblStatus(observable.getLblStatus());
            resetTabsDependsOnAccountNumber();
            observable.setResultStatus();
//            rowFacilityTabSanction = tblSanctionDetails2.getSelectedRow();
            setAllFacilityDetailsEnableDisable(false);
            setFacilityBtnsEnableDisable(false);
            btnsDisableBasedOnAccountNumber();
            updateRdoSubsidyAndInterestNature();
        }
    }

    private boolean btnFacilitySavePressed() {
        //changeplace to 12###@
        facilitySaved = false;
        facilityFlag = false;
        sanction = true;
        sandetail = true;
        santab = true;
        sanfacTab = true;
        boolean isWarnMsgExist = false;
        if (rowSanctionMain == -1) {
            displayAlert(resourceBundle.getString("existenceSancDetailsTableWarning"));
            isWarnMsgExist = true;
            return isWarnMsgExist;
        }
        final String mandatoryMessage1 = new MandatoryCheck().checkMandatory(getClass().getName(), panBorrowProfile_CustName);
        /* mandatoryMessage1 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/

        final String mandatoryMessage2 = new MandatoryCheck().checkMandatory(getClass().getName(), panFDAccount);
        /* mandatoryMessage2 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/

        final String mandatoryMessage3 = new MandatoryCheck().checkMandatory(getClass().getName(), panFDDate);
        /* mandatoryMessage3 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/


        String mandatoryMessage4 = "";
        String mandatoryMessage5 = "";
        String mandatoryMessage6 = isJointAcctHavingAtleastOneCust();
        if (productBasedValidation()) {
            mandatoryMessage5 = new TermLoanMRB().getString("rdoMultiDisburseAllow_Yes");
        }

        String mandatoryMessage7 = "";
        String mandatoryMessage8 = "";
        if (observable.getStrACNumber().length() > 0) {
            mandatoryMessage4 = new MandatoryCheck().checkMandatory(getClass().getName(), panProd_IM);
            mandatoryMessage7 = isInterestDetailsExistForThisAcct();
            mandatoryMessage8 = validateOtherDetailsMandatoryFields();
        }

        if (mandatoryMessage1.length() > 0 || mandatoryMessage2.length() > 0 || mandatoryMessage3.length() > 0 || mandatoryMessage4.length() > 0 || mandatoryMessage5.length() > 0 || mandatoryMessage6.length() > 0 || mandatoryMessage7.length() > 0 || mandatoryMessage8.length() > 0) {
            displayAlert(mandatoryMessage1 + mandatoryMessage2 + mandatoryMessage3 + mandatoryMessage4 + mandatoryMessage5 + mandatoryMessage6 + mandatoryMessage7 + mandatoryMessage8);
            isWarnMsgExist = true;
        } else {

            //change from line 12#### top check

            if (isTablesInEditMode(false) && allCTablesNotNull() && checkForSecurityValue() && repayTableNotNull() && repayTableLimitCheckingRule()
                    && observable.checkMaxAmountRange(tdtTDate.getDateValue())) {
                updateOBFields();
                if (loanType.equals("LTD"))//|| loanType.equals("OTHERS"))
                {
                    rowFacilityTabSanction = 0; //BY ABI FOR ONE MORE LOAN SANCTION NOT UPDATE
                } else {
                    rowFacilityTabSanction = rowsan;
                }
                observable.addFacilityDetails(rowFacilityTabSanction, rowFacilityTabFacility);
                updateOBFields();

                //                if(observable.getStrACNumber().length()>0)
                //                    agriSubSidyUI.updateOBFields();

                observable.doAction(2);
                //                if (observable.getResult()!=ClientConstants.ACTIONTYPE_FAILED && loanType.equals("LTD"))
                //                    btnFacilitySave.setEnabled(true);
                //                else
                //                    btnFacilitySave.setEnabled(false);

                facilitySaved = true;
                authSignUI.setLblStatus(observable.getLblStatus());
                poaUI.setLblStatus(observable.getLblStatus());
                observable.resetSanctionFacility();
                resetTabsDependsOnAccountNumber();
                observable.resetAllFacilityDetails();
                updateCboTypeOfFacility();
                observable.setBorrowerNumber();
                observable.setResultStatus();
                setAllSanctionFacilityEnableDisable(false);
                setSanctionFacilityBtnsEnableDisable(false);
//                btnNew1.setEnabled(true);
                setAllFacilityDetailsEnableDisable(false);
                setFacilityBtnsEnableDisable(false);
                btnsDisableBasedOnAccountNumber();
//                rowFacilityTabSanction = tblSanctionDetails2.getSelectedRow();
                observable.ttNotifyObservers();
                updateRdoSubsidyAndInterestNature();
                observable.setStrACNumber(observable.getLoanACNo());
                lblAcctNo_Sanction_Disp.setText(observable.getLoanACNo());
                //                if(loanType.equals("OTHERS") ){    //ltd and testing for same abi
//                btnSave2_SDActionPerformed(null);
//                tblSanctionDetails2MousePressed(null);
                tblSanctionDetailsMousePressed();
                //System.out.println("####%%%% observable.getCbmProductId().getSelectedItem() " + observable.getCbmProductId().getSelectedItem());
                //System.out.println("####%%%% cboProductId.getSelectedItem() " + cboProductId.getSelectedItem());
                //                    cboProductId.setSelectedItem(observable.getCbmProductId().getSelectedItem());
                //                    cboProductIdActionPerformed(null);
                //                }
                if (observable.isLienChanged()) {
//                    tblSanctionDetails2MousePressed(null);
                }
            } else {
                isWarnMsgExist = true;
            }
        }
        facilityFlag = true;
        if (observable.getStrACNumber() != null && observable.getStrACNumber().length() > 0) {
            txtSanctionNo.setEnabled(false);
        }
        return isWarnMsgExist;
    }

    private boolean repayTableLimitCheckingRule() {
        //        tblRepaymentCTable.getSelectionModel().
        HashMap singleMap = null;
        double totalRepaymentLimit = 0;
        double totalAdditionalLimit = 0;
        String behaves = getCboTypeOfFacilityKeyForSelected();
        ////System.out.print("repaytable###" + behaves);
        if (loanType.equals("LTD") && observable.getStrACNumber().length() > 0) //            if(behaves !=null && (!(behaves.equals("OD") || behaves.equals("CC")))){
        {
            if (behaves != null && (!(behaves.equals("CC")))) {
                LinkedHashMap repaymentMap = observableRepay.getTableUtilRepayment().getAllValues();
                LinkedHashMap additionalSanctionMap = observableAdditionalSanctionOB.getAdditionalSanUtil().getAllValues();
                ArrayList repaymentList = observableRepay.getTableUtilRepayment().getTableValues();
                ArrayList additionalSanctionList = observableAdditionalSanctionOB.getAdditionalSanUtil().getTableValues();
                //System.out.println(additionalSanctionMap + "repaymentMap  ####" + repaymentMap);
                //System.out.println("\n" + additionalSanctionList + "repaymentList  ####" + repaymentList);
                java.util.Set set = repaymentMap.keySet();
                Object objKeySet[] = (Object[]) set.toArray();
                if (repaymentMap != null && repaymentMap.size() > 0) {
                    for (int i = 0; i < repaymentMap.size(); i++) {
                        singleMap = (HashMap) repaymentMap.get(objKeySet[i]);
                        totalRepaymentLimit += CommonUtil.convertObjToDouble(singleMap.get("TOT_BASE_AMT")).doubleValue();
                    }
                    //System.out.println("totalRepaymentLimit   " + totalRepaymentLimit);

                }
                set = additionalSanctionMap.keySet();
                Object objKeySets[] = (Object[]) set.toArray();

                if (additionalSanctionMap != null && additionalSanctionMap.size() > 0) {
                    for (int i = 0; i < additionalSanctionMap.size(); i++) {
                        singleMap = (HashMap) additionalSanctionMap.get(objKeySets[i]);
                        totalAdditionalLimit += CommonUtil.convertObjToDouble(singleMap.get("ADDITIONAL LIMIT")).doubleValue();
                    }
                    //System.out.println("totalRepaymentLimit1   " + totalRepaymentLimit);

                }
                double mainLimit = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
                if (totalRepaymentLimit != mainLimit + totalAdditionalLimit) {
                    ClientUtil.showMessageWindow("Repay Schedule should match With Limit Amount");
                    return false;
                }
            }
        }
        return true;
    }

    private String validateOtherDetailsMandatoryFields() {
        StringBuffer stbWarnMsg = new StringBuffer("");
        String strSelectedProdType = getCboTypeOfFacilityKeyForSelected();

        if ((strSelectedProdType.equals("OD") || strSelectedProdType.equals("CC"))) {
            TermLoanMRB objMandatoryRB = new TermLoanMRB();
            if (CommonUtil.convertObjToStr(cboOpModeAI.getSelectedItem()).length() <= 0) {
                stbWarnMsg.append("\n");
                stbWarnMsg.append(objMandatoryRB.getString("cboOpModeAI"));
            }
            if (chkATMAD.isSelected()) {
                if (txtATMNoAD.getText().length() <= 0) {
                    stbWarnMsg.append("\n");
                    stbWarnMsg.append(objMandatoryRB.getString("txtATMNoAD"));
                }
                if (tdtATMFromDateAD.getDateValue().length() <= 0) {
                    stbWarnMsg.append("\n");
                    stbWarnMsg.append(objMandatoryRB.getString("tdtATMFromDateAD"));
                }
                if (tdtATMToDateAD.getDateValue().length() <= 0) {
                    stbWarnMsg.append("\n");
                    stbWarnMsg.append(objMandatoryRB.getString("tdtATMToDateAD"));
                }
            }
            if (chkDebitAD.isSelected()) {
                if (txtDebitNoAD.getText().length() <= 0) {
                    stbWarnMsg.append("\n");
                    stbWarnMsg.append(objMandatoryRB.getString("txtDebitNoAD"));
                }
                if (tdtDebitFromDateAD.getDateValue().length() <= 0) {
                    stbWarnMsg.append("\n");
                    stbWarnMsg.append(objMandatoryRB.getString("tdtDebitFromDateAD"));
                }
                if (tdtDebitToDateAD.getDateValue().length() <= 0) {
                    stbWarnMsg.append("\n");
                    stbWarnMsg.append(objMandatoryRB.getString("tdtDebitToDateAD"));
                }
            }
            if (chkCreditAD.isSelected()) {
                if (txtCreditNoAD.getText().length() <= 0) {
                    stbWarnMsg.append("\n");
                    stbWarnMsg.append(objMandatoryRB.getString("txtCreditNoAD"));
                }
                if (tdtCreditFromDateAD.getDateValue().length() <= 0) {
                    stbWarnMsg.append("\n");
                    stbWarnMsg.append(objMandatoryRB.getString("tdtCreditFromDateAD"));
                }
                if (tdtCreditToDateAD.getDateValue().length() <= 0) {
                    stbWarnMsg.append("\n");
                    stbWarnMsg.append(objMandatoryRB.getString("tdtCreditToDateAD"));
                }
            }
            if (chkABBChrgAD.isSelected() && (txtABBChrgAD.getText().length() <= 0 || CommonUtil.convertObjToInt(txtABBChrgAD.getText()) == 0)) {
                stbWarnMsg.append("\n");
                stbWarnMsg.append(objMandatoryRB.getString("txtABBChrgAD"));
            }
            if (chkNonMainMinBalChrgAD.isSelected() && (txtMinActBalanceAD.getText().length() <= 0 || CommonUtil.convertObjToInt(txtMinActBalanceAD.getText()) == 0)) {
                stbWarnMsg.append("\n");
                stbWarnMsg.append(objMandatoryRB.getString("txtMinActBalanceAD"));
            }
            objMandatoryRB = null;
        }

        return stbWarnMsg.toString();
    }

    private String isInterestDetailsExistForThisAcct() {
        StringBuffer stbWarnMsg = new StringBuffer("");
        String strSelectedProdType = getCboTypeOfFacilityKeyForSelected();
        if (!(strSelectedProdType.equals("OD") || strSelectedProdType.equals("CC")) && tblInterMaintenance.getRowCount() < 1) {
            stbWarnMsg.append("\n");
           // System.out.println("Inter 5555");
            stbWarnMsg.append(resourceBundle.getString("interestDetailsWarning"));
        }
        return stbWarnMsg.toString();
    }

    private void updateRdoSubsidyAndInterestNature() {
        updateRdoSubsidy();
        updateRdoInterestNature();
    }

    private void updateRdoSubsidy() {
        observable.resetFacilityTabSubsidy();
        removeFacilitySubsidy();
        rdoSubsidy_Yes.setSelected(observable.getRdoSubsidy_Yes());
        rdoSubsidy_No.setSelected(observable.getRdoSubsidy_No());
        addFacilitySubsidyRadioBtns();
    }

    private void updateRdoInterestNature() {
        observable.resetFacilityTabInterestNature();
        removeFacilityInterestNature();
        rdoNatureInterest_PLR.setSelected(observable.getRdoNatureInterest_PLR());
        rdoNatureInterest_NonPLR.setSelected(observable.getRdoNatureInterest_NonPLR());
        addFacilityInterestNatureBtns();
    }

    private void sanctionMainTabPressed() {
        int selRow = -1;
        if (loanType.equals("LTD")) {
            selRow = 0;
        } else if (santab) {
            selRow = rowmaintab;
        } else {
//            selRow = tblSanctionDetails2.getSelectedRow();
//            rowmaintab=selRow;
        }
        santab = false;
        if (selRow >= 0) {
            updateOBFields();
            observable.populateFacilityTabSanction(selRow/*, rowSanctionMain*/);
            rowFacilityTabSanction = selRow;
            if (!(viewType.equals("Delete") || viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT))) {
                observable.resetAllFacilityDetails();
                updateCboTypeOfFacility();
                observableOtherDetails.resetOtherDetailsFields();
                observableRepay.resetAllRepayment();
                observableRepay.resetRepaymentCTable();
                observableGuarantor.resetGuarantorCTable();
                observableGuarantor.resetAllGuarantorDetails();
                observableDocument.resetAllDocumentDetails();
                observableDocument.resetDocCTable();
                observableInt.resetInterestCTable();
                observableInt.resetAllInterestDetails();
                observableClassi.resetClassificationDetails();
                observableAdditionalSanctionOB.resetAdditionalSanctionDetails();
            }
            setAllFacilityDetailsEnableDisable(false);
            setFacilityBtnsEnableDisable(false);
            btnsDisableBasedOnAccountNumber();
            observable.ttNotifyObservers();
        }
    }

    private void tblSanctionDetailsMousePressed() {
        if (enableControls) {
            if (observable.getStrACNumber().length() > 0) {
                ClientUtil.showMessageWindow(observable.getStrACNumber() + " is in Edit mode. Press Save/Cancel/New.");
            } else {
                ClientUtil.showMessageWindow("This a/c is in New mode. Press Save/Cancel/New.");
            }
            return;
        }

        if (!(viewType.equals(AUTHORIZE) || viewType.equals("Delete"))) {
            tblSanctionDetailsPopulate();
        }
        if (loanType.equals("LTD")) {
            morotoriumEnableDisable(false);
        }
        if (CommonUtil.convertObjToStr(cboAccStatus.getSelectedItem()).equals("Closed")) {
            HashMap map = new HashMap();
            if (lblAcctNo_Sanction_Disp.getText() != null && lblAcctNo_Sanction_Disp.getText().length() > 0) {
                map.put("ACT_NUM", lblAcctNo_Sanction_Disp.getText());
                List lst = ClientUtil.executeQuery("getDepositClosingAccounts", map);
                if (lst != null && lst.size() > 0) {
                    ClientUtil.showMessageWindow("Account Closed but Authorization pending ");
                    ClientUtil.enableDisable(this, false);
                    btnSave.setEnabled(false);
                } else {
                    ClientUtil.showMessageWindow("Account Closed");
                    ClientUtil.enableDisable(this, false);
                    btnSave.setEnabled(false);
                }
            } else {
                map = new HashMap();
            }

        }

        if (observable.getStrACNumber() != null && observable.getStrACNumber().length() > 0) {
            txtSanctionNo.setEnabled(false);
            insertScreenLock();
            if (validateScreenLock()) {
                btnCancelActionPerformed(null);
            }
            return;
        }

    }

    private void insertScreenLock() {
        HashMap hash = new HashMap();
        hash.put("USER_ID", ProxyParameters.USER_ID);
        hash.put("TRANS_ID", observable.getStrACNumber());
        hash.put("MODE_OF_OPERATION", viewType);
        hash.put("TRANS_DT", ClientUtil.getCurrentDate());
        hash.put("INITIATED_BRANCH", ProxyParameters.BRANCH_ID);
        ClientUtil.execute("insertauthorizationLock", hash);
    }

    private void updateCboTypeOfFacility() {
        cboTypeOfFacility.setSelectedItem(observable.getCboTypeOfFacility());
        //        observable.getCbmTypeOfFacility().setSelectedItem(observable.getCboTypeOfFacility());
    }

    private void tblSanctionDetailsPopulate() {
        sanMousePress = false;
        // Actions have to be taken when a record of Facility Details is selected in Sanction Details Tab
        //        if ((viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Edit")))
        if (loanType.equals("LTD") || sandetail) {
            allowMultiRepay = true;
            observableRepay.setAllowMultiRepay(true);
            updateOBFields();
            if (!loanType.equals("LTD") && (viewType.equals(AUTHORIZE) || viewType.equals("Delete"))) {
                observable.resetSanctionFacility();
            }
            // If Facility Details is in Edit Mode
            //if ((tblSanctionDetails2.getSelectedRow() == tblFacilityDetails.getSelectedRow()) && (tblSanctionDetails.getSelectedRow() == tblFacilityDetails2.getSelectedRow())){
            setSanctionFacilityBtnsEnableDisable(false);
            setAllSanctionFacilityEnableDisable(false);
            //                observable.sanctionFacilityEditWarning();
            if (!(viewType.equals("Delete") || viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW))) {
                if (loanType.equals("LTD")) {
                    rowSanctionFacility = 0;
                    sanDetailMousePressedForLTD = true;
                } else if (sandetail) {
                    rowSanctionFacility = rowsanDetail;
                }
                observable.populateSanctionFacility(rowSanctionFacility);
                updateCboTypeOfFacility();
                sandetail = false;
            }
            observable.ttNotifyObservers();
            sanctionFacilityTabPressed();
            if (viewType != null && viewType.equals("Edit")) {
//                btnLTD.setEnabled(false);
//                btnNew1.setVisible(true);
//                btnSave1.setVisible(true);
//                btnNew1.setEnabled(true);
//                btnSave1.setEnabled(true);
            }
            if (observable.getStrACNumber().length() > 0) {
//                btnFacilitySave.setVisible(false);
            } else {
//                btnFacilitySave.setVisible(true);
            }
        }
        if (loanType.equals("LTD")) {
            cboTypeOfFacility.setEnabled(false);
        }
        tdtTDate.setEnabled(false);
        observable.setUpdateAvailableBalance(false);
        txtLimit_SD.setEnabled(false);
//        btnLTD.setEnabled(false);
        txtNoInstallments.setEnabled(false);
        cboRepayFreq.setEnabled(false);
        tdtFDate.setEnabled(false);
        chkMoratorium_Given.setEnabled(false);
        additionalSanctionEnableDisable(false);
        additionalSanctionbtnEnableDisable(false);
        setAllInterestDetailsEnableDisable(false);
        setAllInterestBtnsEnableDisable(false);
        setAllSettlmentEnableDisable(false);
    }

    private void setAllSettlmentEnableDisable(boolean val) {
        //        settlementUI.setAllPoAEnableDisable(val);//dontdelete
    }

    private void tblSanctionDetails2Populate() {
        // Actions have to be taken when a record of Sanction Details is selected in Sanction Details Tab
        rowSanctionFacility = -1;
        updateSanctionFacility = false;
        int selRow = -1;
        if (loanType.equals("LTD")) {
            selRow = 0;
            //            ClientUtil.enableDisable(panTable_SD,false);
        } else if (sanction) {
            selRow = rowsan;
        } else {
//            selRow = tblSanctionDetails2.getSelectedRow();
//            rowsan=selRow;
        }
//        ClientUtil.enableDisable(panSanctionDetails_Sanction,false);
        sanction = false;
        if (selRow >= 0) {
            if (!updateSanctionFacility) {
                updateOBFields();
                updateSanctionMain = true;
                observable.populateSanctionMain(selRow);
                rowSanctionMain = selRow;
                if (!(viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Delete"))) {
                    observable.resetSanctionFacility();
                }
                if (!(viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Delete"))) {
                    updateCboTypeOfFacility();
                }
                setAllSanctionMainEnableDisable(false);
                setSanctionFacilityBtnsEnableDisable(false);
                setAllSanctionFacilityEnableDisable(false);
                additionalSanctionEnableDisable(false);
                if ((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Enquirystatus"))) {
//                    btnNew1.setVisible(false);
                } else {
//                    btnNew1.setVisible(true);
//                    btnNew1.setEnabled(true);
//                    btnNew2_SD.setEnabled(true);
                }
                observable.ttNotifyObservers();
                sanctionMainTabPressed();
            } else {
                ClientUtil.showMessageWindow("A/c No." + observable.getStrACNumber() + " is in Edit mode. Please Save it.");
            }
        }
        //        if (loanType.equals("LTD")) {
        //            tblSanctionDetailsMousePressed(null);
        //        }
    }

    private void btnDelete1Action() {
        // Facility Details CTable(Sanction Details Tab) Delete pressed
        observable.setLoanACNo(lblAcctNo_Sanction_Disp.getText());
        int mainSlno = rowSanctionMain;
        int slno = 0;
        //        CommonUtil.convertObjToInt(((ArrayList)((EnhancedTableModel)tblSanctionDetails.getModel()).getDataArrayList().get(rowSanctionFacility)).get(0));
        int rows = observable.deleteSanctionFacility(rowSanctionFacility, updateSanctionMain, rowSanctionMain, rowFacilityTabSanction, rowFacilityTabFacility);
        if (rows != -1) {
            observable.deleteFacilityRecord(mainSlno, slno);
            observable.resetSanctionFacility();
            observable.resetAllFacilityDetails();
            updateCboTypeOfFacility();
            resetTabsDependsOnAccountNumber();
            setSanctionFacilityBtnsEnableDisable(false);
            setAllSanctionFacilityEnableDisable(false);
            setAllFacilityDetailsEnableDisable(false);
            setFacilityBtnsEnableDisable(false);
            btnsDisableBasedOnAccountNumber();
//            btnNew1.setEnabled(true);
            observable.ttNotifyObservers();
            //            if (tblSanctionDetails.getRowCount() < 1){
            //                btnDelete2_SD.setEnabled(true);
            //            }


            rowSanctionFacility = -1;
            updateSanctionFacility = false;
        }
        //        else if(rows==0){
        //            btnFacilityDeletePressed();
        //        }
    }

    private void btnSave1ActionPerformed() {
        if (CommonUtil.convertObjToStr(cboAccStatus.getSelectedItem()).equals("Closed")) {
            return;
        }
        enableControls = true;
        setSanctionMainBtnsEnableDisable(true);
        //        additionalSanctionEnableDisable(true);
        //        additionalSanctionNewEnableDisable(true);
        //        if (tblSanctionDetails.getRowCount() > 0){
        //            btnDelete2_SD.setEnabled(false);
        //        }
        setAllSanctionMainEnableDisable(true);
        setSanctionFacilityBtnsEnableDisable(true);
        setAllSanctionFacilityEnableDisable(true);
        //        actTransUI.setActTransferEnableDisable(true);//dontdelete
        updateSanctionFacility = true;
        updateRecords = true;
        allowMultiRepay = observableRepay.getAllowMultiRepay();
        HashMap hash2 = new HashMap();
        boolean lienAuthorized = false;
        hash2.put("PROD_DESC", CommonUtil.convertObjToStr(cboProductId.getModel().getSelectedItem()));
        List behaveslike = ClientUtil.executeQuery("getLoanBehaves", hash2);
        if (behaveslike != null && behaveslike.size() > 0) {
            hash2 = (HashMap) behaveslike.get(0);
        }
        if (hash2.containsKey("BEHAVES_LIKE") && lblAcctNo_Sanction_Disp.getText() != null && lblAcctNo_Sanction_Disp.getText().length() > 0) {
            String behavesLike = CommonUtil.convertObjToStr(hash2.get("BEHAVES_LIKE"));
            if (behavesLike.equals("OD") || behavesLike.equals("CC")) {
                observable.setUpdateAvailableBalance(true);
                txtLimit_SD.setEnabled(true);
                txtNoInstallments.setEnabled(true);
//                btnLTD.setEnabled(true);
                cboRepayFreq.setEnabled(true);
                tdtFDate.setEnabled(true);
                chkMoratorium_Given.setEnabled(true);
                additionalSanctionEnableDisable(false);
                additionalSanctionbtnEnableDisable(false);
                rdoDP_YES.setVisible(true);
                rdoDP_NO.setVisible(true);
                lblDPLimit.setVisible(true);
                rdoDP_YES.setEnabled(true);
                rdoDP_NO.setEnabled(true);
                lblDPLimit.setEnabled(true);
                //                    panInterest1
            } else {
                rdoDP_YES.setVisible(false);
                rdoDP_NO.setVisible(false);
                lblDPLimit.setVisible(false);
            }
        }
        if (hash2.containsKey("BEHAVES_LIKE") && lblAcctNo_Sanction_Disp.getText() != null && lblAcctNo_Sanction_Disp.getText().length() > 0) {
            hash2.put("ACT_NUM", lblAcctNo_Sanction_Disp.getText());
            hash2.put("ACCT_NUM", lblAcctNo_Sanction_Disp.getText());
            //disbursement also over we have to check customer repaid or not  modifiy by abi 14-feb-09
            List lst = null;
            if (CommonUtil.convertObjToStr(hash2.get("BEHAVES_LIKE")).equals("OD") || CommonUtil.convertObjToStr(hash2.get("BEHAVES_LIKE")).equals("CC")) {
                lst = ClientUtil.executeQuery("checkTransactionAD", hash2);
            } else {
                lst = ClientUtil.executeQuery("checkTransaction", hash2);
            }
            HashMap map = (HashMap) lst.get(0);
            transCount = 0;
            transCount = CommonUtil.convertObjToInt(map.get("CNT"));
            //System.out.print("map###2" + map);
            map.put("ACCT_NUM", lblAcctNo_Sanction_Disp.getText());
            lst = null;
            if (loanType.equals("LTD")) {
                lst = ClientUtil.executeQuery("getDepositLienAmount", map);
            }
            if (lst != null && lst.size() > 0) {
                lienAuthorized = true;
            }
            Date curr_dts = (Date) curr_dt.clone();
            Date repay_dt = DateUtil.getDateMMDDYYYY(tdtFacility_Repay_Date.getDateValue());
            if (transCount != 0 || CommonUtil.convertObjToStr(hash2.get("BEHAVES_LIKE")).equals("OD") || CommonUtil.convertObjToStr(hash2.get("BEHAVES_LIKE")).equals("CC")
                    || (repay_dt != null && DateUtil.dateDiff(repay_dt, curr_dts) > 0) || observable.getShadowCredit() > 0 || observable.getShadowDebit() > 0 || observable.getClearBalance() < 0 || lienAuthorized) {
                //                observable.setUpdateAvailableBalance(false);
                txtLimit_SD.setEnabled(false);
//                btnLTD.setEnabled(false);
                txtNoInstallments.setEnabled(false);
                cboRepayFreq.setEnabled(false);
                tdtFDate.setEnabled(false);
                chkMoratorium_Given.setEnabled(false);
                observable.setPartReject("PARTILLY_REJECT");
                additionalSanctionEnableDisable(false);
                //                additionalSanctionbtnEnableDisable(false);
                cboProductId.setEnabled(false);
                cboTypeOfFacility.setEnabled(false);
                setAllFacilityDetailsEnableDisable(true);
                setFacilityBtnsEnableDisable(true);
                additionalSanctionbtnEnableDisable(true);

            } else {
                observable.setUpdateAvailableBalance(true);
                txtLimit_SD.setEnabled(true);
//                txtLimit_SD2.setEnabled(true);
                txtNoInstallments.setEnabled(true);
//                btnLTD.setEnabled(true);
                cboRepayFreq.setEnabled(true);
                tdtFDate.setEnabled(true);
                chkMoratorium_Given.setEnabled(true);
                additionalSanctionEnableDisable(false);
                additionalSanctionbtnEnableDisable(false);
                observable.setPartReject("");
                setAllFacilityDetailsEnableDisable(true);
                setFacilityBtnsEnableDisable(true);
                //                additionalSanctionbtnEnableDisable(true);

                String strFacilityType = getCboTypeOfFacilityKeyForSelected();
                if (!strFacilityType.equals(LOANS_AGAINST_DEPOSITS)) {
                } else {
                    setTotalMainAdditionalSanction();
                }
                strFacilityType = null;
                enableDisableGetIntFrom(true);
                setAllInterestDetailsEnableDisable(false);
                setAllRepaymentDetailsEnableDisable(false);
                setRepaymentNewOnlyEnable();
                setAllGuarantorDetailsEnableDisable(false);
                setGuarantorDetailsNewOnlyEnabled();
                setAllDocumentDetailsEnableDisable(false);
                setDocumentToolBtnEnableDisable(false);
            }
            String intGetFrom = CommonUtil.convertObjToStr(observable.getCbmIntGetFrom().getKeyForSelected());
            if ((intGetFrom.equals(PROD)) || (intGetFrom.equals(""))) {
                setAllInterestBtnsEnableDisable(false);
            } else {
                setInterestDetailsOnlyNewEnabled();
            }
            ClientUtil.enableDisable(panAccountDetails, true);
            disableLastIntApplDate();
            if (rdoSecurityDetails_Fully.isSelected()) {
                rdoSecurityDetails_FullyActionPerformed(null);
            } else if (rdoSecurityDetails_Partly.isSelected()) {
                rdoSecurityDetails_PartlyActionPerformed(null);
            } else if (rdoSecurityDetails_Unsec.isSelected()) {
                rdoSecurityDetails_UnsecActionPerformed(null);
            }

            if (chkGurantor.isSelected()) {
                chkGurantorActionPerformed(null);
            } else {
                setAllGuarantorBtnsEnableDisable(false);
            }

            if (chkInsurance.isSelected()) {
                chkInsuranceActionPerformed(null);
            } else {
            }
            setSanctionProductDetailsDisable();

            observableInt.setValByProdID();
        }
        //renewal od
        if (hash2.containsKey("BEHAVES_LIKE") && (!CommonUtil.convertObjToStr(hash2.get("BEHAVES_LIKE")).equals("OD")
                || CommonUtil.convertObjToStr(hash2.get("BEHAVES_LIKE")).equals("CC")) && lblAcctNo_Sanction_Disp.getText() != null && lblAcctNo_Sanction_Disp.getText().length() > 0) {
            if (observable.getTdtTDate() != null && observable.getTdtTDate().length() > 0 && DateUtil.dateDiff(DateUtil.getDateMMDDYYYY(observable.getTdtTDate()), DateUtil.getDateWithoutMinitues((Date) curr_dt.clone())) >= 0) {
                if (accNumMap.containsKey(lblAcctNo_Sanction_Disp.getText()) && sanMousePress) {
                    if (tblRepaymentCTable.getRowCount() > 0) {
                        sanMousePress = true;
                    }
                }
            }
        }
        if (observable.getCboAccStatus().equals("Closed") && viewType.equals(CommonConstants.STATUS_AUTHORIZED)) {
            setAllClassificationDetailsEnableDisable(false);
        } else {
            setAllClassificationDetailsEnableDisable(true);
        }

        if (tblInterMaintenance.getSelectedRow() >= 0) {
            tblinterestDetailsMousePressed();
        }
        if (tblRepaymentCTable.getSelectedRow() >= 0) {
            tblRepaymentCTableMousePressed();
        }

        //        String mandatoryMessage="";
        //        mandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(), panTableFields_SD);
        //        /* mandatoryMessage1 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
        //        if (chkMoratorium_Given.isSelected() && (txtFacility_Moratorium_Period.getText().length() == 0)){
        //            TermLoanRB termLoanRB = new TermLoanRB();
        //            mandatoryMessage = mandatoryMessage + termLoanRB.getString("moratorium_Given_Warning");
        //            termLoanRB = null;
        //            }
        //        //ltd loan number not generator nut checking lien
        //        if(loanType.equals("LTD") && observable.getStrACNumber().length()==0) {
        //            String mainLimit=CommonUtil.convertObjToStr(txtLimit_SD.getText());
        //            if(mainLimitMarginValidation(mainLimit))
        //                return;
        //            if(checkInterestRateForLTD()){
        //                return;
        //        }
        //        }
        //        //for renew   od
        //        txtLimit_SDFocusLostOD(false);
        //        //
        //        //check sanctionDetails change or not if change delete repayment schedule
        //        if(sanctionDetailsBasedRepayment())
        //            return;
        //
        //        if (mandatoryMessage.length() > 0){
        //            displayAlert(mandatoryMessage);
        //        }else{
        //            //check repay detail delete or not
        //            if(!((observable.getTxtLimit_SD()).equals(txtLimit_SD.getText())) ||
        //            !((observable.getTxtNoInstallments()).equals(txtNoInstallments.getText())) ||
        //            !(((String)cboRepayFreq.getSelectedItem()).equals(observable.getCboRepayFreq() )) ||
        //            !((observable.getTdtFDate()).equals(tdtFDate.getDateValue()))){
        //
        //
        //                accNumMap.put(lblAcctNo_Sanction_Disp.getText(),lblAcctNo_Sanction_Disp.getText());
        //            }
        //            //end checking
        //            boolean periodFlag = false;
        //            boolean limitFlag = false;
        //            String message = new String();
        //            if (loanType.equals("OTHERS")) {
        //                if (!(cboRepayFreq.getSelectedItem().equals("User Defined") || cboRepayFreq.getSelectedItem().equals("Lump Sum")) && !observable.checkFacilityPeriod(txtNoInstallments.getText(), txtFacility_Moratorium_Period.getText())){
        //                    observable.decoratePeriod();
        //                    message = message.concat("The Limit Period must fall within "+observable.getMinDecLoanPeriod()+" and  "+observable.getMaxDecLoanPeriod());
        //                    periodFlag = false;
        //                }else if ((cboRepayFreq.getSelectedItem().equals("User Defined") || cboRepayFreq.getSelectedItem().equals("Lump Sum")) && !observable.checkFacilityPeriod(DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue()), DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue()))){
        //                    observable.decoratePeriod();
        //                    message = message.concat("The Limit Period must fall within "+observable.getMinDecLoanPeriod()+" and  "+observable.getMaxDecLoanPeriod());
        //                    periodFlag = false;
        //                }else{
        //                    periodFlag = true;
        //                }
        //            }else{
        //                periodFlag = true;
        //            }
        //            if (loanType.equals("OTHERS")) {
        //                if (!observable.checkLimitValue(txtLimit_SD.getText())) {
        //                    observable.setTxtLimit_SD("");
        //                    txtLimit_SD.setText(observable.getTxtLimit_SD());
        //                    message = message.concat("\nThe Limit value must fall within "+observable.getMinLimitValue().toString()+" and  "+observable.getMaxLimitValue().toString());
        //                    limitFlag = false;
        //                }else{
        //                    limitFlag = true;
        //                }
        //            }else{
        //                limitFlag = true;
        //            }
        //            if (!(periodFlag && limitFlag)){
        //                btnSave1Action();
        //            }else{
        //                displayAlert(message);
        //            }
        //            message = null;
        //        }
    }

    private void checkProductLevelInterestDetailsforLTD() {
        HashMap whereMap = new HashMap();
        whereMap.put("CATEGORY_ID", observableBorrow.getCbmCategory().getKeyForSelected());
        whereMap.put("AMOUNT", getBigDecimal(CommonUtil.convertObjToDouble(observable.getTxtLimit_SD()).doubleValue()));
        whereMap.put("PROD_ID", observable.getLblProductID_FD_Disp());
        whereMap.put("FROM_DATE", getTimestamp(DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue())));
        whereMap.put("TO_DATE", getTimestamp(DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue())));

    }

    private boolean sanctionDetailsBasedRepayment() {
        String acct_num = CommonUtil.convertObjToStr(lblAcctNo_Sanction_Disp.getText());
        if (!acct_num.equals("")) {
            StringBuffer msg = new StringBuffer();
            HashMap map = new HashMap();
            map.put(CommonConstants.MAP_WHERE, acct_num);
            List lst = null;
            if (alreadyChecked) {
                lst = ClientUtil.executeQuery("getSelectTermLoanSanctionFacilityTO.AUTHORIZE", map);
            }
            if (lst != null && lst.size() > 0) {
                boolean deleteRecord = false;
                TermLoanSanctionFacilityTO termLoanSanctionFacilityTO = (TermLoanSanctionFacilityTO) lst.get(0);
                if (termLoanSanctionFacilityTO.getLimit().doubleValue() != CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue()) {
                    deleteRecord = true;
                    msg.append("Actual Limit     :" + termLoanSanctionFacilityTO.getLimit().doubleValue() + "\n"
                            + "Change Limit " + txtLimit_SD.getText() + "\n");
                }
                if (DateUtil.dateDiff(termLoanSanctionFacilityTO.getFromDt(), DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue())) != 0) {
                    deleteRecord = true;
                    msg.append("From Date was   :" + termLoanSanctionFacilityTO.getFromDt() + "\n"
                            + "Now it is Changed to   " + txtLimit_SD.getText() + "\n");

                }
                Date dt = DateUtil.getDateMMDDYYYY(tdtDirect_Repay_Date.getDateValue());
                if (dt != null && DateUtil.dateDiff(termLoanSanctionFacilityTO.getToDt(), dt) != 0) {
                    deleteRecord = true;
                    msg.append("To Date was   :" + DateUtil.getStringDate(termLoanSanctionFacilityTO.getToDt()) + "\n"
                            + "Now it is Changed to   " + tdtDirect_Repay_Date.getDateValue() + "\n");

                }
                if (termLoanSanctionFacilityTO.getNoInstall().doubleValue() != CommonUtil.convertObjToDouble(txtNoInstallments.getText()).doubleValue()) {
                    deleteRecord = true;
                    msg.append(" Installment  was   :" + termLoanSanctionFacilityTO.getNoInstall().doubleValue() + "\n"
                            + "Now it is Changed to   " + txtNoInstallments.getText() + "\n");

                }
                if (termLoanSanctionFacilityTO.getRepaymentFrequency().doubleValue() != CommonUtil.convertObjToDouble(((ComboBoxModel) cboRepayFreq.getModel()).getKeyForSelected()).doubleValue()) {
                    deleteRecord = true;
                    msg.append("Repayment Frequency  was   :" + setSanctionDetailsFrequency(termLoanSanctionFacilityTO.getRepaymentFrequency()) + "\n"
                            + "Now it is Changed to   " + CommonUtil.convertObjToStr(cboRepayFreq.getSelectedItem()) + "\n");

                }
                if (!CommonUtil.convertObjToStr(txtFacility_Moratorium_Period.getText()).equals("")) {
                    if (termLoanSanctionFacilityTO.getNoMoratorium().doubleValue() != CommonUtil.convertObjToDouble(txtFacility_Moratorium_Period.getText()).doubleValue()) {
                        deleteRecord = true;
                        msg.append("Morotorium  was   :" + termLoanSanctionFacilityTO.getNoMoratorium().doubleValue() + "\n"
                                + "Now it is Changed to   " + txtFacility_Moratorium_Period.getText() + "\n");

                    }
                }
                //commented by 
//                if (deleteRecord && loanType.equals("OTHERS") && (!termLoanSanctionFacilityTO.getFacilityType().equals("OD"))) {
//                    msg.append("Create a new Repayment Schedule and then save");
//                    ClientUtil.showMessageWindow("" + msg);
//                    dumRowRepay = 0;
//                    sanValueChanged = true;
//                    if (tblRepaymentCTable.getRowCount() > 0) {
//                        tblRepaymentCTableMousePressed();
//                        btnRepayment_DeleteActionPerformed();
//                        sanValueChanged = false;
//                        alreadyChecked = false;
//                        return true;
//                    }
//                }
                if (deleteRecord && (observable.getProductCategory().equals("PADDY_LOAN") || observable.getProductCategory().equals("MDS_LOAN"))
                        && (!termLoanSanctionFacilityTO.getFacilityType().equals("OD"))) {
                    tblRepaymentCTableMousePressed();
                    btnRepayment_DeleteActionPerformed();
                    btnRepayment_NewActionPerformed(null);
                    btnEMI_CalculateActionPerformed(null);
                    btnRepayment_SaveActionPerformed(null);
                    sanValueChanged = false;
                    alreadyChecked = false;
                    return true;
                }
            }
        }
        return false;
    }

    private String setSanctionDetailsFrequency(Double obj) {
        if (365 == obj.doubleValue()) {
            return "Yearly";
        }
        if (180 == obj.doubleValue()) {
            return "HalfYearly";
        }
        if (90 == obj.doubleValue()) {
            return "Quaterly";
        }
        if (30 == obj.doubleValue()) {
            return "Monthly";
        }

        return "";
    }

    private void btnSave1Action() {
        updateOBFields();
        if ((observable.addSanctionFacilityTab(rowSanctionFacility, updateSanctionFacility, updateSanctionMain, rowSanctionMain, rowFacilityTabSanction)) == 1) {
            setAllSanctionFacilityEnableDisable(true);
        } else {
            // It will update the database tables based on the Account Number
            if (observable.getStrACNumber().length() > 0) {
                if (!btnFacilitySavePressed()) {
                    resetEnableDisableFieldsBasedOnSave1Action();
                }
            } else {
                resetEnableDisableFieldsBasedOnSave1Action();
            }
        }
        observable.ttNotifyObservers();
        //        if (loanType.equals("LTD")) btnSave2_SDActionPerformed(null); for testig by abi
    }

    private void resetEnableDisableFieldsBasedOnSave1Action() {
        observable.resetSanctionFacility();
        setSanctionFacilityBtnsEnableDisable(false);
        setAllSanctionFacilityEnableDisable(false);
//        btnNew1.setEnabled(true);
//        btnSave2_SD.setEnabled(true);
        rowSanctionFacility = -1;
        updateSanctionFacility = false;
        updateRecords = false;
//        observableSecurity.resetAllSecurityDetails();
        observable.resetAllFacilityDetails();
        updateCboTypeOfFacility();
        resetTabsDependsOnAccountNumber();
        setAllFacilityDetailsEnableDisable(false);
        setFacilityBtnsEnableDisable(false);
        btnsDisableBasedOnAccountNumber();
    }

    private void btnNew1Action() {
        // Facility Details CTable(Sanction Details Tab) New pressed
        enableControls = true;
        if (loanType.equals("LTD")) {
            //            if (tblSanctionDetails.getRowCount()>=1) {
            //                ClientUtil.showMessageWindow("More than one loan not allowed for a single borrower...");
            //                return;
            //            }
        }
        if (loanType.equals("LTD")) //            btnLTD.setEnabled(true);
        {
            observable.resetSanctionFacility();
        }
        observable.resetAllFacilityDetails();
        updateCboTypeOfFacility();
        resetTabsDependsOnAccountNumber();
        setAllFacilityDetailsEnableDisable(true);
        //        setFacilityBtnsEnableDisable(false);
        btnsDisableBasedOnAccountNumber();
        observable.setTdtFDate(DateUtil.getStringDate((Date) curr_dt.clone()));
        observable.setAccountOpenDate(DateUtil.getStringDate((Date) curr_dt.clone()));
        setDefaultValB4AcctCreation();
        observable.ttNotifyObservers();
        setSanctionFacilityBtnsEnableDisable(true);
        setAllSanctionFacilityEnableDisable(true);
        setAllClassificationDetailsEnableDisable(true);
//        btnDelete1.setEnabled(false);
        rowSanctionFacility = -1;
        updateSanctionFacility = false;
        updateRecords = true;
        if (loanType.equals("LTD")) {
            ((ComboBoxModel) cboTypeOfFacility.getModel()).setKeyForSelected(LOANS_AGAINST_DEPOSITS);
            cboTypeOfFacility.setEnabled(false);
        }
        sandetail = true;
        enableDisableGetIntFrom(true);
        setRepaymentBtnsEnableDisable(true);
        ClientUtil.enableDisable(panClassDetails, true);
        //        btnSave1.setVisible(false);
//        btnSave1.setEnabled(false);
        observableClassi.setClassifiDetails(CommonConstants.TOSTATUS_INSERT);
        observableOtherDetails.setOtherDetailsMode(CommonConstants.TOSTATUS_INSERT);
    }

    private void btnDelete2_SDAction() {
        // Sanction Details CTable(Sanction Details Tab) Delete pressed
        observable.deleteSanctionMain(rowSanctionMain);
        observable.resetSanctionMain();
        observable.resetSanctionFacilityTable();
        observable.resetSanctionFacility();
        observable.resetAllFacilityDetails();
        updateCboTypeOfFacility();
        resetTabsDependsOnAccountNumber();
        setSanctionFacilityBtnsEnableDisable(false);
        setAllSanctionFacilityEnableDisable(false);
        setSanctionMainBtnsEnableDisable(false);
        setAllSanctionMainEnableDisable(false);
        setAllFacilityDetailsEnableDisable(false);
        setFacilityBtnsEnableDisable(false);
        btnsDisableBasedOnAccountNumber();
//        btnNew2_SD.setEnabled(true);
        rowSanctionMain = -1;
        observable.ttNotifyObservers();
    }

    private void btnSave2_SDAction() {
        // Sanction Details CTable(Sanction Details Tab) Save pressed
        //check sanction no if change means we shoude update facilitydetails and sanction facility_details
        String newSanctionNo = CommonUtil.convertObjToStr(txtSanctionNo.getText());
        String sanctionSlNo = CommonUtil.convertObjToStr(txtSanctionSlNo.getText());
        if (!(sanctionSlNo.equals("") && newSanctionNo.equals(""))) {
            if (observable.getOldSanction_no() != newSanctionNo) {
                if (observable.checkAllfacilitySanctionnoUpdateDetails(newSanctionNo, sanctionSlNo)) {
                    updateSanctionMain = true;
                }
            }
        }
        updateOBFields();
        observable.ttNotifyObservers();
    }

    private void btnNew2_SDAction() {
        // Sanction Details CTable(Sanction Details Tab) New pressed
        observable.createSanctionMainRowObjects();
        observable.setStrRealSanctionNo("");
        observable.createTableUtilSanctionFacility();
        setSanctionMainBtnsEnableDisable(true);  //false changed as true by Rajesh
        setAllSanctionMainEnableDisable(true);
        setAllFacilityDetailsEnableDisable(false);
//        btnNew1.setEnabled(true);
//        btnNew2_SD.setEnabled(true);
//        btnDelete2_SD.setEnabled(false);         // This line added by Rajesh
        rowSanctionMain = -1;
        rowSanctionFacility = -1;
        updateSanctionFacility = false;
        updateSanctionMain = false;
        //        observableBorrow.setCboCategory(CommonUtil.convertObjToStr(cboCategory.getSelectedItem()));
        updateOBFields();
        observable.resetSanctionMain();
        observable.setTdtSanctionDate(DateUtil.getStringDate((Date) curr_dt.clone()));
        observable.destroyCreateSanctionFacilityObjects();
        btnNew1Action();
//        btnNew1.setVisible(false);
        //        btnSave1.setVisible(false);
        txtSanctionNo.requestFocus();
        txtSanctionSlNo.setText("1");
        observable.setTxtSanctionSlNo("1");
    }

    private void btnCustIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustIDActionPerformed
        // Add your handling code here:
        if (rdoSHG_Yes.isSelected() == true) {
            if (txtSHGId.getText().length() > 0) {
                callView("CUSTOMER ID");
            } else {
                ClientUtil.showMessageWindow("SHG_ID Should Not be Empty !!! ");
            }
        } else {
            viewType = "CUSTOMER ID";
            new CheckCustomerIdUI(this);
        }
        HashMap purposeMap = new HashMap();
        String purpose = "";
        purposeMap.put("APPNO", txtApplicationNo.getText());
        List purposeList = ClientUtil.executeQuery("getSelectPurposeCodeFromLoanApplRegstr", purposeMap);
        if (purposeList != null && purposeList.size() > 0) {
            purposeMap = (HashMap) purposeList.get(0);
            purpose = CommonUtil.convertObjToStr(purposeMap.get("PURPOSE_CODE"));
        }
        //System.out.println("purpose>>>>" + purpose);
        if (purpose != null) {
            cboPurposeCode.setSelectedItem(purpose);
        }
    }//GEN-LAST:event_btnCustIDActionPerformed
    private void validateConstitutionCustID() {
        String strConstitution = CommonUtil.convertObjToStr(cboConstitution.getSelectedItem());
        // If the constitution is blank then allow to select the customer
        if (strConstitution.length() != 0 && tblBorrowerTabCTable.getRowCount() > 0) {
            observableBorrow.validateConstitutionCustID(strConstitution, CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(0, 2)));
            cboConstitution.setSelectedItem(observableBorrow.getCboConstitution());
        }
    }

    private void displayShareDetails(HashMap hash) {
        System.out.println("txtExistingAcctNo :: " + txtExistingAcctNo.getText());
        hash.put("MEMBER_NO",txtExistingAcctNo.getText());
        List shareLst = ClientUtil.executeQuery("getShareAccountDetails", hash);
        if (shareLst != null && shareLst.size() > 0) {
            HashMap shareMap = new HashMap();
            shareMap = (HashMap) shareLst.get(0);
            txtTotalNoOfShare.setText(CommonUtil.convertObjToStr(shareMap.get("NO_OF_SHARES")));
            txtTotalShareAmount.setText(CommonUtil.convertObjToStr(shareMap.get("TOTAL_SHARE_AMOUNT")));
        } else {
            txtTotalNoOfShare.setText("");
            txtTotalShareAmount.setText("0");
        }
    }
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // Add your handling code here:
        cifClosingAlert();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void removeObservable() {
        observable.deleteObserver(this);
        observableBorrow.deleteObserver(this);
        observableComp.deleteObserver(this);
//        observableSecurity.deleteObserver(this);
        observableRepay.deleteObserver(this);
        observableGuarantor.deleteObserver(this);
        observableInt.deleteObserver(this);
        observableClassi.deleteObserver(this);
    }

    private void destroyOBObjects() {
        observableBorrow = null;
        observableClassi = null;
        observableComp = null;
        observableGuarantor = null;
        observableInt = null;
        observable = null;
        observableRepay = null;
        observableSecurity = null;
    }
    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // Add your handling code here:
        HashMap reportParamMap = new HashMap();
        com.see.truetransact.clientutil.ttrintegration.LinkReport.getReports(getScreenID(), reportParamMap);
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // Add your handling code here:
        if (observable.isIsTransacton() == false) {
            removeEditLock();
        }
        btncancelActionPerformed();
        if (loanType.equals("LTD")) {
            tabLimitAmount.remove(panCaseDetails);
        }
        tabLimitAmount.add(panRepaymentSchedule);
        ResolutionSearch.setEnabled(false);
        chkRecovery.setSelected(false);
        if (fromNewAuthorizeUI) {
            this.dispose();
            fromNewAuthorizeUI = false;
            newauthorizeListUI.setFocusToTable();
        }
        if (fromAuthorizeUI) {
            this.dispose();
            fromAuthorizeUI = false;
            authorizeListUI.setFocusToTable();
        }
        if (fromManagerAuthorizeUI) {
            this.dispose();
            fromManagerAuthorizeUI = false;
            ManagerauthorizeListUI.setFocusToTable();
        }    
    }//GEN-LAST:event_btnCancelActionPerformed
    private void resetAllExtendedTab() {
        authSignUI.resetAllFieldsInAuthTab();
        poaUI.getPowerOfAttorneyOB().resetAllFieldsInPoA();
    }

    private void btncancelActionPerformed() {
        //        if( viewType.equals("Edit") ||  viewType.equals("Delete") ){
        //        if(observable.getAuthorizeStatus() !=null ) //commented for checking edit lock by using borrow no but it shoude be edit lock by loan no  dont delete
        super.removeEditLock(lblBorrowerNo_2.getText());
        observableRepay.setNewMode(false);
        //        }
        ClientUtil.clearAll(this);
        setFocusFirstTab();
        observable.resetForm();
        chkGurantorActionPerformeds();
        rdoFullySecuredActionPerformed();
        rdoPartlySecuredActionPerformed();
        dailyLoanVisibleComp(false);
        lblTotalLimitAmt.setText("");
        resetAllExtendedTab();
        observable.resetAllFacilityDetails();
        updateCboTypeOfFacility();
        observable.destroyObjects();
        observable.createObject();
        outStandingAmtRepayment = false;
        deletescreenLock();
        authSignUI.setUpdateModeAuthorize(false);
        poaUI.setUpdateModePoA(false);
        setMode(ClientConstants.ACTIONTYPE_CANCEL);
        ClientUtil.enableDisable(this, false);// Disables the panel...
        observable.setActionType(ClientConstants.ACTIONTYPE_CANCEL);
        observable.setStatus();
        authSignUI.setLblStatus(observable.getLblStatus());
        poaUI.setLblStatus(observable.getLblStatus());
        setButtonEnableDisable();
        setAllTableBtnsEnableDisable(false); // To disable the Tool buttons for all the CTable
        setbtnCustEnableDisable(false);
        setAllTablesEnableDisable(true);
        btnsDisableBasedOnAccountNumber();
        setModified(false);
        rowSanctionFacility = -1;
        updateSanctionFacility = false;
        updateRecords = false;
        viewType = "";
        date = null;
        sandetail = false;
        enableControls = false;
        txtEditTermLoanNo.setEnabled(true);
        txtEditTermLoanNo.setText("");
        txtExistingAcctNo.setText("");
        observable.resetTableValues();
        btnCaseNew.setEnabled(false);
        ClientUtil.clearAll(this);
//        panTable_SD.removeAll();
//        panTable_SD.setVisible(false);
        observable.setPaddyMap(null);
        observable.setMdsMap(null);
        btnSHGId.setEnabled(false);
        btnMembershipLia.setEnabled(false);
        btnSecurityMember(false);
        btnSecurityCollateral(false);
        observableInt.setClearMap();
        odRenewalVisibleComp(false);
        chrgTableEnableDisable();
        btnSave.setEnabled(false);
//        btnNew.setEnabled(true);
        lblLockStatusVal.setText("");
        tabLimitAmount.addTab("Case Details", panCaseDetails);
        if (fromNewAuthorizeUI) {
            this.dispose();
            fromNewAuthorizeUI = false;
        }
        if (fromAuthorizeUI) {
            this.dispose();
            fromAuthorizeUI = false;
        }
        if (fromManagerAuthorizeUI) {
            this.dispose();
            fromManagerAuthorizeUI = false;
        }
        observable.resetGoldTypeDetails();
        lblTotalDepositValue.setText("");
        chkOTS.setVisible(true);
        tabLimitAmount.remove(panOTSDetails);
        resetCourtDetails();
        observable.setUpdateCourtDetails(false);
//        setInstallmentType(false);
        btnAppNo.setEnabled(false);
        chkRecovery.setSelected(false);
        // Added  By Suresh
        setInstallmentType(true);
        observable.setDelIntFlag("N");
        btnAuthorize.requestFocus(false);
        lblServiceTaxval.setText("");
        oldloanAmt=0;
        loanRenewal=false;
        suspenseActNum=null;
        oldLoanNo = null;
        loanRenewalAllowedForProduct = false;
        closingInProgress = false;
        loanReceiptInRenewal = false;
        txtInstallAmount.setText("");
    }
    private void mitCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitCloseActionPerformed
        // Add your handling code here:
        btnCloseActionPerformed(evt);
    }//GEN-LAST:event_mitCloseActionPerformed

    private void mitPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitPrintActionPerformed
        // Add your handling code here:
        btnPrintActionPerformed(evt);
    }//GEN-LAST:event_mitPrintActionPerformed

    private void mitCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitCancelActionPerformed
        // Add your handling code here:
        btnCancelActionPerformed(evt);
    }//GEN-LAST:event_mitCancelActionPerformed

    private void mitSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitSaveActionPerformed
        // Add your handling code here:
        btnSaveActionPerformed(evt);
    }//GEN-LAST:event_mitSaveActionPerformed

    private void mitDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitDeleteActionPerformed
        // Add your handling code here:
        btnDeleteActionPerformed(evt);
    }//GEN-LAST:event_mitDeleteActionPerformed

    private void mitEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitEditActionPerformed
        // Add your handling code here:
        btnEditActionPerformed(evt);
    }//GEN-LAST:event_mitEditActionPerformed

    private void mitNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitNewActionPerformed
        // Add your handling code here:
        btnNewActionPerformed(evt);
    }//GEN-LAST:event_mitNewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Add your handling code here:
        transNew = false;
        btndeleteActionPerformed();
    }//GEN-LAST:event_btnDeleteActionPerformed
    private void btndeleteActionPerformed() {
        observable.setActionType(ClientConstants.ACTIONTYPE_DELETE);
        setAllTableBtnsEnableDisable(false); // To disable the Tool buttons for all the CTable
        popUp("Delete");
        authSignUI.setAuthTabBtnEnableDisable(false);
        setAllTablesEnableDisable(true); // To disable the All tables...
        rowSanctionFacility = -1;
        updateSanctionFacility = false;
        updateRecords = false;
        txtSubsidyAmt.setEnabled(false);
        txtSubsidyAdjustedAmt.setEnabled(false);
        txtEnteredSubsidyAmt.setEnabled(false);
    }

    private void setAllTablesEnableDisable(boolean val) {
        //        tblSanctionDetails.setEnabled(val);
    }
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // Add your handling code here:
        if (CommonUtil.convertObjToStr(txtEditTermLoanNo.getText()).length() > 0) {
            String[] obj = {"Yes ", "No"};
            int option = COptionPane.showOptionDialog(null, ("Do you want to Enable all those fields?"), ("TermLoan"),
                    COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj, obj[0]);
            if (option == 0) {
                ClientUtil.enableDisable(this, true);
                btnSave.setEnabled(true);
                btnEdit.setEnabled(false);
                observable.setActionType(ClientConstants.ACTIONTYPE_EDIT);
                authSignUI.setAuthEnableDisable(false);
                authSignUI.setAuthOnlyNewBtnEnable();
                authSignUI.setAllAuthInstEnableDisable(false);
                authSignUI.setAuthInstOnlyNewBtnEnable();
                poaUI.setAllPoAEnableDisable(false);
                setSanctionFacilityBtnsEnableDisable(false);
                ClientUtil.enableDisable(panCaseTableFields, false);
                btnCaseNew.setEnabled(true);
                //        btnCancel.setEnabled(true);
                txtTotalShareAmount.setEnabled(false);
                txtTotalNoOfShare.setEnabled(false);
                enableDisableSalaryDetails(false);
                resetSalaryDetails();
                enableDisableSalaryBtnsNew(true);
                enableDisableRebate(false);
            } else {
                ClientUtil.enableDisable(this, false);
                return;
            }
        } else {
            btneditActionPerformed();
        }
               ResolutionSearch.setEnabled(true);
        enabledesableLOS(false);
        ClientUtil.enableDisable(panDepositType, false);
        ClientUtil.enableDisable(panDepNo, false);
        btnDepositNew.setEnabled(true);
        ClientUtil.enableDisable(panLosBtn, false);
        btnLosNew.setEnabled(true);
        transNew = false;
        txtNextAccNo.setEnabled(false);
        txtNextAccNo.setText("");
        tdtLastInstallDate.setEnabled(false);
        txtTotalAmountWrittenOff.setEnabled(false);
        if (observable.getEditCourtDetailsMap() != null && observable.getEditCourtDetailsMap().size() > 0) {
            btnCourtOrderSave.setVisible(true);
            enableDisableCourtDetails(false, false);
        } else {
            btnCourtOrderSave.setVisible(false);
            enableDisableCourtDetails(true, false);
        }
        txtEligibleCropAmt.setEnabled(false);
        tabLimitAmount.add(panSecurityDetails, "Security Details", 2);
    }//GEN-LAST:event_btnEditActionPerformed
    private void btneditActionPerformed() {
        observableBorrow.btnPressed = true;
        observable.createObject();
        observable.setActionType(ClientConstants.ACTIONTYPE_EDIT);
        popUp("Edit");
        authSignUI.setAuthEnableDisable(false);
        authSignUI.setAuthOnlyNewBtnEnable();
        authSignUI.setAllAuthInstEnableDisable(false);
        authSignUI.setAuthInstOnlyNewBtnEnable();
        poaUI.setAllPoAEnableDisable(false);
        setSanctionFacilityBtnsEnableDisable(false);
        ClientUtil.enableDisable(panCaseTableFields, false);
        btnCaseNew.setEnabled(true);
//        btnCancel.setEnabled(true);
        txtTotalShareAmount.setEnabled(false);
        txtTotalNoOfShare.setEnabled(false);
        enableDisableSalaryBtnsNew(true);
        txtSubsidyAmt.setEnabled(false);
        txtSubsidyAdjustedAmt.setEnabled(false);
        txtEnteredSubsidyAmt.setEnabled(false);
        enableDisableRebate(false);
        //added by rishad 26/03/2014 for restricting loan sanction amount at the time edit mode
        txtLimit_SD.setEnabled(false);
        enabledisableGoldStockData(); // Added by nithya on 07-03-2020 for KD-1379
    }
    
    private void enabledisableGoldStockData(){ // Added by nithya on 07-03-2020 for KD-1379
        if(observable.getRdoGoldSecurityStockExists().equalsIgnoreCase("Y")){
            rdoGoldSecurityExitsYesActionPerformed(null);
        }
    }
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Add your handling code here:
        // btnSave.setEnabled(false);
        //if condition is added by shihad for mantis 0010336 on 07.02.2015
        if (!ProxyParameters.BRANCH_ID.equals(TrueTransactMain.selBranch)) {
            ClientUtil.showMessageWindow("Interbranch not allowed for this screen...");
            return;
        }
        HashMap hashmap = new HashMap();
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
            if (tblBorrowerTabCTable != null && tblBorrowerTabCTable.getRowCount() > 0) {
                int row = tblBorrowerTabCTable.getRowCount();
                for (int i = 0; i < row; i++) {
                    String custid = CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(i, 1));
                    hashmap.put("CUST_ID", custid);
                    hashmap.put("MEMBER_NO", custid);
                    List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                    if (lst1 != null && lst1.size() > 0) {
                        ClientUtil.displayAlert("Customer is death marked please select another customerId");
                        return;
                    }
                }

            }
        }
        if (rdoSecurityDetails_Fully.isSelected()) {
            double depAmount = 0.0;
            double netWorth = 0.0;
            double memNetWorth = 0.0;
            double pledgeAmount = 0.0;
            double losAmount = 0.0;
            double vehicleNetworth=0.0;
            double valuOfGold = CommonUtil.convertObjToDouble(txtValueOfGold.getText()).doubleValue();
            for (int i = 0; i < tblSalary.getRowCount(); i++) {
                netWorth = netWorth + CommonUtil.convertObjToDouble(tblSalary.getValueAt(i, 5)).doubleValue();
                String custid = CommonUtil.convertObjToStr(tblSalary.getValueAt(i, 2));
                hashmap.put("CUST_ID", custid);
                hashmap.put("MEMBER_NO", custid);
                List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                if (lst1 != null && lst1.size() > 0) {
                    ClientUtil.displayAlert("Customer is death marked please select another customerId");
                    return;
                }
            }
            for (int j = 0; j < tblMemberType.getRowCount(); j++) {
                memNetWorth = memNetWorth + CommonUtil.convertObjToDouble(tblMemberType.getValueAt(j, 4)).doubleValue();
                String custid = CommonUtil.convertObjToStr(tblMemberType.getValueAt(j, 0));
                hashmap.put("CUST_ID", custid);
                hashmap.put("MEMBER_NO", custid);
                List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                if (lst1 != null && lst1.size() > 0) {
                    ClientUtil.displayAlert("Customer is death marked please select another customerId");
                    return;
                }
            }
            for (int k = 0; k < tblCollateral.getRowCount(); k++) {
                pledgeAmount = pledgeAmount + CommonUtil.convertObjToDouble(tblCollateral.getValueAt(k, 3)).doubleValue();
                String custid = CommonUtil.convertObjToStr(tblCollateral.getValueAt(k, 0));
                hashmap.put("CUST_ID", custid);
                hashmap.put("MEMBER_NO", custid);
                List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                if (lst1 != null && lst1.size() > 0) {
                    ClientUtil.displayAlert("Customer is death marked please select another customerId");
                    return;
                }
            }

            for (int l = 0; l < tblDepositDetails.getRowCount(); l++) {
                String depNo = CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(l, 1));
                String prodtype = CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(l, 0));
                String securityAmt = txtLimit_SD.getText();
                observable.setSecurityAmt(securityAmt);
                HashMap hmap = new HashMap();
                hmap.put("DEPOSIT_NO", depNo);
                List lst = null;
                List EditLst = null;
                if (prodtype.equals("TD") || prodtype.equals("Deposits")) {
                    //Modified by sreekrishnan
                    System.out.println("observable.getActionType()$@$@#$2"+observable.getActionType());
                    if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
                        lst = ClientUtil.executeQuery("getAvailableBalForDep", hmap);
                    }else{
                        lst = ClientUtil.executeQuery("getAvailableBalForDepEditMode", hmap);
                        EditLst = ClientUtil.executeQuery("getAvailableBalForDep", hmap);
                    }
                    if (lst != null && lst.size() > 0) {
                        hmap = (HashMap) lst.get(0);
                        depAmount = depAmount + CommonUtil.convertObjToDouble(hmap.get("AVAILABLE_BALANCE")).doubleValue();
                        hmap.put("MEMBER_NO", hmap.get("CUST_ID"));
                        List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                        if (lst1 != null && lst1.size() > 0) {
                            ClientUtil.displayAlert("Customer is death marked please select another customerId");
                            return;
                        }
                    }
                    if (EditLst != null && EditLst.size() > 0) {
                        hmap = (HashMap) EditLst.get(0);
                        depAmount = depAmount + CommonUtil.convertObjToDouble(hmap.get("AVAILABLE_BALANCE")).doubleValue();
                        hmap.put("MEMBER_NO", hmap.get("CUST_ID"));
                        List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                        if (lst1 != null && lst1.size() > 0) {
                            ClientUtil.displayAlert("Customer is death marked please select another customerId");
                            return;
                        }
                    }
                } else {
                    String mdsNo = CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(l, 1));
                    hashmap.put("CHITTAL_NO", mdsNo);

                    List lst1 = ClientUtil.executeQuery("getCustIdDeathChecking", hashmap);
                    if (lst1 != null && lst1.size() > 0) {
                        hashmap = (HashMap) lst1.get(0);
                        hashmap.put("MEMBER_NO", hashmap.get("CUST_ID"));
                        lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                        if (lst1 != null && lst1.size() > 0) {
                            ClientUtil.displayAlert("Customer is death marked please select another customerId");
                            return;
                        }
                    }
                    depAmount += CommonUtil.convertObjToDouble(tblDepositDetails.getValueAt(l, 3)).doubleValue();
                }
            }
            for (int m = 0; m < tblLosDetails.getRowCount(); m++) {
                losAmount = losAmount + CommonUtil.convertObjToDouble(tblLosDetails.getValueAt(m, 4)).doubleValue();
            }
            //added  by rishad 17/07/2017 for checking networth amount with sanctioned amount
            for (int j = 0; j < tblVehicleType.getRowCount(); j++) {
                vehicleNetworth = vehicleNetworth + CommonUtil.convertObjToDouble(tblVehicleType.getValueAt(j, 5)).doubleValue();
                String custid = CommonUtil.convertObjToStr(tblVehicleType.getValueAt(j, 0));
                hashmap.put("CUST_ID", custid);
                hashmap.put("MEMBER_NO", custid);
                List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                if (lst1 != null && lst1.size() > 0) {
                    ClientUtil.displayAlert("Customer is death marked please select another customerId");
                    return;
                }
            }
            //System.out.println("pledgeAmount=="+pledgeAmount+"valuOfGold=="+valuOfGold+"netWorth=="+netWorth+"memNetWorth=="+memNetWorth+"depAmount=="+depAmount+"losAmount=="+losAmount);    
            double tot = valuOfGold + netWorth + memNetWorth + pledgeAmount + depAmount + losAmount + vehicleNetworth;
            //System.out.println("tot=="+tot);
            double sanctionAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
            if (tot < sanctionAmt) {
                ClientUtil.displayAlert("Security Amount is lesser than the Sanctioned amount");
                return;
            }

        }
         if (lblAcctNo_Sanction_Disp.getText().length() > 0){
          HashMap existMap = new HashMap();
             existMap.put("ACCT_NUM", lblAcctNo_Sanction_Disp.getText());
             List lst = ClientUtil.executeQuery("getCountUnauthorizedTransaction", existMap);
             if (lst != null && lst.size() > 0) {
                existMap = (HashMap) lst.get(0);
                int count=CommonUtil.convertObjToInt(existMap.get("COUNT"));
                if(count>0){
                    ClientUtil.displayAlert("Transaction pending for Authorisation or Rejection!!!"); 
                    btnCancelActionPerformed(null);
                    return;
               }
           }
         }
         if (chkMobileBankingAD.isSelected() == true && txtMobileNo.getText().length() == 0) {
            ClientUtil.displayAlert("Mobile no should not be empty!!!");
         }
         //added by rishad 22/07/2015 for avoiding doubling issue
        CommonUtil comm = new CommonUtil();
        final JDialog loading = comm.addProgressBar();
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws InterruptedException /** Execute some operation */
            {
                if (viewType.equals("Delete")) {
                    saveAction();
                } else {
                    btnsaveActionPerformed();
                }
                return null;
            }
            @Override
            protected void done() {
                loading.dispose();
            }
        };
        worker.execute();
        loading.show();
        try {
            worker.get();
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        txtNextAccNo.setText("");
        txtNextAccNo.setEnabled(false);
    }//GEN-LAST:event_btnSaveActionPerformed
    private void btnsaveActionPerformed() {
        //observable.setAuthorizeNo();
        //        if (observable.getActionType()==ClientConstants.ACTIONTYPE_EDIT && loanType.equals("LTD")) {
        //            btnFacilitySavePressed();
        //            saveAction();
        //        } else
        String mandatoryMessage = "";
        mandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(), panSanctionAuthority);
        /* mandatoryMessage1 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
        TermLoanRB termLoanRB = new TermLoanRB();
        if (chkMoratorium_Given.isSelected() && (txtFacility_Moratorium_Period.getText().length() == 0)) {

            mandatoryMessage = mandatoryMessage + termLoanRB.getString("moratorium_Given_Warning");
            termLoanRB = null;
        }
        //if Gahan Entered pledge amount should be equal to loan sanction amount
        double loanAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
        //System.out.println("rdoSecurityDetails_Partly.isSelected()"+rdoSecurityDetails_Partly.isSelected());
        //jiby
//        if (observable.isTallyGahanSecurity(loanAmt, rdoSecurityDetails_Partly.isSelected())) {
//            mandatoryMessage = mandatoryMessage + termLoanRB.getString("gahanSecurity");
//        }
        //
        //ltd loan number not generator nut checking lien
        if (loanType.equals("LTD") && observable.getStrACNumber().length() == 0 && observable.getProductCategory().equals("OTHER_LOAN")) {
            String mainLimit = CommonUtil.convertObjToStr(txtLimit_SD.getText());
            if (mainLimitMarginValidation(mainLimit)) {
                return;
            }
            if (checkInterestRateForLTD()) {
                return;
            }
        }
        //validation for OTS

        if (chkOTS.isSelected()) {
            StringBuffer buffer = new StringBuffer();
            if (observable.getDeleteCourtDetailsMap() == null || observable.getDeleteCourtDetailsMap().isEmpty()) {
                if (CommonUtil.convertObjToDouble(txtTotalAmountWrittenOff.getText()).doubleValue()
                        != CommonUtil.convertObjToDouble(txtPrincipalAmount.getText()).doubleValue() + CommonUtil.convertObjToDouble(txtInterestAmount.getText()).doubleValue()
                        + CommonUtil.convertObjToDouble(txtPenalInterestAmount.getText()).doubleValue() + CommonUtil.convertObjToDouble(txtChargeAmount.getText()).doubleValue()) {
                    ClientUtil.showMessageWindow("Written Off Amount Should be match with combination of principal ,interest,penal interest,charges due");
                    return;
                }

                buffer.append(new MandatoryCheck().checkMandatory(getClass().getName(), panCourtOrder).toString());
                buffer.append(new MandatoryCheck().checkMandatory(getClass().getName(), panCourtRepaymentDetails).toString());
                if (buffer != null && buffer.length() > 0) {
                    displayAlert(buffer.toString());
                    return;
                }
            }
        }
        //for renew   od
        txtLimit_SDFocusLostOD(false);
        //
        //check sanctionDetails change or not if change delete repayment schedule
        if (sanctionDetailsBasedRepayment()) {
            return;
        }

//        mandatoryMessage = mandatoryMessage + new MandatoryCheck().checkMandatory(getClass().getName(), panSanctionDetails_Sanction);
        /* mandatoryMessage1 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/

//        mandatoryMessage = mandatoryMessage + new MandatoryCheck().checkMandatory(getClass().getName(), panSanctionDetails_Mode);
        /* mandatoryMessage2 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
        //System.out.println("mandatoryMessage.length()@@@@@@@@@ " + mandatoryMessage.length());
        int sanctionRow = 0;
        //        tblSanctionDetails.getSelectedRow();
        if ((sanctionRow != -1 || enableControls) && mandatoryMessage.length() > 0) {
            displayAlert(mandatoryMessage);
            return;
        } else {
            //check repay detail delete or not
            if (!((observable.getTxtLimit_SD()).equals(txtLimit_SD.getText()))
                    || !((observable.getTxtNoInstallments()).equals(txtNoInstallments.getText()))
                    || !(((String) cboRepayFreq.getSelectedItem()).equals(observable.getCboRepayFreq()))
                    || !((observable.getTdtFDate()).equals(tdtFDate.getDateValue()))) {


                accNumMap.put(lblAcctNo_Sanction_Disp.getText(), lblAcctNo_Sanction_Disp.getText());
            }
            //end checking
            boolean periodFlag = false;
            boolean limitFlag = false;
            if (loanType.equals("OTHERS")
                    || observable.getProductCategory().equals("PADDY_LOAN") || observable.getProductCategory().equals("MDS_LOAN")) {
                if (!(cboRepayFreq.getSelectedItem().equals("User Defined") || cboRepayFreq.getSelectedItem().equals("Lump Sum")) && !observable.checkFacilityPeriod(txtNoInstallments.getText(), txtFacility_Moratorium_Period.getText())) {
                    observable.decoratePeriod();
                    mandatoryMessage = mandatoryMessage.concat("The Limit Period must fall within " + observable.getMinDecLoanPeriod() + " and  " + observable.getMaxDecLoanPeriod());
                    periodFlag = false;
                } else if ((cboRepayFreq.getSelectedItem().equals("User Defined") || cboRepayFreq.getSelectedItem().equals("Lump Sum")) && !observable.checkFacilityPeriod(DateUtil.getDateMMDDYYYY(tdtFDate.getDateValue()), DateUtil.getDateMMDDYYYY(tdtTDate.getDateValue()))) {
                    observable.decoratePeriod();
                    mandatoryMessage = mandatoryMessage.concat("The Limit Period must fall within " + observable.getMinDecLoanPeriod() + " and  " + observable.getMaxDecLoanPeriod());
                    periodFlag = false;
                } else {
                    periodFlag = true;
                }
            } else {
                periodFlag = true;
            }
            if (loanType.equals("OTHERS")
                    || observable.getProductCategory().equals("PADDY_LOAN") || observable.getProductCategory().equals("MDS_LOAN")) {
                if (!observable.checkLimitValue(txtLimit_SD.getText())) {
                    observable.setTxtLimit_SD("");
                    txtLimit_SD.setText(observable.getTxtLimit_SD());
                    mandatoryMessage = mandatoryMessage.concat("\nThe Limit value must fall within " + observable.getMinLimitValue().toString() + " and  " + observable.getMaxLimitValue().toString());
                    limitFlag = false;
                } else {
                    limitFlag = true;
                }
            } else {
                limitFlag = true;
            }
        }


        mandatoryMessage = mandatoryMessage + new MandatoryCheck().checkMandatory(getClass().getName(), panBorrowProfile_CustName);
        /* mandatoryMessage1 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/

        mandatoryMessage = mandatoryMessage + new MandatoryCheck().checkMandatory(getClass().getName(), panFDAccount);
        /* mandatoryMessage2 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
       // //System.out.println("mandatoryMessage.length()@@@@@@@@@11111111 " + mandatoryMessage.length());
        mandatoryMessage = mandatoryMessage + new MandatoryCheck().checkMandatory(getClass().getName(), panFDDate);
        /* mandatoryMessage3 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
       // //System.out.println("mandatoryMessage.length()@@@@@@@@@22222222222 " + mandatoryMessage.length());
        mandatoryMessage = mandatoryMessage + isJointAcctHavingAtleastOneCust();
       // //System.out.println("mandatoryMessage.length()@@@@@@@@@333333333 " + mandatoryMessage.length());
        if (productBasedValidation()) {
            mandatoryMessage = mandatoryMessage + new TermLoanMRB().getString("rdoMultiDisburseAllow_Yes");
        }
      //  //System.out.println("mandatoryMessage.length()@@@@@@@@@ 4444444" + mandatoryMessage.length());
        if (observable.getStrACNumber().length() > 0) {
            mandatoryMessage = mandatoryMessage + new MandatoryCheck().checkMandatory(getClass().getName(), panProd_IM);
            mandatoryMessage = mandatoryMessage + isInterestDetailsExistForThisAcct();
            mandatoryMessage = mandatoryMessage + validateOtherDetailsMandatoryFields();
        }
       // //System.out.println("mandatoryMessage.length()@@@@@@@@@ 555555555" + mandatoryMessage.length());
        String strFacilityType = getCboTypeOfFacilityKeyForSelected();

        //added by sreekrishnan for daily loan - agent collection
        if(CommonUtil.convertObjToStr(cboAgentId.getSelectedItem())!=null && !CommonUtil.convertObjToStr(cboAgentId.getSelectedItem()).equals("")){
            if(!DirectRepayment_Yes.isSelected() && !DirectRepayment_No.isSelected()){
                mandatoryMessage = mandatoryMessage + "Please select Agent Collection accounts!! or avoid Agent ID!!";
            }else{
                if(DirectRepayment_No.isSelected()){
                   if(cboDirectRepaymentProdType.getSelectedItem()==null){
                        mandatoryMessage = mandatoryMessage + "Please select Repayment product type!!";    
                   }else if(cboDirectRepaymentProdId.getSelectedItem()==null || cboDirectRepaymentProdId.getSelectedItem().equals("---Select---")){
                        mandatoryMessage = mandatoryMessage + "Please select Repayment product ID!!";    
                   }else if(txtDirectRepaymentAcctHead.getText().equals("") && txtDirectRepaymentAcctHead.getText().length()<=0){
                        mandatoryMessage = mandatoryMessage + "Please select Repayment product Account Head!!";     
                   }else if(!txtDirectRepaymentAcctHead.getText().equals("GL") && txtDirectRepaymentAcctNo.getText().equals("")
                           && txtDirectRepaymentAcctNo.getText().length()<=0){
                       mandatoryMessage = mandatoryMessage +"Please select Repayment product Account!!";  ;
                   }
                   
                }
            }
        }
        if (mandatoryMessage.length() > 0) {
            displayAlert(mandatoryMessage);
            return;
        }
        if(observable.isDailyLoan()){
            if(!DirectRepayment_Yes.isSelected() && !DirectRepayment_No.isSelected()){
                 displayAlert("Please select Direct Repayment Type.");
                 return;
            }
             if(DirectRepayment_No.isSelected()){
                 String dirProdType=CommonUtil.convertObjToStr(((ComboBoxModel) cboDirectRepaymentProdType.getModel()).getKeyForSelected());
                 if(dirProdType==null || dirProdType.equals("")){
                     displayAlert("Enter Direct Repayment Prod Type.");
                     return;
                 }
                 String dirProdId=CommonUtil.convertObjToStr( cboDirectRepaymentProdType.getSelectedItem());
                 if(dirProdType!=null && !dirProdType.equals("GL")){
                     if(dirProdId==null || dirProdId.equals("")){
                         displayAlert("Enter Direct Repayment Prod Id.");
                         return;
                     }
                 }
                 String dirAccHead=CommonUtil.convertObjToStr(txtDirectRepaymentAcctHead.getText());
                 if(dirAccHead==null || dirAccHead.equals("")){
                     displayAlert("Enter Direct Repayment Account Head.");
                     return;
                 }
                 String dirAccNo=CommonUtil.convertObjToStr(txtDirectRepaymentAcctNo.getText());
                 if(dirProdType!=null && !dirProdType.equals("GL")){
                     if(dirAccNo==null || dirAccNo.equals("")){
                         displayAlert("Enter Direct Repayment Account Number.");
                         return;
                     }
                 }
             }
        }
        if(cboRepayType.getSelectedItem()==null && observable.isDailyLoan()){
                    cboRepayType.setSelectedItem("User Defined");
                }
        if (transNew && !(strFacilityType.equals("CC") || strFacilityType.equals("OD"))) {
            btnRepayment_NewActionPerformed();
            btnEMI_CalculateActionPerformed();
            btnRepayment_SaveActionPerformed();

        }
        updateInterest = btnInterestMaintenanceSave.isEnabled();
        updateRepayment = btnRepayment_Save.isEnabled();
        if (isTablesInEditMode(true) && checkFieldsWhenMainSavePressed() && checkForSecurityValue()) {
            if (isTablesInEditMode(false) && allCTablesNotNull() && checkForSecurityValue()
                    && repayTableNotNull() && repayTableLimitCheckingRule()) {
                finalizeCharges();
                // if(transNew && !(strFacilityType.equals("CC") || strFacilityType.equals("OD"))){
                if (transNew && !(strFacilityType.equals("CC"))) {
                    insertTransactionPart();
                }
                //KDSA - 648 code made by Kannan AR
                if (observable.getNewTransactionMap() != null && observable.getNewTransactionMap().size() > 0) {
                	HashMap chgMap = new HashMap();
                	double totChgAmt = 0.0;
                	double limit = 0.0;
                	for (int i = 0; i < chargelst.size(); i++) {
                    	chgMap = (HashMap) chargelst.get(i);
                    	totChgAmt = totChgAmt + CommonUtil.convertObjToDouble(chgMap.get("CHARGE_AMOUNT"));
                	}
                	HashMap appMap = new HashMap();
                	appMap.put("value", (String) ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
                	List appList = ClientUtil.executeQuery("selectAppropriatTransaction", appMap);
                	appMap = (HashMap) appList.get(0);
                	limit = CommonUtil.convertObjToDouble(observable.getNewTransactionMap().get("LIMIT"));
                	if (limit>0.0 && appMap != null && appMap.containsKey("1_PRIORITY") && CommonUtil.convertObjToStr(appMap.get("1_PRIORITY")).equals("CHARGES")) {
                        if ((limit - totChgAmt) <= 0) {
                            ClientUtil.showAlertWindow("Cannot proceed .. charges debited is more than amount disbursed !!!");
                            observable.setNewTransactionMap(null);
                            return;
                        }
                    }
                }
                if ((observable.getNewTransactionMap() == null || observable.getNewTransactionMap().size() <= 0)&&(observable.getActionType() != ClientConstants.ACTIONTYPE_EDIT )) {
                    chktrans = true;
                }
                if (chktrans != true) {
                    saveAction();
                    chkok = false;
                } else {
                    int yesNo2 = 0;
                    String[] options = {"Yes", "No"};
                    yesNo2 = COptionPane.showOptionDialog(null, "Do you want to create loan account without transaction?", CommonConstants.WARNINGTITLE,
                            COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                            null, options, options[0]);
                    if (yesNo2 == 0) {
                        com.see.truetransact.clientutil.ttrintegration.TTIntegration ttIntgration = null;
                        saveAction();
                        chkok = false;
                    } else {
                        ClientUtil.showAlertWindow("Transaction processing aborted");
                        chkok = true;
                    }
                }
            }
        }
    }

    
    private double getTotalChargeAmount() {
        double totalLoanAmount = 0.0;
        double totalCharge = 0.0;
        double serviceTax = CommonUtil.convertObjToDouble(lblServiceTaxval.getText());
        if (table.getRowCount() > 0) {
            for (int i = 0; i < table.getRowCount(); i++) {
                if(table.getValueAt(i, 0).equals(true)){
                    totalCharge += CommonUtil.convertObjToDouble(table.getValueAt(i, 3));
                }
            }
        }
        totalLoanAmount = totalCharge + serviceTax ;
        return totalLoanAmount ;
    }
    


    
    
    //Added By Suresh
    private void finalizeCharges() {
        HashMap chargeMap = new HashMap();
        if (chargelst != null && chargelst.size() > 0) {
            for (int i = 0; i < chargelst.size(); i++) {
                String accHead = "";
                chargeMap = (HashMap) chargelst.get(i);
                accHead = CommonUtil.convertObjToStr(chargeMap.get("CHARGE_ID"));
                //System.out.println("$#@@$ accHead" + accHead);
                for (int j = 0; j < table.getRowCount(); j++) {
                    //System.out.println("$#@@$ accHead inside table " + table.getValueAt(j, 1));
                    if (CommonUtil.convertObjToStr(table.getValueAt(j, 1)).equals(accHead) && !((Boolean) table.getValueAt(j, 0)).booleanValue()) {
                        chargelst.remove(i--);
                    } else {
                        if (CommonUtil.convertObjToStr(table.getValueAt(j, 1)).equals(accHead) /*&& CommonUtil.convertObjToStr(table.getValueAt(j, 4)).equals("Y")*/) {
                            String chargeAmt = CommonUtil.convertObjToStr(table.getValueAt(j, 3));
                            chargeMap.put("CHARGE_AMOUNT", String.valueOf(chargeAmt));

                        }
                    }
                }
            }
            //System.out.println("#$#$$# final chargelst:" + chargelst);
            observable.setChargelst(chargelst);
        }

    }

    private void insertTransactionPart() {
        String prodId = CommonUtil.convertObjToStr(((ComboBoxModel) cboProductId.getModel()).getKeyForSelected());
        System.out.println("prodIdprodIdprodId" + prodId);
        HashMap supMap = new HashMap();
        supMap.put("PROD_ID", prodId);
        List lstSupName = ClientUtil.executeQuery("getProdIdForSelectedItem", supMap);
        HashMap supMap1 = new HashMap();
        double maxPay = 0.0;
        if(lstSupName!=null && lstSupName.size()>0){
        	supMap1 = (HashMap) lstSupName.get(0);
        }
        maxPay=CommonUtil.convertObjToDouble(supMap1.get("MAX_AMT_OF_CASH_PAYMENT"));
        double loanAmount=CommonUtil.convertObjToDouble(txtLimit_SD.getText());
        HashMap singleAuthorizeMap = new HashMap();
        java.util.ArrayList arrList = new java.util.ArrayList();
        HashMap authDataMap = new HashMap();
        arrList.add(authDataMap);
        if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW || observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT && observable.getAvailableBalance() > 0) {
        {  
            if(loanRenewal==false && !closingInProgress){
            if(loanAmount>maxPay){
            String[] debitType = {"Transfer"};
            int option3 = 0;
            if (option3 == 0) {
                String transType = "";
                //                //System.out.println("!!! transType :"+transType);
                while (CommonUtil.convertObjToStr(transType).length() == 0) {
                    transType = (String) COptionPane.showInputDialog(null, "Select Transaction Type", "Transaction type", COptionPane.QUESTION_MESSAGE, null, debitType, "");
                    if (CommonUtil.convertObjToStr(transType).length() > 0) {
                        authDataMap.put("TRANSACTION_PART", "TRANSACTION_PART");
                        authDataMap.put("TRANS_TYPE", transType.toUpperCase());
                        String strFacilityType = getCboTypeOfFacilityKeyForSelected();
                        if (rdoMultiDisburseAllow_Yes.isSelected() || strFacilityType.equals("OD")) {
                            String remarks = "";
                            do {
                                remarks = CommonUtil.convertObjToStr(COptionPane.showInputDialog(this, "Enter Transaction Amount"));
                                //  if(!strFacilityType.equals("OD"))
                                {
                                    authDataMap.put("MULTIDISBURSE", "Y");
                                }
                            } while (remarks.length() == 0);
                            authDataMap.put("LIMIT", remarks);
                        } else {
                            authDataMap.put("LIMIT", txtLimit_SD.getText());
                        }
                        if (CommonUtil.convertObjToStr(transType.toUpperCase()).equals("CASH")) {
                            boolean flag = true;
                            do {
                                String tokenNo = COptionPane.showInputDialog(this, resourceBundle.getString("REMARK_CASH_TRANS"));
                                if (tokenNo != null && tokenNo.length() > 0) {
                                    flag = tokenValidation(tokenNo);
                                    chktrans=false;
                                    chkok=false;
                                } 
//                                else {
//                                    ClientUtil.showMessageWindow("Transaction Not Created");
//                                    authDataMap.remove("TRANSACTION_PART");
//                                    observable.setNewTransactionMap(null);
//                                    flag = true;
//                                    chktrans = true;
//                                }
                                if (flag == false) {
                                    ClientUtil.showAlertWindow("Token is invalid or not issued for you. Please verify.");
                                } else {
                                    authDataMap.put("TOKEN_NO", tokenNo);
                                    if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
                                        if (loannaration != null) {
                                            loannaration = loannaration + oldloanAmt;
                                            oldloanAmt = 0;
                                            authDataMap.put("OLD_LOAN_NARRATION", loannaration);
                                        }
                                    }
                                }
                          } while (!flag);
                        } else if (CommonUtil.convertObjToStr(transType.toUpperCase()).equals("TRANSFER")) {
                            boolean flag = true;
                            do {
                                String sbAcNo = null;
                                String prodType = null;
                                HashMap acctDetailsMap = firstEnteredActNo();
                                if(acctDetailsMap!= null && acctDetailsMap.size()>0 && acctDetailsMap.containsKey("ACT_NUM") && acctDetailsMap.containsKey("PROD_TYPE")){
                                    sbAcNo = CommonUtil.convertObjToStr(acctDetailsMap.get("ACT_NUM"));
                                    prodType = CommonUtil.convertObjToStr(acctDetailsMap.get("PROD_TYPE"));
                                }
                                if (sbAcNo != null && sbAcNo.length() > 0) {
                                    flag = checkingActNo(sbAcNo,prodType);
                                    if (flag == false && finalChecking == false) {
                                        ClientUtil.showAlertWindow("Account No is invalid, Please enter correct no");
                                    } else {
                                        authDataMap.put("CR_ACT_NUM", sbAcNo);
                                        authDataMap.put("PROD_TYPE", prodType);
                                        if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
                                            if (loannaration != null) {
                                                loannaration = loannaration + oldloanAmt;
                                                oldloanAmt = 0;
                                                authDataMap.put("OLD_LOAN_NARRATION", loannaration);
                                            }
                                        }
                                        chkok = false;
                                    }
                                    finalChecking = false;
                                } else {
                                    ClientUtil.showMessageWindow("Transaction Not Created");
                                    flag = true;
                                    authDataMap.remove("TRANSACTION_PART");
                                    observable.setNewTransactionMap(null);
                                    chktrans = true;
                                }
                            } while (!flag);
                        }
                        observable.setNewTransactionMap(authDataMap);
                    } else {
                        transType = "Cancel";
                       chktrans = true;
                    }
                }
            }
            }
            else{
                
           String[] debitType = {"Cash", "Transfer"};
            int option3 = 0;
            if (option3 == 0) {
                String transType = "";
                //                //System.out.println("!!! transType :"+transType);
                while (CommonUtil.convertObjToStr(transType).length() == 0) {
                    transType = (String) COptionPane.showInputDialog(null, "Select Transaction Type", "Transaction type", COptionPane.QUESTION_MESSAGE, null, debitType, "");
                    if (CommonUtil.convertObjToStr(transType).length() > 0) {
                        authDataMap.put("TRANSACTION_PART", "TRANSACTION_PART");
                        authDataMap.put("TRANS_TYPE", transType.toUpperCase());
                        String strFacilityType = getCboTypeOfFacilityKeyForSelected();
                        if (rdoMultiDisburseAllow_Yes.isSelected() || strFacilityType.equals("OD")) {
                            String remarks = "";
                            do {
                                remarks = CommonUtil.convertObjToStr(COptionPane.showInputDialog(this, "Enter Transaction Amount"));
                                //  if(!strFacilityType.equals("OD"))
                                {
                                    authDataMap.put("MULTIDISBURSE", "Y");
                                }
                            } while (remarks.length() == 0);
                            authDataMap.put("LIMIT", remarks);
                        } else {
                            authDataMap.put("LIMIT", txtLimit_SD.getText());
                        }
                        if (CommonUtil.convertObjToStr(transType.toUpperCase()).equals("CASH")) {
                            boolean flag = true;
                            do {
                                String tokenNo = COptionPane.showInputDialog(this, resourceBundle.getString("REMARK_CASH_TRANS"));
                                if (tokenNo != null && tokenNo.length() > 0) {
                                    flag = tokenValidation(tokenNo);
                                    chktrans=false;
                                    chkok=false;
                                } 
//                                else {
//                                    ClientUtil.showMessageWindow("Transaction Not Created");
//                                    authDataMap.remove("TRANSACTION_PART");
//                                    observable.setNewTransactionMap(null);
//                                    flag = true;
//                                    chktrans = true;
//                                }
                                if (flag == false) {
                                    ClientUtil.showAlertWindow("Token is invalid or not issued for you. Please verify.");
                                } else {
                                    authDataMap.put("TOKEN_NO", tokenNo);
                              if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")){
                                   if(loannaration!=null)
                                    {
                                     loannaration=loannaration+oldloanAmt;
                                     oldloanAmt=0;
                                     authDataMap.put("OLD_LOAN_NARRATION",loannaration);
                                    }}
                                }
                          } while (!flag);
                        } else if (CommonUtil.convertObjToStr(transType.toUpperCase()).equals("TRANSFER")) {
                            boolean flag = true;
                            do {
                                String sbAcNo = null;
                                String prodType = null;
                                HashMap acctDetailsMap = firstEnteredActNo();
                                if(acctDetailsMap!= null && acctDetailsMap.size()>0 && acctDetailsMap.containsKey("ACT_NUM") && acctDetailsMap.containsKey("PROD_TYPE")){
                                    sbAcNo = CommonUtil.convertObjToStr(acctDetailsMap.get("ACT_NUM"));
                                    prodType = CommonUtil.convertObjToStr(acctDetailsMap.get("PROD_TYPE"));
                                }
                                if (sbAcNo != null && sbAcNo.length() > 0) {
                                    flag = checkingActNo(sbAcNo,prodType);
                                    if (flag == false && finalChecking == false) {
                                        ClientUtil.showAlertWindow("Account No is invalid, Please enter correct no");
                                    } else {
                                        authDataMap.put("CR_ACT_NUM", sbAcNo);
                                        authDataMap.put("PROD_TYPE", prodType);
                                        if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
                                            if (loannaration != null) {
                                                loannaration = loannaration + oldloanAmt;
                                                oldloanAmt = 0;
                                                authDataMap.put("OLD_LOAN_NARRATION", loannaration);
                                            }
                                        }
                                        chkok = false;
                                    }
                                    finalChecking = false;
                                } else {
                                    ClientUtil.showMessageWindow("Transaction Not Created");
                                    flag = true;
                                    authDataMap.remove("TRANSACTION_PART");
                                    observable.setNewTransactionMap(null);
                                    chktrans = true;
                                }
                            } while (!flag);
                        }
                        observable.setNewTransactionMap(authDataMap);
                    } else {
                        transType = "Cancel";
                        chktrans = true;
                    }
                }
            }}
        } //added by rishad 01/09/2016 for loan renewal purpose
            else {
                String[] debitType = {"Transfer"};
                int option3 = 0;
                if (option3 == 0) {
                    String transType = "";
                    //                //System.out.println("!!! transType :"+transType);
                    while (CommonUtil.convertObjToStr(transType).length() == 0) {
                        transType = (String) COptionPane.showInputDialog(null, "Select Transaction Type", "Transaction type", COptionPane.QUESTION_MESSAGE, null, debitType, "");
                        if (CommonUtil.convertObjToStr(transType).length() > 0) {
                            authDataMap.put("TRANSACTION_PART", "TRANSACTION_PART");
                            authDataMap.put("TRANS_TYPE", transType.toUpperCase());
                            String strFacilityType = getCboTypeOfFacilityKeyForSelected();
                            authDataMap.put("LOAN_RENEWAL", "LOAN_RENEWAL");
                            authDataMap.put("OLD_LOAN_AMT", oldloanAmt);
                            authDataMap.put("OLD_LOAN_NO",oldLoanNo);
                            authDataMap.put("LIMIT", txtLimit_SD.getText());
                            //System.out.println("authDataMap :: " + authDataMap);
                            double totalChargeAmt = getTotalChargeAmount();
                            double totalLoanAmt = totalChargeAmt  + oldloanAmt;
                            if (CommonUtil.convertObjToDouble(txtLimit_SD.getText()) < totalLoanAmt) {
                                ClientUtil.displayAlert("Sanction Amount is less than charges \nand old loan closing amount "
                                        + ".\n Santion Amount : " + txtLimit_SD.getText() + "\n Old loan closing amount : " + oldloanAmt + "\n Total charge : " + totalChargeAmt);
                                btncancelActionPerformed();
                                return;
                            }
                            if (CommonUtil.convertObjToStr(transType.toUpperCase()).equals("TRANSFER")) {
                                boolean flag = true;
                                boolean checkingRequired = true;
                                do {
                                    String sbAcNo = null;
                                    String prodType = null;
                                    if (strFacilityType.equals("OD")) {
                                        sbAcNo = "NO_TRANSACTION_TO_SB";
                                        prodType = "LOANS_PROD";
                                        checkingRequired = false;
                                        authDataMap.put("LIMIT", oldloanAmt);
                                    } else if (loanReceiptInRenewal && !strFacilityType.equals("OD")) {
                                        sbAcNo = "LOAN_RECEIPT";
                                        prodType = "LOANS_PROD";
                                        checkingRequired = false;
                                    } else {
                                    checkingRequired = true;    
                                    HashMap acctDetailsMap = firstEnteredActNo();
                                    if (acctDetailsMap != null && acctDetailsMap.size() > 0 && acctDetailsMap.containsKey("ACT_NUM") && acctDetailsMap.containsKey("PROD_TYPE")) {
                                        sbAcNo = CommonUtil.convertObjToStr(acctDetailsMap.get("ACT_NUM"));
                                        prodType = CommonUtil.convertObjToStr(acctDetailsMap.get("PROD_TYPE"));
                                    }
                                    }
                                    if (sbAcNo != null && sbAcNo.length() > 0) {
                                        flag = checkingActNo(sbAcNo,prodType); 
                                        flag = true;
                                        if(!checkingRequired){
                                            finalChecking =  true;
                                        }
                                        if (flag == false && finalChecking == false) {
                                            ClientUtil.showAlertWindow("Account No is invalid, Please enter correct no");
                                        } else {
                                            authDataMap.put("CR_ACT_NUM", sbAcNo);
                                            authDataMap.put("PROD_TYPE", prodType);
                                            authDataMap.put("RENWAL_ACT_NUM", suspenseActNum);
                                            authDataMap.put("RENWAl_PROD_TYPE", "SA");
                                           // if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y")) {
                                                if (loannaration != null) {
                                                    loannaration = loannaration + oldloanAmt;
                                                    oldloanAmt = 0;
                                                    authDataMap.put("OLD_LOAN_NARRATION", loannaration);
                                                }
                                            //}
                                            chkok = false;
                                        }
                                        finalChecking = false;
                                    } else {
                                        ClientUtil.showMessageWindow("Transaction Not Created");
                                        flag = true;
                                        authDataMap.remove("TRANSACTION_PART");
                                        observable.setNewTransactionMap(null);
                                        chktrans = true;
                                    }
                                } while (!flag);
                            }
                            observable.setNewTransactionMap(authDataMap);
                        } else {
                            transType = "Cancel";
                            chktrans = true;
                        }
                    }
                }
            }
        }
            //added by rishad 01/09/2016 for loan renewal purpose
        }
    }
    

    private boolean checkingActNo(String sbAcNo, String prodType) {
        boolean flag = false;
        List mapDataList ;
        HashMap existingMap = new HashMap();
        existingMap.put("ACT_NUM", sbAcNo.toUpperCase());
        if(prodType.equals("AB")){
           mapDataList = ClientUtil.executeQuery("getValidateOtherBankAct", existingMap); 
        }else{           
           mapDataList = ClientUtil.executeQuery("getAccNoDet", existingMap); 
        }
        //System.out.println("#### mapDataList :" + mapDataList);
        if (mapDataList != null && mapDataList.size() > 0) {
            existingMap = (HashMap) mapDataList.get(0);
            if(existingMap != null && !ProxyParameters.BRANCH_ID.equals(CommonUtil.convertObjToStr(existingMap.get("BRANCH_CODE")))){
                Date selectedBranchDt = ClientUtil.getOtherBranchCurrentDate(CommonUtil.convertObjToStr(existingMap.get("BRANCH_CODE")));
                Date currentDate = ClientUtil.getCurrentDate();
                System.out.println("selectedBranchDt : "+selectedBranchDt + " currentDate : "+currentDate);
                if(selectedBranchDt == null){
                    ClientUtil.displayAlert("BOD is not completed for the selected branch " +"\n"+"Interbranch Transaction Not allowed");
                    flag = false;
                    finalChecking = true;
                }
//                else if(DateUtil.dateDiff(currentDate, selectedBranchDt)!=0){ 
//                    ClientUtil.displayAlert("Application Date is different in the Selected branch " +"\n"+"Interbranch Transaction Not allowed");
//                    flag = false;
//                    finalChecking = true;
//                } 
                else {
                    System.out.println("Continue for interbranch trasactions ...");
                    String[] obj5 = {"Proceed", "ReEnter"};
                    chktrans = false;
                    int option4 = COptionPane.showOptionDialog(null, ("Please check whether Account No, Name correct or not " + "\nOperative AcctNo is : " + CommonUtil.convertObjToStr((existingMap.get("Account Number") == null) ? existingMap.get("ACCOUNT NUMBER") : existingMap.get("Account Number")) + "\nCustomer Name :" + CommonUtil.convertObjToStr((existingMap.get("Customer Name") == null) ? existingMap.get("CUSTOMER NAME") : existingMap.get("Customer Name"))), ("Transaction Part"),
                    COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj5, obj5[0]);
                    if (option4 == 0) {
                        flag = true;
                    } else {
                        flag = false;
                    }
                }
            } else{
                String[] obj5 = {"Proceed", "ReEnter"};
                chktrans = false;
                int option4 = COptionPane.showOptionDialog(null, ("Please check whether Account No, Name correct or not " + "\nOperative AcctNo is : " + CommonUtil.convertObjToStr((existingMap.get("Account Number") == null) ? existingMap.get("ACCOUNT NUMBER") : existingMap.get("Account Number")) + "\nCustomer Name :" + CommonUtil.convertObjToStr((existingMap.get("Customer Name") == null) ? existingMap.get("CUSTOMER NAME") : existingMap.get("Customer Name"))), ("Transaction Part"),
                COptionPane.YES_NO_CANCEL_OPTION, COptionPane.QUESTION_MESSAGE, null, obj5, obj5[0]);
                if (option4 == 0) {
                    flag = true;
                } else {
                    flag = false;
                }
            }
        }
        return flag;
    }

    private HashMap firstEnteredActNo() {
//        String sbAcNo = COptionPane.showInputDialog(this, resourceBundle.getString("REMARK_TRANSFER_TRANS"));
        HashMap acctDetailsMap = new HashMap();
        String otherBankRequired = "N";
        HashMap transMap =  new HashMap();
        transMap.put("PROD_ID", ((ComboBoxModel) cboProductId.getModel()).getKeyForSelected().toString());  
        List transList = ClientUtil.executeQuery("getOtherBankTransactionRequiredForLoan", transMap);
        if (transList != null && transList.size() > 0) {
            transMap = (HashMap) transList.get(0);
            otherBankRequired = CommonUtil.convertObjToStr(transMap.get("INCLUDE_OTHERBANK_TRANS"));
        } 
        if(otherBankRequired.equals("Y")){
          acctsearch = new AcctSearchUI(true);  
        }else{
        acctsearch = new AcctSearchUI();
        }
        acctsearch.show();
        String sbAcNo = acctsearch.getAccountNo();
        String prodType = acctsearch.getProdType();
        System.out.println("prodType" + prodType);
        System.out.println("sbAcNo"+sbAcNo);
        acctDetailsMap.put("ACT_NUM", sbAcNo);
        acctDetailsMap.put("PROD_TYPE", prodType);
        return acctDetailsMap;
    }
    private boolean tokenValidation(String tokenNo) {
        boolean tokenflag = false;
        HashMap tokenWhereMap = new HashMap();// Separating Serias No and Token No
        char[] chrs = tokenNo.toCharArray();
        StringBuffer seriesNo = new StringBuffer();
        int i = 0;
        for (int j = chrs.length; i < j; i++) {
            if (Character.isDigit(chrs[i])) {
                break;
            } else {
                seriesNo.append(chrs[i]);
            }
        }
        tokenWhereMap.put("SERIES_NO", seriesNo.toString());
        tokenWhereMap.put("TOKEN_NO", CommonUtil.convertObjToInt(tokenNo.substring(i)));
        tokenWhereMap.put("USER_ID", ProxyParameters.USER_ID);
        tokenWhereMap.put("BRANCH_ID", ProxyParameters.BRANCH_ID);
        tokenWhereMap.put("CURRENT_DT", ClientUtil.getCurrentDate());
        List lst = ClientUtil.executeQuery("validateTokenNo", tokenWhereMap);
        if (((Integer) lst.get(0)).intValue() == 0) {
            tokenflag = false;
        } else {
            tokenflag = true;
        }
        return tokenflag;
    }

    private void saveAction() {

        if (!viewType.equals("Delete")) {
            updateOBFields();
        }
        if (observable.getStrACNumber().length() == 0 && loanType.equals("LTD") && observable.getProductCategory().equals("OTHER_LOAN")) {
            observable.setLTDSecurityDetails();
        }

        //	if (updateRecords) {
        //            rowFacilityTabFacility = observable.addSanctionFacilityTab(rowSanctionFacility, updateSanctionFacility, updateSanctionMain, rowSanctionMain, rowFacilityTabSanction);
        ////        }
        //            rowFacilityTabSanction = observable.addSanctionMainTab(rowSanctionMain,  updateSanctionMain);
        ////        if (updateSanctionFacility) {
        //            observable.addFacilityDetails(rowFacilityTabSanction, rowFacilityTabFacility);
        //        }
        observable.doAction(1);

        //        super.removeEditLock(lblBorrowerNo_2.getText()); remove edit lock by abi for authorize only remove the lock
        if (observable.getResult() == ClientConstants.ACTIONTYPE_FAILED) {
            observable.setResultStatus();
            return;
        } else {
            if (observable.getProxyReturnMap() != null && observable.getProxyReturnMap().containsKey("ACCTNO")) {
                String actNum = (String) observable.getProxyReturnMap().get("ACCTNO");

                int yesNo1 = 0;
                String[] options = {"Yes", "No"};
                yesNo1 = COptionPane.showOptionDialog(null, "Do you want to print LoanBond?", CommonConstants.WARNINGTITLE,
                        COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                        null, options, options[0]);
                //System.out.println("#$#$$ yesNo : " + yesNo1);
                if (yesNo1 == 0) {
                    com.see.truetransact.clientutil.ttrintegration.TTIntegration ttIntgration = null;
                    HashMap reportTransIdMap = new HashMap();
                    reportTransIdMap.put("LoanNo", actNum);
                    ttIntgration.setParam(reportTransIdMap);
                    String transType = "";
                    ttIntgration.integrationForPrint("TLSecurityBond");

                }
                HashMap transTypeMap = new HashMap();
                HashMap transMap = new HashMap();
                HashMap transCashMap = new HashMap();
                transCashMap.put("BATCH_ID", actNum);
                transCashMap.put("TRANS_DT", curr_dt);
                transCashMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);
                HashMap transIdMap = new HashMap();
                List list = ClientUtil.executeQuery("getTransferDetails", transCashMap);
                if (list != null && list.size() > 0) {
                    for (int i = 0; i < list.size(); i++) {
                        transMap = (HashMap) list.get(i);
                        transIdMap.put(transMap.get("SINGLE_TRANS_ID"), "TRANSFER");
                    }
                }
                list = ClientUtil.executeQuery("getCashDetails", transCashMap);
                String cashCr="";
                int transferCount=0,cashCreditCount=0,cashDebitCount=0;
                if (list != null && list.size() > 0) {
                    for (int i = 0; i < list.size(); i++) {
                        transMap = (HashMap) list.get(i);
                        transIdMap.put(transMap.get("SINGLE_TRANS_ID"), "CASH");
                        transTypeMap.put(transMap.get("SINGLE_TRANS_ID"), transMap.get("TRANS_TYPE"));
                        if(transMap.get("TRANS_TYPE").equals("DEBIT")){
                           // cashCr="Y";
                            cashDebitCount++;
                        }
                        if(transMap.get("TRANS_TYPE").equals("CREDIT")){
                           // cashCr="Y";
                            cashCreditCount++;
                        }
                    }
                }
                System.out.println("transIdMap ------"+transIdMap);
                int yesNo = 0;
                String[] voucherOptions = {"Yes", "No"};
                yesNo = COptionPane.showOptionDialog(null, "Do you want to print?", CommonConstants.WARNINGTITLE,
                        COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                        null, voucherOptions, voucherOptions[0]);
                if (yesNo == 0) {
                    com.see.truetransact.clientutil.ttrintegration.TTIntegration ttIntgration = null;
                    HashMap paramMap = new HashMap();
                    paramMap.put("TransDt", curr_dt);
                    paramMap.put("BranchId", ProxyParameters.BRANCH_ID);
                    Object keys[] = transIdMap.keySet().toArray();
                    System.out.println("bbb---"+keys.length+"  kkk---"+keys);
                    
                    for (int i = 0; i < keys.length; i++) {
                        paramMap.put("TransId", keys[i]);
                        ttIntgration.setParam(paramMap);
                        if (CommonUtil.convertObjToStr(transIdMap.get(keys[i])).equals("TRANSFER")) {
                            //ttIntgration.integrationForPrint("ReceiptPayment");
                            transferCount++;
                        } 
                        if (CommonUtil.convertObjToStr(transTypeMap.get(keys[i])).equals("DEBIT")) {
                           // ttIntgration.integrationForPrint("CashPayment", false);
                           // cashDebitCount++;
                        } 
                        if (CommonUtil.convertObjToStr(transTypeMap.get(keys[i])).equals("CREDIT")){
                            //ttIntgration.integrationForPrint("CashReceipt", false);
                           // cashCreditCount++;
                        }
                    }
                   /* if(cashCr!=null && cashCr.equals("Y")){
                         paramMap.put("TransId", keys[0]);
                        ttIntgration.setParam(paramMap);
                          ttIntgration.integrationForPrint("CashPayment", false);
                    }*/
                    System.out.println("transferCount --->"+transferCount+"cashDebitCount-->"+cashDebitCount+"cashCreditCount-->"+cashCreditCount);
                    if(transferCount>0){
                        ttIntgration.integrationForPrint("ReceiptPayment");
                    }
                    if(cashDebitCount>0){
                        ttIntgration.integrationForPrint("CashPayment", false);
                    }
                    if(cashCreditCount>0){
                        ttIntgration.integrationForPrint("CashReceipt", false);
                    }
                }
            }
            if (transNew || observable.isIsCaseDetailsTrans()) {
                displayTransDetail();
            }
        }
        observable.setNewTransactionMap(null);
        observable.resetForm();
        deletescreenLock();
        lblTotalLimitAmt.setText("");
        resetAllExtendedTab();
        observable.resetAllFacilityDetails();
        updateCboTypeOfFacility();
        ClientUtil.enableDisable(this, false);
        setButtonEnableDisable();
        setAllTableBtnsEnableDisable(false); // To disable the Tool buttons for the CTable
        setbtnCustEnableDisable(false);  // To disable the Customer Buttons
        observable.setResultStatus();
        authSignUI.setLblStatus(observable.getLblStatus());
        poaUI.setLblStatus(observable.getLblStatus());
        observable.destroyObjects();
        observable.createObject();
        observable.ttNotifyObservers();
        rowSanctionFacility = -1;
        sandetail = false;
        enableControls = false;
        observable.resetTableValues();
        btnCaseNew.setEnabled(false);
        ClientUtil.clearAll(this);
        if (observable.getResult() != ClientConstants.ACTIONTYPE_FAILED) {
            setModified(false);
            alreadyChecked = true;
            btncancelActionPerformed();
            panChargeDetails.setVisible(false);
        }
        updateRecords = false;
        observableInt.setClearMap();
    }

    private void displayTransDetail() {
        if (observable.getResult() != ClientConstants.ACTIONTYPE_FAILED) {
            String displayStr = "";
            String oldBatchId = "";
            String newBatchId = "";
            String actNum = CommonUtil.convertObjToStr(observable.getStrACNumber());
            HashMap transMap = new HashMap();
            transMap.put("LOAN_NO", observable.getStrACNumber());
            transMap.put("CURR_DT", curr_dt);
            transMap.put("AUTH_STATUS", "AUTH_STATUS");

            List lst = ClientUtil.executeQuery("getTransferTransLoanAuthDetails", transMap);
            if (lst != null && lst.size() > 0) {
                displayStr += "Transfer Transaction Details...\n";
                for (int i = 0; i < lst.size(); i++) {
                    transMap = (HashMap) lst.get(i);
                    displayStr += "Trans Id : " + transMap.get("TRANS_ID")
                            + "   Batch Id : " + transMap.get("BATCH_ID")
                            + "   Trans Type : " + transMap.get("TRANS_TYPE");
                    actNum = CommonUtil.convertObjToStr(transMap.get("ACT_NUM"));
                    if (actNum != null && !actNum.equals("")) {
                        displayStr += "   Account No : " + transMap.get("ACT_NUM")
                                + "   Amount : " + transMap.get("AMOUNT") + "\n";
                    } else {
                        displayStr += "   Ac Hd Desc : " + transMap.get("AC_HD_ID")
                                + "   Charge Amount : " + transMap.get("AMOUNT") + "\n";
                    }
                    //System.out.println("#### :" + transMap);
                    oldBatchId = newBatchId;
                }
            }
            actNum = CommonUtil.convertObjToStr(observable.getStrACNumber());
            transMap = new HashMap();
            transMap.put("LOAN_NO", actNum);
            transMap.put("CURR_DT", curr_dt);
            transMap.put("AUTH_STATUS", "AUTH_STATUS");
            lst = ClientUtil.executeQuery("getCashTransLoanAuthDetails", transMap);
            if (lst != null && lst.size() > 0) {
                displayStr += "Cash Transaction Details...\n";
                for (int i = 0; i < lst.size(); i++) {
                    transMap = (HashMap) lst.get(i);
                    displayStr += "Trans Id : " + transMap.get("TRANS_ID")
                            + "   Trans Type : " + transMap.get("TRANS_TYPE");
                    actNum = CommonUtil.convertObjToStr(transMap.get("ACT_NUM"));
                    String authRemarks = CommonUtil.convertObjToStr(transMap.get("AUTHORIZE_REMARKS"));
                    if (actNum != null && !actNum.equals("")) {
                        displayStr += "   Account No :  " + transMap.get("ACT_NUM")
                                + "   Amount :  " + transMap.get("AMOUNT") + "\n";
                    } else if(authRemarks != null && !authRemarks.equals("") && authRemarks.equals("INTEREST")){
                        displayStr += "   Ac Hd Desc :  " + transMap.get("AC_HD_ID")
                                + "   Interest Amount :  " + transMap.get("AMOUNT") + "\n";
                    } else {
                        displayStr += "   Ac Hd Desc :  " + transMap.get("AC_HD_ID")
                                + "   Charge Amount :  " + transMap.get("AMOUNT") + "\n";
                    }
                }
            }
            if (!displayStr.equals("")) {
                ClientUtil.showMessageWindow("" + displayStr);
            }
        }
    }

    private boolean checkForSecurityValue() {
        boolean canSave = true;
        boolean isLimitNotTallied = false;
        if (!observable.getProductCategory().equals("PADDY_LOAN") && !observable.getProductCategory().equals("MDS_LOAN")) {
            if (rdoSecurityDetails_Fully.isSelected() || loanType.equals("LTD")) {//&& observable.getStrACNumber().length()
                String strFacilityType = getCboTypeOfFacilityKeyForSelected();

                if (!strFacilityType.equals(LOANS_AGAINST_DEPOSITS)) {
                } else {
                    isLimitNotTallied = false;//regarding mainlimit chanaging before authorization not need to check for ltd (goldloan this validation correct but ltd not needed )
                }
                if (isLimitNotTallied == true) {
                    displayAlert(resourceBundle.getString("securityValueWarning"));
                    canSave = false;
                } else {
                    canSave = true;
                }
            } else if (rdoSecurityDetails_Partly.isSelected()) {
                if (isLimitNotTallied == true) {
                    displayAlert(resourceBundle.getString("securityValuePartalyWarning"));
                    canSave = false;
                } else {
                    canSave = true;
                }
            }
        }
        return canSave;
    }

    private boolean checkFieldsWhenMainSavePressed() {
        if (!((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT)))) {
            final String mandatoryMessage1 = new MandatoryCheck().checkMandatory(getClass().getName(), panBorrowProfile_CustName);
            /* mandatoryMessage length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
            String mandatoryMessage2 = "";
            String mandatoryMessage3 = "";
            String mandatoryMessage5 = "";
            String mandatoryMessage6 = "";
            String mandatoryMessage7 = isJointAcctHavingAtleastOneCust();
            String mandatoryMessage8 = "";
            if (observable.getStrACNumber().length() > 0) {
                mandatoryMessage3 = new MandatoryCheck().checkMandatory(getClass().getName(), panProd_IM);
                mandatoryMessage5 = new MandatoryCheck().checkMandatory(getClass().getName(), panFDAccount);
                mandatoryMessage6 = new MandatoryCheck().checkMandatory(getClass().getName(), panFDDate);
                if (loanType.equals("OTHERS")) {
                    mandatoryMessage8 = isInterestDetailsExistForThisAcct();
                }
            }
            final String mandatoryMessage4 = new MandatoryCheck().checkMandatory(getClass().getName(), panBorrowProfile_CustName);
            /* mandatoryMessage4 length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
            if (loanType.equals("OTHERS")) {
                if (mandatoryMessage1.length() > 0 || mandatoryMessage2.length() > 0 || mandatoryMessage3.length() > 0 || mandatoryMessage4.length() > 0 || mandatoryMessage5.length() > 0 || mandatoryMessage6.length() > 0 || mandatoryMessage7.length() > 0 || mandatoryMessage8.length() > 0) {
                    displayAlert(mandatoryMessage1 + mandatoryMessage2 + mandatoryMessage3 + mandatoryMessage4 + mandatoryMessage5 + mandatoryMessage6 + mandatoryMessage7 + mandatoryMessage8);
                    return false;
                }
            }
        }
        return true;
    }

    private boolean isTablesInEditMode(boolean isMainSave) {
        if (observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) {
            return true;
        }
        StringBuffer stbWarnMsg = new StringBuffer("");
        if (authSignUI.isUpdateModeAuthorize()) {
            stbWarnMsg.append(resourceBundle.getString("authSignatoryEditWarning"));
            stbWarnMsg.append("\n");
        }
        if (authSignUI.isUpdateModeAuthorizeInst()) {
            stbWarnMsg.append(resourceBundle.getString("authSignatoryInstEditWarning"));
            stbWarnMsg.append("\n");
        }
        if (poaUI.isUpdateModePoA()) {
            stbWarnMsg.append(resourceBundle.getString("poaEditWarning"));
            stbWarnMsg.append("\n");
        }
        if (updateRepayment) {
            stbWarnMsg.append(resourceBundle.getString("repaymentEditWarning"));
            stbWarnMsg.append("\n");
        }
        //        if (isMainSave && updateSanctionFacility){
        //            stbWarnMsg.append(resourceBundle.getString("santionFacilityEditWarning"));
        //            stbWarnMsg.append("\n");
        //        }
        if (updateDocument) {
            stbWarnMsg.append(resourceBundle.getString("documentDetailsEditWarning"));
            stbWarnMsg.append("\n");
        }
        if (updateInterest) {
            stbWarnMsg.append(resourceBundle.getString("interestDetailsEditWarning"));
            stbWarnMsg.append("\n");
        }
        if (updateGuarantor) {
            stbWarnMsg.append(resourceBundle.getString("guarantorDetailsEditWarning"));
            stbWarnMsg.append("\n");
        }
        if (updateSecurity) {
            stbWarnMsg.append(resourceBundle.getString("securityDetailsEditWarning"));
            stbWarnMsg.append("\n");
        }
        if (stbWarnMsg.length() > 0) {
            displayAlert(stbWarnMsg.toString());
            return false;
        } else {
            return true;
        }
    }

    private boolean repayTableNotNull() {
        String behaves = getCboTypeOfFacilityKeyForSelected();
        //System.out.print("repaytable###" + behaves);
        if (behaves != null && (!(behaves.equals("OD") || behaves.equals("CC")))) {
            if (tblRepaymentCTable.getRowCount() < 1) { //&&  tblRepaymentCTable.getRowCount() < 1
                String strWarning = resourceBundle.getString("repayfreqtable");
                displayAlert(strWarning);
                return false;
            }
        }
        return true;
    }

    private boolean allCTablesNotNull() {
        String strWarning = "";
        //        if (tblSanctionDetails2.getRowCount() < 1){
        //            strWarning = strWarning + resourceBundle.getString("existenceSancDetailsTableWarning");
        //        }
        if (chkGurantor.isSelected() && tblGuarantorTable.getRowCount() < 1) {//!observable.getStrACNumber().equals("") &&
            strWarning = strWarning + resourceBundle.getString("existenceGuarantorDetailsTableWarning") + "\n";
        }
        //check AUTHORIZED SIG details
        if (chkAuthorizedSignatory.isSelected() && observable.getAuthorizeSigantoryRecord() < 1) {//!observable.getStrACNumber().equals("") &&
            strWarning = strWarning + resourceBundle.getString("existenceAurhorizedSignatoryTableWarning") + "\n";
        }
        if (tblInterMaintenance.getRowCount() == 0) {
            strWarning = strWarning + resourceBundle.getString("existenceInterestTableWarning") + "\n";
        }
        //check POA details
        if (chkPOFAttorney.isSelected() && observable.getPOARecord() < 1) {//!observable.getStrACNumber().equals("") &&
            strWarning = strWarning + resourceBundle.getString("existencePOATableWarning") + "\n";
        }
        //        if(chkAccountTransfer.isSelected() && actTransUI.checkmandatoryRemarks()) dont delete
        //             strWarning = strWarning + resourceBundle.getString("acctTransferdetails");
        strWarning = authSignUI.isHavingProperNoOfRecords(strWarning);
        if (!strWarning.equals("")) {
            displayAlert(strWarning);
            strWarning = null;
            return false;
        }
        strWarning = null;
        return true;
    }

    private boolean productBasedValidation() {
        boolean isNotSelected = false;
        String strFacilityType = getCboTypeOfFacilityKeyForSelected();
        if (!(strFacilityType.equals("CC") || strFacilityType.equals("OD"))) {
            if (!observable.getProductCategory().equals("PADDY_LOAN") && !observable.getProductCategory().equals("MDS_LOAN")) {
                if (!(rdoMultiDisburseAllow_No.isSelected() || rdoMultiDisburseAllow_Yes.isSelected())) {
                    isNotSelected = true;
                }
            }
        }
        return isNotSelected;
    }
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // Add your handling code here:
        if (!CommonUtil.convertObjToStr(TrueTransactMain.selBranch).equals("") && CommonUtil.convertObjToStr(TrueTransactMain.selBranch).length()>0 && 
        !TrueTransactMain.BRANCH_ID.equals(CommonUtil.convertObjToStr(TrueTransactMain.selBranch))) {
            ClientUtil.showMessageWindow("Interbranch Account creation not allowed for this screen...");
            TrueTransactMain.populateBranches();
            TrueTransactMain.selBranch = ProxyParameters.BRANCH_ID;
            observable.setSelectedBranchID(ProxyParameters.BRANCH_ID);
            setSelectedBranchID(ProxyParameters.BRANCH_ID);
            return;
        }else{
        btnnewActionPerformed();
        if (loanType.equals("LTD")) {
            tabLimitAmount.remove(panCaseDetails);
        }
        txtNextAccNo.setText("");
        txtNextAccNo.setEnabled(false);
        txtEligibleCropAmt.setEnabled(false);
        ResolutionSearch.setEnabled(true);
        setInstallmentType(true);
        chkRecovery.setSelected(false);
        }
        
        rdoGoldSecurityExitsNo.setSelected(true); // Added by nithya on 07-03-2020 for KD-1379
        txtGoldSecurityId.setEnabled(false);
        btnGoldSecurityIdSearch.setEnabled(false);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnnewActionPerformed() {
        btnNewPressed = true;
        transNew = true;
        setFocusFirstTab();
        resetAllExtendedTab();
        observable.destroyObjects();
        observable.createObject();
        observable.resetForm();
        lblTotalLimitAmt.setText("");
        observable.resetAllFacilityDetails();
        updateCboTypeOfFacility();
        ClientUtil.enableDisable(this, true);// Enables the panel...
        observable.setActionType(ClientConstants.ACTIONTYPE_NEW);
        observable.setStatus();
        authSignUI.setLblStatus(observable.getLblStatus());
        poaUI.setLblStatus(observable.getLblStatus());
        authSignUI.setAuthEnableDisable(false);
        authSignUI.setAuthOnlyNewBtnEnable();
        authSignUI.setAllAuthInstEnableDisable(false);
        authSignUI.setAuthInstOnlyNewBtnEnable();
        poaUI.setAllPoAEnableDisable(false);
        poaUI.setPoANewOnlyEnable();
        setButtonEnableDisable();
        setAllTablesEnableDisable(true);
        setbtnCustEnableDisable(false);
        btnCustID.setEnabled(true);
        newPressedEnableDisable(true);
//        setCompanyDetailsEnableDisable(false);
        setBorrowerDetailsEnableDisable(true);
        setSanctionFacilityBtnsEnableDisable(false);
        setAllSanctionFacilityEnableDisable(false);
        setSanctionMainBtnsEnableDisable(false);
        setAllSanctionMainEnableDisable(false);
        setAllFacilityDetailsEnableDisable(false);
        setFacilityBtnsEnableDisable(false);
        btnsDisableBasedOnAccountNumber();
//        btnNew2_SD.setEnabled(true);
        updateModeAuthorize = false;
        updateModePoA = false;
        updateSanctionFacility = false;
        updateSecurity = false;
        updateGuarantor = false;
        updateDocument = false;
        updateInterest = false;
        rowSanctionFacility = -1;
        setModified(true);
        btnNew2_SDAction();
        panExistingCustomer.setVisible(true);
        lblExistingCustomer.setVisible(true);
        txtExistingAcctNo.setVisible(true);
        lblExistingAcctNo.setVisible(true);
        rdoExistingCustomer_Yes.setSelected(true);
        rdoSHG_No.setSelected(true);
        rdoSHG_Yes.setEnabled(true);
        rdoSHG_No.setEnabled(true);
        txtEditTermLoanNo.setEnabled(false);
        btnCaseNew.setEnabled(true);
        ClientUtil.enableDisable(panCaseTableFields, false);
        rdoAccLimit_Main.setSelected(true);
        rdoMultiDisburseAllow_No.setSelected(true);
        rdoSubsidy_No.setSelected(true);
        rdoRiskWeight_No.setSelected(true);
        if (!loanType.equals("LTD")) {
            chkInsurance.setSelected(true);
            chkGurantor.setSelected(false);
            chkStockInspect.setSelected(true);
            chkGurantorActionPerformed(null);
            rdoSecurityDetails_Fully.setSelected(true);
            observable.setRdoSecurityDetails_Fully(rdoSecurityDetails_Fully.isSelected());
            rdoFullySecuredActionPerformed();
        } else {
            ClientUtil.enableDisable(panFacilityChkBoxes, true);

        }
        rdoInterest_Simple.setEnabled(true);
        rdoInterest_Compound.setEnabled(true);
        cboInterestType.setSelectedItem(observable.getCbmInterestType().getDataForKey("FIXED_RATE"));
        cboConstitution.setSelectedItem(observableBorrow.getCbmConstitution().getDataForKey("INDIVIDUAL"));
        cboCategory.setSelectedItem(observableBorrow.getCbmCategory().getDataForKey("GENERAL_CATEGORY"));
//        ClientUtil.enableDisable(panSalaryDetails,true);
        btnSecurityMember(false);
        btnSecurityCollateral(false);
        btnMemberNew.setEnabled(true);
        btnCollateralNew.setEnabled(true);
        txtTotalShareAmount.setEnabled(false);
        txtTotalNoOfShare.setEnabled(false);
        observableInt.resetInterestDetails();
        observable.getCbmTypeOfFacility().setKeyForSelected("SI_BEARING");
        tabLimitAmount.remove(panRepaymentSchedule);
        tabLimitAmount.remove(panCaseDetails);
        enableDisableSalaryBtnsNew(true);
        EnableDisbleMobileBanking(false);
        enableDisableRebate(false);
        enableDisableSubsidy(false);
        txtSubsidyAmt.setEnabled(false);
        txtSubsidyAdjustedAmt.setEnabled(false);
        txtEnteredSubsidyAmt.setEnabled(false);
        enableDisableGoldType(true);
        btnDepositNew.setEnabled(true);
        btnLosNew.setEnabled(true);
        chkOTS.setVisible(false);
        observableRepay.setNewMode(true);
        btnAppNo.setEnabled(true);
    }

    private void btnSecurityMember(boolean flag) {
        btnMemberNew.setEnabled(flag);
        btnMemberSave.setEnabled(flag);
        btnMemberDelete.setEnabled(flag);
    }

    private void btnSecurityCollateral(boolean flag) {
        btnCollateralNew.setEnabled(flag);
        btnCollateralSave.setEnabled(flag);
        btnCollateralDelete.setEnabled(flag);
    }

    public void repaymentFillData(java.util.LinkedHashMap data, double totRepayVal) {
        observableRepay.populateEMICalculatedFields(data, totRepayVal);
        deleteInstallment = false;
    }

    // To display the All the Cust Id's which r having status as
    // created or updated, in a table...
    private void popUp(String field) {


        final HashMap viewMap = new HashMap();
        viewType = field;
        authSignUI.setViewType(viewType);
        poaUI.setViewType(viewType);
        //if ( observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT ||  observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE){
        if (field.equals("Edit") || field.equals("Delete") || field.equals("Enquirystatus")) {

            //            super.removeEditLock(lblBorrowerNo_2.getText()); remove only accour authorization by abi

            ArrayList lst = new ArrayList();
            lst.add("BORROWER NO");
            viewMap.put(ClientConstants.RECORD_KEY_COL, lst);
            lst = null;

            lblStatus.setText(ClientConstants.ACTION_STATUS[0]);
            HashMap editMapCondition = new HashMap();
            editMapCondition.put("BRANCH_ID", getSelectedBranchID());
            editMapCondition.put("AUTHORIZE_REMARK", "= 'GOLD_LOAN'");
            viewMap.put(CommonConstants.MAP_WHERE, editMapCondition);
            if (loanType.equals("LTD")) {
                viewMap.put(CommonConstants.MAP_NAME, "viewTermLoanForLTD");
            } else {
                viewMap.put(CommonConstants.MAP_NAME, "viewTermLoan");
            }
            if (field.equals("Delete")) {
                if (loanType.equals("LTD")) {
                    viewMap.put(CommonConstants.MAP_NAME, "viewTermLoanForDeleteLTD");
                } else {
                    viewMap.put(CommonConstants.MAP_NAME, "viewTermLoanForDelete");
                }
            }
            //mapped statement: viewTermLoan---> result map should be a Hashmap in OB...
        } else if (field.equals("Borr_Cust_Id")) {
            viewMap.put(CommonConstants.MAP_NAME, "getCustomers");
        } else if (field.equals("Guarant_Cust_Id")) {
            viewMap.put(CommonConstants.MAP_NAME, "getCustomers");
        } else if (field.equals("GUARANTOR_ACCT_NO")) {
            String strSelectedProdType = CommonUtil.convertObjToStr(((ComboBoxModel) cboProdType.getModel()).getKeyForSelected());
            String strSelectedProdID = CommonUtil.convertObjToStr(((ComboBoxModel) cboProdId.getModel()).getKeyForSelected());
            if (strSelectedProdType.length() <= 0 || strSelectedProdID.length() <= 0) {
                //If the Product is not selected then return.
                return;
            }
            updateOBFields();
            viewMap.put(CommonConstants.MAP_NAME, "Cash.getGuarantorAccountList" + strSelectedProdType);
            HashMap whereListMap = new HashMap();
            whereListMap.put("CUST_ID", txtCustomerID_GD.getText());
            whereListMap.put("PROD_ID", strSelectedProdID);
            viewMap.put(CommonConstants.MAP_WHERE, whereListMap);
        } else if (field.equalsIgnoreCase("SUB_MEMBER_NO")) {
            viewMap.put(CommonConstants.MAP_NAME, "getMemeberShipDetails");
        } else if (field.equalsIgnoreCase("OWNER_MEMBER_NO_GAHAN")) {
            viewMap.put(CommonConstants.MAP_NAME, "getMemeberShipDetailsFromGahan");

        }else if (field.equalsIgnoreCase("GOLD_SECURITY_STOCK")) {
             viewMap.put(CommonConstants.MAP_NAME, "getCustomerGoldSecurityStock");
        } else if (field.equalsIgnoreCase("OWNER_MEMBER_NO")) {
            viewMap.put(CommonConstants.MAP_NAME, "getMemeberShipDetails");
        } else if (field.equalsIgnoreCase("DOCUMENT_NO")) {
            HashMap whereListMap = new HashMap();
            whereListMap.put("ENTERED_DOCUMENT_NO", verifyDocNo().toString());
            //Added By Suresh
            if (txtOwnerMemNo.getText().length() > 0) {
                whereListMap.put("MEMBERSHIP_NO", txtOwnerMemNo.getText());
            }
            viewMap.put(CommonConstants.MAP_NAME, "getGahanDetailsforLoan");
            viewMap.put(CommonConstants.MAP_WHERE, whereListMap);
        } else if (field.equalsIgnoreCase("DEPOSIT_ACC_NO")) {
            HashMap whereMap = new HashMap();
            whereMap.put("SELECTED_BRANCH",(((ComboBoxModel) TrueTransactMain.cboBranchList.getModel()).getKeyForSelected()));
            whereMap.put("PROD_ID", CommonUtil.convertObjToStr(observable.getCbmDepProdID().getKeyForSelected()));
            String prodType = ((ComboBoxModel) cboProductTypeSecurity.getModel()).getKeyForSelected().toString();
            if (prodType.equals("TD")) {
                viewMap.put(CommonConstants.MAP_NAME, "getMDSMasterDepositNo");
            } else {
                viewMap.put(CommonConstants.MAP_NAME, "getMDSChittalNo");
            }
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
        } else if (field.equalsIgnoreCase("ACCT_NO")) {
            HashMap whereMap = new HashMap();
            viewMap.put(CommonConstants.MAP_NAME, "Cash.getAccountList"
                    + ((ComboBoxModel) cboDirectRepaymentProdType.getModel()).getKeyForSelected().toString());
            //                }
            whereMap.put("PROD_ID", ((ComboBoxModel) cboDirectRepaymentProdId.getModel()).getKeyForSelected());
            whereMap.put("BRANCH_CODE", ProxyParameters.BRANCH_ID);
            whereMap.put("CURRENT_DT", curr_dt);
            whereMap.put("SELECTED_BRANCH", TrueTransactMain.selBranch);
            setSelectedBranchID(TrueTransactMain.selBranch);
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);

        }
        new ViewAll(this, viewMap).show();
    }

    private StringBuffer verifyDocNo() {
        StringBuffer addExistDoc = new StringBuffer();
        int count = tblCollateral.getRowCount();
        if (count > 0) {
            for (int i = 0; i < count; i++) {
                if (i == 0) {
                    addExistDoc.append("'" + CommonUtil.convertObjToStr(tblCollateral.getValueAt(i, 2)) + "'");
                } else {
                    addExistDoc.append("," + "'" + CommonUtil.convertObjToStr(tblCollateral.getValueAt(i, 2)) + "'");
                }
            }
        }
        return addExistDoc;
    }

    private double getGahanAvailableSecurity(double maxsecurityAmt) {
        double availableSecuirty = 0;
        double sumGahanTableValue = 0;
        double loanAmt = 0;
        int count = tblCollateral.getRowCount();
        if (count > 0) {
            for (int i = 0; i < count; i++) {
                sumGahanTableValue += CommonUtil.convertObjToDouble(tblCollateral.getValueAt(i, 3)).doubleValue();
            }
        }
        loanAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
        availableSecuirty = loanAmt - sumGahanTableValue;

//        if(maxsecurityAmt>=availableSecuirty)
//            return availableSecuirty;
//        else
        return maxsecurityAmt;
    }

    private void setFocusFirstTab() {
        tabLimitAmount.setSelectedIndex(0);
    }

    private void setFocusAcctLevelTab() {
        tabLimitAmount.setSelectedIndex(4);
    }
private void removeEditLock() {
        //added by rishad 22/07/2015 for locking and removing
        String acctNo = CommonUtil.convertObjToStr(lblAcctNo_Sanction_Disp.getText());
        HashMap lockMap = new HashMap();
        lockMap.put("RECORD_KEY", acctNo);
        lockMap.put("CUR_DATE", curr_dt.clone());
        lockMap.put("BRANCH_ID", ProxyParameters.BRANCH_ID);
        ClientUtil.execute("deleteLock", lockMap);
    }
    public void fillData(Object param) {
        HashMap hash = (HashMap) param;
        //System.out.println("calling filldata#####" + hash);
        if (hash.containsKey("FROM_AUTHORIZE_LIST_UI")) {
            fromAuthorizeUI = true;
            authorizeListUI = (AuthorizeListUI) hash.get("PARENT");
            hash.remove("PARENT");
            viewType = AUTHORIZE;
            observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
            observable.setStatus();
            authEnableDisable();
            btnReject.setEnabled(false);
            rejectFlag = 1;
            btnAuthorize.setEnabled(true);
        }
        if (hash.containsKey("NEW_FROM_AUTHORIZE_LIST_UI")) {
            fromNewAuthorizeUI = true;
            newauthorizeListUI = (NewAuthorizeListUI) hash.get("PARENT");
            hash.remove("PARENT");
            viewType = AUTHORIZE;
            observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
            observable.setStatus();
            authEnableDisable();
            btnReject.setEnabled(false);
            rejectFlag = 1;
            btnAuthorize.setEnabled(true);
        }
        if (hash.containsKey("FROM_MANAGER_AUTHORIZE_LIST_UI")) {
            fromManagerAuthorizeUI = true;
            ManagerauthorizeListUI = (AuthorizeListDebitUI) hash.get("PARENT");
            hash.remove("PARENT");
            viewType = AUTHORIZE;
            observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
            observable.setStatus();
            authEnableDisable();
            btnReject.setEnabled(false);
            rejectFlag = 1;
            btnAuthorize.setEnabled(true);
        }
        if (hash.containsKey("RESOLUTION_ID")) {
            String resolutionno = "";
            //  HashMap hash = (HashMap) map;
            resolutionno = CommonUtil.convertObjToStr(hash.get("RESOLUTION_ID"));
            txtSanctionNo.setText(resolutionno);
            tdtSanctionDate.setDateValue((CommonUtil.convertObjToStr(hash.get("RESOLUTION_DATE"))));
        }      
        if (hash.containsKey("FROM_CASHIER_APPROVAL_REJ_UI")) {
            //System.out.println("HASH DATE ====================" + hash);
            fromAuthorizeUI = false;
            fromManagerAuthorizeUI = false;
            viewType = AUTHORIZE;
            observable.setActionType(ClientConstants.ACTIONTYPE_REJECT);
            observable.setStatus();
            btnSaveDisable();
        }
        if (hash.containsKey("DEALER_ID")) {//Added By Revathi.L
            txtDealerID.setText(CommonUtil.convertObjToStr(hash.get("DEALER_ID")));
            lblDealerName.setText(CommonUtil.convertObjToStr(hash.get("DEALER_NAME")));
        }
        if (viewType != null) {
            if (viewType.equals("Edit") || viewType.equals("Delete") || viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Enquirystatus")) {
                isFilled = true;
                //added by rishad 22/07/2015 for avoiding doubling issue 
                if(!viewType.equals(AUTHORIZE)){
                HashMap lockMap = new HashMap();
                lockMap.put("SCREEN_ID", getScreenID());
                lockMap.put("RECORD_KEY", CommonUtil.convertObjToStr(hash.get("ACCT_NUM")));
                lockMap.put(CommonConstants.USER_ID, ProxyParameters.USER_ID);
                lockMap.put("BRANCH_ID", TrueTransactMain.BRANCH_ID);
                lockMap.put("CUR_DATE", curr_dt.clone());
                List lstLock = ClientUtil.executeQuery("selectEditLock", lockMap);
                if (lstLock != null && lstLock.size() > 0) {
                    ClientUtil.displayAlert("Account is locked");
                    btnCancelActionPerformed(null);
                    return;
                } else {
                    lockMap = new HashMap();
                    ArrayList lst = new ArrayList();
                    lst.add("ACCOUNT NUMBER");
                    lockMap.put(ClientConstants.RECORD_KEY_COL, lst);
                    lockMap.put("ACCOUNT NUMBER", CommonUtil.convertObjToStr(hash.get("ACCT_NUM")));
                    setEditLockMap(lockMap);
                    setEditLock();
                }}
                //end
                panExistingCustomer.setVisible(false);
                lblExistingCustomer.setVisible(false);
                txtExistingAcctNo.setVisible(false);
                lblExistingAcctNo.setVisible(false);
                if (hash.containsKey("MEMBERSHIP_NO")) {
                    txtExistingAcctNo.setText(CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_NO")));
                    txtExistingAcctNo.setVisible(true);
                    lblExistingAcctNo.setVisible(true);
                }
                if (hash.containsKey("CUSTOMER ID")) {
                    displayShareDetails(hash);
                }
                if (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT) || viewType.equals("Delete")) {
                    // To populate the tabs on the basis of KEY_VALUE->ACCT_NUM
                    // To reset the Customer details in the Borrower Tab
                    allowResetVisit = true;
                    setFocusAcctLevelTab();
                    allowResetVisit = true;
                    observableBorrow.resetBorrowerTabCTable();
                    observableBorrow.resetBorrowerTabCustomer();
                    updateBorrowerTabCustDetails();
                    observable.setStrACNumber(CommonUtil.convertObjToStr(hash.get("ACCT_NUM")));
                    if (validateScreenLock()) {
                        return;
                    }
                    insertScreenLock();
                    updateBorrowerTabCustDetails();
                    hash.put(CommonConstants.MAP_WHERE, observable.getStrACNumber());
                    observable.populateData(hash, authSignUI.getAuthorizedSignatoryOB(), poaUI.getPowerOfAttorneyOB());
                    if (observable.isDailyLoan() == true) {
                        dailyLoanVisibleComp(true);
                    } else {
                        dailyLoanVisibleComp(false);
                    }

                    displayTransDetail();
                    //                     if (viewType.equals(AUTHORIZE)|| viewType.equals(REJECT))
                    //                    if (loanType.equals("LTD"))
                    //                        changesInUIForLoanAgainstDeposit();
                    //                    tblShareMaintenance.setModel(observable.getTblShare());
                    //                    cboTypeOfFacility.setSelectedItem(observable.getCboTypeOfFacility());
                    if (viewType.equals(AUTHORIZE) || viewType.equals(REJECT)) {
                        if (viewType.equals(AUTHORIZE)) {
                            observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
                            this.btnReject.setEnabled(false);
                            this.btnException.setEnabled(false);
                            btnAuthorize.setEnabled(true);
                        }
                        if (viewType.equals(REJECT)) {
                            observable.setActionType(ClientConstants.ACTIONTYPE_REJECT);
                            this.btnAuthorize.setEnabled(false);
                            this.btnException.setEnabled(false);
                        }
                        if (loanType.equals("LTD") && observable.getProductCategory().equals("OTHER_LOAN")) {
                            if (hash.containsKey(CommonConstants.MAP_WHERE)) {
                                hash.remove(CommonConstants.MAP_WHERE);
                            }
                            boolean checkvalue = observable.setDetailsForLTD(hash);
                            HashMap map = new HashMap();
                            map = (HashMap) observable.getDepositCustDetMap();
                            //System.out.println("mapvalue###" + map);
                            if (map.containsKey("LIENNO")) {
                                HashMap lienMap = new HashMap();
                                lienMap.put("CUSTOMER_NAME", map.get("NAME"));
                                lienMap.put("PRODID", map.get("PROD_ID"));
                                lienMap.put("DEPOSIT_ACT_NUM", map.get("DEPOSIT_NO"));
                                lienMap.put("SUBNO", CommonUtil.convertObjToInt(map.get("DEPOSIT_SUB_NO")));
                                lienMap.put("CUST_ID", map.get("CUST_ID"));
                                lienMap.put("AMOUNT", map.get("AMOUNT"));
                                lienMap.put("BALANCE", map.get("BALANCE"));
                                lienMap.put("STATUS", CommonConstants.STATUS_CREATED);
                                lienMap.put("LIENNO", map.get("LIENNO"));
                                //System.out.println("lienMap#####" + lienMap);
                                DepositLienUI depLienUI = new DepositLienUI();
                                depLienUI.setViewType(ClientConstants.ACTIONTYPE_AUTHORIZE);
                                if (viewType.equals(REJECT)) {
                                    depLienUI.setViewType(ClientConstants.ACTIONTYPE_REJECT);
                                }
                                depLienUI.setFromLoanScreen(true);
                                depLienUI.fillData(lienMap);

                                com.see.truetransact.ui.TrueTransactMain.showScreen(depLienUI);
                                lienMap = null;
                            }
                            map = null;
                        }
                        if (observableBorrow.getTxtCustID().length() > 0) {
                            HashMap shareMap = new HashMap();
                            shareMap.put("CUSTOMER ID", observableBorrow.getTxtCustID());
                            displayShareDetails(shareMap);
                        }
                    } else if (viewType.equals(EXCEPTION)) {
                        observable.setActionType(ClientConstants.ACTIONTYPE_EXCEPTION);
                    } else if (viewType.equals(REJECT)) {
                        observable.setActionType(ClientConstants.ACTIONTYPE_REJECT);
                    }
                    observable.setStatus();
                    authSignUI.setLblStatus(observable.getLblStatus());
                    poaUI.setLblStatus(observable.getLblStatus());
                    if (viewType.equals(CommonConstants.TOSTATUS_DELETE)) {
                        observableClassi.setClassifiDetails(CommonConstants.TOSTATUS_DELETE);
                        observableOtherDetails.setOtherDetailsMode(CommonConstants.TOSTATUS_DELETE);
                    }
                    btnSecurityMember(false);
                    btnSecurityCollateral(false);
                    enableDisableSalaryBtns(false);
                } else {
                    setFocusFirstTab();
                    //                    hash.put(CommonConstants.MAP_WHERE, hash.get("BORROWER NO"));
                    observable.setStrACNumber(CommonUtil.convertObjToStr(hash.get("ACCT_NUM")));
                    hash.put(CommonConstants.MAP_WHERE, hash.get("ACCT_NUM"));
                    hash.put("BORROW_NO", hash.get("BORROWER NO"));
                    // To populate the tabs on the basis of KEY_VALUE->BORROWER NO
                    hash.put("KEY_VALUE", "AUTHORIZE");//BORROWER_NUMBER
                    observable.populateData(hash, authSignUI.getAuthorizedSignatoryOB(), poaUI.getPowerOfAttorneyOB());

                    if (observable.getStrACNumber() != null) {                // Printing
                        if (observable.isDailyLoan() == true) {
                            dailyLoanVisibleComp(true);
                        } else {
                            dailyLoanVisibleComp(false);
                        }
                        String actNum = observable.getStrACNumber();
                        //                         int yesNo = 0;
                        //                         String[] options = {"Yes", "No"};
                        //                         yesNo = COptionPane.showOptionDialog(null,"Do you want to print GoldBond?", CommonConstants.WARNINGTITLE,
                        //                         COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                        //                         null, options, options[0]);
                        //                         //System.out.println("#$#$$ yesNo : "+yesNo);
                        //                         if (yesNo==0) {
                        //                             com.see.truetransact.clientutil.ttrintegration.TTIntegration ttIntgration = null;
                        //                             HashMap reportTransIdMap = new HashMap();
                        //                             reportTransIdMap.put("Act_Num", actNum);
                        //                             ttIntgration.setParam(reportTransIdMap);
                        //                             String transType = "";
                        //                             ttIntgration.integrationForPrint("Goldbond");
                        //                         }

                        HashMap transTypeMap = new HashMap();
                        HashMap transMap = new HashMap();
                        HashMap transCashMap = new HashMap();
                        transCashMap.put("BATCH_ID", actNum);
                        transCashMap.put("TRANS_DT", curr_dt);
                        transCashMap.put(CommonConstants.BRANCH_ID, ProxyParameters.BRANCH_ID);
                        HashMap transIdMap = new HashMap();
                        List list = ClientUtil.executeQuery("getTransferDetails", transCashMap);
                        if (list != null && list.size() > 0) {
                            for (int i = 0; i < list.size(); i++) {
                                transMap = (HashMap) list.get(i);
                                transIdMap.put(transMap.get("BATCH_ID"), "TRANSFER");
                            }
                        }
                        list = ClientUtil.executeQuery("getCashDetails", transCashMap);
                        if (list != null && list.size() > 0) {
                            for (int i = 0; i < list.size(); i++) {
                                transMap = (HashMap) list.get(i);
                                transIdMap.put(transMap.get("TRANS_ID"), "CASH");
                                transTypeMap.put(transMap.get("TRANS_ID"), transMap.get("TRANS_TYPE"));
                            }
                        }
                        if(chkok!=true){
                        int yesNo = 0;
                        String[] voucherOptions = {"Yes", "No"};
                        if (list != null && list.size() > 0) {
                            yesNo = COptionPane.showOptionDialog(null, "Do you want to print?", CommonConstants.WARNINGTITLE,
                                    COptionPane.OK_OPTION, COptionPane.WARNING_MESSAGE,
                                    null, voucherOptions, voucherOptions[0]);
                            if (yesNo == 0) {
                                com.see.truetransact.clientutil.ttrintegration.TTIntegration ttIntgration = null;
                                HashMap paramMap = new HashMap();
                                paramMap.put("TransDt", curr_dt);
                                paramMap.put("BranchId", ProxyParameters.BRANCH_ID);
                                Object keys[] = transIdMap.keySet().toArray();
                                for (int i = 0; i < keys.length; i++) {
                                    paramMap.put("TransId", keys[i]);
                                    ttIntgration.setParam(paramMap);
                                    if (CommonUtil.convertObjToStr(transIdMap.get(keys[i])).equals("TRANSFER")) {
                                        ttIntgration.integrationForPrint("ReceiptPayment");
                                    } else if (CommonUtil.convertObjToStr(transTypeMap.get(keys[i])).equals("DEBIT")) {
                                        ttIntgration.integrationForPrint("CashPayment", false);
                                    } else {
                                        ttIntgration.integrationForPrint("CashReceipt", false);
                                    }
                                }
                            }
                        }
                        }
                    }

                }
                tblCaseTable.setModel(observable.getTblCaseDetails());
                // To add the Borrower level Customer ID's in Authorized Signatory's
                // acctLevelCustomerList
                addCustIDNAuthSignatory();
                observable.ttNotifyObservers();
                if (viewType.equals("Delete") || (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT))) {
                    ClientUtil.enableDisable(this, false);
                    rdoGuarnInsititutional.setEnabled(false);
                    rdoGuarnIndividual.setEnabled(false);
                    ClientUtil.enableDisable(panGuarnOption, false);
                    rdoGuarnInsititutional.setEnabled(false);
                    rdoGuarnIndividual.setEnabled(false);
                    btnSHGId.setEnabled(false);
                    btnCourtOrderSave.setEnabled(false);
                    btnCourtOrderDel.setEnabled(false);
                } else {
                    // To Disable all components for Closed A/cs
                    if (CommonUtil.convertObjToStr(cboAccStatus.getSelectedItem()).equals("Closed")) {
                        HashMap map = new HashMap();
                        if (lblAcctNo_Sanction_Disp.getText() != null && lblAcctNo_Sanction_Disp.getText().length() > 0) {
                            map.put("ACT_NUM", lblAcctNo_Sanction_Disp.getText());
                            List lst = ClientUtil.executeQuery("getDepositClosingAccounts", map);
                            if (lst != null && lst.size() > 0) {
                                ClientUtil.showMessageWindow("Account Closed but Authorization pending ");
                                ClientUtil.enableDisable(this, false);
                                btnSave.setEnabled(false);
                            } else {
                                ClientUtil.showMessageWindow("Account Closed");
                                ClientUtil.enableDisable(this, false);
                                btnSave.setEnabled(false);
                            }
                        } else {
                            map = new HashMap();
                        }

                    } else {
                        ClientUtil.enableDisable(this, true);
                        rdoGuarnInsititutional.setEnabled(true);
                        rdoGuarnIndividual.setEnabled(true);
                        btnCustID.setEnabled(true);
                        chkAccountTransfer.setEnabled(false);
                        if (observableBorrow.getAuthorizeStatus() != null && observableBorrow.getAuthorizeStatus().length() > 0) {
                            btnCustID.setEnabled(false);
                            txtCustID.setEnabled(false);
                        } else {
                            btnCustID.setEnabled(true);
                            txtCustID.setEnabled(true);
                        }
                        authSignUI.setAuthOnlyNewBtnEnable();
                        authSignUI.setAuthInstOnlyNewBtnEnable();
                        observable.setStatus();
                        authSignUI.setLblStatus(observable.getLblStatus());
                        poaUI.setLblStatus(observable.getLblStatus());
                        poaUI.setPoANewOnlyEnable();
                        //                        setCompanyDetailsEnableDisable(false);
                        setBorrowerDetailsEnableDisable(true);
                        btnSave1ActionPerformed();
                        btnSave.setEnabled(true);
                        String typeofFacility = CommonUtil.convertObjToStr(observable.getCbmTypeOfFacility().getKeyForSelected());
                        if (viewType.equals("Edit") && (typeofFacility.equals("OD") || typeofFacility.equals("CC")) && (observable.getAuthorizeStatus() != null && observable.getAuthorizeStatus().equals(CommonConstants.STATUS_AUTHORIZED))) {
                            //                            ClientUtil.disableAll(panCompanyDetails_Company,false);//
                            //ClientUtil.enableDisable(panODEnhance, true);
                            //added by sreekrishnan
                            todateEdit1 = CommonUtil.convertObjToStr(tdtTDate.getDateValue());
                            fromdateEdit1 = CommonUtil.convertObjToStr(tdtFDate.getDateValue());
                            rdoEnhance_Yes.setVisible(false);
                            rdoEnhance_No.setVisible(false);
                            lblEnhance.setVisible(false);
                            ClientUtil.enableDisable(panRenewal, true);

                        }

                    }
                }
                EnableDisbleMobileBanking(false);
                observableBorrow.setCustOpenDate(CommonUtil.convertObjToStr(hash.get("CUSTOMER ID")));
                observableBorrow.setCustAddr(CommonUtil.convertObjToStr(hash.get("CUSTOMER ID")));
                //System.out.println("a2222");
                observableBorrow.setCustPhone(CommonUtil.convertObjToStr(hash.get("CUSTOMER ID")));
                observable.setStatus();
                authSignUI.setLblStatus(observable.getLblStatus());
                poaUI.setLblStatus(observable.getLblStatus());
                setButtonEnableDisable();
                if (CommonUtil.convertObjToStr(cboAccStatus.getSelectedItem()).equals("Closed")) {
                    btnSave.setEnabled(false);
                }

                tabLimitAmount.setSelectedComponent(panBorrowCompanyDetails);
                ClientUtil.enableDisable(panMemberDetails, false);
                ClientUtil.enableDisable(panCollatetalDetails, false);
                txtContactPhone.setText(observableBorrow.getLblPhone());
                //                setTotalMainAdditionalSanction();
                //edit mode add noof install focusloast event
                if (viewType.equals("Edit")){
                    txtNoInstallmentsFocusLost();
                }
                ClientUtil.enableDisable(panMemberDetails, false);
            } else if (viewType.equals("Borr_Cust_Id")) {
                final String CustID = CommonUtil.convertObjToStr(hash.get("CUSTOMER ID"));
                observableBorrow.setTxtCustID(CustID);
                if (observableBorrow.setCustOpenDate(CustID)) {
                    //                    setCompanyDetailsEnableDisable(true);
                } else {
                    //                    setCompanyDetailsEnableDisable(false);
                }
                observableBorrow.setCustAddr(CustID);
                //System.out.println("a1111");
                observableBorrow.setCustPhone(CustID);
                observable.ttNotifyObservers();
                //                txtCustID.setEditable(false);
            } else if (viewType.equals("Guarant_Cust_Id")) {
                observableGuarantor.resetGuarantorDetails();
                observableGuarantor.resetInstitGuarantorDetails();
                updateGuarantorTabCustDetails();
                observableGuarantor.setTxtCustomerID_GD(CommonUtil.convertObjToStr(hash.get("CUSTOMER ID")));
                final String CustID = CommonUtil.convertObjToStr(hash.get("CUSTOMER ID"));
                observableGuarantor.setTxtGuarantorNetWorth(CommonUtil.convertObjToStr(hash.get("NETWORTH")));

                if (hash.get("DOB") != null && CommonUtil.convertObjToStr(hash.get("DOB")).length() > 0) {
                    observableGuarantor.setTdtDOB_GD(DateUtil.getStringDate((java.util.Date) hash.get("DOB")));
                } else {
                    observableGuarantor.setTdtDOB_GD("");
                }
                observableGuarantor.setGuarantorCustOtherAccounts(CustID);
                observableGuarantor.setGuarantorCustAddr(CustID);
                observableGuarantor.setGuarantorCustName(CustID);
                observableGuarantor.setGuarantorCustPhone(CustID);
                cboProdType.setSelectedItem(observableGuarantor.getCboProdType());
                cboProdType.setEnabled(false);
                cboProdId.setSelectedItem(observableGuarantor.getCboProdId());
                cboProdId.setEnabled(false);
                txtGuaranAccNo.setText(observableGuarantor.getTxtGuaranAccNo());
                if (CommonUtil.convertObjToStr(hash.get("MEMBER_NO")).length() > 0) {
                    lblMemberNo_Disp.setText(CommonUtil.convertObjToStr(hash.get("MEMBER_NO")));
                    lblMemberNo.setVisible(true);
                    lblMemberNo_Disp.setVisible(true);
                }
                updateGuarantorTabCustDetails();
            } else if (viewType.equals("CUSTOMER ID")) {
                HashMap hashmap = new HashMap();
                String custid = CommonUtil.convertObjToStr(CommonUtil.convertObjToStr(hash.get("CUST_ID")));
                hashmap.put("CUST_ID", custid);
                List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                if (lst1 != null && lst1.size() > 0) {
                    ClientUtil.displayAlert("Customer is death marked please select another customerId");
                    txtExistingAcctNo.setText("");
                    txtCustID.setText("");
                    return;
                }
                observableComp.resetCustomerDetails();
                if (hash.containsKey("CUST_ID")) {
                    hash.put("CUSTOMER ID", hash.get("CUST_ID"));
                }
                if (hash.containsKey("AADHAAR_NO")) {
                    txtExistingAcctNo.setText(CommonUtil.convertObjToStr(hash.get("AADHAAR_NO")));
                }
                if (hash != null && hash.containsKey("SHARE_ACCT_NO")) {
                    if (hash.containsKey("STATUS") && hash.get("STATUS")!=null && hash.get("STATUS").toString().equals("CLOSED")) {
                        ClientUtil.showMessageWindow("Closed Member Cannot Continue further");
                        ClientUtil.enableDisable(this, false);
                        btnSave.setEnabled(false);
                        observableComp.resetCustomerDetails();
                        btnnewActionPerformed();
                        hash = null;
                    } else {
                        txtExistingAcctNo.setText(CommonUtil.convertObjToStr(hash.get("SHARE_ACCT_NO")));
                    }
                }
                if (hash != null && hash.containsKey("MEMBER_NO")) {
                    if (hash.get("STATUS")!=null && hash.containsKey("STATUS") && hash.get("STATUS").toString().equals("CLOSED")) {
                        ClientUtil.showMessageWindow("Closed Member Cannot Continue further");
                        ClientUtil.enableDisable(this, false);
                        btnSave.setEnabled(false);
                        observableComp.resetCustomerDetails();
                        btnnewActionPerformed();
                        hash = null;
                    } else {
                        txtExistingAcctNo.setText(CommonUtil.convertObjToStr(hash.get("MEMBER_NO")));
                    }
                }
                if (hash != null && hash.containsKey("MEMBERSHIP_NO")) {
                    if (hash.containsKey("STATUS") && hash.get("STATUS").toString().equals("CLOSED")) {
                        ClientUtil.showMessageWindow("Closed Member Cannot Continue further");
                        ClientUtil.enableDisable(this, false);
                        btnSave.setEnabled(false);
                        observableComp.resetCustomerDetails();
                        btnnewActionPerformed();
                        hash = null;
                    } else {
                        txtExistingAcctNo.setText(CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_NO")));
                    }
                }
                //System.out.println("  hash custInfoDisplay"+hash);
                custInfoDisplay(CommonUtil.convertObjToStr(hash.get("CUSTOMER ID")), loanType);
                validateConstitutionCustID();
                displayShareDetails(hash);
                if (loanType.equals("LTD")) {
                    //                    btnSecurityNew.setEnabled(true);
                }
                txtApplicationNo.setText("");
                observableBorrow.setTxtApplicationNo("");
            } else if (viewType.equals("APPLICATION_NOS") || viewType.equals("APPLICATION_NO")) {
                observableComp.resetCustomerDetails();
                if (hash.containsKey("CUSTOMER_ID")) {
                    hash.put("CUSTOMER ID", hash.get("CUSTOMER_ID"));
                }
                if(hash.get("MORATORIUM_PERIOD")!=null  && CommonUtil.convertObjToInt( hash.get("MORATORIUM_PERIOD")) >0){
                 
                    chkMoratorium_Given.setSelected(true);
                    txtFacility_Moratorium_Period.setText(CommonUtil.convertObjToStr(hash.get("MORATORIUM_PERIOD")));
                }
                txtExistingAcctNo.setText(CommonUtil.convertObjToStr(hash.get("MEMBER_ID")));
                txtNoInstallments.setText(CommonUtil.convertObjToStr(hash.get("NO_OF_INSTALLMENT")));
                cboSanRepaymentType.setSelectedItem(CommonUtil.convertObjToStr(hash.get("INSTALLMENT_TYPE")));
                txtInstallAmount.setText(CommonUtil.convertObjToStr(hash.get("INSTALLMENT_AMOUNT")));
                custInfoDisplay(CommonUtil.convertObjToStr(hash.get("CUSTOMER ID")), loanType);
                validateConstitutionCustID();
                displayShareDetails(hash);
                String appno = hash.get("APPLICATION_NO").toString();
                String limit = CommonUtil.convertObjToStr(hash.get("ELIGIBLE_AMT"));
                //System.out.println("aaa" + txtApplicationNo.getText() + "lim" + txtLimit_SD.getText());
                cboProductId.setSelectedItem(CommonUtil.convertObjToStr(observable.getCbmProductId().getDataForKey(hash.get("PROD_ID").toString())));
                hash.put(CommonConstants.MAP_WHERE, hash.get("APPLICATION_NO"));
                hash.put(CommonConstants.BRANCH_ID, TrueTransactMain.BRANCH_ID);
                observableApplication = new LoanApplicationOB();
                observableApplication.getData(hash);
                observable.setLoanMap(observableApplication.getLoanMap());
                observable.populateLoanApplicationData();
                txtApplicationNo.setText(hash.get("APPLICATION_NO").toString());
//                    observable.setTblMemberTypeDetails(observableApplication.getTblMemberTypeDetails());
//                    observable.setTblCollateralDetails(observableApplication.getTblCollateralDetails());
//                    observable.setTblDepositTypeDetails(observableApplication.getTblDepositTypeDetails());
//                    observable.setTblLosTypeDetails(observableApplication.getTblLosTypeDetails());
//                    observable.setTblSalarySecrityTable(observableApplication.getTblSalarySecrityTable());
                tblMemberType.setModel(observable.getTblMemberTypeDetails());
                tblCollateral.setModel(observable.getTblCollateralDetails());
                tblDepositDetails.setModel(observable.getTblDepositTypeDetails());
                tblLosDetails.setModel(observable.getTblLosTypeDetails());
                tblSalary.setModel(observable.getTblSalarySecrityTable());
                tblVehicleType.setModel(observable.getTblVehicleTypeDetails());
                HashMap hMap = new HashMap();
                hMap.put("PROD_ID", hash.get("PROD_ID"));
                if (hMap.containsKey("PROD_ID") && hMap.get("PROD_ID") != null) {
                    List lst1 = ClientUtil.executeQuery("getBeavesLikeOverDraft", hMap);
                    if (lst1 != null && lst1.size() > 0) {
                        hMap = (HashMap) lst1.get(0);
                        String schemeName = observable.getLoanApplictionScheme(hash);
                        if ((hMap.containsKey("BEHAVES_LIKE") && hMap.get("BEHAVES_LIKE") != null) && (schemeName != null && !schemeName.equals(""))) {
                            ((ComboBoxModel) cboTypeOfFacility.getModel()).setKeyForSelected(hMap.get("BEHAVES_LIKE"));
                        }
                        cboProductId.setSelectedItem(CommonUtil.convertObjToStr(schemeName));
                    }
                }
                txtLimit_SD.setText(CommonUtil.convertObjToStr(observableApplication.getTxtEligibleAmt()));
                cboRepayFreq.setSelectedItem(((ComboBoxModel) cboRepayFreq.getModel()).getDataForKey(CommonUtil.convertObjToStr(observableApplication.getCboRepayFreq_Repayment())));
               // tdtFDate.setDateValue(CommonUtil.convertObjToStr(observableApplication.getTdtFromDt()));
                tdtFDate.setDateValue(CommonUtil.convertObjToStr(curr_dt));
                tdtTDate.setDateValue(CommonUtil.convertObjToStr(observableApplication.getTdtDueDt()));
                 cboSanRepaymentType.setSelectedItem(observableApplication.getTxtRepayType());
            } else if (viewType.equals("JOINT ACCOUNT")) {
                //                jointAcctDisplay(CommonUtil.convertObjToStr(hash.get("CUSTOMER ID")));
                jointAcctDisplay(CommonUtil.convertObjToStr(hash.get("CUST_ID")));
            } else if (viewType.equals("EMP_ID")) {
                txtPermittedBy.setText(CommonUtil.convertObjToStr(hash.get("EMPLOYEE ID")));
                lblPermittedName.setText(CommonUtil.convertObjToStr(hash.get("EMP NAME")));
                lblDesignatedName.setText(CommonUtil.convertObjToStr(hash.get("DESIGNATION")));
            } else if (viewType == "SUB_MEMBER_NO") {
                String memberNo = txtMemNo.getText();
                if (tblMemberType.getRowCount() > 0) {
                    for (int i = 0; i < tblMemberType.getRowCount(); i++) {
                        String membNo = CommonUtil.convertObjToStr(tblMemberType.getValueAt(i, 0));
//                        if (memberNo.equalsIgnoreCase(membNo) && !updateMode) {
//                            ClientUtil.displayAlert("Member No Already Exists in this Table");
//                            resetMemberTypeDetails();
//                            btnSecurityMember(false);
//                            btnMemberNew.setEnabled(true);
//                            btnMemNo.setEnabled(false);
//                            ClientUtil.enableDisable(panMemberDetails, false);
//                            return;
//                        }
                    }
                }
                txtMemNo.setText(CommonUtil.convertObjToStr(hash.get("MEMBER_NO")));
                observable.setTxtMemNo(CommonUtil.convertObjToStr(hash.get("MEMBER_NO")));
                txtMemName.setText(CommonUtil.convertObjToStr(hash.get("NAME")));
                observable.setTxtMemName(CommonUtil.convertObjToStr(hash.get("NAME")));
                hash.put("SHARE ACCOUNT NO", hash.get("MEMBER_NO"));
                List lst = ClientUtil.executeQuery("getShareAccInfoTO", hash);
                if (lst != null && lst.size() > 0) {
                    HashMap resultMap = (HashMap) lst.get(0);
                    txtMemType.setText(CommonUtil.convertObjToStr(resultMap.get("SHARE_TYPE")));
                    observable.setTxtMemNo(CommonUtil.convertObjToStr(resultMap.get("SHARE_TYPE")));
                }
            } else if(viewType == "SUB_MEMBER_NO_VEHICLE"){
                txtVehicleMemberNum.setText(CommonUtil.convertObjToStr(hash.get("MEMBER_NO")));
                txtVehicleMemberName.setText(CommonUtil.convertObjToStr(hash.get("NAME")));
            } else if (viewType == "SUB_MEMBER_NO_FOCUS_LOST") {
                txtMemNo.setText(CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_NO")));
                observable.setTxtMemNo(CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_NO")));
                txtMemName.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMER")));
                observable.setTxtMemNo(CommonUtil.convertObjToStr(hash.get("CUSTOMER")));
                txtMemType.setText(CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_CLASS")));
                observable.setTxtMemNo(CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_CLASS")));
            } else if (viewType == "OWNER_MEMBER_NO") {
                String memberNo = txtOwnerMemNo.getText();
                if (tblCollateral.getRowCount() > 0) {
                    for (int i = 0; i < tblCollateral.getRowCount(); i++) {
                        String membNo = CommonUtil.convertObjToStr(tblCollateral.getValueAt(i, 0));
//                        if (memberNo.equalsIgnoreCase(membNo) && !updateMode) {
//                            ClientUtil.displayAlert("Member No Already Exists in this Table");
//                            resetCollateralDetails();
//                            btnSecurityCollateral(false);
//                            btnCollateralNew.setEnabled(true);
//                            btnOwnerMemNo.setEnabled(false);
//                            ClientUtil.enableDisable(panCollatetalDetails, false);
//                            return;
//                        }
                    }
                }
                txtOwnerMemNo.setText(CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_NO")));
                observable.setDocGenId(CommonUtil.convertObjToStr(hash.get("DOCUMENT_GEN_ID")));
                collateralJointAccountDisplay(txtOwnerMemNo.getText());
                observable.setTxtOwnerMemNo(txtExistingAcctNo.getText());//CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_NO")));
                txtOwnerMemberNname.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMER")));
                observable.setTxtOwnerMemberNname(CommonUtil.convertObjToStr(hash.get("CUSTOMER")));
                observable.setDocGenId("");
            } else if (viewType == "OWNER_MEMBER_NO_GAHAN") {
                String memberNo = txtOwnerMemNo.getText();
                if (tblCollateral.getRowCount() > 0) {
                    for (int i = 0; i < tblCollateral.getRowCount(); i++) {
                        String membNo = CommonUtil.convertObjToStr(tblCollateral.getValueAt(i, 0));
//                        if (memberNo.equalsIgnoreCase(membNo) && !updateMode) {
//                            ClientUtil.displayAlert("Member No Already Exists in this Table");
//                            resetCollateralDetails();
//                            btnSecurityCollateral(false);
//                            btnCollateralNew.setEnabled(true);
//                            btnOwnerMemNo.setEnabled(false);
//                            ClientUtil.enableDisable(panCollatetalDetails, false);
//                            return;
//                        }
                    }
                }
                txtOwnerMemNo.setText(CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_NO")));
                observable.setDocGenId(CommonUtil.convertObjToStr(hash.get("DOCUMENT_GEN_ID")));
                observable.setRdoGahanYes(true);
                collateralJointAccountDisplay(txtOwnerMemNo.getText());
                observable.setTxtOwnerMemNo(txtExistingAcctNo.getText());//CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_NO")));
                txtOwnerMemberNname.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMER")));
                observable.setTxtOwnerMemberNname(CommonUtil.convertObjToStr(hash.get("CUSTOMER")));
                observable.setDocGenId("");
            } else if (viewType == "DOCUMENT_NO") {
                HashMap documentMap = new HashMap();
                String documentNo = txtDocumentNo.getText();
                double sanctionAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText()).doubleValue();
                String loanExpiryDt = CommonUtil.convertObjToStr(tdtTDate.getDateValue());
                String loanStartDt = CommonUtil.convertObjToStr(tdtAccountOpenDate.getDateValue());
                docGenIdValue = hash.get("DOCUMENT_GEN_ID").toString();
                if (loanExpiryDt.length() == 0 || sanctionAmt <= 0) {
                    ClientUtil.displayAlert("Enter the Sanction Details ");
                    return;
                }
                documentMap.put("DOCUMENT_GEN_ID", CommonUtil.convertObjToStr(hash.get("DOCUMENT_GEN_ID")));
                documentMap.put("DOCUMENT_NO", CommonUtil.convertObjToStr(hash.get("DOCUMENT_NO")));
                documentMap.put("SANCTION_AMT", new Double(sanctionAmt));
                documentMap.put("LOAN_EXPIRY_DT", DateUtil.getDateMMDDYYYY(loanExpiryDt));
                documentMap.put("ACCT_OPEN_DT", DateUtil.getDateMMDDYYYY(loanStartDt));
                if (getDocumentDetails(documentMap)) {
                    return;
                }
                //                tdtTDate.getText();

                //                if(tblCollateral.getRowCount()>0) {
                //                    for(int i=0;i<tblCollateral.getRowCount();i++){
                //                        String membNo = CommonUtil.convertObjToStr(tblCollateral.getValueAt(i,0));
                //                        if(memberNo.equalsIgnoreCase(membNo) && !updateMode) {
                //                            ClientUtil.displayAlert("Member No Already Exists in this Table");
                //                            resetCollateralDetails();
                //                            btnSecurityCollateral(false);
                //                            btnCollateralNew.setEnabled(true);
                //                            btnOwnerMemNo.setEnabled(false);
                //                            ClientUtil.enableDisable(panCollatetalDetails,false);
                //                            return;
                //                        }
                //                    }
                //                }
                txtOwnerMemNo.setText(CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_NO")));
                observable.setTxtOwnerMemNo(CommonUtil.convertObjToStr(hash.get("MEMBERSHIP_NO")));
                txtOwnerMemberNname.setText(CommonUtil.convertObjToStr(hash.get("CUSTOMER")));
                observable.setTxtOwnerMemberNname(CommonUtil.convertObjToStr(hash.get("CUSTOMER")));
            }else if (viewType == "GOLD_SECURITY_STOCK") {
                System.out.println("GOLD_SECURITY_STOCK :: " + hash);
                txtJewelleryDetails.setText(CommonUtil.convertObjToStr(hash.get("PARTICULARS")));
                txtGrossWeight.setText(CommonUtil.convertObjToStr(hash.get("GROSS_WEIGHT")));
                txtNetWeight.setText(CommonUtil.convertObjToStr(hash.get("NET_WEIGHT")));                
                UpdateCalculatedGoldSecurityValue(hash);
                txtGoldSecurityId.setText(CommonUtil.convertObjToStr(hash.get("GOLD_SECURITY_ID")));
               
            }else if (viewType.equals("DEPOSIT_ACC_NO")) {
                String prodType = ((ComboBoxModel) cboProductTypeSecurity.getModel()).getKeyForSelected().toString();
                if (prodType.equals("TD")) {
                    txtDepNo.setText(CommonUtil.convertObjToStr(hash.get("ACT_NUM")));
                    HashMap whereMap = new HashMap();
                    whereMap.put("DEPOSIT NO", hash.get("ACT_NUM"));
                    List accountLst = ClientUtil.executeQuery("getSelectDepSubNoAccInfoTO", whereMap);
                    if (accountLst != null && accountLst.size() > 0) {
                        whereMap = (HashMap) accountLst.get(0);
                        tdtDepDt.setDateValue(CommonUtil.convertObjToStr(whereMap.get("DEPOSIT_DT")));
                        txtDepAmount.setText(CommonUtil.convertObjToStr(hash.get("AMOUNT")));
                        txtRateOfInterest.setText(CommonUtil.convertObjToStr(whereMap.get("RATE_OF_INT")));
                        txtMaturityValue.setText(CommonUtil.convertObjToStr(whereMap.get("MATURITY_AMT")));
                        txtMaturityDt.setDateValue(CommonUtil.convertObjToStr(whereMap.get("MATURITY_DT")));
                    }
                } else {
                    txtDepNo.setText(CommonUtil.convertObjToStr(hash.get("CHITTAL_NO")));
                    tdtDepDt.setDateValue(CommonUtil.convertObjToStr(hash.get("START_DT")));
                    txtDepAmount.setText(CommonUtil.convertObjToStr(hash.get("INST_AMT")));
                    txtMaturityValue.setText(CommonUtil.convertObjToStr(hash.get("PAID_AMOUNT")));
                    txtMaturityDt.setDateValue(CommonUtil.convertObjToStr(hash.get("END_DT")));
                }
                calculateTot();
            } else if (viewType.equals("DISBURSEMENT_DETAILS")) {
                populateDisbursementDetails(hash);
            } else if (viewType.equals("EXISTING_CUSTOMER") && txtExistingAcctNo.getText().length() > 0) {
                HashMap hashmap = new HashMap();
                String custid = CommonUtil.convertObjToStr(CommonUtil.convertObjToStr(hash.get("CUST_ID")));
                hashmap.put("CUST_ID", custid);
                hashmap.put("MEMBER_NO", CommonUtil.convertObjToStr(txtExistingAcctNo.getText()));
                List lst1 = ClientUtil.executeQuery("getDeathDetailsForAcsOpening", hashmap);
                if (lst1 != null && lst1.size() > 0) {
                    ClientUtil.displayAlert("Customer is death marked please select another customerId");
                    txtExistingAcctNo.setText("");
                    txtCustID.setText("");
                    return;
                }
                txtCustID.setText(CommonUtil.convertObjToStr(hash.get("CUST_ID")));
                custInfoDisplay(CommonUtil.convertObjToStr(hash.get("CUST_ID")), loanType);
                hash.put("CUSTOMER ID", hash.get("CUST_ID"));
                displayShareDetails(hash);
            } else if (viewType.equals("GUARANTOR_ACCT_NO")) {
                observableGuarantor.setTxtGuaranAccNo(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
                txtGuaranAccNo.setText(observableGuarantor.getTxtGuaranAccNo());
                observableGuarantor.setCboConstitution_GD(CommonUtil.convertObjToStr(observableGuarantor.getCbmConstitution_GD().getDataForKey(CommonUtil.convertObjToStr(hash.get("CONSTITUTION")))));
                cboConstitution_GD.setSelectedItem(observableGuarantor.getCboConstitution_GD());
            } else if (viewType.equals("DEPOSIT_CUSTOMER")) {
                //System.out.println("### DEPOSIT_CUSTOMER fillData hash : " + hash);
                if (observable.isDepositDaily(hash)) {
                    DateUtil.getStringDate(date);
                    ClientUtil.showAlertWindow("This Daily Deposit Not Eligible for Loan " + "\n"
                            + "This Deposit Opened On :" + DateUtil.getStringDate((Date) hash.get("DEPOSIT_DT")) + "\n"
                            + "Deposit should Run for Minimum period " + CommonUtil.convertObjToDouble(hash.get("PREMATURE_WITHDRAWAL")) + " days From the Date of Deposit");
                    // "Deposit Open Date is  :"+DateUtil.dateDiff((Date)hash.get("DEPOSIT_DT"), ClientUtil.getCurrentDate())+"\n"+
                    return;
                }

                double bal = CommonUtil.convertObjToDouble(hash.get("BALANCE")).doubleValue();
                observable.setDepositNo("");
                observable.setDepositNo(CommonUtil.convertObjToStr(hash.get("DEPOSIT_NO")));
                observable.setLblDepositNo(CommonUtil.convertObjToStr(hash.get("DEPOSIT_NO")));
                //                lblDepositNo.setText(CommonUtil.convertObjToStr(hash.get("DEPOSIT_NO")));
                if (bal > 0) {
                    //                    depositSanctionRoundOff(bal*(observable.getEligibleMargin()/100.0));
                    txtLimit_SD.setText(String.valueOf(depositSanctionRoundOff(bal * (observable.getEligibleMargin() / 100.0))));//85
                    //
                    boolean checkSameCustomer = observable.setDetailsForLTD(hash);
                    if (checkSameCustomer) {

                        setAllSanctionFacilityEnableDisable(true);
                        cboTypeOfFacility.setEnabled(false);
                        tdtFacility_Repay_Date.setDateValue(tdtFDate.getDateValue());//for need ltd
                        tdtFacility_Repay_Date.setDateValue(observable.tdtRepaymentDate);//observable.getTdtTDate());
                        tdtTDate.setDateValue(observable.tdtRepaymentDate);
                        rdoInterest_Compound.setSelected(observable.getRdoInterest_Compound());
                        rdoInterest_Simple.setSelected(observable.getRdoInterest_Simple());
                        cboRepayFreq.setSelectedItem(
                                ((ComboBoxModel) cboRepayFreq.getModel()).getDataForKey("1"));
                        txtNoInstallments.setText("1");
                        txtNoInstallmentsFocusLost();
                        rdoSecurityDetails_Fully.setSelected(true);
                        deleteAllInterestDetails();
                        populateInterestRateForLTD();
                        //                    observable.setCboProductId(CommonUtil.convertObjToStr(hash.get("PRODUCT ID")));
                        //                    cboProductId.setSelectedItem(
                        //                    ((ComboBoxModel) cboProductId.getModel()).getDataForKey(CommonUtil.convertObjToStr(hash.get("PRODUCT ID"))));

                    } else {
                        setAllSanctionFacilityEnableDisable(false);
                        txtLimit_SD.setText("");
                    }
                } else {
                    //                    ClientUtil.showAlertWindow("Deposit Amount is Zero");
                    ClientUtil.showMessageWindow("Deposit Amount is Zero");
                    return;
                }
            } else if (viewType.equals("PADDY_CUSTOMER")) {
                //System.out.println("### PADDY_CUSTOMER fillData hash : " + hash);

                double bal = CommonUtil.convertObjToDouble(hash.get("AMOUNT")).doubleValue();
                observable.setDepositNo(CommonUtil.convertObjToStr(hash.get("CND_NO")));
                observable.setLblDepositNo(CommonUtil.convertObjToStr(hash.get("CND_NO")));
                //                lblDepositNo.setText(CommonUtil.convertObjToStr(hash.get("CND_NO")));
                lblPurchaseIDVal.setText(CommonUtil.convertObjToStr(hash.get("PURCHASE_ID")));
                lblPurchaseNameVal.setText(CommonUtil.convertObjToStr(hash.get("PURCHASE_NAME")));
                lblTransactionDateVal.setText(CommonUtil.convertObjToStr(hash.get("TRANS_DT")));
                lblPurchaseDateVal.setText(CommonUtil.convertObjToStr(hash.get("PURCHASE_DATE")));
                lblTotalWeightVal.setText(CommonUtil.convertObjToStr(hash.get("WEIGHT")));
                lblAcreageVal.setText(CommonUtil.convertObjToStr(hash.get("ACRE")));
                lblPurchaseAmountVal.setText(CommonUtil.convertObjToStr(hash.get("AMOUNT")));
                if (bal > 0) {
                    eligibleAmt = depositSanctionRoundOff(bal * (observable.getEligibleMargin() / 100.0));
                    txtLimit_SD.setText(String.valueOf(eligibleAmt));

                    setAllSanctionFacilityEnableDisable(true);
                    cboTypeOfFacility.setEnabled(false);
                    tdtFacility_Repay_Date.setDateValue(tdtFDate.getDateValue());//for need ltd
                    rdoInterest_Compound.setSelected(observable.getRdoInterest_Compound());
                    rdoInterest_Simple.setSelected(observable.getRdoInterest_Simple());
                    rdoSecurityDetails_Unsec.setSelected(true);
                    cboRepayFreq.setSelectedItem(
                            ((ComboBoxModel) cboRepayFreq.getModel()).getDataForKey("1"));
                    txtNoInstallments.setText("1");
                    txtNoInstallmentsFocusLost();
                    deleteAllInterestDetails();
                } else {
                    //                    ClientUtil.showAlertWindow("Deposit Amount is Zero");
                    ClientUtil.showMessageWindow("Paddy Amount is Zero");
                    return;
                }
            } else if (viewType.equals("MDS_CUSTOMER")) {
                //System.out.println("### MDS_CUSTOMER fillData hash : " + hash);

                double bal = CommonUtil.convertObjToDouble(hash.get("AMOUNT")).doubleValue();
                observable.setDepositNo(CommonUtil.convertObjToStr(hash.get("CHITTAL_NO")));
                observable.setLblDepositNo(CommonUtil.convertObjToStr(hash.get("CHITTAL_NO")));
                //                lblDepositNo.setText(CommonUtil.convertObjToStr(hash.get("CHITTAL_NO")));
                lblMDSMemberNoVal.setText(CommonUtil.convertObjToStr(hash.get("MEMBER_NO")));
                lblMDSMemberTypeVal.setText(CommonUtil.convertObjToStr(hash.get("MEMBER_TYPE")));
                lblMDSMemberNameVal.setText(CommonUtil.convertObjToStr(hash.get("MEMBER_NAME")));
                lblMDSChitAmountPaidVal.setText(CommonUtil.convertObjToStr(hash.get("AMOUNT")));
                if (bal > 0) {
                    eligibleAmt = depositSanctionRoundOff(bal * (observable.getEligibleMargin() / 100.0));
                    txtLimit_SD.setText(String.valueOf(eligibleAmt));//85

                    setAllSanctionFacilityEnableDisable(true);
                    cboTypeOfFacility.setEnabled(false);
                    tdtFacility_Repay_Date.setDateValue(tdtFDate.getDateValue());//for need ltd
                    rdoInterest_Compound.setSelected(observable.getRdoInterest_Compound());
                    rdoInterest_Simple.setSelected(observable.getRdoInterest_Simple());
                    rdoSecurityDetails_Unsec.setSelected(true);
                    cboRepayFreq.setSelectedItem(
                            ((ComboBoxModel) cboRepayFreq.getModel()).getDataForKey("1"));
                    txtNoInstallments.setText("1");
                    txtNoInstallmentsFocusLost();
                    deleteAllInterestDetails();
                } else {
                    //                    ClientUtil.showAlertWindow("Deposit Amount is Zero");
                    ClientUtil.showMessageWindow("MDS Amount is Zero");
                    return;
                }
            } else if (viewType.equals("SHG_ID")) {
                observableComp.resetCustomerDetails();
                txtSHGId.setText(CommonUtil.convertObjToStr(hash.get("SHG_ID")));
            } else if (viewType.equals("SUBSIDY_GL")) {
                txtSubsidyAccHead.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD")));
            }
            if (viewType.equals("Edit")) {
                if (txtSHGId.getText().length() > 0) {
                    HashMap whereMap = new HashMap();
                    whereMap.put("ACCT_NUM", lblAcctNo_Sanction_Disp.getText());
                    List lst = ClientUtil.executeQuery("getLoanAccountNoAuthorizeDt", whereMap);
                    if (lst != null && lst.size() > 0) {
                        whereMap = (HashMap) lst.get(0);
                        String authDate = CommonUtil.convertObjToStr(whereMap.get("AUTHORIZE_DT"));
                        if (authDate.length() > 0) {
                            txtSHGId.setEnabled(false);
                            btnSHGId.setEnabled(false);
                        } else {
                            txtSHGId.setEnabled(true);
                            btnSHGId.setEnabled(true);

                        }
                    }
                }
                //Added By Suresh
                chkMobileBankingTLAD.setEnabled(true);
                chkMobileBankingTLADActionPerformed(null);
                cboRepayFreq.setEnabled(true);
                txtNoInstallments.setEnabled(true);
            }
            //Added By Suresh
            if (!loanType.equals("LTD") && viewType.equals("Edit") || viewType.equals("Delete") || viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION)
                    || viewType.equals(REJECT) || viewType.equals("Enquirystatus")) {
                prodDesc = CommonUtil.convertObjToStr(cboProductId.getModel().getSelectedItem());
                editChargeTable();
                if (tableFlag) {
                    editChargeAmount();
                    panChargeDetails.setEnabled(false);
                    srpChargeDetails.setEnabled(false);
                    table.remove(0);
                    table.setEnabled(false);
                }
            }
        }
        if (viewType.equals("Delete") || (observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT))) {
            setAllBorrowerBtnsEnableDisable(false);
            additionalSanctionbtnEnableDisable(false);
            btnPermittedBy.setEnabled(false);

        }
        if (loanType.equals("OTHERS")) {
            tabLimitAmount.remove(panAdditionalSanctionDetails);
        } else {
            if (observable.getProductCategory().equals("OTHER_LOAN")) {
                tabLimitAmount.addTab("Additional Sanction Details", panAdditionalSanctionDetails);
            } else {
                tabLimitAmount.remove(panAdditionalSanctionDetails);
            }
            tabLimitAmount.remove(panCaseDetails);
        }
        if (hash.containsKey("FROM_AUTHORIZE_LIST_UI")) {
            btnSave.setEnabled(false);
            btnCancel.setEnabled(true);
            btnReject.setEnabled(true);
            btnView.setEnabled(false);
            btnAuthorize.setEnabled(true);
            
        }
        if (hash.containsKey("FROM_MANAGER_AUTHORIZE_LIST_UI")) {
            btnSave.setEnabled(false);
            btnCancel.setEnabled(true);
            btnReject.setEnabled(true);
            btnView.setEnabled(false);
            btnAuthorize.setEnabled(true);
            
        }
        if (loanType.equals("OTHERS") && observable.getActionType() != ClientConstants.ACTIONTYPE_NEW) {
            tabLimitAmount.addTab("Case Details", panCaseDetails);
        }
        //View MemberShip Liabolity
        if (txtCustID.getText().length() > 0) {
            btnMembershipLia.setEnabled(true);
        } else {
            btnMembershipLia.setEnabled(false);
        }
        if (viewType.equals("ACCT_NO")) {
            txtDirectRepaymentAcctNo.setText(CommonUtil.convertObjToStr(hash.get("ACCOUNTNO")));
        }
        if (viewType.equals("DIRAC_HEAD")) {
            txtDirectRepaymentAcctHead.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD")));
        }
        setModified(true);
        if (rejectFlag == 1) {
            btnReject.setEnabled(false);
        }
        if(observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE){
        btnAuthorize.setEnabled(true);
        btnAuthorize.requestFocusInWindow();
        }
        if(observable.getActionType()==ClientConstants.ACTIONTYPE_EDIT){
            if(chkMoratorium_Given.isSelected()==true){
                txtFacility_Moratorium_Period.setEnabled(true);
            }
             btnMemberNew.setEnabled(true);
        }
    }

    private boolean getDocumentDetails(HashMap documentMap) {
        //System.out.println("document Map" + documentMap);
        List lst = ClientUtil.executeQuery("getSelectGahanDocumentDetails", documentMap);
        if (lst != null && lst.size() > 0) {
            HashMap dataMap = (HashMap) lst.get(0);
            Date gahanExpDt = (Date) dataMap.get("GAHAN_EXP_DT");
            Date gahanReleaseDt = (Date) dataMap.get("GAHAN_RELEASE_DT");
            double sanctionAmt = CommonUtil.convertObjToDouble(documentMap.get("SANCTION_AMT")).doubleValue();
            double pledgeAmt = CommonUtil.convertObjToDouble(dataMap.get("PLEDGE_AMT")).doubleValue();
            if (gahanExpDt != null) {
                if (DateUtil.dateDiff((Date) documentMap.get("ACCT_OPEN_DT"), gahanExpDt) <= 0) {
                    ClientUtil.displayAlert("Gahan has expired.. " + "\n" + " Select another Gahan number");
                    return true;
                }
                if (DateUtil.dateDiff((Date) documentMap.get("LOAN_EXPIRY_DT"), gahanExpDt) <= 0) {
                    ClientUtil.displayAlert("Gahan expires before the Loan Expiry Date. " + "\n" + " Choose another Gahan number");
                    return true;
                }
            }
            if (gahanReleaseDt != null) {
                if (DateUtil.dateDiff((Date) documentMap.get("ACCT_OPEN_DT"), gahanReleaseDt) <= 0) {
                    ClientUtil.displayAlert("Gahan has been Released on   :" + DateUtil.getStringDate(gahanReleaseDt) + "\n" + "Choose  another Gahan Number");
                    return true;
                }
            }

            updateGahandetails(dataMap);
            //            else if(sanctionAmt>pledgeAmt){
            //                  ClientUtil.displayAlert("Document Security not sufficient for loan");
            //                return true;
            //            }
        } else {
            return true;
        }
        return false;
    }

    private void updateGahandetails(HashMap map) {
        //System.out.println("map####" + map);
        double pledgeAmt = 0;
        double actualPledge = 0;
        List lst = ClientUtil.executeQuery("getUnAuthLoanSecurityLandDetails", map);
        if (lst != null && lst.size() > 0) {
            ClientUtil.displayAlert("Already record is pending for authorization for this member");
            return;
        }

        //        if(observable.isRdoGahanYes())
        //            rdoGahanYes.setSelected(observable.isRdoGahanYes());
        //        else
        //            rdoGahanNo.setSelected(observable.isRdoGahanNo());
        txtOwnerMemNo.setText(CommonUtil.convertObjToStr(map.get("NATURE")));
        txtOwnerMemberNname.setText(CommonUtil.convertObjToStr(map.get("NATURE")));
        txtDocumentNo.setText(CommonUtil.convertObjToStr(map.get("DOCUMENT_NO")));
        //        txtDocumentType.setText(CommonUtil.convertObjToStr(map.get("DOCUMENT_TYPE")));
        cboDocumentType.setSelectedItem(CommonUtil.convertObjToStr(map.get("DOCUMENT_TYPE")));
        tdtDocumentDate.setDateValue(CommonUtil.convertObjToStr(map.get("DOCUMENT_DT")));
        txtRegisteredOffice.setText(CommonUtil.convertObjToStr(map.get("REGISTRED_OFFICE")));
        cboPledge.setSelectedItem(CommonUtil.convertObjToStr(map.get("PLEDGE")));
        tdtPledgeDate.setDateValue(CommonUtil.convertObjToStr(map.get("PLEDGE_DT")));
        txtPledgeNo.setText(CommonUtil.convertObjToStr(map.get("PLEDGE_NO")));
        actualPledge = checkAvailableSecurity(CommonUtil.convertObjToStr(map.get("DOCUMENT_GEN_ID")));
        //System.out.println("actualPledge===" + actualPledge);
        Double gahanLnAmt = getPldgeAmountForLoan(CommonUtil.convertObjToStr(map.get("DOCUMENT_GEN_ID")));
        //System.out.println("gahanLnAmt====" + gahanLnAmt);
        actualPledge = actualPledge + gahanLnAmt;
        Double gahanMdsAmt = getPldgeAmtForMds(CommonUtil.convertObjToStr(map.get("DOCUMENT_GEN_ID")));
        //System.out.println("gahanMdsAmt====" + gahanMdsAmt);
        actualPledge = actualPledge - gahanMdsAmt;
        pledgeAmt = getGahanAvailableSecurity(actualPledge);

        Double sanAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText().toString());
        //System.out.println("sanAmtsanAmt=====" + sanAmt);
        if (sanAmt < pledgeAmt) {
            txtPledgeAmount.setText(String.valueOf(sanAmt));
        } else {
            txtPledgeAmount.setText(String.valueOf(pledgeAmt));
        }
        //getPldgeAmount();
        txtVillage.setText(CommonUtil.convertObjToStr(map.get("VILLAGE")));
        txtSurveyNo.setText(CommonUtil.convertObjToStr(map.get("SARVEY_NO")));
        txtTotalArea.setText(CommonUtil.convertObjToStr(map.get("TOTAL_AREA")));
        cboNature.setSelectedItem(CommonUtil.convertObjToStr(map.get("NATURE")));
        cboRight.setSelectedItem(CommonUtil.convertObjToStr(map.get("RIGHT")));
        txtAreaParticular.setText(observable.getTxtAreaParticular());
        observable.setDocGenId(CommonUtil.convertObjToStr(map.get("DOCUMENT_GEN_ID")));

        observable.addPledgeAmountMap(CommonUtil.convertObjToStr(map.get("DOCUMENT_NO")), actualPledge);

    }

    public double getPldgeAmountForLoan(String doc_gen_id) {
        Double gahanForLn = 0.0;
        HashMap mapDocGenId = new HashMap();
        mapDocGenId.put("DOC_GEN_ID", doc_gen_id);
        if(loanRenewal || closingInProgress){
           mapDocGenId.put("LOAN_RENEWAL","LOAN_RENEWAL"); 
        }
        List lstGahanForLn = ClientUtil.executeQuery("getSelGahanForLn", mapDocGenId);
        if (!lstGahanForLn.isEmpty() && !lstGahanForLn.equals(null)) {
            mapDocGenId = new HashMap();
            mapDocGenId = (HashMap) lstGahanForLn.get(0);
//            if(mapDocGenId.containsValue("CLEARBAL"))
//            {
            gahanForLn = CommonUtil.convertObjToDouble(mapDocGenId.get("CLEARBAL"));
//            }   
        }
        return gahanForLn;
    }

    public double getPldgeAmtForMds(String doc_gen_id) {
        Double gahanForMDS = 0.0;
        HashMap mapDocGenId = new HashMap();
        mapDocGenId.put("DOC_GEN_ID", doc_gen_id);
        List lstGahanForMds = ClientUtil.executeQuery("getSelGahanForMds", mapDocGenId);
        if (!lstGahanForMds.isEmpty() && !lstGahanForMds.equals(null)) {
            mapDocGenId = new HashMap();
            mapDocGenId = (HashMap) lstGahanForMds.get(0);
//            if(mapDocGenId.containsValue("AMOUNT"))
//            {
            gahanForMDS = CommonUtil.convertObjToDouble(mapDocGenId.get("AMOUNT"));
//            }   
        }
        return gahanForMDS;
    }

    private void enableDisableSanctionDetails(boolean flag) {
        cboTypeOfFacility.setEnabled(flag);
        cboProductId.setEnabled(flag);
        cboModeSanction.setEnabled(flag);
        cboSanctioningAuthority.setEnabled(flag);
        cboInterestType.setEnabled(flag);
        txtSanctionSlNo.setEnabled(flag);
        txtSanctionNo.setEnabled(flag);
        tdtSanctionDate.setEnabled(flag);
        //comented by rishad 26/03/2014
       // txtLimit_SD.setEnabled(flag);
        txtFacility_Moratorium_Period.setEnabled(flag);
        txtNoInstallments.setEnabled(flag);
        cboRepayFreq.setEnabled(flag);
        tdtFDate.setEnabled(flag);
        tdtFacility_Repay_Date.setEnabled(flag);
        tdtTDate.setEnabled(flag);
    }

    private long depositSanctionRoundOff(double limit) {
        Rounding re = new Rounding();
        long roundOffValue = 0;
        //        CommonUtil.convertObjToLong(
        long longLimit = (long) limit;
        if (observable.getSanctionAmtRoundOff().length() > 0) {
            String roundOff = observable.getSanctionAmtRoundOff();
            if (roundOff.length() > 0) {
                if (roundOff.equals("NEAREST_TENS")) {
                    roundOffValue = 10;
                }
                if (roundOff.equals("NEAREST_HUNDREDS")) {
                    roundOffValue = 100;
                }
                if (roundOff.equals("NEAREST_VALUE")) {
                    roundOffValue = 1;
                }
            }
            //         long lienAmt=(long)(enterAmt/eligibleMargin);
            Rounding rd = new Rounding();
            /* lien marked next higher but limit marked lower  */
            if (!roundOff.equals("NO_ROUND_OFF")) {
                longLimit = rd.lower(longLimit, roundOffValue);
            }
        }
        return longLimit;
    }

    private void updateGuarantorTabCustDetails() {
        txtCustomerID_GD.setText(observableGuarantor.getTxtCustomerID_GD());
        txtGuaranName.setText(observableGuarantor.getTxtGuaranName());
        tdtAsOn_GD.setDateValue(observableGuarantor.getTdtAsOn_GD());
        txtArea_GD.setText(observableGuarantor.getTxtArea_GD());
        txtStreet_GD.setText(observableGuarantor.getTxtStreet_GD());
        txtPin_GD.setText(observableGuarantor.getTxtPin_GD());
        cboCity_GD.setSelectedItem(observableGuarantor.getCboCity_GD());
        cboState_GD.setSelectedItem(observableGuarantor.getCboState_GD());
        cboCountry_GD.setSelectedItem(observableGuarantor.getCboCountry_GD());
        txtPhone_GD.setText(observableGuarantor.getTxtPhone_GD());
        txtGuarantorNetWorth.setText(observableGuarantor.getTxtGuarantorNetWorth());
        tdtDOB_GD.setDateValue(observableGuarantor.getTdtDOB_GD());
    }

    private void custInfoDisplay(String Cust_ID, String loanType) {
        HashMap hash = new HashMap();
        hash.put("CUST_ID", Cust_ID);
        // Remove the old Main CUSTOMER ID
        authSignUI.removeAcctLevelCustomer(observableBorrow.getTxtCustID());
        if (observableBorrow.populateBorrowerTabCustomerDetails(hash, false, loanType)) {
            //            setCompanyDetailsEnableDisable(true);
            authSignUI.addAcctLevelCustomer(observableBorrow.getTxtCustID());
            updateBorrowerTabCustDetails();
            txtCustID.setText(observableBorrow.getTxtCustID());
            tblBorrowerTabCTable.setModel(observableBorrow.getTblBorrower());
            //System.out.println("inside custinfo@@@@@@@@");
            observableBorrow.populateBorrowerTabCustFields(hash, CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(0, 2)));
            updateBorrowerTabCustFields();
            hash = null;
        } else {
            txtCustID.setText(observableBorrow.getTxtCustID());
            //            setCompanyDetailsEnableDisable(false);
        }
        // Add the new Main CUSTOMER ID
       /* authSignUI.addAcctLevelCustomer(observableBorrow.getTxtCustID());
         updateBorrowerTabCustDetails();
         txtCustID.setText(observableBorrow.getTxtCustID());
         tblBorrowerTabCTable.setModel(observableBorrow.getTblBorrower());
         //System.out.println("inside custinfo@@@@@@@@");
         observableBorrow.populateBorrowerTabCustFields(hash, CommonUtil.convertObjToStr(tblBorrowerTabCTable.getValueAt(0, 2)));
         updateBorrowerTabCustFields();
         hash = null;*/
    }

    private void updateBorrowerTabCustFields() {
        //        txtNetWorth.setText(observableComp.getTxtNetWorth());
        //        txtRiskRating.setText(observableComp.getTxtRiskRating());
        //        tdtCreditFacilityAvailSince.setDateValue(observableComp.getTdtCreditFacilityAvailSince());
        //        tdtDealingWithBankSince.setDateValue(observableComp.getTdtDealingWithBankSince());
        //        cboNatureBusiness.setSelectedItem(observableComp.getCboNatureBusiness());
        //        tdtAsOn.setDateValue(observableComp.getTdtAsOn());
        updateCompanyDetails();
    }

    private void updateCompanyDetails() {
        //        cboAddressType.setSelectedItem(observableComp.getCboAddressType());
        //        cboCity_CompDetail.setSelectedItem(observableComp.getCboCity_CompDetail());
        //        cboCountry_CompDetail.setSelectedItem(observableComp.getCboCountry_CompDetail());
        //        cboState_CompDetail.setSelectedItem(observableComp.getCboState_CompDetail());
        //        txtCompanyRegisNo.setText(observableComp.getTxtCompanyRegisNo());
        //        tdtDateEstablishment.setDateValue(observableComp.getTdtDateEstablishment());
        //        txtChiefExecutiveName.setText(observableComp.getTxtChiefExecutiveName());
        //        txtPin_CompDetail.setText(observableComp.getTxtPin_CompDetail());
        //        txtPhone_CompDetail.setText(observableComp.getTxtPhone_CompDetail());
        //        txtStreet_CompDetail.setText(observableComp.getTxtStreet_CompDetail());
        //        txtArea_CompDetail.setText(observableComp.getTxtArea_CompDetail());
    }

    private void updateBorrowerTabCustDetails() {
        lblCustName_2.setText(observableBorrow.getLblCustName());
        lblOpenDate2.setText(observableBorrow.getLblOpenDate());
        lblCity_BorrowerProfile_2.setText(observableBorrow.getLblCity());
        lblState_BorrowerProfile_2.setText(observableBorrow.getLblState());
        lblPin_BorrowerProfile_2.setText(observableBorrow.getLblPin());
        lblPhone_BorrowerProfile_2.setText(observableBorrow.getLblPhone());
        lblFax_BorrowerProfile_2.setText(observableBorrow.getLblFax());
    }

    private void jointAcctDisplay(String Cust_ID) {
        HashMap hash = new HashMap();
        hash.put("CUST_ID", Cust_ID);
        observableBorrow.populateJointAccntTable(hash);
        tblBorrowerTabCTable.setModel(observableBorrow.getTblBorrower());
        setBorrowerNewOnlyEnable();
        authSignUI.addAcctLevelCustomer(Cust_ID);
        hash = null;
    }

    private void populateDisbursementDetails(HashMap hash) {
        observableRepay.populateDisbursementDetails(hash);
        txtLaonAmt.setText(observableRepay.getTxtLaonAmt());
    }
    private void cboRepayFreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRepayFreqActionPerformed
        // Add your handling code here:
        cboRepayFreqActionPerformed();
    }//GEN-LAST:event_cboRepayFreqActionPerformed

private void btnAppNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAppNoActionPerformed
// TODO add your handling code here:
    callView("APPLICATION_NOS");
    cboCategory.setModel(observableBorrow.getCbmCategory());
    txtLimit_SDFocusLost(null);
    if (observableBorrow.getCbmCategory().getKeyForSelected().equals("") || observableBorrow.getCbmCategory().getKeyForSelected() == null) {
        //System.out.println("keeeeeeee" + observableBorrow.getCbmCategory().getKeyForSelected());
        cboCategory.setSelectedItem(observableBorrow.getCbmCategory().getDataForKey("GENERAL_CATEGORY"));
    }
    HashMap purposeMap = new HashMap();
    String purpose = "";
    //System.out.println("txtApplicationNo.getText()111>>>" + txtApplicationNo.getText());
    purposeMap.put("APPNO", txtApplicationNo.getText());
    List purposeList = ClientUtil.executeQuery("getSelectPurposeCodeFromLoanApplRegstr", purposeMap);
    //System.out.println("purposeList222>>>>>" + purposeList);
    if (purposeList != null && purposeList.size() > 0) {
        purposeMap = (HashMap) purposeList.get(0);
        purpose = CommonUtil.convertObjToStr(purposeMap.get("PURPOSE_CODE"));
    }
    //System.out.println("purpose2222>>>>>>" + purpose);
    if (purpose != null) {
        cboPurposeCode.setSelectedItem(purpose);
    }
}//GEN-LAST:event_btnAppNoActionPerformed

    private void txtLimit_SDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLimit_SDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLimit_SDActionPerformed

    private void txtApplicationNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApplicationNoActionPerformed
        // TODO add your handling code here:
        HashMap purposeMap = new HashMap();
        String purpose = "";
        purposeMap.put("APPNO", txtApplicationNo.getText());
        List purposeList = ClientUtil.executeQuery("getSelectPurposeCodeFromLoanApplRegstr", purposeMap);
        //System.out.println("purposeList3333>>>>>" + purposeList);
        if (purposeList != null && purposeList.size() > 0) {
            purposeMap = (HashMap) purposeList.get(0);
            purpose = CommonUtil.convertObjToStr(purposeMap.get("PURPOSE_CODE"));
        }
        //System.out.println("purpose33333>>>>>>" + purpose);
        if (purpose != null) {
            cboPurposeCode.setSelectedItem(purpose);
        }
    }//GEN-LAST:event_txtApplicationNoActionPerformed

private void cboCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboCategoryActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_cboCategoryActionPerformed

    private void chkRecoveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRecoveryActionPerformed
        // TODO add your handling code here:
        if (chkRecovery.isSelected()) {
            CInternalFrame frm = null;
            frm = new com.see.truetransact.ui.share.ShareUI();
            frm.setSelectedBranchID(getSelectedBranchID());
            TrueTransactMain.showScreen(frm);
            HashMap hash = new HashMap();
            hash.put("SHARE ACCOUNT NO", CommonUtil.convertObjToStr(txtExistingAcctNo.getText()));
            hash.put("SHARE_ACCT_NO", CommonUtil.convertObjToStr(txtExistingAcctNo.getText()));
            hash.put("SHARE_AVAIL_NO", CommonUtil.convertObjToStr(txtBalanceShare.getText()));
            hash.put("FROM_TERM_LOAN", "");
            //System.out.println("hash>>>>@@@>>>>" + hash);
            frm.fillData(hash);
        }
    }//GEN-LAST:event_chkRecoveryActionPerformed

private void ResolutionSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResolutionSearchActionPerformed
callView("RESOLUTIONNO");
    // TODO add your handling code here:
}//GEN-LAST:event_ResolutionSearchActionPerformed

    private void txtMobileNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMobileNoFocusLost
        // TODO add your handling code here:
        tdtMobileSubscribedFrom.setDateValue(CommonUtil.convertObjToStr(curr_dt.clone()));
    }//GEN-LAST:event_txtMobileNoFocusLost

    private void btnDealerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDealerActionPerformed
        // TODO add your handling code here:
        callView("DEALER_ID");
    }//GEN-LAST:event_btnDealerActionPerformed

    private void txtSanctionNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSanctionNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSanctionNoActionPerformed

    private void lblAcctNo_Sanction_DispFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lblAcctNo_Sanction_DispFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_lblAcctNo_Sanction_DispFocusGained

    private void txtMobileNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMobileNoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != java.awt.event.KeyEvent.VK_SPACE)) {
            evt.consume();  // ignore event
        }
    }//GEN-LAST:event_txtMobileNoKeyTyped

    private void cboRepayFreqActionPerformed() {
         if (cboRepayFreq.getSelectedItem().equals("User Defined") || cboRepayFreq.getSelectedItem().equals("Lump Sum")) {
            if ((observable.getLblStatus().equals(ClientConstants.ACTION_STATUS[3])) || (viewType.equals(AUTHORIZE) || viewType.equals(EXCEPTION) || viewType.equals(REJECT))) {
                tdtTDate.setEnabled(false);
            } else {
                if (cboSanRepaymentType.getSelectedItem().equals("User Defined") || cboRepayFreq.getSelectedItem().equals("User Defined")) {
                    if ((cboSanRepaymentType.getSelectedItem().equals("User Defined") && cboRepayFreq.getSelectedItem().equals("User Defined"))) {
                        tdtTDate.setEnabled(false);
                        tdtFDate.setEnabled(false);
                        tdtFacility_Repay_Date.setEnabled(true);
                    } else {
                        tdtTDate.setEnabled(true);
                        tdtFDate.setEnabled(true);
                    }
                }
            }
            moratorium_Given_Calculation();
        } else {
            tdtTDate.setEnabled(false);
            //applicable only new mode
            if (transNew == true && btnNewPressed) {
                observableRepay.setRepaymentFrequency(CommonUtil.convertObjToStr(cboRepayFreq.getSelectedItem()));
            }
            //
            calculateSanctionToDate();
        }
        populatePeriodDifference();
    }

    private void displayAlert(String message) {
        final CMandatoryDialog cmd = new CMandatoryDialog();
        cmd.setMessage(message);
        cmd.setModal(true);
        cmd.show();
    }

    //To enable and disable the textfields and buttons when NEW button is pressed
    private void newPressedEnableDisable(boolean val) {
        poaUI.setPoANewOnlyEnable();
        btnCustomerID_GD.setEnabled(!val);
        btnAccNo.setEnabled(!val);
    }

    //To enable or disable text fields and buttons of all Customer fields
    //in the tabbed panel
    private void setbtnCustEnableDisable(boolean val) {
        btnCustID.setEnabled(val);
        btnCustomerID_GD.setEnabled(val);
        btnAccNo.setEnabled(val);
        authSignUI.setbtnCustEnableDisable(val);
        poaUI.setbtnCustEnableDisable(val);
    }

    private void setBorrowerDetailsEnableDisable(boolean val) {
//        tdtDealingWithBankSince.setEnabled(false);
        //tdtCreditFacilityAvailSince.setEnabled(false);
//        txtRiskRating.setEnabled(val);
//        txtRiskRating.setEditable(false);
//        txtNetWorth.setEnabled(val);
        //        txtNetWorth.setEditable(false);
//        cboNatureBusiness.setEnabled(false);
//        cboNatureBusiness.setEditable(false);
//        tdtAsOn.setEnabled(val);
        //        tdtAsOn.setEnabled(false);
    }

    private void setEnableDisableDirectPayment(boolean flag) {
        cboDirectRepaymentProdType.setEnabled(flag);
        cboDirectRepaymentProdId.setEnabled(flag);
        txtDirectRepaymentAcctHead.setEnabled(flag);
        btnDirectRepaymentAcctHead.setEnabled(flag);
        btnDirectRepaymentAcctNo.setEnabled(flag);
        txtDirectRepaymentAcctNo.setEnabled(flag);
        tdtDirect_Repay_Date.setEnabled(false);
    }

    private void resetDirectPayment() {
        cboDirectRepaymentProdType.setSelectedItem("");
        cboDirectRepaymentProdId.setSelectedItem("");
        txtDirectRepaymentAcctHead.setText("");
        txtDirectRepaymentAcctNo.setText("");

    }

    private void setEnableDisableDirectPaymentAcctHead(boolean flag) {

        txtDirectRepaymentAcctHead.setEnabled(flag);
        btnDirectRepaymentAcctHead.setEnabled(flag);
        btnDirectRepaymentAcctNo.setEnabled(!flag);
        txtDirectRepaymentAcctNo.setEnabled(!flag);

    }
    // To enable and disable all the Tool buttons for the CTable

    private void setAllTableBtnsEnableDisable(boolean val) {
        authSignUI.setAuthTabBtnEnableDisable(val);
        authSignUI.setAuthInstAllBtnsEnableDisable(val);
        poaUI.setPoAToolBtnsEnableDisable(val);
        setSanctionFacilityBtnsEnableDisable(val);
        setSanctionMainBtnsEnableDisable(val);
        setFacilityBtnsEnableDisable(val);
//        setAllSecurityBtnsEnableDisable(val);
        setAllRepaymentBtnsEnableDisable(val);
        setAllGuarantorBtnsEnableDisable(val);
        setAllInterestBtnsEnableDisable(val);
        setAllBorrowerBtnsEnableDisable(val);
        setAllSettlmentEnableDisable(val);
    }

    //To enable and disable the buttons in Santion Facility
    private void setSanctionFacilityBtnsEnableDisable(boolean val) {
//        btnNew1.setEnabled(val);
//        btnSave1.setEnabled(val);
//        btnDelete1.setEnabled(val);
//        btnLTD.setEnabled(val);
    }

    private void setAllSanctionFacilityEnableDisable(boolean val) {
        if (loanType.equals("LTD")) {
            cboTypeOfFacility.setEnabled(false);
            morotoriumEnableDisable(false);
        } else {
            cboTypeOfFacility.setEnabled(val);
        }
        cboProductId.setEnabled(val);
        txtLimit_SD.setEnabled(val);
//        txtLimit_SD2.setEnabled(val);
        tdtFDate.setEnabled(val);
        tdtTDate.setEnabled(false);
        txtNoInstallments.setEnabled(val);
        cboRepayFreq.setEnabled(val);
        tdtFacility_Repay_Date.setEnabled(false);
        txtPeriodDifference_Days.setEnabled(false);
        //        txtPeriodDifference_Days.setEditable(false);
        txtPeriodDifference_Months.setEnabled(false);
        //        txtPeriodDifference_Months.setEditable(false);
        txtPeriodDifference_Years.setEnabled(false);
        //        txtPeriodDifference_Years.setEditable(false);
        chkMoratorium_Given.setEnabled(false);
        txtFacility_Moratorium_Period.setEnabled(false);//val
    }

    private void setSanctionMainBtnsEnableDisable(boolean val) {
//        btnNew2_SD.setEnabled(val);
//        btnSave2_SD.setEnabled(val);
//        btnDelete2_SD.setEnabled(val);
    }

    private void setAllSanctionMainEnableDisable(boolean val) {
        txtSanctionSlNo.setEnabled(val);
        txtSanctionSlNo.setEditable(false);
        txtSanctionNo.setEnabled(val);
        tdtSanctionDate.setEnabled(val);
        cboSanctioningAuthority.setEnabled(val);
        txtSanctionRemarks.setEnabled(val);
        cboModeSanction.setEnabled(val);
    }

    private void setAllFacilityDetailsEnableDisable(boolean val) {
        txtAcct_Name.setEnabled(val);
        if (loanType.equals("LTD")) {
            rdoSecurityDetails_Fully.setEnabled(false);
            rdoSecurityDetails_Partly.setEnabled(false);
            rdoSecurityDetails_Unsec.setEnabled(false);
            rdoMultiDisburseAllow_No.setEnabled(val);
            rdoMultiDisburseAllow_Yes.setEnabled(val);
            chkInsurance.setEnabled(false);
            chkGurantor.setEnabled(false);
            chkStockInspect.setEnabled(false);

        } else {
            rdoSecurityDetails_Fully.setEnabled(val);
            rdoSecurityDetails_Partly.setEnabled(val);
            rdoSecurityDetails_Unsec.setEnabled(val);
            rdoMultiDisburseAllow_No.setEnabled(val);
            rdoMultiDisburseAllow_Yes.setEnabled(val);
            chkStockInspect.setEnabled(val);
            chkInsurance.setEnabled(val);
            chkGurantor.setEnabled(val);
            rdoInterest_Simple.setEnabled(false);
            rdoInterest_Compound.setEnabled(false);
        }
        ClientUtil.enableDisable(panOtherFacilityChkBoxes, val);
        chkAccountTransfer.setEnabled(false);//mahila not need so disabled
        cboAccStatus.setEnabled(false);
        if (CommonUtil.convertObjToStr(CommonConstants.OPERATE_MODE).equals(CommonConstants.IMPLEMENTATION)) {
            tdtAccountOpenDate.setEnabled(true);
        } else {
            tdtAccountOpenDate.setEnabled(false);
        }
        tdtAccountCloseDate.setEnabled(false);
        cboRecommendedByType.setEnabled(val);
        //        rdoAccType_New.setEnabled(val);
        //        rdoAccType_Transfered.setEnabled(val);
        rdoAccLimit_Main.setEnabled(val);
        rdoAccLimit_Submit.setEnabled(val);
        rdoRiskWeight_No.setEnabled(val);
        rdoRiskWeight_Yes.setEnabled(val);
        rdoNatureInterest_NonPLR.setEnabled(false);
        rdoNatureInterest_PLR.setEnabled(false);
        cboInterestType.setEnabled(val);
        //        tdtDemandPromNoteDate.setEnabled(val);
        //        tdtDemandPromNoteExpDate.setEnabled(val);
        tdtDemandPromNoteDate.setEnabled(false);
        tdtDemandPromNoteExpDate.setEnabled(false);
        tdtAODDate.setEnabled(val);
        //        rdoSubsidy_No.setEnabled(false);
        //        rdoSubsidy_Yes.setEnabled(false);
        txtPurposeDesc.setEnabled(val);
        txtGroupDesc.setEnabled(false);
        //        rdoInterest_Compound.setEnabled(val);
        //        rdoInterest_Simple.setEnabled(val);
        txtContactPerson.setEnabled(val);
        txtContactPhone.setEnabled(val);
        //        txtRemarks.setEnabled(val);
    }

    private void setFacilityBtnsEnableDisable(boolean val) {
//        btnFacilityDelete.setEnabled(val);
//        btnFacilitySave.setEnabled(val);
    }

    private void setAllRepaymentDetailsEnableDisable(boolean val) {
        txtScheduleNo.setEditable(false);
        if (loanType.equals("OTHERS")) {
             cboRepayType.setEnabled(val);
            btnEMI_Calculate.setEnabled(true);
            tdtFirstInstall.setEnabled(false);
        } else {
            cboRepayType.setEnabled(false);
            btnEMI_Calculate.setEnabled(false);
        }
        if (outStandingAmtRepayment) {
            txtLaonAmt.setEnabled(val);//false
            txtLaonAmt.setEditable(val);//false
            tdtFirstInstall.setEnabled(val);
            cboRepayFreq_Repayment.setEnabled(true);
            txtNoInstall.setEditable(val);//false//bala
            txtNoInstall.setEnabled(val);
            tdtRepayFromDate.setEnabled(val);
            //            txtNoMonthsMora.setEditable(true);
            //            txtNoMonthsMora.setEnabled(val);
            //        tdtLastInstall.setEnabled(val);

        } else {
            txtLaonAmt.setEnabled(false);//false
            txtLaonAmt.setEditable(false);//false
            tdtFirstInstall.setEnabled(false);
            tdtLastInstall.setEnabled(false);
            tdtFirstInstall.setEnabled(false);
            cboRepayFreq_Repayment.setEnabled(true);//changed
            txtNoMonthsMora.setEditable(false);
            tdtRepayFromDate.setEnabled(false);
            //            txtNoMonthsMora.setEnabled(val);
            txtNoInstall.setEditable(false);//false//bala
            //            txtNoInstall.setEnabled(val);

        }
        txtRepayScheduleMode.setEditable(false);
        txtRepayScheduleMode.setEnabled(val);
        tdtLastInstall.setEnabled(false);
        tdtDisbursement_Dt.setEnabled(false);
        txtTotalBaseAmt.setEditable(false);
        txtTotalBaseAmt.setEnabled(false);//val
        txtAmtLastInstall.setEditable(false);
        txtAmtLastInstall.setEnabled(false);//val
        txtAmtPenulInstall.setEditable(false);
        txtAmtPenulInstall.setEnabled(false);//val
        txtTotalInstallAmt.setEditable(false);
        txtTotalInstallAmt.setEnabled(false);//val
        rdoDoAddSIs_No.setEnabled(val);
        rdoDoAddSIs_Yes.setEnabled(val);
        rdoPostDatedCheque_No.setEnabled(val);
        rdoPostDatedCheque_Yes.setEnabled(val);
        if (rdoInActive_Repayment.isSelected()) {
            setRdoRepaymentStatusDisable();
        } else {
            rdoActive_Repayment.setEnabled(val);
            rdoInActive_Repayment.setEnabled(val);
        }
    }

    private void setAllRepaymentBtnsEnableDisable(boolean val) {
        btnRepayment_Delete.setEnabled(val);
        btnRepayment_New.setEnabled(val);
        btnRepayment_Save.setEnabled(val);
    }

    private void setRepaymentBtnsEnableDisable(boolean val) {
        btnRepayment_Delete.setEnabled(!val);
        btnRepayment_New.setEnabled(val);
        btnRepayment_Save.setEnabled(!val);
    }

    private void setRepaymentNewOnlyEnable() {
        btnRepayment_Delete.setEnabled(false);
        //        if (loanType.equals("LTD"))
        //            btnRepayment_New.setEnabled(false);
        //        else
        btnRepayment_New.setEnabled(true);
        btnRepayment_Save.setEnabled(false);
        btnEMI_Calculate.setEnabled(false);
    }

    private void setRepaymentDeleteOnlyDisbale() {
        btnRepayment_Delete.setEnabled(false);
        if (loanType.equals("LTD")) {
            btnRepayment_New.setEnabled(false);
        } else {
            btnRepayment_New.setEnabled(true);
        }
        btnRepayment_Save.setEnabled(true);
        btnEMI_Calculate.setEnabled(true);
    }

    private void setAllGuarantorDetailsEnableDisable(boolean val) {
        txtCustomerID_GD.setEditable(false);
        txtCustomerID_GD.setEnabled(val);
        txtGuaranAccNo.setEditable(false);
        txtGuaranAccNo.setEnabled(val);
        txtGuaranName.setEditable(false);
        txtGuaranName.setEnabled(val);
        txtGuarantorNo.setEnabled(val);
        txtStreet_GD.setEditable(false);
        txtStreet_GD.setEnabled(val);
        txtArea_GD.setEditable(false);
        txtArea_GD.setEnabled(val);
        cboCity_GD.setEnabled(false);
        cboState_GD.setEnabled(false);
        txtPin_GD.setEditable(false);
        txtPin_GD.setEnabled(val);
        txtPhone_GD.setEditable(false);
        txtPhone_GD.setEnabled(val);
        cboConstitution_GD.setEnabled(false);
        txtGuarantorNetWorth.setEditable(false);
        txtGuarantorNetWorth.setEnabled(val);
        tdtAsOn_GD.setEnabled(false);
        cboCountry_GD.setEnabled(false);
        tdtDOB_GD.setEnabled(false);
        cboProdId.setEnabled(val);
        cboProdType.setEnabled(val);
    }

    private void setAllInstitGuarantorDetailsEnableDisable(boolean val) {
        cboPLIName.setEnabled(val);
        cboPLIBranch.setEnabled(val);
        txtGuaratNo.setEnabled(val);
        tdtGuaranDate.setEnabled(val);
        tdtGuaranPeriodFrom.setEnabled(val);
        tdtGuaranPeriodTo.setEnabled(val);
        txtGuaranCommision.setEnabled(val);
        cboGuaranStatus.setEnabled(val);
        tdtStatusDate.setEnabled(val);
        txtGuarnRemarks.setEnabled(val);
    }

    private void setGuarantorDetailsNewOnlyEnabled() {
        btnGuarantorNew.setEnabled(true);
        btnGuarantorSave.setEnabled(false);
        btnGuarantorDelete.setEnabled(false);
    }

    private void setGuarantorDetailsDeleteOnlyDisabled() {
        btnGuarantorNew.setEnabled(true);
        btnGuarantorSave.setEnabled(true);
        btnGuarantorDelete.setEnabled(false);
    }

    private void setAllGuarantorBtnsEnableDisable(boolean val) {
        btnGuarantorNew.setEnabled(val);
        btnGuarantorSave.setEnabled(val);
        btnGuarantorDelete.setEnabled(val);
        rdoGuarnIndividual.setEnabled(val);
        rdoGuarnInsititutional.setEnabled(val);

    }

    private void setAllDocumentDetailsEnableDisable(boolean val) {
        //        rdoYes_DocumentDetails.setEnabled(val);
        //        rdoNo_DocumentDetails.setEnabled(val);
        //        tdtSubmitDate_DocumentDetails.setEnabled(val);
        //        txtRemarks_DocumentDetails.setEnabled(val);
        //        rdoYes_Executed_DOC.setEnabled(val);
        //        rdoNo_Executed_DOC.setEnabled(val);
        //        rdoYes_Mandatory_DOC.setEnabled(val);
        //        rdoNo_Mandatory_DOC.setEnabled(val);
        //        tdtExecuteDate_DOC.setEnabled(val);
        //        tdtExpiryDate_DOC.setEnabled(val);
        ClientUtil.enableDisable(panTabDetails_DocumentDetails, val);
    }

    private void setDocumentToolBtnEnableDisable(boolean val) {
        btnSave_DocumentDetails.setEnabled(val);
    }

    private void setAllInterestDetailsEnableDisable(boolean val) {
        //        tdtFrom.setEnabled(val);
        //        tdtTo.setEnabled(val);
        //        txtFromAmt.setEnabled(val);
        //        txtToAmt.setEnabled(val);
        //        txtInter.setEnabled(val);
        //        txtPenalInter.setEnabled(val);
        //        txtAgainstClearingInter.setEnabled(val);
        //        txtPenalStatement.setEnabled(val);
        //        txtInterExpLimit.setEnabled(val);
        ClientUtil.enableDisable(panTableFields, val);
    }

    private void setInterestDetailsOnlyNewEnabled() {
        btnInterestMaintenanceNew.setEnabled(true);
        btnInterestMaintenanceSave.setEnabled(false);
        btnInterestMaintenanceDelete.setEnabled(false);
    }

    private void setInterestDetailsOnlyDeleteDisabled() {
        btnInterestMaintenanceNew.setEnabled(true);
        btnInterestMaintenanceSave.setEnabled(true);
        btnInterestMaintenanceDelete.setEnabled(false);
    }

    private void setAllInterestBtnsEnableDisable(boolean val) {
        btnInterestMaintenanceNew.setEnabled(val);
        btnInterestMaintenanceSave.setEnabled(val);
        btnInterestMaintenanceDelete.setEnabled(val);
    }

    private void setAllClassificationDetailsEnableDisable(boolean val) {
        cboCommodityCode.setEnabled(val);
        cboSectorCode1.setEnabled(val);
        cboPurposeCode.setEnabled(val);
        cboIndusCode.setEnabled(val);
        cbo20Code.setEnabled(val);
        cboGovtSchemeCode.setEnabled(val);
        cboGuaranteeCoverCode.setEnabled(val);
        cboHealthCode.setEnabled(val);
        cboDistrictCode.setEnabled(val);
        cboWeakerSectionCode.setEnabled(val);
        cboRefinancingInsti.setEnabled(val);
        cboAssetCode.setEnabled(val);
        tdtNPADate.setEnabled(val);//false
        cboTypeFacility.setEnabled(val);
        chkDirectFinance.setEnabled(val);
        chkECGC.setEnabled(val);
        chkPrioritySector.setEnabled(val);
        chkDocumentcomplete.setEnabled(val);
        chkQIS.setEnabled(val);
    }

    private void setAllBorrowerBtnsEnableDisable(boolean val) {
        btnNew_Borrower.setEnabled(val);
        btnDeleteBorrower.setEnabled(val);
        btnToMain_Borrower.setEnabled(val);
    }

    private void setBorrowerToMainOnlyDisable() {
        btnNew_Borrower.setEnabled(true);
        btnDeleteBorrower.setEnabled(true);
        btnToMain_Borrower.setEnabled(false);
    }

    private void setBorrowerNewOnlyEnable() {
        btnNew_Borrower.setEnabled(true);
        btnDeleteBorrower.setEnabled(false);
        btnToMain_Borrower.setEnabled(false);
    }
    
    private void clearGoldSecurityFields(){
        txtGoldSecurityId.setText("");
        txtGrossWeight.setText("");
        txtNetWeight.setText("");
        txtValueOfGold.setText("");
        txtJewelleryDetails.setText("");
        txtGoldRemarks.setText("");
        
        txtGoldSecurityId.setEnabled(false);
        txtGrossWeight.setEnabled(true);
        txtNetWeight.setEnabled(true);
        txtValueOfGold.setEnabled(true);
        txtJewelleryDetails.setEnabled(true);
        txtGoldRemarks.setEnabled(true);
    }
    
    private void rdoGoldSecurityExitsYesActionPerformed(java.awt.event.ActionEvent evt) {
        if (rdoGoldSecurityExitsYes.isSelected()) {
            rdoGoldSecurityExitsNo.setSelected(false);   
            txtGoldRemarks.setText("CUSTOMER GOLD STOCK");
            ClientUtil.enableDisable(panGoldTypeDetails, false);
            btnGoldSecurityIdSearch.setEnabled(true); 
            rdoGoldSecurityExitsNo.setEnabled(true);   
            if(observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT){
                txtJewelleryDetails.setText(observable.getTxtJewelleryDetails());
                txtGrossWeight.setText(observable.getTxtGrossWeight());
                txtNetWeight.setText(observable.getTxtNetWeight());
                txtValueOfGold.setText(observable.getTxtValueOfGold());
            }
        } else {
           rdoGoldSecurityExitsNo.setSelected(true);
           btnGoldSecurityIdSearch.setEnabled(false); 
           clearGoldSecurityFields();
        }
    }
    
    private void btnGoldSecurityIdSearchActionPerformed(java.awt.event.ActionEvent evt) {
        //popUp("DOCUMENT_NO");
        popUp("GOLD_SECURITY_STOCK");
    }
    
    
     private void UpdateCalculatedGoldSecurityValue(HashMap map) {
        System.out.println("map####" + map);
        double pledgeAmt = 0;
        double actualPledge = 0;
        List lst = ClientUtil.executeQuery("getUnAuthGoldStockSecurityDetails", map);
        if (lst != null && lst.size() > 0) {
            ClientUtil.displayAlert("Already record is pending for authorization for this member");
            return;
        }        
        actualPledge = checkAvailableGoldStockSecurity(CommonUtil.convertObjToStr(map.get("GOLD_SECURITY_ID")));        
        Double gahanLnAmt = getGoldStockPldgeAmountForLoan(CommonUtil.convertObjToStr(map.get("GOLD_SECURITY_ID"))); 
        actualPledge = actualPledge - gahanLnAmt;
        Double gahanMdsAmt = getGoldStockPldgeAmtForMds(CommonUtil.convertObjToStr(map.get("GOLD_SECURITY_ID")));        
        actualPledge = actualPledge - gahanMdsAmt;
        pledgeAmt = getGoldStockAvailableSecurity(actualPledge);
        Double sanAmt = CommonUtil.convertObjToDouble(txtLimit_SD.getText().toString());        
        double totalSecurity = calculateSecurityAmount();        
        sanAmt = sanAmt - totalSecurity;
        if (sanAmt < pledgeAmt) {
            txtValueOfGold.setText(String.valueOf(sanAmt));
        } else {
            txtValueOfGold.setText(String.valueOf(pledgeAmt));
        }       
    }
    
    private double calculateSecurityAmount() {
        double netWorth = 0.0;
        double memNetWorth = 0.0;
        double pledgeAmount = 0.0;
        double losAmount = 0.0;
        double vehicleNetworth = 0.0;
        HashMap hashmap = new HashMap();
        double depAmount = 0.0;
        for (int i = 0; i < tblSalary.getRowCount(); i++) {
            netWorth = netWorth + CommonUtil.convertObjToDouble(tblSalary.getValueAt(i, 5)).doubleValue();
        }
        for (int j = 0; j < tblMemberType.getRowCount(); j++) {
            memNetWorth = memNetWorth + CommonUtil.convertObjToDouble(tblMemberType.getValueAt(j, 4)).doubleValue();
        }
        for (int k = 0; k < tblCollateral.getRowCount(); k++) {
            pledgeAmount = pledgeAmount + CommonUtil.convertObjToDouble(tblCollateral.getValueAt(k, 3)).doubleValue();
        }
        for (int l = 0; l < tblDepositDetails.getRowCount(); l++) {
            String depNo = CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(l, 1));
            String prodtype = CommonUtil.convertObjToStr(tblDepositDetails.getValueAt(l, 0));
            String securityAmt = txtLimit_SD.getText();
            observable.setSecurityAmt(securityAmt);
            HashMap hmap = new HashMap();
            hmap.put("DEPOSIT_NO", depNo);
            List lst = null;
            List EditLst = null;
            if (prodtype.equals("TD") || prodtype.equals("Deposits")) {
                if (observable.getActionType() == ClientConstants.ACTIONTYPE_NEW) {
                    lst = ClientUtil.executeQuery("getAvailableBalForDep", hmap);
                } else {
                    lst = ClientUtil.executeQuery("getAvailableBalForDepEditMode", hmap);
                    EditLst = ClientUtil.executeQuery("getAvailableBalForDep", hmap);
                }
                if (lst != null && lst.size() > 0) {
                    hmap = (HashMap) lst.get(0);
                    depAmount = depAmount + CommonUtil.convertObjToDouble(hmap.get("AVAILABLE_BALANCE")).doubleValue();
                }
                if (EditLst != null && EditLst.size() > 0) {
                    hmap = (HashMap) EditLst.get(0);
                    depAmount = depAmount + CommonUtil.convertObjToDouble(hmap.get("AVAILABLE_BALANCE")).doubleValue();
                }
            } else {
                depAmount += CommonUtil.convertObjToDouble(tblDepositDetails.getValueAt(l, 3)).doubleValue();
            }
        }
        for (int m = 0; m < tblLosDetails.getRowCount(); m++) {
            losAmount = losAmount + CommonUtil.convertObjToDouble(tblLosDetails.getValueAt(m, 4)).doubleValue();
        }
        for (int j = 0; j < tblVehicleType.getRowCount(); j++) {
            vehicleNetworth = vehicleNetworth + CommonUtil.convertObjToDouble(tblVehicleType.getValueAt(j, 5)).doubleValue();

        }
        double tot = netWorth + memNetWorth + pledgeAmount + depAmount + losAmount + vehicleNetworth;
        return tot;
    }
    
    private void rdoGoldSecurityExitsNoActionPerformed(java.awt.event.ActionEvent evt) {       
        if (rdoGoldSecurityExitsNo.isSelected()) {
            rdoGoldSecurityExitsYes.setSelected(false);
            rdoGoldSecurityExitsYes.setEnabled(true);
            btnGoldSecurityIdSearch.setEnabled(false);  
            clearGoldSecurityFields();
        } else {
           rdoGoldSecurityExitsYes.setSelected(true);      
           txtGoldRemarks.setText("CUSTOMER GOLD STOCK");
           ClientUtil.enableDisable(panGoldTypeDetails, false);
           btnGoldSecurityIdSearch.setEnabled(true);
           rdoGoldSecurityExitsYes.setEnabled(true);           
        }
    }

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        javax.swing.JFrame frm = new javax.swing.JFrame();
        TermLoanUI termLoanUI = new TermLoanUI();
        frm.getContentPane().add(termLoanUI);
        termLoanUI.show();
        frm.setSize(600, 500);
        frm.show();
    }

    /**
     * Getter for property facilitySaved.
     *
     * @return Value of property facilitySaved.
     */
    public boolean isFacilitySaved() {
        return facilitySaved;
    }

    /**
     * Setter for property facilitySaved.
     *
     * @param facilitySaved New value of property facilitySaved.
     */
    public void setFacilitySaved(boolean facilitySaved) {
        this.facilitySaved = facilitySaved;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CPanel PanAcc_CD;
    private com.see.truetransact.uicomponent.CButton ResolutionSearch;
    private com.see.truetransact.uicomponent.CButton btnAppNo;
    private com.see.truetransact.uicomponent.CButton btnAuthorize;
    private com.see.truetransact.uicomponent.CButton btnCancel;
    private com.see.truetransact.uicomponent.CButton btnClose;
    private com.see.truetransact.uicomponent.CButton btnCustID;
    private com.see.truetransact.uicomponent.CButton btnDealer;
    private com.see.truetransact.uicomponent.CButton btnDelete;
    private com.see.truetransact.uicomponent.CButton btnDelete2;
    private com.see.truetransact.uicomponent.CButton btnDeleteBorrower;
    private com.see.truetransact.uicomponent.CButton btnDelete_ASD;
    private com.see.truetransact.uicomponent.CButton btnEMI_Calculate;
    private com.see.truetransact.uicomponent.CButton btnEdit;
    private com.see.truetransact.uicomponent.CButton btnException;
    private com.see.truetransact.uicomponent.CButton btnGLAchd;
    private com.see.truetransact.uicomponent.CButton btnGuarantorDelete;
    private com.see.truetransact.uicomponent.CButton btnGuarantorNew;
    private com.see.truetransact.uicomponent.CButton btnGuarantorSave;
    private com.see.truetransact.uicomponent.CButton btnInterestMaintenanceDelete;
    private com.see.truetransact.uicomponent.CButton btnInterestMaintenanceNew;
    private com.see.truetransact.uicomponent.CButton btnInterestMaintenanceSave;
    private com.see.truetransact.uicomponent.CButton btnMembershipLia;
    private com.see.truetransact.uicomponent.CButton btnNew;
    private com.see.truetransact.uicomponent.CButton btnNew2;
    private com.see.truetransact.uicomponent.CButton btnNew_ASD;
    private com.see.truetransact.uicomponent.CButton btnNew_Borrower;
    private com.see.truetransact.uicomponent.CButton btnPermittedBy;
    private com.see.truetransact.uicomponent.CButton btnPrint;
    private com.see.truetransact.uicomponent.CButton btnReject;
    private com.see.truetransact.uicomponent.CButton btnRepayment_Delete;
    private com.see.truetransact.uicomponent.CButton btnRepayment_New;
    private com.see.truetransact.uicomponent.CButton btnRepayment_Save;
    private com.see.truetransact.uicomponent.CButton btnSHGId;
    private com.see.truetransact.uicomponent.CButton btnSave;
    private com.see.truetransact.uicomponent.CButton btnSave2;
    private com.see.truetransact.uicomponent.CButton btnSave_ASD;
    private com.see.truetransact.uicomponent.CButton btnSave_DocumentDetails;
    private com.see.truetransact.uicomponent.CButton btnToMain_Borrower;
    private com.see.truetransact.uicomponent.CButton btnView;
    private com.see.truetransact.uicomponent.CLabel cLabel1;
    private com.see.truetransact.uicomponent.CComboBox cbo20Code;
    private com.see.truetransact.uicomponent.CComboBox cboAccStatus;
    private com.see.truetransact.uicomponent.CComboBox cboAgentId;
    private com.see.truetransact.uicomponent.CComboBox cboAssetCode;
    private com.see.truetransact.uicomponent.CComboBox cboCategory;
    private com.see.truetransact.uicomponent.CComboBox cboCommodityCode;
    private com.see.truetransact.uicomponent.CComboBox cboConstitution;
    private com.see.truetransact.uicomponent.CComboBox cboDistrictCode;
    private com.see.truetransact.uicomponent.CComboBox cboGovtSchemeCode;
    private com.see.truetransact.uicomponent.CComboBox cboGuaranteeCoverCode;
    private com.see.truetransact.uicomponent.CComboBox cboHealthCode;
    private com.see.truetransact.uicomponent.CComboBox cboIndusCode;
    private com.see.truetransact.uicomponent.CComboBox cboIntGetFrom;
    private com.see.truetransact.uicomponent.CComboBox cboInterestType;
    private com.see.truetransact.uicomponent.CComboBox cboModeSanction;
    private com.see.truetransact.uicomponent.CComboBox cboOpModeAI;
    private com.see.truetransact.uicomponent.CComboBox cboProductId;
    private com.see.truetransact.uicomponent.CComboBox cboProductId1;
    private com.see.truetransact.uicomponent.CComboBox cboPurposeCode;
    private com.see.truetransact.uicomponent.CComboBox cboRecommendedByType;
    private com.see.truetransact.uicomponent.CComboBox cboRecommendedByType2;
    private com.see.truetransact.uicomponent.CComboBox cboRefinancingInsti;
    private com.see.truetransact.uicomponent.CComboBox cboRepayFreq;
    private com.see.truetransact.uicomponent.CComboBox cboRepayFreq1;
    private com.see.truetransact.uicomponent.CComboBox cboRepayFreq_Repayment;
    private com.see.truetransact.uicomponent.CComboBox cboRepayType;
    private com.see.truetransact.uicomponent.CComboBox cboSanRepaymentType;
    private com.see.truetransact.uicomponent.CComboBox cboSanctioningAuthority;
    private com.see.truetransact.uicomponent.CComboBox cboSectorCode1;
    private com.see.truetransact.uicomponent.CComboBox cboSettlementModeAI;
    private com.see.truetransact.uicomponent.CComboBox cboStmtFreqAD;
    private com.see.truetransact.uicomponent.CComboBox cboTypeFacility;
    private com.see.truetransact.uicomponent.CComboBox cboTypeOfFacility;
    private com.see.truetransact.uicomponent.CComboBox cboTypeOfFacility1;
    private com.see.truetransact.uicomponent.CComboBox cboWeakerSectionCode;
    private com.see.truetransact.uicomponent.CCheckBox chkABBChrgAD;
    private com.see.truetransact.uicomponent.CCheckBox chkATMAD;
    private com.see.truetransact.uicomponent.CCheckBox chkAccountTransfer;
    private com.see.truetransact.uicomponent.CCheckBox chkAuthorizedSignatory;
    private com.see.truetransact.uicomponent.CCheckBox chkChequeBookAD;
    private com.see.truetransact.uicomponent.CCheckBox chkChequeRetChrgAD;
    private com.see.truetransact.uicomponent.CCheckBox chkCreditAD;
    private com.see.truetransact.uicomponent.CCheckBox chkCustGrpLimitValidationAD;
    private com.see.truetransact.uicomponent.CCheckBox chkDebitAD;
    private com.see.truetransact.uicomponent.CCheckBox chkDiminishing;
    private com.see.truetransact.uicomponent.CCheckBox chkDirectFinance;
    private com.see.truetransact.uicomponent.CCheckBox chkDocDetails;
    private com.see.truetransact.uicomponent.CCheckBox chkDocumentcomplete;
    private com.see.truetransact.uicomponent.CCheckBox chkECGC;
    private com.see.truetransact.uicomponent.CCheckBox chkEligibleAmt;
    private com.see.truetransact.uicomponent.CCheckBox chkGurantor;
    private com.see.truetransact.uicomponent.CCheckBox chkInopChrgAD;
    private com.see.truetransact.uicomponent.CCheckBox chkInsurance;
    private com.see.truetransact.uicomponent.CCheckBox chkMobileBankingAD;
    private com.see.truetransact.uicomponent.CCheckBox chkMobileBankingTLAD;
    private com.see.truetransact.uicomponent.CCheckBox chkMoratorium_Given;
    private com.see.truetransact.uicomponent.CCheckBox chkMoratorium_Given1;
    private com.see.truetransact.uicomponent.CCheckBox chkNPAChrgAD;
    private com.see.truetransact.uicomponent.CCheckBox chkNROStatusAD;
    private com.see.truetransact.uicomponent.CCheckBox chkNonMainMinBalChrgAD;
    private com.see.truetransact.uicomponent.CCheckBox chkOTS;
    private com.see.truetransact.uicomponent.CCheckBox chkPOFAttorney;
    private com.see.truetransact.uicomponent.CCheckBox chkPayIntOnCrBalIN;
    private com.see.truetransact.uicomponent.CCheckBox chkPayIntOnDrBalIN;
    private com.see.truetransact.uicomponent.CCheckBox chkPrioritySector;
    private com.see.truetransact.uicomponent.CCheckBox chkQIS;
    private com.see.truetransact.uicomponent.CCheckBox chkRecovery;
    private com.see.truetransact.uicomponent.CCheckBox chkStmtChrgAD;
    private com.see.truetransact.uicomponent.CCheckBox chkStockInspect;
    private com.see.truetransact.uicomponent.CCheckBox chkStopPmtChrgAD;
    private com.see.truetransact.uicomponent.CLabel jLabel1;
    private com.see.truetransact.uicomponent.CPanel jPanel2;
    private com.see.truetransact.uicomponent.CLabel lbl20Code;
    private com.see.truetransact.uicomponent.CLabel lblABB;
    private com.see.truetransact.uicomponent.CLabel lblABBChrgAD;
    private com.see.truetransact.uicomponent.CLabel lblAODDate;
    private com.see.truetransact.uicomponent.CLabel lblATMFromDateAD;
    private com.see.truetransact.uicomponent.CLabel lblATMNoAD;
    private com.see.truetransact.uicomponent.CLabel lblATMToDateAD;
    private com.see.truetransact.uicomponent.CLabel lblAccCloseChrgAD;
    private com.see.truetransact.uicomponent.CLabel lblAccCloseDt;
    private com.see.truetransact.uicomponent.CLabel lblAccHead;
    private com.see.truetransact.uicomponent.CLabel lblAccHead1;
    private com.see.truetransact.uicomponent.CLabel lblAccHead_2;
    private com.see.truetransact.uicomponent.CLabel lblAccHead_3;
    private com.see.truetransact.uicomponent.CLabel lblAccHead_CD;
    private com.see.truetransact.uicomponent.CLabel lblAccHead_CD_2;
    private com.see.truetransact.uicomponent.CLabel lblAccHead_GD;
    private com.see.truetransact.uicomponent.CLabel lblAccHead_GD_2;
    private com.see.truetransact.uicomponent.CLabel lblAccHead_IM;
    private com.see.truetransact.uicomponent.CLabel lblAccHead_IM_2;
    private com.see.truetransact.uicomponent.CLabel lblAccHead_RS;
    private com.see.truetransact.uicomponent.CLabel lblAccHead_RS_2;
    private com.see.truetransact.uicomponent.CLabel lblAccLimit;
    private com.see.truetransact.uicomponent.CLabel lblAccNo_CD;
    private com.see.truetransact.uicomponent.CLabel lblAccNo_CD_2;
    private com.see.truetransact.uicomponent.CLabel lblAccNo_GD;
    private com.see.truetransact.uicomponent.CLabel lblAccNo_GD_2;
    private com.see.truetransact.uicomponent.CLabel lblAccNo_IM;
    private com.see.truetransact.uicomponent.CLabel lblAccNo_IM_2;
    private com.see.truetransact.uicomponent.CLabel lblAccNo_RS;
    private com.see.truetransact.uicomponent.CLabel lblAccNo_RS_2;
    private com.see.truetransact.uicomponent.CLabel lblAccOpenDt;
    private com.see.truetransact.uicomponent.CLabel lblAccOpeningChrgAD;
    private com.see.truetransact.uicomponent.CLabel lblAccStatus;
    private com.see.truetransact.uicomponent.CLabel lblAccountHead_FD;
    private com.see.truetransact.uicomponent.CLabel lblAccountHead_FD_Disp;
    private com.see.truetransact.uicomponent.CLabel lblAcctHead_Disp_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblAcctHead_Disp_ODetails;
    private com.see.truetransact.uicomponent.CLabel lblAcctHead_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblAcctHead_ODetails;
    private com.see.truetransact.uicomponent.CLabel lblAcctNo_Disp_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblAcctNo_Disp_ODetails;
    private com.see.truetransact.uicomponent.CLabel lblAcctNo_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblAcctNo_FD;
    private com.see.truetransact.uicomponent.CLabel lblAcctNo_FD_Disp;
    private com.see.truetransact.uicomponent.CLabel lblAcctNo_ODetails;
    private com.see.truetransact.uicomponent.CLabel lblAcctNo_Sanction;
    private com.see.truetransact.uicomponent.CLabel lblAcctNo_Sanction1;
    private com.see.truetransact.uicomponent.CLabel lblAcctNo_Sanction_Disp;
    private com.see.truetransact.uicomponent.CLabel lblAcctNo_Sanction_Disp1;
    private com.see.truetransact.uicomponent.CLabel lblAcct_Name;
    private com.see.truetransact.uicomponent.CLabel lblAdditionalLimit;
    private com.see.truetransact.uicomponent.CLabel lblAdditionalSanctionDt;
    private com.see.truetransact.uicomponent.CLabel lblAgClearingIN;
    private com.see.truetransact.uicomponent.CLabel lblAgClearingValueIN;
    private com.see.truetransact.uicomponent.CLabel lblAgainstClearingInter;
    private com.see.truetransact.uicomponent.CLabel lblAgentId;
    private com.see.truetransact.uicomponent.CLabel lblAgentname;
    private com.see.truetransact.uicomponent.CLabel lblAgentnameDisplay;
    private com.see.truetransact.uicomponent.CLabel lblAmtLastInstall;
    private com.see.truetransact.uicomponent.CLabel lblAmtPenulInstall;
    private com.see.truetransact.uicomponent.CLabel lblApplicationNo;
    private com.see.truetransact.uicomponent.CLabel lblAssetCode;
    private com.see.truetransact.uicomponent.CLabel lblBalanceShare;
    private com.see.truetransact.uicomponent.CLabel lblBlank2;
    private com.see.truetransact.uicomponent.CLabel lblBorrowerNo;
    private com.see.truetransact.uicomponent.CLabel lblBorrowerNo_2;
    private com.see.truetransact.uicomponent.CLabel lblCalcDiminshing;
    private com.see.truetransact.uicomponent.CLabel lblCategory;
    private com.see.truetransact.uicomponent.CLabel lblChequeBookChrgAD;
    private com.see.truetransact.uicomponent.CLabel lblChequeReturn;
    private com.see.truetransact.uicomponent.CLabel lblCity_BorrowerProfile;
    private com.see.truetransact.uicomponent.CLabel lblCity_BorrowerProfile_2;
    private com.see.truetransact.uicomponent.CLabel lblCollectInoperative;
    private com.see.truetransact.uicomponent.CLabel lblCommodityCode;
    private com.see.truetransact.uicomponent.CLabel lblConstitution;
    private com.see.truetransact.uicomponent.CLabel lblContactPerson;
    private com.see.truetransact.uicomponent.CLabel lblContactPhone;
    private com.see.truetransact.uicomponent.CLabel lblCrInterestRateIN;
    private com.see.truetransact.uicomponent.CLabel lblCrInterestRateValueIN;
    private com.see.truetransact.uicomponent.CLabel lblCredit;
    private com.see.truetransact.uicomponent.CLabel lblCreditFromDateAD;
    private com.see.truetransact.uicomponent.CLabel lblCreditNoAD;
    private com.see.truetransact.uicomponent.CLabel lblCreditToDateAD;
    private com.see.truetransact.uicomponent.CLabel lblCustID;
    private com.see.truetransact.uicomponent.CLabel lblCustName;
    private com.see.truetransact.uicomponent.CLabel lblCustName_2;
    private com.see.truetransact.uicomponent.CLabel lblDPLimit;
    private com.see.truetransact.uicomponent.CLabel lblDealerID;
    private com.see.truetransact.uicomponent.CLabel lblDealerName;
    private com.see.truetransact.uicomponent.CLabel lblDebit;
    private com.see.truetransact.uicomponent.CLabel lblDebitFromDateAD;
    private com.see.truetransact.uicomponent.CLabel lblDebitNoAD;
    private com.see.truetransact.uicomponent.CLabel lblDebitToDateAD;
    private com.see.truetransact.uicomponent.CLabel lblDemandPromNoteDate;
    private com.see.truetransact.uicomponent.CLabel lblDemandPromNoteExpDate;
    private com.see.truetransact.uicomponent.CLabel lblDesignatedName;
    private com.see.truetransact.uicomponent.CLabel lblDirectFinance;
    private com.see.truetransact.uicomponent.CLabel lblDisbursement_Dt;
    private com.see.truetransact.uicomponent.CLabel lblDistrictCode;
    private com.see.truetransact.uicomponent.CLabel lblDoAddSIs;
    private com.see.truetransact.uicomponent.CLabel lblDocDesc_Disp_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblDocDesc_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblDocNo_Disp_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblDocNo_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblDocType_Disp_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblDocType_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblDocumentcomplete;
    private com.see.truetransact.uicomponent.CLabel lblDrInterestRateIN;
    private com.see.truetransact.uicomponent.CLabel lblDrInterestRateValueIN;
    private com.see.truetransact.uicomponent.CLabel lblECGC;
    private com.see.truetransact.uicomponent.CLabel lblEligibleAmt;
    private com.see.truetransact.uicomponent.CLabel lblEnhance;
    private com.see.truetransact.uicomponent.CLabel lblExcessWithChrgAD;
    private com.see.truetransact.uicomponent.CLabel lblExecuteDate_DOC;
    private com.see.truetransact.uicomponent.CLabel lblExecuted_DOC;
    private com.see.truetransact.uicomponent.CLabel lblExistingAcctNo;
    private com.see.truetransact.uicomponent.CLabel lblExistingCustomer;
    private com.see.truetransact.uicomponent.CLabel lblExpiryDate;
    private com.see.truetransact.uicomponent.CLabel lblExpiryDate_2;
    private com.see.truetransact.uicomponent.CLabel lblExpiryDate_DOC;
    private com.see.truetransact.uicomponent.CLabel lblFDate;
    private com.see.truetransact.uicomponent.CLabel lblFDate1;
    private com.see.truetransact.uicomponent.CLabel lblFacility_Moratorium_Period;
    private com.see.truetransact.uicomponent.CLabel lblFacility_Moratorium_Period1;
    private com.see.truetransact.uicomponent.CLabel lblFacility_Repay_Date;
    private com.see.truetransact.uicomponent.CLabel lblFacility_Repay_Date1;
    private com.see.truetransact.uicomponent.CLabel lblFax_BorrowerProfile;
    private com.see.truetransact.uicomponent.CLabel lblFax_BorrowerProfile_2;
    private com.see.truetransact.uicomponent.CLabel lblFirstInstall;
    private com.see.truetransact.uicomponent.CLabel lblFolioChrgAD;
    private com.see.truetransact.uicomponent.CLabel lblFrom;
    private com.see.truetransact.uicomponent.CLabel lblFromAmt;
    private com.see.truetransact.uicomponent.CLabel lblGovtSchemeCode;
    private com.see.truetransact.uicomponent.CLabel lblGroupDesc;
    private com.see.truetransact.uicomponent.CLabel lblGuaranteeCoverCode;
    private com.see.truetransact.uicomponent.CLabel lblHealthCode;
    private com.see.truetransact.uicomponent.CLabel lblIndusCode;
    private com.see.truetransact.uicomponent.CLabel lblInstallmentAmount;
    private com.see.truetransact.uicomponent.CLabel lblIntGetFrom;
    private com.see.truetransact.uicomponent.CLabel lblInter;
    private com.see.truetransact.uicomponent.CLabel lblInterExpLimit;
    private com.see.truetransact.uicomponent.CLabel lblInterest;
    private com.see.truetransact.uicomponent.CLabel lblInterestType;
    private com.see.truetransact.uicomponent.CLabel lblKoleLandArea;
    private com.see.truetransact.uicomponent.CLabel lblLaonAmt;
    private com.see.truetransact.uicomponent.CLabel lblLastInstall;
    private com.see.truetransact.uicomponent.CLabel lblLimitAmt;
    private com.see.truetransact.uicomponent.CLabel lblLimitAmt_2;
    private com.see.truetransact.uicomponent.CLabel lblLimit_SD;
    private com.see.truetransact.uicomponent.CLabel lblLimit_SD1;
    private com.see.truetransact.uicomponent.CLabel lblLockStatus;
    private com.see.truetransact.uicomponent.CLabel lblLockStatusVal;
    private com.see.truetransact.uicomponent.CLabel lblMandatory_DOC;
    private com.see.truetransact.uicomponent.CLabel lblMemberNo;
    private com.see.truetransact.uicomponent.CLabel lblMemberNo_Disp;
    private com.see.truetransact.uicomponent.CLabel lblMinActBalanceAD;
    private com.see.truetransact.uicomponent.CLabel lblMisServiceChrgAD;
    private com.see.truetransact.uicomponent.CLabel lblMobileNo;
    private com.see.truetransact.uicomponent.CLabel lblMobileSubscribedFrom;
    private com.see.truetransact.uicomponent.CLabel lblModeSanction;
    private com.see.truetransact.uicomponent.CLabel lblMoratorium_Given;
    private com.see.truetransact.uicomponent.CLabel lblMoratorium_Given1;
    private com.see.truetransact.uicomponent.CLabel lblMsg;
    private com.see.truetransact.uicomponent.CLabel lblMultiDisburseAllow;
    private com.see.truetransact.uicomponent.CLabel lblNPA;
    private com.see.truetransact.uicomponent.CLabel lblNPAChrgAD;
    private com.see.truetransact.uicomponent.CLabel lblNPADate;
    private com.see.truetransact.uicomponent.CLabel lblName;
    private com.see.truetransact.uicomponent.CLabel lblNatureInterest;
    private com.see.truetransact.uicomponent.CLabel lblNoInstall;
    private com.see.truetransact.uicomponent.CLabel lblNoInstallments;
    private com.see.truetransact.uicomponent.CLabel lblNoInstallments1;
    private com.see.truetransact.uicomponent.CLabel lblNoMonthsMora;
    private com.see.truetransact.uicomponent.CLabel lblNonMaintenance;
    private com.see.truetransact.uicomponent.CLabel lblOpModeAI;
    private com.see.truetransact.uicomponent.CLabel lblOpenDate;
    private com.see.truetransact.uicomponent.CLabel lblOpenDate2;
    private com.see.truetransact.uicomponent.CLabel lblPLR_Limit;
    private com.see.truetransact.uicomponent.CLabel lblPLR_Limit_2;
    private com.see.truetransact.uicomponent.CLabel lblPanNumber1;
    private com.see.truetransact.uicomponent.CLabel lblPenalInter;
    private com.see.truetransact.uicomponent.CLabel lblPenalInterestRateIN;
    private com.see.truetransact.uicomponent.CLabel lblPenalInterestValueIN;
    private com.see.truetransact.uicomponent.CLabel lblPenalStatement;
    private com.see.truetransact.uicomponent.CLabel lblPeriodDifference;
    private com.see.truetransact.uicomponent.CLabel lblPeriodDifference1;
    private com.see.truetransact.uicomponent.CLabel lblPeriodDifference_Days;
    private com.see.truetransact.uicomponent.CLabel lblPeriodDifference_Days1;
    private com.see.truetransact.uicomponent.CLabel lblPeriodDifference_Months;
    private com.see.truetransact.uicomponent.CLabel lblPeriodDifference_Months1;
    private com.see.truetransact.uicomponent.CLabel lblPeriodDifference_Years;
    private com.see.truetransact.uicomponent.CLabel lblPeriodDifference_Years1;
    private com.see.truetransact.uicomponent.CLabel lblPermittedBy;
    private com.see.truetransact.uicomponent.CLabel lblPermittedDesignation;
    private com.see.truetransact.uicomponent.CLabel lblPermittedName;
    private com.see.truetransact.uicomponent.CLabel lblPhone_BorrowerProfile;
    private com.see.truetransact.uicomponent.CLabel lblPhone_BorrowerProfile_2;
    private com.see.truetransact.uicomponent.CLabel lblPin_BorrowerProfile;
    private com.see.truetransact.uicomponent.CLabel lblPin_BorrowerProfile_2;
    private com.see.truetransact.uicomponent.CLabel lblPostDatedCheque;
    private com.see.truetransact.uicomponent.CLabel lblPrioritySector;
    private com.see.truetransact.uicomponent.CLabel lblProID_CD;
    private com.see.truetransact.uicomponent.CLabel lblProID_CD_Disp;
    private com.see.truetransact.uicomponent.CLabel lblProdID_Disp_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblProdID_Disp_ODetails;
    private com.see.truetransact.uicomponent.CLabel lblProdID_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblProdID_GD;
    private com.see.truetransact.uicomponent.CLabel lblProdID_GD_Disp;
    private com.see.truetransact.uicomponent.CLabel lblProdID_IM;
    private com.see.truetransact.uicomponent.CLabel lblProdID_IM_Disp;
    private com.see.truetransact.uicomponent.CLabel lblProdID_ODetails;
    private com.see.truetransact.uicomponent.CLabel lblProdID_RS;
    private com.see.truetransact.uicomponent.CLabel lblProdID_RS_Disp;
    private com.see.truetransact.uicomponent.CLabel lblProductID_FD;
    private com.see.truetransact.uicomponent.CLabel lblProductID_FD_Disp;
    private com.see.truetransact.uicomponent.CLabel lblProductId;
    private com.see.truetransact.uicomponent.CLabel lblProductId1;
    private com.see.truetransact.uicomponent.CLabel lblPurposeCode;
    private com.see.truetransact.uicomponent.CLabel lblPurposeDesc;
    private com.see.truetransact.uicomponent.CLabel lblQIS;
    private com.see.truetransact.uicomponent.CLabel lblRateCodeIN;
    private com.see.truetransact.uicomponent.CLabel lblRateCodeValueIN;
    private com.see.truetransact.uicomponent.CLabel lblRebateInterest;
    private com.see.truetransact.uicomponent.CLabel lblRebateInterest_Amt;
    private com.see.truetransact.uicomponent.CLabel lblRebateInterest_App_Dt;
    private com.see.truetransact.uicomponent.CLabel lblRecommandByType;
    private com.see.truetransact.uicomponent.CLabel lblRefinancingInsti;
    private com.see.truetransact.uicomponent.CLabel lblRemarks_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblRenewal;
    private com.see.truetransact.uicomponent.CLabel lblRepayFreq;
    private com.see.truetransact.uicomponent.CLabel lblRepayFreq1;
    private com.see.truetransact.uicomponent.CLabel lblRepayFreq_Repayment;
    private com.see.truetransact.uicomponent.CLabel lblRepayFromDate;
    private com.see.truetransact.uicomponent.CLabel lblRepayScheduleMode;
    private com.see.truetransact.uicomponent.CLabel lblRepayType;
    private com.see.truetransact.uicomponent.CLabel lblRiskWeight;
    private com.see.truetransact.uicomponent.CLabel lblSHGId;
    private com.see.truetransact.uicomponent.CLabel lblSHGYesorNo;
    private com.see.truetransact.uicomponent.CLabel lblSalaryRecovery;
    private com.see.truetransact.uicomponent.CLabel lblSanRepaymentType;
    private com.see.truetransact.uicomponent.CLabel lblSancDate;
    private com.see.truetransact.uicomponent.CLabel lblSancDate_2;
    private com.see.truetransact.uicomponent.CLabel lblSanctionDate;
    private com.see.truetransact.uicomponent.CLabel lblSanctionDate1;
    private com.see.truetransact.uicomponent.CLabel lblSanctionDate2;
    private com.see.truetransact.uicomponent.CLabel lblSanctionNo;
    private com.see.truetransact.uicomponent.CLabel lblSanctionNo1;
    private com.see.truetransact.uicomponent.CLabel lblSanctionNo2;
    private com.see.truetransact.uicomponent.CLabel lblSanctionSlNo;
    private com.see.truetransact.uicomponent.CLabel lblSanctioningAuthority;
    private com.see.truetransact.uicomponent.CLabel lblScheduleNo;
    private com.see.truetransact.uicomponent.CLabel lblSectorCode1;
    private com.see.truetransact.uicomponent.CLabel lblServiceTax;
    private com.see.truetransact.uicomponent.CLabel lblServiceTaxval;
    private com.see.truetransact.uicomponent.CLabel lblSettlementModeAI;
    private com.see.truetransact.uicomponent.CLabel lblSpace1;
    private com.see.truetransact.uicomponent.CLabel lblSpace17;
    private com.see.truetransact.uicomponent.CLabel lblSpace18;
    private com.see.truetransact.uicomponent.CLabel lblSpace19;
    private com.see.truetransact.uicomponent.CLabel lblSpace2;
    private com.see.truetransact.uicomponent.CLabel lblSpace20;
    private com.see.truetransact.uicomponent.CLabel lblSpace21;
    private com.see.truetransact.uicomponent.CLabel lblSpace22;
    private com.see.truetransact.uicomponent.CLabel lblSpace3;
    private com.see.truetransact.uicomponent.CLabel lblSpace4;
    private com.see.truetransact.uicomponent.CLabel lblSpace6;
    private com.see.truetransact.uicomponent.CLabel lblSpace7;
    private com.see.truetransact.uicomponent.CLabel lblSpace9;
    private com.see.truetransact.uicomponent.CLabel lblState_BorrowerProfile;
    private com.see.truetransact.uicomponent.CLabel lblState_BorrowerProfile_2;
    private com.see.truetransact.uicomponent.CLabel lblStatement;
    private com.see.truetransact.uicomponent.CLabel lblStatus;
    private com.see.truetransact.uicomponent.CLabel lblStatus_Repayment;
    private com.see.truetransact.uicomponent.CLabel lblStmtFreqAD;
    private com.see.truetransact.uicomponent.CLabel lblStopPayment;
    private com.see.truetransact.uicomponent.CLabel lblSubmitDate_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblSubmitted_DocumentDetails;
    private com.see.truetransact.uicomponent.CLabel lblSubsidy;
    private com.see.truetransact.uicomponent.CLabel lblSubsidy1;
    private com.see.truetransact.uicomponent.CLabel lblSubsidyAccHead;
    private com.see.truetransact.uicomponent.CLabel lblSubsidyAdjustedAmt;
    private com.see.truetransact.uicomponent.CLabel lblSubsidyAmt;
    private com.see.truetransact.uicomponent.CLabel lblSubsidyAppDt;
    private com.see.truetransact.uicomponent.CLabel lblTDate;
    private com.see.truetransact.uicomponent.CLabel lblTDate1;
    private com.see.truetransact.uicomponent.CLabel lblTo;
    private com.see.truetransact.uicomponent.CLabel lblToAmt;
    private com.see.truetransact.uicomponent.CLabel lblTotalBaseAmt;
    private com.see.truetransact.uicomponent.CLabel lblTotalInstallAmt;
    private com.see.truetransact.uicomponent.CLabel lblTotalLimit;
    private com.see.truetransact.uicomponent.CLabel lblTotalLimitAmt;
    private com.see.truetransact.uicomponent.CLabel lblTotalNoOfShare;
    private com.see.truetransact.uicomponent.CLabel lblTotalShareAmount;
    private com.see.truetransact.uicomponent.CLabel lblTypeFacility;
    private com.see.truetransact.uicomponent.CLabel lblTypeOfFacility;
    private com.see.truetransact.uicomponent.CLabel lblTypeOfFacility1;
    private com.see.truetransact.uicomponent.CLabel lblTypeOfFacility2;
    private com.see.truetransact.uicomponent.CLabel lblWeakerSectionCode;
    private com.see.truetransact.uicomponent.CLabel lblspace3;
    private com.see.truetransact.uicomponent.CMenuBar mbrTermLoan;
    private javax.swing.JMenuItem mitAuthorize;
    private javax.swing.JMenuItem mitCancel;
    private javax.swing.JMenuItem mitClose;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JMenuItem mitException;
    private javax.swing.JMenuItem mitNew;
    private javax.swing.JMenuItem mitPrint;
    private javax.swing.JMenuItem mitReject;
    private javax.swing.JMenuItem mitSave;
    private javax.swing.JMenu mnuProcess;
    private com.see.truetransact.uicomponent.CPanel panAccLimit;
    private com.see.truetransact.uicomponent.CPanel panAcc_IM;
    private com.see.truetransact.uicomponent.CPanel panAcc_RS;
    private com.see.truetransact.uicomponent.CPanel panAccountDetails;
    private com.see.truetransact.uicomponent.CPanel panAcctDetails_DocumentDetails;
    private com.see.truetransact.uicomponent.CPanel panAcctInfo_ODetails;
    private com.see.truetransact.uicomponent.CPanel panAdditionalSanctionDetails;
    private com.see.truetransact.uicomponent.CPanel panAdditionalkSanctionDetails;
    private com.see.truetransact.uicomponent.CPanel panAgentDealerDetails;
    private com.see.truetransact.uicomponent.CPanel panBorrowCompanyDetails;
    private com.see.truetransact.uicomponent.CPanel panBorrowProfile;
    private com.see.truetransact.uicomponent.CPanel panBorrowProfile_CustID;
    private com.see.truetransact.uicomponent.CPanel panBorrowProfile_CustName;
    private com.see.truetransact.uicomponent.CPanel panBorrowerTabCTable;
    private com.see.truetransact.uicomponent.CPanel panBorrowerTabTools;
    private com.see.truetransact.uicomponent.CPanel panButton1;
    private com.see.truetransact.uicomponent.CPanel panButton2_SD1;
    private com.see.truetransact.uicomponent.CPanel panButtons;
    private com.see.truetransact.uicomponent.CPanel panCalcDiminishing;
    private com.see.truetransact.uicomponent.CPanel panCardInfo;
    private com.see.truetransact.uicomponent.CPanel panCaseDetails;
    private com.see.truetransact.uicomponent.CPanel panCaseTableFields;
    private com.see.truetransact.uicomponent.CPanel panChargeDetails;
    private com.see.truetransact.uicomponent.CPanel panClassDetails;
    private com.see.truetransact.uicomponent.CPanel panClassDetails_Acc;
    private com.see.truetransact.uicomponent.CPanel panClassDetails_Details;
    private com.see.truetransact.uicomponent.CPanel panCode;
    private com.see.truetransact.uicomponent.CPanel panCode2;
    private com.see.truetransact.uicomponent.CPanel panCompanyDetails_Company;
    private com.see.truetransact.uicomponent.CPanel panCustDetails;
    private com.see.truetransact.uicomponent.CPanel panDate;
    private com.see.truetransact.uicomponent.CPanel panDemandPromssoryDate;
    private com.see.truetransact.uicomponent.CPanel panDiffCharges;
    private com.see.truetransact.uicomponent.CPanel panDoAddSIs;
    private com.see.truetransact.uicomponent.CPanel panDocumentDetails;
    private com.see.truetransact.uicomponent.CPanel panExecuted_DOC;
    private com.see.truetransact.uicomponent.CPanel panExistingCustomer;
    private com.see.truetransact.uicomponent.CPanel panFDAccount;
    private com.see.truetransact.uicomponent.CPanel panFDDate;
    private com.see.truetransact.uicomponent.CPanel panFacility;
    private com.see.truetransact.uicomponent.CPanel panFacilityChkBoxes;
    private com.see.truetransact.uicomponent.CPanel panFacilityDetails;
    private com.see.truetransact.uicomponent.CPanel panFacilityDetails_Data;
    private javax.swing.JPanel panFacilityProdID;
    private com.see.truetransact.uicomponent.CPanel panFlexiOpt;
    private com.see.truetransact.uicomponent.CPanel panGuarantorDetail_Detail;
    private com.see.truetransact.uicomponent.CPanel panGuarantorDetails;
    private com.see.truetransact.uicomponent.CPanel panGuarantorDetailsTable;
    private com.see.truetransact.uicomponent.CPanel panGuarantorInsuranceDetails;
    private com.see.truetransact.uicomponent.CPanel panGuarnOption;
    private com.see.truetransact.uicomponent.CPanel panInstall_RS;
    private com.see.truetransact.uicomponent.CPanel panInterMaintenance;
    private com.see.truetransact.uicomponent.CPanel panInterMaintenance_Acc;
    private com.see.truetransact.uicomponent.CPanel panInterMaintenance_Details;
    private com.see.truetransact.uicomponent.CPanel panInterMaintenance_Table;
    private com.see.truetransact.uicomponent.CPanel panInterest;
    private com.see.truetransact.uicomponent.CPanel panInterest1;
    private com.see.truetransact.uicomponent.CPanel panInterestPayableIN;
    private com.see.truetransact.uicomponent.CPanel panIsRequired;
    private com.see.truetransact.uicomponent.CPanel panLastIntApp;
    private com.see.truetransact.uicomponent.CPanel panLimit;
    private com.see.truetransact.uicomponent.CPanel panLockStatus;
    private com.see.truetransact.uicomponent.CPanel panMandatory_DOC;
    private com.see.truetransact.uicomponent.CPanel panMobileBanking;
    private com.see.truetransact.uicomponent.CPanel panMultiDisburseAllow;
    private com.see.truetransact.uicomponent.CPanel panNatureInterest;
    private com.see.truetransact.uicomponent.CPanel panODEnhance;
    private com.see.truetransact.uicomponent.CPanel panOtherFacilityChkBoxes;
    private com.see.truetransact.uicomponent.CPanel panPeakSanctionDetails_Sanction1;
    private com.see.truetransact.uicomponent.CPanel panPeakSanctionDetails_Table;
    private com.see.truetransact.uicomponent.CPanel panPeriodDifference;
    private com.see.truetransact.uicomponent.CPanel panPeriodDifference1;
    private com.see.truetransact.uicomponent.CPanel panPostDatedCheque;
    private com.see.truetransact.uicomponent.CPanel panProd_CD;
    private com.see.truetransact.uicomponent.CPanel panProd_GD;
    private com.see.truetransact.uicomponent.CPanel panProd_IM;
    private com.see.truetransact.uicomponent.CPanel panProd_RS;
    private com.see.truetransact.uicomponent.CPanel panRatesIN;
    private com.see.truetransact.uicomponent.CPanel panRenewal;
    private com.see.truetransact.uicomponent.CPanel panRepaySanctionDetails;
    private com.see.truetransact.uicomponent.CPanel panRepayment;
    private com.see.truetransact.uicomponent.CPanel panRepaymentCTable;
    private com.see.truetransact.uicomponent.CPanel panRepaymentSchedule;
    private com.see.truetransact.uicomponent.CPanel panRepaymentSchedule_Details;
    private com.see.truetransact.uicomponent.CPanel panRepaymentToolBtns;
    private com.see.truetransact.uicomponent.CPanel panRiskWeight;
    private com.see.truetransact.uicomponent.CPanel panSHG;
    private com.see.truetransact.uicomponent.CPanel panSHGDetails;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecovery;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecoveryValue;
    private com.see.truetransact.uicomponent.CPanel panSanctionAuthority;
    private com.see.truetransact.uicomponent.CPanel panSanctionDetails_Table1;
    private com.see.truetransact.uicomponent.CPanel panSchedule_RS;
    private com.see.truetransact.uicomponent.CPanel panSecurityDetails;
    private com.see.truetransact.uicomponent.CPanel panSecurityDetails_FD;
    private com.see.truetransact.uicomponent.CPanel panShareDetails;
    private com.see.truetransact.uicomponent.CPanel panStatus;
    private com.see.truetransact.uicomponent.CPanel panStatus_Repayment;
    private com.see.truetransact.uicomponent.CPanel panSubmitted_DocumentDetails;
    private com.see.truetransact.uicomponent.CPanel panSubsidy;
    private com.see.truetransact.uicomponent.CPanel panSubsidy1;
    private com.see.truetransact.uicomponent.CPanel panSubsidy2;
    private com.see.truetransact.uicomponent.CPanel panSubsidyAchead;
    private com.see.truetransact.uicomponent.CPanel panTabDetails_DocumentDetails;
    private com.see.truetransact.uicomponent.CPanel panTableFields;
    private com.see.truetransact.uicomponent.CPanel panTableFields_SD1;
    private com.see.truetransact.uicomponent.CPanel panTable_ASD;
    private com.see.truetransact.uicomponent.CPanel panTable_DocumentDetails;
    private com.see.truetransact.uicomponent.CPanel panTable_IM;
    private com.see.truetransact.uicomponent.CPanel panTable_SD1;
    private com.see.truetransact.uicomponent.CPanel panTermLoan;
    private com.see.truetransact.uicomponent.CPanel panToolBtns;
    private com.see.truetransact.uicomponent.CPanel panserviceTax;
    private com.see.truetransact.uicomponent.CButtonGroup rdoAccLimit;
    private com.see.truetransact.uicomponent.CRadioButton rdoAccLimit_Main;
    private com.see.truetransact.uicomponent.CRadioButton rdoAccLimit_Submit;
    private com.see.truetransact.uicomponent.CButtonGroup rdoAccType;
    private com.see.truetransact.uicomponent.CRadioButton rdoActive_Repayment;
    private com.see.truetransact.uicomponent.CButtonGroup rdoCourtOrderGroup;
    private com.see.truetransact.uicomponent.CRadioButton rdoDP_NO;
    private com.see.truetransact.uicomponent.CRadioButton rdoDP_YES;
    private com.see.truetransact.uicomponent.CButtonGroup rdoDirectRepaymentGroup;
    private com.see.truetransact.uicomponent.CButtonGroup rdoDoAddSIs;
    private com.see.truetransact.uicomponent.CRadioButton rdoDoAddSIs_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoDoAddSIs_Yes;
    private com.see.truetransact.uicomponent.CButtonGroup rdoEnhanceGroup;
    private com.see.truetransact.uicomponent.CRadioButton rdoEnhance_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoEnhance_Yes;
    private com.see.truetransact.uicomponent.CButtonGroup rdoExecuted_DOC;
    private com.see.truetransact.uicomponent.CRadioButton rdoExistingCustomer_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoExistingCustomer_Yes;
    private com.see.truetransact.uicomponent.CButtonGroup rdoGuarnConstution;
    private com.see.truetransact.uicomponent.CRadioButton rdoGuarnIndividual;
    private com.see.truetransact.uicomponent.CRadioButton rdoGuarnInsititutional;
    private com.see.truetransact.uicomponent.CRadioButton rdoInActive_Repayment;
    private com.see.truetransact.uicomponent.CButtonGroup rdoInterest;
    private com.see.truetransact.uicomponent.CRadioButton rdoInterest_Compound;
    private com.see.truetransact.uicomponent.CRadioButton rdoInterest_Simple;
    private com.see.truetransact.uicomponent.CButtonGroup rdoIsSubmitted_DocumentDetails;
    private com.see.truetransact.uicomponent.CButtonGroup rdoMandatory_DOC;
    private com.see.truetransact.uicomponent.CButtonGroup rdoMultiDisburseAllow;
    private com.see.truetransact.uicomponent.CRadioButton rdoMultiDisburseAllow_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoMultiDisburseAllow_Yes;
    private com.see.truetransact.uicomponent.CButtonGroup rdoNatureInterest;
    private com.see.truetransact.uicomponent.CRadioButton rdoNatureInterest_NonPLR;
    private com.see.truetransact.uicomponent.CRadioButton rdoNatureInterest_PLR;
    private com.see.truetransact.uicomponent.CRadioButton rdoNo_DocumentDetails;
    private com.see.truetransact.uicomponent.CRadioButton rdoNo_Executed_DOC;
    private com.see.truetransact.uicomponent.CRadioButton rdoNo_Mandatory_DOC;
    private com.see.truetransact.uicomponent.CButtonGroup rdoPostDatedCheque;
    private com.see.truetransact.uicomponent.CRadioButton rdoPostDatedCheque_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoPostDatedCheque_Yes;
    private com.see.truetransact.uicomponent.CButtonGroup rdoRebateInterestGroup;
    private com.see.truetransact.uicomponent.CRadioButton rdoRebateInterest_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoRebateInterest_Yes;
    private com.see.truetransact.uicomponent.CButtonGroup rdoRenewalGroup;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewal_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoRenewal_Yes;
    private com.see.truetransact.uicomponent.CButtonGroup rdoRiskWeight;
    private com.see.truetransact.uicomponent.CRadioButton rdoRiskWeight_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoRiskWeight_Yes;
    private com.see.truetransact.uicomponent.CButtonGroup rdoSHG;
    private com.see.truetransact.uicomponent.CRadioButton rdoSHG_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoSHG_Yes;
    private com.see.truetransact.uicomponent.CButtonGroup rdoSalaryRecovery;
    private com.see.truetransact.uicomponent.CRadioButton rdoSalaryRecovery_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoSalaryRecovery_Yes;
    private com.see.truetransact.uicomponent.CButtonGroup rdoSecurityDetails;
    private com.see.truetransact.uicomponent.CRadioButton rdoSecurityDetails_Fully;
    private com.see.truetransact.uicomponent.CRadioButton rdoSecurityDetails_Partly;
    private com.see.truetransact.uicomponent.CRadioButton rdoSecurityDetails_Unsec;
    private com.see.truetransact.uicomponent.CButtonGroup rdoSecurityType;
    private com.see.truetransact.uicomponent.CButtonGroup rdoStatus;
    private com.see.truetransact.uicomponent.CButtonGroup rdoStatus_Repayment;
    private com.see.truetransact.uicomponent.CButtonGroup rdoSubsidy;
    private com.see.truetransact.uicomponent.CButtonGroup rdoSubsidyAddMinusGroup;
    private com.see.truetransact.uicomponent.CRadioButton rdoSubsidy_Minus;
    private com.see.truetransact.uicomponent.CRadioButton rdoSubsidy_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoSubsidy_Yes;
    private com.see.truetransact.uicomponent.CRadioButton rdoSubsidy_add;
    private com.see.truetransact.uicomponent.CRadioButton rdoYes_DocumentDetails;
    private com.see.truetransact.uicomponent.CRadioButton rdoYes_Executed_DOC;
    private com.see.truetransact.uicomponent.CRadioButton rdoYes_Mandatory_DOC;
    private com.see.truetransact.uicomponent.CSeparator sptBorroewrProfile;
    private javax.swing.JSeparator sptCancel;
    private com.see.truetransact.uicomponent.CSeparator sptClassDetails;
    private com.see.truetransact.uicomponent.CSeparator sptClassification_vertical;
    private javax.swing.JSeparator sptException;
    private com.see.truetransact.uicomponent.CSeparator sptFacilityDetails_Vert;
    private com.see.truetransact.uicomponent.CSeparator sptGuarantorDetail_Hori1;
    private com.see.truetransact.uicomponent.CSeparator sptInterMaintenance_Hori;
    private com.see.truetransact.uicomponent.CSeparator sptInterMaintenance_Hori2;
    private javax.swing.JSeparator sptPrint;
    private javax.swing.JSeparator sptProcess;
    private com.see.truetransact.uicomponent.CSeparator sptRepatmentSchedule_Hori;
    private com.see.truetransact.uicomponent.CSeparator sptRepatmentSchedule_Vert;
    private com.see.truetransact.uicomponent.CScrollPane srpBorrowerTabCTable;
    private com.see.truetransact.uicomponent.CSeparator srpComp_Tab_Addr;
    private com.see.truetransact.uicomponent.CScrollPane srpGuarantorTable;
    private com.see.truetransact.uicomponent.CScrollPane srpInterMaintenance;
    private com.see.truetransact.uicomponent.CScrollPane srpRepaymentCTable;
    private com.see.truetransact.uicomponent.CScrollPane srpTable_ASD;
    private com.see.truetransact.uicomponent.CScrollPane srpTable_DocumentDetails;
    private com.see.truetransact.uicomponent.CScrollPane srpTable_SD1;
    private com.see.truetransact.uicomponent.CTabbedPane tabLimitAmount;
    private com.see.truetransact.uicomponent.CTable tblBorrowerTabCTable;
    private com.see.truetransact.uicomponent.CTable tblGuarantorTable;
    private com.see.truetransact.uicomponent.CTable tblInterMaintenance;
    private com.see.truetransact.uicomponent.CTable tblPeakSanctionDetails;
    private com.see.truetransact.uicomponent.CTable tblRepaymentCTable;
    private com.see.truetransact.uicomponent.CTable tblSanctionDetails1;
    private com.see.truetransact.uicomponent.CTable tblTable_DocumentDetails;
    private javax.swing.JToolBar tbrTermLoan;
    private com.see.truetransact.uicomponent.CDateField tdtAODDate;
    private com.see.truetransact.uicomponent.CDateField tdtATMFromDateAD;
    private com.see.truetransact.uicomponent.CDateField tdtATMToDateAD;
    private com.see.truetransact.uicomponent.CDateField tdtAccountCloseDate;
    private com.see.truetransact.uicomponent.CDateField tdtAccountOpenDate;
    private com.see.truetransact.uicomponent.CDateField tdtAdditionalSanctionDt;
    private com.see.truetransact.uicomponent.CDateField tdtCredit;
    private com.see.truetransact.uicomponent.CDateField tdtCreditFromDateAD;
    private com.see.truetransact.uicomponent.CDateField tdtCreditToDateAD;
    private com.see.truetransact.uicomponent.CDateField tdtDebit;
    private com.see.truetransact.uicomponent.CDateField tdtDebitFromDateAD;
    private com.see.truetransact.uicomponent.CDateField tdtDebitToDateAD;
    private com.see.truetransact.uicomponent.CDateField tdtDemandPromNoteDate;
    private com.see.truetransact.uicomponent.CDateField tdtDemandPromNoteExpDate;
    private com.see.truetransact.uicomponent.CDateField tdtDisbursement_Dt;
    private com.see.truetransact.uicomponent.CDateField tdtExecuteDate_DOC;
    private com.see.truetransact.uicomponent.CDateField tdtExpiryDate_DOC;
    private com.see.truetransact.uicomponent.CDateField tdtFDate;
    private com.see.truetransact.uicomponent.CDateField tdtFDate1;
    private com.see.truetransact.uicomponent.CDateField tdtFacility_Repay_Date;
    private com.see.truetransact.uicomponent.CDateField tdtFacility_Repay_Date1;
    private com.see.truetransact.uicomponent.CDateField tdtFirstInstall;
    private com.see.truetransact.uicomponent.CDateField tdtFrom;
    private com.see.truetransact.uicomponent.CDateField tdtLastInstall;
    private com.see.truetransact.uicomponent.CDateField tdtMobileSubscribedFrom;
    private com.see.truetransact.uicomponent.CDateField tdtNPAChrgAD;
    private com.see.truetransact.uicomponent.CDateField tdtNPADate;
    private com.see.truetransact.uicomponent.CDateField tdtRebateInterest_App_Dt;
    private com.see.truetransact.uicomponent.CDateField tdtRepayFromDate;
    private com.see.truetransact.uicomponent.CDateField tdtSanctionDate;
    private com.see.truetransact.uicomponent.CDateField tdtSubmitDate_DocumentDetails;
    private com.see.truetransact.uicomponent.CDateField tdtSubsidyAppDt;
    private com.see.truetransact.uicomponent.CDateField tdtTDate;
    private com.see.truetransact.uicomponent.CDateField tdtTDate1;
    private com.see.truetransact.uicomponent.CDateField tdtTo;
    private com.see.truetransact.uicomponent.CTextField txtABBChrgAD;
    private com.see.truetransact.uicomponent.CTextField txtATMNoAD;
    private com.see.truetransact.uicomponent.CTextField txtAccCloseChrgAD;
    private com.see.truetransact.uicomponent.CTextField txtAccOpeningChrgAD;
    private com.see.truetransact.uicomponent.CTextField txtAcct_Name;
    private com.see.truetransact.uicomponent.CTextField txtAdditionalLimit;
    private com.see.truetransact.uicomponent.CTextField txtAgainstClearingInter;
    private com.see.truetransact.uicomponent.CTextField txtAmtLastInstall;
    private com.see.truetransact.uicomponent.CTextField txtAmtPenulInstall;
    private com.see.truetransact.uicomponent.CTextField txtApplicationNo;
    private com.see.truetransact.uicomponent.CTextField txtBalanceShare;
    private com.see.truetransact.uicomponent.CTextField txtChequeBookChrgAD;
    private com.see.truetransact.uicomponent.CTextField txtContactPerson;
    private com.see.truetransact.uicomponent.CTextField txtContactPhone;
    private com.see.truetransact.uicomponent.CTextField txtCreditNoAD;
    public static com.see.truetransact.uicomponent.CTextField txtCustID;
    private com.see.truetransact.uicomponent.CTextField txtDealerID;
    private com.see.truetransact.uicomponent.CTextField txtDebitNoAD;
    private com.see.truetransact.uicomponent.CTextField txtEditTermLoanNo;
    private com.see.truetransact.uicomponent.CTextField txtEnteredSubsidyAmt;
    private com.see.truetransact.uicomponent.CTextField txtExcessWithChrgAD;
    private com.see.truetransact.uicomponent.CTextField txtExistingAcctNo;
    private com.see.truetransact.uicomponent.CTextField txtFacility_Moratorium_Period;
    private com.see.truetransact.uicomponent.CTextField txtFacility_Moratorium_Period1;
    private com.see.truetransact.uicomponent.CTextField txtFolioChrgAD;
    private com.see.truetransact.uicomponent.CTextField txtFromAmt;
    private com.see.truetransact.uicomponent.CTextField txtGroupDesc;
    private com.see.truetransact.uicomponent.CTextField txtInstallAmount;
    private com.see.truetransact.uicomponent.CTextField txtInter;
    private com.see.truetransact.uicomponent.CTextField txtInterExpLimit;
    private com.see.truetransact.uicomponent.CTextField txtKoleLandArea;
    private com.see.truetransact.uicomponent.CTextField txtLaonAmt;
    private com.see.truetransact.uicomponent.CTextField txtLimit_SD;
    private com.see.truetransact.uicomponent.CTextField txtLimit_SD1;
    private com.see.truetransact.uicomponent.CTextField txtMinActBalanceAD;
    private com.see.truetransact.uicomponent.CTextField txtMisServiceChrgAD;
    private com.see.truetransact.uicomponent.CTextField txtMobileNo;
    private com.see.truetransact.uicomponent.CTextField txtNextAccNo;
    private com.see.truetransact.uicomponent.CTextField txtNoInstall;
    private com.see.truetransact.uicomponent.CTextField txtNoInstallments;
    private com.see.truetransact.uicomponent.CTextField txtNoInstallments1;
    private com.see.truetransact.uicomponent.CTextField txtNoMonthsMora;
    private com.see.truetransact.uicomponent.CTextField txtPenalInter;
    private com.see.truetransact.uicomponent.CTextField txtPenalStatement;
    private com.see.truetransact.uicomponent.CTextField txtPeriodDifference_Days;
    private com.see.truetransact.uicomponent.CTextField txtPeriodDifference_Days1;
    private com.see.truetransact.uicomponent.CTextField txtPeriodDifference_Months;
    private com.see.truetransact.uicomponent.CTextField txtPeriodDifference_Months1;
    private com.see.truetransact.uicomponent.CTextField txtPeriodDifference_Years;
    private com.see.truetransact.uicomponent.CTextField txtPeriodDifference_Years1;
    private com.see.truetransact.uicomponent.CTextField txtPermittedBy;
    private com.see.truetransact.uicomponent.CTextField txtPurposeDesc;
    private com.see.truetransact.uicomponent.CTextField txtRebateInterest_Amt;
    private com.see.truetransact.uicomponent.CTextField txtRemarks_DocumentDetails;
    private com.see.truetransact.uicomponent.CTextField txtRepayScheduleMode;
    private com.see.truetransact.uicomponent.CTextField txtSHGId;
    private com.see.truetransact.uicomponent.CTextField txtSanctionNo;
    private com.see.truetransact.uicomponent.CTextField txtSanctionRemarks;
    private com.see.truetransact.uicomponent.CTextField txtSanctionSlNo;
    private com.see.truetransact.uicomponent.CTextField txtScheduleNo;
    private com.see.truetransact.uicomponent.CTextField txtSubsidyAccHead;
    private com.see.truetransact.uicomponent.CTextField txtSubsidyAdjustedAmt;
    private com.see.truetransact.uicomponent.CTextField txtSubsidyAmt;
    private com.see.truetransact.uicomponent.CTextField txtToAmt;
    private com.see.truetransact.uicomponent.CTextField txtTotalBaseAmt;
    private com.see.truetransact.uicomponent.CTextField txtTotalInstallAmt;
    private com.see.truetransact.uicomponent.CTextField txtTotalNoOfShare;
    private com.see.truetransact.uicomponent.CTextField txtTotalShareAmount;
    // End of variables declaration//GEN-END:variables
    private com.see.truetransact.uicomponent.CPanel panDailyLoanSanctionDetails;
    private com.see.truetransact.uicomponent.CComboBox cboCity_GD;
    private com.see.truetransact.uicomponent.CComboBox cboState_GD;
    private com.see.truetransact.uicomponent.CComboBox cboConstitution_GD;
    private com.see.truetransact.uicomponent.CComboBox cboCountry_GD;
    private com.see.truetransact.uicomponent.CComboBox cboProdId;
    private com.see.truetransact.uicomponent.CComboBox cboProdType;
    private com.see.truetransact.uicomponent.CPanel panGuaranAddr;
    private com.see.truetransact.uicomponent.CPanel panRunTimeGuarantorAddr;
    private com.see.truetransact.uicomponent.CPanel panGuarantor;
    private com.see.truetransact.uicomponent.CPanel panRunTimeGuarantor;
    private com.see.truetransact.uicomponent.CTextField txtGuaranterNo;
    private com.see.truetransact.uicomponent.CTextField txtCustomerID_GD;
    private com.see.truetransact.uicomponent.CTextField txtGuaranAccNo;
    private com.see.truetransact.uicomponent.CTextField txtGuaranName;
    private com.see.truetransact.uicomponent.CDateField tdtDOB_GD;
    private com.see.truetransact.uicomponent.CTextField txtStreet_GD;
    private com.see.truetransact.uicomponent.CTextField txtArea_GD;
    private com.see.truetransact.uicomponent.CTextField txtPin_GD;
    private com.see.truetransact.uicomponent.CTextField txtPhone_GD;
    private com.see.truetransact.uicomponent.CTextField txtGuarantorNetWorth;
    private com.see.truetransact.uicomponent.CTextField txtGuarantorNo;
    private com.see.truetransact.uicomponent.CDateField tdtAsOn_GD;
    private com.see.truetransact.uicomponent.CButton btnCustomerID_GD;
    private com.see.truetransact.uicomponent.CButton btnAccNo;
    private com.see.truetransact.uicomponent.CLabel lblDOB_GD;
    private com.see.truetransact.uicomponent.CLabel lblArea_GD;
    private com.see.truetransact.uicomponent.CLabel lblCity_GD;
    private com.see.truetransact.uicomponent.CLabel lblAsOn_GD;
    private com.see.truetransact.uicomponent.CLabel lblConstitution_GD;
    private com.see.truetransact.uicomponent.CLabel lblCountry_GD;
    private com.see.truetransact.uicomponent.CLabel lblCustomerID_GD;
    private com.see.truetransact.uicomponent.CLabel lblProdType;
    private com.see.truetransact.uicomponent.CLabel lblGuaranAccNo;
    private com.see.truetransact.uicomponent.CLabel lblGuaranName;
    private com.see.truetransact.uicomponent.CLabel lblGuarantorNo;
    private com.see.truetransact.uicomponent.CLabel lblGuarantorNetWorth;
    private com.see.truetransact.uicomponent.CLabel lblPhone_GD;
    private com.see.truetransact.uicomponent.CLabel lblPin_GD;
    private com.see.truetransact.uicomponent.CLabel lblProdId1;
    private com.see.truetransact.uicomponent.CLabel lblState_GD;
    private com.see.truetransact.uicomponent.CLabel lblStreet_GD;
    private com.see.truetransact.uicomponent.CSeparator sptGuarantorDetail_Vert;
    private com.see.truetransact.uicomponent.CLabel lblPLIName;
    private com.see.truetransact.uicomponent.CComboBox cboPLIName;
    private com.see.truetransact.uicomponent.CLabel lblPLIBranch;
    private com.see.truetransact.uicomponent.CComboBox cboPLIBranch;
    private com.see.truetransact.uicomponent.CLabel lblGuaratNo;
    private com.see.truetransact.uicomponent.CTextField txtGuaratNo;
    private com.see.truetransact.uicomponent.CLabel lblGuaranDate;
    private com.see.truetransact.uicomponent.CDateField tdtGuaranDate;
    private com.see.truetransact.uicomponent.CLabel lblGuaranPeriodFrom;
    private com.see.truetransact.uicomponent.CDateField tdtGuaranPeriodFrom;
    private com.see.truetransact.uicomponent.CLabel lblGuaranPeriodTo;
    private com.see.truetransact.uicomponent.CDateField tdtGuaranPeriodTo;
    private com.see.truetransact.uicomponent.CLabel lblGuaranCommision;
    private com.see.truetransact.uicomponent.CTextField txtGuaranCommision;
    private com.see.truetransact.uicomponent.CLabel lblGuaranStatus;
    private com.see.truetransact.uicomponent.CComboBox cboGuaranStatus;
    private com.see.truetransact.uicomponent.CDateField tdtStatusDate;
    private com.see.truetransact.uicomponent.CLabel lblGuarnRemarks;
    private com.see.truetransact.uicomponent.CTextField txtGuarnRemarks;
    private com.see.truetransact.uicomponent.CLabel lblStatusDate;
    private com.see.truetransact.uicomponent.CMenuBar mbrTokenConfig;
    private com.see.truetransact.uicomponent.CPanel panAssetDescription;
    private javax.swing.JSeparator sptView;
    private com.see.truetransact.uicomponent.CToolBar tbrTokenConfig;
    private com.see.truetransact.uicomponent.CLabel lblCaseNumber;
    private com.see.truetransact.uicomponent.CLabel lblCaseStatus;
    private com.see.truetransact.uicomponent.CLabel lblFillingDt;
    private com.see.truetransact.uicomponent.CLabel lblFillingFees;
    private com.see.truetransact.uicomponent.CLabel lblMiscCharges;
    private com.see.truetransact.uicomponent.CButton btnCaseDelete;
    private com.see.truetransact.uicomponent.CButton btnCaseNew;
    private com.see.truetransact.uicomponent.CButton btnCaseSave;
    private com.see.truetransact.uicomponent.CComboBox cboCaseStatus;
    private com.see.truetransact.uicomponent.CDateField tdtlFillingDt;
    private com.see.truetransact.uicomponent.CTextField txtCaseNumber;
    private com.see.truetransact.uicomponent.CTextField txtFillingFees;
    private com.see.truetransact.uicomponent.CTextField txtMiscCharges;
    private com.see.truetransact.uicomponent.CPanel panCaseDetailBtn;
    private com.see.truetransact.uicomponent.CPanel panCaseTableFieldsDetails;
    private com.see.truetransact.uicomponent.CPanel panScheduleTable;
    private com.see.truetransact.uicomponent.CScrollPane srpCaseTable;
    private com.see.truetransact.uicomponent.CTable tblCaseTable;
    // For Paddy Loans
    private com.see.truetransact.uicomponent.CLabel lblPurchaseAmount;
    private com.see.truetransact.uicomponent.CLabel lblPurchaseAmountVal;
    private com.see.truetransact.uicomponent.CLabel lblPurchaseDate;
    private com.see.truetransact.uicomponent.CLabel lblPurchaseDateVal;
    private com.see.truetransact.uicomponent.CLabel lblPurchaseID;
    private com.see.truetransact.uicomponent.CLabel lblPurchaseIDVal;
    private com.see.truetransact.uicomponent.CLabel lblPurchaseName;
    private com.see.truetransact.uicomponent.CLabel lblPurchaseNameVal;
    private com.see.truetransact.uicomponent.CLabel lblTransactionDate;
    private com.see.truetransact.uicomponent.CLabel lblTransactionDateVal;
    private com.see.truetransact.uicomponent.CLabel lblTotalWeight;
    private com.see.truetransact.uicomponent.CLabel lblTotalWeightVal;
    private com.see.truetransact.uicomponent.CLabel lblAcreage;
    private com.see.truetransact.uicomponent.CLabel lblAcreageVal;
    //For MDS Loans
    private com.see.truetransact.uicomponent.CLabel lblMDSChitAmountPaid;
    private com.see.truetransact.uicomponent.CLabel lblMDSChitAmountPaidVal;
    private com.see.truetransact.uicomponent.CLabel lblMDSChitAmountPaidVal1;
    private com.see.truetransact.uicomponent.CLabel lblMDSChitAmountPaidVal2;
    private com.see.truetransact.uicomponent.CLabel lblMDSChitAmountPaidVal3;
    private com.see.truetransact.uicomponent.CLabel lblMDSChitAmountPaidVal4;
    private com.see.truetransact.uicomponent.CLabel lblMDSChitAmountPaidVal5;
    private com.see.truetransact.uicomponent.CLabel lblMDSChitAmountPaidVal6;
    private com.see.truetransact.uicomponent.CLabel lblMDSMemberName;
    private com.see.truetransact.uicomponent.CLabel lblMDSMemberNameVal;
    private com.see.truetransact.uicomponent.CLabel lblMDSMemberNo;
    private com.see.truetransact.uicomponent.CLabel lblMDSMemberNoVal;
    private com.see.truetransact.uicomponent.CLabel lblMDSMemberType;
    private com.see.truetransact.uicomponent.CLabel lblMDSMemberTypeVal;
    //For Security Purpose
    private com.see.truetransact.uicomponent.CButton btnCollateralDelete;
    private com.see.truetransact.uicomponent.CButton btnCollateralNew;
    private com.see.truetransact.uicomponent.CButton btnCollateralSave;
    private com.see.truetransact.uicomponent.CButton btnMemNo;
    private com.see.truetransact.uicomponent.CButton btnMemberDelete;
    private com.see.truetransact.uicomponent.CButton btnMemberNew;
    private com.see.truetransact.uicomponent.CButton btnMemberSave;
    private com.see.truetransact.uicomponent.CButton btnSalaryDelete;
    private com.see.truetransact.uicomponent.CButton btnSalaryNew;
    private com.see.truetransact.uicomponent.CButton btnSalarySave;
    private com.see.truetransact.uicomponent.CComboBox cboCity;
    private com.see.truetransact.uicomponent.CComboBox cboNature;
    private com.see.truetransact.uicomponent.CLabel lblAddress;
    private com.see.truetransact.uicomponent.CLabel lblCity;
    private com.see.truetransact.uicomponent.CLabel lblContactNo;
    private com.see.truetransact.uicomponent.CLabel lblContactNum;
    private com.see.truetransact.uicomponent.CLabel lblDesignation;
    private com.see.truetransact.uicomponent.CLabel lblDocumentDate;
    private com.see.truetransact.uicomponent.CLabel lblDocumentNo;
    private com.see.truetransact.uicomponent.CLabel lblDocumentType;
    private com.see.truetransact.uicomponent.CLabel lblEmployerName;
    private com.see.truetransact.uicomponent.CLabel lblGahanYesNo;
    private com.see.truetransact.uicomponent.CPanel panGahanYesNo;
    private com.see.truetransact.uicomponent.CRadioButton rdoGahanYes;
    private com.see.truetransact.uicomponent.CRadioButton rdoGahanNo;
    private com.see.truetransact.uicomponent.CButtonGroup rdoGahanGroup;
    private com.see.truetransact.uicomponent.CLabel lblMemName;
    private com.see.truetransact.uicomponent.CLabel lblMemNetworth;
    private com.see.truetransact.uicomponent.CLabel lblMemPriority;
    private com.see.truetransact.uicomponent.CLabel lblMemNo;
    private com.see.truetransact.uicomponent.CLabel lblMemType;
    private com.see.truetransact.uicomponent.CLabel lblMemberNum;
    private com.see.truetransact.uicomponent.CPanel panOwnerMemberNumber;
    private com.see.truetransact.uicomponent.CPanel panDocumentNumber;
    private com.see.truetransact.uicomponent.CLabel lblNature;
    private com.see.truetransact.uicomponent.CLabel lblNetWorth1;
    private com.see.truetransact.uicomponent.CLabel lblOwnerMemberNname;
    private com.see.truetransact.uicomponent.CLabel lblOwnerMemberNo;
    private com.see.truetransact.uicomponent.CLabel lblPinCode;
    private com.see.truetransact.uicomponent.CLabel lblPledge;
    private com.see.truetransact.uicomponent.CLabel lblPledgeAmount;
    private com.see.truetransact.uicomponent.CLabel lblPledgeDate;
    private com.see.truetransact.uicomponent.CLabel lblPledgeNo;
    private com.see.truetransact.uicomponent.CLabel lblRegisteredOffice;
    private com.see.truetransact.uicomponent.CLabel lblRetirementDt;
    private com.see.truetransact.uicomponent.CLabel lblSalaryCertificateNo;
    private com.see.truetransact.uicomponent.CLabel lblSalaryRemark;
    private com.see.truetransact.uicomponent.CLabel lblSurveyNo;
    private com.see.truetransact.uicomponent.CLabel lblTotalArea;
    private com.see.truetransact.uicomponent.CLabel lblTotalSalary;
    private com.see.truetransact.uicomponent.CLabel lblVillage;
    private com.see.truetransact.uicomponent.CLabel lblPledgeType;
    private com.see.truetransact.uicomponent.CTextField txtPledgeType;
    private com.see.truetransact.uicomponent.CMenuBar mbrCustomer;
    private com.see.truetransact.uicomponent.CPanel panBtnCollateralType;
    private com.see.truetransact.uicomponent.CPanel panBtnMemberType;
    private com.see.truetransact.uicomponent.CPanel panBtnSalaryType;
    private com.see.truetransact.uicomponent.CPanel panCollateralTable;
    private com.see.truetransact.uicomponent.CPanel panCollateralJointTable;
    private com.see.truetransact.uicomponent.CPanel panCollateralTypeDetails;
    private com.see.truetransact.uicomponent.CPanel panCollatetalDetails;
    private com.see.truetransact.uicomponent.CPanel panEmpTransfer;
    private com.see.truetransact.uicomponent.CPanel panMemberDetails;
    private com.see.truetransact.uicomponent.CPanel panMemberNumber;
    private com.see.truetransact.uicomponent.CPanel panMemberTypeDetails;
    private com.see.truetransact.uicomponent.CPanel panMemberTypeTable;
    private com.see.truetransact.uicomponent.CPanel panSalaryTable;
    private com.see.truetransact.uicomponent.CPanel panSalaryDetails;
    private com.see.truetransact.uicomponent.CPanel panAllSalaryDetails;
    private com.see.truetransact.uicomponent.CScrollPane srpCollateralTable;
    private com.see.truetransact.uicomponent.CScrollPane srpCollateralJointTable;
    private com.see.truetransact.uicomponent.CScrollPane srpMemberType;
    private com.see.truetransact.uicomponent.CScrollPane srpSalary;
    private com.see.truetransact.uicomponent.CScrollPane srpTxtAreaParticulars;
    private com.see.truetransact.uicomponent.CTabbedPane tabMasterMaintenance;
    private com.see.truetransact.uicomponent.CTable tblCollateral;
    private com.see.truetransact.uicomponent.CTable tblJointCollateral;
    private com.see.truetransact.uicomponent.CTable tblMemberType;
    private com.see.truetransact.uicomponent.CTable tblSalary;
    private com.see.truetransact.uicomponent.CLabel lblRight;
    private com.see.truetransact.uicomponent.CComboBox cboRight;
    private com.see.truetransact.uicomponent.CDateField tdtDocumentDate;
    private com.see.truetransact.uicomponent.CDateField tdtPledgeDate;
    private com.see.truetransact.uicomponent.CDateField tdtRetirementDt;
    private com.see.truetransact.uicomponent.CTextField txtAddress;
    private com.see.truetransact.uicomponent.CTextArea txtAreaParticular;
    private com.see.truetransact.uicomponent.CTextField txtContactNo;
    private com.see.truetransact.uicomponent.CTextField txtContactNum;
    private com.see.truetransact.uicomponent.CTextField txtDesignation;
    private com.see.truetransact.uicomponent.CTextField txtDocumentNo;
    private com.see.truetransact.uicomponent.CLabel lblJewelleryDetails;
    private com.see.truetransact.uicomponent.CLabel lblGrossWeight;
    private com.see.truetransact.uicomponent.CLabel lblNetWeight;
    private com.see.truetransact.uicomponent.CLabel lblValueOfGold;
    private com.see.truetransact.uicomponent.CLabel lblGoldRemarks;
    private com.see.truetransact.uicomponent.CTextArea txtJewelleryDetails;
    private com.see.truetransact.uicomponent.CTextField txtGrossWeight;
    private com.see.truetransact.uicomponent.CTextField txtNetWeight;
    private com.see.truetransact.uicomponent.CTextField txtValueOfGold;
    private com.see.truetransact.uicomponent.CTextField txtGoldRemarks;
    private com.see.truetransact.uicomponent.CLabel lblGoldSecurityExists;
    private com.see.truetransact.uicomponent.CPanel panGoldSecurityYesNo;
    private com.see.truetransact.uicomponent.CPanel panGoldSecurityId;
    private com.see.truetransact.uicomponent.CRadioButton rdoGoldSecurityExitsYes;
    private com.see.truetransact.uicomponent.CRadioButton rdoGoldSecurityExitsNo;
    private com.see.truetransact.uicomponent.CLabel lblGoldSecurityId;
    private com.see.truetransact.uicomponent.CTextField txtGoldSecurityId;
    private com.see.truetransact.uicomponent.CButton btnGoldSecurityIdSearch;
    private com.see.truetransact.uicomponent.CPanel panGoldTypeDetails;
//    private com.see.truetransact.uicomponent.CTextField txtDocumentType;
    private com.see.truetransact.uicomponent.CComboBox cboDocumentType;
    private com.see.truetransact.uicomponent.CTextField txtEmployerName;
    private com.see.truetransact.uicomponent.CTextField txtMemName;
    private com.see.truetransact.uicomponent.CTextField txtMemNetworth;
    private com.see.truetransact.uicomponent.CTextField txtMemPriority;
    private com.see.truetransact.uicomponent.CTextField txtMemNo;
    private com.see.truetransact.uicomponent.CTextField txtMemType;
    private com.see.truetransact.uicomponent.CTextField txtMemberNum;
    private com.see.truetransact.uicomponent.CTextField txtNetWorth1;
    private com.see.truetransact.uicomponent.CTextField txtOwnerMemberNname;
    private com.see.truetransact.uicomponent.CTextField txtPinCode;
    private com.see.truetransact.uicomponent.CComboBox cboPledge;
    private com.see.truetransact.uicomponent.CTextField txtPledgeAmount;
    private com.see.truetransact.uicomponent.CTextField txtPledgeNo;
    private com.see.truetransact.uicomponent.CTextField txtOwnerMemNo;
    private com.see.truetransact.uicomponent.CButton btnOwnerMemNo;
    private com.see.truetransact.uicomponent.CButton btnDocumentNo;
    private com.see.truetransact.uicomponent.CTextField txtRegisteredOffice;
    private com.see.truetransact.uicomponent.CTextField txtSalaryCertificateNo;
    private com.see.truetransact.uicomponent.CTextField txtSalaryRemark;
    private com.see.truetransact.uicomponent.CTextField txtSurveyNo;
    private com.see.truetransact.uicomponent.CTextField txtTotalArea;
    private com.see.truetransact.uicomponent.CTextField txtTotalSalary;
    private com.see.truetransact.uicomponent.CTextField txtVillage;
    private javax.swing.JScrollPane srpChargeDetails;
    private com.see.truetransact.uicomponent.CPanel panDepositDetails;
    private com.see.truetransact.uicomponent.CLabel lblDepAmount;
    private com.see.truetransact.uicomponent.CLabel lblProductId2;
    private com.see.truetransact.uicomponent.CLabel lblRateOfInterest;
    private com.see.truetransact.uicomponent.CLabel lblDepDt;
    private com.see.truetransact.uicomponent.CTextField txtDepAmount;
    private com.see.truetransact.uicomponent.CTextField txtMaturityValue;
    private com.see.truetransact.uicomponent.CTextField txtRateOfInterest;
    private com.see.truetransact.uicomponent.CLabel lblMaturityDt;
    private com.see.truetransact.uicomponent.CLabel lblMaturityValue;
    private com.see.truetransact.uicomponent.CLabel lblDepNo;
    private com.see.truetransact.uicomponent.CDateField tdtDepDt;
    private com.see.truetransact.uicomponent.CButton btnDepositNew;
    private com.see.truetransact.uicomponent.CButton btnDepositSave;
    private com.see.truetransact.uicomponent.CButton btnDepositDelete;
    private com.see.truetransact.uicomponent.CPanel panBtnDeposit;
    private com.see.truetransact.uicomponent.CDateField txtMaturityDt;
    private com.see.truetransact.uicomponent.CComboBox cboDepProdType;
    private com.see.truetransact.uicomponent.CPanel panDepNo;
    private com.see.truetransact.uicomponent.CButton btnDepNo;
    private com.see.truetransact.uicomponent.CLabel lblProductTypeSecurity;
    private com.see.truetransact.uicomponent.CComboBox cboProductTypeSecurity;
    private com.see.truetransact.uicomponent.CPanel panDepositType;
    private com.see.truetransact.uicomponent.CPanel panDepositTable;
    private com.see.truetransact.uicomponent.CScrollPane srpTableDeposit;
    private com.see.truetransact.uicomponent.CLabel lblTotalDeposit;
    private com.see.truetransact.uicomponent.CLabel lblTotalDepositValue;
    private com.see.truetransact.uicomponent.CTextField txtDepNo;
    private com.see.truetransact.uicomponent.CTable tblDepositDetails;
    private com.see.truetransact.uicomponent.CPanel panOtherSecurityDetails;
    private com.see.truetransact.uicomponent.CLabel lblLosName;
    private com.see.truetransact.uicomponent.CLabel lblLosSecurityType;
    private com.see.truetransact.uicomponent.CLabel lblLosSecurityNo;
    private com.see.truetransact.uicomponent.CLabel lblLosAmount;
    private com.see.truetransact.uicomponent.CTextField txtLosName;
    private com.see.truetransact.uicomponent.CTextField txtLosSecurityNo;
    private com.see.truetransact.uicomponent.CTextField txtLosMaturityvalue;
    private com.see.truetransact.uicomponent.CLabel lblLosIssueDate;
    private com.see.truetransact.uicomponent.CLabel lblLosMaturityValue;
    private com.see.truetransact.uicomponent.CLabel lblLosMaturityDate;
    private com.see.truetransact.uicomponent.CLabel lblLosRemarks;
    private com.see.truetransact.uicomponent.CDateField tdtLosMaturityDate;
    private com.see.truetransact.uicomponent.CButton btnLosNew;
    private com.see.truetransact.uicomponent.CButton btnLosSave;
    private com.see.truetransact.uicomponent.CButton btnLosDelete;
    private com.see.truetransact.uicomponent.CTextField txtLosAmount;
    private com.see.truetransact.uicomponent.CTextField txtLosRemarks;
    private com.see.truetransact.uicomponent.CDateField tdtLosIsuueDate;
    private com.see.truetransact.uicomponent.CTextField txtLosMaturityValue;
    private com.see.truetransact.uicomponent.CDateField tdtLosIssueDate;
    private com.see.truetransact.uicomponent.CLabel lblLosOtherInstitution;
    private com.see.truetransact.uicomponent.CComboBox cboLosOtherInstitution;
    private com.see.truetransact.uicomponent.CComboBox cboLosSecurityType;
    private com.see.truetransact.uicomponent.CPanel panLosTable;
    private com.see.truetransact.uicomponent.CPanel panLosDetails;
    private com.see.truetransact.uicomponent.CPanel panLosBtn;
    private com.see.truetransact.uicomponent.CDateField tdtLosMaturityDt;
    private com.see.truetransact.uicomponent.CScrollPane srpTableLos;
    private com.see.truetransact.uicomponent.CTable tblLosDetails;
    //court details 
    // Variables declaration - do not modify
    private com.see.truetransact.uicomponent.CButton btnCourtOrderDel;
    private com.see.truetransact.uicomponent.CButton btnCourtOrderNew;
    private com.see.truetransact.uicomponent.CButton btnCourtOrderSave;
    private com.see.truetransact.uicomponent.CPanel btnSavePan;
    private com.see.truetransact.uicomponent.CInternalFrame cInternalFrame1;
    private com.see.truetransact.uicomponent.CLabel cLabel14;
    private com.see.truetransact.uicomponent.CComboBox cboFreq;
    private com.see.truetransact.uicomponent.CLabel lblChargeAmount;
    private com.see.truetransact.uicomponent.CLabel lblCourtOrderDate;
    private com.see.truetransact.uicomponent.CLabel lblCourtOrderNo;
    private com.see.truetransact.uicomponent.CLabel lblFirstInstallDt;
    private com.see.truetransact.uicomponent.CLabel lblFreq;
    private com.see.truetransact.uicomponent.CLabel lblInstallmentAmt;
    private com.see.truetransact.uicomponent.CLabel lblInterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblLastInstallDate;
    private com.see.truetransact.uicomponent.CLabel lblNoInstallment;
    private com.see.truetransact.uicomponent.CLabel lblOTSDate;
    private com.see.truetransact.uicomponent.CLabel lblOTSRate;
    private com.see.truetransact.uicomponent.CLabel lblPenal;
    private com.see.truetransact.uicomponent.CLabel lblPenalInterestAmount;
    private com.see.truetransact.uicomponent.CLabel lblPrincipalAmount;
    private com.see.truetransact.uicomponent.CLabel lblRepayRemarks;
    private com.see.truetransact.uicomponent.CLabel lblSettlementAmt;
    private com.see.truetransact.uicomponent.CLabel lblTotAmountDue;
    private com.see.truetransact.uicomponent.CLabel lblTotalAmountWrittenOff;
    private com.see.truetransact.uicomponent.CPanel panAmountWrittenOff;
    private com.see.truetransact.uicomponent.CPanel panCourtInterest;
    private com.see.truetransact.uicomponent.CPanel panCourtOrder;
    private com.see.truetransact.uicomponent.CPanel panCourtRepaymentDetails;
    private com.see.truetransact.uicomponent.CPanel panFacilityDetails_Data1;
    private com.see.truetransact.uicomponent.CPanel panOTSDetails;
    private com.see.truetransact.uicomponent.CRadioButton rdoRepaySingle_NO;
    private com.see.truetransact.uicomponent.CRadioButton rdoRepaySingle_YES;
    private com.see.truetransact.uicomponent.CDateField tdtCourtOrderDate;
    private com.see.truetransact.uicomponent.CDateField tdtFirstInstallDt;
    private com.see.truetransact.uicomponent.CDateField tdtLastInstallDate;
    private com.see.truetransact.uicomponent.CDateField tdtOTSDate;
    private com.see.truetransact.uicomponent.CTextField txtOTSRate;
    private com.see.truetransact.uicomponent.CTextField txtChargeAmount;
    private com.see.truetransact.uicomponent.CTextField txtCourtOrderNo;
    private com.see.truetransact.uicomponent.CTextField txtInstallmentAmt;
    private com.see.truetransact.uicomponent.CTextField txtInterestAmount;
    private com.see.truetransact.uicomponent.CTextField txtNoInstallment;
    private com.see.truetransact.uicomponent.CTextField txtPenal;
    private com.see.truetransact.uicomponent.CTextField txtPenalInterestAmount;
    private com.see.truetransact.uicomponent.CTextField txtPrincipalAmount;
    private com.see.truetransact.uicomponent.CTextField txtRepayRemarks;
    private com.see.truetransact.uicomponent.CTextField txtSettlementAmt;
    private com.see.truetransact.uicomponent.CTextField txtTotAmountDue;
    private com.see.truetransact.uicomponent.CTextField txtTotalAmountWrittenOff;
    // End of variables declaration
    //crop loan sanction details
    // Variables declaration - do not modify
    private com.see.truetransact.uicomponent.CButton btnCrop_Delete;
    private com.see.truetransact.uicomponent.CButton btnCrop_New;
    private com.see.truetransact.uicomponent.CButton btnCrop_Save;
    private com.see.truetransact.uicomponent.CComboBox cboCropName;
    private com.see.truetransact.uicomponent.CLabel lblAreaAcrs;
    private com.see.truetransact.uicomponent.CLabel lblCropName;
    private com.see.truetransact.uicomponent.CLabel lblEligibleCropAmt;
    private com.see.truetransact.uicomponent.CLabel lblTotalCropLimit;
    private com.see.truetransact.uicomponent.CLabel lblTotalCropLimitAmt;
    private com.see.truetransact.uicomponent.CPanel panButton_Crop;
    private com.see.truetransact.uicomponent.CPanel panCropDataDetails;
    private com.see.truetransact.uicomponent.CPanel panCropDetails;
    private com.see.truetransact.uicomponent.CPanel panCropTotalPanel;
    private com.see.truetransact.uicomponent.CPanel panTable_Crop;
    private com.see.truetransact.uicomponent.CScrollPane srpTable_Crop;
    private com.see.truetransact.uicomponent.CTable tblCropDetails;
    private com.see.truetransact.uicomponent.CTextField txtAreaAcrs;
    private com.see.truetransact.uicomponent.CTextField txtEligibleCropAmt;
    // End of variables declaration
    private com.see.truetransact.uicomponent.CPanel panDirectRepayment;
    private com.see.truetransact.uicomponent.CLabel lblDirectRepayment;
    private com.see.truetransact.uicomponent.CPanel panDirectPayment;
    private com.see.truetransact.uicomponent.CRadioButton DirectRepayment_Yes;
    private com.see.truetransact.uicomponent.CRadioButton DirectRepayment_No;
    private com.see.truetransact.uicomponent.CComboBox cboDirectRepaymentProdType;
    private com.see.truetransact.uicomponent.CLabel lblDirectRepaymentProdType;
    private com.see.truetransact.uicomponent.CComboBox cboDirectRepaymentProdId;
    private com.see.truetransact.uicomponent.CLabel lblDirectRepaymentProdId;
    private com.see.truetransact.uicomponent.CLabel lblDirectRepaymentAcctHead;
    private com.see.truetransact.uicomponent.CLabel lblDirectRepaymentAcctNo;
    private com.see.truetransact.uicomponent.CPanel cPanel1;
    private com.see.truetransact.uicomponent.CTextField txtDirectRepaymentAcctHead;
    private com.see.truetransact.uicomponent.CButton btnDirectRepaymentAcctHead;
    private com.see.truetransact.uicomponent.CPanel cPanel2;
    private com.see.truetransact.uicomponent.CPanel panDirectRepaymentLoanPeriod;
    private com.see.truetransact.uicomponent.CTextField txtDirectRepaymentLoanPeriod;
    private com.see.truetransact.uicomponent.CComboBox cboDirectRepaymentLoanPeriod;
    private com.see.truetransact.uicomponent.CLabel lblDirectRepaymentLoanPeriod;
    private com.see.truetransact.uicomponent.CLabel lblFacility_Repay_Date2;
    private com.see.truetransact.uicomponent.CDateField tdtDirect_Repay_Date;
    private com.see.truetransact.uicomponent.CButton btnDirectRepaymentAcctNo;
    private com.see.truetransact.uicomponent.CTextField txtDirectRepaymentAcctNo;
    private com.see.truetransact.uicomponent.CButton btnVehicleMemNo;
    private com.see.truetransact.uicomponent.CButton btnVehicleDelete;
    private com.see.truetransact.uicomponent.CButton btnVehicleNew;
    private com.see.truetransact.uicomponent.CButton btnVehicleSave;
    private com.see.truetransact.uicomponent.CLabel lblVehicleMemRetireDate;
    private com.see.truetransact.uicomponent.CLabel lblVehicleNo;
    private com.see.truetransact.uicomponent.CLabel lblVehicleType;
    private com.see.truetransact.uicomponent.CLabel lblVehicleDetails;
    private com.see.truetransact.uicomponent.CLabel lblVehicleRcBookNo;
    private com.see.truetransact.uicomponent.CLabel lblVehicleDate;
    private com.see.truetransact.uicomponent.CLabel lblVehicleContactNum;
    private com.see.truetransact.uicomponent.CLabel lblVehicleMemName;
    private com.see.truetransact.uicomponent.CLabel lblVehicleMemberName;
    private com.see.truetransact.uicomponent.CLabel lblVehicleMemNo;
    private com.see.truetransact.uicomponent.CLabel lblVehicleMemberNum;
    private com.see.truetransact.uicomponent.CLabel lblVehicleMemType;
    private com.see.truetransact.uicomponent.CPanel panBtnVehicleType;
    private com.see.truetransact.uicomponent.CPanel panVehicleDetails;
    private com.see.truetransact.uicomponent.CPanel panVehicleNumber;
    private com.see.truetransact.uicomponent.CScrollPane srpVehicleType;
    private com.see.truetransact.uicomponent.CPanel panVehicleTypeDetails;
    private com.see.truetransact.uicomponent.CPanel panVehicleTypeTable;
    private com.see.truetransact.uicomponent.CTable tblVehicleType;
    private com.see.truetransact.uicomponent.CScrollPane srpTxtAreaVehicledtails;
    private com.see.truetransact.uicomponent.CTextArea txtVehicleDetals;
    private com.see.truetransact.uicomponent.CTextField txtVehicleNo;
    private com.see.truetransact.uicomponent.CTextField txtVehicleRcBookNo;
    private com.see.truetransact.uicomponent.CTextField txtVehicleType;
    private com.see.truetransact.uicomponent.CDateField txtVehicleDate;
    private com.see.truetransact.uicomponent.CTextField txtVehicleContactNum;
    private com.see.truetransact.uicomponent.CTextField txtVehicleMemType;
    private com.see.truetransact.uicomponent.CTextField txtVehicleMemberNum;
    private com.see.truetransact.uicomponent.CTextField txtVehicleMemberName;
    private com.see.truetransact.uicomponent.CLabel lblVehicleNetWorth;
    private com.see.truetransact.uicomponent.CLabel lblTotalVehicleMemSal;
    private com.see.truetransact.uicomponent.CTextField txtVehicleNetWorth;
    private com.see.truetransact.uicomponent.CTextField txtVehicleMemSal;
    // private  com.see.truetransact.uicomponent.CScrollPane sptFacilityDetails_Vert;
    // private com.see.truetransact.uicomponent.CDateField tdtDirect_Repay_Date;
    GridBagConstraints gridBagConstraints;
}
