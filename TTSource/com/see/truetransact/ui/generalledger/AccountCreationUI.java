/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.
 * 
 *
 * AccountCreationUI.java
 *
 * Created on August 8, 2003, 11:02 AM
 */

package com.see.truetransact.ui.generalledger;

import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.clientutil.ClientConstants;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.clientutil.ComboBoxModel;
import com.see.truetransact.uimandatory.UIMandatoryField;
import com.see.truetransact.uimandatory.MandatoryCheck;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.clientutil.CMandatoryDialog;
import com.see.truetransact.ui.common.viewall.ViewAll;
import com.see.truetransact.uivalidation.NumericValidation;
import java.util.HashMap;
import com.see.truetransact.uicomponent.COptionPane;
import com.see.truetransact.ui.common.authorizestatus.AuthorizeStatusUI;
import com.see.truetransact.ui.TrueTransactMain;
import com.see.truetransact.clientproxy.ProxyParameters;
import com.see.truetransact.ui.common.transaction.TransactionUI;
import com.see.truetransact.ui.common.viewall.AuthorizeListUI;

import org.apache.log4j.Logger;

/**
 *
 * @author  Annamalai
 */
public class AccountCreationUI extends CInternalFrame implements java.util.Observer,UIMandatoryField{
    private AccountCreationOB _observable;
    //    private final AccountCreationRB resourceBundle = new AccountCreationRB();
    java.util.ResourceBundle resourceBundle = java.util.ResourceBundle.getBundle("com.see.truetransact.ui.generalledger.AccountCreationRB", ProxyParameters.LANGUAGE);
    
    private HashMap _mandatoryMap;
    private final int AUTHORIZE=3;
    int viewType=-1;
    boolean isFilled = false;
    private int rejectFlag=0;
    boolean fromAuthorizeUI = false;
    AuthorizeListUI authorizeListUI = null;
    TransactionUI transactionUI = new TransactionUI();
    
    private final static Logger _log = Logger.getLogger(AccountCreationUI.class);
    
    /** Creates new form AccountCreation */
    public AccountCreationUI() {
        initComponents();
        initStartup();
    }
    
    private void initStartup() {
        setFieldNames();
        setMaximumLength();
        internationalize();
        setObservable();
        initComponentData();
        ClientUtil.enableDisable(this, false);
        setButtonEnableDisable();
        setMandatoryHashMap();
        _observable.resetStatus();
        _observable.resetForm();
        treAcHdTree.setModel(_observable.getAcHdTree());
        treAcHdTree.revalidate();
    }
    
    private void setMaximumLength(){
        txtAccountHeadDesc.setMaxLength(128);
        txtAccountHead.setMaxLength(16);
        txtAccountHeadOrder.setValidation(new NumericValidation(16,0));
    }
    
    private void setObservable() {
        //observable = new AccountCreationOB();
        
        /* Implementing Singleton pattern */
        _observable = AccountCreationOB.getInstance();
        _observable.addObserver(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dlgAccountCreation = new com.see.truetransact.uicomponent.CDialog();
        srpAccountCreation = new com.see.truetransact.uicomponent.CScrollPane();
        tblAccountCreation = new com.see.truetransact.uicomponent.CTable();
        rdoReceiveDayBookDetail = new com.see.truetransact.uicomponent.CButtonGroup();
        rdoPayDayBookDetail = new com.see.truetransact.uicomponent.CButtonGroup();
        tbrHead = new javax.swing.JToolBar();
        btnView1 = new com.see.truetransact.uicomponent.CButton();
        lblSpace6 = new com.see.truetransact.uicomponent.CLabel();
        btnNew = new com.see.truetransact.uicomponent.CButton();
        lblSpace11 = new com.see.truetransact.uicomponent.CLabel();
        btnEdit = new com.see.truetransact.uicomponent.CButton();
        lblSpace12 = new com.see.truetransact.uicomponent.CLabel();
        btnDelete = new com.see.truetransact.uicomponent.CButton();
        lblSpace5 = new com.see.truetransact.uicomponent.CLabel();
        lblSpace2 = new com.see.truetransact.uicomponent.CLabel();
        btnSave = new com.see.truetransact.uicomponent.CButton();
        lblSpace13 = new com.see.truetransact.uicomponent.CLabel();
        btnCancel = new com.see.truetransact.uicomponent.CButton();
        lblSpace3 = new com.see.truetransact.uicomponent.CLabel();
        btnAuthorize = new com.see.truetransact.uicomponent.CButton();
        lblSpace14 = new com.see.truetransact.uicomponent.CLabel();
        btnException = new com.see.truetransact.uicomponent.CButton();
        lblSpace15 = new com.see.truetransact.uicomponent.CLabel();
        btnReject = new com.see.truetransact.uicomponent.CButton();
        lblSpace4 = new com.see.truetransact.uicomponent.CLabel();
        btnPrint = new com.see.truetransact.uicomponent.CButton();
        lblSpace16 = new com.see.truetransact.uicomponent.CLabel();
        btnClose = new com.see.truetransact.uicomponent.CButton();
        panStatus = new com.see.truetransact.uicomponent.CPanel();
        lblSpace1 = new com.see.truetransact.uicomponent.CLabel();
        lblStatus = new com.see.truetransact.uicomponent.CLabel();
        lblMsg = new com.see.truetransact.uicomponent.CLabel();
        panAccountCreation = new com.see.truetransact.uicomponent.CPanel();
        panAcctCreationDetails = new com.see.truetransact.uicomponent.CPanel();
        cboAccountType = new com.see.truetransact.uicomponent.CComboBox();
        cboMajorHead = new com.see.truetransact.uicomponent.CComboBox();
        cboSubHead = new com.see.truetransact.uicomponent.CComboBox();
        txtAccountHead = new com.see.truetransact.uicomponent.CTextField();
        lblAccountType = new com.see.truetransact.uicomponent.CLabel();
        lblMajorHead = new com.see.truetransact.uicomponent.CLabel();
        lblSubHead = new com.see.truetransact.uicomponent.CLabel();
        lblAccountHeadCode = new com.see.truetransact.uicomponent.CLabel();
        lblAccountHead = new com.see.truetransact.uicomponent.CLabel();
        txtAccountHeadCode = new com.see.truetransact.uicomponent.CTextField();
        txtAccountHeadDesc = new com.see.truetransact.uicomponent.CTextField();
        lblAccountHeadDesc = new com.see.truetransact.uicomponent.CLabel();
        panPayDayBookDetail = new com.see.truetransact.uicomponent.CPanel();
        rdoPayDayBookDetail_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoPayDayBookDetail_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblPayDayBookDetail = new com.see.truetransact.uicomponent.CLabel();
        panReceiveDayBookDetail = new com.see.truetransact.uicomponent.CPanel();
        rdoReceiveDayBookDetail_Yes = new com.see.truetransact.uicomponent.CRadioButton();
        rdoReceiveDayBookDetail_No = new com.see.truetransact.uicomponent.CRadioButton();
        lblReceiveDayBookDetail = new com.see.truetransact.uicomponent.CLabel();
        lblAccountHeadOrder = new com.see.truetransact.uicomponent.CLabel();
        txtAccountHeadOrder = new com.see.truetransact.uicomponent.CTextField();
        panAcHdTree = new com.see.truetransact.uicomponent.CPanel();
        srpAcHdTree = new com.see.truetransact.uicomponent.CScrollPane();
        treAcHdTree = new javax.swing.JTree();
        mbrMain = new com.see.truetransact.uicomponent.CMenuBar();
        mnuProcess = new javax.swing.JMenu();
        mitNew = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        sptEdit = new javax.swing.JSeparator();
        mitDelete = new javax.swing.JMenuItem();
        sptDelete = new javax.swing.JSeparator();
        mitSave = new javax.swing.JMenuItem();
        mitCancel = new javax.swing.JMenuItem();
        sptCancel = new javax.swing.JSeparator();
        mitAuthorize = new javax.swing.JMenuItem();
        mitReject = new javax.swing.JMenuItem();
        mitException = new javax.swing.JMenuItem();
        sptException = new javax.swing.JSeparator();
        mitPrint = new javax.swing.JMenuItem();
        mitClose = new javax.swing.JMenuItem();

        dlgAccountCreation.getContentPane().setLayout(new java.awt.GridBagLayout());

        tblAccountCreation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Account Type", "Major Head", "Sub Head", "Account Head", "Calling Code"
            }
        ));
        srpAccountCreation.setViewportView(tblAccountCreation);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dlgAccountCreation.getContentPane().add(srpAccountCreation, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Account Creation");
        setMinimumSize(new java.awt.Dimension(730, 400));
        setPreferredSize(new java.awt.Dimension(730, 400));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        btnView1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_Summary.gif"))); // NOI18N
        btnView1.setToolTipText("Enquiry");
        btnView1.setEnabled(false);
        btnView1.setFocusable(false);
        btnView1.setMinimumSize(new java.awt.Dimension(21, 21));
        btnView1.setPreferredSize(new java.awt.Dimension(21, 21));
        btnView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnView1ActionPerformed(evt);
            }
        });
        tbrHead.add(btnView1);

        lblSpace6.setText("     ");
        tbrHead.add(lblSpace6);

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif"))); // NOI18N
        btnNew.setToolTipText("New");
        btnNew.setEnabled(false);
        btnNew.setFocusable(false);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        tbrHead.add(btnNew);

        lblSpace11.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace11.setText("     ");
        lblSpace11.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace11.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace11.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrHead.add(lblSpace11);

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_EDIT.gif"))); // NOI18N
        btnEdit.setToolTipText("Edit");
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        tbrHead.add(btnEdit);

        lblSpace12.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace12.setText("     ");
        lblSpace12.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace12.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace12.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrHead.add(lblSpace12);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif"))); // NOI18N
        btnDelete.setToolTipText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        tbrHead.add(btnDelete);

        lblSpace5.setText("     ");
        tbrHead.add(lblSpace5);

        lblSpace2.setText("     ");
        tbrHead.add(lblSpace2);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif"))); // NOI18N
        btnSave.setToolTipText("Save");
        btnSave.setFocusable(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        tbrHead.add(btnSave);

        lblSpace13.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace13.setText("     ");
        lblSpace13.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace13.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace13.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrHead.add(lblSpace13);

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CANCEL.gif"))); // NOI18N
        btnCancel.setToolTipText("Cancel");
        btnCancel.setEnabled(false);
        btnCancel.setFocusable(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        tbrHead.add(btnCancel);

        lblSpace3.setText("     ");
        tbrHead.add(lblSpace3);

        btnAuthorize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_AUTHORIZE.gif"))); // NOI18N
        btnAuthorize.setToolTipText("Authorize");
        btnAuthorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAuthorizeActionPerformed(evt);
            }
        });
        tbrHead.add(btnAuthorize);

        lblSpace14.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace14.setText("     ");
        lblSpace14.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace14.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace14.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrHead.add(lblSpace14);

        btnException.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_EXCEPTION.gif"))); // NOI18N
        btnException.setToolTipText("Exception");
        btnException.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExceptionActionPerformed(evt);
            }
        });
        tbrHead.add(btnException);

        lblSpace15.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace15.setText("     ");
        lblSpace15.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace15.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace15.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrHead.add(lblSpace15);

        btnReject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_REJECT.gif"))); // NOI18N
        btnReject.setToolTipText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        tbrHead.add(btnReject);

        lblSpace4.setText("     ");
        tbrHead.add(lblSpace4);

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_PRINT.gif"))); // NOI18N
        btnPrint.setToolTipText("Print");
        tbrHead.add(btnPrint);

        lblSpace16.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace16.setText("     ");
        lblSpace16.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace16.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace16.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrHead.add(lblSpace16);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CLOSE.gif"))); // NOI18N
        btnClose.setToolTipText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        tbrHead.add(btnClose);

        getContentPane().add(tbrHead, java.awt.BorderLayout.NORTH);

        panStatus.setLayout(new java.awt.GridBagLayout());

        lblSpace1.setText(" Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblSpace1, gridBagConstraints);

        lblStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblStatus.setText("                      ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblStatus, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblMsg, gridBagConstraints);

        getContentPane().add(panStatus, java.awt.BorderLayout.SOUTH);

        panAccountCreation.setPreferredSize(new java.awt.Dimension(730, 324));
        panAccountCreation.setLayout(new java.awt.GridBagLayout());

        panAcctCreationDetails.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panAcctCreationDetails.setPreferredSize(new java.awt.Dimension(300, 176));
        panAcctCreationDetails.setLayout(new java.awt.GridBagLayout());

        cboAccountType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboAccountType.setPopupWidth(200);
        cboAccountType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboAccountTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(cboAccountType, gridBagConstraints);

        cboMajorHead.setMinimumSize(new java.awt.Dimension(100, 21));
        cboMajorHead.setPopupWidth(200);
        cboMajorHead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMajorHeadActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(cboMajorHead, gridBagConstraints);

        cboSubHead.setMinimumSize(new java.awt.Dimension(100, 21));
        cboSubHead.setPopupWidth(200);
        cboSubHead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSubHeadActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(cboSubHead, gridBagConstraints);

        txtAccountHead.setAllowAll(true);
        txtAccountHead.setMaxLength(16);
        txtAccountHead.setMinimumSize(new java.awt.Dimension(100, 21));
        txtAccountHead.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(txtAccountHead, gridBagConstraints);

        lblAccountType.setText("Account Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(lblAccountType, gridBagConstraints);

        lblMajorHead.setText("Major Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(lblMajorHead, gridBagConstraints);

        lblSubHead.setText("Sub Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(lblSubHead, gridBagConstraints);

        lblAccountHeadCode.setText("Account Head Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(lblAccountHeadCode, gridBagConstraints);

        lblAccountHead.setText("Account Head");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(lblAccountHead, gridBagConstraints);

        txtAccountHeadCode.setMaxLength(16);
        txtAccountHeadCode.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(txtAccountHeadCode, gridBagConstraints);

        txtAccountHeadDesc.setAllowAll(true);
        txtAccountHeadDesc.setMaxLength(128);
        txtAccountHeadDesc.setMinimumSize(new java.awt.Dimension(100, 21));
        txtAccountHeadDesc.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(txtAccountHeadDesc, gridBagConstraints);

        lblAccountHeadDesc.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(lblAccountHeadDesc, gridBagConstraints);

        panPayDayBookDetail.setLayout(new java.awt.GridBagLayout());

        rdoPayDayBookDetail.add(rdoPayDayBookDetail_Yes);
        rdoPayDayBookDetail_Yes.setText("Yes");
        rdoPayDayBookDetail_Yes.setMaximumSize(new java.awt.Dimension(48, 21));
        rdoPayDayBookDetail_Yes.setMinimumSize(new java.awt.Dimension(48, 18));
        rdoPayDayBookDetail_Yes.setPreferredSize(new java.awt.Dimension(48, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        panPayDayBookDetail.add(rdoPayDayBookDetail_Yes, gridBagConstraints);

        rdoPayDayBookDetail.add(rdoPayDayBookDetail_No);
        rdoPayDayBookDetail_No.setText("No");
        rdoPayDayBookDetail_No.setMinimumSize(new java.awt.Dimension(46, 18));
        rdoPayDayBookDetail_No.setPreferredSize(new java.awt.Dimension(46, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        panPayDayBookDetail.add(rdoPayDayBookDetail_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panAcctCreationDetails.add(panPayDayBookDetail, gridBagConstraints);

        lblPayDayBookDetail.setText("Payment Detail in Day Book");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(lblPayDayBookDetail, gridBagConstraints);

        panReceiveDayBookDetail.setLayout(new java.awt.GridBagLayout());

        rdoReceiveDayBookDetail.add(rdoReceiveDayBookDetail_Yes);
        rdoReceiveDayBookDetail_Yes.setText("Yes");
        rdoReceiveDayBookDetail_Yes.setMaximumSize(new java.awt.Dimension(48, 21));
        rdoReceiveDayBookDetail_Yes.setMinimumSize(new java.awt.Dimension(48, 18));
        rdoReceiveDayBookDetail_Yes.setPreferredSize(new java.awt.Dimension(48, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        panReceiveDayBookDetail.add(rdoReceiveDayBookDetail_Yes, gridBagConstraints);

        rdoReceiveDayBookDetail.add(rdoReceiveDayBookDetail_No);
        rdoReceiveDayBookDetail_No.setText("No");
        rdoReceiveDayBookDetail_No.setMinimumSize(new java.awt.Dimension(46, 18));
        rdoReceiveDayBookDetail_No.setPreferredSize(new java.awt.Dimension(46, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        panReceiveDayBookDetail.add(rdoReceiveDayBookDetail_No, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panAcctCreationDetails.add(panReceiveDayBookDetail, gridBagConstraints);

        lblReceiveDayBookDetail.setText("Receipt Detail in Day Book");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(lblReceiveDayBookDetail, gridBagConstraints);

        lblAccountHeadOrder.setText("Account Head Order");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(lblAccountHeadOrder, gridBagConstraints);

        txtAccountHeadOrder.setAllowAll(true);
        txtAccountHeadOrder.setMaxLength(16);
        txtAccountHeadOrder.setMinimumSize(new java.awt.Dimension(100, 21));
        txtAccountHeadOrder.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panAcctCreationDetails.add(txtAccountHeadOrder, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panAccountCreation.add(panAcctCreationDetails, gridBagConstraints);

        panAcHdTree.setMinimumSize(new java.awt.Dimension(278, 178));
        panAcHdTree.setPreferredSize(new java.awt.Dimension(378, 178));
        panAcHdTree.setLayout(new java.awt.GridBagLayout());

        srpAcHdTree.setMinimumSize(new java.awt.Dimension(268, 178));
        srpAcHdTree.setPreferredSize(new java.awt.Dimension(368, 178));
        srpAcHdTree.setViewportView(treAcHdTree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panAcHdTree.add(srpAcHdTree, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panAccountCreation.add(panAcHdTree, gridBagConstraints);

        getContentPane().add(panAccountCreation, java.awt.BorderLayout.CENTER);

        mnuProcess.setText("Process");

        mitNew.setText("New");
        mitNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitNewActionPerformed(evt);
            }
        });
        mnuProcess.add(mitNew);

        mitEdit.setText("Edit");
        mitEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitEditActionPerformed(evt);
            }
        });
        mnuProcess.add(mitEdit);
        mnuProcess.add(sptEdit);

        mitDelete.setText("Delete");
        mitDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitDeleteActionPerformed(evt);
            }
        });
        mnuProcess.add(mitDelete);
        mnuProcess.add(sptDelete);

        mitSave.setText("Save");
        mitSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitSaveActionPerformed(evt);
            }
        });
        mnuProcess.add(mitSave);

        mitCancel.setText("Cancel");
        mitCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitCancelActionPerformed(evt);
            }
        });
        mnuProcess.add(mitCancel);
        mnuProcess.add(sptCancel);

        mitAuthorize.setText("Authorize");
        mitAuthorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitAuthorizeActionPerformed(evt);
            }
        });
        mnuProcess.add(mitAuthorize);

        mitReject.setText("Reject");
        mitReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitRejectActionPerformed(evt);
            }
        });
        mnuProcess.add(mitReject);

        mitException.setText("Exception");
        mitException.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitExceptionActionPerformed(evt);
            }
        });
        mnuProcess.add(mitException);
        mnuProcess.add(sptException);

        mitPrint.setText("Print");
        mnuProcess.add(mitPrint);

        mitClose.setText("Close");
        mitClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitCloseActionPerformed(evt);
            }
        });
        mnuProcess.add(mitClose);

        mbrMain.add(mnuProcess);

        setJMenuBar(mbrMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnView1ActionPerformed
        // TODO add your handling code here:
        _observable.setActionType(ClientConstants.ACTIONTYPE_VIEW);
        _observable.setStatus();
        lblStatus.setText(_observable.getLblStatus());
        popUp();
        btnCheck();
    }//GEN-LAST:event_btnView1ActionPerformed
    
    /**
     * To intervene in the closing process and ask for confirmation
     **/
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        btnCloseActionPerformed(null);
    }//GEN-LAST:event_formInternalFrameClosing
    
    private void mitCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitCloseActionPerformed
        // TODO add your handling code here:
        btnCloseActionPerformed(evt);
    }//GEN-LAST:event_mitCloseActionPerformed
    
    private void mitExceptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitExceptionActionPerformed
        // TODO add your handling code here:
        btnExceptionActionPerformed(evt);
    }//GEN-LAST:event_mitExceptionActionPerformed
    
    private void mitRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitRejectActionPerformed
        // TODO add your handling code here:
        btnRejectActionPerformed(evt);
    }//GEN-LAST:event_mitRejectActionPerformed
    
    private void btnExceptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExceptionActionPerformed
        // Add your handling code here:
        _observable.setActionType(ClientConstants.ACTIONTYPE_EXCEPTION);
        authorizeStatus(CommonConstants.STATUS_EXCEPTION);
    }//GEN-LAST:event_btnExceptionActionPerformed
    
    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // Add your handling code here:
        _observable.setActionType(ClientConstants.ACTIONTYPE_REJECT);
        authorizeStatus(CommonConstants.STATUS_REJECTED);
    }//GEN-LAST:event_btnRejectActionPerformed
    
    private void btnAuthorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAuthorizeActionPerformed
        // Add your handling code here:
        _observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
        authorizeStatus(CommonConstants.STATUS_AUTHORIZED);
    }//GEN-LAST:event_btnAuthorizeActionPerformed
    
    public void authorizeStatus(String authorizeStatus) {
        if (viewType == AUTHORIZE && isFilled) {
            final HashMap accCreationMap = new HashMap();
            accCreationMap.put("STATUS", authorizeStatus);
            accCreationMap.put("USER_ID", TrueTransactMain.USER_ID);
            accCreationMap.put("ACCOUNT HEAD", txtAccountHead.getText());
            ClientUtil.execute("authorizeAccCreation", accCreationMap);
            _observable.setResult(_observable.getActionType());
            btnCancelActionPerformed(null);
            _observable.setResultStatus();
            viewType = 0;
           if (fromAuthorizeUI) {
	           authorizeListUI.removeSelectedRow();
	           this.dispose();
                   authorizeListUI.setFocusToTable();
                   authorizeListUI.displayDetails("Account Head");
          }
        } else {
            final HashMap mapParam = new HashMap();
            HashMap whereMap = new HashMap();
            whereMap.put("USER_ID", TrueTransactMain.USER_ID);
            mapParam.put(CommonConstants.MAP_WHERE,whereMap);
            whereMap.put(CommonConstants.USER_ID, TrueTransactMain.USER_ID);
            whereMap.put(CommonConstants.AUTHORIZESTATUS, authorizeStatus);
            mapParam.put(CommonConstants.MAP_WHERE, whereMap);
            whereMap = null;
            mapParam.put(CommonConstants.MAP_NAME, "getSelectAccCreationAuthorizeTOList");
            mapParam.put(CommonConstants.UPDATE_MAP_NAME, "authorizeAccCreation");
            viewType = AUTHORIZE;
            lblStatus.setText(ClientConstants.ACTION_STATUS[0]);
            isFilled = false;
            //__ To Save the data in the Internal Frame...
            setModified(true);
            
            final AuthorizeStatusUI authorizeUI = new AuthorizeStatusUI(this, mapParam);
            authorizeUI.show();
            btnSaveDisable();
            //            setAuthBtnEnableDisable();
        }
    }
    
    private void btnSaveDisable(){
        btnSave.setEnabled(false);
        mitSave.setEnabled(false);
    }
    
    private void cboSubHeadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSubHeadActionPerformed
        // Add your handling code here:
        if ( _observable.getActionType() == ClientConstants.ACTIONTYPE_NEW && cboSubHead.getSelectedIndex() != 0){
            this.txtAccountHeadCode.setText((String)((ComboBoxModel)cboMajorHead.getModel()).getKeyForSelected()+((ComboBoxModel)cboSubHead.getModel()).getKeyForSelected()+_observable.getMaxAcHdCode());
        }else if (cboSubHead.getSelectedIndex() == 0){
            makeAccHdCodeEmpty();
        }
    }//GEN-LAST:event_cboSubHeadActionPerformed
    
    /**
     * To make the Account Head Code Empty
     */
    private void makeAccHdCodeEmpty(){
        this.txtAccountHeadCode.setText("");
    }
    
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Add your handling code here:
        
        final HashMap accHdId = new HashMap();
        accHdId.put("ACC_HD",txtAccountHead.getText());
        final Integer count = (Integer)ClientUtil.executeQuery("acHdCreation.acHdExistance", accHdId).get(0);
        if (CommonUtil.convertObjToInt(count) >0){
            ClientUtil.displayAlert(resourceBundle.getString("acHdExistance"));
        }else if (ClientUtil.deleteAlert() == 0){
            _observable.setActionType(ClientConstants.ACTIONTYPE_DELETE);
            btnSaveActionPerformed(evt);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
    
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // Add your handling code here:
        ClientUtil.enableDisable(this,false);
        _observable.setActionType(ClientConstants.ACTIONTYPE_EDIT);
        popUp();
    }//GEN-LAST:event_btnEditActionPerformed
    private void btnCheck(){
        btnCancel.setEnabled(true);
        btnSave.setEnabled(false);
        btnNew.setEnabled(false);
        btnDelete.setEnabled(false);
        btnAuthorize.setEnabled(false);
        btnReject.setEnabled(false);
        btnException.setEnabled(false);
        btnEdit.setEnabled(false);
    }
    /** To display a popUp window for viewing existing data */
    private void popUp() {
        lblStatus.setText(ClientConstants.ACTION_STATUS[0]);
        final HashMap viewMap = new HashMap();
        viewType = _observable.getActionType();
        if ( _observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT ||  _observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE ||  _observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW){
            viewMap.put(CommonConstants.MAP_NAME, "viewAllActiveAccountHead");
        }
        new ViewAll(this, viewMap).show();
    }
    
    /**
     * Called by the Popup window created thru popUp method
     * @param param
     */
    public void fillData(Object param) {
        final HashMap hash = (HashMap) param;
        if(hash.containsKey("FROM_AUTHORIZE_LIST_UI")){
                fromAuthorizeUI = true;
                authorizeListUI = (AuthorizeListUI) hash.get("PARENT");
                hash.remove("PARENT");
                viewType = AUTHORIZE;
                _observable.setActionType(ClientConstants.ACTIONTYPE_AUTHORIZE);
                _observable.setStatus();
                transactionUI.setCallingUiMode(ClientConstants.ACTIONTYPE_AUTHORIZE);
                 btnSave.setEnabled(false);
                btnCancel.setEnabled(true);
                btnAuthorize.setEnabled(true);
                btnReject.setEnabled(false);
                rejectFlag=1;
            }
        if (_observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT || _observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE || viewType==AUTHORIZE || _observable.getActionType() == ClientConstants.ACTIONTYPE_VIEW){
            isFilled = true;
            actionEditDelete(hash);
        }
        if(viewType == AUTHORIZE){
            btnAuthorize.setEnabled(_observable.getActionType() == ClientConstants.ACTIONTYPE_AUTHORIZE ? true : false);
            btnReject.setEnabled(_observable.getActionType() == ClientConstants.ACTIONTYPE_REJECT ? true : false);
            btnException.setEnabled(_observable.getActionType() == ClientConstants.ACTIONTYPE_EXCEPTION ? true : false);
            //                    btnDelete.setEnabled(false);
            btnAuthorize.setEnabled(true);
            btnAuthorize.requestFocusInWindow();
        }
        
        //__ To Save the data in the Internal Frame...
        setModified(true);
        if(rejectFlag==1){
           btnReject.setEnabled(false);
       }
    }
    
    /*To get the data and populating on the screen,set the status and enabling the apt components*/
    private void actionEditDelete(HashMap hash){
        hash.put("ACCOUNT_HEAD", hash.get("ACCOUNT HEAD"));
        _observable.setStatus();
        _observable.populateData(hash);
        setButtonEnableDisable();
        if (_observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT){
            forEditOnly();
        }
    }
    
    /*To enable and change the background color of Account Head Description and Delete Button Enabling*/
    private void forEditOnly(){
        txtAccountHeadDesc.setEnabled(true);
        ClientUtil.enableDisable(panReceiveDayBookDetail,true);
        ClientUtil.enableDisable(panPayDayBookDetail,true);
        txtAccountHeadOrder.setEnabled(true);
        txtAccountHeadDesc.setBackground(new java.awt.Color(255,255,255));
        setDelBtnEnableDisable(true);
    }
    
    private void mitDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitDeleteActionPerformed
        // Add your handling code here:
        btnDeleteActionPerformed(evt);
    }//GEN-LAST:event_mitDeleteActionPerformed
    
    private void cboAccountTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboAccountTypeActionPerformed
        // Add your handling code here:
        final String accountType = (String)(((ComboBoxModel)(cboAccountType).getModel())).getKeyForSelected();
        _observable.populateMajorHead(accountType);
        cboMajorHead.setModel(_observable.getCbmMajorHead());
        cboSubHead.setModel(new ComboBoxModel());
        makeAccHdCodeEmpty();
    }//GEN-LAST:event_cboAccountTypeActionPerformed
    
    private void mitAuthorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitAuthorizeActionPerformed
        // Add your handling code here:
        btnAuthorizeActionPerformed(evt);
    }//GEN-LAST:event_mitAuthorizeActionPerformed
    
    private void mitCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitCancelActionPerformed
        // Add your handling code here:
        btnCancelActionPerformed(evt);
    }//GEN-LAST:event_mitCancelActionPerformed
    
    private void mitNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitNewActionPerformed
        // Add your handling code here:
        btnNewActionPerformed(evt);
    }//GEN-LAST:event_mitNewActionPerformed
    
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // Add your handling code here:
        cifClosingAlert();
        //        if (ClientUtil.closeAlert() == 0){
        //            this.dispose();
        //        }
    }//GEN-LAST:event_btnCloseActionPerformed
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // Add your handling code here:
        _observable.setActionType(ClientConstants.ACTIONTYPE_CANCEL);
        _observable.resetForm();
        ClientUtil.enableDisable(this, false);
        setButtonEnableDisable();
        _observable.setStatus();
        viewType = -1;
        if (fromAuthorizeUI) {
	           this.dispose();
                   authorizeListUI.setFocusToTable();
          }
        //__ Make the Screen Closable..
        setModified(false);
    }//GEN-LAST:event_btnCancelActionPerformed
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Add your handling code here:
        final String mandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(), panAccountCreation);
        /* mandatoryMessage length will be greater than 0 if the mandatory conditions are not satisfied and so the alert should be displayed*/
        if (mandatoryMessage.length() > 0 ){
            ClientUtil.displayAlert(mandatoryMessage);
        }else{
            savePerformed();
        }
        //__ Make the Screen Closable..
        setModified(false);
    }//GEN-LAST:event_btnSaveActionPerformed
    
    /** To perform all actions for Save functionality when the mandatory conditions are satisfied
     */
    private void savePerformed(){
        updateOBFields();
        _observable.doAction();
        ClientUtil.enableDisable(this, false);
        setButtonEnableDisable();
        _observable.resetForm();
        _observable.setResultStatus();
    }
    
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // Add your handling code here:
        _observable.resetForm();
        ClientUtil.enableDisable(this, true);
        txtAccountHeadCode.setEnabled(false);
        txtAccountHeadCode.setEditable(false);
        setButtonEnableDisable();
        _observable.setActionType(ClientConstants.ACTIONTYPE_NEW);
        _observable.setStatus();
        
        //__ To Save the data in the Internal Frame...
        setModified(true);
    }//GEN-LAST:event_btnNewActionPerformed
    
    private void mitSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitSaveActionPerformed
        // Add your handling code here:
        btnSaveActionPerformed(evt);
    }//GEN-LAST:event_mitSaveActionPerformed
    
    /** To set the MajorHead Combo box with the selected value and load the SubHead Combo box with
     * only sub heads that are corresponding to the Major Head selected
     */
    private void cboMajorHeadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMajorHeadActionPerformed
        // Add your handling code here:
        final String majorHead = (String)(((ComboBoxModel)(cboMajorHead).getModel())).getKeyForSelected();
        _observable.populateSubHead(majorHead);
        cboSubHead.setModel(_observable.getCbmSubHead());
        makeAccHdCodeEmpty();
    }//GEN-LAST:event_cboMajorHeadActionPerformed
    
    private void mitEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitEditActionPerformed
        // Add your handling code here:
        btnEditActionPerformed(evt);
    }//GEN-LAST:event_mitEditActionPerformed
    
    /** To update observer (UI) components based on Changes in the observable (OB) class
     * @param observed
     * @param arg
     */
    public void update(java.util.Observable observed, Object arg) {
        cboAccountType.setSelectedItem(_observable.getCboAccountType());
        cboMajorHead.setSelectedItem(_observable.getCboMajorHead());
        cboSubHead.setSelectedItem(_observable.getCboSubHead());
        txtAccountHead.setText(_observable.getTxtAccountHead());
        txtAccountHeadCode.setText(_observable.getTxtAccountHeadCode());
        txtAccountHeadDesc.setText(_observable.getTxtAccountHeadDesc());
        lblStatus.setText(_observable.getLblStatus());
        if(_observable.getActionType() != ClientConstants.ACTIONTYPE_NEW && _observable.getActionType() != ClientConstants.ACTIONTYPE_CANCEL){
            String  recDayBook=CommonUtil.convertObjToStr(_observable.getRdoReceiveDayBookDetail());
            if(recDayBook.length()>0 && recDayBook.equals("Y")){
                rdoReceiveDayBookDetail_Yes.setSelected(true);
                rdoReceiveDayBookDetail_No.setSelected(false);
            }else{
                rdoReceiveDayBookDetail_Yes.setSelected(false);
                rdoReceiveDayBookDetail_No.setSelected(true);
            }
            String  payDayBook=CommonUtil.convertObjToStr(_observable.getRdoPayDayBookDetail());
            if(payDayBook.length()>0 && payDayBook.equals("Y")){
                rdoPayDayBookDetail_Yes.setSelected(true);
                rdoPayDayBookDetail_No.setSelected(false);
            }else{
                rdoPayDayBookDetail_Yes.setSelected(false);
                rdoPayDayBookDetail_No.setSelected(true);
            }
        }
        txtAccountHeadOrder.setText(_observable.getTxtAccountHeadOrder());
    }
    
    /*To set model for combo boxes*/
    private void initComponentData() {
        cboAccountType.setModel(_observable.getCbmAccountType());
        cboMajorHead.setModel(_observable.getCbmMajorHead());
        cboSubHead.setModel(_observable.getCbmSubHead());
    }
    
    private void setButtonEnableDisable() {
        btnNew.setEnabled(!btnNew.isEnabled());
        btnEdit.setEnabled(!btnEdit.isEnabled());
        mitNew.setEnabled(btnNew.isEnabled());
        mitEdit.setEnabled(btnEdit.isEnabled());
        btnSave.setEnabled(!btnNew.isEnabled());
        btnCancel.setEnabled(!btnNew.isEnabled());
        mitSave.setEnabled(btnSave.isEnabled());
        mitCancel.setEnabled(btnCancel.isEnabled());
        btnView1.setEnabled(!btnView1.isEnabled());
        setDelBtnEnableDisable(false);
        setAuthBtnEnableDisable();
    }
    
    private void setDelBtnEnableDisable(boolean enableDisable){
        btnDelete.setEnabled(enableDisable );
        mitDelete.setEnabled(enableDisable);
    }
    
    private void setAuthBtnEnableDisable(){
        final boolean enableDisable = !btnSave.isEnabled();
        btnAuthorize.setEnabled(enableDisable);
        btnException.setEnabled(enableDisable);
        btnReject.setEnabled(enableDisable);
        mitAuthorize.setEnabled(enableDisable);
        mitException.setEnabled(enableDisable);
        mitReject.setEnabled(enableDisable);
    }
    
    /* Auto Generated Method - setFieldNames()
   This method assigns name for all the components.
   Other functions are working based on this name. */
    private void setFieldNames() {
        btnAuthorize.setName("btnAuthorize");
        btnCancel.setName("btnCancel");
        btnClose.setName("btnClose");
        btnDelete.setName("btnDelete");
        btnEdit.setName("btnEdit");
        btnException.setName("btnException");
        btnNew.setName("btnNew");
        btnPrint.setName("btnPrint");
        btnReject.setName("btnReject");
        btnSave.setName("btnSave");
        cboAccountType.setName("cboAccountType");
        cboMajorHead.setName("cboMajorHead");
        cboSubHead.setName("cboSubHead");
        dlgAccountCreation.setName("dlgAccountCreation");
        lblAccountHead.setName("lblAccountHead");
        lblAccountHeadCode.setName("lblAccountHeadCode");
        lblAccountHeadDesc.setName("lblAccountHeadDesc");
        lblReceiveDayBookDetail.setName("lblReceiveDayBookDetail");
        lblPayDayBookDetail.setName("lblPayDayBookDetail");
        lblAccountHeadOrder.setName("lblAccountHeadOrder");
        lblAccountType.setName("lblAccountType");
        lblMajorHead.setName("lblMajorHead");
        lblMsg.setName("lblMsg");
        lblSpace1.setName("lblSpace1");
        lblSpace2.setName("lblSpace2");
        lblSpace3.setName("lblSpace3");
        lblSpace4.setName("lblSpace4");
        lblSpace5.setName("lblSpace5");
        lblStatus.setName("lblStatus");
        lblSubHead.setName("lblSubHead");
        mbrMain.setName("mbrMain");
        panAccountCreation.setName("panAccountCreation");
        panStatus.setName("panStatus");
        srpAccountCreation.setName("srpAccountCreation");
        tblAccountCreation.setName("tblAccountCreation");
        txtAccountHead.setName("txtAccountHead");
        txtAccountHeadCode.setName("txtAccountHeadCode");
        txtAccountHeadDesc.setName("txtAccountHeadDesc");
    }
    
    /* Auto Generated Method - internationalize()
   This method used to assign display texts from
   the Resource Bundle File. */
    private void internationalize() {
        btnDelete.setText(resourceBundle.getString("btnDelete"));
        lblAccountType.setText(resourceBundle.getString("lblAccountType"));
        btnClose.setText(resourceBundle.getString("btnClose"));
        lblAccountHeadDesc.setText(resourceBundle.getString("lblAccountHeadDesc"));
        lblAccountHead.setText(resourceBundle.getString("lblAccountHead"));
        lblAccountHeadCode.setText(resourceBundle.getString("lblAccountHeadCode"));
        lblReceiveDayBookDetail.setText(resourceBundle.getString("lblReceiveDayBookDetail"));
        lblPayDayBookDetail.setText(resourceBundle.getString("lblPayDayBookDetail"));
        lblAccountHeadOrder.setText(resourceBundle.getString("lblAccountHeadOrder"));
        btnReject.setText(resourceBundle.getString("btnReject"));
        btnEdit.setText(resourceBundle.getString("btnEdit"));
        btnAuthorize.setText(resourceBundle.getString("btnAuthorize"));
        lblSubHead.setText(resourceBundle.getString("lblSubHead"));
        btnException.setText(resourceBundle.getString("btnException"));
        lblMsg.setText(resourceBundle.getString("lblMsg"));
        lblSpace4.setText(resourceBundle.getString("lblSpace4"));
        btnNew.setText(resourceBundle.getString("btnNew"));
        lblSpace2.setText(resourceBundle.getString("lblSpace2"));
        btnSave.setText(resourceBundle.getString("btnSave"));
        btnCancel.setText(resourceBundle.getString("btnCancel"));
        lblSpace3.setText(resourceBundle.getString("lblSpace3"));
        lblMajorHead.setText(resourceBundle.getString("lblMajorHead"));
        lblStatus.setText(resourceBundle.getString("lblStatus"));
        lblSpace1.setText(resourceBundle.getString("lblSpace1"));
        btnPrint.setText(resourceBundle.getString("btnPrint"));
        lblSpace5.setText(resourceBundle.getString("lblSpace5"));
    }
    
    public void setMandatoryHashMap() {
        _mandatoryMap = new HashMap();
        _mandatoryMap.put("cboAccountType", new Boolean(true));
        _mandatoryMap.put("cboMajorHead", new Boolean(true));
        _mandatoryMap.put("cboSubHead", new Boolean(true));
        _mandatoryMap.put("txtAccountHead", new Boolean(true));
        _mandatoryMap.put("txtAccountHeadCode", new Boolean(true));
        _mandatoryMap.put("txtAccountHeadDesc", new Boolean(true));
        _mandatoryMap.put("txtAccountHeadOrder", new Boolean(true));
    }
    
    public HashMap getMandatoryHashMap() {
        return _mandatoryMap;
    }
    
    /*To update observable (OB) components based on changes in the observer (UI) class*/
    private void updateOBFields() {
        _observable.setCbmAccountType((com.see.truetransact.clientutil.ComboBoxModel)cboAccountType.getModel());
        _observable.setCbmMajorHead((com.see.truetransact.clientutil.ComboBoxModel)cboMajorHead.getModel());
        _observable.setCbmSubHead((com.see.truetransact.clientutil.ComboBoxModel)cboSubHead.getModel());
        _observable.setTxtAccountHead(txtAccountHead.getText());
        _observable.setTxtAccountHeadCode(txtAccountHeadCode.getText());
        _observable.setTxtAccountHeadDesc(txtAccountHeadDesc.getText());
        _observable.setModule(getModule());
        _observable.setScreen(getScreen());
        if(rdoReceiveDayBookDetail_Yes.isSelected()==true)
            _observable.setRdoReceiveDayBookDetail(CommonUtil.convertObjToStr("Y"));
        else
            _observable.setRdoReceiveDayBookDetail(CommonUtil.convertObjToStr("N"));
        
        if(rdoPayDayBookDetail_Yes.isSelected()==true)
            _observable.setRdoPayDayBookDetail(CommonUtil.convertObjToStr("Y"));
        else
            _observable.setRdoPayDayBookDetail(CommonUtil.convertObjToStr("N"));
        _observable.setTxtAccountHeadOrder(txtAccountHeadOrder.getText());
    }
    
    private String checkMandatory(javax.swing.JComponent component){
        return new MandatoryCheck().checkMandatory(getClass().getName(), component);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnAuthorize;
    private com.see.truetransact.uicomponent.CButton btnCancel;
    private com.see.truetransact.uicomponent.CButton btnClose;
    private com.see.truetransact.uicomponent.CButton btnDelete;
    private com.see.truetransact.uicomponent.CButton btnEdit;
    private com.see.truetransact.uicomponent.CButton btnException;
    private com.see.truetransact.uicomponent.CButton btnNew;
    private com.see.truetransact.uicomponent.CButton btnPrint;
    private com.see.truetransact.uicomponent.CButton btnReject;
    private com.see.truetransact.uicomponent.CButton btnSave;
    private com.see.truetransact.uicomponent.CButton btnView1;
    private com.see.truetransact.uicomponent.CComboBox cboAccountType;
    private com.see.truetransact.uicomponent.CComboBox cboMajorHead;
    private com.see.truetransact.uicomponent.CComboBox cboSubHead;
    private com.see.truetransact.uicomponent.CDialog dlgAccountCreation;
    private com.see.truetransact.uicomponent.CLabel lblAccountHead;
    private com.see.truetransact.uicomponent.CLabel lblAccountHeadCode;
    private com.see.truetransact.uicomponent.CLabel lblAccountHeadDesc;
    private com.see.truetransact.uicomponent.CLabel lblAccountHeadOrder;
    private com.see.truetransact.uicomponent.CLabel lblAccountType;
    private com.see.truetransact.uicomponent.CLabel lblMajorHead;
    private com.see.truetransact.uicomponent.CLabel lblMsg;
    private com.see.truetransact.uicomponent.CLabel lblPayDayBookDetail;
    private com.see.truetransact.uicomponent.CLabel lblReceiveDayBookDetail;
    private com.see.truetransact.uicomponent.CLabel lblSpace1;
    private com.see.truetransact.uicomponent.CLabel lblSpace11;
    private com.see.truetransact.uicomponent.CLabel lblSpace12;
    private com.see.truetransact.uicomponent.CLabel lblSpace13;
    private com.see.truetransact.uicomponent.CLabel lblSpace14;
    private com.see.truetransact.uicomponent.CLabel lblSpace15;
    private com.see.truetransact.uicomponent.CLabel lblSpace16;
    private com.see.truetransact.uicomponent.CLabel lblSpace2;
    private com.see.truetransact.uicomponent.CLabel lblSpace3;
    private com.see.truetransact.uicomponent.CLabel lblSpace4;
    private com.see.truetransact.uicomponent.CLabel lblSpace5;
    private com.see.truetransact.uicomponent.CLabel lblSpace6;
    private com.see.truetransact.uicomponent.CLabel lblStatus;
    private com.see.truetransact.uicomponent.CLabel lblSubHead;
    private com.see.truetransact.uicomponent.CMenuBar mbrMain;
    private javax.swing.JMenuItem mitAuthorize;
    private javax.swing.JMenuItem mitCancel;
    private javax.swing.JMenuItem mitClose;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JMenuItem mitException;
    private javax.swing.JMenuItem mitNew;
    private javax.swing.JMenuItem mitPrint;
    private javax.swing.JMenuItem mitReject;
    private javax.swing.JMenuItem mitSave;
    private javax.swing.JMenu mnuProcess;
    private com.see.truetransact.uicomponent.CPanel panAcHdTree;
    private com.see.truetransact.uicomponent.CPanel panAccountCreation;
    private com.see.truetransact.uicomponent.CPanel panAcctCreationDetails;
    private com.see.truetransact.uicomponent.CPanel panPayDayBookDetail;
    private com.see.truetransact.uicomponent.CPanel panReceiveDayBookDetail;
    private com.see.truetransact.uicomponent.CPanel panStatus;
    private com.see.truetransact.uicomponent.CButtonGroup rdoPayDayBookDetail;
    private com.see.truetransact.uicomponent.CRadioButton rdoPayDayBookDetail_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoPayDayBookDetail_Yes;
    private com.see.truetransact.uicomponent.CButtonGroup rdoReceiveDayBookDetail;
    private com.see.truetransact.uicomponent.CRadioButton rdoReceiveDayBookDetail_No;
    private com.see.truetransact.uicomponent.CRadioButton rdoReceiveDayBookDetail_Yes;
    private javax.swing.JSeparator sptCancel;
    private javax.swing.JSeparator sptDelete;
    private javax.swing.JSeparator sptEdit;
    private javax.swing.JSeparator sptException;
    private com.see.truetransact.uicomponent.CScrollPane srpAcHdTree;
    private com.see.truetransact.uicomponent.CScrollPane srpAccountCreation;
    private com.see.truetransact.uicomponent.CTable tblAccountCreation;
    private javax.swing.JToolBar tbrHead;
    private javax.swing.JTree treAcHdTree;
    private com.see.truetransact.uicomponent.CTextField txtAccountHead;
    private com.see.truetransact.uicomponent.CTextField txtAccountHeadCode;
    private com.see.truetransact.uicomponent.CTextField txtAccountHeadDesc;
    private com.see.truetransact.uicomponent.CTextField txtAccountHeadOrder;
    // End of variables declaration//GEN-END:variables
    
}
