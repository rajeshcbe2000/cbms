/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition. 
 * 
 * RecoveryComparisonUI.java
 * @author  Suresh
 *
 */

package com.see.truetransact.ui.salaryrecovery;

import java.util.*;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.clientutil.ttrintegration.TTIntegration;
import com.see.truetransact.clientutil.ComboBoxModel;
import com.see.truetransact.ui.common.viewall.ViewAll;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.clientutil.ClientConstants;
import com.see.truetransact.clientproxy.ProxyParameters;
import com.see.truetransact.clientutil.EnhancedTableModel;
import com.see.truetransact.uivalidation.CurrencyValidation;
//Creating Excel File
import  java.io.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.HSSFColor;
import javax.swing.table.DefaultTableModel;

public class RecoveryComparisonUI extends CInternalFrame implements Observer{
    
    /** Vairable Declarations */
    RecoveryListGenerationOB observable = null;
    private Date currDate = null;
    private HashMap returnMap = null;
    private String viewType = "";
    private int j=0;
    DefaultTableModel model;
     DefaultTableModel model1;
    /** Creates new form TokenConfigUI */
    public RecoveryComparisonUI() {
        returnMap = null;
        currDate = ClientUtil.getCurrentDate();
        initForm();
    }
    
    /** Method which is used to initialize the form TokenConfig */
    private void initForm(){
        initComponents();
        observable = new RecoveryListGenerationOB();
        initComponentData();
        initTableData();
        ClientUtil.enableDisable(panSalaryRecoveryList,false);
        EnableDisablePan(false);
    }
    private void EnableDisablePan(boolean flag){
      
    }
       private void initComponentData() {
       
    }
    
    private void initTableData(){
     String data[][] = null;
    String col[]={"SL.NO","CLOCK NO","AMOUNT"};
     model=new DefaultTableModel(data,col);
     tblSalaryRecoveryList.setModel(model);
     String col1[]={"SL.NO","CLOCK NO","NAME"};
     model1=new DefaultTableModel(data,col1);
     tblUnrecoverList.setModel(model1);
    }
    
/* Auto Generated Method - update()
   This method called by Observable. It updates the UI with
   Observable's data. If needed add/Remove RadioButtons
   method need to be added.*/
    public void update(Observable observed, Object arg) {
        
    }
    
/* Auto Generated Method - updateOBFields()
   This method called by Save option of UI.
   It updates the OB with UI data.*/
    public void updateOBFields() {
        
    }
    
/* Auto Generated Method - setMandatoryHashMap()
 
ADD: implements com.see.truetransact.uimandatory.UIMandatoryField
 
   This method list out all the Input Fields available in the UI.
   It needs a class level HashMap variable mandatoryMap. */
    public void setMandatoryHashMap() {
        
    }
    
    /** Used to set Maximum possible lenghts for TextFields */
    private void setMaxLengths(){
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        panSalaryRecovery = new com.see.truetransact.uicomponent.CPanel();
        panSalaryRecoveryBrowse = new com.see.truetransact.uicomponent.CPanel();
        btnBrowse = new com.see.truetransact.uicomponent.CButton();
        panUnrecoverList = new com.see.truetransact.uicomponent.CPanel();
        srpUnrecoverList = new com.see.truetransact.uicomponent.CScrollPane();
        tblUnrecoverList = new com.see.truetransact.uicomponent.CTable();
        panSalaryRecoveryList = new com.see.truetransact.uicomponent.CPanel();
        srpSalaryRecoveryList = new com.see.truetransact.uicomponent.CScrollPane();
        tblSalaryRecoveryList = new com.see.truetransact.uicomponent.CTable();
        btnClear = new com.see.truetransact.uicomponent.CPanel();
        lblCmpDate = new com.see.truetransact.uicomponent.CLabel();
        tdtCmpDate = new com.see.truetransact.uicomponent.CDateField();
        btnCompare = new com.see.truetransact.uicomponent.CButton();
        btnUnrecExport = new com.see.truetransact.uicomponent.CButton();
        cButton1 = new com.see.truetransact.uicomponent.CButton();
        panStatus = new com.see.truetransact.uicomponent.CPanel();
        lblSpace1 = new com.see.truetransact.uicomponent.CLabel();
        lblStatus = new com.see.truetransact.uicomponent.CLabel();
        lblMsg = new com.see.truetransact.uicomponent.CLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setMaximumSize(new java.awt.Dimension(860, 620));
        setMinimumSize(new java.awt.Dimension(860, 620));
        setPreferredSize(new java.awt.Dimension(860, 620));
        panSalaryRecovery.setLayout(new java.awt.GridBagLayout());

        panSalaryRecovery.setBorder(new javax.swing.border.EtchedBorder());
        panSalaryRecovery.setMaximumSize(new java.awt.Dimension(800, 450));
        panSalaryRecovery.setMinimumSize(new java.awt.Dimension(800, 450));
        panSalaryRecovery.setPreferredSize(new java.awt.Dimension(800, 450));
        panSalaryRecoveryBrowse.setLayout(new java.awt.GridBagLayout());

        panSalaryRecoveryBrowse.setBorder(new javax.swing.border.TitledBorder("Browse"));
        panSalaryRecoveryBrowse.setMinimumSize(new java.awt.Dimension(600, 50));
        panSalaryRecoveryBrowse.setPreferredSize(new java.awt.Dimension(200, 50));
        btnBrowse.setText("Browse");
        btnBrowse.setMaximumSize(new java.awt.Dimension(45, 27));
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 5, 3);
        panSalaryRecoveryBrowse.add(btnBrowse, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 6, 1);
        panSalaryRecovery.add(panSalaryRecoveryBrowse, gridBagConstraints);

        panUnrecoverList.setLayout(new java.awt.GridBagLayout());

        panUnrecoverList.setBorder(new javax.swing.border.TitledBorder("UnrecoverList"));
        panUnrecoverList.setMinimumSize(new java.awt.Dimension(830, 150));
        panUnrecoverList.setPreferredSize(new java.awt.Dimension(830, 150));
        srpUnrecoverList.setMinimumSize(new java.awt.Dimension(810, 120));
        srpUnrecoverList.setPreferredSize(new java.awt.Dimension(810, 120));
        tblUnrecoverList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo.", "Emp Ref.No.", "Name"
            }
        ));
        tblUnrecoverList.setPreferredScrollableViewportSize(new java.awt.Dimension(806, 331));
        tblUnrecoverList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUnrecoverListMouseClicked(evt);
            }
        });

        srpUnrecoverList.setViewportView(tblUnrecoverList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 0);
        panUnrecoverList.add(srpUnrecoverList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panSalaryRecovery.add(panUnrecoverList, gridBagConstraints);

        panSalaryRecoveryList.setLayout(new java.awt.GridBagLayout());

        panSalaryRecoveryList.setBorder(new javax.swing.border.TitledBorder(" Recovery List"));
        panSalaryRecoveryList.setMinimumSize(new java.awt.Dimension(830, 200));
        panSalaryRecoveryList.setPreferredSize(new java.awt.Dimension(830, 200));
        srpSalaryRecoveryList.setMinimumSize(new java.awt.Dimension(810, 180));
        srpSalaryRecoveryList.setPreferredSize(new java.awt.Dimension(810, 180));
        tblSalaryRecoveryList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo.", "Emp Ref.No.", "Amount"
            }
        ));
        tblSalaryRecoveryList.setPreferredScrollableViewportSize(new java.awt.Dimension(806, 331));
        srpSalaryRecoveryList.setViewportView(tblSalaryRecoveryList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 0);
        panSalaryRecoveryList.add(srpSalaryRecoveryList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panSalaryRecovery.add(panSalaryRecoveryList, gridBagConstraints);

        btnClear.setLayout(new java.awt.GridBagLayout());

        btnClear.setMinimumSize(new java.awt.Dimension(810, 50));
        btnClear.setPreferredSize(new java.awt.Dimension(810, 50));
        lblCmpDate.setText("Date of Comparison");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        btnClear.add(lblCmpDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        btnClear.add(tdtCmpDate, gridBagConstraints);

        btnCompare.setText("Compare");
        btnCompare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompareActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        btnClear.add(btnCompare, gridBagConstraints);

        btnUnrecExport.setText("Export UnrecoveryList");
        btnUnrecExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnrecExportActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        btnClear.add(btnUnrecExport, gridBagConstraints);

        cButton1.setText("Clear");
        cButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cButton1ActionPerformed(evt);
            }
        });

        btnClear.add(cButton1, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        panSalaryRecovery.add(btnClear, gridBagConstraints);

        getContentPane().add(panSalaryRecovery, java.awt.BorderLayout.CENTER);

        panStatus.setLayout(new java.awt.GridBagLayout());

        lblSpace1.setText(" Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblSpace1, gridBagConstraints);

        lblStatus.setBorder(new javax.swing.border.EtchedBorder());
        lblStatus.setText("                      ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblStatus, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblMsg, gridBagConstraints);

        getContentPane().add(panStatus, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void cButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cButton1ActionPerformed
        // TODO add your handling code here:
        initTableData();
        tdtCmpDate.setDateValue("");
        
    }//GEN-LAST:event_cButton1ActionPerformed

    private void btnUnrecExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnrecExportActionPerformed
        // TODO add your handling code here:
         if(tblUnrecoverList.getRowCount()>0){
            createExcelFile();
        }else{
            ClientUtil.showMessageWindow("No Record in This Table!!! ");
        }
    }//GEN-LAST:event_btnUnrecExportActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
         try{
            javax.swing.JFileChooser fc =new javax.swing.JFileChooser();
            int result =fc.showOpenDialog(null);
            if(result == fc.APPROVE_OPTION){
                java.io.File selectedFile =fc.getSelectedFile();
                String name=selectedFile.getName();
                if(name.substring(name.indexOf(".")+1,name.length()).equals("xls")){
                    java.io.FileInputStream inpuStream =new java.io.FileInputStream(selectedFile);
                    HSSFWorkbook workbook = new HSSFWorkbook(inpuStream);//new FileInputStream(fileToBeRead));
                    HSSFSheet sheet = workbook.getSheetAt(0);
                    int rows  = sheet.getLastRowNum();//sheet.getPhysicalNumberOfRows();
                    System.out.println("last row number ##"+sheet.getLastRowNum());
                    int j=0;
                    String column0="";
                    String column1="";
                    for(int i=1;i<rows;i++){
                        HSSFRow row = sheet.getRow(i);
                       // System.out.println("########### Excel Sheet Fourth Column  :"+row.getCell((short)3).getNumericCellValue());
                        if(row.getCell((short)0).getCellType()==HSSFCell.CELL_TYPE_NUMERIC){
                            column0=String.valueOf(row.getCell((short)0).getNumericCellValue());
                        }
                         if(row.getCell((short)0).getCellType()==HSSFCell.CELL_TYPE_STRING){
                            column0=String.valueOf(row.getCell((short)0).getStringCellValue());
                        }
                         if(row.getCell((short)2).getCellType()==HSSFCell.CELL_TYPE_NUMERIC){
                            column1=String.valueOf(row.getCell((short)2).getNumericCellValue());
                        }
                         if(row.getCell((short)2).getCellType()==HSSFCell.CELL_TYPE_STRING){
                            column1=String.valueOf(row.getCell((short)2).getStringCellValue());
                        }
                       
                        model.addRow(new String[]{String.valueOf(i),String.valueOf(column0),String.valueOf(column1)}); 
                       // tblSalaryRecoveryList.setValueAt(String.valueOf(row.getCell((short)3).getNumericCellValue()), j++, 2);
                    }
                  
                    inpuStream.close();
                    lblStatus.setText("                  ");
                    } else{
                    ClientUtil.displayAlert("Please Select file name should be in Excel format");
                    return;
                }
            }else{
                return;
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnCompareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompareActionPerformed
        // TODO add your handling code here:
        if(tdtCmpDate.getDateValue().equals("")) {
            ClientUtil.showAlertWindow("Please enter 'Compare' Date");
        
        }
        else{
        HashMap cmpMap=new HashMap();
        int k=0;
        cmpMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCmpDate.getDateValue())));
       List clkList=ClientUtil.executeQuery("getClkNofrmRecList",cmpMap);
        System.out.println("clkListsize."+clkList.size());
        for(int i=0;i<clkList.size();i++){
            boolean chk=false;
            HashMap clkMap=(HashMap)(clkList.get(i));
            String clkno=clkMap.get("EMP_REF_NO").toString();
            String memName=clkMap.get("MEMBER_NAME").toString();
            for(int j=0;j<tblSalaryRecoveryList.getRowCount();j++){
                if(clkno.equals(tblSalaryRecoveryList.getValueAt(j,1))){
                    chk=true;
                    break;
                }
               chk=false;
            }
            if(chk==false){
                //System.out.println("clkno"+clkno);
                model1.addRow(new String[]{String.valueOf(k+1),String.valueOf(clkno),String.valueOf(memName)}); 
                k++;
            }
        }
        System.out.println("kkkkkkkk"+k);
        }
    }//GEN-LAST:event_btnCompareActionPerformed

   
    private void tblUnrecoverListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUnrecoverListMouseClicked
        
    }//GEN-LAST:event_tblUnrecoverListMouseClicked
       
     private void createExcelFile(){
        try{
            Date intDt = DateUtil.getDateMMDDYYYY(tdtCmpDate.getDateValue());
            System.out.println("######### intDt"+intDt);
            javax.swing. JFileChooser fc = new javax.swing.JFileChooser();
            String filename=System.getProperty("user.home") + "/Desktop/"+intDt.getDate()+"-"+(intDt.getMonth()+1)+"-"+(intDt.getYear()+1900)+"-"+"UnRecoveryList.xls" ;
            System.out.println("!@#!@ filename:"+filename);
            HSSFWorkbook hwb=new HSSFWorkbook();
            HSSFSheet sheet =  hwb.createSheet("UnRecovery List");
            HSSFRow rowhead=   sheet.createRow((short)0);
            HSSFCellStyle cellStyle = hwb.createCellStyle();
            HSSFFont font = hwb.createFont();
            font.setFontName(HSSFFont.FONT_ARIAL);
            font.setFontHeightInPoints((short) 10);
            font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            font.setColor(HSSFColor.BLACK.index);
            cellStyle.setFont(font);
            cellStyle.setBorderBottom((short) 1); // single line border
            cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
            HSSFCell cell1 = rowhead.createCell((short) 0);
            cell1.setCellValue("CLOCK NO");
            HSSFCell cell2 = rowhead.createCell((short) 1);
            cell2.setCellValue("NAME");
//            HSSFCell cell3 = rowhead.createCell((short) 2);
//            cell3.setCellValue("AMOUNT");
            cell1.setCellStyle(cellStyle);
            cell2.setCellStyle(cellStyle);
//            cell3.setCellStyle(cellStyle);
            rowhead.setHeightInPoints(25);
//            HashMap whereMap = new HashMap();
//            whereMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
//            List recoveryList = ClientUtil.executeQuery("getRecoveryListData", whereMap);
            if(tblUnrecoverList.getRowCount() >0){
                for(int i=1;i<=tblUnrecoverList.getRowCount();i++){
                    //whereMap = (HashMap)recoveryList.get(i-1);
                    HSSFRow row=   sheet.createRow((short)i);
                    row.createCell((short) 0).setCellValue(CommonUtil.convertObjToStr(tblUnrecoverList.getValueAt(i-1,1)));
                    row.createCell((short) 1).setCellValue(CommonUtil.convertObjToStr(tblUnrecoverList.getValueAt(i-1,2)));
                    if(i==tblUnrecoverList.getRowCount()){
                        i=i+1;
                        row =   sheet.createRow((short)i);
//                        HSSFCell cell4 = row.createCell((short) 1);
//                        cell4.setCellValue("TOTAL");
//                        HSSFCell cell5 = row.createCell((short) 2);
//                        cellStyle.setBorderTop((short) 1); // double lines border
                        //cell5.setCellValue(CommonUtil.convertObjToDouble(lblTotalTransactionAmtVal.getText()).doubleValue());
//                        cell4.setCellStyle(cellStyle);
//                        cell5.setCellStyle(cellStyle);
                        row.setHeightInPoints(25);
                    }
                }
                FileOutputStream fileOut =  new FileOutputStream(filename);
                hwb.write(fileOut);
                fileOut.close();
                ClientUtil.showMessageWindow("Your excel file has been Generated!!! ");
//                whereMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
//                ClientUtil.execute("updateRecoveryListExportStatus", whereMap);
                btnUnrecExport.setEnabled(false);
            }
        }catch ( Exception ex ) {
            ex.printStackTrace();
            System.out.println(ex);
            
        }
    }
    
    
    
    private Date setProperDtFormat(Date dt) {
        Date tempDt=(Date)currDate.clone();
        if(dt!=null) {
            tempDt.setDate(dt.getDate());
            tempDt.setMonth(dt.getMonth());
            tempDt.setYear(dt.getYear());
            return tempDt;
        }
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnBrowse;
    private com.see.truetransact.uicomponent.CPanel btnClear;
    private com.see.truetransact.uicomponent.CButton btnCompare;
    private com.see.truetransact.uicomponent.CButton btnUnrecExport;
    private com.see.truetransact.uicomponent.CButton cButton1;
    private com.see.truetransact.uicomponent.CLabel lblCmpDate;
    private com.see.truetransact.uicomponent.CLabel lblMsg;
    private com.see.truetransact.uicomponent.CLabel lblSpace1;
    private com.see.truetransact.uicomponent.CLabel lblStatus;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecovery;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecoveryBrowse;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecoveryList;
    private com.see.truetransact.uicomponent.CPanel panStatus;
    private com.see.truetransact.uicomponent.CPanel panUnrecoverList;
    private com.see.truetransact.uicomponent.CScrollPane srpSalaryRecoveryList;
    private com.see.truetransact.uicomponent.CScrollPane srpUnrecoverList;
    private com.see.truetransact.uicomponent.CTable tblSalaryRecoveryList;
    private com.see.truetransact.uicomponent.CTable tblUnrecoverList;
    private com.see.truetransact.uicomponent.CDateField tdtCmpDate;
    // End of variables declaration//GEN-END:variables
    
    public static void main(String[] args) {
        RecoveryComparisonUI fad = new RecoveryComparisonUI();
        javax.swing.JFrame j = new javax.swing.JFrame();
        j.getContentPane().add(fad);
        j.show();
        fad.show();
    }
}
