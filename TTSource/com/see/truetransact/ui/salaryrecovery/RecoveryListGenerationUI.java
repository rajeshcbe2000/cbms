/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition. 
 * 
 * RecoveryListGenerationUI.java
 * @author  Suresh
 *
 */

package com.see.truetransact.ui.salaryrecovery;

import java.util.*;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.clientutil.ttrintegration.TTIntegration;
import com.see.truetransact.clientutil.ComboBoxModel;
import com.see.truetransact.ui.common.viewall.ViewAll;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.clientutil.ClientConstants;
import com.see.truetransact.clientproxy.ProxyParameters;
import com.see.truetransact.clientutil.EnhancedTableModel;
import com.see.truetransact.ui.common.viewall.FrmSuretyTableUI;
import com.see.truetransact.ui.common.viewall.SalaryRecoveryOmitUI;
import com.see.truetransact.uivalidation.CurrencyValidation;
import com.see.truetransact.uicomponent.COptionPane;
//Creating Excel File
import  java.io.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.HSSFColor;
import java.text.DecimalFormat;
import javax.swing.JDialog;
import javax.swing.SwingWorker;
public class RecoveryListGenerationUI extends CInternalFrame implements Observer{
    
    /** Vairable Declarations */
    RecoveryListGenerationOB observable = null;
    private Date currDate = null;
    private HashMap returnMap = null;
    private String viewType = "";
    private int j=0;
    double totAmt = 0;
    DecimalFormat df = new DecimalFormat("##.00");
    HashMap loanDetailsMap = new HashMap();
    /** Creates new form TokenConfigUI */
    public RecoveryListGenerationUI() {
        returnMap = null;
        currDate = ClientUtil.getCurrentDate();
        initForm();
    }
    
    /** Method which is used to initialize the form TokenConfig */
    private void initForm(){
        initComponents();
        observable = new RecoveryListGenerationOB();
        initComponentData();
        initTableData();
        btnGenerate.setEnabled(true);
        btnClear.setEnabled(true);
        btnPrintRecoveryList.setEnabled(true);
        btnExportRecoveryList.setEnabled(true);
        ClientUtil.enableDisable(panSalaryRecoveryList,false);
        txtAmount.setAllowNumber(true);
        panDetails.setEnabled(false);
        EnableDisablePan(false);
    }
    private void EnableDisablePan(boolean flag){
        txtEmployerRefNo.setEnabled(flag);
        lblEmployerRefNo.setEnabled(flag);
        btnEmployerRefNo.setEnabled(flag);
        lblProductType.setEnabled(flag);
        cboProdType.setEnabled(flag);
        lblProdId.setEnabled(flag);
        cboProdId.setEnabled(flag);
        lblAccountNo.setEnabled(flag);
        lblAmount.setEnabled(flag);
        txtAccountNo.setEnabled(flag);
        txtAmount.setEnabled(flag);
        btnAccountNo.setEnabled(flag);
        lblName.setEnabled(flag);
        txtParticulars.setEnabled(flag);
        lblParticulars.setEnabled(flag);
       // btnAdd.setEnabled(flag);
    }
       private void initComponentData() {
        cboProdType.setModel(observable.getCbmProdType());
        cboProdId.setModel(observable.getCbmProdId());
    }
    
    private void initTableData(){
        tblSalaryRecoveryList.setModel(observable.getTblSalaryRecoveryList());
    }
    
/* Auto Generated Method - update()
   This method called by Observable. It updates the UI with
   Observable's data. If needed add/Remove RadioButtons
   method need to be added.*/
    public void update(Observable observed, Object arg) {
        
    }
    
/* Auto Generated Method - updateOBFields()
   This method called by Save option of UI.
   It updates the OB with UI data.*/
    public void updateOBFields() {
        observable.setChkDE(chkDE.isSelected());
    }
    
/* Auto Generated Method - setMandatoryHashMap()
 
ADD: implements com.see.truetransact.uimandatory.UIMandatoryField
 
   This method list out all the Input Fields available in the UI.
   It needs a class level HashMap variable mandatoryMap. */
    public void setMandatoryHashMap() {
        
    }
    
    /** Used to set Maximum possible lenghts for TextFields */
    private void setMaxLengths(){
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panSalaryRecovery = new com.see.truetransact.uicomponent.CPanel();
        panSalaryRecoveryOptions = new com.see.truetransact.uicomponent.CPanel();
        lblCalcIntUpto = new com.see.truetransact.uicomponent.CLabel();
        tdtCalcIntUpto = new com.see.truetransact.uicomponent.CDateField();
        btnGenerate = new com.see.truetransact.uicomponent.CButton();
        btnClear = new com.see.truetransact.uicomponent.CButton();
        btnPrintRecoveryList = new com.see.truetransact.uicomponent.CButton();
        btnExportRecoveryList = new com.see.truetransact.uicomponent.CButton();
        btnClose = new com.see.truetransact.uicomponent.CButton();
        btnView = new com.see.truetransact.uicomponent.CButton();
        chkDE = new com.see.truetransact.uicomponent.CCheckBox();
        btnOmitPrinc = new com.see.truetransact.uicomponent.CButton();
        panSalaryRecoveryList = new com.see.truetransact.uicomponent.CPanel();
        srpSalaryRecoveryList = new com.see.truetransact.uicomponent.CScrollPane();
        tblSalaryRecoveryList = new com.see.truetransact.uicomponent.CTable();
        panProcess = new com.see.truetransact.uicomponent.CPanel();
        lblTotalTransactionAmt = new com.see.truetransact.uicomponent.CLabel();
        lblTotalTransactionAmtVal = new com.see.truetransact.uicomponent.CLabel();
        panAddition = new com.see.truetransact.uicomponent.CPanel();
        panDetails = new com.see.truetransact.uicomponent.CPanel();
        lblEmployerRefNo = new com.see.truetransact.uicomponent.CLabel();
        txtEmployerRefNo = new com.see.truetransact.uicomponent.CTextField();
        btnEmployerRefNo = new com.see.truetransact.uicomponent.CButton();
        lblProductType = new com.see.truetransact.uicomponent.CLabel();
        cboProdType = new com.see.truetransact.uicomponent.CComboBox();
        lblProdId = new com.see.truetransact.uicomponent.CLabel();
        cboProdId = new com.see.truetransact.uicomponent.CComboBox();
        lblAccountNo = new com.see.truetransact.uicomponent.CLabel();
        txtAccountNo = new com.see.truetransact.uicomponent.CTextField();
        btnAccountNo = new com.see.truetransact.uicomponent.CButton();
        lblAmount = new com.see.truetransact.uicomponent.CLabel();
        txtAmount = new com.see.truetransact.uicomponent.CTextField();
        lblName = new com.see.truetransact.uicomponent.CLabel();
        lblParticulars = new com.see.truetransact.uicomponent.CLabel();
        txtParticulars = new com.see.truetransact.uicomponent.CTextField();
        cPanel2 = new com.see.truetransact.uicomponent.CPanel();
        panAction = new com.see.truetransact.uicomponent.CPanel();
        btnNew = new com.see.truetransact.uicomponent.CButton();
        btnEdit = new com.see.truetransact.uicomponent.CButton();
        btnDelete = new com.see.truetransact.uicomponent.CButton();
        btnSave = new com.see.truetransact.uicomponent.CButton();
        cPanel1 = new com.see.truetransact.uicomponent.CPanel();
        btnOk = new com.see.truetransact.uicomponent.CButton();
        btnViewByRefNo = new com.see.truetransact.uicomponent.CButton();
        panStatus = new com.see.truetransact.uicomponent.CPanel();
        lblSpace1 = new com.see.truetransact.uicomponent.CLabel();
        lblStatus = new com.see.truetransact.uicomponent.CLabel();
        lblMsg = new com.see.truetransact.uicomponent.CLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setMaximumSize(new java.awt.Dimension(860, 620));
        setMinimumSize(new java.awt.Dimension(860, 620));
        setPreferredSize(new java.awt.Dimension(860, 620));

        panSalaryRecovery.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panSalaryRecovery.setMaximumSize(new java.awt.Dimension(800, 450));
        panSalaryRecovery.setMinimumSize(new java.awt.Dimension(800, 450));
        panSalaryRecovery.setPreferredSize(new java.awt.Dimension(800, 450));
        panSalaryRecovery.setLayout(new java.awt.GridBagLayout());

        panSalaryRecoveryOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Salary Recovery Options"));
        panSalaryRecoveryOptions.setMinimumSize(new java.awt.Dimension(830, 90));
        panSalaryRecoveryOptions.setPreferredSize(new java.awt.Dimension(830, 90));
        panSalaryRecoveryOptions.setLayout(new java.awt.GridBagLayout());

        lblCalcIntUpto.setText("Calculate Interest upto");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panSalaryRecoveryOptions.add(lblCalcIntUpto, gridBagConstraints);

        tdtCalcIntUpto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtCalcIntUptoFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panSalaryRecoveryOptions.add(tdtCalcIntUpto, gridBagConstraints);

        btnGenerate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_AUTHORIZE.gif"))); // NOI18N
        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panSalaryRecoveryOptions.add(btnGenerate, gridBagConstraints);

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CANCEL.gif"))); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 4, 4);
        panSalaryRecoveryOptions.add(btnClear, gridBagConstraints);

        btnPrintRecoveryList.setText("Print Recovery List");
        btnPrintRecoveryList.setMaximumSize(new java.awt.Dimension(89, 21));
        btnPrintRecoveryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintRecoveryListActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 4, 4);
        panSalaryRecoveryOptions.add(btnPrintRecoveryList, gridBagConstraints);

        btnExportRecoveryList.setText("Export Recovery List");
        btnExportRecoveryList.setMaximumSize(new java.awt.Dimension(89, 21));
        btnExportRecoveryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportRecoveryListActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 4, 4);
        panSalaryRecoveryOptions.add(btnExportRecoveryList, gridBagConstraints);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CLOSE.gif"))); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 4, 4);
        panSalaryRecoveryOptions.add(btnClose, gridBagConstraints);

        btnView.setText("View");
        btnView.setMaximumSize(new java.awt.Dimension(83, 27));
        btnView.setMinimumSize(new java.awt.Dimension(83, 27));
        btnView.setPreferredSize(new java.awt.Dimension(83, 27));
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        panSalaryRecoveryOptions.add(btnView, gridBagConstraints);

        chkDE.setSelected(true);
        chkDE.setText("Consider DE ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        panSalaryRecoveryOptions.add(chkDE, gridBagConstraints);

        btnOmitPrinc.setText("Omit Principal&Intrest");
        btnOmitPrinc.setEnabled(false);
        btnOmitPrinc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOmitPrincActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        panSalaryRecoveryOptions.add(btnOmitPrinc, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 6, 1);
        panSalaryRecovery.add(panSalaryRecoveryOptions, gridBagConstraints);

        panSalaryRecoveryList.setBorder(javax.swing.BorderFactory.createTitledBorder("Salary Recovery List"));
        panSalaryRecoveryList.setMinimumSize(new java.awt.Dimension(830, 280));
        panSalaryRecoveryList.setPreferredSize(new java.awt.Dimension(830, 280));
        panSalaryRecoveryList.setLayout(new java.awt.GridBagLayout());

        srpSalaryRecoveryList.setMinimumSize(new java.awt.Dimension(810, 235));
        srpSalaryRecoveryList.setPreferredSize(new java.awt.Dimension(810, 235));

        tblSalaryRecoveryList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo.", "Emp Ref.No.", "Member Name", "Scheme Name", "A/c No.", "Total Demand", "Principal", "Interest", "Penal Interest", "Charges", "Clear Balance"
            }
        ));
        tblSalaryRecoveryList.setPreferredScrollableViewportSize(new java.awt.Dimension(806, 331));
        tblSalaryRecoveryList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSalaryRecoveryListMouseClicked(evt);
            }
        });
        srpSalaryRecoveryList.setViewportView(tblSalaryRecoveryList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 0);
        panSalaryRecoveryList.add(srpSalaryRecoveryList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panSalaryRecovery.add(panSalaryRecoveryList, gridBagConstraints);

        panProcess.setMinimumSize(new java.awt.Dimension(780, 30));
        panProcess.setPreferredSize(new java.awt.Dimension(780, 30));
        panProcess.setLayout(new java.awt.GridBagLayout());

        lblTotalTransactionAmt.setText("Total Amount :  Rs.");
        lblTotalTransactionAmt.setFont(new java.awt.Font("MS Sans Serif", 1, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 150, 4, 4);
        panProcess.add(lblTotalTransactionAmt, gridBagConstraints);

        lblTotalTransactionAmtVal.setFont(new java.awt.Font("MS Sans Serif", 1, 13));
        lblTotalTransactionAmtVal.setMinimumSize(new java.awt.Dimension(150, 21));
        lblTotalTransactionAmtVal.setPreferredSize(new java.awt.Dimension(150, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panProcess.add(lblTotalTransactionAmtVal, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panSalaryRecovery.add(panProcess, gridBagConstraints);

        panAddition.setMinimumSize(new java.awt.Dimension(690, 100));
        panAddition.setPreferredSize(new java.awt.Dimension(690, 100));
        panAddition.setLayout(new java.awt.GridBagLayout());

        panDetails.setMinimumSize(new java.awt.Dimension(750, 80));
        panDetails.setPreferredSize(new java.awt.Dimension(750, 80));
        panDetails.setLayout(new java.awt.GridBagLayout());

        lblEmployerRefNo.setText("Employer Ref.No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panDetails.add(lblEmployerRefNo, gridBagConstraints);

        txtEmployerRefNo.setAllowAll(true);
        txtEmployerRefNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panDetails.add(txtEmployerRefNo, gridBagConstraints);

        btnEmployerRefNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnEmployerRefNo.setToolTipText("Account No.");
        btnEmployerRefNo.setPreferredSize(new java.awt.Dimension(21, 21));
        btnEmployerRefNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmployerRefNoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panDetails.add(btnEmployerRefNo, gridBagConstraints);

        lblProductType.setText("Product Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panDetails.add(lblProductType, gridBagConstraints);

        cboProdType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----Select----" }));
        cboProdType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProdType.setPopupWidth(125);
        cboProdType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboProdTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panDetails.add(cboProdType, gridBagConstraints);

        lblProdId.setText("Product Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panDetails.add(lblProdId, gridBagConstraints);

        cboProdId.setMinimumSize(new java.awt.Dimension(100, 21));
        cboProdId.setPopupWidth(200);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panDetails.add(cboProdId, gridBagConstraints);

        lblAccountNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAccountNo.setText("Account No");
        lblAccountNo.setMaximumSize(new java.awt.Dimension(95, 18));
        lblAccountNo.setMinimumSize(new java.awt.Dimension(95, 18));
        lblAccountNo.setPreferredSize(new java.awt.Dimension(95, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 4, 2);
        panDetails.add(lblAccountNo, gridBagConstraints);

        txtAccountNo.setEditable(false);
        txtAccountNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panDetails.add(txtAccountNo, gridBagConstraints);

        btnAccountNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif"))); // NOI18N
        btnAccountNo.setMinimumSize(new java.awt.Dimension(28, 28));
        btnAccountNo.setPreferredSize(new java.awt.Dimension(21, 21));
        btnAccountNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccountNoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panDetails.add(btnAccountNo, gridBagConstraints);

        lblAmount.setText("Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        panDetails.add(lblAmount, gridBagConstraints);

        txtAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        panDetails.add(txtAmount, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panDetails.add(lblName, gridBagConstraints);

        lblParticulars.setText("Particulars");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        panDetails.add(lblParticulars, gridBagConstraints);

        txtParticulars.setMinimumSize(new java.awt.Dimension(200, 21));
        txtParticulars.setPreferredSize(new java.awt.Dimension(200, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        panDetails.add(txtParticulars, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panAddition.add(panDetails, gridBagConstraints);

        cPanel2.setLayout(new java.awt.GridBagLayout());

        panAction.setMinimumSize(new java.awt.Dimension(200, 30));
        panAction.setPreferredSize(new java.awt.Dimension(200, 30));

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif"))); // NOI18N
        btnNew.setToolTipText("New");
        btnNew.setMaximumSize(new java.awt.Dimension(25, 25));
        btnNew.setMinimumSize(new java.awt.Dimension(25, 25));
        btnNew.setPreferredSize(new java.awt.Dimension(25, 25));
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        panAction.add(btnNew);

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_EDIT.gif"))); // NOI18N
        btnEdit.setToolTipText("Edit");
        btnEdit.setMaximumSize(new java.awt.Dimension(25, 25));
        btnEdit.setMinimumSize(new java.awt.Dimension(25, 25));
        btnEdit.setPreferredSize(new java.awt.Dimension(25, 25));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        panAction.add(btnEdit);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif"))); // NOI18N
        btnDelete.setToolTipText("Delete");
        btnDelete.setMaximumSize(new java.awt.Dimension(25, 25));
        btnDelete.setMinimumSize(new java.awt.Dimension(25, 25));
        btnDelete.setPreferredSize(new java.awt.Dimension(25, 25));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        panAction.add(btnDelete);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif"))); // NOI18N
        btnSave.setToolTipText("Save");
        btnSave.setMaximumSize(new java.awt.Dimension(25, 25));
        btnSave.setMinimumSize(new java.awt.Dimension(25, 25));
        btnSave.setPreferredSize(new java.awt.Dimension(25, 25));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panAction.add(btnSave);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        cPanel2.add(panAction, gridBagConstraints);

        cPanel1.setLayout(new java.awt.GridBagLayout());

        btnOk.setText("ok");
        btnOk.setMaximumSize(new java.awt.Dimension(83, 27));
        btnOk.setMinimumSize(new java.awt.Dimension(80, 20));
        btnOk.setPreferredSize(new java.awt.Dimension(80, 20));
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 2);
        cPanel1.add(btnOk, gridBagConstraints);

        btnViewByRefNo.setText("View");
        btnViewByRefNo.setMaximumSize(new java.awt.Dimension(83, 27));
        btnViewByRefNo.setMinimumSize(new java.awt.Dimension(80, 20));
        btnViewByRefNo.setPreferredSize(new java.awt.Dimension(80, 20));
        btnViewByRefNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewByRefNoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        cPanel1.add(btnViewByRefNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        cPanel2.add(cPanel1, gridBagConstraints);

        panAddition.add(cPanel2, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panSalaryRecovery.add(panAddition, gridBagConstraints);

        getContentPane().add(panSalaryRecovery, java.awt.BorderLayout.CENTER);

        panStatus.setLayout(new java.awt.GridBagLayout());

        lblSpace1.setText(" Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblSpace1, gridBagConstraints);

        lblStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblStatus.setText("                      ");
        panStatus.add(lblStatus, new java.awt.GridBagConstraints());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblMsg, gridBagConstraints);

        getContentPane().add(panStatus, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewByRefNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewByRefNoActionPerformed
        // TODO add your handling code here:
         if (tdtCalcIntUpto.getDateValue().equals("")) {
            ClientUtil.showAlertWindow("Please enter 'Calculate Interest upto' Date");
         }
        else {
            HashMap viewMap =new HashMap();
            ArrayList tblList=new ArrayList();
            viewMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
            List viewList=ClientUtil.executeQuery("viewListDetails",viewMap);
            if(viewList.size()>0){
                btnEmployerRefNo.setEnabled(true);
               // btnViewByRefNo.setEnabled(false);
                txtEmployerRefNo.setEnabled(true);
                btnOk.setEnabled(true);
                }   
            else{
                 ClientUtil.showMessageWindow("Recovery List is not Generated  for This Date... !!! ");
            }
        }
       
    }//GEN-LAST:event_btnViewByRefNoActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        // TODO add your handling code here:
         if(txtEmployerRefNo.getText().equals(""))
         {
          ClientUtil.showAlertWindow("Please enter 'Employer Ref.No'");
         }
         else
         {
         HashMap viewMap =new HashMap();
            ArrayList tblList=new ArrayList();
            viewMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
            viewMap.put("EMP_REF_NO",txtEmployerRefNo.getText().toString());
            List viewList=ClientUtil.executeQuery("viewListDetails1",viewMap);
            if(viewList.size()>0){
                for(int i=0;i<viewList.size();i++){
                    HashMap newViewMap=(HashMap) viewList.get(i);
                    ArrayList listView=new ArrayList();
                    listView.add(String.valueOf(i+1));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("EMP_REF_NO")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("MEMBER_NAME")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("SCHEME_NAME")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("ACT_NUM")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("TOTAL_DEMAND")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("PRINCIPAL")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("INTEREST")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("PENAL")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("CHARGES")));
                    tblList.add(listView);
                }
                observable.viewTblData(tblList);
                tblSalaryRecoveryList.setModel(observable.getTblSalaryRecoveryList());
                
            }
            else{
                 ClientUtil.showMessageWindow("Recovery List is not Generated  for this Clock No!!! ");
            }
         }
    }//GEN-LAST:event_btnOkActionPerformed
    
    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        if (tdtCalcIntUpto.getDateValue().equals("")) {
            ClientUtil.showAlertWindow("Please enter 'Calculate Interest upto' Date");
        } 
        else {
            HashMap viewMap =new HashMap();
            ArrayList tblList=new ArrayList();
            viewMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
            List viewList=ClientUtil.executeQuery("viewListDetails",viewMap);
            if(viewList.size()>0){
                for(int i=0;i<viewList.size();i++){
                    HashMap newViewMap=(HashMap) viewList.get(i);
                    ArrayList listView=new ArrayList();
                    listView.add(String.valueOf(i+1));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("EMP_REF_NO")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("MEMBER_NAME")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("SCHEME_NAME")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("ACT_NUM")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("TOTAL_DEMAND")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("PRINCIPAL")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("INTEREST")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("PENAL")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("CHARGES")));
                    listView.add(CommonUtil.convertObjToStr(newViewMap.get("CLEAR_BALANCE")));
                    listView.add(""); // nithya
                    listView.add(""); // nithya
                    tblList.add(listView);
                    
                }
                observable.viewTblData(tblList);
                tblSalaryRecoveryList.setModel(observable.getTblSalaryRecoveryList());
                calcTotal();
                
            }
            else{
                 ClientUtil.showMessageWindow("Recovery List is not Generated  for This Date... !!! ");
            }
        }
        
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(j==1){
           if((txtAmount.getText()!=null) && (!txtAmount.getText().equals(""))){
               int no=tblSalaryRecoveryList.getRowCount()+1;  
               //System.out.println("tblSalaryRecoveryList.getModel() :: " + tblSalaryRecoveryList.getModel()+"\n cboProdId.getSelectedItem().toString() :: " + cboProdId.getSelectedItem().toString());
               String prodId = CommonUtil.convertObjToStr(cboProdId.getSelectedItem());
               //( (EnhancedTableModel) tblSalaryRecoveryList.getModel() ).addRow(new Object[]{no,txtEmployerRefNo.getText(),lblName.getText(),cboProdId.getSelectedItem().toString(),txtAccountNo.getText(),Double.parseDouble(txtAmount.getText()),0.0,0.0,0.0,0.0});
               ( (EnhancedTableModel) tblSalaryRecoveryList.getModel() ).addRow(new Object[]{no,txtEmployerRefNo.getText(),lblName.getText(),prodId,txtAccountNo.getText(),Double.parseDouble(txtAmount.getText()),0.0,0.0,0.0,0.0,0.0,"Y","N"});
               HashMap insMap=new HashMap();
               insMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
               insMap.put("EMP_REF_NO",txtEmployerRefNo.getText());
               insMap.put("MEMBER_NAME",lblName.getText());
               insMap.put("SCHEME_NAME",prodId);
               insMap.put("ACT_NUM",txtAccountNo.getText());
               insMap.put("TOTAL_DEMAND",Double.parseDouble(txtAmount.getText()));
               insMap.put("PRINCIPAL",Double.parseDouble(txtAmount.getText()));
               insMap.put("INTEREST",0.0);
               insMap.put("PENAL",0.0);
               insMap.put("CHARGES",0.0);
               insMap.put("PROD_ID", ((ComboBoxModel) cboProdId.getModel()).getKeyForSelected());
               insMap.put("PROD_TYPE",((ComboBoxModel) cboProdType.getModel()).getKeyForSelected());
               insMap.put("PARTICULARS",txtParticulars.getText());
               insMap.put("OMIT_PRINCIPAL","Y");
               insMap.put("OMIT_PRINCIPAL","N");
               observable.doInsert(insMap,j);
                              
           }
           else{
                ClientUtil.showAlertWindow("Please enter an 'Amount' ");
                return;
           }
         
           
        }
          if(j==2){
              if(txtAmount.getText()!=null || (!txtAmount.getText().equals(""))){
                  double recoveredAmt=Double.parseDouble(txtAmount.getText());
                  double chargeAmt=CommonUtil.convertObjToDouble(tblSalaryRecoveryList.getValueAt(tblSalaryRecoveryList.getSelectedRow(),9));
                  double penalAmt=CommonUtil.convertObjToDouble(tblSalaryRecoveryList.getValueAt(tblSalaryRecoveryList.getSelectedRow(),8));
                  double intAmt=CommonUtil.convertObjToDouble(tblSalaryRecoveryList.getValueAt(tblSalaryRecoveryList.getSelectedRow(),7));
                  //double intAmt=CommonUtil.convertObjToDouble(tblSalaryRecoveryList.getValueAt(tblSalaryRecoveryList.getSelectedRow(),7));
                  HashMap hMap=new HashMap();
                  hMap.put("ACT_NUM",CommonUtil.convertObjToStr(tblSalaryRecoveryList.getValueAt(tblSalaryRecoveryList.getSelectedRow(),4)));
                  List aList=ClientUtil.executeQuery("GetProdtypeandid", hMap);
                  HashMap whereMap=(HashMap) aList.get(0);
                     HashMap appropriateMap =new HashMap();
                     HashMap updateMap=new HashMap();
                    if(whereMap.containsKey("PROD_ID") && whereMap.get("PROD_ID")!=null && !whereMap.get("PROD_ID").equals("") && !whereMap.get("PROD_TYPE").equals("OA")  
                    && !whereMap.get("PROD_TYPE").equals("MDS") && !whereMap.get("PROD_TYPE").equals("SA")){
                        String prod_ID = CommonUtil.convertObjToStr(whereMap.get("PROD_ID"));
                        appropriateMap.put("PROD_ID",prod_ID);
                        List appList = ClientUtil.executeQuery("selectTallyAppropriatTransaction", appropriateMap);
                        if(appList !=null && appList .size()>0){
                            appropriateMap=(HashMap)appList.get(0);
                            appropriateMap.remove("PROD_ID");
                            System.out.println("####### appropriateMap : "+appropriateMap);
                            System.out.println("appropriateMap####"+appropriateMap);
                            java.util.Collection collectedValues =appropriateMap.values();
                            java.util.Iterator it=collectedValues.iterator();
                            int hierarchyLevel=0;
//                        
                            while(it.hasNext()){
                                hierarchyLevel++;
                                String hierachyValue=CommonUtil.convertObjToStr(it.next());
                                System.out.println("hierachyValue####"+hierachyValue);
                                if(hierachyValue.equals("CHARGES")){
                                    if(recoveredAmt>0 && chargeAmt>0 && recoveredAmt>chargeAmt){
                                       updateMap.put("CHARGES",(chargeAmt));
                                        recoveredAmt-=chargeAmt;
                                    }
                                }
                                if(hierachyValue.equals("PENALINTEREST")){
                                    if(recoveredAmt>0 && penalAmt>0 && recoveredAmt>penalAmt){
                                       updateMap.put("PENAL",(penalAmt));
                                        recoveredAmt-=penalAmt;
                                    }
                                }
                                if(hierachyValue.equals("INTEREST")){
                                    if(recoveredAmt>0 && intAmt>0 && recoveredAmt>intAmt){
                                      updateMap.put("INTEREST",(intAmt));
                                        recoveredAmt-=intAmt;
                                    }
                                }
                                if(hierachyValue.equals("PRINCIPAL")){
                                    if(recoveredAmt>0){
                                       updateMap.put("PRINCIPAL",(recoveredAmt));
                                    }
                                }
                            }
                        }
                          updateMap.put("TOTAL_DEMAND",Double.parseDouble(txtAmount.getText()));
                          tblSalaryRecoveryList.setValueAt(recoveredAmt, tblSalaryRecoveryList.getSelectedRow(), 6);
                          tblSalaryRecoveryList.setValueAt(penalAmt, tblSalaryRecoveryList.getSelectedRow(), 8);
                          tblSalaryRecoveryList.setValueAt(chargeAmt, tblSalaryRecoveryList.getSelectedRow(), 9);
                          tblSalaryRecoveryList.setValueAt(intAmt, tblSalaryRecoveryList.getSelectedRow(), 7);
                         tblSalaryRecoveryList.setValueAt(Double.parseDouble(txtAmount.getText()), tblSalaryRecoveryList.getSelectedRow(), 5);
                    }
                    else{
                            updateMap.put("TOTAL_DEMAND",Double.parseDouble(txtAmount.getText()));
                            updateMap.put("PRINCIPAL",0);
                            updateMap.put("PENAL",0);
                            updateMap.put("INTEREST",0);
                            updateMap.put("CHARGES",0);
                           tblSalaryRecoveryList.setValueAt(Double.parseDouble(txtAmount.getText()), tblSalaryRecoveryList.getSelectedRow(), 5);
                    }
                      updateMap.put("EMP_REF_NO","");
                      updateMap.put("MEMBER_NAME","");
                      updateMap.put("SCHEME_NAME","");
                      updateMap.put("ACT_NUM",CommonUtil.convertObjToStr((tblSalaryRecoveryList.getValueAt(tblSalaryRecoveryList.getSelectedRow(),4))));
                      updateMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
                      updateMap.put("PROD_ID", "");
                      updateMap.put("PROD_TYPE","");
                      updateMap.put("PARTICULARS",txtParticulars.getText());
                      observable.doInsert(updateMap,j);
                      System.out.println("row"+tblSalaryRecoveryList.getSelectedRow()+" amount"+Double.parseDouble(txtAmount.getText()));
                      tblSalaryRecoveryList.clearSelection();
                      
                      
              }
          }
        if(j==3){
           
           HashMap updateMap=new HashMap();
            updateMap.put("EMP_REF_NO","");
            updateMap.put("MEMBER_NAME","");
            updateMap.put("SCHEME_NAME","");
            updateMap.put("ACT_NUM",CommonUtil.convertObjToStr((tblSalaryRecoveryList.getValueAt(tblSalaryRecoveryList.getSelectedRow(),4))));
            updateMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
            updateMap.put("TOTAL_DEMAND",0);
            updateMap.put("PRINCIPAL",0);
            updateMap.put("PENAL",0);
            updateMap.put("INTEREST",0);
            updateMap.put("CHARGES",0);
            updateMap.put("PROD_ID", "");
            updateMap.put("PROD_TYPE","");
             updateMap.put("PARTICULARS",txtParticulars.getText());
            ((EnhancedTableModel)tblSalaryRecoveryList.getModel()).removeRow(tblSalaryRecoveryList.getSelectedRow());
            observable.doInsert(updateMap,j);
        }
        
        //last add------>//
         calcTotal();
        clearPanDetails();
        EnableDisablePan(false);
        j=0;
        //.......>
    }//GEN-LAST:event_btnSaveActionPerformed
    private void clearPanDetails(){
       txtEmployerRefNo.setText("");
       cboProdType.setSelectedIndex(0);
       cboProdId.setSelectedIndex(0);
       txtAccountNo.setText("");
       txtAmount.setText("");
       txtParticulars.setText("");
       lblName.setText("");
    }
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        //added by Anju Anand for Mantis Id: 10391
        int n = 0;
        int rowIds[] = tblSalaryRecoveryList.getSelectedRows();
        if (rowIds.length > 1) {
            ClientUtil.showAlertWindow("Please Select only One row..!!");
            return;
        }
        int rowCount = 0;
        rowCount = tblSalaryRecoveryList.getRowCount();
        if (rowCount > 0) {
            int selRow = 0;
            selRow = tblSalaryRecoveryList.getSelectedRow();
            if (selRow < 0) {
                ClientUtil.showAlertWindow("Please Select a row to delete..!!");
                return;
            } else {
                String empRefNo = "";
                String schemeName = "";
                String accNo = "";
                Date transDate = null;
                empRefNo = CommonUtil.convertObjToStr(tblSalaryRecoveryList.getValueAt(selRow, 1));
                schemeName = CommonUtil.convertObjToStr(tblSalaryRecoveryList.getValueAt(selRow, 3));
                accNo = CommonUtil.convertObjToStr(tblSalaryRecoveryList.getValueAt(selRow, 4));
                transDate = CommonUtil.getProperDate(currDate, DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue()));
                HashMap dataMap = new HashMap();
                dataMap.put("EMP_REF_NO", empRefNo);
                dataMap.put("SCHEME_NAME", schemeName);
                dataMap.put("ACC_NO", accNo);
                dataMap.put("STATUS", "DELETED");
                dataMap.put("INT_CALC_UPTO_DT", transDate);
                n = ClientUtil.confirmationAlert("Are you sure you want to Delete..?");
                if (n != 0) {
                    return;
                } else {
                    ClientUtil.execute("updateSalRecoveryListStatus", dataMap);
                }
            }
        }
        j = 3;
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
       
      //  if(tblSalaryRecoveryList.)
         int rowIds[] = tblSalaryRecoveryList.getSelectedRows();
         if(rowIds.length >1){
              ClientUtil.showAlertWindow("Please Select only One row...");
              return;
         }
           if(tblSalaryRecoveryList.getSelectedRow()<0){
                ClientUtil.showAlertWindow("Please Select  a row...");
              return;
           }
        txtAmount.setEnabled(true);
         j=2;
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnEmployerRefNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmployerRefNoActionPerformed
        // TODO add your handling code here:
          callView("EMPREFNO");
    }//GEN-LAST:event_btnEmployerRefNoActionPerformed
  private void callView(String currField) {
        viewType = currField;
        HashMap viewMap = new HashMap();
        if(currField == "CREDIT_ACC_NO"){
            HashMap whereMap = new HashMap();
            viewMap = new HashMap();
            String prodType = ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString();
            if(!prodType.equals("GL")){
                HashMap inputMap=new HashMap();
                String empRefNo = txtEmployerRefNo.getText();
                inputMap.put("EMP_REFNO_NEW",empRefNo);
                List custIDLst = ClientUtil.executeQuery("getCustIdFromEmpRefNo", inputMap);
                if(custIDLst !=null && custIDLst .size()>0){
                    inputMap=(HashMap)custIDLst.get(0);
                    viewMap.put(CommonConstants.MAP_NAME, "getActNoFromCustomerID");
                    whereMap.put("CUST_ID",inputMap.get("CUST_ID"));
                }
            }else{
                viewMap.put(CommonConstants.MAP_NAME, "Cash.getSelectAcctHead");
            }
            if(cboProdId.getModel() != null && cboProdId.getModel().getSize()>0){
                whereMap.put("PROD_ID", ((ComboBoxModel) cboProdId.getModel()).getKeyForSelected());
            }
            whereMap.put("SELECTED_BRANCH",ProxyParameters.BRANCH_ID);
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
             new ViewAll(this, viewMap).show();
        }
        else   if(currField == "EMPREFNO" ){
            HashMap statusmap=new HashMap();
            String status="DELETED";
            
            statusmap.put(CommonConstants.MAP_NAME,"getEmployerRefNo");
            
            HashMap wheremap=new HashMap();
            wheremap.put("STATUS",status);
            wheremap.put(CommonConstants.BRANCH_ID, getSelectedBranchID());
            statusmap.put(CommonConstants.MAP_WHERE,wheremap);
            new ViewAll(this, statusmap).show();
            
        }
       
    }
    
    public void fillData(Object obj) {
        HashMap hash = (HashMap) obj;
        if (viewType != null) {
            System.out.println("#### hash"+hash);
            if(viewType.equals("CREDIT_ACC_NO")){
                String prodType = ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString();
                if( prodType != null && !prodType.equals("GL")){
                    if(prodType.equals("TD")){
                        hash.put("ACCOUNTNO", hash.get("ACCOUNTNO")+"_1");
                    }
                    txtAccountNo.setText(CommonUtil.convertObjToStr(hash.get("ACT_NUM")));
                    observable.setTxtAccountNo(CommonUtil.convertObjToStr(hash.get("ACT_NUM")));
                   // lblAccountName.setText(CommonUtil.convertObjToStr(hash.get("NAME")));
                }else{
                    txtAccountNo.setText(CommonUtil.convertObjToStr(hash.get("A/C HEAD")));
                    observable.setTxtAccountNo(CommonUtil.convertObjToStr(hash.get("A/C HEAD")));
                }
            }
                 if(viewType.equals("EMPREFNO")){
	                txtEmployerRefNo.setText(CommonUtil.convertObjToStr(hash.get("EMP_REFNO_NEW")));
	                lblName.setText(CommonUtil.convertObjToStr(hash.get("NAME")));
	                String refno=txtEmployerRefNo.getText();
		             HashMap hmap = new HashMap();
		             hmap.put("EMP_REF_NO", refno);
		             List lst = ClientUtil.executeQuery("getAllSuretyDetails", hmap);
		             if (lst != null && lst.size() > 0) {
		                 FrmSuretyTableUI surtyTab = new FrmSuretyTableUI("RECOVERY", lst);                         
		                 surtyTab.show();
		                 if (surtyTab != null) {
		                     String val = surtyTab.selectedData();
		                     txtParticulars.setAllowAll(true);
		                     txtParticulars.setText(val);
		                 }
		             }                    
//                HashMap hmap=new HashMap();
//                hmap.put("EMP_REF_NO",refno);
//                accountNoList=ClientUtil.executeQuery("getsalaryDeductionmappingAccountNo", hmap);
                
            }
        }
    }
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        j=1;
        panDetails.setEnabled(true);
        EnableDisablePan(true);
    }//GEN-LAST:event_btnNewActionPerformed

    private void cboProdTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboProdTypeActionPerformed
        // TODO add your handling code here:
         if (cboProdType.getSelectedIndex() > 0) {       
            String prodType = ((ComboBoxModel)cboProdType.getModel()).getKeyForSelected().toString();
            observable.setCbmProdId(prodType);
            cboProdId.setModel(observable.getCbmProdId());
            if(prodType.equals("GL")){
                cboProdId.setEnabled(false);
                txtAccountNo.setText("");
                lblAccountNo.setText("Account Head");
                btnAccountNo.setEnabled(true);
            }else{
                cboProdId.setEnabled(true);
                lblAccountNo.setText("Account No");
                txtAccountNo.setText("");
                btnAccountNo.setEnabled(true);
                txtAccountNo.setEnabled(false);
            }
            if(!prodType.equals("GL"))
                cboProdId.setModel(observable.getCbmProdId());
        }
    }//GEN-LAST:event_cboProdTypeActionPerformed

    private void btnAccountNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccountNoActionPerformed
        // TODO add your handling code here:
          callView("CREDIT_ACC_NO");
    }//GEN-LAST:event_btnAccountNoActionPerformed
    
    private void tdtCalcIntUptoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtCalcIntUptoFocusLost
        // TODO add your handling code here:
        if(tdtCalcIntUpto.getDateValue().length()>0){
            long diffDayPending = DateUtil.dateDiff(currDate,DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue()));
            System.out.println("### diffDayPending"+diffDayPending);
            if(diffDayPending<0){
                ClientUtil.showMessageWindow("Calculate Interest Upto Date Should be Equal or Greater than Current Date !!! ");
                tdtCalcIntUpto.setDateValue("");
            }
        }
        btnOmitPrinc.setEnabled(true);
    }//GEN-LAST:event_tdtCalcIntUptoFocusLost
    
    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        // TODO add your handling code here:
        if (tdtCalcIntUpto.getDateValue().equals("")) {
            ClientUtil.showAlertWindow("Please enter 'Calculate Interest upto' Date");
        } else {

            int confirm = COptionPane.showConfirmDialog(null, "Recovery List Generation should be done Just before Day End after all transactions,"
                    + "Do you want to continue?", "Message", 0);
            if (confirm == 0) {
                updateOBFields();
                HashMap whereMap = new HashMap();
                whereMap.put("INT_CALC_UPTO_DT", setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
                whereMap.put("EXPORT_LIST", "EXPORT_LIST");
                List recoveryList = ClientUtil.executeQuery("checkingSameDateRecord", whereMap);
                if (recoveryList != null && recoveryList.size() > 0) {
                    int dialogButton = COptionPane.YES_NO_OPTION;
                    int dialogResult = COptionPane.showConfirmDialog(null, "Recovery List Already Exported for This Date... !!!Do you wish to generate again??", "Warning", dialogButton);
                    System.out.println("dialogResult=====" + dialogResult);
                    if (dialogResult == 0) {
                        HashMap whereMap1 = new HashMap();
                        whereMap1.put("INT_CALC_UPTO_DT", setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
                        ClientUtil.execute("updateRecoveryListExportStatusNo", whereMap1);
                        //btnGenerateActionPerformed(null);
                        btnGenerate.setEnabled(true);
                    }
                } else {
                    observable.setTdtCalcIntUpto(tdtCalcIntUpto.getDateValue());
                    CommonUtil comm = new CommonUtil();
                    final JDialog loading = comm.addProgressBar();
                    SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

                        @Override
                        protected Void doInBackground() throws InterruptedException /**
                         * Execute some operation
                         */
                        {
                            observable.insertTableData();
                            return null;
                        }

                        @Override
                        protected void done() {
                            loading.dispose();
                        }
                    };
                    worker.execute();
                    loading.show();
                    try {
                        worker.get();
                    } catch (Exception e1) {
                        e1.printStackTrace();
                    }
                    tblSalaryRecoveryList.setModel(observable.getTblSalaryRecoveryList());
                    tblSalaryRecoveryList.getColumnModel().getColumn(0).setPreferredWidth(35);
                    tblSalaryRecoveryList.getColumnModel().getColumn(1).setPreferredWidth(60);
                    tblSalaryRecoveryList.getColumnModel().getColumn(2).setPreferredWidth(120);
                    tblSalaryRecoveryList.getColumnModel().getColumn(3).setPreferredWidth(130);
                    tblSalaryRecoveryList.getColumnModel().getColumn(4).setPreferredWidth(90);
                    tblSalaryRecoveryList.getColumnModel().getColumn(6).setPreferredWidth(65);
                    tblSalaryRecoveryList.getColumnModel().getColumn(6).setPreferredWidth(55);
                    tblSalaryRecoveryList.getColumnModel().getColumn(7).setPreferredWidth(50);
                    tblSalaryRecoveryList.getColumnModel().getColumn(8).setPreferredWidth(50);
                    tblSalaryRecoveryList.getColumnModel().getColumn(9).setPreferredWidth(50);
                    tblSalaryRecoveryList.getColumnModel().getColumn(10).setPreferredWidth(50);
                    calcTotal();
                    if (tblSalaryRecoveryList.getRowCount() > 0) {
                        tdtCalcIntUpto.setEnabled(false);
                        btnGenerate.setEnabled(false);
                    }
                }
            }else{
                return;
            }
        }
    }//GEN-LAST:event_btnGenerateActionPerformed
    //Calculate Total
    private void calcTotal() {
        totAmt = 0;
        if(tblSalaryRecoveryList.getRowCount()>0){
            for (int i=0; i< tblSalaryRecoveryList.getRowCount(); i++) {
                totAmt = totAmt + CommonUtil.convertObjToDouble(tblSalaryRecoveryList.getValueAt(i, 5).toString()).doubleValue();
            }
        }
        lblTotalTransactionAmtVal.setText(CurrencyValidation.formatCrore(String.valueOf(totAmt)));
        System.out.println("lblTotalTransactionAmtVal.setText"+lblTotalTransactionAmtVal.getText().toString());
    }
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed
    
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        observable.resetForm();
        ClientUtil.enableDisable(panSalaryRecoveryList,false);
        tdtCalcIntUpto.setEnabled(true);
        btnGenerate.setEnabled(true);
        btnExportRecoveryList.setEnabled(true);
        btnEmployerRefNo.setEnabled(false);
        txtEmployerRefNo.setEnabled(false);
        ClientUtil.clearAll(this);
        lblTotalTransactionAmtVal.setText("");
        loanDetailsMap = null;
        btnOmitPrinc.setEnabled(false);
    }//GEN-LAST:event_btnClearActionPerformed
    
    private void tblSalaryRecoveryListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSalaryRecoveryListMouseClicked
        
    }//GEN-LAST:event_tblSalaryRecoveryListMouseClicked
    
    private void btnExportRecoveryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportRecoveryListActionPerformed
        // TODO add your handling code here:
        
        if (tblSalaryRecoveryList.getRowCount() > 0) {
            createExcelFileforCanteen();
            createExcelFileforSociety();
            ClientUtil.showMessageWindow("Your excel file has been Generated!!! ");
            btnExportRecoveryList.setEnabled(false);
            HashMap whereMap = new HashMap();
            whereMap.put("INT_CALC_UPTO_DT", setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
            ClientUtil.execute("updateRecoveryListExportStatus", whereMap);
        } else {
            ClientUtil.showMessageWindow("No Record in This Table!!! ");
        }
    }//GEN-LAST:event_btnExportRecoveryListActionPerformed

    private void btnPrintRecoveryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintRecoveryListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPrintRecoveryListActionPerformed

private void txtEmployerRefNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmployerRefNoFocusLost
// TODO add your handling code here:
    String refno = txtEmployerRefNo.getText();
    System.out.println("refno--------11111--------" + refno);
}//GEN-LAST:event_txtEmployerRefNoFocusLost

    private void btnOmitPrincActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOmitPrincActionPerformed

        SalaryRecoveryOmitUI omitUI = new SalaryRecoveryOmitUI("RecoveryListGeneration", loanDetailsMap);         omitUI.show();         loanDetailsMap = omitUI.getLoanDetailMap();         if (loanDetailsMap != null && loanDetailsMap.size() > 0) {             observable.setLoanDetailsMap(loanDetailsMap);         }     }//GEN-LAST:event_btnOmitPrincActionPerformed

//    private void createExcelFileforCanteen(){
//        try{
//            double total = 0.0;
//            Date intDt = DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue());
//            System.out.println("######### intDt"+intDt);
//            javax.swing. JFileChooser fc = new javax.swing.JFileChooser();
//            String filename=System.getProperty("user.home") + "/Desktop/"+intDt.getDate()+"-"+(intDt.getMonth()+1)+"-"+(intDt.getYear()+1900)+"-"+"RecoveryListforCanteen.xls" ;
//            System.out.println("!@#!@ filename:"+filename);
//            HSSFWorkbook hwb=new HSSFWorkbook();
//            HSSFSheet sheet =  hwb.createSheet("Recovery List");
//            HSSFRow rowhead=   sheet.createRow((short)0);
//            HSSFCellStyle cellStyle = hwb.createCellStyle();
//            HSSFFont font = hwb.createFont();
//            font.setFontName(HSSFFont.FONT_ARIAL);
//            font.setFontHeightInPoints((short) 10);
//            font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
//            font.setColor(HSSFColor.BLACK.index);
//            cellStyle.setFont(font);
//            cellStyle.setBorderBottom((short) 1); // single line border
//            cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
//            HSSFCell cell1 = rowhead.createCell((short) 0);
//            cell1.setCellValue("SL NO");
//            HSSFCell cell2 = rowhead.createCell((short) 1);
//            cell2.setCellValue("CLOCK NO");
//            HSSFCell cell3 = rowhead.createCell((short) 2);
//            cell3.setCellValue("NAME");
//            HSSFCell cell4 = rowhead.createCell((short) 3);
//            cell4.setCellValue("AMOUNT");
//            cell1.setCellStyle(cellStyle);
//            cell2.setCellStyle(cellStyle);
//            cell3.setCellStyle(cellStyle);
//            cell4.setCellStyle(cellStyle);
//            rowhead.setHeightInPoints(25);
//            HashMap whereMap = new HashMap();
//            whereMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
//            whereMap.put("EMP_TYPE","0");
//            double clearbalance=0.0;
//            List recoveryList = ClientUtil.executeQuery("getRecoveryListData", whereMap);
//            if(recoveryList!=null && recoveryList.size()>0){
//                for(int i=1;i<=recoveryList.size();i++){
//                    whereMap = (HashMap)recoveryList.get(i-1);
//                    HashMap hMap=new HashMap();
//                    String clkno=CommonUtil.convertObjToStr(whereMap.get("EMP_REF_NO"));
//                    hMap.put("EMP_REFNO_NEW",clkno);
//                    List aList=ClientUtil.executeQuery("getPartialrecoveryClearbalance",hMap);
//                    clearbalance=0.0;
//                    if(aList!=null && aList.size()>0){
//                        HashMap clrMap=(HashMap) aList.get(0);
//                        clearbalance=CommonUtil.convertObjToDouble(clrMap.get("AMOUNT"));
//                    }
//                    HSSFRow row=   sheet.createRow((short)i);
//                    row.createCell((short) 0).setCellValue(i);
//                    row.createCell((short) 1).setCellValue(CommonUtil.convertObjToStr(whereMap.get("EMP_REF_NO")));
//                    row.createCell((short) 2).setCellValue(CommonUtil.convertObjToStr(whereMap.get("MEMBER_NAME")));
//                    double amts=CommonUtil.convertObjToDouble(whereMap.get("AMOUNT")).doubleValue()-clearbalance;
//                    total += amts;
//                    row.createCell((short) 3).setCellValue(String.valueOf(df.format(amts)));
//                    if(i==recoveryList.size()){
//                        i=i+1;
//                        row =   sheet.createRow((short)i);
//                        HSSFCell cell5 = row.createCell((short) 2);
//                        cell5.setCellValue("TOTAL");
//                        HSSFCell cell6 = row.createCell((short) 3);
//                        cellStyle.setBorderTop((short) 1); // double lines border
//                        cell6.setCellValue(CurrencyValidation.formatCrore(String.valueOf(total)));
//                        cell5.setCellStyle(cellStyle);
//                        cell6.setCellStyle(cellStyle);
//                        row.setHeightInPoints(25);
//                    }
//                }
//                FileOutputStream fileOut =  new FileOutputStream(filename);
//                hwb.write(fileOut);
//                fileOut.close();   
//            }
//        }catch ( Exception ex ) {
//            ex.printStackTrace();
//            System.out.println(ex);
//            
//        }
//    }
    private void createExcelFileforSociety(){
        try{
            double total = 0.0;
            Date intDt = DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue());
            System.out.println("######### intDt"+intDt);
            javax.swing. JFileChooser fc = new javax.swing.JFileChooser();
            String filename=System.getProperty("user.home") + "/Desktop/"+intDt.getDate()+"-"+(intDt.getMonth()+1)+"-"+(intDt.getYear()+1900)+"-"+"RecoveryListforSociety.xls" ;
            System.out.println("!@#!@ filename:"+filename);
            HSSFWorkbook hwb=new HSSFWorkbook();
            HSSFSheet sheet =  hwb.createSheet("Recovery List");
            HSSFRow rowhead=   sheet.createRow((short)0);
            HSSFCellStyle cellStyle = hwb.createCellStyle();
            HSSFFont font = hwb.createFont();
            font.setFontName(HSSFFont.FONT_ARIAL);
            font.setFontHeightInPoints((short) 10);
            font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            font.setColor(HSSFColor.BLACK.index);
            cellStyle.setFont(font);
            cellStyle.setBorderBottom((short) 1); // single line border
            cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
            HSSFCell cell1 = rowhead.createCell((short) 0);
            cell1.setCellValue("SL NO");
            HSSFCell cell2 = rowhead.createCell((short) 1);
            cell2.setCellValue("CLOCK NO");
            HSSFCell cell3 = rowhead.createCell((short) 2);
            cell3.setCellValue("NAME");
            HSSFCell cell4 = rowhead.createCell((short) 3);
            cell4.setCellValue("AMOUNT");
            HSSFCell cell41 = rowhead.createCell((short) 4);
            cell41.setCellValue("AMOUNT");
            cell1.setCellStyle(cellStyle);
            cell2.setCellStyle(cellStyle);
            cell3.setCellStyle(cellStyle);
            cell4.setCellStyle(cellStyle);
            cell41.setCellStyle(cellStyle);
            rowhead.setHeightInPoints(25);
            HashMap whereMap = new HashMap();
            whereMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
            whereMap.put("EMP_TYPE","1");
            double clearbalance=0.0;
            List recoveryList = ClientUtil.executeQuery("getRecoveryListData", whereMap);
            if(recoveryList!=null && recoveryList.size()>0){
                for(int i=1;i<=recoveryList.size();i++){
                    whereMap = (HashMap)recoveryList.get(i-1);
                    HashMap hMap=new HashMap();
                    String clkno=CommonUtil.convertObjToStr(whereMap.get("EMP_REF_NO"));
                    hMap.put("EMP_REFNO_NEW",clkno);
                    List aList=ClientUtil.executeQuery("getPartialrecoveryClearbalance",hMap);
                    clearbalance=0.0;
                    if(aList!=null && aList.size()>0){
                        HashMap clrMap=(HashMap) aList.get(0);
                        clearbalance=CommonUtil.convertObjToDouble(clrMap.get("AMOUNT"));
                       
                    }
                    HSSFRow row=   sheet.createRow((short)i);
                    row.createCell((short) 0).setCellValue(i);
                    row.createCell((short) 1).setCellValue(CommonUtil.convertObjToStr(whereMap.get("EMP_REF_NO")));
                    row.createCell((short) 2).setCellValue(CommonUtil.convertObjToStr(whereMap.get("MEMBER_NAME")));
                    double amts=CommonUtil.convertObjToDouble(whereMap.get("AMOUNT")).doubleValue()-clearbalance;
                    total += amts;
                    row.createCell((short) 3).setCellValue(String.valueOf(df.format(amts)));
                    row.createCell((short) 4).setCellValue(CommonUtil.convertObjToStr("0"));
                    if(i==recoveryList.size()){
                        i=i+1;
                        row =   sheet.createRow((short)i);
                        HSSFCell cell5 = row.createCell((short) 2);
                        cell5.setCellValue("TOTAL");
                        HSSFCell cell6 = row.createCell((short) 3);
                        cellStyle.setBorderTop((short) 1); // double lines border
                        cell6.setCellValue(CurrencyValidation.formatCrore(String.valueOf(total)));
                        cell5.setCellStyle(cellStyle);
                        cell6.setCellStyle(cellStyle);
                        row.setHeightInPoints(25);
                    }
                  
                }
                FileOutputStream fileOut =  new FileOutputStream(filename);
                hwb.write(fileOut);
                fileOut.close();
                
             
            }
        }catch ( Exception ex ) {
            ex.printStackTrace();
            System.out.println(ex);
            
        }
    }
    
    private void createExcelFileforCanteen(){
        try{
            double total = 0.0;
            Date intDt = DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue());
            System.out.println("######### intDt"+intDt);
            javax.swing. JFileChooser fc = new javax.swing.JFileChooser();
            String filename=System.getProperty("user.home") + "/Desktop/"+intDt.getDate()+"-"+(intDt.getMonth()+1)+"-"+(intDt.getYear()+1900)+"-"+"RecoveryListforCanteen.xls" ;
            System.out.println("!@#!@ filename:"+filename);
            HSSFWorkbook hwb=new HSSFWorkbook();
            HSSFSheet sheet =  hwb.createSheet("Recovery List");
            HSSFRow rowhead=   sheet.createRow((short)0);
            HSSFCellStyle cellStyle = hwb.createCellStyle();
            HSSFFont font = hwb.createFont();
            font.setFontName(HSSFFont.FONT_ARIAL);
            font.setFontHeightInPoints((short) 10);
            font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            font.setColor(HSSFColor.BLACK.index);
            cellStyle.setFont(font);
            cellStyle.setBorderBottom((short) 1); // single line border
            cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
            HSSFCell cell1 = rowhead.createCell((short) 0);
            cell1.setCellValue("SL NO");
            HSSFCell cell2 = rowhead.createCell((short) 1);
            cell2.setCellValue("CLOCK NO");
            HSSFCell cell3 = rowhead.createCell((short) 2);
            cell3.setCellValue("NAME");
            HSSFCell cell4 = rowhead.createCell((short) 3);
            cell4.setCellValue("AMOUNT");
            HSSFCell cell41 = rowhead.createCell((short) 4);
            cell41.setCellValue("AMOUNT");
            cell1.setCellStyle(cellStyle);
            cell2.setCellStyle(cellStyle);
            cell3.setCellStyle(cellStyle);
            cell4.setCellStyle(cellStyle);
            cell41.setCellStyle(cellStyle);
            rowhead.setHeightInPoints(25);
            HashMap whereMap = new HashMap();
            whereMap.put("INT_CALC_UPTO_DT",setProperDtFormat(DateUtil.getDateMMDDYYYY(tdtCalcIntUpto.getDateValue())));
            whereMap.put("EMP_TYPE","0");
            double clearbalance=0.0;
            List recoveryList = ClientUtil.executeQuery("getRecoveryListData", whereMap);
            if(recoveryList!=null && recoveryList.size()>0){
                for(int i=1;i<=recoveryList.size();i++){
                    whereMap = (HashMap)recoveryList.get(i-1);
                    HashMap hMap=new HashMap();
                    String clkno=CommonUtil.convertObjToStr(whereMap.get("EMP_REF_NO"));
                    hMap.put("EMP_REFNO_NEW",clkno);
                    List aList=ClientUtil.executeQuery("getPartialrecoveryClearbalance",hMap);
                    clearbalance=0.0;
                    if(aList!=null && aList.size()>0){
                        HashMap clrMap=(HashMap) aList.get(0);
                        clearbalance=CommonUtil.convertObjToDouble(clrMap.get("AMOUNT"));
                       
                    }
                    HSSFRow row=   sheet.createRow((short)i);
                    row.createCell((short) 0).setCellValue(i);
                    row.createCell((short) 1).setCellValue(CommonUtil.convertObjToStr(whereMap.get("EMP_REF_NO")));
                    row.createCell((short) 2).setCellValue(CommonUtil.convertObjToStr(whereMap.get("MEMBER_NAME")));
                    double amts=CommonUtil.convertObjToDouble(whereMap.get("AMOUNT")).doubleValue()-clearbalance;
                    total += amts;
                    row.createCell((short) 3).setCellValue(String.valueOf(df.format(amts)));
                    row.createCell((short) 4).setCellValue(CommonUtil.convertObjToStr("0"));
                    if(i==recoveryList.size()){
                        i=i+1;
                        row =   sheet.createRow((short)i);
                        HSSFCell cell5 = row.createCell((short) 2);
                        cell5.setCellValue("TOTAL");
                        HSSFCell cell6 = row.createCell((short) 3);
                        cellStyle.setBorderTop((short) 1); // double lines border
                        cell6.setCellValue(CurrencyValidation.formatCrore(String.valueOf(total)));
                        cell5.setCellStyle(cellStyle);
                        cell6.setCellStyle(cellStyle);
                        row.setHeightInPoints(25);
                    }
                  
                }
                FileOutputStream fileOut =  new FileOutputStream(filename);
                hwb.write(fileOut);
                fileOut.close();
                
             
            }
        }catch ( Exception ex ) {
            ex.printStackTrace();
            System.out.println(ex);
            
        }
    }
    
    
    private Date setProperDtFormat(Date dt) {
        Date tempDt=(Date)currDate.clone();
        if(dt!=null) {
            tempDt.setDate(dt.getDate());
            tempDt.setMonth(dt.getMonth());
            tempDt.setYear(dt.getYear());
            return tempDt;
        }
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnAccountNo;
    private com.see.truetransact.uicomponent.CButton btnClear;
    private com.see.truetransact.uicomponent.CButton btnClose;
    private com.see.truetransact.uicomponent.CButton btnDelete;
    private com.see.truetransact.uicomponent.CButton btnEdit;
    private com.see.truetransact.uicomponent.CButton btnEmployerRefNo;
    private com.see.truetransact.uicomponent.CButton btnExportRecoveryList;
    private com.see.truetransact.uicomponent.CButton btnGenerate;
    private com.see.truetransact.uicomponent.CButton btnNew;
    private com.see.truetransact.uicomponent.CButton btnOk;
    private com.see.truetransact.uicomponent.CButton btnOmitPrinc;
    private com.see.truetransact.uicomponent.CButton btnPrintRecoveryList;
    private com.see.truetransact.uicomponent.CButton btnSave;
    private com.see.truetransact.uicomponent.CButton btnView;
    private com.see.truetransact.uicomponent.CButton btnViewByRefNo;
    private com.see.truetransact.uicomponent.CPanel cPanel1;
    private com.see.truetransact.uicomponent.CPanel cPanel2;
    private com.see.truetransact.uicomponent.CComboBox cboProdId;
    private com.see.truetransact.uicomponent.CComboBox cboProdType;
    private com.see.truetransact.uicomponent.CCheckBox chkDE;
    private com.see.truetransact.uicomponent.CLabel lblAccountNo;
    private com.see.truetransact.uicomponent.CLabel lblAmount;
    private com.see.truetransact.uicomponent.CLabel lblCalcIntUpto;
    private com.see.truetransact.uicomponent.CLabel lblEmployerRefNo;
    private com.see.truetransact.uicomponent.CLabel lblMsg;
    private com.see.truetransact.uicomponent.CLabel lblName;
    private com.see.truetransact.uicomponent.CLabel lblParticulars;
    private com.see.truetransact.uicomponent.CLabel lblProdId;
    private com.see.truetransact.uicomponent.CLabel lblProductType;
    private com.see.truetransact.uicomponent.CLabel lblSpace1;
    private com.see.truetransact.uicomponent.CLabel lblStatus;
    private com.see.truetransact.uicomponent.CLabel lblTotalTransactionAmt;
    private com.see.truetransact.uicomponent.CLabel lblTotalTransactionAmtVal;
    private com.see.truetransact.uicomponent.CPanel panAction;
    private com.see.truetransact.uicomponent.CPanel panAddition;
    private com.see.truetransact.uicomponent.CPanel panDetails;
    private com.see.truetransact.uicomponent.CPanel panProcess;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecovery;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecoveryList;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecoveryOptions;
    private com.see.truetransact.uicomponent.CPanel panStatus;
    private com.see.truetransact.uicomponent.CScrollPane srpSalaryRecoveryList;
    private com.see.truetransact.uicomponent.CTable tblSalaryRecoveryList;
    private com.see.truetransact.uicomponent.CDateField tdtCalcIntUpto;
    private com.see.truetransact.uicomponent.CTextField txtAccountNo;
    private com.see.truetransact.uicomponent.CTextField txtAmount;
    private com.see.truetransact.uicomponent.CTextField txtEmployerRefNo;
    private com.see.truetransact.uicomponent.CTextField txtParticulars;
    // End of variables declaration//GEN-END:variables
    
    public static void main(String[] args) {
        RecoveryListGenerationUI fad = new RecoveryListGenerationUI();
        javax.swing.JFrame j = new javax.swing.JFrame();
        j.getContentPane().add(fad);
        j.show();
        fad.show();
    }
}
