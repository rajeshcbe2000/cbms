/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition. 
 * 
 * MarkSalaryRecoveryUI.java
 * @author  Suresh
 *
 */

package com.see.truetransact.ui.salaryrecovery;

import java.util.*;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.ui.common.viewall.ViewAll;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.uicomponent.CInternalFrame;

//Creating Excel File
import  java.io.*;
import org.apache.poi.hssf.usermodel.*;
//import org.apache.poi.hssf.util.HSSFColor;

public class MarkSalaryRecoveryUI extends CInternalFrame implements Observer{
    
    /** Vairable Declarations */
    MarkSalaryRecoveryOB observable = null;
    private Date currDate = null;
    private String viewType = "";
    
    /** Creates new form TokenConfigUI */
    public MarkSalaryRecoveryUI() {
        currDate = ClientUtil.getCurrentDate();
        initForm();
    }
    
    /** Method which is used to initialize the form TokenConfig */
    private void initForm(){
        initComponents();
        observable = new MarkSalaryRecoveryOB();
        initTableData();
        ClientUtil.enableDisable(panSalaryRecoveryList,false);
    }
    
    private void initTableData(){
        tblSalaryRecoveryList.setModel(observable.getTblSalaryRecoveryList());
    }
    
/* Auto Generated Method - update()
   This method called by Observable. It updates the UI with
   Observable's data. If needed add/Remove RadioButtons
   method need to be added.*/
    public void update(Observable observed, Object arg) {
        
    }
    
/* Auto Generated Method - updateOBFields()
   This method called by Save option of UI.
   It updates the OB with UI data.*/
    public void updateOBFields() {
        
    }
    
/* Auto Generated Method - setMandatoryHashMap()
 
ADD: implements com.see.truetransact.uimandatory.UIMandatoryField
 
   This method list out all the Input Fields available in the UI.
   It needs a class level HashMap variable mandatoryMap. */
    public void setMandatoryHashMap() {
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        panMarkSalaryRecovery = new com.see.truetransact.uicomponent.CPanel();
        panSalaryRecoveryClockNo = new com.see.truetransact.uicomponent.CPanel();
        lblCalcIntUpto = new com.see.truetransact.uicomponent.CLabel();
        panClockNo = new com.see.truetransact.uicomponent.CPanel();
        txtClockNo = new com.see.truetransact.uicomponent.CTextField();
        btnClockNo = new com.see.truetransact.uicomponent.CButton();
        btnClear = new com.see.truetransact.uicomponent.CButton();
        lblCustName = new com.see.truetransact.uicomponent.CLabel();
        panSalaryRecoveryList = new com.see.truetransact.uicomponent.CPanel();
        srpSalaryRecoveryList = new com.see.truetransact.uicomponent.CScrollPane();
        tblSalaryRecoveryList = new com.see.truetransact.uicomponent.CTable();
        btnUpdate = new com.see.truetransact.uicomponent.CButton();
        panSelectAll = new com.see.truetransact.uicomponent.CPanel();
        lblSelectAll = new com.see.truetransact.uicomponent.CLabel();
        chkSelectAll = new com.see.truetransact.uicomponent.CCheckBox();
        panStatus = new com.see.truetransact.uicomponent.CPanel();
        lblSpace1 = new com.see.truetransact.uicomponent.CLabel();
        lblStatus = new com.see.truetransact.uicomponent.CLabel();
        lblMsg = new com.see.truetransact.uicomponent.CLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setMaximumSize(new java.awt.Dimension(860, 620));
        setMinimumSize(new java.awt.Dimension(860, 620));
        setPreferredSize(new java.awt.Dimension(860, 620));
        panMarkSalaryRecovery.setLayout(new java.awt.GridBagLayout());

        panMarkSalaryRecovery.setBorder(new javax.swing.border.EtchedBorder());
        panMarkSalaryRecovery.setMaximumSize(new java.awt.Dimension(800, 450));
        panMarkSalaryRecovery.setMinimumSize(new java.awt.Dimension(800, 450));
        panMarkSalaryRecovery.setPreferredSize(new java.awt.Dimension(800, 450));
        panSalaryRecoveryClockNo.setLayout(new java.awt.GridBagLayout());

        panSalaryRecoveryClockNo.setBorder(new javax.swing.border.TitledBorder(""));
        panSalaryRecoveryClockNo.setMinimumSize(new java.awt.Dimension(830, 60));
        panSalaryRecoveryClockNo.setPreferredSize(new java.awt.Dimension(830, 60));
        lblCalcIntUpto.setText("Clock Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 50, 1, 2);
        panSalaryRecoveryClockNo.add(lblCalcIntUpto, gridBagConstraints);

        panClockNo.setLayout(new java.awt.GridBagLayout());

        txtClockNo.setAllowAll(true);
        txtClockNo.setMinimumSize(new java.awt.Dimension(100, 21));
        txtClockNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtClockNoFocusLost(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 0);
        panClockNo.add(txtClockNo, gridBagConstraints);

        btnClockNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SELECT.gif")));
        btnClockNo.setPreferredSize(new java.awt.Dimension(21, 21));
        btnClockNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClockNoActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panClockNo.add(btnClockNo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panSalaryRecoveryClockNo.add(panClockNo, gridBagConstraints);

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CANCEL.gif")));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 110, 4, 4);
        panSalaryRecoveryClockNo.add(btnClear, gridBagConstraints);

        lblCustName.setForeground(new java.awt.Color(0, 51, 255));
        lblCustName.setFont(new java.awt.Font("MS Sans Serif", 1, 13));
        lblCustName.setMaximumSize(new java.awt.Dimension(300, 13));
        lblCustName.setMinimumSize(new java.awt.Dimension(300, 13));
        lblCustName.setPreferredSize(new java.awt.Dimension(300, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panSalaryRecoveryClockNo.add(lblCustName, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 6, 1);
        panMarkSalaryRecovery.add(panSalaryRecoveryClockNo, gridBagConstraints);

        panSalaryRecoveryList.setLayout(new java.awt.GridBagLayout());

        panSalaryRecoveryList.setBorder(new javax.swing.border.TitledBorder("Salary Recovery List"));
        panSalaryRecoveryList.setMinimumSize(new java.awt.Dimension(830, 380));
        panSalaryRecoveryList.setPreferredSize(new java.awt.Dimension(830, 380));
        srpSalaryRecoveryList.setMinimumSize(new java.awt.Dimension(810, 335));
        srpSalaryRecoveryList.setPreferredSize(new java.awt.Dimension(810, 335));
        tblSalaryRecoveryList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Act Number", "Prod Type", "Prod Id", "Salary Recovery Yes/ No"
            }
        ));
        tblSalaryRecoveryList.setPreferredScrollableViewportSize(new java.awt.Dimension(806, 331));
        tblSalaryRecoveryList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSalaryRecoveryListMouseClicked(evt);
            }
        });

        srpSalaryRecoveryList.setViewportView(tblSalaryRecoveryList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 0);
        panSalaryRecoveryList.add(srpSalaryRecoveryList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 1, 1);
        panMarkSalaryRecovery.add(panSalaryRecoveryList, gridBagConstraints);

        btnUpdate.setForeground(new java.awt.Color(255, 0, 51));
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_AUTHORIZE.gif")));
        btnUpdate.setText("Update");
        btnUpdate.setFont(new java.awt.Font("MS Sans Serif", 1, 13));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(15, 4, 4, 4);
        panMarkSalaryRecovery.add(btnUpdate, gridBagConstraints);

        panSelectAll.setLayout(new java.awt.GridBagLayout());

        lblSelectAll.setText("Select All");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 19, 5, 0);
        panSelectAll.add(lblSelectAll, gridBagConstraints);

        chkSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSelectAllActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 4, 5, 1);
        panSelectAll.add(chkSelectAll, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 70);
        panMarkSalaryRecovery.add(panSelectAll, gridBagConstraints);

        getContentPane().add(panMarkSalaryRecovery, java.awt.BorderLayout.CENTER);

        panStatus.setLayout(new java.awt.GridBagLayout());

        lblSpace1.setText(" Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblSpace1, gridBagConstraints);

        lblStatus.setBorder(new javax.swing.border.EtchedBorder());
        lblStatus.setForeground(new java.awt.Color(0, 0, 255));
        lblStatus.setText("                      ");
        lblStatus.setFont(new java.awt.Font("MS Sans Serif", 1, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblStatus, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblMsg, gridBagConstraints);

        getContentPane().add(panStatus, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if(tblSalaryRecoveryList.getRowCount()>0){
            String actNum= "";
            String prodType= "";
            String recoveryYesNo= "";
            for(int i=0; i<tblSalaryRecoveryList.getRowCount();i++){
                HashMap updateMap = new HashMap();
                recoveryYesNo = CommonUtil.convertObjToStr(tblSalaryRecoveryList.getValueAt(i,4));
                prodType = CommonUtil.convertObjToStr(tblSalaryRecoveryList.getValueAt(i,1));
                actNum = CommonUtil.convertObjToStr(tblSalaryRecoveryList.getValueAt(i,0));
                if(recoveryYesNo.equals("true")){
                    updateMap.put("SALARY_RECOVERY","Y");
                }else{
                    updateMap.put("SALARY_RECOVERY","N");
                }
                if (!prodType.equals("MDS")){
                    if (actNum.indexOf("_")!=-1) {
                        actNum = actNum.substring(0,actNum.indexOf("_"));
                    }
                    updateMap.put("ACCT_NUM",actNum);
                }else{
                    String chittalNo = "";
                    String subNo = "";
                    if (actNum.indexOf("_")!=-1) {
                        chittalNo = actNum.substring(0,actNum.indexOf("_"));
                        subNo = actNum.substring(actNum.indexOf("_")+1, actNum.length());
                        updateMap.put("CHITTAL_NO",chittalNo);
                        updateMap.put("SUB_NO",CommonUtil.convertObjToInt(subNo));
                    }
                }
               ClientUtil.execute("updateSalaryRecovery"+prodType, updateMap);
            }
            btnClearActionPerformed(null);
            lblStatus.setText("UPDATED");
            btnUpdate.setEnabled(false);
        }else{
            ClientUtil.showMessageWindow("No Record in this Table !!!... ");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtClockNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtClockNoFocusLost
        // TODO add your handling code here:
        if(txtClockNo.getText().length()>0){
            HashMap whereMap = new HashMap();
            whereMap.put("CLOCK_NO",txtClockNo.getText());
            List lst=ClientUtil.executeQuery("getSelectClockNumber",whereMap);
            if(lst !=null && lst.size()>0){
                viewType = "CLOCK_NO";
                whereMap=(HashMap)lst.get(0);
                fillData(whereMap);
                lst=null;
                whereMap=null;
            }else{
                ClientUtil.displayAlert("Invalid Clock No !!! ");                
                btnClearActionPerformed(null);
            }
        } 
    }//GEN-LAST:event_txtClockNoFocusLost

    private void chkSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSelectAllActionPerformed
        // TODO add your handling code here:
        boolean flag;
        if(chkSelectAll.isSelected() == true)
            flag = true;
        else
            flag = false;
        for(int i=0;i <tblSalaryRecoveryList.getRowCount();i++){
            tblSalaryRecoveryList.setValueAt(new Boolean(flag),i,4);
        }
    }//GEN-LAST:event_chkSelectAllActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        observable.resetForm();
        initTableData();
        ClientUtil.clearAll(this);
        lblCustName.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnClockNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClockNoActionPerformed
        // TODO add your handling code here:
        callView("CLOCK_NO");
    }//GEN-LAST:event_btnClockNoActionPerformed
    private void callView(String currField) {
        viewType = currField;
        HashMap viewMap = new HashMap();
        if(currField == "CLOCK_NO"){
            viewMap = new HashMap();
            HashMap whereMap = new HashMap();
            viewMap.put(CommonConstants.MAP_NAME, "getSelectClockNumber");
            viewMap.put(CommonConstants.MAP_WHERE, whereMap);
        }
        new ViewAll(this, viewMap).show();
    }
    
    public void fillData(Object obj) {
        HashMap hash = (HashMap) obj;
        if (viewType != null) {
            if(viewType.equals("CLOCK_NO")){
                txtClockNo.setText(CommonUtil.convertObjToStr(hash.get("CLOCK_NO")));
                lblCustName.setText(CommonUtil.convertObjToStr(hash.get("NAME")));
                observable.insertTableData(hash);
                tblSalaryRecoveryList.setModel(observable.getTblSalaryRecoveryList());
                btnUpdate.setEnabled(true);
                lblStatus.setText("                      ");
            }
        }
    }
    private void tblSalaryRecoveryListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSalaryRecoveryListMouseClicked
        if(tblSalaryRecoveryList.getRowCount()>0){
            String st=CommonUtil.convertObjToStr(tblSalaryRecoveryList.getValueAt(tblSalaryRecoveryList.getSelectedRow(),4));
            if(st.equals("true")){
                tblSalaryRecoveryList.setValueAt(new Boolean(false),tblSalaryRecoveryList.getSelectedRow(),4);
            }else{
                tblSalaryRecoveryList.setValueAt(new Boolean(true),tblSalaryRecoveryList.getSelectedRow(),4);
            }
        }
    }//GEN-LAST:event_tblSalaryRecoveryListMouseClicked
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnClear;
    private com.see.truetransact.uicomponent.CButton btnClockNo;
    private com.see.truetransact.uicomponent.CButton btnUpdate;
    private com.see.truetransact.uicomponent.CCheckBox chkSelectAll;
    private com.see.truetransact.uicomponent.CLabel lblCalcIntUpto;
    private com.see.truetransact.uicomponent.CLabel lblCustName;
    private com.see.truetransact.uicomponent.CLabel lblMsg;
    private com.see.truetransact.uicomponent.CLabel lblSelectAll;
    private com.see.truetransact.uicomponent.CLabel lblSpace1;
    private com.see.truetransact.uicomponent.CLabel lblStatus;
    private com.see.truetransact.uicomponent.CPanel panClockNo;
    private com.see.truetransact.uicomponent.CPanel panMarkSalaryRecovery;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecoveryClockNo;
    private com.see.truetransact.uicomponent.CPanel panSalaryRecoveryList;
    private com.see.truetransact.uicomponent.CPanel panSelectAll;
    private com.see.truetransact.uicomponent.CPanel panStatus;
    private com.see.truetransact.uicomponent.CScrollPane srpSalaryRecoveryList;
    private com.see.truetransact.uicomponent.CTable tblSalaryRecoveryList;
    private com.see.truetransact.uicomponent.CTextField txtClockNo;
    // End of variables declaration//GEN-END:variables
    
    public static void main(String[] args) {
        MarkSalaryRecoveryUI fad = new MarkSalaryRecoveryUI();
        javax.swing.JFrame j = new javax.swing.JFrame();
        j.getContentPane().add(fad);
        j.show();
        fad.show();
    }
}
