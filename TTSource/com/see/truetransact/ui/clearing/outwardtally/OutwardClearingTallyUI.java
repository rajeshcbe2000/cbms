/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.
 * 
 *
 * OutwardClearingTallyUI.java
 *
 * Created on March 23, 2004, 2:43 PM
 */

/* Balance Details < yet to complete >
 * In As Per System Inward Returns fields is incomplete 
 * This Inward Returns is yet to take into account to 
 * find the difference calculation
 */
package com.see.truetransact.ui.clearing.outwardtally;

import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.uimandatory.UIMandatoryField;
import com.see.truetransact.uicomponent.CInternalFrame;
import com.see.truetransact.uicomponent.COptionPane;
import com.see.truetransact.uivalidation.NumericValidation;
import com.see.truetransact.uivalidation.CurrencyValidation;
import com.see.truetransact.clientutil.ClientConstants;
import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.uimandatory.MandatoryCheck;
import com.see.truetransact.clientutil.CMandatoryDialog;
import com.see.truetransact.ui.common.viewall.ViewAll;
import com.see.truetransact.clientproxy.ProxyParameters;

import java.util.Date;
import java.util.HashMap;
import java.util.Observable;
import com.see.truetransact.clientutil.EnhancedTableModel;
import java.util.ArrayList;

/**
 *
 * @author  Prasath.T
 */
public class OutwardClearingTallyUI extends com.see.truetransact.uicomponent.CInternalFrame implements java.util.Observer,UIMandatoryField{
    // Variables declaration - do not modify
    private HashMap mandatoryMap;
    private OutwardClearingTallyOB observable;
    private int EDIT=0, DELETE=1, VIEW =3;
    private int viewType=-1;
    private String mode = "";
    private java.util.ResourceBundle resourceBundle = java.util.ResourceBundle.getBundle("com.see.truetransact.ui.clearing.outwardtally.OutwardClearingTallyRB", ProxyParameters.LANGUAGE);
    private EnhancedTableModel tbmDifference;
    private EnhancedTableModel tbmInstDet;
    private Date currDt = null;
    // End of variables declaration
    
    /** Creates new form BeanForm */
    public OutwardClearingTallyUI() {
        currDt = ClientUtil.getCurrentDate();
        initComponents();
        initStartUp();
    }
    /* methods invoked at the time of new form */
    private void initStartUp() {
        setFieldNames();
        internationalize();
        setObservable();
        initComponentData();
        setTableModel();
        setMaximumLength();
        ClientUtil.enableDisable(this, false);
        setButtonEnableDisable();
        setMandatoryHashMap();
        setHelpMessage();
        new MandatoryCheck().putMandatoryMarks(getClass().getName(),panScheduleNo);
        observable.resetForm();
    }
    private void setObservable(){
        /* Implementing Singleton pattern */
        observable = OutwardClearingTallyOB.getInstance();
        observable.addObserver(this);
    }
    
    //Setting model for tables.
    private void setTableModel() {
        tbmDifference = observable.getTbmDifference();
        tbmInstDet  = observable.getTbmInstDet();
        tblDifference.setModel(tbmDifference);
        tblInstDet.setModel(tbmInstDet);
    }
    
    /** To populate Comboboxes */
    private void initComponentData() {
        cboClearingType.setModel(observable.getCbmClearingType());
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panOutwardClearingTally = new com.see.truetransact.uicomponent.CPanel();
        panScheduleNo = new com.see.truetransact.uicomponent.CPanel();
        lblClearingType = new com.see.truetransact.uicomponent.CLabel();
        cboClearingType = new com.see.truetransact.uicomponent.CComboBox();
        lblScheduleNo = new com.see.truetransact.uicomponent.CLabel();
        lblCurrentClearingDate = new com.see.truetransact.uicomponent.CLabel();
        lblClearingDate = new com.see.truetransact.uicomponent.CLabel();
        lblClosingDate = new com.see.truetransact.uicomponent.CLabel();
        txtScheduleNo = new com.see.truetransact.uicomponent.CTextField();
        tdtClearingDate = new com.see.truetransact.uicomponent.CDateField();
        tdtClosingDate = new com.see.truetransact.uicomponent.CDateField();
        lblDisplayCurrentClearingDate = new com.see.truetransact.uicomponent.CLabel();
        panServiceBranch = new com.see.truetransact.uicomponent.CPanel();
        lblSBNumberofInstruments = new com.see.truetransact.uicomponent.CLabel();
        lblSBAmount = new com.see.truetransact.uicomponent.CLabel();
        txtSBNumberofInstruments = new com.see.truetransact.uicomponent.CTextField();
        txtSBAmount = new com.see.truetransact.uicomponent.CTextField();
        panBIDBtns = new com.see.truetransact.uicomponent.CPanel();
        btnSaveBID = new com.see.truetransact.uicomponent.CButton();
        btnClearBID = new com.see.truetransact.uicomponent.CButton();
        srpInstrumentDet = new com.see.truetransact.uicomponent.CScrollPane();
        tblInstDet = new com.see.truetransact.uicomponent.CTable();
        srpDifference = new com.see.truetransact.uicomponent.CScrollPane();
        tblDifference = new com.see.truetransact.uicomponent.CTable();
        btnClsSchedule = new com.see.truetransact.uicomponent.CButton();
        tbrOutwardClearingTally = new com.see.truetransact.uicomponent.CToolBar();
        btnView = new com.see.truetransact.uicomponent.CButton();
        lbSpace3 = new com.see.truetransact.uicomponent.CLabel();
        btnNew = new com.see.truetransact.uicomponent.CButton();
        lblSpace24 = new com.see.truetransact.uicomponent.CLabel();
        btnEdit = new com.see.truetransact.uicomponent.CButton();
        lblSpace25 = new com.see.truetransact.uicomponent.CLabel();
        btnDelete = new com.see.truetransact.uicomponent.CButton();
        lbSpace2 = new com.see.truetransact.uicomponent.CLabel();
        btnSave = new com.see.truetransact.uicomponent.CButton();
        lblSpace26 = new com.see.truetransact.uicomponent.CLabel();
        btnCancel = new com.see.truetransact.uicomponent.CButton();
        lblSpace3 = new com.see.truetransact.uicomponent.CLabel();
        btnPrint = new com.see.truetransact.uicomponent.CButton();
        lblSpace27 = new com.see.truetransact.uicomponent.CLabel();
        btnClose = new com.see.truetransact.uicomponent.CButton();
        panStatus = new com.see.truetransact.uicomponent.CPanel();
        lblSpace1 = new com.see.truetransact.uicomponent.CLabel();
        lblStatus = new com.see.truetransact.uicomponent.CLabel();
        lblMsg = new com.see.truetransact.uicomponent.CLabel();
        mbrOutwardClearingTally = new com.see.truetransact.uicomponent.CMenuBar();
        mnuProcess = new javax.swing.JMenu();
        mitNew = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        sptView = new javax.swing.JSeparator();
        mitSave = new javax.swing.JMenuItem();
        mitCancel = new javax.swing.JMenuItem();
        sptCancel = new javax.swing.JSeparator();
        mitClose = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Outward Clearing Tally");
        setMinimumSize(new java.awt.Dimension(600, 500));
        setPreferredSize(new java.awt.Dimension(600, 500));
        getContentPane().setLayout(new java.awt.BorderLayout(10, 6));

        panOutwardClearingTally.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panOutwardClearingTally.setPreferredSize(new java.awt.Dimension(554, 311));
        panOutwardClearingTally.setLayout(new java.awt.GridBagLayout());

        panScheduleNo.setLayout(new java.awt.GridBagLayout());

        lblClearingType.setText("ClearingType");
        lblClearingType.setName("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panScheduleNo.add(lblClearingType, gridBagConstraints);

        cboClearingType.setMinimumSize(new java.awt.Dimension(100, 21));
        cboClearingType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboClearingTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panScheduleNo.add(cboClearingType, gridBagConstraints);

        lblScheduleNo.setText("Schedule Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panScheduleNo.add(lblScheduleNo, gridBagConstraints);

        lblCurrentClearingDate.setText("Current Clearing Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panScheduleNo.add(lblCurrentClearingDate, gridBagConstraints);

        lblClearingDate.setText("Clearing Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panScheduleNo.add(lblClearingDate, gridBagConstraints);

        lblClosingDate.setText("Closing Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panScheduleNo.add(lblClosingDate, gridBagConstraints);

        txtScheduleNo.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panScheduleNo.add(txtScheduleNo, gridBagConstraints);

        tdtClearingDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtClearingDate.setPreferredSize(new java.awt.Dimension(100, 21));
        tdtClearingDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tdtClearingDateFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panScheduleNo.add(tdtClearingDate, gridBagConstraints);

        tdtClosingDate.setMinimumSize(new java.awt.Dimension(100, 21));
        tdtClosingDate.setPreferredSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panScheduleNo.add(tdtClosingDate, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panScheduleNo.add(lblDisplayCurrentClearingDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 8);
        panOutwardClearingTally.add(panScheduleNo, gridBagConstraints);

        panServiceBranch.setBorder(javax.swing.BorderFactory.createTitledBorder("Branch Instruments' Details"));
        panServiceBranch.setLayout(new java.awt.GridBagLayout());

        lblSBNumberofInstruments.setText("Number of Instruments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panServiceBranch.add(lblSBNumberofInstruments, gridBagConstraints);

        lblSBAmount.setText("Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panServiceBranch.add(lblSBAmount, gridBagConstraints);

        txtSBNumberofInstruments.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panServiceBranch.add(txtSBNumberofInstruments, gridBagConstraints);

        txtSBAmount.setMinimumSize(new java.awt.Dimension(100, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panServiceBranch.add(txtSBAmount, gridBagConstraints);

        panBIDBtns.setLayout(new java.awt.GridBagLayout());

        btnSaveBID.setText("Save to Inst Details");
        btnSaveBID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveBIDActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panBIDBtns.add(btnSaveBID, gridBagConstraints);

        btnClearBID.setText("Clear");
        btnClearBID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearBIDActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panBIDBtns.add(btnClearBID, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        panServiceBranch.add(panBIDBtns, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panOutwardClearingTally.add(panServiceBranch, gridBagConstraints);

        srpInstrumentDet.setBorder(javax.swing.BorderFactory.createTitledBorder("Instruments  Detail"));
        srpInstrumentDet.setMinimumSize(new java.awt.Dimension(550, 100));
        srpInstrumentDet.setPreferredSize(new java.awt.Dimension(300, 100));

        tblInstDet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblInstDet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblInstDetMousePressed(evt);
            }
        });
        srpInstrumentDet.setViewportView(tblInstDet);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panOutwardClearingTally.add(srpInstrumentDet, gridBagConstraints);

        srpDifference.setBorder(javax.swing.BorderFactory.createTitledBorder("Difference"));
        srpDifference.setMinimumSize(new java.awt.Dimension(237, 110));
        srpDifference.setPreferredSize(new java.awt.Dimension(237, 110));

        tblDifference.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        srpDifference.setViewportView(tblDifference);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panOutwardClearingTally.add(srpDifference, gridBagConstraints);

        btnClsSchedule.setText("Close Schedule");
        btnClsSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClsScheduleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panOutwardClearingTally.add(btnClsSchedule, gridBagConstraints);

        getContentPane().add(panOutwardClearingTally, java.awt.BorderLayout.CENTER);

        btnView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_Summary.gif"))); // NOI18N
        btnView.setToolTipText("Enquiry");
        btnView.setMinimumSize(new java.awt.Dimension(21, 21));
        btnView.setPreferredSize(new java.awt.Dimension(21, 21));
        btnView.setEnabled(false);
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        tbrOutwardClearingTally.add(btnView);

        lbSpace3.setText("     ");
        tbrOutwardClearingTally.add(lbSpace3);

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_NEW.gif"))); // NOI18N
        btnNew.setToolTipText("New");
        btnNew.setEnabled(false);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        tbrOutwardClearingTally.add(btnNew);

        lblSpace24.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace24.setText("     ");
        lblSpace24.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace24.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace24.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrOutwardClearingTally.add(lblSpace24);

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_EDIT.gif"))); // NOI18N
        btnEdit.setToolTipText("Edit");
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        tbrOutwardClearingTally.add(btnEdit);

        lblSpace25.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace25.setText("     ");
        lblSpace25.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace25.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace25.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrOutwardClearingTally.add(lblSpace25);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_DELETE.gif"))); // NOI18N
        btnDelete.setToolTipText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        tbrOutwardClearingTally.add(btnDelete);

        lbSpace2.setText("     ");
        tbrOutwardClearingTally.add(lbSpace2);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_SAVE.gif"))); // NOI18N
        btnSave.setToolTipText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        tbrOutwardClearingTally.add(btnSave);

        lblSpace26.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace26.setText("     ");
        lblSpace26.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace26.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace26.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrOutwardClearingTally.add(lblSpace26);

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CANCEL.gif"))); // NOI18N
        btnCancel.setToolTipText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        tbrOutwardClearingTally.add(btnCancel);

        lblSpace3.setText("     ");
        tbrOutwardClearingTally.add(lblSpace3);

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_PRINT.gif"))); // NOI18N
        btnPrint.setToolTipText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        tbrOutwardClearingTally.add(btnPrint);

        lblSpace27.setForeground(new java.awt.Color(240, 240, 240));
        lblSpace27.setText("     ");
        lblSpace27.setMaximumSize(new java.awt.Dimension(3, 18));
        lblSpace27.setMinimumSize(new java.awt.Dimension(3, 18));
        lblSpace27.setPreferredSize(new java.awt.Dimension(3, 18));
        tbrOutwardClearingTally.add(lblSpace27);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/see/truetransact/ui/images/TT_CLOSE.gif"))); // NOI18N
        btnClose.setToolTipText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        tbrOutwardClearingTally.add(btnClose);

        getContentPane().add(tbrOutwardClearingTally, java.awt.BorderLayout.NORTH);

        panStatus.setLayout(new java.awt.GridBagLayout());

        lblSpace1.setText(" Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblSpace1, gridBagConstraints);

        lblStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblStatus.setText("                      ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblStatus, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panStatus.add(lblMsg, gridBagConstraints);

        getContentPane().add(panStatus, java.awt.BorderLayout.SOUTH);

        mnuProcess.setText("Process");

        mitNew.setText("New");
        mitNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitNewActionPerformed(evt);
            }
        });
        mnuProcess.add(mitNew);

        mitEdit.setText("Edit");
        mitEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitEditActionPerformed(evt);
            }
        });
        mnuProcess.add(mitEdit);

        mitDelete.setText("Delete");
        mitDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitDeleteActionPerformed(evt);
            }
        });
        mnuProcess.add(mitDelete);
        mnuProcess.add(sptView);

        mitSave.setText("Save");
        mitSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitSaveActionPerformed(evt);
            }
        });
        mnuProcess.add(mitSave);

        mitCancel.setText("Cancel");
        mitCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitCancelActionPerformed(evt);
            }
        });
        mnuProcess.add(mitCancel);
        mnuProcess.add(sptCancel);

        mitClose.setText("Close");
        mitClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitCloseActionPerformed(evt);
            }
        });
        mnuProcess.add(mitClose);

        mbrOutwardClearingTally.add(mnuProcess);

        setJMenuBar(mbrOutwardClearingTally);
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_VIEW);
        observable.setStatus();
        lblStatus.setText(observable.getLblStatus());
        popUp(VIEW);
        btnCheck();
    }//GEN-LAST:event_btnViewActionPerformed

    private void tdtClearingDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tdtClearingDateFocusLost
        // TODO add your handling code here:
        String applDt = DateUtil.getStringDate((Date) currDt.clone());
        String selDt = tdtClearingDate.getDateValue();
        String dt[] = selDt.split("/");
        if (dt.length==3) {
            selDt = dt[1]+"/"+dt[0]+"/"+dt[2];
        }
        dt = applDt.split("/");
        if (dt.length==3) {
            applDt = dt[1]+"/"+dt[0]+"/"+dt[2];
        }
        long diff=0;
        try {
            diff = DateUtil.dateDiff(new Date(applDt),new Date(selDt));
        }catch(Exception ioe) {}
        if(diff<0) {
            ClientUtil.showAlertWindow("Cannot select previous Date...");
            tdtClearingDate.setDateValue(DateUtil.getStringDate((Date) currDt.clone()));
            tdtClearingDate.requestFocus();
        }
    }//GEN-LAST:event_tdtClearingDateFocusLost

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
         HashMap reportParamMap = new HashMap();
 com.see.truetransact.clientutil.ttrintegration.LinkReport.getReports(getScreenID(), reportParamMap);
    }//GEN-LAST:event_btnPrintActionPerformed
    private void btnClsScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClsScheduleActionPerformed
        String scheduleNo = CommonUtil.convertObjToStr(observable.getTxtScheduleNo());
        System.out.println("SCHEDULE_NO : " + scheduleNo);
        tdtClearingDate.setEnabled(false);
        cboClearingType.setEnabled(false);
        
        if (!scheduleNo.equals("")) {
            Date fromDt=new Date();
            Date toDt =new Date();
            Date curDt =new Date();
            fromDt=DateUtil.getDateMMDDYYYY(tdtClearingDate.getDateValue());
            toDt=DateUtil.getDateMMDDYYYY(tdtClosingDate.getDateValue());
            curDt=(Date) currDt.clone();
            System.out.println(" DateUtil.dateDiff(curDt,fromDt)---"+ DateUtil.dateDiff(curDt,fromDt));
            if(fromDt!=null && toDt!=null){
//            System.out.println("DateUtil.dateDiff(toDt,fromDt)----"+DateUtil.dateDiff(toDt,fromDt));
            if ( DateUtil.dateDiff(toDt,fromDt)<=0) {
                if (DateUtil.dateDiff(curDt,toDt)<=0) {
                    HashMap map = new HashMap();
                    map.put("SCHEDULE_NO", scheduleNo);
                    map.put("CLEARING_TYPE", cboClearingType.getSelectedItem());
                    map.put("BRANCH_ID", getSelectedBranchID());

                    java.util.List tallyCount = ClientUtil.executeQuery("checkOutwardTallyCount", map);

                    if (CommonUtil.convertObjToInt(tallyCount.get(0)) > 0) {
                        ClientUtil.showMessageWindow(resourceBundle.getString("checkPending"));
                    } else {
                        ArrayList arrayList=new ArrayList();
                        arrayList= tbmDifference.getDataArrayList();
                        ArrayList lst=new ArrayList();
                        lst=(ArrayList)arrayList.get(0);
                        if(CommonUtil.convertObjToDouble(lst.get(1)).doubleValue()!=0.0 ||CommonUtil.convertObjToDouble(lst.get(2)).doubleValue()!=0.0){
                            System.out.println("TablearrayList ###");
                            double shortExcessAmt=CommonUtil.convertObjToDouble(lst.get(2)).doubleValue();
                            if(shortExcessAmt<0){
                                observable.setExcessAmt(shortExcessAmt);
                            }else{
                        //                            shortExcessAmt=shortExcessAmt*-1;
                             observable.setShortAmt(shortExcessAmt);
                    }
                    //                        observable.setMode("CLOSE");
                    //                        isError=false;//true
                        ClientUtil.showMessageWindow("Batch not Tallied");
                    }
                        
                        int yesno = COptionPane.showConfirmDialog(this, resourceBundle.getString("WarningForCloser"), "Schedule", COptionPane.YES_NO_OPTION);
                        if (yesno == COptionPane.YES_OPTION) {
                            mode = "CLOSE";
                            btnSaveActionPerformed(evt);
                        }
                    }
                } else {
                    ClientUtil.showMessageWindow(resourceBundle.getString("WarningFutureDate"));
                }
            } else {
                ClientUtil.showMessageWindow(resourceBundle.getString("WarningForDate"));
            }
        } else {
               ClientUtil.showMessageWindow("Please Enter the Close Date");
//               ClientUtil.showMessageWindow(resourceBundle.getString("WarningTally"));
        } 
        }
    }//GEN-LAST:event_btnClsScheduleActionPerformed
    private void btnClearBIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearBIDActionPerformed
        ClientUtil.enableDisable(this.panServiceBranch, false);
        enableDisableBtnBID(false);
        resetPanBID();
    }//GEN-LAST:event_btnClearBIDActionPerformed
    private void tblInstDetMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInstDetMousePressed
        if (observable.getActionType() != ClientConstants.ACTIONTYPE_DELETE || observable.getActionType() != ClientConstants.ACTIONTYPE_VIEW){
            int row = tblInstDet.getSelectedRow();

            if(row == -1) {
                return;
            }
            observable.setTdtClosingDate(tdtClosingDate.getDateValue());
            observable.populateBIDFromTable(row);
            ClientUtil.enableDisable(panServiceBranch,true);
            enableDisableBtnBID(true);
        }
        // Add your handling code here:
    }//GEN-LAST:event_tblInstDetMousePressed

    private void btnSaveBIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveBIDActionPerformed
        String mandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(),panServiceBranch);
        if(mandatoryMessage.length()>0){
            displayAlert(mandatoryMessage);
            return;
        }
        updateOBFields();
        if(!observable.saveSBDetails2Table(tblInstDet.getSelectedRow())){
            new com.see.truetransact.uicomponent.COptionPane().showMessageDialog(this,"Problem in Saving Data.");
        }
        ClientUtil.enableDisable(this.panServiceBranch, false);
        enableDisableBtnBID(false);
        resetPanBID();
        // Add your handling code here:
    }//GEN-LAST:event_btnSaveBIDActionPerformed
    private void btnCheck(){
         btnCancel.setEnabled(true);
         btnSave.setEnabled(false);
         btnNew.setEnabled(false);
         btnDelete.setEnabled(false);
         btnEdit.setEnabled(false);
     }
    // To update the ComboBox clearingType in OB
    private void updateOBClearingType(){
        observable.setCboClearingType((String) cboClearingType.getSelectedItem());
    }
    /* To set the selected clearingType */
    private void updateClearingType(){
        cboClearingType.setSelectedItem(observable.getCboClearingType());
        lblDisplayCurrentClearingDate.setText(observable.getLblCurrentClearingDateDisplay());
    }
    private void cboClearingTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboClearingTypeActionPerformed
        // Add your handling code here:
        updateOBClearingType();
        if( observable.getCboClearingType().length() > 0){
            //When the selected ClearingType is not empty string
            observable.getCurrentClearingDateForClearingType();
            //            updateClearingType();
        }else if(observable.getCboClearingType().length() == 0){
            observable.setLblCurrentClearingDateDisplay("");
        }
        updateClearingType();
    }//GEN-LAST:event_cboClearingTypeActionPerformed
    
    private void mitCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitCloseActionPerformed
        // Add your handling code here:
        btnCloseActionPerformed(evt);
    }//GEN-LAST:event_mitCloseActionPerformed
    
    private void mitCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitCancelActionPerformed
        // Add your handling code here:
        btnCancelActionPerformed(evt);
    }//GEN-LAST:event_mitCancelActionPerformed
    
    private void mitSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitSaveActionPerformed
        // Add your handling code here:
        btnSaveActionPerformed(evt);
    }//GEN-LAST:event_mitSaveActionPerformed
    
    private void mitDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitDeleteActionPerformed
        // Add your handling code here:
        btnDeleteActionPerformed(evt);
    }//GEN-LAST:event_mitDeleteActionPerformed
    
    private void mitEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitEditActionPerformed
        // Add your handling code here:
        btnEditActionPerformed(evt);
    }//GEN-LAST:event_mitEditActionPerformed
    
    private void mitNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitNewActionPerformed
        // Add your handling code here:
        btnNewActionPerformed(evt);
    }//GEN-LAST:event_mitNewActionPerformed
    /* To  enable disable the Service Branch Details */
    private void setServiceBranchDetailsEnableDisable(boolean flag){
        txtSBNumberofInstruments.setEnabled(flag);
        txtSBAmount.setEnabled(flag);
    }
    
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // Add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_CANCEL);
        observable.resetForm();
        observable.setStatus();
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // Add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_CANCEL);
        observable.resetForm();
        ClientUtil.enableDisable(this,false);
        setButtonEnableDisable();
        observable.setStatus();
        mode = "";
    }//GEN-LAST:event_btnCancelActionPerformed
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // Add your handling code here:
        updateOBFields();
        String checkingForNull = new String();
        String warningMessage = "";
        String mandatoryMessage = new MandatoryCheck().checkMandatory(getClass().getName(),panScheduleNo);
        if(observable.getActionType() == ClientConstants.ACTIONTYPE_NEW){
            // At the time of NEW
            checkingForNull = observable.checkForClearingTypeAndClearingDate(cboClearingType.getSelectedIndex(),
            tdtClearingDate.getDateValue());
            if( checkingForNull!= null){
                // If there is a duplication in Clearing Type and Clearing Date
                warningMessage += observable.checkForClearingTypeAndClearingDate(cboClearingType.getSelectedIndex(),
                tdtClearingDate.getDateValue());
            }
            checkingForNull = observable.checkForDate();
            if(checkingForNull != null){
                // If Closing Date is greater than Clearing Date
                warningMessage += observable.checkForDate();
                
            }
        }else if(observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT){
            checkingForNull = observable.checkForDate();
            if(checkingForNull != null){
                // If Closing Date is greater than Clearing Date
                warningMessage = observable.checkForDate();
            }
        }
        checkingForNull = null;
        if(warningMessage != null){
            mandatoryMessage += warningMessage;
        }
        if(mandatoryMessage.length()>0){
            displayAlert(mandatoryMessage);
        }else{
            savePerformed();
        }
    }//GEN-LAST:event_btnSaveActionPerformed
    /* To display an alert message if any of the mandatory fields is not inputed */
    private void displayAlert(String message){
        CMandatoryDialog cmd = new CMandatoryDialog();
        cmd.setMessage(message);
        cmd.setModal(true);
        cmd.show();
    }
    // action performed when save button is pressed
    private void savePerformed() {
        if(!mode.equals("CLOSE")){
        tdtClosingDate.setDateValue("");
        }
        updateOBFields();
        observable.doAction(mode);
        ClientUtil.enableDisable(this, false);
        setButtonEnableDisable();
        observable.resetForm();
        observable.setResultStatus();
        mode = "";
    }
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_DELETE);
        popUp(DELETE);
        ClientUtil.enableDisable(this,false);
    }//GEN-LAST:event_btnDeleteActionPerformed
    /* To set enable disable the CboClearingType */
    private void setCboClearingTypeEnableDisable(boolean flag) {
        cboClearingType.setEnabled(flag);
    }
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // Add your handling code here:
        observable.setActionType(ClientConstants.ACTIONTYPE_EDIT);
        popUp(EDIT);
        tdtClearingDate.setEnabled(false);
        cboClearingType.setEnabled(false);
        
    }//GEN-LAST:event_btnEditActionPerformed
    /** To display a popUp window for viewing existing data */
    private void popUp(int field) {
        lblStatus.setText(ClientConstants.ACTION_STATUS[0]);
        viewType = field;
        final HashMap viewMap = new HashMap();
        if(field==EDIT || field==DELETE || field==VIEW){//Edit=0 and Delete=1
            HashMap where = new HashMap();
            where.put("BRANCH_ID",ProxyParameters.BRANCH_ID);
            viewMap.put(CommonConstants.MAP_NAME, "viewOutwardClearingTally");
            viewMap.put(CommonConstants.MAP_WHERE, where);
            //mapped statement: viewOutwardClearingTally---> result map should be a Hashmap...
        }
        new ViewAll(this, viewMap).show();
    }
    
    /** Called by the Popup window created thru popUp method
     * @param param
     */
    public void fillData(Object param) {
        final HashMap hash = (HashMap) param;
        //        final String accountHead=(String)hash.get("AC_HD_ID");
        if (viewType != -1) {
            /* In the Edit or Delete Mode */
            if (viewType==EDIT || viewType==DELETE || viewType==VIEW) {
                hash.put(CommonConstants.MAP_WHERE, (String)hash.get("SCHEDULE NO"));
                HashMap where = new HashMap();
                where.put("SCHEDULE_NO", CommonUtil.convertObjToStr(hash.get("SCHEDULE NO")));
                where.put("BRANCH_ID", ProxyParameters.BRANCH_ID);
                HashMap whereMap = new HashMap();
                whereMap.put(CommonConstants.MAP_WHERE, where);
                observable.populateData(whereMap);
                observable.setStatus();
                if(observable.getActionType() == ClientConstants.ACTIONTYPE_EDIT){
                    ClientUtil.enableDisable(panScheduleNo, true);
                    setServiceBranchDetailsEnableDisable(true);
                    //observable.getForSystem();
                    setScheduleNoDisable(false);
                    setCboClearingTypeEnableDisable(true);
                } else if(observable.getActionType() == ClientConstants.ACTIONTYPE_DELETE ||  viewType==VIEW){
                    ClientUtil.enableDisable(this, false);
                }
                setButtonEnableDisable();
                if (tblInstDet.getRowCount() > 0)
                    closeEnable(true);
                
                resetPanBID();
            }
        }
    }
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // Add your handling code here:
        ClientUtil.enableDisable(panScheduleNo,true);
        setServiceBranchDetailsEnableDisable(false);
        setScheduleNoDisable(false);
        observable.setActionType(ClientConstants.ACTIONTYPE_NEW);
        setButtonEnableDisable();
        observable.setStatus();
        tdtClearingDate.setDateValue(com.see.truetransact.commonutil.DateUtil.getStringDate((Date) currDt.clone()));
    }//GEN-LAST:event_btnNewActionPerformed

    private void closeEnable(boolean yesno) {
        tdtClosingDate.setEnabled(yesno);
        btnClsSchedule.setEnabled(yesno);        
    }
    
/* Auto Generated Method - setFieldNames()
   This method assigns name for all the components.
   Other functions are working based on this name. */
    private void setFieldNames() {
        btnCancel.setName("btnCancel");
        btnClose.setName("btnClose");
        btnDelete.setName("btnDelete");
        btnEdit.setName("btnEdit");
        btnNew.setName("btnNew");
        btnPrint.setName("btnPrint");
        btnSave.setName("btnSave");
        lblCurrentClearingDate.setName("lblCurrentClearingDate");
        cboClearingType.setName("cboClearingType");
        lbSpace2.setName("lbSpace2");
        lblClearingDate.setName("lblClearingDate");
        lblClearingType.setName("lblClearingType");
        lblClosingDate.setName("lblClosingDate");
        lblMsg.setName("lblMsg");
        lblSBAmount.setName("lblSBAmount");
        lblSBNumberofInstruments.setName("lblSBNumberofInstruments");
        lblScheduleNo.setName("lblScheduleNo");
        lblSpace1.setName("lblSpace1");
        lblSpace3.setName("lblSpace3");
        lblStatus.setName("lblStatus");
        mbrOutwardClearingTally.setName("mbrOutwardClearingTally");
        panOutwardClearingTally.setName("panOutwardClearingTally");
        panScheduleNo.setName("panScheduleNo");
        panServiceBranch.setName("panServiceBranch");
        panStatus.setName("panStatus");
        tdtClearingDate.setName("tdtClearingDate");
        tdtClosingDate.setName("tdtClosingDate");
        txtSBAmount.setName("txtSBAmount");
        txtSBNumberofInstruments.setName("txtSBNumberofInstruments");
        txtScheduleNo.setName("txtScheduleNo");
    }
    /* Auto Generated Method - internationalize()
   This method used to assign display texts from
   the Resource Bundle File. */
    private void internationalize() {
        btnClose.setText(resourceBundle.getString("btnClose"));
        lblDisplayCurrentClearingDate.setText(resourceBundle.getString("lblDisplayCurrentClearingDate"));
        lblMsg.setText(resourceBundle.getString("lblMsg"));
        lblCurrentClearingDate.setText(resourceBundle.getString("lblCurrentClearingDate"));
        lblSBNumberofInstruments.setText(resourceBundle.getString("lblSBNumberofInstruments"));
        ((javax.swing.border.TitledBorder)panServiceBranch.getBorder()).setTitle(resourceBundle.getString("panServiceBranch"));
        lblScheduleNo.setText(resourceBundle.getString("lblScheduleNo"));
        btnSave.setText(resourceBundle.getString("btnSave"));
        lblClearingType.setText(resourceBundle.getString("lblClearingType"));
        lblSpace3.setText(resourceBundle.getString("lblSpace3"));
        lbSpace2.setText(resourceBundle.getString("lbSpace2"));
        lblStatus.setText(resourceBundle.getString("lblStatus"));
        lblSpace1.setText(resourceBundle.getString("lblSpace1"));
        lblClearingDate.setText(resourceBundle.getString("lblClearingDate"));
        btnDelete.setText(resourceBundle.getString("btnDelete"));
        lblClosingDate.setText(resourceBundle.getString("lblClosingDate"));
        btnEdit.setText(resourceBundle.getString("btnEdit"));
        btnNew.setText(resourceBundle.getString("btnNew"));
        lblSBAmount.setText(resourceBundle.getString("lblSBAmount"));
        btnCancel.setText(resourceBundle.getString("btnCancel"));
        btnPrint.setText(resourceBundle.getString("btnPrint"));
    }
/* Auto Generated Method - setMandatoryHashMap()
   This method list out all the Input Fields available in the UI.
   It needs a class level HashMap variable mandatoryMap. */
    public void setMandatoryHashMap() {
        mandatoryMap = new HashMap();
        mandatoryMap.put("cboClearingType", new Boolean(true));
        mandatoryMap.put("txtScheduleNo", new Boolean(true));
        mandatoryMap.put("tdtClearingDate", new Boolean(true));
        mandatoryMap.put("tdtClosingDate", new Boolean(true));
        mandatoryMap.put("txtSBNumberofInstruments", new Boolean(true));
        mandatoryMap.put("txtSBAmount", new Boolean(true));
        mandatoryMap.put("txtDNumberofInstruments", new Boolean(true));
        mandatoryMap.put("txtDAmount", new Boolean(true));
    }
    
/* Auto Generated Method - getMandatoryHashMap()
   Getter method for setMandatoryHashMap().*/
    public HashMap getMandatoryHashMap() {
        return mandatoryMap;
    }
    
    
    
/* Auto Generated Method - setHelpMessage()
   This method shows tooltip help for all the input fields
   available in the UI. It needs the Mandatory Resource Bundle
   object. Help display Label name should be lblMsg. */
    public void setHelpMessage() {
        OutwardClearingTallyMRB objMandatoryRB = new OutwardClearingTallyMRB();
        cboClearingType.setHelpMessage(lblMsg, objMandatoryRB.getString("cboClearingType"));
        txtScheduleNo.setHelpMessage(lblMsg, objMandatoryRB.getString("txtScheduleNo"));
        tdtClearingDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtClearingDate"));
        tdtClosingDate.setHelpMessage(lblMsg, objMandatoryRB.getString("tdtClosingDate"));
        txtSBNumberofInstruments.setHelpMessage(lblMsg, objMandatoryRB.getString("txtSBNumberofInstruments"));
        txtSBAmount.setHelpMessage(lblMsg, objMandatoryRB.getString("txtSBAmount"));
    }
    
   /* Auto Generated Method - update()
   This method called by Observable. It updates the UI with
   Observable's data. If needed add/Remove RadioButtons
   method need to be added.*/
    public void update(Observable observed, Object arg) {
        cboClearingType.setSelectedItem(observable.getCboClearingType());
        txtScheduleNo.setText(observable.getTxtScheduleNo());
        tdtClearingDate.setDateValue(observable.getTdtClearingDate());
        tdtClosingDate.setDateValue(observable.getTdtClosingDate());
        lblStatus.setText(observable.getLblStatus());
        txtSBNumberofInstruments.setText(observable.getTxtSBNumberofInstruments());
        txtSBAmount.setText(observable.getTxtSBAmount());
        
        tbmDifference = observable.getTbmDifference();
        tbmInstDet = observable.getTbmInstDet();
    }
        /* Auto Generated Method - updateOBFields()
   This method called by Save option of UI.
   It updates the OB with UI data.*/
    public void updateOBFields() {
        observable.setCboClearingType((String) cboClearingType.getSelectedItem());
        observable.setTxtScheduleNo(txtScheduleNo.getText());
        observable.setTdtClearingDate(tdtClearingDate.getDateValue());
        observable.setTdtClosingDate(tdtClosingDate.getDateValue()); 
        
        observable.setTxtSBNumberofInstruments(txtSBNumberofInstruments.getText());
        observable.setTxtSBAmount(txtSBAmount.getText());
    }
    
    // To set the maximun length of fields in the UI
    private void  setMaximumLength(){
        txtScheduleNo.setMaxLength(16);
        txtSBNumberofInstruments.setMaxLength(8);
        txtSBNumberofInstruments.setValidation(new NumericValidation(8,0));
        txtSBAmount.setMaxLength(16);
        txtSBAmount.setValidation(new CurrencyValidation());
    }
    
    /* To enable or disable the main New Save Delete buttons  */
    private void setButtonEnableDisable() {
        btnNew.setEnabled(!btnNew.isEnabled());
        btnEdit.setEnabled(!btnEdit.isEnabled());
        btnDelete.setEnabled(!btnDelete.isEnabled());
        mitNew.setEnabled(btnNew.isEnabled());
        mitEdit.setEnabled(btnEdit.isEnabled());
        mitDelete.setEnabled(btnDelete.isEnabled());
        btnSave.setEnabled(!btnNew.isEnabled());
        btnCancel.setEnabled(!btnNew.isEnabled());
        mitSave.setEnabled(btnSave.isEnabled());
        mitCancel.setEnabled(btnCancel.isEnabled());
        btnView.setEnabled(!btnView.isEnabled());
        btnSaveBID.setEnabled(false);
        btnClearBID.setEnabled(false);
        
        closeEnable(false);
    }
    /* To disable the txtScheduleNo enable disable */
    private void setScheduleNoDisable(boolean flag){
        txtScheduleNo.setEditable(flag);
    }
    //Enabled and disabled BID panel buttons.
    private void enableDisableBtnBID(boolean enableDiable) {
        btnSaveBID.setEnabled(enableDiable);
        btnClearBID.setEnabled(enableDiable);
    }
    //reset the text components in BID Panel. 
    private void resetPanBID() {
        txtSBAmount.setText("");
        txtSBNumberofInstruments.setText("");
    }
    
    public static void main(String[] args) {
        OutwardClearingTallyUI oct = new OutwardClearingTallyUI();
        javax.swing.JFrame frame = new javax.swing.JFrame();
        frame.getContentPane().add(oct); 
        frame.show();
        oct.show();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnCancel;
    private com.see.truetransact.uicomponent.CButton btnClearBID;
    private com.see.truetransact.uicomponent.CButton btnClose;
    private com.see.truetransact.uicomponent.CButton btnClsSchedule;
    private com.see.truetransact.uicomponent.CButton btnDelete;
    private com.see.truetransact.uicomponent.CButton btnEdit;
    private com.see.truetransact.uicomponent.CButton btnNew;
    private com.see.truetransact.uicomponent.CButton btnPrint;
    private com.see.truetransact.uicomponent.CButton btnSave;
    private com.see.truetransact.uicomponent.CButton btnSaveBID;
    private com.see.truetransact.uicomponent.CButton btnView;
    private com.see.truetransact.uicomponent.CComboBox cboClearingType;
    private com.see.truetransact.uicomponent.CLabel lbSpace2;
    private com.see.truetransact.uicomponent.CLabel lbSpace3;
    private com.see.truetransact.uicomponent.CLabel lblClearingDate;
    private com.see.truetransact.uicomponent.CLabel lblClearingType;
    private com.see.truetransact.uicomponent.CLabel lblClosingDate;
    private com.see.truetransact.uicomponent.CLabel lblCurrentClearingDate;
    private com.see.truetransact.uicomponent.CLabel lblDisplayCurrentClearingDate;
    private com.see.truetransact.uicomponent.CLabel lblMsg;
    private com.see.truetransact.uicomponent.CLabel lblSBAmount;
    private com.see.truetransact.uicomponent.CLabel lblSBNumberofInstruments;
    private com.see.truetransact.uicomponent.CLabel lblScheduleNo;
    private com.see.truetransact.uicomponent.CLabel lblSpace1;
    private com.see.truetransact.uicomponent.CLabel lblSpace24;
    private com.see.truetransact.uicomponent.CLabel lblSpace25;
    private com.see.truetransact.uicomponent.CLabel lblSpace26;
    private com.see.truetransact.uicomponent.CLabel lblSpace27;
    private com.see.truetransact.uicomponent.CLabel lblSpace3;
    private com.see.truetransact.uicomponent.CLabel lblStatus;
    private com.see.truetransact.uicomponent.CMenuBar mbrOutwardClearingTally;
    private javax.swing.JMenuItem mitCancel;
    private javax.swing.JMenuItem mitClose;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JMenuItem mitNew;
    private javax.swing.JMenuItem mitSave;
    private javax.swing.JMenu mnuProcess;
    private com.see.truetransact.uicomponent.CPanel panBIDBtns;
    private com.see.truetransact.uicomponent.CPanel panOutwardClearingTally;
    private com.see.truetransact.uicomponent.CPanel panScheduleNo;
    private com.see.truetransact.uicomponent.CPanel panServiceBranch;
    private com.see.truetransact.uicomponent.CPanel panStatus;
    private javax.swing.JSeparator sptCancel;
    private javax.swing.JSeparator sptView;
    private com.see.truetransact.uicomponent.CScrollPane srpDifference;
    private com.see.truetransact.uicomponent.CScrollPane srpInstrumentDet;
    private com.see.truetransact.uicomponent.CTable tblDifference;
    private com.see.truetransact.uicomponent.CTable tblInstDet;
    private com.see.truetransact.uicomponent.CToolBar tbrOutwardClearingTally;
    private com.see.truetransact.uicomponent.CDateField tdtClearingDate;
    private com.see.truetransact.uicomponent.CDateField tdtClosingDate;
    private com.see.truetransact.uicomponent.CTextField txtSBAmount;
    private com.see.truetransact.uicomponent.CTextField txtSBNumberofInstruments;
    private com.see.truetransact.uicomponent.CTextField txtScheduleNo;
    // End of variables declaration//GEN-END:variables
    
}
