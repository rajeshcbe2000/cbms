/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.  
 **
 *
 * Authorize.java
 *
 * Created on March 3, 2004, 1:46 PM
 */
package com.see.truetransact.ui.common.viewall;


import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.commonutil.CommonUtil;
import java.awt.Dimension;
import java.awt.Toolkit;
//import javax.swing.DefaultListModel;


import com.see.truetransact.uicomponent.CInternalFrame;

import java.util.*;
import javax.swing.event.TableModelListener;

/**
 * @author bala
 */
public class MalayalamDicSearchUI extends com.see.truetransact.uicomponent.CDialog {
//    private final LoanSubsidyRB resourceBundle = new LoanSubsidyRB();

//    private LoanSubsidyOB observable;
    LinkedHashMap dataMap = null;
    CInternalFrame parent = null;
    Date currDt = null;
    boolean isFilled = false;
    boolean transAmtEdit = false;
    StringBuffer selDataBuff = new StringBuffer();
    HashMap selItemList = new HashMap();
    /**
     * Creates new form AuthorizeUI
     */
    public MalayalamDicSearchUI() {
        setupInit();
        setupScreen();
    }

    /**
     * Creates new form AuthorizeUI
     */
    public MalayalamDicSearchUI(CInternalFrame parent, HashMap paramMap) {
        this.parent = parent;
        setupInit();
        setupScreen();
    }

    /**
     * Creates new form AuthorizeUI
     */
    public MalayalamDicSearchUI(String sourceScreen,String txtVal,int position,String txtEnglish) {
        setupInit();
        setupScreen();
        txtMal.setText(txtVal);
        txtEng.setText(txtEnglish);
                
    }

    private void setupInit() {
        System.out.println("0001");
        currDt = ClientUtil.getCurrentDate();

        initComponents();
        internationalize();
        setObservable();

        setMaxLength();

        enableDisableSearchDetails(false);


    }

    private void enableDisableSearchDetails(boolean flag) {
    }

    private void setMaxLength() {
    }

    private void setupScreen() {
        //        setModal(true);

        /*
         * Calculate the screen size
         */
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        /*
         * Center frame on the screen
         */
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
    }

    private void setObservable() {
        try {
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void fillData(Object obj) {
        HashMap dataMap = (HashMap) obj;
    }

    private void editDeleteTableData(HashMap map) {
        transAmtEdit = false;
        transAmtEdit = true;
    }

    public StringBuffer getSelDataBuff() {
        return selDataBuff;
    }

    public void setSelDataBuff(StringBuffer selDataBuff) {
        this.selDataBuff = selDataBuff;
    }

    

    public void show() {

//        if (isShow) {
        Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        pack();

        /*
         * Center frame on the screen
         */
        Dimension frameSize = getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        setLocation((screenSize.width - frameSize.width) / 2,
                (screenSize.height - frameSize.height) / 2);
        setModal(true);
        super.show();
        // }


//          super.show();
    }

    /**
     * Bring up and populate the temporary project detail screen.
     */
    

    private boolean isSelectedRowTicked(com.see.truetransact.uicomponent.CTable table) {
        boolean selected = false;
        for (int i = 0, j = table.getRowCount(); i < j; i++) {
            selected = ((Boolean) table.getValueAt(i, 0)).booleanValue();
            if (!selected) {
                //            table.setForeground(Colu
                break;
            }
        }
        return selected;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panTable = new com.see.truetransact.uicomponent.CPanel();
        txtEng = new com.see.truetransact.uicomponent.CTextField();
        txtMal = new com.see.truetransact.uicomponent.CTextField();
        btnSavetoDic = new com.see.truetransact.uicomponent.CButton();
        btnClear = new com.see.truetransact.uicomponent.CButton();
        btnClose = new com.see.truetransact.uicomponent.CButton();
        cLabel1 = new com.see.truetransact.uicomponent.CLabel();
        cLabel2 = new com.see.truetransact.uicomponent.CLabel();
        cLabel3 = new com.see.truetransact.uicomponent.CLabel();

        setTitle("Gold Loan Items");
        setMinimumSize(new java.awt.Dimension(150, 200));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panTable.setMinimumSize(new java.awt.Dimension(150, 200));
        panTable.setPreferredSize(new java.awt.Dimension(400, 200));
        panTable.setLayout(new java.awt.GridBagLayout());

        txtEng.setAllowAll(true);
        txtEng.setMinimumSize(new java.awt.Dimension(225, 21));
        txtEng.setPreferredSize(new java.awt.Dimension(225, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 10, 4);
        panTable.add(txtEng, gridBagConstraints);

        txtMal.setAllowAll(true);
        txtMal.setFont(new java.awt.Font("ML-TTIndulekha", 0, 18)); // NOI18N
        txtMal.setMaximumSize(new java.awt.Dimension(300, 21));
        txtMal.setMinimumSize(new java.awt.Dimension(300, 21));
        txtMal.setPreferredSize(new java.awt.Dimension(400, 21));
        txtMal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMalKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 6, 2);
        panTable.add(txtMal, gridBagConstraints);

        btnSavetoDic.setText("Save to Dict.");
        btnSavetoDic.setMaximumSize(new java.awt.Dimension(150, 27));
        btnSavetoDic.setMinimumSize(new java.awt.Dimension(150, 27));
        btnSavetoDic.setPreferredSize(new java.awt.Dimension(150, 27));
        btnSavetoDic.setRequestFocusEnabled(false);
        btnSavetoDic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavetoDicActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        panTable.add(btnSavetoDic, gridBagConstraints);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        panTable.add(btnClear, gridBagConstraints);

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 2;
        panTable.add(btnClose, gridBagConstraints);

        cLabel1.setText("English");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panTable.add(cLabel1, gridBagConstraints);

        cLabel2.setText("Malayalam");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        panTable.add(cLabel2, gridBagConstraints);

        cLabel3.setText("F4 -Malayalam Keyboard");
        cLabel3.setFont(new java.awt.Font("MS Sans Serif", 1, 11)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(22, 0, 0, 0);
        panTable.add(cLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(panTable, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

   

    private void tblDataPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblRecoveryListTallyPropertyChange
    }//GEN-LAST:event_tblRecoveryListTallyPropertyChange

    private void btnSavetoDicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavetoDicActionPerformed
        HashMap whereMap = new HashMap();
        String wrd = txtEng.getText().trim();
        if (wrd != null && wrd.length() > 0) {
            HashMap whMap = new HashMap();
            System.out.println("wrd-------- :" + wrd);
            String mWord = "";
            whMap.put("ENG_WORD", wrd.toUpperCase());
            List lst = (List) ClientUtil.executeQuery("getMalayalamWord", whMap);
            if (lst != null && lst.size() > 0) {
                HashMap one = (HashMap) lst.get(0);
                if (one != null && one.containsKey("M")) {
                    mWord = CommonUtil.convertObjToStr(one.get("M"));
                }
            }
            if (mWord == null || mWord.length() <= 0) {
                whereMap.put("ENG_WORD", txtEng.getText().trim().toUpperCase());
                whereMap.put("MA_WORD", txtMal.getText().trim());
                ClientUtil.execute("insertIntoDict", whereMap);
                System.out.println("sucess...");
            }else{
                whereMap.put("ENG_WORD", txtEng.getText().trim().toUpperCase());
                whereMap.put("MA_WORD", txtMal.getText().trim()); 
                ClientUtil.execute("updateIntoDict", whereMap);
                System.out.println("sucess..."); 
            }
            this.dispose();

        }
    }//GEN-LAST:event_btnSavetoDicActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
       txtEng.setText("");
       txtMal.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
      ClientUtil.clearAll(this);
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void txtMalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMalKeyPressed
       if (evt.getKeyCode() == 115) {
            System.out.println("gggg 1 :" + txtMal.getCaretPosition());
            MalayalamKeyboardUI showObj = new MalayalamKeyboardUI("Customer", txtMal.getText(), txtMal.getCaretPosition(), txtEng.getText());
            showObj.show();
            txtMal.setText(showObj.getFinalTxt());
        }
    }//GEN-LAST:event_txtMalKeyPressed

   

    
    

    private void internationalize() {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    }

    public void update(Observable o, Object arg) {
    }

    public void updateOBFields() {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnClear;
    private com.see.truetransact.uicomponent.CButton btnClose;
    private com.see.truetransact.uicomponent.CButton btnSavetoDic;
    private com.see.truetransact.uicomponent.CLabel cLabel1;
    private com.see.truetransact.uicomponent.CLabel cLabel2;
    private com.see.truetransact.uicomponent.CLabel cLabel3;
    private com.see.truetransact.uicomponent.CPanel panTable;
    private com.see.truetransact.uicomponent.CTextField txtEng;
    private com.see.truetransact.uicomponent.CTextField txtMal;
    // End of variables declaration//GEN-END:variables
}
