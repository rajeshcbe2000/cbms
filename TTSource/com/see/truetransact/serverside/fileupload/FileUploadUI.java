/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.  
 * 
 * FileUploadUI.java
 *
 * Created on May 27, 2005, 10:47 AM
 */
package com.see.truetransact.serverside.fileupload;

import java.util.Observer;
import java.util.Observable;
import java.util.HashMap;
import com.see.truetransact.uimandatory.UIMandatoryField;

/**
 *
 * @author 152691
 */
public class FileUploadUI extends com.see.truetransact.uicomponent.CInternalFrame implements Observer, UIMandatoryField {

    /**
     * Creates new form FileUploadUI
     */
    public FileUploadUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        lblSourceFile = new com.see.truetransact.uicomponent.CLabel();
        lblMappingFile = new com.see.truetransact.uicomponent.CLabel();
        lblFileType = new com.see.truetransact.uicomponent.CLabel();
        lblColumnDelimiter = new com.see.truetransact.uicomponent.CLabel();
        lblTextQualifier = new com.see.truetransact.uicomponent.CLabel();
        lblRowDelimiter = new com.see.truetransact.uicomponent.CLabel();
        lblSkipRows = new com.see.truetransact.uicomponent.CLabel();
        txtSkipRows = new com.see.truetransact.uicomponent.CTextField();
        chkFirstColHeaders = new com.see.truetransact.uicomponent.CCheckBox();
        cboFileType = new com.see.truetransact.uicomponent.CComboBox();
        cboMappingFile = new com.see.truetransact.uicomponent.CComboBox();
        cboColumnDelimiter = new com.see.truetransact.uicomponent.CComboBox();
        cboTextQualifier = new com.see.truetransact.uicomponent.CComboBox();
        cboRowDelimiter = new com.see.truetransact.uicomponent.CComboBox();
        panSourceFile = new com.see.truetransact.uicomponent.CPanel();
        txtSourceFile = new com.see.truetransact.uicomponent.CTextField();
        btnSourceFile = new com.see.truetransact.uicomponent.CButton();
        lblColDelimiterOther = new com.see.truetransact.uicomponent.CLabel();
        lblTextQualifierOther = new com.see.truetransact.uicomponent.CLabel();
        lblRowDelimiterOther = new com.see.truetransact.uicomponent.CLabel();
        txtColumnDelimiterOther = new com.see.truetransact.uicomponent.CTextField();
        txtRowDelimiterOther = new com.see.truetransact.uicomponent.CTextField();
        txtTextQualifierOther = new com.see.truetransact.uicomponent.CTextField();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(50, 26));
        lblSourceFile.setText("Source File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(lblSourceFile, gridBagConstraints);

        lblMappingFile.setText("Mapping File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(lblMappingFile, gridBagConstraints);

        lblFileType.setText("File Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(lblFileType, gridBagConstraints);

        lblColumnDelimiter.setText("Column Delimiter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(lblColumnDelimiter, gridBagConstraints);

        lblTextQualifier.setText("Text Qualifier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(lblTextQualifier, gridBagConstraints);

        lblRowDelimiter.setText("Row Delimiter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(lblRowDelimiter, gridBagConstraints);

        lblSkipRows.setText("Skip Rows");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(lblSkipRows, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(txtSkipRows, gridBagConstraints);

        chkFirstColHeaders.setText("First Column Has Headers");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(chkFirstColHeaders, gridBagConstraints);

        cboFileType.setMinimumSize(new java.awt.Dimension(50, 21));
        cboFileType.setPreferredSize(new java.awt.Dimension(50, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(cboFileType, gridBagConstraints);

        cboMappingFile.setMinimumSize(new java.awt.Dimension(50, 21));
        cboMappingFile.setPreferredSize(new java.awt.Dimension(50, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(cboMappingFile, gridBagConstraints);

        cboColumnDelimiter.setMinimumSize(new java.awt.Dimension(50, 21));
        cboColumnDelimiter.setPreferredSize(new java.awt.Dimension(50, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(cboColumnDelimiter, gridBagConstraints);

        cboTextQualifier.setMinimumSize(new java.awt.Dimension(50, 21));
        cboTextQualifier.setPreferredSize(new java.awt.Dimension(50, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(cboTextQualifier, gridBagConstraints);

        cboRowDelimiter.setMinimumSize(new java.awt.Dimension(50, 21));
        cboRowDelimiter.setPreferredSize(new java.awt.Dimension(50, 21));
        cboRowDelimiter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRowDelimiterActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(cboRowDelimiter, gridBagConstraints);

        panSourceFile.setLayout(new java.awt.GridBagLayout());

        panSourceFile.add(txtSourceFile, new java.awt.GridBagConstraints());

        btnSourceFile.setText("...");
        btnSourceFile.setMinimumSize(new java.awt.Dimension(25, 21));
        btnSourceFile.setPreferredSize(new java.awt.Dimension(25, 21));
        panSourceFile.add(btnSourceFile, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(panSourceFile, gridBagConstraints);

        lblColDelimiterOther.setText("Other Column Delimter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        getContentPane().add(lblColDelimiterOther, gridBagConstraints);

        lblTextQualifierOther.setText("Other Text Qualifier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        getContentPane().add(lblTextQualifierOther, gridBagConstraints);

        lblRowDelimiterOther.setText("Other Row Delimiter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        getContentPane().add(lblRowDelimiterOther, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        getContentPane().add(txtColumnDelimiterOther, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        getContentPane().add(txtRowDelimiterOther, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        getContentPane().add(txtTextQualifierOther, gridBagConstraints);

        pack();
    }//GEN-END:initComponents

    private void cboRowDelimiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRowDelimiterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboRowDelimiterActionPerformed

    public void update(Observable o, Object arg) {
    }

    public java.util.HashMap getMandatoryHashMap() {
        return new HashMap();
    }

    public void setMandatoryHashMap() {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.see.truetransact.uicomponent.CButton btnSourceFile;
    private com.see.truetransact.uicomponent.CComboBox cboColumnDelimiter;
    private com.see.truetransact.uicomponent.CComboBox cboFileType;
    private com.see.truetransact.uicomponent.CComboBox cboMappingFile;
    private com.see.truetransact.uicomponent.CComboBox cboRowDelimiter;
    private com.see.truetransact.uicomponent.CComboBox cboTextQualifier;
    private com.see.truetransact.uicomponent.CCheckBox chkFirstColHeaders;
    private com.see.truetransact.uicomponent.CLabel lblColDelimiterOther;
    private com.see.truetransact.uicomponent.CLabel lblColumnDelimiter;
    private com.see.truetransact.uicomponent.CLabel lblFileType;
    private com.see.truetransact.uicomponent.CLabel lblMappingFile;
    private com.see.truetransact.uicomponent.CLabel lblRowDelimiter;
    private com.see.truetransact.uicomponent.CLabel lblRowDelimiterOther;
    private com.see.truetransact.uicomponent.CLabel lblSkipRows;
    private com.see.truetransact.uicomponent.CLabel lblSourceFile;
    private com.see.truetransact.uicomponent.CLabel lblTextQualifier;
    private com.see.truetransact.uicomponent.CLabel lblTextQualifierOther;
    private com.see.truetransact.uicomponent.CPanel panSourceFile;
    private com.see.truetransact.uicomponent.CTextField txtColumnDelimiterOther;
    private com.see.truetransact.uicomponent.CTextField txtRowDelimiterOther;
    private com.see.truetransact.uicomponent.CTextField txtSkipRows;
    private com.see.truetransact.uicomponent.CTextField txtSourceFile;
    private com.see.truetransact.uicomponent.CTextField txtTextQualifierOther;
    // End of variables declaration//GEN-END:variables

    public static void main(java.lang.String[] args) {
        javax.swing.JFrame frm = new javax.swing.JFrame();
        FileUploadUI fileUploadUI = new FileUploadUI();
        frm.getContentPane().add(fileUploadUI);
        fileUploadUI.show();
        frm.setSize(800, 650);
        frm.show();
    }
}