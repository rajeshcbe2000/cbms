/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition.
 * 
 *
 * SuspiciousConfigDAO.java
 *
 * Created on Sat Jan 08 15:03:26 IST 2005
 */
package com.see.truetransact.serverside.sysadmin.suspiciousconfig;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;


import com.ibatis.db.sqlmap.SqlMap;
import com.see.truetransact.serverutil.ServerUtil;

import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.commonutil.NoCommandException;
import com.see.truetransact.serverside.TTDAO;
import com.see.truetransact.serverutil.ServerConstants;
import com.see.truetransact.servicelocator.ServiceLocator;
import com.see.truetransact.serverexception.TransRollbackException;
import com.see.truetransact.serverexception.ServiceLocatorException;
import com.see.truetransact.serverside.common.idgenerate.IDGenerateDAO;

// For Maintaining Logs...
import com.see.truetransact.serverside.common.log.LogDAO;
import com.see.truetransact.transferobject.common.log.LogTO;


import com.see.truetransact.transferobject.sysadmin.suspiciousconfig.SuspiciousConfigTO;
import java.util.Date;
/**
 * SuspiciousConfig DAO.
 *
 */
public class SuspiciousConfigDAO extends TTDAO {

    private static SqlMap sqlMap = null;
    private SuspiciousConfigTO objSuspiciousConfigTO;
    private LogDAO logDAO;
    private LogTO logTO;
    private String command;
    private String userID = "";
    private LinkedHashMap suspiciousConfigTO = null;// Contains Suspicious Config Details which the Status is not DELETED
    private LinkedHashMap deletedsuspiciousConfigTO = null;// Contains Suspicious Config Details which the Status is DELETED
    private LinkedHashMap totalsuspiciousConfigTO = null;// Contains Both Suspicious Config Details
    private final String TO_DELETED_AT_UPDATE_MODE = "TO_DELETED_AT_UPDATE_MODE";
    private final String TO_NOT_DELETED_AT_UPDATE_MODE = "TO_NOT_DELETED_AT_UPDATE_MODE";
    private String confKey = ""; // Configuration Key Autogenerated - Primary Key for SuspiciousConfigTO
    private Date currDt = null;
    /**
     * Creates a new instance of SuspiciousConfigDAO
     */
    public SuspiciousConfigDAO() throws ServiceLocatorException {
        ServiceLocator locate = ServiceLocator.getInstance();
        sqlMap = (SqlMap) locate.getDAOSqlMap();
    }

    private HashMap getData(HashMap map) throws Exception {
        HashMap returnMap = new HashMap();
        String where = (String) map.get(CommonConstants.MAP_WHERE);
        List list = (List) sqlMap.executeQueryForList("getSelectSuspiciousConfigTO", where);
        returnMap.put("SuspiciousConfigTO", list);
        return returnMap;
    }

    private void insertData() throws Exception {
        try {
            sqlMap.startTransaction();
            insertSuspiciousConfig();
            sqlMap.commitTransaction();
        } catch (Exception e) {
            sqlMap.rollbackTransaction();
            e.printStackTrace();
            throw new TransRollbackException(e);
        }
    }

    private void updateData() throws Exception {
        System.out.println("########### Inside updateData() ");
        System.out.println("########### suspiciousConfigTO : " + suspiciousConfigTO);
        try {
            sqlMap.startTransaction();
            updateSuspiciousConfig();
            sqlMap.commitTransaction();
        } catch (Exception e) {
            sqlMap.rollbackTransaction();
            e.printStackTrace();
            throw new TransRollbackException(e);
        }
    }

    private void deleteData() throws Exception {
        try {
            sqlMap.startTransaction();
            deleteSuspiciousConfig();
            sqlMap.commitTransaction();
        } catch (Exception e) {
            sqlMap.rollbackTransaction();
            e.printStackTrace();
            throw new TransRollbackException(e);
        }
    }

    public static void main(String str[]) {
        try {
            SuspiciousConfigDAO dao = new SuspiciousConfigDAO();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public HashMap execute(HashMap map) throws Exception {
        _branchCode = (String) map.get(CommonConstants.BRANCH_ID);
        currDt = ServerUtil.getCurrentDate(_branchCode);
        logDAO = new LogDAO();
        setInitialValuesForLogTO(map);

        totalsuspiciousConfigTO = (LinkedHashMap) map.get("SuspiciousConfigTO");
        deletedsuspiciousConfigTO = (LinkedHashMap) totalsuspiciousConfigTO.get("TO_DELETED_AT_UPDATE_MODE");
        suspiciousConfigTO = (LinkedHashMap) totalsuspiciousConfigTO.get("TO_NOT_DELETED_AT_UPDATE_MODE");

        command = (String) map.get("MODE");

        if (command.equals(CommonConstants.TOSTATUS_INSERT)) {
            insertData();
        } else if (command.equals(CommonConstants.TOSTATUS_UPDATE)) {
            updateData();
        } else if (command.equals(CommonConstants.TOSTATUS_DELETE)) {
            deleteData();
        } else {
            throw new NoCommandException();
        }

        destroyObjects();
        return null;
    }

    public HashMap executeQuery(HashMap obj) throws Exception {
        _branchCode = (String) obj.get(CommonConstants.BRANCH_ID);
        currDt = ServerUtil.getCurrentDate(_branchCode);
        return getData(obj);
    }

    private void setInitialValuesForLogTO(HashMap map) throws Exception {
        logTO = new LogTO();
        logTO.setUserId(CommonUtil.convertObjToStr(map.get(CommonConstants.USER_ID)));
        logTO.setBranchId(CommonUtil.convertObjToStr(map.get(CommonConstants.BRANCH_ID)));
        logTO.setIpAddr(CommonUtil.convertObjToStr(map.get(CommonConstants.IP_ADDR)));
        logTO.setModule(CommonUtil.convertObjToStr(map.get(CommonConstants.MODULE)));
        logTO.setScreen(CommonUtil.convertObjToStr(map.get(CommonConstants.SCREEN)));

        userID = CommonUtil.convertObjToStr(map.get(CommonConstants.USER_ID));
    }

    /**
     * Generates BatchId
     */
    private String getConfigKey() throws Exception {
        final IDGenerateDAO dao = new IDGenerateDAO();
        final HashMap where = new HashMap();
        where.put(CommonConstants.MAP_WHERE, "SUSPECIOUS_CONF");
        return (String) (dao.executeQuery(where)).get(CommonConstants.DATA);
    }

    private void destroyObjects() {
        objSuspiciousConfigTO = null;
        logTO = null;
        logDAO = null;
        suspiciousConfigTO = null;
        deletedsuspiciousConfigTO = null;
        totalsuspiciousConfigTO = null;
        command = null;
    }

    /**
     * To Delete SuspiciousConfigTO
     */
    private void deleteSuspiciousConfig() throws Exception {
        if (suspiciousConfigTO != null) {
            for (int i = 1, j = suspiciousConfigTO.size(); i <= j; i++) {
                SuspiciousConfigTO objSuspiciousConfigTO = (SuspiciousConfigTO) suspiciousConfigTO.get(String.valueOf(i));
                objSuspiciousConfigTO.setStatus(CommonConstants.STATUS_DELETED);
                objSuspiciousConfigTO.setStatusBy(userID);
                objSuspiciousConfigTO.setStatusDt(currDt);

                sqlMap.executeUpdate("deleteSuspiciousConfigTO", objSuspiciousConfigTO);

                logTO.setData(objSuspiciousConfigTO.toString());
                logTO.setPrimaryKey(objSuspiciousConfigTO.getKeyData());
                logTO.setStatus(command);
                logDAO.addToLog(logTO);
                objSuspiciousConfigTO = null;
            }
        }
    }

    /**
     * To Update SuspiciousConfigTO
     */
    private void updateSuspiciousConfig() throws Exception {
        System.out.println("########### Inside updateSuspiciousConfi() ");
        System.out.println("########### suspiciousConfigTO : " + suspiciousConfigTO);
        if (deletedsuspiciousConfigTO != null) {
            for (int i = 1, j = deletedsuspiciousConfigTO.size(); i <= j; i++) {
                SuspiciousConfigTO objSuspiciousConfigTO = (SuspiciousConfigTO) deletedsuspiciousConfigTO.get(String.valueOf(i));
                objSuspiciousConfigTO.setStatus(CommonConstants.STATUS_DELETED);
                objSuspiciousConfigTO.setStatusBy(userID);
                objSuspiciousConfigTO.setStatusDt(currDt);


                sqlMap.executeUpdate("deleteSuspiciousConfigTO", objSuspiciousConfigTO);

                logTO.setData(objSuspiciousConfigTO.toString());
                logTO.setPrimaryKey(objSuspiciousConfigTO.getKeyData());
                logTO.setStatus(command);
                logDAO.addToLog(logTO);
                objSuspiciousConfigTO = null;
            }
        }
        if (suspiciousConfigTO != null) {
            int count = 1;
            for (int i = 1, j = suspiciousConfigTO.size(); i <= j; i++) {
                SuspiciousConfigTO objSuspiciousConfigTO = (SuspiciousConfigTO) suspiciousConfigTO.get(String.valueOf(i));
                if (count == 1) {
                    confKey = objSuspiciousConfigTO.getConfKey();
                    count++;
                }
                if ((objSuspiciousConfigTO.getStatus().length() > 0) && (objSuspiciousConfigTO.getStatus() != null)) {
                    objSuspiciousConfigTO.setStatus(CommonConstants.STATUS_MODIFIED);
                    objSuspiciousConfigTO.setStatusBy(userID);
                    objSuspiciousConfigTO.setStatusDt(currDt);
                    System.out.println("########### objSuspiciousConfigTO : " + objSuspiciousConfigTO);
                    sqlMap.executeUpdate("updateSuspiciousConfigTO", objSuspiciousConfigTO);

                    logTO.setData(objSuspiciousConfigTO.toString());
                    logTO.setPrimaryKey(objSuspiciousConfigTO.getKeyData());
                    logTO.setStatus(command);
                    logDAO.addToLog(logTO);
                    objSuspiciousConfigTO = null;
                } else {
                    objSuspiciousConfigTO.setStatus(CommonConstants.STATUS_CREATED);
                    objSuspiciousConfigTO.setStatusBy(userID);
                    objSuspiciousConfigTO.setStatusDt(currDt);
                    objSuspiciousConfigTO.setCreatedBy(userID);
                    objSuspiciousConfigTO.setCreatedDt(currDt);
                    objSuspiciousConfigTO.setConfKey(CommonUtil.convertObjToStr(confKey));

                    sqlMap.executeUpdate("insertSuspiciousConfigTO", objSuspiciousConfigTO);

                    logTO.setData(objSuspiciousConfigTO.toString());
                    logTO.setPrimaryKey(objSuspiciousConfigTO.getKeyData());
                    logTO.setStatus(command);
                    logDAO.addToLog(logTO);
                    objSuspiciousConfigTO = null;
                }
            }

        }
    }

    /**
     * To Insert SuspiciousConfigTO
     */
    private void insertSuspiciousConfig() throws Exception {
        if (suspiciousConfigTO != null) {
            confKey = getConfigKey();
            for (int i = 1, j = suspiciousConfigTO.size(); i <= j; i++) {
                SuspiciousConfigTO objsuspiciousConfigTO = (SuspiciousConfigTO) suspiciousConfigTO.get(String.valueOf(i));
                objsuspiciousConfigTO.setStatus(CommonConstants.STATUS_CREATED);
                objsuspiciousConfigTO.setStatusBy(userID);
                objsuspiciousConfigTO.setStatusDt(currDt);
                objsuspiciousConfigTO.setCreatedBy(userID);
                objsuspiciousConfigTO.setCreatedDt(currDt);
                objsuspiciousConfigTO.setConfKey(CommonUtil.convertObjToStr(confKey));

                sqlMap.executeUpdate("insertSuspiciousConfigTO", objsuspiciousConfigTO);

                logTO.setData(objsuspiciousConfigTO.toString());
                logTO.setPrimaryKey(objsuspiciousConfigTO.getKeyData());
                logTO.setStatus(command);
                logDAO.addToLog(logTO);
                objsuspiciousConfigTO = null;
            }
        }
    }
}
