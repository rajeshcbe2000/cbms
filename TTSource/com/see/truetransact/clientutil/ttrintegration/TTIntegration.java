/*
 * Copyright 2003-2020 FINCuro Solutions Pvt Ltd. All rights reserved.
 *
 * This software and its components are the property of FINCuro Solutions Pvt Limited and its affiliates, through authorship and acquisition. 
 * 
 * TTIntegration.java
 *
 * Created on January 7, 2005, 3:05 PM
 */
package com.see.truetransact.clientutil.ttrintegration;

import com.see.truetransact.clientutil.ClientUtil;
import com.see.truetransact.commonutil.DateUtil;
import com.see.truetransact.commonutil.CommonUtil;
import com.see.truetransact.commonutil.CommonConstants;
import com.see.truetransact.commonutil.ReadXMLForPrint;
import java.util.LinkedHashMap;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.util.Date;
import java.util.Calendar;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Component;
import com.see.iie.utils.EnvironmentVariables;
import com.see.truetransact.ui.common.ListReports;
import com.see.truetransact.uicomponent.CTextField;
import com.see.truetransact.clientproxy.ProxyFactory;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.export.JRPrintServiceExporter;
import net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import javax.print.PrintService;
import javax.print.attribute.PrintServiceAttributeSet;
import javax.print.attribute.HashPrintServiceAttributeSet;
import javax.print.attribute.standard.PrinterName;
import com.see.truetransact.ui.common.viewall.ViewAll;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.imageio.ImageIO;
import java.nio.file.*;

/**
 *
 * @author  152694
 */
public class TTIntegration extends javax.swing.JFrame {

    private java.awt.Dimension screensize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    private static com.see.reporttool.util.DashBoardThread thread;
    private static LinkedHashMap paramMap;
    private static HashMap paramMaps = new HashMap();
    private static java.util.Properties dbConfProp = new java.util.Properties();
    private static int no_of_rows_per_page;
    private static int intRowValue = 0;
    private static String actNum = "";
    private static LinkedHashMap errorMap = new LinkedHashMap();
    private static boolean isOkClicked = false;
    private static boolean isCheckClicked = false;
    private static ProxyFactory proxy = null;
    private static HashMap mapJNDI = new HashMap();
    private static Date currDt = null;
    private static HashMap passBookPar;
    private String act_num = "";
    private static int viewtype = -1;
    private static String MEMBERINDI = "";
    private static String ParameterName = "";
    static com.see.truetransact.uicomponent.CTextField memberfield = new com.see.truetransact.uicomponent.CTextField();
    static com.see.truetransact.uicomponent.CTextField txtInvestmentNo = new com.see.truetransact.uicomponent.CTextField();
    static com.see.truetransact.uicomponent.CTextField txtAccHd = new com.see.truetransact.uicomponent.CTextField();
    static com.see.truetransact.uicomponent.CTextField txtAccNo = new com.see.truetransact.uicomponent.CTextField();
    static com.see.truetransact.uicomponent.CTextField txtChittalNo = new com.see.truetransact.uicomponent.CTextField();
    static com.see.truetransact.uicomponent.CTextField txtCustomerId = new com.see.truetransact.uicomponent.CTextField();
    static com.see.truetransact.uicomponent.CTextField txtLoanNo = new com.see.truetransact.uicomponent.CTextField();

    static {
        mapJNDI.put(CommonConstants.JNDI, "GenerateReportJNDI");
        mapJNDI.put(CommonConstants.HOME, "common.report.GenerateReportHome");
        mapJNDI.put(CommonConstants.REMOTE, "common.report.GenerateReportRemote");
        try {
            // create the proxy
            proxy = ProxyFactory.createProxy();
            currDt = ClientUtil.getCurrentDate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /** Creates new form TTIntegration */
    public TTIntegration() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("Please choose a report");
        jDialog1.getContentPane().add(jLabel1, java.awt.BorderLayout.CENTER);

        jDialog1.getContentPane().add(jComboBox1, java.awt.BorderLayout.NORTH);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton1, new java.awt.GridBagConstraints());

        pack();
    }//GEN-END:initComponents
        private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            integration("CashScrollIB");
    }//GEN-LAST:event_jButton1ActionPerformed

    public void fillData(Object obj) {

        HashMap hashMap = (HashMap) obj;
        System.out.println("hashMap1 hashMap " + hashMap);
        if (viewtype == 2) {
            memberfield.setText(CommonUtil.convertObjToStr(hashMap.get("MEMBER_NO")));
        } else if (viewtype == 3) {
            txtAccHd.setText(CommonUtil.convertObjToStr(hashMap.get("A/C HEAD DESCRIPTION")));
        } else if (viewtype == 4) {
            txtInvestmentNo.setText(CommonUtil.convertObjToStr(hashMap.get("ACT_REF_NO")));
        } else if (viewtype == 5) {
            txtAccNo.setText(CommonUtil.convertObjToStr(hashMap.get("ACCT_NUM")));
        } else if (viewtype == 6) {
            txtChittalNo.setText(CommonUtil.convertObjToStr(hashMap.get("CHITTAL_NUMBER")));
        } else if (viewtype == 7) {
            txtCustomerId.setText(CommonUtil.convertObjToStr(hashMap.get("CUST_ID")));
            txtLoanNo.setText(CommonUtil.convertObjToStr(hashMap.get("ACT_NUM")));
        } else if (viewtype == 8) {
            txtLoanNo.setText(CommonUtil.convertObjToStr(hashMap.get("ACT_NUM")));
        }
        System.out.println("hashMap2 hashMap " + hashMap);
        hashMap = null;

    }
    //end

    public static void integration(String reportname) {
        System.out.println("integration Report Name : " + reportname);
        String roleID = com.see.truetransact.ui.TrueTransactMain.ROLE_ID;
        String userID = com.see.truetransact.ui.TrueTransactMain.USER_ID;// Added by nithya on 13-01-2020 -- Displaying user id in reports
        LinkedHashMap dynamicParamMap = new LinkedHashMap();
        JasperDesign jasperDesign = null;
        LinkedHashMap parameterMap = new LinkedHashMap();
        HashMap where = new HashMap();
        if (reportname.equalsIgnoreCase("ReceiptPayment")) {
            where.put(CommonConstants.MAP_NAME, "GET_JASPER_REPORT_PARAMS_FOR_RP");
            parameterMap.put("TRANS_ID", passBookPar.get("TRANS_ID"));
        } else if (reportname.equalsIgnoreCase("PassBook") || reportname.equalsIgnoreCase("PassBookNew")||reportname.equalsIgnoreCase("GN_OA_PASSBKF")) {
            where.put(CommonConstants.MAP_NAME, "GET_JASPER_REPORT_PARAMS_FOR_PASSBOOK");
            parameterMap.put("Acct_Num", passBookPar.get("ACT_NUM"));
        } else if (reportname.equalsIgnoreCase("loannoticewithguar") || reportname.equalsIgnoreCase("loannoticewithoutguar")) {
            where.put("LOAN_NOTICE_KEY", "LOAN_NOTICE_KEY");
            where.put(CommonConstants.MAP_NAME, "GET_JASPER_REPORT_PARAMS");
        } else {
            where.put(CommonConstants.MAP_NAME, "GET_JASPER_REPORT_PARAMS");
        }

        parameterMap.put("REPORT_NAME", reportname);
        parameterMap.put("ROLE_ID", roleID);
        parameterMap.put("USER_ID", userID); // Added by nithya on 13-01-2020 -- Displaying user id in reports
        where.put(CommonConstants.MAP_WHERE, parameterMap);
        System.out.println("parameterMap@@@ "+parameterMap);
        try {
            // create the proxy
            where = proxy.executeQuery(where, mapJNDI);
//            com.see.truetransact.serverside.common.report.GenerateReportDAO reportDAO = new com.see.truetransact.serverside.common.report.GenerateReportDAO();
//            where = reportDAO.executeQuery(where);
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (!reportname.startsWith("PassBook") && !reportname.startsWith("loannoticewithoutguar") && !reportname.startsWith("loannoticewithguar")
                && !reportname.equalsIgnoreCase("ReceiptPayment")) {
            List lst = null;
            if (where != null && where.size() > 0) {
                lst = (List) where.get(CommonConstants.DATA);
            }
            if (lst != null && lst.size() > 0) {
                where = (HashMap) lst.get(0);
                dynamicParamMap = (LinkedHashMap) where.get("PARAM_MAP");
                jasperDesign = (JasperDesign) where.get("CLIENT_OBJECT");
                if (passBookPar != null && passBookPar.size() > 0) {
                    Object keys[] = dynamicParamMap.keySet().toArray();
                    HashMap tempMap = null;
                    for (int i = 0; i < keys.length; i++) {
                        if (passBookPar.containsKey(keys[i])) {
                            tempMap = (HashMap) dynamicParamMap.get(keys[i]);
                            tempMap.put("PARAM_VALUE", passBookPar.get(keys[i]));
                        }
                    }
                }
            }
            paramMaps.put("REPORT_NAME", CommonUtil.convertObjToStr(reportname));
            boolean result = getParamValues(dynamicParamMap, reportname);
            
            if (result) {
                final String reportname1 = reportname;
                final HashMap dynamicParamMap1 = dynamicParamMap;
                final JasperDesign jasperDesign1 = jasperDesign;
                CommonUtil comm = new CommonUtil();
                final JDialog loading = comm.addProgressBar();
                SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {            
                @Override
                protected Void doInBackground() throws InterruptedException {
                    try{
                        showReport(reportname1, dynamicParamMap1, jasperDesign1);
    //                    isProcessed=true;
                    }catch(Exception e) {  
    //                    isProcessed=false;
                        e.printStackTrace();
                    }
                    return null;
                }            
                @Override
                protected void done() {
                    loading.dispose();
                }
            };
            worker.execute();        
            loading.show();
            try {
                worker.get();
            } catch (Exception e1) {
                e1.printStackTrace();
            }
                //showReport(reportname, dynamicParamMap, jasperDesign);
            }
        } else if (reportname.equalsIgnoreCase("loannoticewithguar") || reportname.equalsIgnoreCase("loannoticewithoutguar")) {
            List lst = null;
            if (where != null && where.size() > 0) {
                lst = (List) where.get(CommonConstants.DATA);
            }
            if (lst != null && lst.size() > 0) {
                where = (HashMap) lst.get(0);
                dynamicParamMap = (LinkedHashMap) where.get("PARAM_MAP");
                jasperDesign = (JasperDesign) where.get("CLIENT_OBJECT");
            }
            dynamicParamMap.putAll(passBookPar);
            final String reportname1 = reportname;
            final HashMap dynamicParamMap1 = dynamicParamMap;
            final JasperDesign jasperDesign1 = jasperDesign;
            CommonUtil comm = new CommonUtil();
            final JDialog loading = comm.addProgressBar();
            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {            
            @Override
            protected Void doInBackground() throws InterruptedException {
                try{
                    showReport(reportname1, dynamicParamMap1, jasperDesign1);
//                    isProcessed=true;
                }catch(Exception e) {  
//                    isProcessed=false;
                    e.printStackTrace();
                }
                return null;
            }            
            @Override
            protected void done() {
                loading.dispose();
            }
        };
        worker.execute();        
        loading.show();
        try {
            worker.get();
        } catch (Exception e1) {
            e1.printStackTrace();
        }
//            showReport(reportname, dynamicParamMap, jasperDesign);
        } else {
            JasperPrint jasperPrint = null;
            if (where != null && where.size() > 0 && ((List) where.get(CommonConstants.DATA)).size() > 0) {
                jasperPrint = (JasperPrint) ((List) where.get(CommonConstants.DATA)).get(0);
                if (((List) where.get(CommonConstants.DATA)).size() > 1) {
                    passBookPar.put("LAST_SLNO", ((List) where.get(CommonConstants.DATA)).get(1));
                }
                try {
                    if (CommonUtil.convertObjToStr(CommonConstants.SAL_REC_MODULE).equals("Y") && reportname.startsWith("PassBook")) {
                        //.// JasperPrintManager.(jasperPrint,false);
                        final String reportname1 = reportname;
                        final JasperPrint jasperPrint1 = jasperPrint;
                        CommonUtil comm = new CommonUtil();
                        final JDialog loading = comm.addProgressBar();
                        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {            
                        @Override
                        protected Void doInBackground() throws InterruptedException {
                            try{
                                JasperViewer.viewReport(jasperPrint1, reportname1 + " - CBMS++", false);
            //                    isProcessed=true;
                            }catch(Exception e) {  
            //                    isProcessed=false;
                                e.printStackTrace();
                            }
                            return null;
                        }            
                        @Override
                        protected void done() {
                            loading.dispose();
                        }
                    };
                    worker.execute();        
                    loading.show();
                    try {
                        worker.get();
                    } catch (Exception e1) {
                        e1.printStackTrace();
                    }
                        //JasperViewer.viewReport(jasperPrint, reportname + " - CBMS++", false);
                    } else {
                        final JasperPrint jasperPrint1 = jasperPrint;
                        CommonUtil comm = new CommonUtil();
                        final JDialog loading = comm.addProgressBar();
                        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {            
                        @Override
                        protected Void doInBackground() throws InterruptedException {
                            try{
                                JasperPrintManager.printReport(jasperPrint1, false);
            //                    isProcessed=true;
                            }catch(Exception e) {  
            //                    isProcessed=false;
                                e.printStackTrace();
                            }
                            return null;
                        }            
                        @Override
                        protected void done() {
                            loading.dispose();
                        }
                    };
                    worker.execute();        
                    loading.show();
                    try {
                        worker.get();
                    } catch (Exception e1) {
                        e1.printStackTrace();
                    }
//                        JasperPrintManager.printReport(jasperPrint, false);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                ClientUtil.showMessageWindow("No data found...");
            }
        }
        isCheckClicked = false;
        jasperDesign = null;
        dynamicParamMap = null;
        where = null;
        parameterMap = null;
        return;
        //        }
        //        com.see.common.tools.treebuilder.util.ReportInfo repinfo = new com.see.common.tools.treebuilder.util.ReportInfo();
        //
        //        Object obj = null;
        //
        //        Runtime.getRuntime().gc();
        //        HashMap where = new HashMap();
        //        where.put(CommonConstants.MAP_NAME, "GET_REPORT_PARAMS");
        //        LinkedHashMap parameterMap = new LinkedHashMap();
        //        parameterMap.put("REPORT_NAME", reportname);
        //        parameterMap.put("ROLE_ID", roleID);
        //        where.put(CommonConstants.MAP_WHERE, parameterMap);
        //        try {
        //            // create the proxy
        //            where = proxy.executeQuery(where, mapJNDI);
        //        } catch (Exception e) {
        //            e.printStackTrace();
        //        }
        //
        //        List lst = null;
        //        if (where!=null && where.size()>0)
        //            lst = (List)where.get(CommonConstants.DATA);
        //        if (lst!=null && lst.size()>0) {
        //            where = (HashMap)lst.get(0);
        //            dynamicParamMap = (LinkedHashMap) where.get("PARAM_MAP");
        //            obj = where.get("CLIENT_OBJECT");
        //        }
        //        repinfo.setParamlist(dynamicParamMap);
        //        repinfo.setRoleID(roleID);
        ////        com.see.iie.ui.IIEConfig objIIEConfig = new com.see.iie.ui.IIEConfig();
        ////        boolean result = objIIEConfig.getParamValues(repinfo, true, reportname);
        //        Runtime.getRuntime().gc();
        //        boolean result = getParamValues(repinfo, reportname);
        ////        System.out.println ("newlyaddedlinkedparamlist"+repinfo.getLinkedParamlist());
        ////        System.out.println ("newlyaddedparamlist"+repinfo.getParamlist());
        //        Runtime.getRuntime().gc();
        //        if(result)
        //            showReport(reportname,(ReportBean)obj,repinfo);
        //
        //        dynamicParamMap = null;
        //        repinfo = null;
        ////        objIIEConfig = null;
    }

    public static void integrationForPrint(String reportname) {
        String roleID = com.see.truetransact.ui.TrueTransactMain.ROLE_ID;
        String userId = com.see.truetransact.ui.TrueTransactMain.USER_ID; // Added by nithya on 13-01-2020 -- Displaying user id in reports
        LinkedHashMap dynamicParamMap = new LinkedHashMap();
        JasperDesign jasperDesign = null;
        LinkedHashMap parameterMap = new LinkedHashMap();
        //        if (reportname.equals("SubDay")) {
        HashMap where = new HashMap();
        where.put(CommonConstants.MAP_NAME, "GET_JASPER_REPORT_PARAMS_FOR_RP");
        parameterMap.putAll(passBookPar);
        //        parameterMap.put("TransId",passBookPar.get("TransId"));
        parameterMap.put("REPORT_NAME", reportname);
        parameterMap.put("ROLE_ID", roleID);
        parameterMap.put("USER_ID", userId); // Added by nithya on 13-01-2020 -- Displaying user id in reports
        where.put(CommonConstants.MAP_WHERE, parameterMap);
        try {
            // create the proxy
            where = proxy.executeQuery(where, mapJNDI);
        } catch (Exception e) {
            e.printStackTrace();
        }

        JasperPrint jasperPrint = null;
        if (where != null && where.size() > 0 && ((List) where.get(CommonConstants.DATA)).size() > 0) {
            jasperPrint = (JasperPrint) ((List) where.get(CommonConstants.DATA)).get(0);
            if (((List) where.get(CommonConstants.DATA)).size() > 1) {
                // The following line can be used for Notice Charge updations
                passBookPar.put("LAST_SLNO", ((List) where.get(CommonConstants.DATA)).get(1));
            }
            try {
                //                JasperPrintManager.printReport(jasperPrint,false);
//                PrintService service = null;
//                PrintServiceAttributeSet printServiceAttributeSet = new HashPrintServiceAttributeSet();
                //                    printServiceAttributeSet.add(new PrinterName("HP LaserJet 2100", null));
//                printServiceAttributeSet.add(new PrinterName(ReadXMLForPrint.readPrintXML(reportname), null));

//                System.out.println("#$#$ "+jasperPrint.getOriginsList());
//                for (int o=0; o<jasperPrint.getOriginsList().size(); o++) {
//                    
//                }
//                System.out.println("#$#$ jasperPrint.getPageWidth():"+jasperPrint.getPageWidth());
//                System.out.println("#$#$ jasperPrint.getPageHeight():"+jasperPrint.getPageHeight());
//                javax.print.attribute.PrintRequestAttributeSet printRequestAttributeSet = new javax.print.attribute.HashPrintRequestAttributeSet();
//                javax.print.attribute.standard.MediaSizeName mediaSizeName = 
//                    javax.print.attribute.standard.MediaSize.findMedia(jasperPrint.getPageWidth()/72,jasperPrint.getPageHeight()/72,
//                    javax.print.attribute.standard.MediaPrintableArea.INCH);
//                printRequestAttributeSet.add(mediaSizeName);
//                javax.print.attribute.Attribute attribute = new javax.print.attribute.Attribute();
//                printRequestAttributeSet.add(jasperPrint.getOrientation());
//                printRequestAttributeSet.add(new javax.print.attribute.standard.Copies(1));


//                float w = jasperPrint.getPageWidth();
//                float h = jasperPrint.getPageHeight();
//
//                javax.print.attribute.standard.MediaSizeName mediaSizeName = 
//                    javax.print.attribute.standard.MediaSize.findMedia(w/72, h/72,
//                    javax.print.attribute.standard.MediaPrintableArea.INCH);
//                
//                javax.print.attribute.PrintRequestAttributeSet printRequestAttributeSet = new javax.print.attribute.HashPrintRequestAttributeSet();
//                printRequestAttributeSet.add(mediaSizeName);
//
////                int unidad = javax.print.attribute.standard.MediaPrintableArea.MM;
//
//                // Busco el tama�o de papel de la impresora m�s parecido
////                printRequestAttributeSet.add(javax.print.attribute.standard.MediaSize.findMedia(w, h,
////                unidad));
//
//                // Configuro el area de impresi�n
////                printRequestAttributeSet.add(new javax.print.attribute.standard.MediaPrintableArea(0, 0, w, h,
////                unidad));
//
//                // Orientaci�n
//                javax.print.attribute.standard.OrientationRequested orientation = javax.print.attribute.standard.OrientationRequested.PORTRAIT;
//                if(jasperPrint.getOrientation() == net.sf.jasperreports.engine.JRReport.ORIENTATION_LANDSCAPE)
//                orientation = javax.print.attribute.standard.OrientationRequested.LANDSCAPE;
//
//                printRequestAttributeSet.add(orientation);
//
////                printRequestAttributeSet.add(new Copies(copies)); 
//
//                java.awt.print.PrinterJob job = java.awt.print.PrinterJob.getPrinterJob();
//                /* Create an array of PrintServices */
//                javax.print.PrintService[] services = javax.print.PrintServiceLookup.lookupPrintServices(null, null);
//                int selectedService = 0;
//                /* Scan found services to see if anyone suits our needs */
//                for(int i = 0; i < services.length;i++) {
//                    if (services[i].getName().equals(ReadXMLForPrint.readPrintXML(reportname))) {
//                        /*If the service is named as what we are querying we select it */
//                        selectedService = i;
//                    }
//                }
//                job.setPrintService(services[selectedService]);
//                
//                JRExporter exporter = new JRPrintServiceExporter();
//                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
//                exporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE, services[selectedService]);
//                exporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET, services[selectedService].getAttributes());
////                exporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET, printServiceAttributeSet);
//                exporter.setParameter(JRPrintServiceExporterParameter.PRINT_REQUEST_ATTRIBUTE_SET, printRequestAttributeSet);
////                exporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.PAGE_HEIGHT, new Integer(jasperPrint.getPageHeight()));
////                exporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.PAGE_WIDTH, new Integer(jasperPrint.getPageWidth()));
//                exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG, Boolean.FALSE);
//                exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.FALSE);
//                exporter.exportReport();

                System.out.println("#$#$ jasperPrint.getPages().size():" + jasperPrint.getPages().size());
                if (jasperPrint.getPages().size() > 0) {
                    CJRPrinterAWT.printPages(reportname, jasperPrint, 0, jasperPrint.getPages().size() - 1, false);
                }

//                net.sf.jasperreports.engine.export.JRTextExporter txtExporter = new net.sf.jasperreports.engine.export.JRTextExporter();
//
//                txtExporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
//                
//                txtExporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.BETWEEN_PAGES_TEXT, "\f");                
//                txtExporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.PAGE_HEIGHT, new Integer(jasperPrint.getPageHeight()));
//                txtExporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.PAGE_WIDTH, new Integer(jasperPrint.getPageWidth()));
//                txtExporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.CHARACTER_WIDTH, new Integer(7));
//                txtExporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.CHARACTER_HEIGHT, new Integer(14));
//                txtExporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "c:\\"+reportname+".txt");
//                txtExporter.exportReport();
//                
//                java.io.FileInputStream fileStream = new java.io.FileInputStream("c:\\"+reportname+".txt");
//                javax.print.DocFlavor flavor = javax.print.DocFlavor.INPUT_STREAM.AUTOSENSE;
//                javax.print.Doc mydoc = new javax.print.SimpleDoc(fileStream, flavor, null);
//                PrintService[] services = javax.print.PrintServiceLookup.lookupPrintServices(flavor, null);
//                for (int i=0; i<services.length; i++) {
//                    System.out.println("#$#$ "+services[i].getName());
//                    if (services[i].getName().equals(ReadXMLForPrint.readPrintXML(reportname))) {
//                        javax.print.DocPrintJob job = services[i].createPrintJob();
//                        job.print(mydoc, null);
//                    }
//                }
//                services = null;
//                mydoc = null;
//                flavor = null;
//                fileStream.close();
//                fileStream = null;
//                txtExporter = null;

            } catch (Exception e) {
                ClientUtil.showAlertWindow(e.getMessage());
                e.printStackTrace();
            }
        } else {
            ClientUtil.showMessageWindow("No data found...");
        }
        jasperDesign = null;
        dynamicParamMap = null;
        where = null;
        parameterMap = null;
        return;
    }

    public static void integrationForPrint(String reportname, boolean preview) {
        String roleID = com.see.truetransact.ui.TrueTransactMain.ROLE_ID;
        String userId = com.see.truetransact.ui.TrueTransactMain.USER_ID; // Added by nithya on 13-01-2020 -- Displaying user id in reports
        LinkedHashMap dynamicParamMap = new LinkedHashMap();
        JasperDesign jasperDesign = null;
        LinkedHashMap parameterMap = new LinkedHashMap();
        //        if (reportname.equals("SubDay")) {
        HashMap where = new HashMap();
        where.put(CommonConstants.MAP_NAME, "GET_JASPER_REPORT_PARAMS_FOR_RP");
        parameterMap.putAll(passBookPar);
        parameterMap.put("Acct_Num",passBookPar.get("ACT_NUM"));
        //        parameterMap.put("TransId",passBookPar.get("TransId"));
        parameterMap.put("REPORT_NAME", reportname);
        parameterMap.put("ROLE_ID", roleID);
        parameterMap.put("USER_ID", userId); // Added by nithya on 13-01-2020 -- Displaying user id in reports
        where.put(CommonConstants.MAP_WHERE, parameterMap);
        System.out.println("parameterMap@@@ "+parameterMap+" --passBookPar--"+passBookPar);
        try {
            // create the proxy
            where = proxy.executeQuery(where, mapJNDI);
        } catch (Exception e) {
            e.printStackTrace();
        }

        JasperPrint jasperPrint = null;
        if (where != null && where.size() > 0 && ((List) where.get(CommonConstants.DATA)).size() > 0) {
            try {
                jasperPrint = (JasperPrint) ((List) where.get(CommonConstants.DATA)).get(0);
                if (!preview) {
                    //                    JasperPrintManager.printReport(jasperPrint,false);
//                    PrintService service = null;
//                    PrintServiceAttributeSet printServiceAttributeSet = new HashPrintServiceAttributeSet();
//                    //                    printServiceAttributeSet.add(new PrinterName("HP LaserJet 2100", null));
//                    printServiceAttributeSet.add(new PrinterName(ReadXMLForPrint.readPrintXML(reportname), null));
//                    
//                    JRExporter exporter = new JRPrintServiceExporter();
//                    exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
//                    exporter.setParameter(JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET, printServiceAttributeSet);
//                    exporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.PAGE_HEIGHT, new Integer(jasperPrint.getPageHeight()));
//                    exporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.PAGE_WIDTH, new Integer(jasperPrint.getPageWidth()));
//                    exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG, Boolean.FALSE);
//                    exporter.setParameter(JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.FALSE);
//                    exporter.exportReport();

                    CJRPrinterAWT.printPages(reportname, jasperPrint, 0, jasperPrint.getPages().size() - 1, false);

//                    net.sf.jasperreports.engine.export.JRTextExporter txtExporter = new net.sf.jasperreports.engine.export.JRTextExporter();
//
//                    txtExporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
//
//                    txtExporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.BETWEEN_PAGES_TEXT, "\f");                
//                    txtExporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.PAGE_HEIGHT, new Integer(jasperPrint.getPageHeight()));
//                    txtExporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.PAGE_WIDTH, new Integer(jasperPrint.getPageWidth()));
//                    txtExporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.CHARACTER_WIDTH, new Integer(7));
//                    txtExporter.setParameter(net.sf.jasperreports.engine.export.JRTextExporterParameter.CHARACTER_HEIGHT, new Integer(14));
//                    txtExporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "c:\\"+reportname+".txt");
//                    txtExporter.exportReport();
//
//                    java.io.FileInputStream fileStream = new java.io.FileInputStream("c:\\"+reportname+".txt");
//                    javax.print.DocFlavor flavor = javax.print.DocFlavor.INPUT_STREAM.AUTOSENSE;
//                    javax.print.Doc mydoc = new javax.print.SimpleDoc(fileStream, flavor, null);
//                    PrintService[] services = javax.print.PrintServiceLookup.lookupPrintServices(flavor, null);
//                    for (int i=0; i<services.length; i++) {
//                        System.out.println("#$#$ "+services[i].getName());
//                        if (services[i].getName().equals(ReadXMLForPrint.readPrintXML(reportname))) {
//                            javax.print.DocPrintJob job = services[i].createPrintJob();
//                            job.print(mydoc, null);
//                        }
//                    }
//                    services = null;
//                    mydoc = null;
//                    flavor = null;
//                    fileStream.close();
//                    fileStream = null;
//                    txtExporter = null;

                } else {
                    JasperViewer.viewReport(jasperPrint, reportname + " - CBMS++", false);
                }
            } catch (Exception e) {
                ClientUtil.showAlertWindow(e.getMessage());
                e.printStackTrace();
            }
        } else {
            ClientUtil.showMessageWindow("No data found...");
        }

        jasperDesign = null;
        dynamicParamMap = null;
        where = null;
        parameterMap = null;
        return;
    }

    // PDF file will be stored as C:\Test.pdf by default
    public static void integrationForPrintToPDF(String reportname) {
        String roleID = com.see.truetransact.ui.TrueTransactMain.ROLE_ID;
        LinkedHashMap dynamicParamMap = new LinkedHashMap();
        JasperDesign jasperDesign = null;
        LinkedHashMap parameterMap = new LinkedHashMap();
        //        if (reportname.equals("SubDay")) {
        HashMap where = new HashMap();
        where.put(CommonConstants.MAP_NAME, "GET_JASPER_REPORT_PARAMS_FOR_RP");
        parameterMap.putAll(passBookPar);
        //        parameterMap.put("TransId",passBookPar.get("TransId"));
        parameterMap.put("REPORT_NAME", reportname);
        parameterMap.put("ROLE_ID", roleID);
        where.put(CommonConstants.MAP_WHERE, parameterMap);
        try {
            // create the proxy
            where = proxy.executeQuery(where, mapJNDI);
        } catch (Exception e) {
            e.printStackTrace();
        }

        JasperPrint jasperPrint = null;
        if (where != null && where.size() > 0 && ((List) where.get(CommonConstants.DATA)).size() > 0) {
            jasperPrint = (JasperPrint) ((List) where.get(CommonConstants.DATA)).get(0);
            if (((List) where.get(CommonConstants.DATA)).size() > 1) {
                // The following line can be used for Notice Charge updations
                passBookPar.put("LAST_SLNO", ((List) where.get(CommonConstants.DATA)).get(1));
            }
            try {
                System.out.println("inside integrationForPrintToPDF :" + reportname);
                JasperPrintManager.printReportToPdfFile(jasperPrint, "C:\\Test.pdf");
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            ClientUtil.showMessageWindow("No data found...");
        }
        jasperDesign = null;
        dynamicParamMap = null;
        where = null;
        parameterMap = null;
        return;
    }

    public static boolean getParamValues(LinkedHashMap dynamicParamMap, String reportName) {
        isOkClicked = false;
        boolean interBranchAllowed = true;
        boolean reportExportAllowed = false;
        //        jLabel1.setText("Building parameter window..");
        final LinkedHashMap parammap = dynamicParamMap;
        String roleID = com.see.truetransact.ui.TrueTransactMain.ROLE_ID;
        boolean blnOk = false;
        javax.swing.JFrame ImageFrame = new javax.swing.JFrame();
        final JDialog jDlgParam = new JDialog(ImageFrame);
//        final JDialog jDlgParam = new JDialog();  // Changed by Rajesh
        jDlgParam.setModal(true);
        java.awt.Dimension screensize = new java.awt.Dimension();
        java.awt.Toolkit tool = java.awt.Toolkit.getDefaultToolkit();
        screensize = tool.getScreenSize();
        System.out.println("inside getParamValues..." + parammap);
        System.out.println("paramMaps" + paramMaps);

        int intNoOfParams = parammap.size();
        int intCols = 2;
        int intRows = 0;
        int intHeight = 0;
        boolean iiss = false;
        if (intNoOfParams > 6) {
            intHeight = 300;
        } else {
            intHeight = (intNoOfParams * 40) + 80;//babu changed height 50 to 80
        }
        jDlgParam.setResizable(false);
        jDlgParam.setSize(350, intHeight);
        jDlgParam.setTitle("Enter Parameter Values for : " + reportName);
        jDlgParam.setLocation(screensize.width / 4, screensize.height / 4);
        jDlgParam.getContentPane().setLayout(new java.awt.GridBagLayout());


        Object dynamicParamMapKey[] = null;
        dynamicParamMapKey = parammap.keySet().toArray();
        javax.swing.JScrollPane srpReportParameter = new javax.swing.JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        srpReportParameter.setMinimumSize(new java.awt.Dimension(300, 225));
        javax.swing.JPanel jPanelParam = new javax.swing.JPanel(new java.awt.GridBagLayout());
        jPanelParam.setBorder(new javax.swing.border.LineBorder(java.awt.Color.LIGHT_GRAY, 0));

        javax.swing.JLabel lblParam[] = new javax.swing.JLabel[dynamicParamMapKey.length];
        javax.swing.JLabel lblFormat[] = new javax.swing.JLabel[dynamicParamMapKey.length];
        CTextField txtParam[] = new CTextField[dynamicParamMapKey.length];
        javax.swing.JCheckBox chkParam[] = new javax.swing.JCheckBox[dynamicParamMapKey.length];
        com.see.truetransact.uicomponent.CDateField cDatefield[] = new com.see.truetransact.uicomponent.CDateField[dynamicParamMapKey.length];
        com.see.truetransact.uicomponent.CComboBox cComboBox[] = new com.see.truetransact.uicomponent.CComboBox[dynamicParamMapKey.length];
        // com.see.truetransact.uicomponent.CButton  SEARCH=new   com.see.truetransact.uicomponent.CButton();
        JButton SEARCH = new JButton("SEARCH");
        JButton LOANSEARCH = new JButton("SEARCH");
        JButton btnAcHd = new JButton("SEARCH");
        int dynamicParamMapKeyCount = dynamicParamMapKey.length;
        int intCount = 0;
        for (int i = 0; i < dynamicParamMapKeyCount; i++) {
            if (!dynamicParamMapKey[i].toString().equalsIgnoreCase("reportname")) {

                String strOptional = "";

                String strText = "";
                boolean blnDate = false;
                boolean comboBln = false;
                //                        if(parammap.get(dynamicParamMapKey[i].toString()) instanceof ParameterBean){
                HashMap paramBean = (HashMap) parammap.get(dynamicParamMapKey[i].toString());
                String paramName = CommonUtil.convertObjToStr(paramBean.get("PARAM_NAME"));
                ParameterName = paramName;
                int dataType = CommonUtil.convertObjToInt(paramBean.get("DATA_TYPE"));
                ArrayList arrList = (ArrayList) paramBean.get("PARAM_LIST");
                String paramValue = CommonUtil.convertObjToStr(paramBean.get("PARAM_VALUE"));
                System.out.println("paramValueparamValue" + paramValue);
                boolean optional = new Boolean(CommonUtil.convertObjToStr(paramBean.get("OPTIONAL"))).booleanValue();
                HashMap checkMap = new HashMap();
                checkMap.put("ROLE_ID", roleID);
                checkMap.put("SCREEN_CLASS", reportName);
                List roleLst = ClientUtil.executeQuery("getAccessRightsForReportView", checkMap);
                if (roleLst != null && roleLst.size() > 0) {
                    checkMap = (HashMap) roleLst.get(0);
                    if (checkMap.containsKey("INTERBRANCH_ALLOWED") && checkMap.get("INTERBRANCH_ALLOWED") != null) {
                        if (CommonUtil.convertObjToStr(checkMap.get("INTERBRANCH_ALLOWED")).equalsIgnoreCase("N")) {
                            interBranchAllowed = false;
                        }
                    }                    
                    if (checkMap.containsKey("REPORT_EXPORT_ALLOWED") && checkMap.get("REPORT_EXPORT_ALLOWED") != null) {
                        if (CommonUtil.convertObjToStr(checkMap.get("REPORT_EXPORT_ALLOWED")).equalsIgnoreCase("Y")) {
                            reportExportAllowed = true;
                        }
                    }                    
                }
                if (dataType == 91 || dataType == 93) {
                    blnDate = true;
                    cDatefield[i] = new com.see.truetransact.uicomponent.CDateField(false);
                } else if ((dataType == 12 && arrList != null && arrList.size() > 0) && !paramName.equals("MemberNo") && !paramName.equals("InvestNo") && !paramName.equals("AccountNo") && !paramName.equals("ChittalNo")) {
                    com.see.truetransact.clientutil.ComboBoxModel cbm = new com.see.truetransact.clientutil.ComboBoxModel();
                    cbm.addElement("");
                    int oldLength = 0;
                    int length = 0;

                    System.out.println("$#$# arrList.size() (combo box values) in getParamValues : " + arrList.size());
                    for (int e = 0; e < arrList.size(); e++) {
                        cbm.addElement(arrList.get(e));
                        length = CommonUtil.convertObjToStr(arrList.get(e)).length();
                        if (length > oldLength) {
                            oldLength = length;
                        }
                    }
                    oldLength = oldLength * 7;
                    if (oldLength < 100) {
                        oldLength = 100;
                    }
                    arrList = null;
                    cComboBox[i] = new com.see.truetransact.uicomponent.CComboBox();
                    if (paramName.equals("AccountNo") || paramName.equals("MemNo") || paramName.equals("Sec1") || paramName.equals("Sec2") || paramName.equals("ShareNo") || paramName.equals("InvestmentNo") || paramName.equals("BorrowingNo")) // if(paramName.equals("AccountNo")||paramName.equals("MemberNo")||paramName.equals("MemNo")||paramName.equals("Sec1")||paramName.equals("Sec2")||paramName.equals("ShareNo")||paramName.equals("InvestmentNo")||paramName.equals("BorrowingNo"))
                    {
                        cComboBox[i].setEditable(true);
                    } else {
                        cComboBox[i].setEditable(false);
                    }
                    cComboBox[i].setSize(150, 21);
                    cComboBox[i].setPreferredSize(new java.awt.Dimension(150, 21));
                    cComboBox[i].setModel(cbm);
                    cComboBox[i].setPopupWidth(oldLength);
                    comboBln = true;
                } else if (dataType == 12 && paramName.equals("InvestNo")) {
                    txtInvestmentNo.setEditable(true);
                    txtInvestmentNo.setSize(150, 21);
                    txtInvestmentNo.setPreferredSize(new java.awt.Dimension(150, 21));
                    SEARCH.setSize(30, 21);
                    SEARCH.setPreferredSize(new java.awt.Dimension(30, 21));
                    comboBln = true;
                } else if (dataType == 12 && paramName.equals("MemberNo")) {
                    memberfield.setEditable(true);
                    memberfield.setSize(150, 21);
                    memberfield.setPreferredSize(new java.awt.Dimension(150, 21));
                    SEARCH.setSize(30, 21);
                    SEARCH.setPreferredSize(new java.awt.Dimension(30, 21));
                    comboBln = true;
                } else if (dataType == 12 && paramName.equals("AcHdDesc")) {
                    txtAccHd.setEditable(true);
                    txtAccHd.setSize(150, 21);
                    txtAccHd.setPreferredSize(new java.awt.Dimension(150, 21));
                    btnAcHd.setSize(30, 21);
                    btnAcHd.setPreferredSize(new java.awt.Dimension(30, 21));
                    comboBln = true;
                } else if (dataType == 12 && paramName.equals("AccountNo")) {
                    txtAccNo.setEditable(true);
                    txtAccNo.setSize(150, 21);
                    txtAccNo.setPreferredSize(new java.awt.Dimension(150, 21));
                    txtAccNo.setAllowAll(true);
                    SEARCH.setSize(30, 21);
                    SEARCH.setPreferredSize(new java.awt.Dimension(30, 21));
                    comboBln = true;
                } else if (dataType == 12 && paramName.equals("ChittalNo")) {
                    txtChittalNo.setEditable(true);
                    txtChittalNo.setSize(150, 21);
                    txtChittalNo.setPreferredSize(new java.awt.Dimension(150, 21));
                    txtChittalNo.setAllowAll(true);
                    SEARCH.setSize(30, 21);
                    SEARCH.setPreferredSize(new java.awt.Dimension(30, 21));
                    comboBln = true;
                } else if (dataType == 12 && paramName.equals("CustomerId")) {
                    txtCustomerId.setEditable(true);
                    txtCustomerId.setSize(150, 21);
                    txtCustomerId.setPreferredSize(new java.awt.Dimension(150, 21));
                    txtCustomerId.setAllowAll(true);
                    SEARCH.setSize(30, 21);
                    SEARCH.setPreferredSize(new java.awt.Dimension(30, 21));
                    comboBln = true;
                } else if (dataType == 12 && paramName.equals("LoanNo")) {
                    txtLoanNo.setEditable(true);
                    txtLoanNo.setSize(150, 21);
                    txtLoanNo.setPreferredSize(new java.awt.Dimension(150, 21));
                    txtLoanNo.setAllowAll(true);
                    LOANSEARCH.setSize(30, 21);
                    LOANSEARCH.setPreferredSize(new java.awt.Dimension(30, 21));
                    comboBln = true;
                } else {
                    txtParam[i] = new CTextField();
                    txtParam[i].setAllowAll(true);
                    // Added by nithya on 23-04-2018 for 0008789: Need to restrict one branch to see other branch reports
                    if(paramName.equalsIgnoreCase("BranchId") && dataType == 12){
//                        HashMap checkMap = new HashMap();
//                        checkMap.put("ROLE_ID",roleID);
//                        checkMap.put("SCREEN_CLASS",reportName);
//                        List roleLst = ClientUtil.executeQuery("getAccessRightsForReportView", checkMap);
//                        if(roleLst != null && roleLst.size() > 0){
//                            checkMap = (HashMap)roleLst.get(0);
//                            if(checkMap.containsKey("INTERBRANCH_ALLOWED") && checkMap.get("INTERBRANCH_ALLOWED") != null){
//                                if(CommonUtil.convertObjToStr(checkMap.get("INTERBRANCH_ALLOWED")).equalsIgnoreCase("N")){
//                                  txtParam[i].setEditable(false);  
//                                }
//                            }
//                        }
                         
                         if(!interBranchAllowed){
                             txtParam[i].setEditable(false);  
                         }
                    }
                    // End of 0008789
                }
                System.out.println("@#@# roleID from IIEConfig : " + roleID);
                if (paramValue != null && paramValue.length() > 0) {
                    strText = paramValue;
                    if ((!blnDate) && (!comboBln)) {
//                        if (!roleID.equals("ROL01")) {
//                            txtParam[i].setEnabled(false);
//                        }
                    }
                }

                if (!optional) {
                    strOptional = "*";
                }
                lblParam[i] = new javax.swing.JLabel();
                String lblCaption = paramName;
                lblCaption = lblCaption.replaceAll("_", " ");
                if (lblCaption.indexOf(".") > 0) {
                    lblCaption = lblCaption.substring(lblCaption.lastIndexOf(".") + 1, lblCaption.length());
                }
                lblParam[i].setText(lblCaption + " " + strOptional);
                lblParam[i].setName("lbl_" + paramName);
                java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = (i + 1);
                gridBagConstraints.insets = new java.awt.Insets(4, 3, 4, 3);
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                jPanelParam.add(lblParam[i], gridBagConstraints);

                if (!blnDate && !comboBln) {
                    txtParam[i].setText(strText);
                    txtParam[i].setName("txt_" + paramName);
                    txtParam[i].setMinimumSize(new java.awt.Dimension(100, 21));
                    txtParam[i].setPreferredSize(new java.awt.Dimension(100, 21));
                } else if (comboBln && !paramName.equals("MemberNo") && !paramName.equals("AcHdDesc") && !paramName.equals("InvestNo") && !paramName.equals("AccountNo") && !paramName.equals("ChittalNo") && !paramName.equals("CustomerId") && !paramName.equals("LoanNo")) {
                    if (strText.length() > 0) {
                        cComboBox[i].setSelectedItem(strText);
                    }
                    cComboBox[i].setName("cbo_" + paramName);
                } else if (comboBln && paramName.equals("MemberNo")) {
                    memberfield.setName("cbo_" + paramName);
                } else if (comboBln && paramName.equals("AcHdDesc")) {
                    txtAccHd.setName("cbo_" + paramName);
                } else if (comboBln && paramName.equals("InvestNo")) {
                    txtInvestmentNo.setName("cbo_" + paramName);
                    if (strText.length() > 0) { // Added by nithya for KD-1916
                        txtInvestmentNo.setText(strText);
                    }
                } else if (comboBln && paramName.equals("AccountNo")) {
                    txtAccNo.setName("cbo_" + paramName);
                    if (strText.length() > 0) {
                        txtAccNo.setText(strText);
                    }
                } else if (comboBln && paramName.equals("ChittalNo")) {
                    txtChittalNo.setName("cbo_" + paramName);
                    if (strText.length() > 0) {
                        txtChittalNo.setText(strText);
                    }
                } else if (comboBln && paramName.equals("CustomerId")) {
                    txtCustomerId.setName("cbo_" + paramName);
                    if (strText.length() > 0) {
                        txtCustomerId.setText(strText);
                    }
                } else if (comboBln && paramName.equals("LoanNo")) {
                    txtLoanNo.setName("cbo_" + paramName);
                    if (strText.length() > 0) {
                        txtLoanNo.setText(strText);
                    }
                } else {
                    if(parammap.containsKey("FromDate") && CommonUtil.convertObjToStr(paramName).equals("FromDate")){
                    	cDatefield[i].setDateValue(""); 
                    }else{
                    	cDatefield[i].setDateValue(strText);
                    }
                    cDatefield[i].setToolTipText("Please choose the date using this control.");
                    cDatefield[i].setName("txt_" + paramName);
                    cDatefield[i].setMinimumSize(new java.awt.Dimension(100, 21));
                    cDatefield[i].setPreferredSize(new java.awt.Dimension(100, 21));
                }

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = (i + 1);
                gridBagConstraints.insets = new java.awt.Insets(4, 3, 4, 3);
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;

                if (!blnDate && !comboBln) {
                    jPanelParam.add(txtParam[i], gridBagConstraints);
                } else if (comboBln && !paramName.equals("MemberNo") && !paramName.equals("AcHdDesc") && !paramName.equals("InvestNo") && !paramName.equals("AccountNo") && !paramName.equals("ChittalNo") && !paramName.equals("CustomerId") && !paramName.equals("LoanNo")) {
                    jPanelParam.add(cComboBox[i], gridBagConstraints);
                } else if (comboBln && paramName.equals("MemberNo")) {
                    jPanelParam.add(memberfield, gridBagConstraints);
                    viewtype = 2;
                } else if (comboBln && paramName.equals("AcHdDesc")) {
                    jPanelParam.add(txtAccHd, gridBagConstraints);
                    viewtype = 3;
                } else if (comboBln && paramName.equals("InvestNo")) {
                    jPanelParam.add(txtInvestmentNo, gridBagConstraints);
                    viewtype = 4;
                } else if (comboBln && paramName.equals("AccountNo")) {
                    jPanelParam.add(txtAccNo, gridBagConstraints);
                    viewtype = 5;
                } else if (comboBln && paramName.equals("ChittalNo")) {
                    jPanelParam.add(txtChittalNo, gridBagConstraints);
                    viewtype = 6;
                } else if (comboBln && paramName.equals("CustomerId")) {
                    jPanelParam.add(txtCustomerId, gridBagConstraints);
                    viewtype = 7;
                } else if (comboBln && paramName.equals("LoanNo")) {
                    jPanelParam.add(txtLoanNo, gridBagConstraints);
                    viewtype = 8;
                } else {
                    jPanelParam.add(cDatefield[i], gridBagConstraints);
                }
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = (i + 1);
                gridBagConstraints.insets = new java.awt.Insets(4, 3, 4, 3);
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;

                if (paramName.equals("MemberNo") || paramName.equals("InvestNo") || paramName.equals("AccountNo") || paramName.equals("ChittalNo") || paramName.equals("CustomerId")) {

                    jPanelParam.add(SEARCH, gridBagConstraints);
                }
                if (paramName.equals("LoanNo")) {
                    jPanelParam.add(LOANSEARCH, gridBagConstraints);
                }
                if (paramName.equals("AcHdDesc")) {

                    jPanelParam.add(btnAcHd, gridBagConstraints);
                }
                passBookPar = null;
            }
            intCount = i;
        }
        srpReportParameter.setViewportView(jPanelParam);
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1;
        gridBagConstraints.weighty = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 0);

        jDlgParam.getContentPane().add(srpReportParameter, gridBagConstraints);

        JPanel buttonPanel = new JPanel();
        final JCheckBox okCheckBox = new JCheckBox("Export to Excel");
        JButton okButton = new JButton("OK");
        JButton cancelButton = new JButton("CANCEL");
        JLabel gaplbl = new JLabel();
        gaplbl.setText("    ");
        //gaplbl.setSize(50,10);
        buttonPanel.setLayout(new java.awt.GridBagLayout());
        buttonPanel.add(okCheckBox);
        buttonPanel.add(okButton);
        buttonPanel.add(gaplbl);
        buttonPanel.add(cancelButton);
        buttonPanel.setMinimumSize(new java.awt.Dimension(200, 50));
        buttonPanel.setAlignmentX(CENTER_ALIGNMENT);
        buttonPanel.setAlignmentY(CENTER_ALIGNMENT);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.CENTER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jDlgParam.getContentPane().add(buttonPanel, gridBagConstraints);

                
        if(!reportExportAllowed){
            okCheckBox.setVisible(false);
        }
              
        cancelButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                jDlgParam.dispose();
                jDlgParam.setTitle("C");
            }
        });

        SEARCH.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                String mapName = "";
                   
                if (paramMaps.containsKey("REPORT_NAME") && paramMaps.get("REPORT_NAME") != null) {
                    String reportName = CommonUtil.convertObjToStr(paramMaps.get("REPORT_NAME"));
                    if (reportName.contains("Ledger")) {
                        System.out.println("Its found");
                    } else {
                        System.out.println("Its not found");
                    }
                    if (reportName.equals("OALedger")) {
                        mapName = "getselectAccountNumber";
                    } else if (reportName.equals("TermDepositLedger")) {
                        mapName = "getselectTermDepositAccountNo";
                    } else if (reportName.equals("Rdledger")) {
                        mapName = "getselectRDAccountNo";
                    } else if (reportName.equals("DailyLedger")) {
                        mapName = "getselectDailyDepositAccountNo";
                    } else if (reportName.equals("TLLedger") || reportName.equals("TLLedgerBw")) {
                        mapName = "getselectLoanAccountNumber";
                    } else if (reportName.equals("GL_Ledger")) {
                        mapName = "getselectLoanAccountNumberForGL";
                    } else if (reportName.equals("Suspense_Ledger") || reportName.equals("Suspense_LedgerBw")) {
                        mapName = "getselectSuspenseAccNumber";
                    } else if (reportName.equals("DLLedger")) {
                        mapName = "getselectLoanAccountNumberForDL";
                    } else if (reportName.equals("ADLedger") || reportName.equals("ADLedgerBw")) {
                        mapName = "getselectLoanAccountNumberForAD";
                    } else if (reportName.equals("InvestmentLedger") || reportName.equals("InvestmentLedgerBw")) {
                        mapName = "getselectInvestmentAccount";
                    } else if (reportName.equals("MDSLedger") || reportName.equals("MDSLedgerBw")) {
                        mapName = "getselectChittalNumber";
                    } else if (reportName.equals("OBAc_Ledger") || reportName.equals("OBAc_LedgerBw")) {
                        mapName = "getselectOtherBankActMaster";
                    } else if (reportName.equals("GrpLoanLedgerCustomerWise") && viewtype == 7) {
                        mapName = "getselectGrpLoanLedgerCustomer";
                    } else if (reportName.equals("GrpLoanLedger") && viewtype == 8) {
                        mapName = "getGroupLoanDetails";
                    } else if (reportName.equals("LockerLedger") && viewtype == 5) {
                        mapName = "getSelectLockerLedger";
                    } else if (reportName.equals("Thriftledger")) {
                        mapName = "getselectThriftAccountNo";
                    }

                }
                if (viewtype == 2) {
                    final HashMap viewMap = new HashMap();
                    HashMap whereMap=new HashMap();
                    viewMap.put(CommonConstants.MAP_WHERE, whereMap);
                    viewMap.put(CommonConstants.MAP_NAME, "getselectShareAcct");
                    new ViewAll(jDlgParam, viewMap).show();
                } else if (viewtype == 4 || viewtype == 5 || viewtype == 6 || viewtype == 8) {
                    HashMap viewMap = new HashMap();
                    HashMap whereMap=new HashMap();
                    viewMap.put(CommonConstants.MAP_WHERE, whereMap);
                    viewMap.put(CommonConstants.MAP_NAME, mapName);
                    new ViewAll(jDlgParam, viewMap).show();
                } else if (viewtype == 7) {
                    HashMap viewMap = new HashMap();
                    HashMap keyMap = new HashMap();
                    System.out.println("txtAccNo.getText()txtAccNo.getText()" + txtAccNo.getText());
                    keyMap.put("ACT_NUM", (String) txtLoanNo.getText());
                    viewMap.put(CommonConstants.MAP_WHERE, keyMap);
                    if (mapName != null && mapName.length() > 0) {
                        viewMap.put(CommonConstants.MAP_NAME, mapName);
                    } else {
                        viewMap.put(CommonConstants.MAP_NAME, "getSelectCustDetails");
                    }
                    new ViewAll(jDlgParam, viewMap).show();
                    
                }
            }
        });

        LOANSEARCH.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                String mapName = "";
                System.out.println("paramMaps%%%%%%%%%%" + paramMaps);
                if (paramMaps.containsKey("REPORT_NAME") && paramMaps.get("REPORT_NAME") != null) {
                    String reportName = CommonUtil.convertObjToStr(paramMaps.get("REPORT_NAME"));
                    if (reportName.contains("Ledger")) {
                        System.out.println("Its found");
                    } else {
                        System.out.println("Its not found");
                    }
                    if (reportName.equals("GrpLoanLedger") && viewtype == 8) {
                        mapName = "getGroupLoanDetails";
                    } else if (reportName.equals("GrpLoanLedgerCustomerWise") && viewtype == 7) {
                        mapName = "getGroupLoanDetails";
                    }
                    else if(viewtype == 8)
                    {
                      mapName = "getselectLoanAccountNumber";
                    }
                }
                HashMap viewMap = new HashMap();
                viewMap.put(CommonConstants.MAP_NAME, mapName);
                new ViewAll(jDlgParam, viewMap).show();

            }
        });

        btnAcHd.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                if (viewtype == 3) {
                    final HashMap viewMap = new HashMap();
                    viewMap.put(CommonConstants.MAP_NAME, "getSelectAcctHead");
                    new ViewAll(jDlgParam, viewMap).show();
                }
            }
        });

        okButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                Component comps = jDlgParam.getContentPane().getComponent(0);
                if (comps instanceof javax.swing.JScrollPane) { // scrollpane returns

                    javax.swing.JScrollPane srPane = (JScrollPane) comps;
                    Component[] components = srPane.getViewport().getComponents(); //getting the viewport from scrollpane
                    if (components[0] instanceof javax.swing.JPanel) {
                        javax.swing.JPanel panel = (javax.swing.JPanel) components[0];
                        for (int j = 0; j < panel.getComponentCount(); j++) {
                            Component comp = panel.getComponent(j);
                            System.out.println("name " + j + "   " + comp.getName());
                            String strCompName = "";
                            String strCompValue = "";
                            if (comp.getName() != null && comp.getName().startsWith("txt")) {

                                HashMap paramBean = (HashMap) parammap.get(comp.getName().substring(4, comp.getName().length()));
                                if (paramBean != null) {
                                    System.out.println("@#@#@#@# comp.getName() : " + comp.getName());
                                    strCompName = comp.getName().substring(4, comp.getName().length());
                                    int dataType = CommonUtil.convertObjToInt(paramBean.get("DATA_TYPE"));
                                    if (dataType == 91 || dataType == 93) {
                                        strCompValue = ((com.see.truetransact.uicomponent.CDateField) comp).getDateValue();
                                        //                                            String strCompValueArr[] = strCompValue.split("/");
                                        //                                            if(strCompValueArr.length==3)
                                        //                                                strCompValue = strCompValueArr[1]+"/"+strCompValueArr[0]+"/"+strCompValueArr[2];
                                        //                                            System.out.println("Date Convertion to mm/dd/yyyy value "+strCompValue);
                                        System.out.println("Date Convertion to dd/mm/yyyy value " + strCompValue);
                                        if (CommonUtil.convertObjToStr(strCompValue).length() > 0) {
                                            Date tempDt = DateUtil.getDateMMDDYYYY(strCompValue);
                                            Date passDt = (Date) currDt.clone();
                                            passDt.setDate(tempDt.getDate());
                                            passDt.setMonth(tempDt.getMonth());
                                            passDt.setYear(tempDt.getYear());
                                            paramBean.put("PARAM_VALUE", passDt);
                                        } else {
                                            ClientUtil.showAlertWindow("Please select FromDate/ToDate...");
                                            return;
                                           // paramBean.put("PARAM_VALUE", null);
                                        }
                                    } else {
                                        strCompValue = ((JTextField) comp).getText();
                                        try {
                                            Class dynamicClass = Class.forName((String) paramBean.get("VALUE_CLASS"));
                                            // Find the constructor that only takes a String.
                                            Class[] ctorArgs1 = new Class[1];
                                            ctorArgs1[0] = String.class;
                                            java.lang.reflect.Constructor strCtor = dynamicClass.getDeclaredConstructor(ctorArgs1);
                                            Object params[] = new Object[1];
                                            params[0] = strCompValue;
                                            Object obj = strCtor.newInstance(params);
                                            paramBean.put("PARAM_VALUE", obj);
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                    }
                                    parammap.put(strCompName, paramBean);
                                }
                            } else if (comp.getName() != null && comp.getName().startsWith("cbo") && !comp.getName().equals("cbo_MemberNo") && !comp.getName().equals("cbo_AcHdDesc") && !comp.getName().equals("cbo_InvestNo") && !comp.getName().equals("cbo_AccountNo") && !comp.getName().equals("cbo_ChittalNo") && !comp.getName().equals("cbo_CustomerId") && !comp.getName().equals("cbo_LoanNo")) {
                                strCompValue = ((com.see.truetransact.uicomponent.CComboBox) comp).getSelectedItem().toString();
                                HashMap paramBean = (HashMap) parammap.get(comp.getName().substring(4, comp.getName().length()));
                                if (paramBean != null) {
                                    parammap.put(strCompName, paramBean);
                                    paramBean.put("PARAM_VALUE", strCompValue);
                                }
                            } //added by rish
                            else if (comp.getName() != null && comp.getName().startsWith("cbo") & comp.getName().equals("cbo_MemberNo")) {
                                strCompValue = ((com.see.truetransact.uicomponent.CTextField) comp).getText().toString();
                                HashMap paramBean = (HashMap) parammap.get(comp.getName().substring(4, comp.getName().length()));
                                if (paramBean != null) {
                                    parammap.put(strCompName, paramBean);
                                    paramBean.put("PARAM_VALUE", strCompValue);
                                }
                            } else if (comp.getName() != null && comp.getName().startsWith("cbo") & comp.getName().equals("cbo_AcHdDesc")) {
                                strCompValue = ((com.see.truetransact.uicomponent.CTextField) comp).getText().toString();
                                HashMap paramBean = (HashMap) parammap.get(comp.getName().substring(4, comp.getName().length()));
                                if (paramBean != null) {
                                    parammap.put(strCompName, paramBean);
                                    paramBean.put("PARAM_VALUE", strCompValue);
                                }

                            } else if (comp.getName() != null && comp.getName().startsWith("cbo") & comp.getName().equals("cbo_InvestNo")) {
                                strCompValue = ((com.see.truetransact.uicomponent.CTextField) comp).getText().toString();
                                HashMap paramBean = (HashMap) parammap.get(comp.getName().substring(4, comp.getName().length()));
                                if (paramBean != null) {
                                    parammap.put(strCompName, paramBean);
                                    paramBean.put("PARAM_VALUE", strCompValue);
                                }

                            } else if (comp.getName() != null && comp.getName().startsWith("cbo") & comp.getName().equals("cbo_AccountNo")) {
                                strCompValue = ((com.see.truetransact.uicomponent.CTextField) comp).getText().toString();
                                HashMap paramBean = (HashMap) parammap.get(comp.getName().substring(4, comp.getName().length()));
                                if (paramBean != null) {
                                    parammap.put(strCompName, paramBean);
                                    paramBean.put("PARAM_VALUE", strCompValue);
                                }

                            } else if (comp.getName() != null && comp.getName().startsWith("cbo") & comp.getName().equals("cbo_ChittalNo")) {
                                strCompValue = ((com.see.truetransact.uicomponent.CTextField) comp).getText().toString();
                                HashMap paramBean = (HashMap) parammap.get(comp.getName().substring(4, comp.getName().length()));
                                if (paramBean != null) {
                                    parammap.put(strCompName, paramBean);
                                    paramBean.put("PARAM_VALUE", strCompValue);
                                }

                            } else if (comp.getName() != null && comp.getName().startsWith("cbo") & comp.getName().equals("cbo_CustomerId")) {
                                strCompValue = ((com.see.truetransact.uicomponent.CTextField) comp).getText().toString();
                                HashMap paramBean = (HashMap) parammap.get(comp.getName().substring(4, comp.getName().length()));
                                if (paramBean != null) {
                                    parammap.put(strCompName, paramBean);
                                    paramBean.put("PARAM_VALUE", strCompValue);
                                }

                            } else if (comp.getName() != null && comp.getName().startsWith("cbo") & comp.getName().equals("cbo_LoanNo")) {
                                strCompValue = ((com.see.truetransact.uicomponent.CTextField) comp).getText().toString();
                                HashMap paramBean = (HashMap) parammap.get(comp.getName().substring(4, comp.getName().length()));
                                if (paramBean != null) {
                                    parammap.put(strCompName, paramBean);
                                    paramBean.put("PARAM_VALUE", strCompValue);
                                }

                            }


                        }

                    }
                }
                if (!validateField(parammap, true)) {
                    StringBuffer errorMsg = new StringBuffer();
                    Object keys[] = errorMap.entrySet().toArray();
                    Object values[] = errorMap.values().toArray();
                    for (int i = 0; i < errorMap.size(); i++) {
                        //System.out.println("errorMap value "+(String)values[i]);
                        errorMsg.append((String) values[i] + "\n");
                    }
                    JOptionPane.showMessageDialog(null, errorMsg.toString());
                } else {
                    System.out.println("!@#!@# After setting all paramvalues :" + parammap);
                    jDlgParam.setVisible(false);
                    isOkClicked = true;
                    if (okCheckBox.isSelected()) {
                        isCheckClicked = true;
                    }
                }

            }
        });
        System.out.println("Title " + jDlgParam.getTitle());
        jDlgParam.show();
        blnOk = isOkClicked;
        //        jLabel1.setText("Enter parameter values.. Select Optional/Manual Check box if needed");
        System.out.println("isokclicked " + blnOk);
        memberfield.setText(null);
        txtAccHd.setText(null);
        txtInvestmentNo.setText(null);
        txtAccNo.setText(null);
        txtChittalNo.setText(null);
        return blnOk;
    }

    public static boolean validateField(LinkedHashMap paramlist, boolean jasper) {
        boolean result = true;

        Object keys[] = paramlist.keySet().toArray();
        System.out.println("paramlist " + paramlist);
        errorMap.clear();
        for (int i = 0; i < paramlist.size(); i++) {
            HashMap paramBean = (HashMap) paramlist.get(keys[i]);
            String paramName = CommonUtil.convertObjToStr(keys[i]);
            //If param type is null then treat that as a mandatory field
            boolean optional = new Boolean(CommonUtil.convertObjToStr(paramBean.get("OPTIONAL"))).booleanValue();
            String paramValue = CommonUtil.convertObjToStr(paramBean.get("PARAM_VALUE"));
            String strParamName = paramName.replaceAll("_", " ");
            if (strParamName.indexOf(".") > 0) {
                strParamName = strParamName.substring(strParamName.lastIndexOf(".") + 1, strParamName.length());
            }
            if (!optional) {
                System.out.println("ParamName " + keys[i]);
                if (paramValue.length() == 0) {

                    errorMap.put(paramName, " Value in " + strParamName + " cannot be Empty");
                    result = false;
                } else {                             // if the value is not empty then check for validation
                    //check for optional also
                    String strResult = "";

                    if (paramName.equalsIgnoreCase("FROMDATE") || paramName.equalsIgnoreCase("TODATE")) {
                        Object[] obj = paramlist.keySet().toArray();
                        String strParamFromDt = "";
                        String strParamToDt = "";
                        for (int o = 0; o < obj.length; o++) {
                            if (CommonUtil.convertObjToStr(obj[o]).equalsIgnoreCase("FROMDATE")) {
                                strParamFromDt = CommonUtil.convertObjToStr(obj[o]);
                            }
                            if (CommonUtil.convertObjToStr(obj[o]).equalsIgnoreCase("TODATE")) {
                                strParamToDt = CommonUtil.convertObjToStr(obj[o]);
                            }
                        }
                        result = validateDates((Date) ((HashMap) paramlist.get(strParamFromDt)).get("PARAM_VALUE"),
                                (Date) ((HashMap) paramlist.get(strParamToDt)).get("PARAM_VALUE"));
                        if (!result) {
                            errorMap.put("FROMDATE and TODATE", "FROMDATE cannot be higher than TODATE.");
                        }
                    }

                    if (paramName.equalsIgnoreCase("START_DATE") || paramName.equalsIgnoreCase("END_DATE")) {
                        Object[] obj = paramlist.keySet().toArray();
                        String strParamFromDt = "";
                        String strParamToDt = "";
                        for (int o = 0; o < obj.length; o++) {
                            if (CommonUtil.convertObjToStr(obj[o]).equalsIgnoreCase("START_DATE")) {
                                strParamFromDt = CommonUtil.convertObjToStr(obj[o]);
                            }
                            if (CommonUtil.convertObjToStr(obj[o]).equalsIgnoreCase("END_DATE")) {
                                strParamToDt = CommonUtil.convertObjToStr(obj[o]);
                            }
                        }
                        result = validateDates((Date) ((HashMap) paramlist.get(strParamFromDt)).get("PARAM_VALUE"),
                                (Date) ((HashMap) paramlist.get(strParamToDt)).get("PARAM_VALUE"));
                        if (!result) {
                            errorMap.put("START DATE and END DATE", "START DATE cannot be higher than END DATE.");
                        }
                    }

                    //                        strResult  = isFormat(paramBean);
                    //                        if(strResult.length()>0){
                    //                           result = false;
                    //                           errorMap.put(paramBean.getParamName(),"Value in "+strParamName+" should be "+strResult);
                    //                        }
                }

            }
        }
        return result;
    }

    private static void showReport(final String reportname, HashMap paramMap, JasperDesign jasperDesign) {

//        System.out.println("Parameter Map inside showReport : " + paramMap);
        String exportPath = "C:/CBMSReport/";
        LinkedHashMap finalParamMap = new LinkedHashMap();
        HashMap tempMap = new HashMap();
        Object keys[] = paramMap.keySet().toArray();
        String paramStrValue = "";
        for (int i = 0; i < keys.length; i++) {
            tempMap = (HashMap) paramMap.get(keys[i]);
            paramStrValue = CommonUtil.convertObjToStr(tempMap.get("PARAM_VALUE"));
            if (!paramStrValue.equals("") || paramStrValue.length() > 0) {
                //                finalParamMap.put(keys[i], tempMap.get("PARAM_VALUE"));
                finalParamMap.put(tempMap.get("PARAM_NAME"), tempMap.get("PARAM_VALUE"));
            } else {
                finalParamMap.put(tempMap.get("PARAM_NAME"), tempMap);
            }
        }
        finalParamMap.put("USER_ID", com.see.truetransact.ui.TrueTransactMain.USER_ID); // Added by nithya on 13-01-2020 -- Displaying user id in reports
        System.out.println("finalParamMap inside showReport : " + finalParamMap);
        Runtime.getRuntime().gc();
        HashMap where = new HashMap();
        where.put(CommonConstants.MAP_NAME, "GET_JASPER_REPORT_PRINT");
        where.put(CommonConstants.MAP_WHERE, finalParamMap);
        where.put("CHECK_BOX", isCheckClicked);
        where.put("BRANCH_CODE", com.see.truetransact.ui.TrueTransactMain.BRANCH_ID);
        where.put("REPORT_NAME", reportname);
        where.put("JASPER_DESIGN", jasperDesign);
        try {
            // create the proxy
            where = proxy.executeQuery(where, mapJNDI);

            JasperPrint jasperPrint = null;
            if (where != null && where.size() > 0 && ((List) where.get(CommonConstants.DATA)).size() > 0) {
                jasperPrint = (JasperPrint) ((List) where.get(CommonConstants.DATA)).get(0);
                JasperViewer.viewReport(jasperPrint, reportname + " - CBMS++", false);
                
                // Added by nithya on 13 Mar 2025 for Excel export KD-3934
                  if (where != null && where.size() > 0 && where.containsKey("EXCEL_OUTPUT")) {
                    //System.out.println("rs output : " + where.get("EXCEL_OUTPUT"));
                    DateFormat dateFormat = new SimpleDateFormat("dd-MM-YYYY hhmm");
                    Calendar calender = Calendar.getInstance();
                    dateFormat.format(calender.getTime());
                    byte[] output = (byte[]) where.get("EXCEL_OUTPUT");
                    if (output != null && output.length > 0) {
                         HashMap pathMap = new HashMap();
                        List list;
                        pathMap.put("CBMS_KEY", "EXCEL_REPORT_EXPORT_PATH");
                        list = ClientUtil.executeQuery("getSelectCbmsParameterValues", pathMap);
                        if (list != null && list.size() > 0) {
                            pathMap = (HashMap) list.get(0);
                            if (CommonUtil.convertObjToStr(pathMap.get("CBMS_VALUE")).length() > 0) {                                
                                exportPath = CommonUtil.convertObjToStr(pathMap.get("CBMS_VALUE"));
                            }
                        }
                        File someFile = new File(exportPath);
//                        FileOutputStream fos = new FileOutputStream(someFile);
                        if (!someFile.exists()) {
                            someFile.mkdir();
                        }
                        someFile = new File(exportPath + reportname + "_" + dateFormat.format(calender.getTime()) + ".xls");
                        FileOutputStream fos = new FileOutputStream(someFile);
                        fos.write(output);
                        fos.flush();
                        fos.close();
                        output = null;
                        System.out.println("Data is saved in excel file-" + reportname);
                    }
                }
                  
                  
            } else {
                ClientUtil.showMessageWindow("No data found...");
            }
        } catch (Exception e) {
            ClientUtil.showMessageWindow("No data found..." + e);
            e.printStackTrace();
        }
        //        try {
        //            // create the proxy
        //            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
        //            java.sql.Connection jdbcConnection = connectDB(serverProperties.getProperty("url"),
        //                                                  serverProperties.getProperty("username"),
        //                                                  serverProperties.getProperty("password"));
        //            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, finalParamMap, jdbcConnection);
        //            JasperViewer.viewReport(jasperPrint, false);
        //        } catch (Exception e) {
        //            e.printStackTrace();
        //        }

        Runtime.getRuntime().gc();
    }

    //   public static boolean getParamValues(ReportInfo repinfo, String reportName){
    //        isOkClicked = false;
    ////        jLabel1.setText("Building parameter window..");
    //        LinkedHashMap map = repinfo.getLinkedParamlist();
    //        String roleID = repinfo.getRoleID();
    //        boolean blnOk =false;
    //        final ReportInfo repInfo = repinfo;
    //        javax.swing.JFrame ImageFrame = new javax.swing.JFrame();
    ////        ImageFrame.setIconImage(new  javax.swing.ImageIcon(getClass().getResource("/resources/iieserver/columns.GIF")).getImage());
    //        final JDialog jDlgParam = new JDialog(ImageFrame);
    //        jDlgParam.setModal(true);
    //        java.awt.Dimension screensize = new java.awt.Dimension();
    //        java.awt.Toolkit tool = java.awt.Toolkit.getDefaultToolkit();
    //        screensize = tool.getScreenSize();
    //        final LinkedHashMap parammap = repinfo.getLinkedParamlist();
    ////        System.out.println("parammap_______"+parammap);
    //        System.out.println("inside getParamValues...");
    //
    //        Set keys = parammap.keySet();
    //        Object obj[]  = keys.toArray();
    //        int intNoOfParams = parammap.size();
    //        int intCols = 2;
    //        int intRows = 0;
    //        int intHeight = 0;
    //        boolean iiss = false;
    //        if(intNoOfParams>6)
    //            intHeight = 300;
    //        else
    //            intHeight = (intNoOfParams*40)+50;
    //
    //        jDlgParam.setResizable(false);
    //        jDlgParam.setSize(350,intHeight);
    //        jDlgParam.setTitle("Enter Parameter Values for : "+reportName);
    //
    //        jDlgParam.setLocation(screensize.width/4,screensize.height/4);
    //        jDlgParam.getContentPane().setLayout(new java.awt.GridBagLayout());
    //
    //
    //            Object dynamicParamMapKey[]= null;
    //            dynamicParamMapKey =   parammap.keySet().toArray();
    //            javax.swing.JScrollPane srpReportParameter = new javax.swing.JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    //            srpReportParameter.setMinimumSize(new java.awt.Dimension(300, 225));
    //            javax.swing.JPanel jPanelParam = new javax.swing.JPanel(new java.awt.GridBagLayout());
    //            jPanelParam.setBorder(new javax.swing.border.LineBorder(java.awt.Color.LIGHT_GRAY,0));
    //
    //            javax.swing.JLabel lblParam[] = new javax.swing.JLabel[dynamicParamMapKey.length];
    //            javax.swing.JLabel lblFormat[] = new javax.swing.JLabel[dynamicParamMapKey.length];
    //            CTextField txtParam[] = new CTextField[dynamicParamMapKey.length];
    //            javax.swing.JCheckBox chkParam[] = new javax.swing.JCheckBox[dynamicParamMapKey.length];
    //            com.see.truetransact.uicomponent.CDateField cDatefield[] = new com.see.truetransact.uicomponent.CDateField[dynamicParamMapKey.length];
    //            com.see.truetransact.uicomponent.CComboBox cComboBox[] = new com.see.truetransact.uicomponent.CComboBox[dynamicParamMapKey.length];
    //            int dynamicParamMapKeyCount = dynamicParamMapKey.length;
    //            int intCount = 0;
    //            com.see.iie.utils.DataConnect dataConnect = null;
    //            java.sql.Connection con = null;
    //            for(int i=0;i<dynamicParamMapKeyCount;i++){
    //                    if(!dynamicParamMapKey[i].toString().equalsIgnoreCase("reportname") && !(parammap.get(dynamicParamMapKey[i].toString()) instanceof LinkedHashMap)){
    //
    //                        String strOptional = "";
    //                        String strFormat = "";
    //
    //                        String strText = "";
    //                        boolean blnDate  = false;
    //                        boolean comboBln = false;
    //                        if(parammap.get(dynamicParamMapKey[i].toString()) instanceof ParameterBean){
    //                            ParameterBean  paramBean =  (ParameterBean)parammap.get(dynamicParamMapKey[i].toString());
    //                            if(paramBean.getDataType()==91 || paramBean.getDataType()==93){
    //                                blnDate =  true;
    //                                cDatefield[i] = new com.see.truetransact.uicomponent.CDateField(false);
    //
    //                            } else if((paramBean.getDataType()==12 && paramBean.getAggregateFunc()!=null && paramBean.getAggregateFunc().size()>0)) {
    //                                com.see.truetransact.clientutil.ComboBoxModel cbm = new com.see.truetransact.clientutil.ComboBoxModel();
    //                                cbm.addElement("");
    //                                int length = 0;
    //                                ArrayList arrList = paramBean.getAggregateFunc();
    //                                System.out.println("$#$# arrList.size() (combo box values) in getParamValues : "+arrList.size());
    //                                for (int e=0;e<arrList.size();e++)
    //                                    cbm.addElement(arrList.get(e));
    //                                paramBean.setAggregateFunc(null);
    //                                arrList=null;
    //                                cComboBox[i]= new com.see.truetransact.uicomponent.CComboBox();
    //                                cComboBox[i].setEditable(true);
    //                                cComboBox[i].setSize(length*18, 21);
    //                                cComboBox[i].setModel(cbm);
    //                                comboBln = true;
    //                            } else {
    //                                txtParam[i] = new CTextField();
    //                                txtParam[i].setAllowAll(true);
    //                            }
    //                            System.out.println("@#@# roleID from IIEConfig : "+roleID);
    //                            if(paramBean.getParamValue()!=null && paramBean.getParamValue().length()>0){
    //                                strText = paramBean.getParamValue();
    //                                if((!blnDate)&&(!comboBln)) {
    //                                    if(!roleID.equals("ROL01"))
    //                                        txtParam[i].setEnabled(false);
    //                                }
    //                            }
    //
    //                            paramBean.setParamName(dynamicParamMapKey[i].toString());
    //
    //                            if(paramBean.getParamType()==null || paramBean.getParamType().equals("M"))
    //                                strOptional = "*";
    //
    //                            if(paramBean.getParamFormat()!=null && paramBean.getParamFormat().length()>0)
    //                                strFormat= paramBean.getParamFormat();
    //
    //                        }else
    //                            blnDate =  false;
    //
    //                        lblParam[i] = new javax.swing.JLabel();
    //                        String lblCaption= dynamicParamMapKey[i].toString();
    //                        lblCaption = lblCaption.replaceAll("_"," ");
    //                        if(lblCaption.indexOf(".")>0)
    //                            lblCaption = lblCaption.substring(lblCaption.lastIndexOf(".")+1,lblCaption.length());
    //                        lblParam[i].setText(lblCaption+" "+strOptional);
    //                        lblParam[i].setName("lbl_"+dynamicParamMapKey[i].toString());
    //                        java.awt.GridBagConstraints  gridBagConstraints = new java.awt.GridBagConstraints();
    //                        gridBagConstraints.gridx = 0;
    //                        gridBagConstraints.gridy = (i+1);
    //                        gridBagConstraints.insets = new java.awt.Insets(4, 3, 4, 3);
    //                        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    //                        jPanelParam.add(lblParam[i], gridBagConstraints);
    //
    //                         if(!blnDate && !comboBln){
    //                            txtParam[i].setText(strText);
    //                            txtParam[i].setName("txt_"+dynamicParamMapKey[i].toString());
    //                            txtParam[i].setMinimumSize(new java.awt.Dimension(100, 21));
    //                            txtParam[i].setPreferredSize(new java.awt.Dimension(100, 21));
    //                         } else if(comboBln) {
    //                             if (strText.length()>0)
    //                                cComboBox[i].setSelectedItem(strText);
    //                             cComboBox[i].setName("cbo_"+dynamicParamMapKey[i].toString());
    //                         } else {
    //                             cDatefield[i].setDateValue(strText);
    //                             cDatefield[i].setToolTipText("Please choose the date using this control.");
    //                             cDatefield[i].setName("txt_"+dynamicParamMapKey[i].toString());
    //                             cDatefield[i].setMinimumSize(new java.awt.Dimension(100, 21));
    //                             cDatefield[i].setPreferredSize(new java.awt.Dimension(100, 21));
    //                         }
    //
    //                        gridBagConstraints = new java.awt.GridBagConstraints();
    //                        gridBagConstraints.gridx = 1;
    //                        gridBagConstraints.gridy = (i+1);
    //                        gridBagConstraints.insets = new java.awt.Insets(4, 3, 4, 3);
    //
    //                        if(!blnDate && !comboBln)
    //                            jPanelParam.add(txtParam[i], gridBagConstraints);
    //                        else if (comboBln)
    //                            jPanelParam.add(cComboBox[i], gridBagConstraints);
    //                        else
    //                            jPanelParam.add(cDatefield[i], gridBagConstraints);
    //                    }
    //                    intCount = i;
    //            }
    //        srpReportParameter.setViewportView(jPanelParam);
    //        java.awt.GridBagConstraints  gridBagConstraints = new java.awt.GridBagConstraints();
    //        gridBagConstraints.gridx = 0;
    //        gridBagConstraints.gridy = 0;
    //        gridBagConstraints.weightx = 1;
    //        gridBagConstraints.weighty = 1;
    //        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    //        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 0);
    //
    //        jDlgParam.getContentPane().add(srpReportParameter,gridBagConstraints);
    //
    //        JPanel buttonPanel  = new JPanel();
    //        JButton okButton = new JButton("OK");
    //        JButton cancelButton = new JButton("CANCEL");
    //        JLabel gaplbl = new JLabel();
    //        gaplbl.setText("    ");
    //        //gaplbl.setSize(50,10);
    //        buttonPanel.setLayout(new java.awt.GridBagLayout());
    //        buttonPanel.add(okButton);
    //        buttonPanel.add(gaplbl);
    //        buttonPanel.add(cancelButton);
    //        buttonPanel.setMinimumSize(new java.awt.Dimension(200,50));
    //        buttonPanel.setAlignmentX(CENTER_ALIGNMENT);
    //        buttonPanel.setAlignmentY(CENTER_ALIGNMENT);
    //
    //        gridBagConstraints = new java.awt.GridBagConstraints();
    //        gridBagConstraints.gridx = 0;
    //        gridBagConstraints.gridy = 2;
    //        gridBagConstraints.anchor = java.awt.GridBagConstraints.CENTER;
    //        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    //        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
    //        jDlgParam.getContentPane().add(buttonPanel,gridBagConstraints);
    //
    //        cancelButton.addActionListener(new ActionListener(){
    //            public void actionPerformed(ActionEvent ae){
    //                    jDlgParam.dispose();
    //                    jDlgParam.setTitle("C");
    //            }
    //        });
    //        okButton.addActionListener(new ActionListener(){
    //            public void actionPerformed(ActionEvent ae){
    //                Component comps = jDlgParam.getContentPane().getComponent(0);
    //                  if( comps  instanceof javax.swing.JScrollPane){ // scrollpane returns
    //
    //                    javax.swing.JScrollPane srPane = (JScrollPane)comps;
    //                    Component[] components = srPane.getViewport().getComponents(); //getting the viewport from scrollpane
    //                        if( components[0]  instanceof javax.swing.JPanel){
    //                            javax.swing.JPanel panel= (javax.swing.JPanel)components[0];
    //                            for(int j=0;j<panel.getComponentCount();j++){
    //                               Component comp = panel.getComponent(j);
    //                               System.out.println("name "+j+"   "+comp.getName());
    //                               String strCompName = "";
    //                               String strCompValue = "";
    //                               if(comp.getName()!=null && comp.getName().startsWith("txt")){
    //
    //                                   ParameterBean paramBean = (ParameterBean)parammap.get(comp.getName().substring(4,comp.getName().length()));
    //                                   if(paramBean!=null){
    //                                       System.out.println("@#@#@#@# comp.getName() : "+comp.getName());
    //                                       System.out.println("@#@#@#@# com.see.rep.util.Constants.NUM_OF_ROWS_TO_FETCH : "+com.see.rep.util.Constants.NUM_OF_ROWS_TO_FETCH);
    //                                       if((comp.getName().equals("txt_"+com.see.rep.util.Constants.NUM_OF_ROWS_TO_FETCH)) ){
    //                                           String strValue  =((JTextField)comp).getText();
    //                                           System.out.println("@#@#@#@# strValue : "+strValue);
    //                                           if(strValue.length()==0){  //if nothing is entered then default value is 1000
    ////                                                paramBean.setParamValue("1000");
    ////                                                no_of_rows_per_page = 1000;
    //                                                no_of_rows_per_page = 0;
    //                                           }else{ // just accept the  value
    //                                               if(strValue.equalsIgnoreCase("ALL"))
    ////                                                    no_of_rows_per_page = 10000;
    //                                                    no_of_rows_per_page = 0;
    //                                               else{
    //                                                   boolean blnNumFormat = true;
    //                                                   try{
    //                                                        no_of_rows_per_page = Integer.parseInt(((JTextField)comp).getText());
    //                                                   }catch(Exception ex){
    //                                                       blnNumFormat = false;
    //                                                   }
    //                                                   if(blnNumFormat==false){
    //                                                       ((JTextField)comp).setText("ALL");
    //                                                        no_of_rows_per_page = 0;
    //                                                   }
    //                                               }
    //                                            }
    //                                            if (no_of_rows_per_page>0)
    //                                                paramBean.setParamValue(String.valueOf(no_of_rows_per_page));
    //                                            else
    //                                                paramBean.setParamValue("all");
    //                                            parammap.put(comp.getName().substring(4,comp.getName().length()),paramBean );
    //                                       }
    //                                       else{
    //                                           strCompName = comp.getName().substring(4,comp.getName().length());
    //                                            if(paramBean.getDataType()==91 || paramBean.getDataType()==93){
    //                                                strCompValue = ((com.see.truetransact.uicomponent.CDateField)comp).getDateValue();
    //                                                String strCompValueArr[] = strCompValue.split("/");
    //                                                if(strCompValueArr.length==3)
    //                                                    strCompValue = strCompValueArr[1]+"/"+strCompValueArr[0]+"/"+strCompValueArr[2];
    //                                                System.out.println("Date Convertion to mm/dd/yyyy value "+strCompValue);
    //                                            } else
    //                                                strCompValue = ((JTextField)comp).getText();
    //                                            paramBean.setParamValue(strCompValue);
    //                                            paramBean.setParamName(strCompName);
    //                                            parammap.put(strCompName,paramBean );
    //                                       }
    //                                       System.out.println("#$#$#$#$ no_of_rows_per_page : "+no_of_rows_per_page);
    //                                   }
    //                                   else
    //                                   {
    //                                       //System.out.println("Creating parameter bean for "+comp.getName().substring(4,comp.getName().length()));
    //                                       ParameterBean parambean = new ParameterBean();
    //                                       parambean.setParamName(comp.getName().substring(4,comp.getName().length()));
    //                                       parambean.setParamType("M");
    //                                       parambean.setParamValue(((JTextField)comp).getText());
    //                                       parammap.put(comp.getName().substring(4,comp.getName().length()),parambean);
    //                                   }
    //                                } else if(comp.getName()!=null && comp.getName().startsWith("cbo")) {
    //                                    strCompValue = ((com.see.truetransact.uicomponent.CComboBox)comp).getSelectedItem().toString();
    //                                    ParameterBean paramBean = (ParameterBean)parammap.get(comp.getName().substring(4,comp.getName().length()));
    //                                    if(paramBean!=null){
    //                                        paramBean.setParamValue(strCompValue);
    //                                        paramBean.setParamName(strCompName);
    //                                        parammap.put(strCompName,paramBean );
    //                                    }
    //                                }
    //                            }
    //                            intRowValue =  no_of_rows_per_page;
    ////                            jTxtNoOfRows.setText(String.valueOf(intRowValue));
    //
    //                        }
    //                  }
    //                     if( comps.getName()!=null && comps.getName().startsWith("lbl") ){
    //                            ParameterBean paramBean = (ParameterBean)parammap.get(comps.getName().substring(4,comps.getName().length()));
    //                            paramBean.setParamValue(((JTextField)comps).getText());
    //                            parammap.put(comps.getName().substring(4,comps.getName().length()),paramBean );
    //                            ((JTextField)comps).setText("");
    //                    }
    //
    //
    //                    if(!validateField(parammap)){
    ////                        LinkedHashMap errorMap = getErrorMap();
    //                        StringBuffer errorMsg = new StringBuffer();
    //                        //System.out.println("Error Map "+errorMap);
    //                        Object keys[] = errorMap.entrySet().toArray();
    //                        Object values[] = errorMap.values().toArray();
    //                        for(int i=0;i<errorMap.size();i++){
    //                            //System.out.println("errorMap value "+(String)values[i]);
    //                            errorMsg.append((String)values[i]+"\n");
    //                        }
    //                        JOptionPane.showMessageDialog(null,errorMsg.toString());
    //                    }else{
    //                        repInfo.setParamlist(parammap);
    //                        jDlgParam.setVisible(false);
    //                        isOkClicked = true;
    //                }
    //
    //        }});
    //        System.out.println("Title "+jDlgParam.getTitle());
    //        jDlgParam.show();
    //        blnOk =  isOkClicked;
    ////        jLabel1.setText("Enter parameter values.. Select Optional/Manual Check box if needed");
    //        System.out.println("isokclicked "+blnOk);
    //        return blnOk;
    //    }
    //   public static boolean validateField(LinkedHashMap paramlist){
    //        boolean result=true;
    //
    //        Object keys[] = paramlist.keySet().toArray();
    //        System.out.println("paramlist "+paramlist);
    //        errorMap.clear();
    //        for(int i=0;i< paramlist.size();i++){
    //            if(paramlist.get(keys[i]) instanceof ParameterBean){
    //                ParameterBean paramBean = (ParameterBean) paramlist.get(keys[i]);
    //
    //                //If param type is null then treat that as a mandatory field
    //                if(paramBean.getParamType()==null)
    //                    paramBean.setParamType("M");
    //
    //                if(paramBean.getParamName()==null)
    //                    paramBean.setParamName((String)keys[i]);
    //
    ////              tiny int = -6       float   = 6     date   	  = 91
    ////              smallint = 5        double  = 8     timestamp = 93
    ////              numeric  = 2        decimal = 3
    ////              integer  = 4        bigint = - 5
    //
    //                //DateFormat.getInstance().
    //                String strParamName = paramBean.getParamName().replaceAll("_"," ");
    //                if(strParamName.indexOf(".")>0)
    //                     strParamName= strParamName.substring(strParamName.lastIndexOf(".")+1,strParamName.length());
    //
    //                if( (!(paramlist.get(keys[i]) instanceof LinkedHashMap)) && (!paramBean.getParamName().equalsIgnoreCase(com.see.rep.util.Constants.NUM_OF_ROWS_TO_FETCH)) && paramBean.getParamType().equalsIgnoreCase("M"))     {
    //                       System.out.println("ParamName "+paramBean.getParamName());
    //                       if((paramBean.getParamValue()==null || paramBean.getParamValue().length()==0)){
    //
    //                            errorMap.put(paramBean.getParamName(),"Value in "+strParamName+" cannot be Empty");
    //                            result = false;
    //                       }
    //                       else{                             // if the value is not empty then check for validation
    //                           //check for optional also
    //                            String strResult = "";
    //
    //                            if(paramBean.getParamName().equalsIgnoreCase("FROMDATE")||paramBean.getParamName().equalsIgnoreCase("TODATE") ){
    //                                result = validateDates(((ParameterBean)paramlist.get("FROMDATE")).getParamValue(),((ParameterBean)paramlist.get("TODATE")).getParamValue());
    //                                if(!result)
    //                                    errorMap.put("FROMDATE and TODATE","FROMDATE cannot be higher than TODATE.");
    //                            }
    //
    //                            if(paramBean.getParamName().equalsIgnoreCase("START_DATE")||paramBean.getParamName().equalsIgnoreCase("END_DATE") ){
    //                                result = validateDates(((ParameterBean)paramlist.get("START_DATE")).getParamValue(),((ParameterBean)paramlist.get("END_DATE")).getParamValue());
    //                                if(!result)
    //                                    errorMap.put("START DATE and END DATE","START DATE cannot be higher than END DATE.");
    //                            }
    //
    //                            strResult  = isFormat(paramBean);
    //                            if(strResult.length()>0){
    //                               result = false;
    //                               errorMap.put(paramBean.getParamName(),"Value in "+strParamName+" should be "+strResult);
    //                            }
    //                       }
    //
    //               }
    //            }
    //        }
    //            return result;
    //    }
    public static boolean validateDates(Date fromDate, Date toDate) {
        boolean result = true;
        //            String fmt = "mm/dd/yyyy";
        java.util.TimeZone tz = java.util.TimeZone.getDefault();
        System.out.println("Default timezone is " + tz);
        Calendar cal1 = null;
        Calendar cal2 = null;

        if (tz == null) {
            cal1 = Calendar.getInstance();
            cal2 = Calendar.getInstance();
        } else {
            cal1 = Calendar.getInstance(tz);
            cal2 = Calendar.getInstance(tz);
        }


        // different date might have different offset
        //            cal1.setTime(date1);
        cal1.setTime(fromDate);
        long ldate1 = fromDate.getTime() + cal1.get(Calendar.ZONE_OFFSET) + cal1.get(Calendar.DST_OFFSET);

        //            cal2.setTime(date2);
        cal2.setTime(toDate);
        long ldate2 = toDate.getTime() + cal2.get(Calendar.ZONE_OFFSET) + cal2.get(Calendar.DST_OFFSET);

        // Use integer calculation, truncate the decimals
        int hr1 = (int) (ldate1 / 3600000); //60*60*1000
        int hr2 = (int) (ldate2 / 3600000);

        int days1 = (int) hr1 / 24;
        int days2 = (int) hr2 / 24;


        int dateDiff = days2 - days1;
        int weekOffset = (cal2.get(Calendar.DAY_OF_WEEK) - cal1.get(Calendar.DAY_OF_WEEK)) < 0 ? 1 : 0;
        int weekDiff = dateDiff / 7 + weekOffset;
        int yearDiff = cal2.get(Calendar.YEAR) - cal1.get(Calendar.YEAR);
        int monthDiff = yearDiff * 12 + cal2.get(Calendar.MONTH) - cal1.get(Calendar.MONTH);


        System.out.println();
        System.out.println("DateTime 1: " + fromDate);
        System.out.println("DateTime 2: " + toDate);

        System.out.println("Date difference : " + dateDiff);
        System.out.println("Week difference : " + weekDiff);
        System.out.println("Month difference: " + monthDiff);
        System.out.println("Year difference : " + yearDiff);

        if (dateDiff < 0 || weekDiff < 0 || monthDiff < 0 || yearDiff < 0) {
            result = false;
        }
        return result;
    }

    public static void integration(Object[] reportnames) {

        if (reportnames == null || reportnames[0] == null) {
            System.out.println("Reports are not available.");
            return;
        }

        String reportname = (String) reportnames[0];
        /* For getting multiple reports in a List.
         */
        if (reportnames.length > 1) {
            System.out.println("More than 1 report");
            ListReports listreports = new ListReports();
            reportname = listreports.populateCombo(reportnames);
            //System.out.println("Reportname is "+reportname);
            if (reportname == null) {
                System.out.println("NO REPORT CHOSEN.CLOSE BUTTON CLICKED");
                return;
            }
        }
        integration(reportname);
    }

    private static class ReportWindowListener extends java.awt.event.WindowAdapter {

        com.see.reporttool.ui.DesignReportTemplate objDesignReportTemplate = null;
        DefaultTableModel objDefaultTableModel = null;

        public ReportWindowListener(com.see.reporttool.ui.DesignReportTemplate objDesign, DefaultTableModel objModel) {
            objDesignReportTemplate = objDesign;
            objDefaultTableModel = objModel;
            System.out.println("#$##@# Inside reportwindowlistener ...");
        }

        public void windowClosing(java.awt.event.WindowEvent we) {
            System.out.println("#$##@# Inside windowClosing ... made null");
            objDesignReportTemplate = null;
            objDefaultTableModel = null;
            Runtime.getRuntime().gc();
        }

        public void windowClosed(java.awt.event.WindowEvent we) {
            System.out.println("#$##@# Inside windowClosed ... made null");
            objDesignReportTemplate = null;
            objDefaultTableModel = null;
            Runtime.getRuntime().gc();
        }

        public void windowDeactivated(java.awt.event.WindowEvent we) {
            System.out.println("#$##@# Inside windowDeactivated ... made null");
            objDesignReportTemplate = null;
            objDefaultTableModel = null;
            Runtime.getRuntime().gc();
        }
    }

    //For auto printing from TT
    //    public static void integration(String reportname, LinkedHashMap paramMap){
    ////        String clientTemplatePath = ClientConstants.REPORT_TEMPLATE;
    //        String clientTemplatePath = "D:\\TTR\\IIEHome\\FileServer\\GRP00001System Administratorsysadmin\\ReportTemplates\\Clientside";
    //        System.out.println("before printReport");
    //        printReport(reportname,clientTemplatePath,paramMap);
    //    }
    //    private static void printReport(final String reportname,String clientTemplatePath, LinkedHashMap paramMap){
    //        Object obj = RnWReportTemplate.read(clientTemplatePath+"\\"+reportname+"_ClientConfig");
    //        System.out.println("Opening "+clientTemplatePath+"\\"+reportname+"_ClientConfig");
    //
    //        paramMap.put("reportname", reportname);
    //
    //        DefaultTableModel objDefaultTableModel = new DefaultTableModel();
    //        objDefaultTableModel= rw.getTableModelData(paramMap, ClientConstants.REPORT_USER, java.net.URLEncoder.encode(ClientConstants.REPORT_PWD));
    //        System.out.println("reportname:" + reportname);
    //        System.out.println("clientTemplatePath:" + clientTemplatePath);
    //        String outputFileName = clientTemplatePath.substring( 0, clientTemplatePath.lastIndexOf("\\")) + "\\PDFs\\" + reportname + ".pdf";
    //        System.out.println("clientTemplatePath NEW : " + clientTemplatePath );
    ////        com.see.reporttool.ui.DesignReportTemplate objDesignReportTemplate = new com.see.reporttool.ui.DesignReportTemplate(clientTemplatePath+"\\"+reportname+"_ClientConfig",objDefaultTableModel);
    //
    //        RnWReportTemplate rnwTemplate = new RnWReportTemplate ();
    //        rnwTemplate.executeWithSameData(obj, outputFileName ,objDefaultTableModel, false);
    ////        rnwTemplate.PrintWithSameData(obj, objDefaultTableModel);
    //        try{
    //            printToPrinter(outputFileName);
    //        }catch(Exception E){
    //            E.printStackTrace();
    //        }
    //    }
    private static void printToPrinter(String outputFile) throws Exception {
        String osName = System.getProperty("os.name");
        if (osName.equals("Windows 95") || osName.equals("Windows 98")) {
            //FOR WINDOWS 95 AND 98 USE COMMAND.COM
            System.out.println("Windows 95");
            String command = "command.com /C start Acrord32 /p /h " + outputFile;
            Runtime.getRuntime().exec(command);
            Thread.sleep(10000);
            command = "tskill Acrord32";
            Runtime.getRuntime().exec(command);
        } else {
            //FOR WINDOWS NT/XP/2000 USE CMD.EXE
            System.out.println("Windows XP");
            //            String command = "cmd Acrord32 " + outputFile;
            //            String command = "cmd start /c echo %ADOBE_PATH%";
            //            String command = "cmd start /c %ADOBE_PATH% /P \"D:\\TTR\\IIEHome\\FileServer\\GRP00001System Administratorsysadmin\\ReportTemplates\\PDFs\\UserLoginStatus.pdf\"";
            EnvironmentVariables env = new EnvironmentVariables();
            System.out.println("env : " + env);

            String TT_TEMPLATE_PATH = (String) env.get("IIE_HOME") + "\\FileServer\\GRP00001System Administratorsysadmin\\ReportTemplates";
            String command = (String) env.get("ADOBE_PATH") + " /P " + outputFile;
            System.out.println("command : " + command);
            System.out.println("TT_TEMPLATE_PATH : " + TT_TEMPLATE_PATH);
            Runtime.getRuntime().exec(command);
            //            String[] str = {"cmd.exe notepad"};
            //            Runtime.getRuntime().exec(str);
            System.out.println("2");
            //Thread.sleep(10000);
            command = "tskill Acrord32";
            //            Runtime.getRuntime().exec(command);
        }
    }

    //Added by Arun for Dashboard checking
    //    public static class MyThread extends Thread {
    //        int i=0;
    //        public void run() {
    //            while(true)
    //                try {
    //                currentThread().sleep(60000);
    //                System.out.println("Waken uop");
    //
    //                    DefaultTableModel objDefaultTableModel = new DefaultTableModel();
    //                    objDefaultTableModel= rw.getTableModelData(paramMap, ClientConstants.REPORT_USER, java.net.URLEncoder.encode(ClientConstants.REPORT_PWD));
    //                    thread.setTableModel(objDefaultTableModel);
    //                    i=1;
    //                    System.out.println("Table 1");
    //              }catch(Exception e) {}
    //        }
    //  }
    public static void main(String args[]) throws Exception {

//        new TTIntegration().show();
        TTIntegration ttIntgration = new TTIntegration();
        HashMap paramMap = new HashMap();
//        Date dt = new Date(2012-1900, 0, 2);
//        paramMap.put("TransDt", dt);
//        paramMap.put("BranchId", "0001");
//        paramMap.put("TransId", "C0000070");
        paramMap.put("Act_Num", "0001308130937");
        ttIntgration.setParam(paramMap);
//        ttIntgration.integrationForPrint("cashReceipt");
        ttIntgration.integrationForPrint("Goldbond");

        //        String out = "D:\\TTReport\\FileServer\\sysadminROL01sysadmin\\ReportTemplates\\PDFs\\SubDay.pdf" ;
        //        HashMap paramMap = new HashMap();
        //        paramMap.put("NO_OF_ROWS_PER_PAGE", "all");
        //        //paramMap.put("BRANCH_CODE", TrueTransactMain.BRANCH_ID)
        //        paramMap.put("BRANCH_CODE", "ABC50001");
        //        paramMap.put("A/C_HEAD_ID", "SB");
        //        paramMap.put("SUB_DAY_DATE", "04/14/2004");
        //        TTIntegration.printReport("ChqBookRegister","D:\\TTReport\\FileServer\\sysadminROL01sysadmin\\ReportTemplates\\ClientSide",paramMap);
        // Runtime.getRuntime().exec("notepad.exe");
        // System.out.println("finished");
    }

    /**
     * Getter for property actNum.
     * @return Value of property actNum.
     */
    public static java.lang.String getActNum() {
        return actNum;
    }

    public static void setParam(HashMap parMap) {
        System.out.println("@@@@" + parMap);
        if(parMap.containsKey("MemberNo")){
			memberfield.setText(CommonUtil.convertObjToStr(parMap.get("MemberNo")));
        }
        passBookPar = parMap;
    }

    /**
     * Getter for property act_num.
     * @return Value of property act_num.
     */
    public java.lang.String getAct_num() {
        return act_num;
    }

    /**
     * Setter for property act_num.
     * @param act_num New value of property act_num.
     */
    public void setAct_num(java.lang.String act_num) {
        this.act_num = act_num;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
